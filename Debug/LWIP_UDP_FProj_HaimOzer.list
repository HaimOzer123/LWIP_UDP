
LWIP_UDP_FProj_HaimOzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003344  08017b74  08017b74  00018b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aeb8  0801aeb8  0001c1c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801aeb8  0801aeb8  0001beb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aec0  0801aec0  0001c1c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aec0  0801aec0  0001bec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aec4  0801aec4  0001bec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801aec8  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0801af50  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0801aff0  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d00  200001c8  0801b090  0001c1c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008ec8  0801b090  0001cec8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c1c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034031  00000000  00000000  0001c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007ffd  00000000  00000000  00050229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000027a0  00000000  00000000  00058228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f61  00000000  00000000  0005a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039b2f  00000000  00000000  0005c929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004448a  00000000  00000000  00096458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116dcc  00000000  00000000  000da8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001f16ae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ae80  00000000  00000000  001f16f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  001fc574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017b5c 	.word	0x08017b5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08017b5c 	.word	0x08017b5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 fb98 	bl	8001ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f822 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fb7e 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 fb56 	bl	8000c70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 faf6 	bl	8000bb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 fb24 	bl	8000c14 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005cc:	f00a fe52 	bl	800b274 <MX_LWIP_Init>
  MX_UART5_Init();
 80005d0:	f000 fa90 	bl	8000af4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 fabe 	bl	8000b54 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d8:	f000 f87a 	bl	80006d0 <MX_ADC1_Init>
  MX_DAC_Init();
 80005dc:	f000 f8ca 	bl	8000774 <MX_DAC_Init>
  MX_TIM2_Init();
 80005e0:	f000 f9ea 	bl	80009b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e4:	f000 fa36 	bl	8000a54 <MX_TIM3_Init>
  MX_SPI1_Init();
 80005e8:	f000 f96e 	bl	80008c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005ec:	f000 f9aa 	bl	8000944 <MX_SPI2_Init>
  MX_I2C2_Init();
 80005f0:	f000 f8ea 	bl	80007c8 <MX_I2C2_Init>
  MX_I2C4_Init();
 80005f4:	f000 f928 	bl	8000848 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rtg_main();
 80005f8:	f015 fb6a 	bl	8015cd0 <rtg_main>
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0x4c>

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f016 fc4c 	bl	8016eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f006 f976 	bl	8006914 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a26      	ldr	r2, [pc, #152]	@ (80006c8 <SystemClock_Config+0xc8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	@ (80006cc <SystemClock_Config+0xcc>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000674:	2348      	movs	r3, #72	@ 0x48
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800067c:	2303      	movs	r3, #3
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f006 f955 	bl	8006934 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 fbd2 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fbe3 	bl	8006e7c <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 fbbc 	bl	8000e38 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	@ 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <MX_ADC1_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <MX_ADC1_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_ADC1_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000730:	f001 fb5c 	bl	8001dec <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fb7d 	bl	8000e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000750:	f001 fe58 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fb6d 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001e4 	.word	0x200001e4
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_DAC_Init+0x4c>)
 8000784:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <MX_DAC_Init+0x50>)
 8000786:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000788:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <MX_DAC_Init+0x4c>)
 800078a:	f002 f9a6 	bl	8002ada <HAL_DAC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000794:	f000 fb50 	bl	8000e38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <MX_DAC_Init+0x4c>)
 80007a8:	f002 fa1d 	bl	8002be6 <HAL_DAC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007b2:	f000 fb41 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000022c 	.word	0x2000022c
 80007c4:	40007400 	.word	0x40007400

080007c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_I2C2_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_I2C2_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_I2C2_Init+0x74>)
 80007d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <MX_I2C2_Init+0x7c>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_I2C2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_I2C2_Init+0x74>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000802:	480e      	ldr	r0, [pc, #56]	@ (800083c <MX_I2C2_Init+0x74>)
 8000804:	f004 f97e 	bl	8004b04 <HAL_I2C_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800080e:	f000 fb13 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <MX_I2C2_Init+0x74>)
 8000816:	f005 fe9d 	bl	8006554 <HAL_I2CEx_ConfigAnalogFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 fb0a 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_I2C2_Init+0x74>)
 8000828:	f005 fedf 	bl	80065ea <HAL_I2CEx_ConfigDigitalFilter>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 fb01 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000240 	.word	0x20000240
 8000840:	40005800 	.word	0x40005800
 8000844:	00808cd2 	.word	0x00808cd2

08000848 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_I2C4_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <MX_I2C4_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_I2C4_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 88;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_I2C4_Init+0x74>)
 800085a:	2258      	movs	r2, #88	@ 0x58
 800085c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_I2C4_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C4_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000884:	f004 f93e 	bl	8004b04 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fad3 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000896:	f005 fe5d 	bl	8006554 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 faca 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_I2C4_Init+0x74>)
 80008a8:	f005 fe9f 	bl	80065ea <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fac1 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000294 	.word	0x20000294
 80008c0:	40006000 	.word	0x40006000
 80008c4:	00808cd2 	.word	0x00808cd2

080008c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_SPI1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <MX_SPI1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_SPI1_Init+0x74>)
 80008d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_SPI1_Init+0x74>)
 80008e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_SPI1_Init+0x74>)
 80008f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_SPI1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_SPI1_Init+0x74>)
 8000916:	2207      	movs	r2, #7
 8000918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_SPI1_Init+0x74>)
 8000922:	2208      	movs	r2, #8
 8000924:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_SPI1_Init+0x74>)
 8000928:	f007 f8be 	bl	8007aa8 <HAL_SPI_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fa81 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200002e8 	.word	0x200002e8
 8000940:	40013000 	.word	0x40013000

08000944 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800094a:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <MX_SPI2_Init+0x70>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800095c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000960:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800098a:	2207      	movs	r2, #7
 800098c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000996:	2200      	movs	r2, #0
 8000998:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800099c:	f007 f884 	bl	8007aa8 <HAL_SPI_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009a6:	f000 fa47 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000034c 	.word	0x2000034c
 80009b4:	40003800 	.word	0x40003800

080009b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600;
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009e0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80009e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009e8:	2210      	movs	r2, #16
 80009ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a00:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <MX_TIM2_Init+0x98>)
 8000a02:	f008 f8b7 	bl	8008b74 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 fa14 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <MX_TIM2_Init+0x98>)
 8000a1e:	f008 fac7 	bl	8008fb0 <HAL_TIM_ConfigClockSource>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a28:	f000 fa06 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_TIM2_Init+0x98>)
 8000a3a:	f008 fce5 	bl	8009408 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a44:	f000 f9f8 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200003b0 	.word	0x200003b0

08000a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a74:	4a1e      	ldr	r2, [pc, #120]	@ (8000af0 <MX_TIM3_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a7a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a82:	2210      	movs	r2, #16
 8000a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a88:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a9a:	4814      	ldr	r0, [pc, #80]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a9c:	f008 f86a 	bl	8008b74 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000aa6:	f000 f9c7 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000ab8:	f008 fa7a 	bl	8008fb0 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000ac2:	f000 f9b9 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000ad4:	f008 fc98 	bl	8009408 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000ade:	f000 f9ab 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200003fc 	.word	0x200003fc
 8000af0:	40000400 	.word	0x40000400

08000af4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <MX_UART5_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b38:	f008 fd12 	bl	8009560 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 f979 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000448 	.word	0x20000448
 8000b50:	40005000 	.word	0x40005000

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <MX_USART2_UART_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b98:	f008 fce2 	bl	8009560 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 f949 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200004d0 	.word	0x200004d0
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <MX_USART3_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf8:	f008 fcb2 	bl	8009560 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f919 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000558 	.word	0x20000558
 8000c10:	40004800 	.word	0x40004800

08000c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2206      	movs	r2, #6
 8000c24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c58:	f005 fd13 	bl	8006682 <HAL_PCD_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 f8e9 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200006a0 	.word	0x200006a0

08000c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_DMA_Init+0x48>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <MX_DMA_Init+0x48>)
 8000c7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <MX_DMA_Init+0x48>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	200b      	movs	r0, #11
 8000c94:	f001 feeb 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c98:	200b      	movs	r0, #11
 8000c9a:	f001 ff04 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2010      	movs	r0, #16
 8000ca4:	f001 fee3 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ca8:	2010      	movs	r0, #16
 8000caa:	f001 fefc 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	@ 0x30
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b55      	ldr	r3, [pc, #340]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a54      	ldr	r2, [pc, #336]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b52      	ldr	r3, [pc, #328]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cea:	4b4f      	ldr	r3, [pc, #316]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a4e      	ldr	r2, [pc, #312]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a48      	ldr	r2, [pc, #288]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a42      	ldr	r2, [pc, #264]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b40      	ldr	r3, [pc, #256]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a3c      	ldr	r2, [pc, #240]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a36      	ldr	r2, [pc, #216]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d62:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a30      	ldr	r2, [pc, #192]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d80:	482a      	ldr	r0, [pc, #168]	@ (8000e2c <MX_GPIO_Init+0x170>)
 8000d82:	f003 fea5 	bl	8004ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	@ 0x40
 8000d8a:	4829      	ldr	r0, [pc, #164]	@ (8000e30 <MX_GPIO_Init+0x174>)
 8000d8c:	f003 fea0 	bl	8004ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4823      	ldr	r0, [pc, #140]	@ (8000e34 <MX_GPIO_Init+0x178>)
 8000da8:	f003 fce6 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dac:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4819      	ldr	r0, [pc, #100]	@ (8000e2c <MX_GPIO_Init+0x170>)
 8000dc6:	f003 fcd7 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4813      	ldr	r0, [pc, #76]	@ (8000e30 <MX_GPIO_Init+0x174>)
 8000de2:	f003 fcc9 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_GPIO_Init+0x174>)
 8000dfa:	f003 fcbd 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e10:	2308      	movs	r3, #8
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <MX_GPIO_Init+0x178>)
 8000e1c:	f003 fcac 	bl	8004778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	@ 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40020800 	.word	0x40020800

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a19      	ldr	r2, [pc, #100]	@ (8000f10 <HAL_ADC_MspInit+0x84>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12b      	bne.n	8000f06 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <HAL_ADC_MspInit+0x8c>)
 8000ef2:	f003 fc41 	bl	8004778 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2012      	movs	r0, #18
 8000efc:	f001 fdb7 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f00:	2012      	movs	r0, #18
 8000f02:	f001 fdd0 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	@ 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40012000 	.word	0x40012000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	@ (8000fa0 <HAL_DAC_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <HAL_DAC_MspInit+0x8c>)
 8000f82:	f003 fbf9 	bl	8004778 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2036      	movs	r0, #54	@ 0x36
 8000f8c:	f001 fd6f 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f90:	2036      	movs	r0, #54	@ 0x36
 8000f92:	f001 fd88 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40007400 	.word	0x40007400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0ac      	sub	sp, #176	@ 0xb0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	2284      	movs	r2, #132	@ 0x84
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f015 ff6d 	bl	8016eac <memset>
  if(hi2c->Instance==I2C2)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a4c      	ldr	r2, [pc, #304]	@ (8001108 <HAL_I2C_MspInit+0x15c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d145      	bne.n	8001068 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 f96b 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ff8:	f7ff ff1e 	bl	8000e38 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffc:	4b43      	ldr	r3, [pc, #268]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001000:	4a42      	ldr	r2, [pc, #264]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6313      	str	r3, [r2, #48]	@ 0x30
 8001008:	4b40      	ldr	r3, [pc, #256]	@ (800110c <HAL_I2C_MspInit+0x160>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001014:	2303      	movs	r3, #3
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800102c:	2304      	movs	r3, #4
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001032:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001036:	4619      	mov	r1, r3
 8001038:	4835      	ldr	r0, [pc, #212]	@ (8001110 <HAL_I2C_MspInit+0x164>)
 800103a:	f003 fb9d 	bl	8004778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800103e:	4b33      	ldr	r3, [pc, #204]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a32      	ldr	r2, [pc, #200]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b30      	ldr	r3, [pc, #192]	@ (800110c <HAL_I2C_MspInit+0x160>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2021      	movs	r0, #33	@ 0x21
 800105c:	f001 fd07 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001060:	2021      	movs	r0, #33	@ 0x21
 8001062:	f001 fd20 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001066:	e04a      	b.n	80010fe <HAL_I2C_MspInit+0x152>
  else if(hi2c->Instance==I2C4)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a29      	ldr	r2, [pc, #164]	@ (8001114 <HAL_I2C_MspInit+0x168>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d145      	bne.n	80010fe <HAL_I2C_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001072:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001076:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	4618      	mov	r0, r3
 8001084:	f006 f920 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_I2C_MspInit+0xe6>
      Error_Handler();
 800108e:	f7ff fed3 	bl	8000e38 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001092:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <HAL_I2C_MspInit+0x164>)
 80010d2:	f003 fb51 	bl	8004778 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	205f      	movs	r0, #95	@ 0x5f
 80010f4:	f001 fcbb 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80010f8:	205f      	movs	r0, #95	@ 0x5f
 80010fa:	f001 fcd4 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	37b0      	adds	r7, #176	@ 0xb0
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40005800 	.word	0x40005800
 800110c:	40023800 	.word	0x40023800
 8001110:	40021400 	.word	0x40021400
 8001114:	40006000 	.word	0x40006000

08001118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	@ 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a52      	ldr	r2, [pc, #328]	@ (8001280 <HAL_SPI_MspInit+0x168>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d14c      	bne.n	80011d4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113a:	4b52      	ldr	r3, [pc, #328]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a51      	ldr	r2, [pc, #324]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b4c      	ldr	r3, [pc, #304]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a4b      	ldr	r2, [pc, #300]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b49      	ldr	r3, [pc, #292]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a45      	ldr	r2, [pc, #276]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001182:	2360      	movs	r3, #96	@ 0x60
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001192:	2305      	movs	r3, #5
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	483a      	ldr	r0, [pc, #232]	@ (8001288 <HAL_SPI_MspInit+0x170>)
 800119e:	f003 faeb 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011a2:	2320      	movs	r3, #32
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b2:	2305      	movs	r3, #5
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4833      	ldr	r0, [pc, #204]	@ (800128c <HAL_SPI_MspInit+0x174>)
 80011be:	f003 fadb 	bl	8004778 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2023      	movs	r0, #35	@ 0x23
 80011c8:	f001 fc51 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011cc:	2023      	movs	r0, #35	@ 0x23
 80011ce:	f001 fc6a 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011d2:	e051      	b.n	8001278 <HAL_SPI_MspInit+0x160>
  else if(hspi->Instance==SPI2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001290 <HAL_SPI_MspInit+0x178>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d14c      	bne.n	8001278 <HAL_SPI_MspInit+0x160>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011de:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a22      	ldr	r2, [pc, #136]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001226:	230c      	movs	r3, #12
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001236:	2305      	movs	r3, #5
 8001238:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	4814      	ldr	r0, [pc, #80]	@ (8001294 <HAL_SPI_MspInit+0x17c>)
 8001242:	f003 fa99 	bl	8004778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001258:	2305      	movs	r3, #5
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <HAL_SPI_MspInit+0x174>)
 8001264:	f003 fa88 	bl	8004778 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2024      	movs	r0, #36	@ 0x24
 800126e:	f001 fbfe 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001272:	2024      	movs	r0, #36	@ 0x24
 8001274:	f001 fc17 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3738      	adds	r7, #56	@ 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40013000 	.word	0x40013000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40003800 	.word	0x40003800
 8001294:	40020800 	.word	0x40020800

08001298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a8:	d114      	bne.n	80012d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	201c      	movs	r0, #28
 80012c8:	f001 fbd1 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012cc:	201c      	movs	r0, #28
 80012ce:	f001 fbea 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012d2:	e018      	b.n	8001306 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <HAL_TIM_Base_MspInit+0x7c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d113      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201d      	movs	r0, #29
 80012fc:	f001 fbb7 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001300:	201d      	movs	r0, #29
 8001302:	f001 fbd0 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40000400 	.word	0x40000400

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0b0      	sub	sp, #192	@ 0xc0
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001334:	2284      	movs	r2, #132	@ 0x84
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f015 fdb7 	bl	8016eac <memset>
  if(huart->Instance==UART5)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4aad      	ldr	r2, [pc, #692]	@ (80015f8 <HAL_UART_MspInit+0x2e0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f040 8097 	bne.w	8001478 <HAL_UART_MspInit+0x160>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800134a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001354:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001358:	4618      	mov	r0, r3
 800135a:	f005 ffb5 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001364:	f7ff fd68 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001368:	4ba4      	ldr	r3, [pc, #656]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	4aa3      	ldr	r2, [pc, #652]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800136e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001372:	6413      	str	r3, [r2, #64]	@ 0x40
 8001374:	4ba1      	ldr	r3, [pc, #644]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001380:	4b9e      	ldr	r3, [pc, #632]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	4a9d      	ldr	r2, [pc, #628]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6313      	str	r3, [r2, #48]	@ 0x30
 800138c:	4b9b      	ldr	r3, [pc, #620]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001398:	4b98      	ldr	r3, [pc, #608]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	4a97      	ldr	r2, [pc, #604]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a4:	4b95      	ldr	r3, [pc, #596]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013ca:	2308      	movs	r3, #8
 80013cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013d4:	4619      	mov	r1, r3
 80013d6:	488a      	ldr	r0, [pc, #552]	@ (8001600 <HAL_UART_MspInit+0x2e8>)
 80013d8:	f003 f9ce 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013dc:	2304      	movs	r3, #4
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013f4:	2308      	movs	r3, #8
 80013f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013fe:	4619      	mov	r1, r3
 8001400:	4880      	ldr	r0, [pc, #512]	@ (8001604 <HAL_UART_MspInit+0x2ec>)
 8001402:	f003 f9b9 	bl	8004778 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001406:	4b80      	ldr	r3, [pc, #512]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001408:	4a80      	ldr	r2, [pc, #512]	@ (800160c <HAL_UART_MspInit+0x2f4>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800140c:	4b7e      	ldr	r3, [pc, #504]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800140e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001412:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001414:	4b7c      	ldr	r3, [pc, #496]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b7b      	ldr	r3, [pc, #492]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b79      	ldr	r3, [pc, #484]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001428:	4b77      	ldr	r3, [pc, #476]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142e:	4b76      	ldr	r3, [pc, #472]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001434:	4b74      	ldr	r3, [pc, #464]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800143c:	4b72      	ldr	r3, [pc, #456]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800143e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001442:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001444:	4b70      	ldr	r3, [pc, #448]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800144a:	486f      	ldr	r0, [pc, #444]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800144c:	f001 fc24 	bl	8002c98 <HAL_DMA_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001456:	f7ff fcef 	bl	8000e38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a6a      	ldr	r2, [pc, #424]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800145e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001460:	4a69      	ldr	r2, [pc, #420]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2035      	movs	r0, #53	@ 0x35
 800146c:	f001 faff 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001470:	2035      	movs	r0, #53	@ 0x35
 8001472:	f001 fb18 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001476:	e0ba      	b.n	80015ee <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a64      	ldr	r2, [pc, #400]	@ (8001610 <HAL_UART_MspInit+0x2f8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d173      	bne.n	800156a <HAL_UART_MspInit+0x252>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001486:	2300      	movs	r3, #0
 8001488:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148e:	4618      	mov	r0, r3
 8001490:	f005 ff1a 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_UART_MspInit+0x186>
      Error_Handler();
 800149a:	f7ff fccd 	bl	8000e38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a56      	ldr	r2, [pc, #344]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b51      	ldr	r3, [pc, #324]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a50      	ldr	r2, [pc, #320]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b4e      	ldr	r3, [pc, #312]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014ce:	2360      	movs	r3, #96	@ 0x60
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014da:	2301      	movs	r3, #1
 80014dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e6:	2307      	movs	r3, #7
 80014e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014f0:	4619      	mov	r1, r3
 80014f2:	4844      	ldr	r0, [pc, #272]	@ (8001604 <HAL_UART_MspInit+0x2ec>)
 80014f4:	f003 f940 	bl	8004778 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014f8:	4b46      	ldr	r3, [pc, #280]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 80014fa:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <HAL_UART_MspInit+0x300>)
 80014fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014fe:	4b45      	ldr	r3, [pc, #276]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001500:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001504:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001506:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150c:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001512:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001514:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001518:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151a:	4b3e      	ldr	r3, [pc, #248]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001520:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001526:	4b3b      	ldr	r3, [pc, #236]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800152e:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001534:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001536:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800153c:	4835      	ldr	r0, [pc, #212]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 800153e:	f001 fbab 	bl	8002c98 <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_UART_MspInit+0x234>
      Error_Handler();
 8001548:	f7ff fc76 	bl	8000e38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a31      	ldr	r2, [pc, #196]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001550:	675a      	str	r2, [r3, #116]	@ 0x74
 8001552:	4a30      	ldr	r2, [pc, #192]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2026      	movs	r0, #38	@ 0x26
 800155e:	f001 fa86 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001562:	2026      	movs	r0, #38	@ 0x26
 8001564:	f001 fa9f 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8001568:	e041      	b.n	80015ee <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2b      	ldr	r2, [pc, #172]	@ (800161c <HAL_UART_MspInit+0x304>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d13c      	bne.n	80015ee <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800157a:	2300      	movs	r3, #0
 800157c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fea0 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 800158e:	f7ff fc53 	bl	8000e38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015e6:	4619      	mov	r1, r3
 80015e8:	4806      	ldr	r0, [pc, #24]	@ (8001604 <HAL_UART_MspInit+0x2ec>)
 80015ea:	f003 f8c5 	bl	8004778 <HAL_GPIO_Init>
}
 80015ee:	bf00      	nop
 80015f0:	37c0      	adds	r7, #192	@ 0xc0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005000 	.word	0x40005000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	200005e0 	.word	0x200005e0
 800160c:	40026010 	.word	0x40026010
 8001610:	40004400 	.word	0x40004400
 8001614:	20000640 	.word	0x20000640
 8001618:	40026088 	.word	0x40026088
 800161c:	40004800 	.word	0x40004800

08001620 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ac      	sub	sp, #176	@ 0xb0
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	2284      	movs	r2, #132	@ 0x84
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f015 fc33 	bl	8016eac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800164e:	d159      	bne.n	8001704 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001650:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001654:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f005 fe31 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800166c:	f7ff fbe4 	bl	8000e38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <HAL_PCD_MspInit+0xec>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001674:	4a25      	ldr	r2, [pc, #148]	@ (800170c <HAL_PCD_MspInit+0xec>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6313      	str	r3, [r2, #48]	@ 0x30
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_PCD_MspInit+0xec>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001688:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800168c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016a2:	230a      	movs	r3, #10
 80016a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ac:	4619      	mov	r1, r3
 80016ae:	4818      	ldr	r0, [pc, #96]	@ (8001710 <HAL_PCD_MspInit+0xf0>)
 80016b0:	f003 f862 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016cc:	4619      	mov	r1, r3
 80016ce:	4810      	ldr	r0, [pc, #64]	@ (8001710 <HAL_PCD_MspInit+0xf0>)
 80016d0:	f003 f852 	bl	8004778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016d4:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d8:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016de:	6353      	str	r3, [r2, #52]	@ 0x34
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	4a06      	ldr	r2, [pc, #24]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	37b0      	adds	r7, #176	@ 0xb0
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 fafb 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA1_Stream0_IRQHandler+0x10>)
 800177a:	f001 fbcd 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200005e0 	.word	0x200005e0

08001788 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA1_Stream5_IRQHandler+0x10>)
 800178e:	f001 fbc3 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000640 	.word	0x20000640

0800179c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <ADC_IRQHandler+0x10>)
 80017a2:	f000 fcf4 	bl	800218e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001e4 	.word	0x200001e4

080017b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <TIM2_IRQHandler+0x10>)
 80017b6:	f007 fadc 	bl	8008d72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200003b0 	.word	0x200003b0

080017c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <TIM3_IRQHandler+0x10>)
 80017ca:	f007 fad2 	bl	8008d72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003fc 	.word	0x200003fc

080017d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <I2C2_EV_IRQHandler+0x10>)
 80017de:	f003 fc6d 	bl	80050bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000240 	.word	0x20000240

080017ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <SPI1_IRQHandler+0x10>)
 80017f2:	f006 fcd3 	bl	800819c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200002e8 	.word	0x200002e8

08001800 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <SPI2_IRQHandler+0x10>)
 8001806:	f006 fcc9 	bl	800819c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000034c 	.word	0x2000034c

08001814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <USART2_IRQHandler+0x10>)
 800181a:	f008 f87b 	bl	8009914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200004d0 	.word	0x200004d0

08001828 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <UART5_IRQHandler+0x10>)
 800182e:	f008 f871 	bl	8009914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000448 	.word	0x20000448

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f001 f96c 	bl	8002b1e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000022c 	.word	0x2000022c

08001850 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <ETH_IRQHandler+0x10>)
 8001856:	f002 f8a9 	bl	80039ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20005588 	.word	0x20005588

08001864 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <ETH_WKUP_IRQHandler+0x10>)
 800186a:	f002 f89f 	bl	80039ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20005588 	.word	0x20005588

08001878 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <I2C4_EV_IRQHandler+0x10>)
 800187e:	f003 fc1d 	bl	80050bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000294 	.word	0x20000294

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a6:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <_kill+0x20>)
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20008eb8 	.word	0x20008eb8

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe5 	bl	800189c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <_exit+0x12>

080018d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_isatty>:

int _isatty(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d205      	bcs.n	800197c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <_sbrk+0x6c>)
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	20050000 	.word	0x20050000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	20000ba8 	.word	0x20000ba8
 80019a8:	20008ec8 	.word	0x20008ec8
 80019ac:	20008eb8 	.word	0x20008eb8

080019b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d8:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019da:	490e      	ldr	r1, [pc, #56]	@ (8001a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019fe:	f7ff ffd7 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f015 fae1 	bl	8016fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7fe fdd3 	bl	80005b0 <main>
  bx  lr    
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a18:	0801aec8 	.word	0x0801aec8
  ldr r2, =_sbss
 8001a1c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001a20:	20008ec8 	.word	0x20008ec8

08001a24 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <CAN1_RX0_IRQHandler>

08001a26 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <LAN8742_RegisterBusIO+0x28>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <LAN8742_RegisterBusIO+0x28>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <LAN8742_RegisterBusIO+0x28>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e014      	b.n	8001a7e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d17c      	bne.n	8001ba4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e01c      	b.n	8001afe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f107 0208 	add.w	r2, r7, #8
 8001acc:	2112      	movs	r1, #18
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	4798      	blx	r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da03      	bge.n	8001ae0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001ad8:	f06f 0304 	mvn.w	r3, #4
 8001adc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001ade:	e00b      	b.n	8001af8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d105      	bne.n	8001af8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
         break;
 8001af6:	e005      	b.n	8001b04 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b1f      	cmp	r3, #31
 8001b02:	d9df      	bls.n	8001ac4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b1f      	cmp	r3, #31
 8001b0a:	d902      	bls.n	8001b12 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b0c:	f06f 0302 	mvn.w	r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d145      	bne.n	8001ba4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6810      	ldr	r0, [r2, #0]
 8001b20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b24:	2100      	movs	r1, #0
 8001b26:	4798      	blx	r3
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db37      	blt.n	8001b9e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6810      	ldr	r0, [r2, #0]
 8001b36:	f107 0208 	add.w	r2, r7, #8
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4798      	blx	r3
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db28      	blt.n	8001b96 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4798      	blx	r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b4e:	e01c      	b.n	8001b8a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4798      	blx	r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b62:	d80e      	bhi.n	8001b82 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6810      	ldr	r0, [r2, #0]
 8001b6c:	f107 0208 	add.w	r2, r7, #8
 8001b70:	2100      	movs	r1, #0
 8001b72:	4798      	blx	r3
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da07      	bge.n	8001b8a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001b7a:	f06f 0304 	mvn.w	r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
                 break;
 8001b80:	e010      	b.n	8001ba4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001b82:	f06f 0301 	mvn.w	r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
               break;
 8001b88:	e00c      	b.n	8001ba4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1dd      	bne.n	8001b50 <LAN8742_Init+0xc6>
 8001b94:	e006      	b.n	8001ba4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001b96:	f06f 0304 	mvn.w	r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	e002      	b.n	8001ba4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001b9e:	f06f 0303 	mvn.w	r3, #3
 8001ba2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d112      	bne.n	8001bd0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	4798      	blx	r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001bb4:	bf00      	nop
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4798      	blx	r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001bc8:	d9f5      	bls.n	8001bb6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 }
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6810      	ldr	r0, [r2, #0]
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4798      	blx	r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da02      	bge.n	8001c02 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bfc:	f06f 0304 	mvn.w	r3, #4
 8001c00:	e06e      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6810      	ldr	r0, [r2, #0]
 8001c0a:	f107 020c 	add.w	r2, r7, #12
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4798      	blx	r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da02      	bge.n	8001c1e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c18:	f06f 0304 	mvn.w	r3, #4
 8001c1c:	e060      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e059      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6810      	ldr	r0, [r2, #0]
 8001c34:	f107 020c 	add.w	r2, r7, #12
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4798      	blx	r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da02      	bge.n	8001c48 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c42:	f06f 0304 	mvn.w	r3, #4
 8001c46:	e04b      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d11b      	bne.n	8001c8a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <LAN8742_GetLinkState+0x90>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c66:	2302      	movs	r3, #2
 8001c68:	e03a      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e033      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c82:	2304      	movs	r3, #4
 8001c84:	e02c      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c86:	2305      	movs	r3, #5
 8001c88:	e02a      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6810      	ldr	r0, [r2, #0]
 8001c92:	f107 020c 	add.w	r2, r7, #12
 8001c96:	211f      	movs	r1, #31
 8001c98:	4798      	blx	r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da02      	bge.n	8001ca6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001ca0:	f06f 0304 	mvn.w	r3, #4
 8001ca4:	e01c      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	e015      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 031c 	and.w	r3, r3, #28
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	d101      	bne.n	8001cc2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00e      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 031c 	and.w	r3, r3, #28
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d101      	bne.n	8001cd0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e007      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 031c 	and.w	r3, r3, #28
 8001cd6:	2b14      	cmp	r3, #20
 8001cd8:	d101      	bne.n	8001cde <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e000      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cde:	2305      	movs	r3, #5
    }				
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 feb3 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f806 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff f8a4 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fecd 	bl	8002ac2 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 fe95 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000bac 	.word	0x20000bac

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000bac 	.word	0x20000bac

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e031      	b.n	8001e66 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff f83e 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_ADC_Init+0x84>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fc38 	bl	80026b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	ffffeefd 	.word	0xffffeefd

08001e74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Start+0x1a>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e0ad      	b.n	8001fea <HAL_ADC_Start+0x176>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d018      	beq.n	8001ed6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001eb4:	4b50      	ldr	r3, [pc, #320]	@ (8001ff8 <HAL_ADC_Start+0x184>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a50      	ldr	r2, [pc, #320]	@ (8001ffc <HAL_ADC_Start+0x188>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9a      	lsrs	r2, r3, #18
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d175      	bne.n	8001fd0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ee8:	4b45      	ldr	r3, [pc, #276]	@ (8002000 <HAL_ADC_Start+0x18c>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f1e:	d106      	bne.n	8001f2e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f24:	f023 0206 	bic.w	r2, r3, #6
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f46:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <HAL_ADC_Start+0x190>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d143      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	e03a      	b.n	8001fe8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a24      	ldr	r2, [pc, #144]	@ (8002008 <HAL_ADC_Start+0x194>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10e      	bne.n	8001f9a <HAL_ADC_Start+0x126>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f98:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <HAL_ADC_Start+0x190>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d120      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_ADC_Start+0x198>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d11b      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d114      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	e00b      	b.n	8001fe8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f043 0210 	orr.w	r2, r3, #16
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	fffff8fe 	.word	0xfffff8fe
 8002004:	40012300 	.word	0x40012300
 8002008:	40012000 	.word	0x40012000
 800200c:	40012200 	.word	0x40012200

08002010 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Stop+0x16>
 8002022:	2302      	movs	r3, #2
 8002024:	e01f      	b.n	8002066 <HAL_ADC_Stop+0x56>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_ADC_Stop+0x64>)
 8002052:	4013      	ands	r3, r2
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	ffffeefe 	.word	0xffffeefe

08002078 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002094:	d113      	bne.n	80020be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f043 0220 	orr.w	r2, r3, #32
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e063      	b.n	8002186 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020be:	f7ff fe65 	bl	8001d8c <HAL_GetTick>
 80020c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020c4:	e021      	b.n	800210a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d01d      	beq.n	800210a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_ADC_PollForConversion+0x6c>
 80020d4:	f7ff fe5a 	bl	8001d8c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d212      	bcs.n	800210a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d00b      	beq.n	800210a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e03d      	b.n	8002186 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d1d6      	bne.n	80020c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0212 	mvn.w	r2, #18
 8002120:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d123      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11f      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800215c:	2b00      	cmp	r3, #0
 800215e:	d111      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d049      	beq.n	8002258 <HAL_ADC_IRQHandler+0xca>
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d046      	beq.n	8002258 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d12b      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d127      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002210:	2b00      	cmp	r3, #0
 8002212:	d119      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0220 	bic.w	r2, r2, #32
 8002222:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8bd 	bl	80023c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0212 	mvn.w	r2, #18
 8002256:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002266:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d057      	beq.n	800231e <HAL_ADC_IRQHandler+0x190>
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d054      	beq.n	800231e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d139      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12b      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d124      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11d      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d119      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fac8 	bl	80028a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 020c 	mvn.w	r2, #12
 800231c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10d      	bne.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f841 	bl	80023dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f06f 0201 	mvn.w	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002372:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x218>
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002384:	f043 0202 	orr.w	r2, r3, #2
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f82a 	bl	80023f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0220 	mvn.w	r2, #32
 80023a4:	601a      	str	r2, [r3, #0]
  }
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1c>
 800241c:	2302      	movs	r3, #2
 800241e:	e136      	b.n	800268e <HAL_ADC_ConfigChannel+0x28a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b09      	cmp	r3, #9
 800242e:	d93a      	bls.n	80024a6 <HAL_ADC_ConfigChannel+0xa2>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002438:	d035      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68d9      	ldr	r1, [r3, #12]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3b1e      	subs	r3, #30
 8002450:	2207      	movs	r2, #7
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	400a      	ands	r2, r1
 800245e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a8d      	ldr	r2, [pc, #564]	@ (800269c <HAL_ADC_ConfigChannel+0x298>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68d9      	ldr	r1, [r3, #12]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	061a      	lsls	r2, r3, #24
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247e:	e035      	b.n	80024ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68d9      	ldr	r1, [r3, #12]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	4603      	mov	r3, r0
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4403      	add	r3, r0
 8002498:	3b1e      	subs	r3, #30
 800249a:	409a      	lsls	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a4:	e022      	b.n	80024ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6919      	ldr	r1, [r3, #16]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	2207      	movs	r2, #7
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43da      	mvns	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	400a      	ands	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	4603      	mov	r3, r0
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4403      	add	r3, r0
 80024e2:	409a      	lsls	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d824      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3b05      	subs	r3, #5
 8002506:	221f      	movs	r2, #31
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34
 800253c:	e04c      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b23      	subs	r3, #35	@ 0x23
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b23      	subs	r3, #35	@ 0x23
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	631a      	str	r2, [r3, #48]	@ 0x30
 800258e:	e023      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	3b41      	subs	r3, #65	@ 0x41
 80025a2:	221f      	movs	r2, #31
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43da      	mvns	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	400a      	ands	r2, r1
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b41      	subs	r3, #65	@ 0x41
 80025cc:	fa00 f203 	lsl.w	r2, r0, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a30      	ldr	r2, [pc, #192]	@ (80026a0 <HAL_ADC_ConfigChannel+0x29c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10a      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1f4>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025ea:	d105      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025ec:	4b2d      	ldr	r3, [pc, #180]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a2c      	ldr	r2, [pc, #176]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80025f2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <HAL_ADC_ConfigChannel+0x29c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10f      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x21e>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b12      	cmp	r3, #18
 8002608:	d10b      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800260a:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a25      	ldr	r2, [pc, #148]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002610:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002614:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002616:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800261c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002620:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1e      	ldr	r2, [pc, #120]	@ (80026a0 <HAL_ADC_ConfigChannel+0x29c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d12b      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x280>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <HAL_ADC_ConfigChannel+0x298>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <HAL_ADC_ConfigChannel+0x23a>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b11      	cmp	r3, #17
 800263c:	d122      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800263e:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002644:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002648:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800264a:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002654:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a10      	ldr	r2, [pc, #64]	@ (800269c <HAL_ADC_ConfigChannel+0x298>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d111      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a11      	ldr	r2, [pc, #68]	@ (80026ac <HAL_ADC_ConfigChannel+0x2a8>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9a      	lsrs	r2, r3, #18
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002676:	e002      	b.n	800267e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3b01      	subs	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	10000012 	.word	0x10000012
 80026a0:	40012000 	.word	0x40012000
 80026a4:	40012300 	.word	0x40012300
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026b8:	4b78      	ldr	r3, [pc, #480]	@ (800289c <ADC_Init+0x1ec>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a77      	ldr	r2, [pc, #476]	@ (800289c <ADC_Init+0x1ec>)
 80026be:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80026c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026c4:	4b75      	ldr	r3, [pc, #468]	@ (800289c <ADC_Init+0x1ec>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4973      	ldr	r1, [pc, #460]	@ (800289c <ADC_Init+0x1ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	021a      	lsls	r2, r3, #8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <ADC_Init+0x1f0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002752:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	e00f      	b.n	80027aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0202 	bic.w	r2, r2, #2
 80027b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	005a      	lsls	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01b      	beq.n	8002810 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	3b01      	subs	r3, #1
 8002804:	035a      	lsls	r2, r3, #13
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	e007      	b.n	8002820 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	3b01      	subs	r3, #1
 800283c:	051a      	lsls	r2, r3, #20
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002862:	025a      	lsls	r2, r3, #9
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	029a      	lsls	r2, r3, #10
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40012300 	.word	0x40012300
 80028a0:	0f000001 	.word	0x0f000001

080028a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x40>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x40>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00
 80028fc:	05fa0000 	.word	0x05fa0000

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	@ (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	@ (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	@ (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	@ 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	@ 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	@ (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e014      	b.n	8002b16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	791b      	ldrb	r3, [r3, #4]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fe fa0d 	bl	8000f1c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b34:	d120      	bne.n	8002b78 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b44:	d118      	bne.n	8002b78 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b70:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f82d 	bl	8002bd2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b86:	d120      	bne.n	8002bca <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b96:	d118      	bne.n	8002bca <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f043 0202 	orr.w	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002bb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f85d 	bl	8002c84 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	795b      	ldrb	r3, [r3, #5]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_DAC_ConfigChannel+0x18>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e03c      	b.n	8002c78 <HAL_DAC_ConfigChannel+0x92>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4013      	ands	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	22c0      	movs	r2, #192	@ 0xc0
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	400a      	ands	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff f872 	bl	8001d8c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e099      	b.n	8002de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd4:	e00f      	b.n	8002cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd6:	f7ff f859 	bl	8001d8c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d908      	bls.n	8002cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e078      	b.n	8002de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e8      	bne.n	8002cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_DMA_Init+0x158>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d117      	bne.n	8002dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa89 	bl	80032b4 <DMA_CheckFifoParam>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2240      	movs	r2, #64	@ 0x40
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002db6:	2301      	movs	r3, #1
 8002db8:	e016      	b.n	8002de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa40 	bl	8003248 <DMA_CalcBaseAndBitshift>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	223f      	movs	r2, #63	@ 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	f010803f 	.word	0xf010803f

08002df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e02:	f7fe ffc3 	bl	8001d8c <HAL_GetTick>
 8002e06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d008      	beq.n	8002e26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2280      	movs	r2, #128	@ 0x80
 8002e18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e052      	b.n	8002ecc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0216 	bic.w	r2, r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_DMA_Abort+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0208 	bic.w	r2, r2, #8
 8002e64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e76:	e013      	b.n	8002ea0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e78:	f7fe ff88 	bl	8001d8c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d90c      	bls.n	8002ea0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e015      	b.n	8002ecc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e4      	bne.n	8002e78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	223f      	movs	r2, #63	@ 0x3f
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00c      	b.n	8002f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f24:	4b8e      	ldr	r3, [pc, #568]	@ (8003160 <HAL_DMA_IRQHandler+0x248>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a8e      	ldr	r2, [pc, #568]	@ (8003164 <HAL_DMA_IRQHandler+0x24c>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a9b      	lsrs	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	2208      	movs	r2, #8
 8002f44:	409a      	lsls	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f70:	2208      	movs	r2, #8
 8002f72:	409a      	lsls	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	f043 0202 	orr.w	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	2204      	movs	r2, #4
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d043      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03c      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	2210      	movs	r2, #16
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d018      	beq.n	800305a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d024      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
 8003046:	e01f      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
 8003058:	e016      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0208 	bic.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	2220      	movs	r2, #32
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 808f 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8087 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	2220      	movs	r2, #32
 80030b0:	409a      	lsls	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d136      	bne.n	8003130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_IRQHandler+0x1da>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	223f      	movs	r2, #63	@ 0x3f
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003122:	2b00      	cmp	r3, #0
 8003124:	d07e      	beq.n	8003224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
        }
        return;
 800312e:	e079      	b.n	8003224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01d      	beq.n	800317a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003150:	2b00      	cmp	r3, #0
 8003152:	d031      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
 800315c:	e02c      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d023      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e01e      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0210 	bic.w	r2, r2, #16
 8003196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d032      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2205      	movs	r2, #5
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d307      	bcc.n	8003200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f2      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x2cc>
 80031fe:	e000      	b.n	8003202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
 8003222:	e000      	b.n	8003226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003224:	bf00      	nop
    }
  }
}
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800323a:	b2db      	uxtb	r3, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3b10      	subs	r3, #16
 8003258:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <DMA_CalcBaseAndBitshift+0x60>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <DMA_CalcBaseAndBitshift+0x64>)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d908      	bls.n	8003288 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <DMA_CalcBaseAndBitshift+0x68>)
 800327e:	4013      	ands	r3, r2
 8003280:	1d1a      	adds	r2, r3, #4
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	659a      	str	r2, [r3, #88]	@ 0x58
 8003286:	e006      	b.n	8003296 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	aaaaaaab 	.word	0xaaaaaaab
 80032ac:	0801accc 	.word	0x0801accc
 80032b0:	fffffc00 	.word	0xfffffc00

080032b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11f      	bne.n	800330e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d856      	bhi.n	8003382 <DMA_CheckFifoParam+0xce>
 80032d4:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <DMA_CheckFifoParam+0x28>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	080032ed 	.word	0x080032ed
 80032e0:	080032ff 	.word	0x080032ff
 80032e4:	080032ed 	.word	0x080032ed
 80032e8:	08003383 	.word	0x08003383
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d046      	beq.n	8003386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e043      	b.n	8003386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003306:	d140      	bne.n	800338a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330c:	e03d      	b.n	800338a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003316:	d121      	bne.n	800335c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d837      	bhi.n	800338e <DMA_CheckFifoParam+0xda>
 800331e:	a201      	add	r2, pc, #4	@ (adr r2, 8003324 <DMA_CheckFifoParam+0x70>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003335 	.word	0x08003335
 8003328:	0800333b 	.word	0x0800333b
 800332c:	08003335 	.word	0x08003335
 8003330:	0800334d 	.word	0x0800334d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	e030      	b.n	800339c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d025      	beq.n	8003392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334a:	e022      	b.n	8003392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003354:	d11f      	bne.n	8003396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800335a:	e01c      	b.n	8003396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d903      	bls.n	800336a <DMA_CheckFifoParam+0xb6>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d003      	beq.n	8003370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003368:	e018      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
      break;
 800336e:	e015      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00e      	beq.n	800339a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e00b      	b.n	800339a <DMA_CheckFifoParam+0xe6>
      break;
 8003382:	bf00      	nop
 8003384:	e00a      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      break;
 8003386:	bf00      	nop
 8003388:	e008      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
 800338c:	e006      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      break;
 800338e:	bf00      	nop
 8003390:	e004      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
 8003394:	e002      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      break;   
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <DMA_CheckFifoParam+0xe8>
      break;
 800339a:	bf00      	nop
    }
  } 
  
  return status; 
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop

080033ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e06a      	b.n	8003494 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2223      	movs	r2, #35	@ 0x23
 80033cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f008 fa5b 	bl	800b88c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d6:	4b31      	ldr	r3, [pc, #196]	@ (800349c <HAL_ETH_Init+0xf0>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	4a30      	ldr	r2, [pc, #192]	@ (800349c <HAL_ETH_Init+0xf0>)
 80033dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033e2:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <HAL_ETH_Init+0xf0>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033ee:	4b2c      	ldr	r3, [pc, #176]	@ (80034a0 <HAL_ETH_Init+0xf4>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4a2b      	ldr	r2, [pc, #172]	@ (80034a0 <HAL_ETH_Init+0xf4>)
 80033f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033fa:	4b29      	ldr	r3, [pc, #164]	@ (80034a0 <HAL_ETH_Init+0xf4>)
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4927      	ldr	r1, [pc, #156]	@ (80034a0 <HAL_ETH_Init+0xf4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <HAL_ETH_Init+0xf4>)
 800340a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003422:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003424:	f7fe fcb2 	bl	8001d8c <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800342a:	e011      	b.n	8003450 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800342c:	f7fe fcae 	bl	8001d8c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800343a:	d909      	bls.n	8003450 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2204      	movs	r2, #4
 8003440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	22e0      	movs	r2, #224	@ 0xe0
 8003448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e021      	b.n	8003494 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e4      	bne.n	800342c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fee4 	bl	8004230 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 ff8b 	bl	8004384 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 ffe1 	bl	8004436 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	461a      	mov	r2, r3
 800347a:	2100      	movs	r1, #0
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 ff49 	bl	8004314 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2210      	movs	r2, #16
 800348e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	40013800 	.word	0x40013800

080034a4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d150      	bne.n	8003558 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2223      	movs	r2, #35	@ 0x23
 80034ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2204      	movs	r2, #4
 80034c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f9fd 	bl	80038c4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0208 	orr.w	r2, r2, #8
 80034d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f7fe fc5e 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0204 	orr.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003508:	2001      	movs	r0, #1
 800350a:	f7fe fc4b 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fd2a 	bl	8003f70 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800352e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003532:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800354a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2223      	movs	r2, #35	@ 0x23
 8003550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003570:	2b23      	cmp	r3, #35	@ 0x23
 8003572:	d14a      	bne.n	800360a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2223      	movs	r2, #35	@ 0x23
 8003578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800358e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003592:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	f023 0302 	bic.w	r3, r3, #2
 80035a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035aa:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7fe fbed 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fccc 	bl	8003f70 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0208 	bic.w	r2, r2, #8
 80035e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f7fe fbd7 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2210      	movs	r2, #16
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07c      	b.n	8003734 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003640:	2b23      	cmp	r3, #35	@ 0x23
 8003642:	d176      	bne.n	8003732 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003644:	2200      	movs	r2, #0
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 ff61 	bl	8004510 <ETH_Prepare_Tx_Descriptors>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f043 0202 	orr.w	r2, r3, #2
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e065      	b.n	8003734 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003668:	f3bf 8f4f 	dsb	sy
}
 800366c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3206      	adds	r2, #6
 8003676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	629a      	str	r2, [r3, #40]	@ 0x28
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368a:	2b03      	cmp	r3, #3
 800368c:	d904      	bls.n	8003698 <HAL_ETH_Transmit+0x84>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	1f1a      	subs	r2, r3, #4
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3106      	adds	r1, #6
 80036a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80036a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036ac:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80036ae:	f7fe fb6d 	bl	8001d8c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80036b4:	e037      	b.n	8003726 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d011      	beq.n	80036ec <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f043 0208 	orr.w	r2, r3, #8
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e023      	b.n	8003734 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d018      	beq.n	8003726 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036f4:	f7fe fb4a 	bl	8001d8c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d302      	bcc.n	800370a <HAL_ETH_Transmit+0xf6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003710:	f043 0204 	orr.w	r2, r3, #4
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003720:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e006      	b.n	8003734 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	dbc3      	blt.n	80036b6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0a8      	b.n	80038ba <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800376e:	2b23      	cmp	r3, #35	@ 0x23
 8003770:	d001      	beq.n	8003776 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0a1      	b.n	80038ba <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	3212      	adds	r2, #18
 8003782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003786:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378c:	f1c3 0304 	rsb	r3, r3, #4
 8003790:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003792:	e06a      	b.n	800386a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <HAL_ETH_ReadData+0x88>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d040      	beq.n	8003846 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80037f8:	3b04      	subs	r3, #4
 80037fa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003820:	461a      	mov	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f008 fa03 	bl	800bc30 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	441a      	add	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2200      	movs	r2, #0
 8003844:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3301      	adds	r3, #1
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d902      	bls.n	8003858 <HAL_ETH_ReadData+0x11c>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3b04      	subs	r3, #4
 8003856:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	3212      	adds	r2, #18
 800385e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003862:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3301      	adds	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800386e:	2b00      	cmp	r3, #0
 8003870:	db06      	blt.n	8003880 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d202      	bcs.n	8003880 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d089      	beq.n	8003794 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	441a      	add	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f815 	bl	80038c4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d108      	bne.n	80038b8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80038d0:	2301      	movs	r3, #1
 80038d2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	3212      	adds	r2, #18
 80038e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ea:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80038ec:	e040      	b.n	8003970 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d112      	bne.n	800391c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	4618      	mov	r0, r3
 80038fc:	f008 f968 	bl	800bbd0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	74fb      	strb	r3, [r7, #19]
 800390a:	e007      	b.n	800391c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	461a      	mov	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	461a      	mov	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d026      	beq.n	8003970 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a1e      	ldr	r2, [pc, #120]	@ (80039a8 <ETH_UpdateDescriptor+0xe4>)
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	e003      	b.n	800393a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003938:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800393a:	f3bf 8f5f 	dmb	sy
}
 800393e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3301      	adds	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d902      	bls.n	800395e <ETH_UpdateDescriptor+0x9a>
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3b04      	subs	r3, #4
 800395c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	3212      	adds	r2, #18
 8003964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003968:	617b      	str	r3, [r7, #20]
      desccount--;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3b01      	subs	r3, #1
 800396e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <ETH_UpdateDescriptor+0xb8>
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1b8      	bne.n	80038ee <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	429a      	cmp	r2, r3
 8003984:	d00c      	beq.n	80039a0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80039a0:	bf00      	nop
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	80004600 	.word	0x80004600

080039ac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c2:	2b40      	cmp	r3, #64	@ 0x40
 80039c4:	d112      	bne.n	80039ec <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	d109      	bne.n	80039ec <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b50      	ldr	r3, [pc, #320]	@ (8003b24 <HAL_ETH_IRQHandler+0x178>)
 80039e4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8ac 	bl	8003b44 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d113      	bne.n	8003a26 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d10a      	bne.n	8003a26 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003a1e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f885 	bl	8003b30 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a38:	d14c      	bne.n	8003ad4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a4c:	d142      	bne.n	8003ad4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f043 0208 	orr.w	r2, r3, #8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a70:	d11a      	bne.n	8003aa8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <HAL_ETH_IRQHandler+0x17c>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003a98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a9c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	22e0      	movs	r2, #224	@ 0xe0
 8003aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003aa6:	e012      	b.n	8003ace <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003acc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f842 	bl	8003b58 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d10e      	bne.n	8003b00 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f83a 	bl	8003b6c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_ETH_IRQHandler+0x180>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003b0c:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <HAL_ETH_IRQHandler+0x180>)
 8003b0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b12:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f833 	bl	8003b80 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	00010040 	.word	0x00010040
 8003b28:	007e2000 	.word	0x007e2000
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 031c 	and.w	r3, r3, #28
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	02db      	lsls	r3, r3, #11
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0302 	bic.w	r3, r3, #2
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003be4:	f7fe f8d2 	bl	8001d8c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bea:	e00d      	b.n	8003c08 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003bec:	f7fe f8ce 	bl	8001d8c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfa:	d301      	bcc.n	8003c00 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e010      	b.n	8003c22 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ec      	bne.n	8003bec <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 031c 	and.w	r3, r3, #28
 8003c46:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	02db      	lsls	r3, r3, #11
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	019b      	lsls	r3, r3, #6
 8003c58:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c84:	f7fe f882 	bl	8001d8c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c8a:	e00d      	b.n	8003ca8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003c8c:	f7fe f87e 	bl	8001d8c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c9a:	d301      	bcc.n	8003ca0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e009      	b.n	8003cb4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1ec      	bne.n	8003c8c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0d9      	b.n	8003e84 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e00b      	b.n	8003ebc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d105      	bne.n	8003eba <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f883 	bl	8003fbc <ETH_SetMACConfig>

    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 031c 	bic.w	r3, r3, #28
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003edc:	f003 f9c0 	bl	8007260 <HAL_RCC_GetHCLKFreq>
 8003ee0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f5c <HAL_ETH_SetMDIOClockRange+0x98>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d908      	bls.n	8003efc <HAL_ETH_SetMDIOClockRange+0x38>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	@ (8003f60 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d804      	bhi.n	8003efc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 0308 	orr.w	r3, r3, #8
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e027      	b.n	8003f4c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d908      	bls.n	8003f16 <HAL_ETH_SetMDIOClockRange+0x52>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a17      	ldr	r2, [pc, #92]	@ (8003f64 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d204      	bcs.n	8003f16 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f043 030c 	orr.w	r3, r3, #12
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e01a      	b.n	8003f4c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4a12      	ldr	r2, [pc, #72]	@ (8003f64 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d303      	bcc.n	8003f26 <HAL_ETH_SetMDIOClockRange+0x62>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a11      	ldr	r2, [pc, #68]	@ (8003f68 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d911      	bls.n	8003f4a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a0f      	ldr	r2, [pc, #60]	@ (8003f68 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d908      	bls.n	8003f40 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4a0e      	ldr	r2, [pc, #56]	@ (8003f6c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d804      	bhi.n	8003f40 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e005      	b.n	8003f4c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f043 0310 	orr.w	r3, r3, #16
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e000      	b.n	8003f4c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003f4a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	611a      	str	r2, [r3, #16]
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	01312cff 	.word	0x01312cff
 8003f60:	02160ebf 	.word	0x02160ebf
 8003f64:	03938700 	.word	0x03938700
 8003f68:	05f5e0ff 	.word	0x05f5e0ff
 8003f6c:	08f0d17f 	.word	0x08f0d17f

08003f70 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f92:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f7fd feff 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fb0:	6193      	str	r3, [r2, #24]
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4b51      	ldr	r3, [pc, #324]	@ (8004118 <ETH_SetMACConfig+0x15c>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	7c1b      	ldrb	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <ETH_SetMACConfig+0x28>
 8003fde:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003fe2:	e000      	b.n	8003fe6 <ETH_SetMACConfig+0x2a>
 8003fe4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	7c5b      	ldrb	r3, [r3, #17]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <ETH_SetMACConfig+0x38>
 8003fee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ff2:	e000      	b.n	8003ff6 <ETH_SetMACConfig+0x3a>
 8003ff4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ff6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ffc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	7fdb      	ldrb	r3, [r3, #31]
 8004002:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004004:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800400a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	7f92      	ldrb	r2, [r2, #30]
 8004010:	2a00      	cmp	r2, #0
 8004012:	d102      	bne.n	800401a <ETH_SetMACConfig+0x5e>
 8004014:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004018:	e000      	b.n	800401c <ETH_SetMACConfig+0x60>
 800401a:	2200      	movs	r2, #0
                        macconf->Speed |
 800401c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	7f1b      	ldrb	r3, [r3, #28]
 8004022:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004024:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800402a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	791b      	ldrb	r3, [r3, #4]
 8004030:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	f892 2020 	ldrb.w	r2, [r2, #32]
 800403a:	2a00      	cmp	r2, #0
 800403c:	d102      	bne.n	8004044 <ETH_SetMACConfig+0x88>
 800403e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004042:	e000      	b.n	8004046 <ETH_SetMACConfig+0x8a>
 8004044:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004046:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	7bdb      	ldrb	r3, [r3, #15]
 800404c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800404e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004054:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800405c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800405e:	4313      	orrs	r3, r2
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004076:	2001      	movs	r0, #1
 8004078:	f7fd fe94 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004092:	4013      	ands	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	d101      	bne.n	80040aa <ETH_SetMACConfig+0xee>
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	e000      	b.n	80040ac <ETH_SetMACConfig+0xf0>
 80040aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80040ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80040b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80040ba:	2a01      	cmp	r2, #1
 80040bc:	d101      	bne.n	80040c2 <ETH_SetMACConfig+0x106>
 80040be:	2208      	movs	r2, #8
 80040c0:	e000      	b.n	80040c4 <ETH_SetMACConfig+0x108>
 80040c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80040c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80040cc:	2a01      	cmp	r2, #1
 80040ce:	d101      	bne.n	80040d4 <ETH_SetMACConfig+0x118>
 80040d0:	2204      	movs	r2, #4
 80040d2:	e000      	b.n	80040d6 <ETH_SetMACConfig+0x11a>
 80040d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80040d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80040de:	2a01      	cmp	r2, #1
 80040e0:	d101      	bne.n	80040e6 <ETH_SetMACConfig+0x12a>
 80040e2:	2202      	movs	r2, #2
 80040e4:	e000      	b.n	80040e8 <ETH_SetMACConfig+0x12c>
 80040e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80040e8:	4313      	orrs	r3, r2
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004100:	2001      	movs	r0, #1
 8004102:	f7fd fe4f 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	619a      	str	r2, [r3, #24]
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	ff20810f 	.word	0xff20810f

0800411c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <ETH_SetDMAConfig+0x110>)
 8004136:	4013      	ands	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	7b1b      	ldrb	r3, [r3, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <ETH_SetDMAConfig+0x2c>
 8004142:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004146:	e000      	b.n	800414a <ETH_SetDMAConfig+0x2e>
 8004148:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	7b5b      	ldrb	r3, [r3, #13]
 800414e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004150:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	7f52      	ldrb	r2, [r2, #29]
 8004156:	2a00      	cmp	r2, #0
 8004158:	d102      	bne.n	8004160 <ETH_SetDMAConfig+0x44>
 800415a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800415e:	e000      	b.n	8004162 <ETH_SetDMAConfig+0x46>
 8004160:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004162:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	7b9b      	ldrb	r3, [r3, #14]
 8004168:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800416a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004170:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	7f1b      	ldrb	r3, [r3, #28]
 8004176:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004178:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	7f9b      	ldrb	r3, [r3, #30]
 800417e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004180:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004186:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800418e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004190:	4313      	orrs	r3, r2
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a0:	461a      	mov	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7fd fdf6 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c0:	461a      	mov	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	791b      	ldrb	r3, [r3, #4]
 80041ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80041d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80041d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80041dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80041e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80041ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80041f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004202:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004210:	2001      	movs	r0, #1
 8004212:	f7fd fdc7 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	f8de3f23 	.word	0xf8de3f23

08004230 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b0a6      	sub	sp, #152	@ 0x98
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004244:	2300      	movs	r3, #0
 8004246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004254:	2300      	movs	r3, #0
 8004256:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800426c:	2300      	movs	r3, #0
 800426e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004270:	2300      	movs	r3, #0
 8004272:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004276:	2300      	movs	r3, #0
 8004278:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004292:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004296:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004298:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800429c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80042a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fe86 	bl	8003fbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80042be:	2301      	movs	r3, #1
 80042c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80042d2:	2300      	movs	r3, #0
 80042d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80042dc:	2301      	movs	r3, #1
 80042de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80042e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80042e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80042ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80042ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ff08 	bl	800411c <ETH_SetDMAConfig>
}
 800430c:	bf00      	nop
 800430e:	3798      	adds	r7, #152	@ 0x98
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3305      	adds	r3, #5
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	3204      	adds	r2, #4
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4b11      	ldr	r3, [pc, #68]	@ (800437c <ETH_MACAddressConfig+0x68>)
 8004336:	4413      	add	r3, r2
 8004338:	461a      	mov	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3303      	adds	r3, #3
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	061a      	lsls	r2, r3, #24
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3302      	adds	r3, #2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3301      	adds	r3, #1
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	4313      	orrs	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <ETH_MACAddressConfig+0x6c>)
 8004366:	4413      	add	r3, r2
 8004368:	461a      	mov	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	6013      	str	r3, [r2, #0]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40028040 	.word	0x40028040
 8004380:	40028044 	.word	0x40028044

08004384 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e03e      	b.n	8004410 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68d9      	ldr	r1, [r3, #12]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	3206      	adds	r2, #6
 80043c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d80c      	bhi.n	80043f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68d9      	ldr	r1, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	461a      	mov	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e004      	b.n	80043fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d9bd      	bls.n	8004392 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004428:	611a      	str	r2, [r3, #16]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e046      	b.n	80044d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6919      	ldr	r1, [r3, #16]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004480:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8004488:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	3212      	adds	r2, #18
 800449e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d80c      	bhi.n	80044c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6919      	ldr	r1, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	461a      	mov	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e004      	b.n	80044cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d9b5      	bls.n	8004444 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004502:	60da      	str	r2, [r3, #12]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004510:	b480      	push	{r7}
 8004512:	b08d      	sub	sp, #52	@ 0x34
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3318      	adds	r3, #24
 8004520:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800454e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004552:	d007      	beq.n	8004564 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	3304      	adds	r3, #4
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004564:	2302      	movs	r3, #2
 8004566:	e0ff      	b.n	8004768 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	3301      	adds	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	4b7d      	ldr	r3, [pc, #500]	@ (8004774 <ETH_Prepare_Tx_Descriptors+0x264>)
 800457e:	4013      	ands	r3, r2
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	6852      	ldr	r2, [r2, #4]
 8004584:	431a      	orrs	r2, r3
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80045ea:	f3bf 8f5f 	dmb	sy
}
 80045ee:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80045fc:	e082      	b.n	8004704 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e005      	b.n	800462a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800462a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462c:	3301      	adds	r3, #1
 800462e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004632:	2b03      	cmp	r3, #3
 8004634:	d902      	bls.n	800463c <ETH_Prepare_Tx_Descriptors+0x12c>
 8004636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004638:	3b04      	subs	r3, #4
 800463a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004644:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800465a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800465e:	d007      	beq.n	8004670 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	3304      	adds	r3, #4
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d029      	beq.n	80046c4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800467e:	2300      	movs	r3, #0
 8004680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004682:	e019      	b.n	80046b8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004684:	f3bf 8f5f 	dmb	sy
}
 8004688:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	3301      	adds	r3, #1
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d902      	bls.n	80046a8 <ETH_Prepare_Tx_Descriptors+0x198>
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	3b04      	subs	r3, #4
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	3301      	adds	r3, #1
 80046b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	429a      	cmp	r2, r3
 80046be:	d3e1      	bcc.n	8004684 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80046c0:	2302      	movs	r3, #2
 80046c2:	e051      	b.n	8004768 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	3301      	adds	r3, #1
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <ETH_Prepare_Tx_Descriptors+0x264>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	6852      	ldr	r2, [r2, #4]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3301      	adds	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80046f2:	f3bf 8f5f 	dmb	sy
}
 80046f6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f47f af78 	bne.w	80045fe <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e005      	b.n	800472e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	3304      	adds	r3, #4
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800474e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004750:	b672      	cpsid	i
}
 8004752:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	4413      	add	r3, r2
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004762:	b662      	cpsie	i
}
 8004764:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3734      	adds	r7, #52	@ 0x34
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	ffffe000 	.word	0xffffe000

08004778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	@ 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e175      	b.n	8004a84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004798:	2201      	movs	r2, #1
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	f040 8164 	bne.w	8004a7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d005      	beq.n	80047ce <HAL_GPIO_Init+0x56>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d130      	bne.n	8004830 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	2203      	movs	r2, #3
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004804:	2201      	movs	r2, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 0201 	and.w	r2, r3, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b03      	cmp	r3, #3
 800483a:	d017      	beq.n	800486c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d123      	bne.n	80048c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	08da      	lsrs	r2, r3, #3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3208      	adds	r2, #8
 8004880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	220f      	movs	r2, #15
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	08da      	lsrs	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3208      	adds	r2, #8
 80048ba:	69b9      	ldr	r1, [r7, #24]
 80048bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	2203      	movs	r2, #3
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0203 	and.w	r2, r3, #3
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80be 	beq.w	8004a7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004902:	4b66      	ldr	r3, [pc, #408]	@ (8004a9c <HAL_GPIO_Init+0x324>)
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	4a65      	ldr	r2, [pc, #404]	@ (8004a9c <HAL_GPIO_Init+0x324>)
 8004908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800490c:	6453      	str	r3, [r2, #68]	@ 0x44
 800490e:	4b63      	ldr	r3, [pc, #396]	@ (8004a9c <HAL_GPIO_Init+0x324>)
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800491a:	4a61      	ldr	r2, [pc, #388]	@ (8004aa0 <HAL_GPIO_Init+0x328>)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	3302      	adds	r3, #2
 8004922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004926:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	220f      	movs	r2, #15
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a58      	ldr	r2, [pc, #352]	@ (8004aa4 <HAL_GPIO_Init+0x32c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d037      	beq.n	80049b6 <HAL_GPIO_Init+0x23e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a57      	ldr	r2, [pc, #348]	@ (8004aa8 <HAL_GPIO_Init+0x330>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d031      	beq.n	80049b2 <HAL_GPIO_Init+0x23a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a56      	ldr	r2, [pc, #344]	@ (8004aac <HAL_GPIO_Init+0x334>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d02b      	beq.n	80049ae <HAL_GPIO_Init+0x236>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a55      	ldr	r2, [pc, #340]	@ (8004ab0 <HAL_GPIO_Init+0x338>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d025      	beq.n	80049aa <HAL_GPIO_Init+0x232>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a54      	ldr	r2, [pc, #336]	@ (8004ab4 <HAL_GPIO_Init+0x33c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01f      	beq.n	80049a6 <HAL_GPIO_Init+0x22e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a53      	ldr	r2, [pc, #332]	@ (8004ab8 <HAL_GPIO_Init+0x340>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d019      	beq.n	80049a2 <HAL_GPIO_Init+0x22a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a52      	ldr	r2, [pc, #328]	@ (8004abc <HAL_GPIO_Init+0x344>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_GPIO_Init+0x226>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a51      	ldr	r2, [pc, #324]	@ (8004ac0 <HAL_GPIO_Init+0x348>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00d      	beq.n	800499a <HAL_GPIO_Init+0x222>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a50      	ldr	r2, [pc, #320]	@ (8004ac4 <HAL_GPIO_Init+0x34c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <HAL_GPIO_Init+0x21e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a4f      	ldr	r2, [pc, #316]	@ (8004ac8 <HAL_GPIO_Init+0x350>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_GPIO_Init+0x21a>
 800498e:	2309      	movs	r3, #9
 8004990:	e012      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 8004992:	230a      	movs	r3, #10
 8004994:	e010      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 8004996:	2308      	movs	r3, #8
 8004998:	e00e      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 800499a:	2307      	movs	r3, #7
 800499c:	e00c      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 800499e:	2306      	movs	r3, #6
 80049a0:	e00a      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 80049a2:	2305      	movs	r3, #5
 80049a4:	e008      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 80049a6:	2304      	movs	r3, #4
 80049a8:	e006      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 80049aa:	2303      	movs	r3, #3
 80049ac:	e004      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e002      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <HAL_GPIO_Init+0x240>
 80049b6:	2300      	movs	r3, #0
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	f002 0203 	and.w	r2, r2, #3
 80049be:	0092      	lsls	r2, r2, #2
 80049c0:	4093      	lsls	r3, r2
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049c8:	4935      	ldr	r1, [pc, #212]	@ (8004aa0 <HAL_GPIO_Init+0x328>)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	3302      	adds	r3, #2
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049d6:	4b3d      	ldr	r3, [pc, #244]	@ (8004acc <HAL_GPIO_Init+0x354>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049fa:	4a34      	ldr	r2, [pc, #208]	@ (8004acc <HAL_GPIO_Init+0x354>)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a00:	4b32      	ldr	r3, [pc, #200]	@ (8004acc <HAL_GPIO_Init+0x354>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a24:	4a29      	ldr	r2, [pc, #164]	@ (8004acc <HAL_GPIO_Init+0x354>)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a2a:	4b28      	ldr	r3, [pc, #160]	@ (8004acc <HAL_GPIO_Init+0x354>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004acc <HAL_GPIO_Init+0x354>)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	@ (8004acc <HAL_GPIO_Init+0x354>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a78:	4a14      	ldr	r2, [pc, #80]	@ (8004acc <HAL_GPIO_Init+0x354>)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3301      	adds	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	f67f ae86 	bls.w	8004798 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3724      	adds	r7, #36	@ 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40013800 	.word	0x40013800
 8004aa4:	40020000 	.word	0x40020000
 8004aa8:	40020400 	.word	0x40020400
 8004aac:	40020800 	.word	0x40020800
 8004ab0:	40020c00 	.word	0x40020c00
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40021400 	.word	0x40021400
 8004abc:	40021800 	.word	0x40021800
 8004ac0:	40021c00 	.word	0x40021c00
 8004ac4:	40022000 	.word	0x40022000
 8004ac8:	40022400 	.word	0x40022400
 8004acc:	40013c00 	.word	0x40013c00

08004ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
 8004adc:	4613      	mov	r3, r2
 8004ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ae0:	787b      	ldrb	r3, [r7, #1]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004aec:	e003      	b.n	8004af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004aee:	887b      	ldrh	r3, [r7, #2]
 8004af0:	041a      	lsls	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	619a      	str	r2, [r3, #24]
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07f      	b.n	8004c16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fa3e 	bl	8000fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	@ 0x24
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	e006      	b.n	8004b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d104      	bne.n	8004b9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c20 <HAL_I2C_Init+0x11c>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	02008000 	.word	0x02008000

08004c24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	460b      	mov	r3, r1
 8004c32:	817b      	strh	r3, [r7, #10]
 8004c34:	4613      	mov	r3, r2
 8004c36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	f040 80da 	bne.w	8004dfa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_I2C_Master_Transmit+0x30>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0d3      	b.n	8004dfc <HAL_I2C_Master_Transmit+0x1d8>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fd f896 	bl	8001d8c <HAL_GetTick>
 8004c60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2319      	movs	r3, #25
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 f9d9 	bl	8006026 <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0be      	b.n	8004dfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2221      	movs	r2, #33	@ 0x21
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	893a      	ldrh	r2, [r7, #8]
 8004c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2bff      	cmp	r3, #255	@ 0xff
 8004cae:	d90e      	bls.n	8004cce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	22ff      	movs	r2, #255	@ 0xff
 8004cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	8979      	ldrh	r1, [r7, #10]
 8004cbe:	4b51      	ldr	r3, [pc, #324]	@ (8004e04 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f001 fb4a 	bl	8006360 <I2C_TransferConfig>
 8004ccc:	e06c      	b.n	8004da8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	8979      	ldrh	r1, [r7, #10]
 8004ce0:	4b48      	ldr	r3, [pc, #288]	@ (8004e04 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f001 fb39 	bl	8006360 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004cee:	e05b      	b.n	8004da8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	6a39      	ldr	r1, [r7, #32]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f001 f9d6 	bl	80060a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e07b      	b.n	8004dfc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d034      	beq.n	8004da8 <HAL_I2C_Master_Transmit+0x184>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d130      	bne.n	8004da8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f001 f968 	bl	8006026 <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e04d      	b.n	8004dfc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2bff      	cmp	r3, #255	@ 0xff
 8004d68:	d90e      	bls.n	8004d88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	22ff      	movs	r2, #255	@ 0xff
 8004d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	8979      	ldrh	r1, [r7, #10]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f001 faed 	bl	8006360 <I2C_TransferConfig>
 8004d86:	e00f      	b.n	8004da8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	8979      	ldrh	r1, [r7, #10]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f001 fadc 	bl	8006360 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d19e      	bne.n	8004cf0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	6a39      	ldr	r1, [r7, #32]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f001 f9b5 	bl	8006126 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e01a      	b.n	8004dfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <HAL_I2C_Master_Transmit+0x1e4>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	80002000 	.word	0x80002000
 8004e08:	fe00e800 	.word	0xfe00e800

08004e0c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d139      	bne.n	8004e9a <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2C_Slave_Receive_IT+0x28>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e033      	b.n	8004e9c <HAL_I2C_Slave_Receive_IT+0x90>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2222      	movs	r2, #34	@ 0x22
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e60:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <HAL_I2C_Slave_Receive_IT+0x98>)
 8004e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a09      	ldr	r2, [pc, #36]	@ (8004ea8 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8004e82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8004e8c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f001 fa97 	bl	80063c4 <I2C_Enable_IRQ>

    return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e000      	b.n	8004e9c <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
  }
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	ffff0000 	.word	0xffff0000
 8004ea8:	080051c5 	.word	0x080051c5

08004eac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	@ 0x28
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	f040 80ef 	bne.w	80050ac <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004edc:	d101      	bne.n	8004ee2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e0e5      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_I2C_IsDeviceReady+0x44>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e0de      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2224      	movs	r2, #36	@ 0x24
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d105      	bne.n	8004f1a <HAL_I2C_IsDeviceReady+0x6e>
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f14:	4b68      	ldr	r3, [pc, #416]	@ (80050b8 <HAL_I2C_IsDeviceReady+0x20c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	e004      	b.n	8004f24 <HAL_I2C_IsDeviceReady+0x78>
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f20:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fc ff2f 	bl	8001d8c <HAL_GetTick>
 8004f2e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f5c:	e034      	b.n	8004fc8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d01a      	beq.n	8004f9c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fc ff11 	bl	8001d8c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <HAL_I2C_IsDeviceReady+0xd0>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10f      	bne.n	8004f9c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e088      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004fc8:	7ffb      	ldrb	r3, [r7, #31]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <HAL_I2C_IsDeviceReady+0x128>
 8004fce:	7fbb      	ldrb	r3, [r7, #30]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0c4      	beq.n	8004f5e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d01a      	beq.n	8005018 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2120      	movs	r1, #32
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f001 f81a 	bl	8006026 <I2C_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e058      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2220      	movs	r2, #32
 8005002:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	e04a      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	2120      	movs	r1, #32
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 ffff 	bl	8006026 <I2C_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e03d      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2210      	movs	r2, #16
 8005038:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2220      	movs	r2, #32
 8005040:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	429a      	cmp	r2, r3
 8005048:	d118      	bne.n	800507c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005058:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2200      	movs	r2, #0
 8005062:	2120      	movs	r1, #32
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 ffde 	bl	8006026 <I2C_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e01c      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2220      	movs	r2, #32
 800507a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	f63f af3d 	bhi.w	8004f06 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	02002000 	.word	0x02002000

080050bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
  }
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
 8005138:	4613      	mov	r3, r2
 800513a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <I2C_Slave_ISR_IT+0x24>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e0e1      	b.n	80053ac <I2C_Slave_ISR_IT+0x1e8>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005204:	6939      	ldr	r1, [r7, #16]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fc7a 	bl	8005b00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	d04b      	beq.n	80052ae <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800521c:	2b00      	cmp	r3, #0
 800521e:	d046      	beq.n	80052ae <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d128      	bne.n	800527c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b28      	cmp	r3, #40	@ 0x28
 8005234:	d108      	bne.n	8005248 <I2C_Slave_ISR_IT+0x84>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800523c:	d104      	bne.n	8005248 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800523e:	6939      	ldr	r1, [r7, #16]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fd63 	bl	8005d0c <I2C_ITListenCplt>
 8005246:	e031      	b.n	80052ac <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b29      	cmp	r3, #41	@ 0x29
 8005252:	d10e      	bne.n	8005272 <I2C_Slave_ISR_IT+0xae>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800525a:	d00a      	beq.n	8005272 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2210      	movs	r2, #16
 8005262:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fe9c 	bl	8005fa2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fb24 	bl	80058b8 <I2C_ITSlaveSeqCplt>
 8005270:	e01c      	b.n	80052ac <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2210      	movs	r2, #16
 8005278:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800527a:	e08f      	b.n	800539c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2210      	movs	r2, #16
 8005282:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005288:	f043 0204 	orr.w	r2, r3, #4
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <I2C_Slave_ISR_IT+0xda>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800529c:	d17e      	bne.n	800539c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	4619      	mov	r1, r3
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fd85 	bl	8005db4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80052aa:	e077      	b.n	800539c <I2C_Slave_ISR_IT+0x1d8>
 80052ac:	e076      	b.n	800539c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d02f      	beq.n	8005318 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02a      	beq.n	8005318 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d018      	beq.n	80052fe <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d14b      	bne.n	80053a0 <I2C_Slave_ISR_IT+0x1dc>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800530e:	d047      	beq.n	80053a0 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fad1 	bl	80058b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005316:	e043      	b.n	80053a0 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800532c:	6939      	ldr	r1, [r7, #16]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 fa01 	bl	8005736 <I2C_ITAddrCplt>
 8005334:	e035      	b.n	80053a2 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d030      	beq.n	80053a2 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005346:	2b00      	cmp	r3, #0
 8005348:	d02b      	beq.n	80053a2 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d018      	beq.n	8005386 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005384:	e00d      	b.n	80053a2 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800538c:	d002      	beq.n	8005394 <I2C_Slave_ISR_IT+0x1d0>
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fa8f 	bl	80058b8 <I2C_ITSlaveSeqCplt>
 800539a:	e002      	b.n	80053a2 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800539c:	bf00      	nop
 800539e:	e000      	b.n	80053a2 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80053a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <I2C_Master_ISR_DMA+0x1a>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0d9      	b.n	8005582 <I2C_Master_ISR_DMA+0x1ce>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d011      	beq.n	800540e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2210      	movs	r2, #16
 80053f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80053fe:	2120      	movs	r1, #32
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 ffdf 	bl	80063c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fdcb 	bl	8005fa2 <I2C_Flush_TXDR>
 800540c:	e0b4      	b.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005414:	2b00      	cmp	r3, #0
 8005416:	d071      	beq.n	80054fc <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800541e:	2b00      	cmp	r3, #0
 8005420:	d06c      	beq.n	80054fc <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005430:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d04e      	beq.n	80054da <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005448:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	2bff      	cmp	r3, #255	@ 0xff
 8005452:	d906      	bls.n	8005462 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	22ff      	movs	r2, #255	@ 0xff
 8005458:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800545a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e010      	b.n	8005484 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005474:	d003      	beq.n	800547e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e002      	b.n	8005484 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800547e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005482:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005488:	b2da      	uxtb	r2, r3
 800548a:	8a79      	ldrh	r1, [r7, #18]
 800548c:	2300      	movs	r3, #0
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 ff64 	bl	8006360 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b22      	cmp	r3, #34	@ 0x22
 80054b4:	d108      	bne.n	80054c8 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80054c6:	e057      	b.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80054d8:	e04e      	b.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054e8:	d003      	beq.n	80054f2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f9a7 	bl	800583e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80054f0:	e042      	b.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80054f2:	2140      	movs	r1, #64	@ 0x40
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fc5d 	bl	8005db4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80054fa:	e03d      	b.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d028      	beq.n	8005558 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800550c:	2b00      	cmp	r3, #0
 800550e:	d023      	beq.n	8005558 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d119      	bne.n	800554e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005528:	d025      	beq.n	8005576 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005532:	d108      	bne.n	8005546 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005542:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005544:	e017      	b.n	8005576 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f979 	bl	800583e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800554c:	e013      	b.n	8005576 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800554e:	2140      	movs	r1, #64	@ 0x40
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fc2f 	bl	8005db4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005556:	e00e      	b.n	8005576 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f9fe 	bl	8005970 <I2C_ITMasterCplt>
 8005574:	e000      	b.n	8005578 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005576:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <I2C_Slave_ISR_DMA+0x24>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e0bf      	b.n	800572e <I2C_Slave_ISR_DMA+0x1a4>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fa97 	bl	8005b00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8095 	beq.w	8005708 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 808f 	beq.w	8005708 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d07d      	beq.n	80056fa <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800561c:	2301      	movs	r3, #1
 800561e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800563e:	2301      	movs	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d128      	bne.n	800569a <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b28      	cmp	r3, #40	@ 0x28
 8005652:	d108      	bne.n	8005666 <I2C_Slave_ISR_DMA+0xdc>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800565a:	d104      	bne.n	8005666 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fb54 	bl	8005d0c <I2C_ITListenCplt>
 8005664:	e048      	b.n	80056f8 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b29      	cmp	r3, #41	@ 0x29
 8005670:	d10e      	bne.n	8005690 <I2C_Slave_ISR_DMA+0x106>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005678:	d00a      	beq.n	8005690 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2210      	movs	r2, #16
 8005680:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fc8d 	bl	8005fa2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f915 	bl	80058b8 <I2C_ITSlaveSeqCplt>
 800568e:	e033      	b.n	80056f8 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2210      	movs	r2, #16
 8005696:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005698:	e034      	b.n	8005704 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2210      	movs	r2, #16
 80056a0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a6:	f043 0204 	orr.w	r2, r3, #4
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <I2C_Slave_ISR_DMA+0x13a>
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056c2:	d11f      	bne.n	8005704 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b21      	cmp	r3, #33	@ 0x21
 80056c8:	d002      	beq.n	80056d0 <I2C_Slave_ISR_DMA+0x146>
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	2b29      	cmp	r3, #41	@ 0x29
 80056ce:	d103      	bne.n	80056d8 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2221      	movs	r2, #33	@ 0x21
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80056d6:	e008      	b.n	80056ea <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b22      	cmp	r3, #34	@ 0x22
 80056dc:	d002      	beq.n	80056e4 <I2C_Slave_ISR_DMA+0x15a>
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056e2:	d102      	bne.n	80056ea <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2222      	movs	r2, #34	@ 0x22
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	4619      	mov	r1, r3
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fb5f 	bl	8005db4 <I2C_ITError>
      if (treatdmanack == 1U)
 80056f6:	e005      	b.n	8005704 <I2C_Slave_ISR_DMA+0x17a>
 80056f8:	e004      	b.n	8005704 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2210      	movs	r2, #16
 8005700:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005702:	e00f      	b.n	8005724 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8005704:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005706:	e00d      	b.n	8005724 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d008      	beq.n	8005724 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f809 	bl	8005736 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800574c:	2b28      	cmp	r3, #40	@ 0x28
 800574e:	d16a      	bne.n	8005826 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	b29b      	uxth	r3, r3
 800576a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800576e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800578a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d138      	bne.n	8005806 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005794:	897b      	ldrh	r3, [r7, #10]
 8005796:	09db      	lsrs	r3, r3, #7
 8005798:	b29a      	uxth	r2, r3
 800579a:	89bb      	ldrh	r3, [r7, #12]
 800579c:	4053      	eors	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f003 0306 	and.w	r3, r3, #6
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11c      	bne.n	80057e2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d13b      	bne.n	8005836 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2208      	movs	r2, #8
 80057ca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057d4:	89ba      	ldrh	r2, [r7, #12]
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fca6 	bl	800512c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057e0:	e029      	b.n	8005836 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fe54 	bl	8006498 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057f8:	89ba      	ldrh	r2, [r7, #12]
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fc94 	bl	800512c <HAL_I2C_AddrCallback>
}
 8005804:	e017      	b.n	8005836 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fe44 	bl	8006498 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005818:	89ba      	ldrh	r2, [r7, #12]
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff fc84 	bl	800512c <HAL_I2C_AddrCallback>
}
 8005824:	e007      	b.n	8005836 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2208      	movs	r2, #8
 800582c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b21      	cmp	r3, #33	@ 0x21
 8005858:	d115      	bne.n	8005886 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2211      	movs	r2, #17
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800586e:	2101      	movs	r1, #1
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fe11 	bl	8006498 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fc36 	bl	80050f0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005884:	e014      	b.n	80058b0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2212      	movs	r2, #18
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800589a:	2102      	movs	r1, #2
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fdfb 	bl	8006498 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fc2a 	bl	8005104 <HAL_I2C_MasterRxCpltCallback>
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e00c      	b.n	8005906 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005904:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b29      	cmp	r3, #41	@ 0x29
 8005910:	d112      	bne.n	8005938 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2228      	movs	r2, #40	@ 0x28
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2221      	movs	r2, #33	@ 0x21
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005920:	2101      	movs	r1, #1
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fdb8 	bl	8006498 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fbf1 	bl	8005118 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005936:	e017      	b.n	8005968 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b2a      	cmp	r3, #42	@ 0x2a
 8005942:	d111      	bne.n	8005968 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2228      	movs	r2, #40	@ 0x28
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2222      	movs	r2, #34	@ 0x22
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005952:	2102      	movs	r1, #2
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fd9f 	bl	8006498 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f010 fc8e 	bl	8016284 <HAL_I2C_SlaveRxCpltCallback>
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2220      	movs	r2, #32
 8005984:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b21      	cmp	r3, #33	@ 0x21
 8005990:	d107      	bne.n	80059a2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005992:	2101      	movs	r1, #1
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fd7f 	bl	8006498 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2211      	movs	r2, #17
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
 80059a0:	e00c      	b.n	80059bc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b22      	cmp	r3, #34	@ 0x22
 80059ac:	d106      	bne.n	80059bc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80059ae:	2102      	movs	r1, #2
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fd71 	bl	8006498 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2212      	movs	r2, #18
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4b4c      	ldr	r3, [pc, #304]	@ (8005af8 <I2C_ITMasterCplt+0x188>)
 80059c8:	400b      	ands	r3, r1
 80059ca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a49      	ldr	r2, [pc, #292]	@ (8005afc <I2C_ITMasterCplt+0x18c>)
 80059d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2210      	movs	r2, #16
 80059e8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b60      	cmp	r3, #96	@ 0x60
 8005a00:	d10a      	bne.n	8005a18 <I2C_ITMasterCplt+0xa8>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005a16:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fac2 	bl	8005fa2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a22:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b60      	cmp	r3, #96	@ 0x60
 8005a2e:	d002      	beq.n	8005a36 <I2C_ITMasterCplt+0xc6>
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d006      	beq.n	8005a44 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f9b9 	bl	8005db4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a42:	e054      	b.n	8005aee <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b21      	cmp	r3, #33	@ 0x21
 8005a4e:	d124      	bne.n	8005a9a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d10b      	bne.n	8005a82 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fb6e 	bl	800515c <HAL_I2C_MemTxCpltCallback>
}
 8005a80:	e035      	b.n	8005aee <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fb2c 	bl	80050f0 <HAL_I2C_MasterTxCpltCallback>
}
 8005a98:	e029      	b.n	8005aee <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b22      	cmp	r3, #34	@ 0x22
 8005aa4:	d123      	bne.n	8005aee <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	d10b      	bne.n	8005ad8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fb4d 	bl	8005170 <HAL_I2C_MemRxCpltCallback>
}
 8005ad6:	e00a      	b.n	8005aee <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fb0b 	bl	8005104 <HAL_I2C_MasterRxCpltCallback>
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	fe00e800 	.word	0xfe00e800
 8005afc:	ffff0000 	.word	0xffff0000

08005b00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b1c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2220      	movs	r2, #32
 8005b24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b21      	cmp	r3, #33	@ 0x21
 8005b2a:	d002      	beq.n	8005b32 <I2C_ITSlaveCplt+0x32>
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b29      	cmp	r3, #41	@ 0x29
 8005b30:	d108      	bne.n	8005b44 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005b32:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fcae 	bl	8006498 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2221      	movs	r2, #33	@ 0x21
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b42:	e00d      	b.n	8005b60 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b22      	cmp	r3, #34	@ 0x22
 8005b48:	d002      	beq.n	8005b50 <I2C_ITSlaveCplt+0x50>
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b4e:	d107      	bne.n	8005b60 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005b50:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fc9f 	bl	8006498 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2222      	movs	r2, #34	@ 0x22
 8005b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b62      	ldr	r3, [pc, #392]	@ (8005d04 <I2C_ITSlaveCplt+0x204>)
 8005b7c:	400b      	ands	r3, r1
 8005b7e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa0e 	bl	8005fa2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b9e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01f      	beq.n	8005be8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bb6:	e017      	b.n	8005be8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d012      	beq.n	8005be8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bd0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d020      	beq.n	8005c34 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f043 0204 	orr.w	r2, r3, #4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d010      	beq.n	8005c82 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f8a4 	bl	8005db4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b28      	cmp	r3, #40	@ 0x28
 8005c76:	d141      	bne.n	8005cfc <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c78:	6979      	ldr	r1, [r7, #20]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f846 	bl	8005d0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c80:	e03c      	b.n	8005cfc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c8a:	d014      	beq.n	8005cb6 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fe13 	bl	80058b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1c      	ldr	r2, [pc, #112]	@ (8005d08 <I2C_ITSlaveCplt+0x208>)
 8005c96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fa4a 	bl	8005148 <HAL_I2C_ListenCpltCallback>
}
 8005cb4:	e022      	b.n	8005cfc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b22      	cmp	r3, #34	@ 0x22
 8005cc0:	d10e      	bne.n	8005ce0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f010 fad3 	bl	8016284 <HAL_I2C_SlaveRxCpltCallback>
}
 8005cde:	e00d      	b.n	8005cfc <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fa0e 	bl	8005118 <HAL_I2C_SlaveTxCpltCallback>
}
 8005cfc:	bf00      	nop
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	fe00e800 	.word	0xfe00e800
 8005d08:	ffff0000 	.word	0xffff0000

08005d0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a25      	ldr	r2, [pc, #148]	@ (8005db0 <I2C_ITListenCplt+0xa4>)
 8005d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d022      	beq.n	8005d88 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d012      	beq.n	8005d88 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d80:	f043 0204 	orr.w	r2, r3, #4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005d88:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fb83 	bl	8006498 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2210      	movs	r2, #16
 8005d98:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff f9d0 	bl	8005148 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	ffff0000 	.word	0xffff0000

08005db4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f48 <I2C_ITError+0x194>)
 8005dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b28      	cmp	r3, #40	@ 0x28
 8005dea:	d005      	beq.n	8005df8 <I2C_ITError+0x44>
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b29      	cmp	r3, #41	@ 0x29
 8005df0:	d002      	beq.n	8005df8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005df6:	d10b      	bne.n	8005e10 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005df8:	2103      	movs	r1, #3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fb4c 	bl	8006498 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2228      	movs	r2, #40	@ 0x28
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a50      	ldr	r2, [pc, #320]	@ (8005f4c <I2C_ITError+0x198>)
 8005e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e0e:	e011      	b.n	8005e34 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e10:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb3f 	bl	8006498 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b60      	cmp	r3, #96	@ 0x60
 8005e24:	d003      	beq.n	8005e2e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d039      	beq.n	8005eb6 <I2C_ITError+0x102>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b11      	cmp	r3, #17
 8005e46:	d002      	beq.n	8005e4e <I2C_ITError+0x9a>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b21      	cmp	r3, #33	@ 0x21
 8005e4c:	d133      	bne.n	8005eb6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e5c:	d107      	bne.n	8005e6e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e6c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fd f9da 	bl	800322c <HAL_DMA_GetState>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d017      	beq.n	8005eae <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	4a33      	ldr	r2, [pc, #204]	@ (8005f50 <I2C_ITError+0x19c>)
 8005e84:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fd f81e 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d04d      	beq.n	8005f3a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005eac:	e045      	b.n	8005f3a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f850 	bl	8005f54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005eb4:	e041      	b.n	8005f3a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d039      	beq.n	8005f32 <I2C_ITError+0x17e>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b12      	cmp	r3, #18
 8005ec2:	d002      	beq.n	8005eca <I2C_ITError+0x116>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b22      	cmp	r3, #34	@ 0x22
 8005ec8:	d133      	bne.n	8005f32 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed8:	d107      	bne.n	8005eea <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ee8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd f99c 	bl	800322c <HAL_DMA_GetState>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d017      	beq.n	8005f2a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efe:	4a14      	ldr	r2, [pc, #80]	@ (8005f50 <I2C_ITError+0x19c>)
 8005f00:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fc ffe0 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d011      	beq.n	8005f3e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f28:	e009      	b.n	8005f3e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f812 	bl	8005f54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f30:	e005      	b.n	8005f3e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f80e 	bl	8005f54 <I2C_TreatErrorCallback>
  }
}
 8005f38:	e002      	b.n	8005f40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f3e:	bf00      	nop
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	ffff0000 	.word	0xffff0000
 8005f4c:	080051c5 	.word	0x080051c5
 8005f50:	08005feb 	.word	0x08005feb

08005f54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b60      	cmp	r3, #96	@ 0x60
 8005f66:	d10e      	bne.n	8005f86 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff f90a 	bl	8005198 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f84:	e009      	b.n	8005f9a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff f8f5 	bl	8005184 <HAL_I2C_ErrorCallback>
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d103      	bne.n	8005fc0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d007      	beq.n	8005fde <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	619a      	str	r2, [r3, #24]
  }
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	2200      	movs	r2, #0
 8006006:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006014:	2200      	movs	r2, #0
 8006016:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff ff9b 	bl	8005f54 <I2C_TreatErrorCallback>
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006036:	e022      	b.n	800607e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d01e      	beq.n	800607e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006040:	f7fb fea4 	bl	8001d8c <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d302      	bcc.n	8006056 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e00f      	b.n	800609e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4013      	ands	r3, r2
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	429a      	cmp	r2, r3
 800608c:	bf0c      	ite	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	2300      	movne	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	429a      	cmp	r2, r3
 800609a:	d0cd      	beq.n	8006038 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060b2:	e02c      	b.n	800610e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f871 	bl	80061a0 <I2C_IsErrorOccurred>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e02a      	b.n	800611e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d01e      	beq.n	800610e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d0:	f7fb fe5c 	bl	8001d8c <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d302      	bcc.n	80060e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d113      	bne.n	800610e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e007      	b.n	800611e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d1cb      	bne.n	80060b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006132:	e028      	b.n	8006186 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f831 	bl	80061a0 <I2C_IsErrorOccurred>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e026      	b.n	8006196 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006148:	f7fb fe20 	bl	8001d8c <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	429a      	cmp	r2, r3
 8006156:	d302      	bcc.n	800615e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d113      	bne.n	8006186 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006162:	f043 0220 	orr.w	r2, r3, #32
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e007      	b.n	8006196 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b20      	cmp	r3, #32
 8006192:	d1cf      	bne.n	8006134 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	@ 0x28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d068      	beq.n	800629e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061d4:	e049      	b.n	800626a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d045      	beq.n	800626a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061de:	f7fb fdd5 	bl	8001d8c <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d302      	bcc.n	80061f4 <I2C_IsErrorOccurred+0x54>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d13a      	bne.n	800626a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006206:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006216:	d121      	bne.n	800625c <I2C_IsErrorOccurred+0xbc>
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800621e:	d01d      	beq.n	800625c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006220:	7cfb      	ldrb	r3, [r7, #19]
 8006222:	2b20      	cmp	r3, #32
 8006224:	d01a      	beq.n	800625c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006234:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006236:	f7fb fda9 	bl	8001d8c <HAL_GetTick>
 800623a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800623c:	e00e      	b.n	800625c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800623e:	f7fb fda5 	bl	8001d8c <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b19      	cmp	r3, #25
 800624a:	d907      	bls.n	800625c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	f043 0320 	orr.w	r3, r3, #32
 8006252:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800625a:	e006      	b.n	800626a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b20      	cmp	r3, #32
 8006268:	d1e9      	bne.n	800623e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b20      	cmp	r3, #32
 8006276:	d003      	beq.n	8006280 <I2C_IsErrorOccurred+0xe0>
 8006278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0aa      	beq.n	80061d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2220      	movs	r2, #32
 800628e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f043 0304 	orr.w	r3, r3, #4
 8006296:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	f043 0308 	orr.w	r3, r3, #8
 80062d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	f043 0302 	orr.w	r3, r3, #2
 80062fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006304:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800630c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01c      	beq.n	800634e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff fe44 	bl	8005fa2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6859      	ldr	r1, [r3, #4]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <I2C_IsErrorOccurred+0x1bc>)
 8006326:	400b      	ands	r3, r1
 8006328:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800634e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006352:	4618      	mov	r0, r3
 8006354:	3728      	adds	r7, #40	@ 0x28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	fe00e800 	.word	0xfe00e800

08006360 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	817b      	strh	r3, [r7, #10]
 800636e:	4613      	mov	r3, r2
 8006370:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006372:	897b      	ldrh	r3, [r7, #10]
 8006374:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006378:	7a7b      	ldrb	r3, [r7, #9]
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006380:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	4313      	orrs	r3, r2
 800638a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800638e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	0d5b      	lsrs	r3, r3, #21
 800639a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800639e:	4b08      	ldr	r3, [pc, #32]	@ (80063c0 <I2C_TransferConfig+0x60>)
 80063a0:	430b      	orrs	r3, r1
 80063a2:	43db      	mvns	r3, r3
 80063a4:	ea02 0103 	and.w	r1, r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	03ff63ff 	.word	0x03ff63ff

080063c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006490 <I2C_Enable_IRQ+0xcc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80063e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006494 <I2C_Enable_IRQ+0xd0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d11d      	bne.n	8006424 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80063e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da03      	bge.n	80063f8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80063f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80063f8:	887b      	ldrh	r3, [r7, #2]
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d103      	bne.n	8006406 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006404:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006406:	887b      	ldrh	r3, [r7, #2]
 8006408:	2b20      	cmp	r3, #32
 800640a:	d103      	bne.n	8006414 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006412:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006414:	887b      	ldrh	r3, [r7, #2]
 8006416:	2b40      	cmp	r3, #64	@ 0x40
 8006418:	d12c      	bne.n	8006474 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006420:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006422:	e027      	b.n	8006474 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006424:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006428:	2b00      	cmp	r3, #0
 800642a:	da03      	bge.n	8006434 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006432:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006434:	887b      	ldrh	r3, [r7, #2]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006444:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006446:	887b      	ldrh	r3, [r7, #2]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006456:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	2b10      	cmp	r3, #16
 800645c:	d103      	bne.n	8006466 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006464:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	2b20      	cmp	r3, #32
 800646a:	d103      	bne.n	8006474 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f043 0320 	orr.w	r3, r3, #32
 8006472:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	430a      	orrs	r2, r1
 8006482:	601a      	str	r2, [r3, #0]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	080053b5 	.word	0x080053b5
 8006494:	0800558b 	.word	0x0800558b

08006498 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00f      	beq.n	80064d2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80064b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064c6:	2b28      	cmp	r3, #40	@ 0x28
 80064c8:	d003      	beq.n	80064d2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80064d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80064d2:	887b      	ldrh	r3, [r7, #2]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00f      	beq.n	80064fc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80064e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064f0:	2b28      	cmp	r3, #40	@ 0x28
 80064f2:	d003      	beq.n	80064fc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80064fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006500:	2b00      	cmp	r3, #0
 8006502:	da03      	bge.n	800650c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800650a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	2b10      	cmp	r3, #16
 8006510:	d103      	bne.n	800651a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006518:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	2b20      	cmp	r3, #32
 800651e:	d103      	bne.n	8006528 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f043 0320 	orr.w	r3, r3, #32
 8006526:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006528:	887b      	ldrh	r3, [r7, #2]
 800652a:	2b40      	cmp	r3, #64	@ 0x40
 800652c:	d103      	bne.n	8006536 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006534:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	43da      	mvns	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	400a      	ands	r2, r1
 8006546:	601a      	str	r2, [r3, #0]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b20      	cmp	r3, #32
 8006568:	d138      	bne.n	80065dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006574:	2302      	movs	r3, #2
 8006576:	e032      	b.n	80065de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2224      	movs	r2, #36	@ 0x24
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d139      	bne.n	8006674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800660a:	2302      	movs	r3, #2
 800660c:	e033      	b.n	8006676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2224      	movs	r2, #36	@ 0x24
 800661a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800663c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	e000      	b.n	8006676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006674:	2302      	movs	r3, #2
  }
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006684:	b08f      	sub	sp, #60	@ 0x3c
 8006686:	af0a      	add	r7, sp, #40	@ 0x28
 8006688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e116      	b.n	80068c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fa ffb6 	bl	8001620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2203      	movs	r2, #3
 80066b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f004 fb32 	bl	800ad3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	687e      	ldr	r6, [r7, #4]
 80066e0:	466d      	mov	r5, sp
 80066e2:	f106 0410 	add.w	r4, r6, #16
 80066e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80066f6:	1d33      	adds	r3, r6, #4
 80066f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066fa:	6838      	ldr	r0, [r7, #0]
 80066fc:	f004 fac6 	bl	800ac8c <USB_CoreInit>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2202      	movs	r2, #2
 800670a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e0d7      	b.n	80068c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2100      	movs	r1, #0
 8006718:	4618      	mov	r0, r3
 800671a:	f004 fb20 	bl	800ad5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
 8006722:	e04a      	b.n	80067ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006724:	7bfa      	ldrb	r2, [r7, #15]
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	333d      	adds	r3, #61	@ 0x3d
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006738:	7bfa      	ldrb	r2, [r7, #15]
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	4613      	mov	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	333c      	adds	r3, #60	@ 0x3c
 8006748:	7bfa      	ldrb	r2, [r7, #15]
 800674a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800674c:	7bfa      	ldrb	r2, [r7, #15]
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	b298      	uxth	r0, r3
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	3344      	adds	r3, #68	@ 0x44
 8006760:	4602      	mov	r2, r0
 8006762:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006764:	7bfa      	ldrb	r2, [r7, #15]
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	3340      	adds	r3, #64	@ 0x40
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006778:	7bfa      	ldrb	r2, [r7, #15]
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	4613      	mov	r3, r2
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	3348      	adds	r3, #72	@ 0x48
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800678c:	7bfa      	ldrb	r2, [r7, #15]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	334c      	adds	r3, #76	@ 0x4c
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067a0:	7bfa      	ldrb	r2, [r7, #15]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	3354      	adds	r3, #84	@ 0x54
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	3301      	adds	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
 80067ba:	7bfa      	ldrb	r2, [r7, #15]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d3af      	bcc.n	8006724 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]
 80067c8:	e044      	b.n	8006854 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067ca:	7bfa      	ldrb	r2, [r7, #15]
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067e0:	7bfa      	ldrb	r2, [r7, #15]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80067f2:	7bfa      	ldrb	r2, [r7, #15]
 80067f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80067f6:	7bfa      	ldrb	r2, [r7, #15]
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800680c:	7bfa      	ldrb	r2, [r7, #15]
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006822:	7bfa      	ldrb	r2, [r7, #15]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006838:	7bfa      	ldrb	r2, [r7, #15]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	3301      	adds	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	7bfa      	ldrb	r2, [r7, #15]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	429a      	cmp	r2, r3
 800685c:	d3b5      	bcc.n	80067ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	687e      	ldr	r6, [r7, #4]
 8006866:	466d      	mov	r5, sp
 8006868:	f106 0410 	add.w	r4, r6, #16
 800686c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800686e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006878:	e885 0003 	stmia.w	r5, {r0, r1}
 800687c:	1d33      	adds	r3, r6, #4
 800687e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006880:	6838      	ldr	r0, [r7, #0]
 8006882:	f004 fab9 	bl	800adf8 <USB_DevInit>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e014      	b.n	80068c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d102      	bne.n	80068b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f80b 	bl	80068cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f004 fc77 	bl	800b1ae <USB_DevDisconnect>

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080068cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068fa:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_PCDEx_ActivateLPM+0x44>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	10000003 	.word	0x10000003

08006914 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006918:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a04      	ldr	r2, [pc, #16]	@ (8006930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800691e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006922:	6013      	str	r3, [r2, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40007000 	.word	0x40007000

08006934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e291      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8087 	beq.w	8006a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006958:	4b96      	ldr	r3, [pc, #600]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 030c 	and.w	r3, r3, #12
 8006960:	2b04      	cmp	r3, #4
 8006962:	d00c      	beq.n	800697e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006964:	4b93      	ldr	r3, [pc, #588]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 030c 	and.w	r3, r3, #12
 800696c:	2b08      	cmp	r3, #8
 800696e:	d112      	bne.n	8006996 <HAL_RCC_OscConfig+0x62>
 8006970:	4b90      	ldr	r3, [pc, #576]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800697c:	d10b      	bne.n	8006996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800697e:	4b8d      	ldr	r3, [pc, #564]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d06c      	beq.n	8006a64 <HAL_RCC_OscConfig+0x130>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d168      	bne.n	8006a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e26b      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800699e:	d106      	bne.n	80069ae <HAL_RCC_OscConfig+0x7a>
 80069a0:	4b84      	ldr	r3, [pc, #528]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a83      	ldr	r2, [pc, #524]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e02e      	b.n	8006a0c <HAL_RCC_OscConfig+0xd8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x9c>
 80069b6:	4b7f      	ldr	r3, [pc, #508]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a7e      	ldr	r2, [pc, #504]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	4b7c      	ldr	r3, [pc, #496]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a7b      	ldr	r2, [pc, #492]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e01d      	b.n	8006a0c <HAL_RCC_OscConfig+0xd8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069d8:	d10c      	bne.n	80069f4 <HAL_RCC_OscConfig+0xc0>
 80069da:	4b76      	ldr	r3, [pc, #472]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a75      	ldr	r2, [pc, #468]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	4b73      	ldr	r3, [pc, #460]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a72      	ldr	r2, [pc, #456]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	e00b      	b.n	8006a0c <HAL_RCC_OscConfig+0xd8>
 80069f4:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a6e      	ldr	r2, [pc, #440]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 80069fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a6b      	ldr	r2, [pc, #428]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d013      	beq.n	8006a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fb f9ba 	bl	8001d8c <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a1c:	f7fb f9b6 	bl	8001d8c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b64      	cmp	r3, #100	@ 0x64
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e21f      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2e:	4b61      	ldr	r3, [pc, #388]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0xe8>
 8006a3a:	e014      	b.n	8006a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3c:	f7fb f9a6 	bl	8001d8c <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a44:	f7fb f9a2 	bl	8001d8c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b64      	cmp	r3, #100	@ 0x64
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e20b      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a56:	4b57      	ldr	r3, [pc, #348]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0x110>
 8006a62:	e000      	b.n	8006a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d069      	beq.n	8006b46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a72:	4b50      	ldr	r3, [pc, #320]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00b      	beq.n	8006a96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 030c 	and.w	r3, r3, #12
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d11c      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x190>
 8006a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d116      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a96:	4b47      	ldr	r3, [pc, #284]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_RCC_OscConfig+0x17a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d001      	beq.n	8006aae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e1df      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aae:	4b41      	ldr	r3, [pc, #260]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	493d      	ldr	r1, [pc, #244]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ac2:	e040      	b.n	8006b46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d023      	beq.n	8006b14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006acc:	4b39      	ldr	r3, [pc, #228]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a38      	ldr	r2, [pc, #224]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fb f958 	bl	8001d8c <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae0:	f7fb f954 	bl	8001d8c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e1bd      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af2:	4b30      	ldr	r3, [pc, #192]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afe:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4929      	ldr	r1, [pc, #164]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]
 8006b12:	e018      	b.n	8006b46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b14:	4b27      	ldr	r3, [pc, #156]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a26      	ldr	r2, [pc, #152]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fb f934 	bl	8001d8c <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b28:	f7fb f930 	bl	8001d8c <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e199      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d038      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d019      	beq.n	8006b8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b5a:	4b16      	ldr	r3, [pc, #88]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5e:	4a15      	ldr	r2, [pc, #84]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b66:	f7fb f911 	bl	8001d8c <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b6e:	f7fb f90d 	bl	8001d8c <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e176      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b80:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x23a>
 8006b8c:	e01a      	b.n	8006bc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b8e:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b92:	4a08      	ldr	r2, [pc, #32]	@ (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9a:	f7fb f8f7 	bl	8001d8c <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ba0:	e00a      	b.n	8006bb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba2:	f7fb f8f3 	bl	8001d8c <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d903      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e15c      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
 8006bb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb8:	4b91      	ldr	r3, [pc, #580]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1ee      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80a4 	beq.w	8006d1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10d      	bne.n	8006bfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bde:	4b88      	ldr	r3, [pc, #544]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	4a87      	ldr	r2, [pc, #540]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bea:	4b85      	ldr	r3, [pc, #532]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bfa:	4b82      	ldr	r3, [pc, #520]	@ (8006e04 <HAL_RCC_OscConfig+0x4d0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d118      	bne.n	8006c38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c06:	4b7f      	ldr	r3, [pc, #508]	@ (8006e04 <HAL_RCC_OscConfig+0x4d0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8006e04 <HAL_RCC_OscConfig+0x4d0>)
 8006c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c12:	f7fb f8bb 	bl	8001d8c <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1a:	f7fb f8b7 	bl	8001d8c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b64      	cmp	r3, #100	@ 0x64
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e120      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c2c:	4b75      	ldr	r3, [pc, #468]	@ (8006e04 <HAL_RCC_OscConfig+0x4d0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d106      	bne.n	8006c4e <HAL_RCC_OscConfig+0x31a>
 8006c40:	4b6f      	ldr	r3, [pc, #444]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c44:	4a6e      	ldr	r2, [pc, #440]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c4c:	e02d      	b.n	8006caa <HAL_RCC_OscConfig+0x376>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCC_OscConfig+0x33c>
 8006c56:	4b6a      	ldr	r3, [pc, #424]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c5a:	4a69      	ldr	r2, [pc, #420]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c62:	4b67      	ldr	r3, [pc, #412]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c66:	4a66      	ldr	r2, [pc, #408]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c68:	f023 0304 	bic.w	r3, r3, #4
 8006c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c6e:	e01c      	b.n	8006caa <HAL_RCC_OscConfig+0x376>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d10c      	bne.n	8006c92 <HAL_RCC_OscConfig+0x35e>
 8006c78:	4b61      	ldr	r3, [pc, #388]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c7c:	4a60      	ldr	r2, [pc, #384]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c7e:	f043 0304 	orr.w	r3, r3, #4
 8006c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c84:	4b5e      	ldr	r3, [pc, #376]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c88:	4a5d      	ldr	r2, [pc, #372]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c90:	e00b      	b.n	8006caa <HAL_RCC_OscConfig+0x376>
 8006c92:	4b5b      	ldr	r3, [pc, #364]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c96:	4a5a      	ldr	r2, [pc, #360]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c9e:	4b58      	ldr	r3, [pc, #352]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca2:	4a57      	ldr	r2, [pc, #348]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006ca4:	f023 0304 	bic.w	r3, r3, #4
 8006ca8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d015      	beq.n	8006cde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb2:	f7fb f86b 	bl	8001d8c <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cba:	f7fb f867 	bl	8001d8c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0ce      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0ee      	beq.n	8006cba <HAL_RCC_OscConfig+0x386>
 8006cdc:	e014      	b.n	8006d08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cde:	f7fb f855 	bl	8001d8c <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce4:	e00a      	b.n	8006cfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce6:	f7fb f851 	bl	8001d8c <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e0b8      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfc:	4b40      	ldr	r3, [pc, #256]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1ee      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d105      	bne.n	8006d1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d12:	4a3b      	ldr	r2, [pc, #236]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d18:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80a4 	beq.w	8006e6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d24:	4b36      	ldr	r3, [pc, #216]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 030c 	and.w	r3, r3, #12
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d06b      	beq.n	8006e08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d149      	bne.n	8006dcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d38:	4b31      	ldr	r3, [pc, #196]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a30      	ldr	r2, [pc, #192]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fb f822 	bl	8001d8c <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4c:	f7fb f81e 	bl	8001d8c <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e087      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d5e:	4b28      	ldr	r3, [pc, #160]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f0      	bne.n	8006d4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69da      	ldr	r2, [r3, #28]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	019b      	lsls	r3, r3, #6
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	3b01      	subs	r3, #1
 8006d84:	041b      	lsls	r3, r3, #16
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8c:	061b      	lsls	r3, r3, #24
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	4a1b      	ldr	r2, [pc, #108]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d98:	4b19      	ldr	r3, [pc, #100]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a18      	ldr	r2, [pc, #96]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fa fff2 	bl	8001d8c <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dac:	f7fa ffee 	bl	8001d8c <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e057      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dbe:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x478>
 8006dca:	e04f      	b.n	8006e6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fa ffd8 	bl	8001d8c <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de0:	f7fa ffd4 	bl	8001d8c <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e03d      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df2:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <HAL_RCC_OscConfig+0x4cc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <HAL_RCC_OscConfig+0x4ac>
 8006dfe:	e035      	b.n	8006e6c <HAL_RCC_OscConfig+0x538>
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e08:	4b1b      	ldr	r3, [pc, #108]	@ (8006e78 <HAL_RCC_OscConfig+0x544>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d028      	beq.n	8006e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d121      	bne.n	8006e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d11a      	bne.n	8006e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e38:	4013      	ands	r3, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d111      	bne.n	8006e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	3b01      	subs	r3, #1
 8006e52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d107      	bne.n	8006e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d001      	beq.n	8006e6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40023800 	.word	0x40023800

08006e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0d0      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e94:	4b6a      	ldr	r3, [pc, #424]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d910      	bls.n	8006ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea2:	4b67      	ldr	r3, [pc, #412]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f023 020f 	bic.w	r2, r3, #15
 8006eaa:	4965      	ldr	r1, [pc, #404]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b63      	ldr	r3, [pc, #396]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0b8      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d020      	beq.n	8006f12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006edc:	4b59      	ldr	r3, [pc, #356]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	4a58      	ldr	r2, [pc, #352]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ef4:	4b53      	ldr	r3, [pc, #332]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	4a52      	ldr	r2, [pc, #328]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f00:	4b50      	ldr	r3, [pc, #320]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	494d      	ldr	r1, [pc, #308]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d040      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d107      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f26:	4b47      	ldr	r3, [pc, #284]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d115      	bne.n	8006f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e07f      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d107      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f3e:	4b41      	ldr	r3, [pc, #260]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e073      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e06b      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f5e:	4b39      	ldr	r3, [pc, #228]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f023 0203 	bic.w	r2, r3, #3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4936      	ldr	r1, [pc, #216]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f70:	f7fa ff0c 	bl	8001d8c <HAL_GetTick>
 8006f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f76:	e00a      	b.n	8006f8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f78:	f7fa ff08 	bl	8001d8c <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e053      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 020c 	and.w	r2, r3, #12
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d1eb      	bne.n	8006f78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa0:	4b27      	ldr	r3, [pc, #156]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d210      	bcs.n	8006fd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fae:	4b24      	ldr	r3, [pc, #144]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f023 020f 	bic.w	r2, r3, #15
 8006fb6:	4922      	ldr	r1, [pc, #136]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fbe:	4b20      	ldr	r3, [pc, #128]	@ (8007040 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e032      	b.n	8007036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fdc:	4b19      	ldr	r3, [pc, #100]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	4916      	ldr	r1, [pc, #88]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	490e      	ldr	r1, [pc, #56]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 800700a:	4313      	orrs	r3, r2
 800700c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800700e:	f000 f821 	bl	8007054 <HAL_RCC_GetSysClockFreq>
 8007012:	4602      	mov	r2, r0
 8007014:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <HAL_RCC_ClockConfig+0x1c8>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	490a      	ldr	r1, [pc, #40]	@ (8007048 <HAL_RCC_ClockConfig+0x1cc>)
 8007020:	5ccb      	ldrb	r3, [r1, r3]
 8007022:	fa22 f303 	lsr.w	r3, r2, r3
 8007026:	4a09      	ldr	r2, [pc, #36]	@ (800704c <HAL_RCC_ClockConfig+0x1d0>)
 8007028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800702a:	4b09      	ldr	r3, [pc, #36]	@ (8007050 <HAL_RCC_ClockConfig+0x1d4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f7fa fe68 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40023c00 	.word	0x40023c00
 8007044:	40023800 	.word	0x40023800
 8007048:	0801acb4 	.word	0x0801acb4
 800704c:	20000000 	.word	0x20000000
 8007050:	20000004 	.word	0x20000004

08007054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007058:	b094      	sub	sp, #80	@ 0x50
 800705a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007060:	2300      	movs	r3, #0
 8007062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007064:	2300      	movs	r3, #0
 8007066:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800706c:	4b79      	ldr	r3, [pc, #484]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 030c 	and.w	r3, r3, #12
 8007074:	2b08      	cmp	r3, #8
 8007076:	d00d      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x40>
 8007078:	2b08      	cmp	r3, #8
 800707a:	f200 80e1 	bhi.w	8007240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_RCC_GetSysClockFreq+0x34>
 8007082:	2b04      	cmp	r3, #4
 8007084:	d003      	beq.n	800708e <HAL_RCC_GetSysClockFreq+0x3a>
 8007086:	e0db      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007088:	4b73      	ldr	r3, [pc, #460]	@ (8007258 <HAL_RCC_GetSysClockFreq+0x204>)
 800708a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800708c:	e0db      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800708e:	4b73      	ldr	r3, [pc, #460]	@ (800725c <HAL_RCC_GetSysClockFreq+0x208>)
 8007090:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007092:	e0d8      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007094:	4b6f      	ldr	r3, [pc, #444]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800709c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800709e:	4b6d      	ldr	r3, [pc, #436]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d063      	beq.n	8007172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	099b      	lsrs	r3, r3, #6
 80070b0:	2200      	movs	r2, #0
 80070b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80070be:	2300      	movs	r3, #0
 80070c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80070c6:	4622      	mov	r2, r4
 80070c8:	462b      	mov	r3, r5
 80070ca:	f04f 0000 	mov.w	r0, #0
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	0159      	lsls	r1, r3, #5
 80070d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070d8:	0150      	lsls	r0, r2, #5
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4621      	mov	r1, r4
 80070e0:	1a51      	subs	r1, r2, r1
 80070e2:	6139      	str	r1, [r7, #16]
 80070e4:	4629      	mov	r1, r5
 80070e6:	eb63 0301 	sbc.w	r3, r3, r1
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070f8:	4659      	mov	r1, fp
 80070fa:	018b      	lsls	r3, r1, #6
 80070fc:	4651      	mov	r1, sl
 80070fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007102:	4651      	mov	r1, sl
 8007104:	018a      	lsls	r2, r1, #6
 8007106:	4651      	mov	r1, sl
 8007108:	ebb2 0801 	subs.w	r8, r2, r1
 800710c:	4659      	mov	r1, fp
 800710e:	eb63 0901 	sbc.w	r9, r3, r1
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800711e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007126:	4690      	mov	r8, r2
 8007128:	4699      	mov	r9, r3
 800712a:	4623      	mov	r3, r4
 800712c:	eb18 0303 	adds.w	r3, r8, r3
 8007130:	60bb      	str	r3, [r7, #8]
 8007132:	462b      	mov	r3, r5
 8007134:	eb49 0303 	adc.w	r3, r9, r3
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007146:	4629      	mov	r1, r5
 8007148:	024b      	lsls	r3, r1, #9
 800714a:	4621      	mov	r1, r4
 800714c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007150:	4621      	mov	r1, r4
 8007152:	024a      	lsls	r2, r1, #9
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800715a:	2200      	movs	r2, #0
 800715c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800715e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007164:	f7f9 f8ac 	bl	80002c0 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4613      	mov	r3, r2
 800716e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007170:	e058      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007172:	4b38      	ldr	r3, [pc, #224]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	2200      	movs	r2, #0
 800717a:	4618      	mov	r0, r3
 800717c:	4611      	mov	r1, r2
 800717e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007182:	623b      	str	r3, [r7, #32]
 8007184:	2300      	movs	r3, #0
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24
 8007188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800718c:	4642      	mov	r2, r8
 800718e:	464b      	mov	r3, r9
 8007190:	f04f 0000 	mov.w	r0, #0
 8007194:	f04f 0100 	mov.w	r1, #0
 8007198:	0159      	lsls	r1, r3, #5
 800719a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800719e:	0150      	lsls	r0, r2, #5
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4641      	mov	r1, r8
 80071a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80071aa:	4649      	mov	r1, r9
 80071ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071c4:	ebb2 040a 	subs.w	r4, r2, sl
 80071c8:	eb63 050b 	sbc.w	r5, r3, fp
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	00eb      	lsls	r3, r5, #3
 80071d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071da:	00e2      	lsls	r2, r4, #3
 80071dc:	4614      	mov	r4, r2
 80071de:	461d      	mov	r5, r3
 80071e0:	4643      	mov	r3, r8
 80071e2:	18e3      	adds	r3, r4, r3
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	464b      	mov	r3, r9
 80071e8:	eb45 0303 	adc.w	r3, r5, r3
 80071ec:	607b      	str	r3, [r7, #4]
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071fa:	4629      	mov	r1, r5
 80071fc:	028b      	lsls	r3, r1, #10
 80071fe:	4621      	mov	r1, r4
 8007200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007204:	4621      	mov	r1, r4
 8007206:	028a      	lsls	r2, r1, #10
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800720e:	2200      	movs	r2, #0
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	61fa      	str	r2, [r7, #28]
 8007214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007218:	f7f9 f852 	bl	80002c0 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4613      	mov	r3, r2
 8007222:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007224:	4b0b      	ldr	r3, [pc, #44]	@ (8007254 <HAL_RCC_GetSysClockFreq+0x200>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	3301      	adds	r3, #1
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007234:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800723e:	e002      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007240:	4b05      	ldr	r3, [pc, #20]	@ (8007258 <HAL_RCC_GetSysClockFreq+0x204>)
 8007242:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007248:	4618      	mov	r0, r3
 800724a:	3750      	adds	r7, #80	@ 0x50
 800724c:	46bd      	mov	sp, r7
 800724e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800
 8007258:	00f42400 	.word	0x00f42400
 800725c:	007a1200 	.word	0x007a1200

08007260 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007264:	4b03      	ldr	r3, [pc, #12]	@ (8007274 <HAL_RCC_GetHCLKFreq+0x14>)
 8007266:	681b      	ldr	r3, [r3, #0]
}
 8007268:	4618      	mov	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000000 	.word	0x20000000

08007278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800727c:	f7ff fff0 	bl	8007260 <HAL_RCC_GetHCLKFreq>
 8007280:	4602      	mov	r2, r0
 8007282:	4b05      	ldr	r3, [pc, #20]	@ (8007298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	0a9b      	lsrs	r3, r3, #10
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	4903      	ldr	r1, [pc, #12]	@ (800729c <HAL_RCC_GetPCLK1Freq+0x24>)
 800728e:	5ccb      	ldrb	r3, [r1, r3]
 8007290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007294:	4618      	mov	r0, r3
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40023800 	.word	0x40023800
 800729c:	0801acc4 	.word	0x0801acc4

080072a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072a4:	f7ff ffdc 	bl	8007260 <HAL_RCC_GetHCLKFreq>
 80072a8:	4602      	mov	r2, r0
 80072aa:	4b05      	ldr	r3, [pc, #20]	@ (80072c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	0b5b      	lsrs	r3, r3, #13
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	4903      	ldr	r1, [pc, #12]	@ (80072c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072b6:	5ccb      	ldrb	r3, [r1, r3]
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072bc:	4618      	mov	r0, r3
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40023800 	.word	0x40023800
 80072c4:	0801acc4 	.word	0x0801acc4

080072c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d012      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072f0:	4b69      	ldr	r3, [pc, #420]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	4a68      	ldr	r2, [pc, #416]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80072fa:	6093      	str	r3, [r2, #8]
 80072fc:	4b66      	ldr	r3, [pc, #408]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007304:	4964      	ldr	r1, [pc, #400]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007306:	4313      	orrs	r3, r2
 8007308:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007312:	2301      	movs	r3, #1
 8007314:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d017      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007322:	4b5d      	ldr	r3, [pc, #372]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007328:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007330:	4959      	ldr	r1, [pc, #356]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007340:	d101      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007342:	2301      	movs	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800734e:	2301      	movs	r3, #1
 8007350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d017      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800735e:	4b4e      	ldr	r3, [pc, #312]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007364:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736c:	494a      	ldr	r1, [pc, #296]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800737c:	d101      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800738a:	2301      	movs	r3, #1
 800738c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800739a:	2301      	movs	r3, #1
 800739c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 808b 	beq.w	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073ac:	4b3a      	ldr	r3, [pc, #232]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b0:	4a39      	ldr	r2, [pc, #228]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80073b8:	4b37      	ldr	r3, [pc, #220]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073c4:	4b35      	ldr	r3, [pc, #212]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a34      	ldr	r2, [pc, #208]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d0:	f7fa fcdc 	bl	8001d8c <HAL_GetTick>
 80073d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073d8:	f7fa fcd8 	bl	8001d8c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b64      	cmp	r3, #100	@ 0x64
 80073e4:	d901      	bls.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e357      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073ea:	4b2c      	ldr	r3, [pc, #176]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f0      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073f6:	4b28      	ldr	r3, [pc, #160]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d035      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	429a      	cmp	r2, r3
 8007412:	d02e      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007414:	4b20      	ldr	r3, [pc, #128]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800741c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800741e:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007422:	4a1d      	ldr	r2, [pc, #116]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007428:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800742a:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742e:	4a1a      	ldr	r2, [pc, #104]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007434:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007436:	4a18      	ldr	r2, [pc, #96]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800743c:	4b16      	ldr	r3, [pc, #88]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	d114      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fa fca0 	bl	8001d8c <HAL_GetTick>
 800744c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800744e:	e00a      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007450:	f7fa fc9c 	bl	8001d8c <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745e:	4293      	cmp	r3, r2
 8007460:	d901      	bls.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e319      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007466:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0ee      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800747a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800747e:	d111      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007480:	4b05      	ldr	r3, [pc, #20]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800748c:	4b04      	ldr	r3, [pc, #16]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800748e:	400b      	ands	r3, r1
 8007490:	4901      	ldr	r1, [pc, #4]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
 8007496:	e00b      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007498:	40023800 	.word	0x40023800
 800749c:	40007000 	.word	0x40007000
 80074a0:	0ffffcff 	.word	0x0ffffcff
 80074a4:	4baa      	ldr	r3, [pc, #680]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4aa9      	ldr	r2, [pc, #676]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80074ae:	6093      	str	r3, [r2, #8]
 80074b0:	4ba7      	ldr	r3, [pc, #668]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074bc:	49a4      	ldr	r1, [pc, #656]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d010      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074ce:	4ba0      	ldr	r3, [pc, #640]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074d4:	4a9e      	ldr	r2, [pc, #632]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80074de:	4b9c      	ldr	r3, [pc, #624]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e8:	4999      	ldr	r1, [pc, #612]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074fc:	4b94      	ldr	r3, [pc, #592]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007502:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800750a:	4991      	ldr	r1, [pc, #580]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800751e:	4b8c      	ldr	r3, [pc, #560]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007524:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800752c:	4988      	ldr	r1, [pc, #544]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007540:	4b83      	ldr	r3, [pc, #524]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800754e:	4980      	ldr	r1, [pc, #512]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007562:	4b7b      	ldr	r3, [pc, #492]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007568:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007570:	4977      	ldr	r1, [pc, #476]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007584:	4b72      	ldr	r3, [pc, #456]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758a:	f023 0203 	bic.w	r2, r3, #3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007592:	496f      	ldr	r1, [pc, #444]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ac:	f023 020c 	bic.w	r2, r3, #12
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b4:	4966      	ldr	r1, [pc, #408]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075c8:	4b61      	ldr	r3, [pc, #388]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d6:	495e      	ldr	r1, [pc, #376]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075ea:	4b59      	ldr	r3, [pc, #356]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f8:	4955      	ldr	r1, [pc, #340]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800760c:	4b50      	ldr	r3, [pc, #320]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007612:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761a:	494d      	ldr	r1, [pc, #308]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800762e:	4b48      	ldr	r3, [pc, #288]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007634:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763c:	4944      	ldr	r1, [pc, #272]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800763e:	4313      	orrs	r3, r2
 8007640:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007650:	4b3f      	ldr	r3, [pc, #252]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007656:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765e:	493c      	ldr	r1, [pc, #240]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007672:	4b37      	ldr	r3, [pc, #220]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007678:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007680:	4933      	ldr	r1, [pc, #204]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007682:	4313      	orrs	r3, r2
 8007684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007694:	4b2e      	ldr	r3, [pc, #184]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800769a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076a2:	492b      	ldr	r1, [pc, #172]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d011      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80076b6:	4b26      	ldr	r3, [pc, #152]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076bc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076c4:	4922      	ldr	r1, [pc, #136]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d4:	d101      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80076d6:	2301      	movs	r3, #1
 80076d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80076e6:	2301      	movs	r3, #1
 80076e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076f6:	4b16      	ldr	r3, [pc, #88]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007704:	4912      	ldr	r1, [pc, #72]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007718:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007728:	4909      	ldr	r1, [pc, #36]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d006      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80d9 	beq.w	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007744:	4b02      	ldr	r3, [pc, #8]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a01      	ldr	r2, [pc, #4]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800774a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800774e:	e001      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007750:	40023800 	.word	0x40023800
 8007754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007756:	f7fa fb19 	bl	8001d8c <HAL_GetTick>
 800775a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800775c:	e008      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800775e:	f7fa fb15 	bl	8001d8c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b64      	cmp	r3, #100	@ 0x64
 800776a:	d901      	bls.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e194      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007770:	4b6c      	ldr	r3, [pc, #432]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f0      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d021      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800778c:	2b00      	cmp	r3, #0
 800778e:	d11d      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007790:	4b64      	ldr	r3, [pc, #400]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800779e:	4b61      	ldr	r3, [pc, #388]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a4:	0e1b      	lsrs	r3, r3, #24
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	019a      	lsls	r2, r3, #6
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	041b      	lsls	r3, r3, #16
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	061b      	lsls	r3, r3, #24
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	071b      	lsls	r3, r3, #28
 80077c4:	4957      	ldr	r1, [pc, #348]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077e0:	d00a      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d02e      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077f6:	d129      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007806:	4b47      	ldr	r3, [pc, #284]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780c:	0f1b      	lsrs	r3, r3, #28
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	019a      	lsls	r2, r3, #6
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	061b      	lsls	r3, r3, #24
 8007826:	431a      	orrs	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	071b      	lsls	r3, r3, #28
 800782c:	493d      	ldr	r1, [pc, #244]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007834:	4b3b      	ldr	r3, [pc, #236]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800783a:	f023 021f 	bic.w	r2, r3, #31
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007842:	3b01      	subs	r3, #1
 8007844:	4937      	ldr	r1, [pc, #220]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01d      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007858:	4b32      	ldr	r3, [pc, #200]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800785a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800785e:	0e1b      	lsrs	r3, r3, #24
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007866:	4b2f      	ldr	r3, [pc, #188]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800786c:	0f1b      	lsrs	r3, r3, #28
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	019a      	lsls	r2, r3, #6
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	431a      	orrs	r2, r3
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	061b      	lsls	r3, r3, #24
 8007886:	431a      	orrs	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	071b      	lsls	r3, r3, #28
 800788c:	4925      	ldr	r1, [pc, #148]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d011      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	019a      	lsls	r2, r3, #6
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	061b      	lsls	r3, r3, #24
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	071b      	lsls	r3, r3, #28
 80078bc:	4919      	ldr	r1, [pc, #100]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80078c4:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a16      	ldr	r2, [pc, #88]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d0:	f7fa fa5c 	bl	8001d8c <HAL_GetTick>
 80078d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078d6:	e008      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078d8:	f7fa fa58 	bl	8001d8c <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b64      	cmp	r3, #100	@ 0x64
 80078e4:	d901      	bls.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e0d7      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0f0      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	f040 80cd 	bne.w	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80078fe:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a08      	ldr	r2, [pc, #32]	@ (8007924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790a:	f7fa fa3f 	bl	8001d8c <HAL_GetTick>
 800790e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007910:	e00a      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007912:	f7fa fa3b 	bl	8001d8c <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b64      	cmp	r3, #100	@ 0x64
 800791e:	d903      	bls.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e0ba      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007924:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007928:	4b5e      	ldr	r3, [pc, #376]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007934:	d0ed      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d009      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007952:	2b00      	cmp	r3, #0
 8007954:	d02e      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d12a      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800795e:	4b51      	ldr	r3, [pc, #324]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800796c:	4b4d      	ldr	r3, [pc, #308]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007972:	0f1b      	lsrs	r3, r3, #28
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	019a      	lsls	r2, r3, #6
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	041b      	lsls	r3, r3, #16
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	431a      	orrs	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	071b      	lsls	r3, r3, #28
 8007992:	4944      	ldr	r1, [pc, #272]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007994:	4313      	orrs	r3, r2
 8007996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800799a:	4b42      	ldr	r3, [pc, #264]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800799c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a8:	3b01      	subs	r3, #1
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	493d      	ldr	r1, [pc, #244]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d022      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079c8:	d11d      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079ca:	4b36      	ldr	r3, [pc, #216]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d0:	0e1b      	lsrs	r3, r3, #24
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079d8:	4b32      	ldr	r3, [pc, #200]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079de:	0f1b      	lsrs	r3, r3, #28
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	019a      	lsls	r2, r3, #6
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	041b      	lsls	r3, r3, #16
 80079f2:	431a      	orrs	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	061b      	lsls	r3, r3, #24
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	071b      	lsls	r3, r3, #28
 80079fe:	4929      	ldr	r1, [pc, #164]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d028      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a12:	4b24      	ldr	r3, [pc, #144]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a18:	0e1b      	lsrs	r3, r3, #24
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a20:	4b20      	ldr	r3, [pc, #128]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	019a      	lsls	r2, r3, #6
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	071b      	lsls	r3, r3, #28
 8007a46:	4917      	ldr	r1, [pc, #92]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a4e:	4b15      	ldr	r3, [pc, #84]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	4911      	ldr	r1, [pc, #68]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a64:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a0e      	ldr	r2, [pc, #56]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a70:	f7fa f98c 	bl	8001d8c <HAL_GetTick>
 8007a74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a76:	e008      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a78:	f7fa f988 	bl	8001d8c <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b64      	cmp	r3, #100	@ 0x64
 8007a84:	d901      	bls.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e007      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a8a:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a96:	d1ef      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3720      	adds	r7, #32
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	40023800 	.word	0x40023800

08007aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e09d      	b.n	8007bf6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d108      	bne.n	8007ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aca:	d009      	beq.n	8007ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	61da      	str	r2, [r3, #28]
 8007ad2:	e005      	b.n	8007ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7f9 fb0c 	bl	8001118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b20:	d902      	bls.n	8007b28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	e002      	b.n	8007b2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b36:	d007      	beq.n	8007b48 <HAL_SPI_Init+0xa0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b40:	d002      	beq.n	8007b48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8a:	ea42 0103 	orr.w	r1, r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	0c1b      	lsrs	r3, r3, #16
 8007ba4:	f003 0204 	and.w	r2, r3, #4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007bc4:	ea42 0103 	orr.w	r1, r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69da      	ldr	r2, [r3, #28]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007be4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b088      	sub	sp, #32
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	603b      	str	r3, [r7, #0]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_SPI_Transmit+0x22>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e158      	b.n	8007ed2 <HAL_SPI_Transmit+0x2d4>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c28:	f7fa f8b0 	bl	8001d8c <HAL_GetTick>
 8007c2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d002      	beq.n	8007c44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
 8007c40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c42:	e13d      	b.n	8007ec0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_SPI_Transmit+0x52>
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c54:	e134      	b.n	8007ec0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2203      	movs	r2, #3
 8007c5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca0:	d10f      	bne.n	8007cc2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ccc:	2b40      	cmp	r3, #64	@ 0x40
 8007cce:	d007      	beq.n	8007ce0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ce8:	d94b      	bls.n	8007d82 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_SPI_Transmit+0xfa>
 8007cf2:	8afb      	ldrh	r3, [r7, #22]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d13e      	bne.n	8007d76 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfc:	881a      	ldrh	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d08:	1c9a      	adds	r2, r3, #2
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d1c:	e02b      	b.n	8007d76 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d112      	bne.n	8007d52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	1c9a      	adds	r2, r3, #2
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d50:	e011      	b.n	8007d76 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d52:	f7fa f81b 	bl	8001d8c <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d803      	bhi.n	8007d6a <HAL_SPI_Transmit+0x16c>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d102      	bne.n	8007d70 <HAL_SPI_Transmit+0x172>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d102      	bne.n	8007d76 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d74:	e0a4      	b.n	8007ec0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1ce      	bne.n	8007d1e <HAL_SPI_Transmit+0x120>
 8007d80:	e07c      	b.n	8007e7c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_SPI_Transmit+0x192>
 8007d8a:	8afb      	ldrh	r3, [r7, #22]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d170      	bne.n	8007e72 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d912      	bls.n	8007dc0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9e:	881a      	ldrh	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	1c9a      	adds	r2, r3, #2
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b02      	subs	r3, #2
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007dbe:	e058      	b.n	8007e72 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	7812      	ldrb	r2, [r2, #0]
 8007dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007de6:	e044      	b.n	8007e72 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d12b      	bne.n	8007e4e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d912      	bls.n	8007e26 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	881a      	ldrh	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e10:	1c9a      	adds	r2, r3, #2
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b02      	subs	r3, #2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e24:	e025      	b.n	8007e72 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e4c:	e011      	b.n	8007e72 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e4e:	f7f9 ff9d 	bl	8001d8c <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d803      	bhi.n	8007e66 <HAL_SPI_Transmit+0x268>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d102      	bne.n	8007e6c <HAL_SPI_Transmit+0x26e>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e70:	e026      	b.n	8007ec0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1b5      	bne.n	8007de8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fd9b 	bl	80089bc <SPI_EndRxTxTransaction>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	77fb      	strb	r3, [r7, #31]
 8007ebc:	e000      	b.n	8007ec0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007ebe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007ed0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3720      	adds	r7, #32
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d110      	bne.n	8007f18 <HAL_SPI_Receive_IT+0x3c>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007efe:	d10b      	bne.n	8007f18 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2204      	movs	r2, #4
 8007f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f894 	bl	800803c <HAL_SPI_TransmitReceive_IT>
 8007f14:	4603      	mov	r3, r0
 8007f16:	e089      	b.n	800802c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_SPI_Receive_IT+0x4a>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e082      	b.n	800802c <HAL_SPI_Receive_IT+0x150>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d002      	beq.n	8007f40 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f3e:	e070      	b.n	8008022 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <HAL_SPI_Receive_IT+0x70>
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f50:	e067      	b.n	8008022 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2204      	movs	r2, #4
 8007f56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	88fa      	ldrh	r2, [r7, #6]
 8007f6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	88fa      	ldrh	r2, [r7, #6]
 8007f72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f96:	d90b      	bls.n	8007fb0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007fa6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4a22      	ldr	r2, [pc, #136]	@ (8008034 <HAL_SPI_Receive_IT+0x158>)
 8007fac:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007fae:	e00a      	b.n	8007fc6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fbe:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8008038 <HAL_SPI_Receive_IT+0x15c>)
 8007fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fce:	d10f      	bne.n	8007ff0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fee:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007ffe:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800a:	2b40      	cmp	r3, #64	@ 0x40
 800800c:	d008      	beq.n	8008020 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e000      	b.n	8008022 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8008020:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800802a:	7dfb      	ldrb	r3, [r7, #23]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	0800863d 	.word	0x0800863d
 8008038:	080085ed 	.word	0x080085ed

0800803c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_SPI_TransmitReceive_IT+0x20>
 8008058:	2302      	movs	r3, #2
 800805a:	e091      	b.n	8008180 <HAL_SPI_TransmitReceive_IT+0x144>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800806a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008072:	7dbb      	ldrb	r3, [r7, #22]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d00d      	beq.n	8008094 <HAL_SPI_TransmitReceive_IT+0x58>
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800807e:	d106      	bne.n	800808e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <HAL_SPI_TransmitReceive_IT+0x52>
 8008088:	7dbb      	ldrb	r3, [r7, #22]
 800808a:	2b04      	cmp	r3, #4
 800808c:	d002      	beq.n	8008094 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800808e:	2302      	movs	r3, #2
 8008090:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008092:	e070      	b.n	8008176 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80080a0:	887b      	ldrh	r3, [r7, #2]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80080aa:	e064      	b.n	8008176 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d003      	beq.n	80080c0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2205      	movs	r2, #5
 80080bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	887a      	ldrh	r2, [r7, #2]
 80080d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	887a      	ldrh	r2, [r7, #2]
 80080d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	887a      	ldrh	r2, [r7, #2]
 80080e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	887a      	ldrh	r2, [r7, #2]
 80080ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80080f6:	d906      	bls.n	8008106 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a24      	ldr	r2, [pc, #144]	@ (800818c <HAL_SPI_TransmitReceive_IT+0x150>)
 80080fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4a23      	ldr	r2, [pc, #140]	@ (8008190 <HAL_SPI_TransmitReceive_IT+0x154>)
 8008102:	651a      	str	r2, [r3, #80]	@ 0x50
 8008104:	e005      	b.n	8008112 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4a22      	ldr	r2, [pc, #136]	@ (8008194 <HAL_SPI_TransmitReceive_IT+0x158>)
 800810a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4a22      	ldr	r2, [pc, #136]	@ (8008198 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8008110:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800811a:	d802      	bhi.n	8008122 <HAL_SPI_TransmitReceive_IT+0xe6>
 800811c:	887b      	ldrh	r3, [r7, #2]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d908      	bls.n	8008134 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008130:	605a      	str	r2, [r3, #4]
 8008132:	e007      	b.n	8008144 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8008152:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815e:	2b40      	cmp	r3, #64	@ 0x40
 8008160:	d008      	beq.n	8008174 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	e000      	b.n	8008176 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008174:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008180:	4618      	mov	r0, r3
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	08008527 	.word	0x08008527
 8008190:	0800858d 	.word	0x0800858d
 8008194:	080083d7 	.word	0x080083d7
 8008198:	08008495 	.word	0x08008495

0800819c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10e      	bne.n	80081dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d004      	beq.n	80081dc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
    return;
 80081da:	e0ce      	b.n	800837a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d009      	beq.n	80081fa <HAL_SPI_IRQHandler+0x5e>
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d004      	beq.n	80081fa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
    return;
 80081f8:	e0bf      	b.n	800837a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	f003 0320 	and.w	r3, r3, #32
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <HAL_SPI_IRQHandler+0x7e>
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 80b0 	beq.w	800837a <HAL_SPI_IRQHandler+0x1de>
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80aa 	beq.w	800837a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d023      	beq.n	8008278 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b03      	cmp	r3, #3
 800823a:	d011      	beq.n	8008260 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008240:	f043 0204 	orr.w	r2, r3, #4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	e00b      	b.n	8008278 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008260:	2300      	movs	r3, #0
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	613b      	str	r3, [r7, #16]
 8008274:	693b      	ldr	r3, [r7, #16]
        return;
 8008276:	e080      	b.n	800837a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d014      	beq.n	80082ac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008286:	f043 0201 	orr.w	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00c      	beq.n	80082d0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ba:	f043 0208 	orr.w	r2, r3, #8
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d04f      	beq.n	8008378 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80082e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <HAL_SPI_IRQHandler+0x168>
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d034      	beq.n	800836e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0203 	bic.w	r2, r2, #3
 8008312:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008318:	2b00      	cmp	r3, #0
 800831a:	d011      	beq.n	8008340 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008320:	4a17      	ldr	r2, [pc, #92]	@ (8008380 <HAL_SPI_IRQHandler+0x1e4>)
 8008322:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008328:	4618      	mov	r0, r3
 800832a:	f7fa fdd3 	bl	8002ed4 <HAL_DMA_Abort_IT>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008338:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008344:	2b00      	cmp	r3, #0
 8008346:	d016      	beq.n	8008376 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834c:	4a0c      	ldr	r2, [pc, #48]	@ (8008380 <HAL_SPI_IRQHandler+0x1e4>)
 800834e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008354:	4618      	mov	r0, r3
 8008356:	f7fa fdbd 	bl	8002ed4 <HAL_DMA_Abort_IT>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008364:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800836c:	e003      	b.n	8008376 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f812 	bl	8008398 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008374:	e000      	b.n	8008378 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008376:	bf00      	nop
    return;
 8008378:	bf00      	nop
  }
}
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	080083ad 	.word	0x080083ad

08008384 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff ffe5 	bl	8008398 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d923      	bls.n	8008432 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f4:	b292      	uxth	r2, r2
 80083f6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fc:	1c9a      	adds	r2, r3, #2
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b02      	subs	r3, #2
 800840c:	b29a      	uxth	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	d11f      	bne.n	8008460 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800842e:	605a      	str	r2, [r3, #4]
 8008430:	e016      	b.n	8008460 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f103 020c 	add.w	r2, r3, #12
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008466:	b29b      	uxth	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10f      	bne.n	800848c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800847a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb02 	bl	8008a90 <SPI_CloseRxTx_ISR>
    }
  }
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d912      	bls.n	80084cc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084aa:	881a      	ldrh	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b6:	1c9a      	adds	r2, r3, #2
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b02      	subs	r3, #2
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084ca:	e012      	b.n	80084f2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	330c      	adds	r3, #12
 80084d6:	7812      	ldrb	r2, [r2, #0]
 80084d8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d110      	bne.n	800851e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800850a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d102      	bne.n	800851e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fab9 	bl	8008a90 <SPI_CloseRxTx_ISR>
    }
  }
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008538:	b292      	uxth	r2, r2
 800853a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008540:	1c9a      	adds	r2, r3, #2
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10f      	bne.n	8008584 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008572:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fa86 	bl	8008a90 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	881a      	ldrh	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	1c9a      	adds	r2, r3, #2
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d110      	bne.n	80085e4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085d0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa56 	bl	8008a90 <SPI_CloseRxTx_ISR>
    }
  }
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f103 020c 	add.w	r2, r3, #12
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa70 	bl	8008b14 <SPI_CloseRx_ISR>
  }
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864e:	b292      	uxth	r2, r2
 8008650:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008656:	1c9a      	adds	r2, r3, #2
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa4a 	bl	8008b14 <SPI_CloseRx_ISR>
  }
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008698:	f7f9 fb78 	bl	8001d8c <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4413      	add	r3, r2
 80086a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086a8:	f7f9 fb70 	bl	8001d8c <HAL_GetTick>
 80086ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086ae:	4b39      	ldr	r3, [pc, #228]	@ (8008794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	015b      	lsls	r3, r3, #5
 80086b4:	0d1b      	lsrs	r3, r3, #20
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	fb02 f303 	mul.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086be:	e054      	b.n	800876a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d050      	beq.n	800876a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086c8:	f7f9 fb60 	bl	8001d8c <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d902      	bls.n	80086de <SPI_WaitFlagStateUntilTimeout+0x56>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d13d      	bne.n	800875a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80086ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086f6:	d111      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x94>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008700:	d004      	beq.n	800870c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800870a:	d107      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800871a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008724:	d10f      	bne.n	8008746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e017      	b.n	800878a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	3b01      	subs	r3, #1
 8008768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4013      	ands	r3, r2
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	461a      	mov	r2, r3
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	429a      	cmp	r2, r3
 8008786:	d19b      	bne.n	80086c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000000 	.word	0x20000000

08008798 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	@ 0x28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087aa:	f7f9 faef 	bl	8001d8c <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	4413      	add	r3, r2
 80087b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80087ba:	f7f9 fae7 	bl	8001d8c <HAL_GetTick>
 80087be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	330c      	adds	r3, #12
 80087c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087c8:	4b3d      	ldr	r3, [pc, #244]	@ (80088c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	00da      	lsls	r2, r3, #3
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	0d1b      	lsrs	r3, r3, #20
 80087d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80087e0:	e060      	b.n	80088a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80087e8:	d107      	bne.n	80087fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d104      	bne.n	80087fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008800:	d050      	beq.n	80088a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008802:	f7f9 fac3 	bl	8001d8c <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800880e:	429a      	cmp	r2, r3
 8008810:	d902      	bls.n	8008818 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d13d      	bne.n	8008894 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008826:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008830:	d111      	bne.n	8008856 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800883a:	d004      	beq.n	8008846 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008844:	d107      	bne.n	8008856 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008854:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800885e:	d10f      	bne.n	8008880 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800887e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e010      	b.n	80088b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4013      	ands	r3, r2
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d196      	bne.n	80087e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3728      	adds	r7, #40	@ 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20000000 	.word	0x20000000

080088c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088d8:	d111      	bne.n	80088fe <SPI_EndRxTransaction+0x3a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e2:	d004      	beq.n	80088ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ec:	d107      	bne.n	80088fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008906:	d112      	bne.n	800892e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2200      	movs	r2, #0
 8008910:	2180      	movs	r1, #128	@ 0x80
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff feb8 	bl	8008688 <SPI_WaitFlagStateUntilTimeout>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d021      	beq.n	8008962 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008922:	f043 0220 	orr.w	r2, r3, #32
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e03d      	b.n	80089aa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800892e:	4b21      	ldr	r3, [pc, #132]	@ (80089b4 <SPI_EndRxTransaction+0xf0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a21      	ldr	r2, [pc, #132]	@ (80089b8 <SPI_EndRxTransaction+0xf4>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	0d5b      	lsrs	r3, r3, #21
 800893a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	3b01      	subs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800895a:	2b80      	cmp	r3, #128	@ 0x80
 800895c:	d0f2      	beq.n	8008944 <SPI_EndRxTransaction+0x80>
 800895e:	e000      	b.n	8008962 <SPI_EndRxTransaction+0x9e>
        break;
 8008960:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800896a:	d11d      	bne.n	80089a8 <SPI_EndRxTransaction+0xe4>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008974:	d004      	beq.n	8008980 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800897e:	d113      	bne.n	80089a8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2200      	movs	r2, #0
 8008988:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff ff03 	bl	8008798 <SPI_WaitFifoStateUntilTimeout>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d007      	beq.n	80089a8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800899c:	f043 0220 	orr.w	r2, r3, #32
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e000      	b.n	80089aa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20000000 	.word	0x20000000
 80089b8:	165e9f81 	.word	0x165e9f81

080089bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7ff fedf 	bl	8008798 <SPI_WaitFifoStateUntilTimeout>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089e4:	f043 0220 	orr.w	r2, r3, #32
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e046      	b.n	8008a7e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80089f0:	4b25      	ldr	r3, [pc, #148]	@ (8008a88 <SPI_EndRxTxTransaction+0xcc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a25      	ldr	r2, [pc, #148]	@ (8008a8c <SPI_EndRxTxTransaction+0xd0>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	0d5b      	lsrs	r3, r3, #21
 80089fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a00:	fb02 f303 	mul.w	r3, r2, r3
 8008a04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a0e:	d112      	bne.n	8008a36 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2200      	movs	r2, #0
 8008a18:	2180      	movs	r1, #128	@ 0x80
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff fe34 	bl	8008688 <SPI_WaitFlagStateUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d016      	beq.n	8008a54 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a2a:	f043 0220 	orr.w	r2, r3, #32
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e023      	b.n	8008a7e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4c:	2b80      	cmp	r3, #128	@ 0x80
 8008a4e:	d0f2      	beq.n	8008a36 <SPI_EndRxTxTransaction+0x7a>
 8008a50:	e000      	b.n	8008a54 <SPI_EndRxTxTransaction+0x98>
        break;
 8008a52:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff fe99 	bl	8008798 <SPI_WaitFifoStateUntilTimeout>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a70:	f043 0220 	orr.w	r2, r3, #32
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e000      	b.n	8008a7e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000000 	.word	0x20000000
 8008a8c:	165e9f81 	.word	0x165e9f81

08008a90 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a98:	f7f9 f978 	bl	8001d8c <HAL_GetTick>
 8008a9c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0220 	bic.w	r2, r2, #32
 8008aac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	2164      	movs	r1, #100	@ 0x64
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff ff82 	bl	80089bc <SPI_EndRxTxTransaction>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d005      	beq.n	8008aca <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ac2:	f043 0220 	orr.w	r2, r3, #32
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d115      	bne.n	8008afe <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d107      	bne.n	8008aee <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f00d fc82 	bl	80163f0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008aec:	e00e      	b.n	8008b0c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fc44 	bl	8008384 <HAL_SPI_TxRxCpltCallback>
}
 8008afc:	e006      	b.n	8008b0c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fc46 	bl	8008398 <HAL_SPI_ErrorCallback>
}
 8008b0c:	bf00      	nop
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008b2a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008b2c:	f7f9 f92e 	bl	8001d8c <HAL_GetTick>
 8008b30:	4603      	mov	r3, r0
 8008b32:	461a      	mov	r2, r3
 8008b34:	2164      	movs	r1, #100	@ 0x64
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff fec4 	bl	80088c4 <SPI_EndRxTransaction>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b46:	f043 0220 	orr.w	r2, r3, #32
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d103      	bne.n	8008b66 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f00d fc46 	bl	80163f0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008b64:	e002      	b.n	8008b6c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff fc16 	bl	8008398 <HAL_SPI_ErrorCallback>
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e049      	b.n	8008c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f8 fb7c 	bl	8001298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f000 faee 	bl	8009194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e054      	b.n	8008ce6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0201 	orr.w	r2, r2, #1
 8008c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a26      	ldr	r2, [pc, #152]	@ (8008cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d022      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c66:	d01d      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a22      	ldr	r2, [pc, #136]	@ (8008cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a21      	ldr	r2, [pc, #132]	@ (8008cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1f      	ldr	r2, [pc, #124]	@ (8008d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d04 <HAL_TIM_Base_Start_IT+0xe0>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1c      	ldr	r2, [pc, #112]	@ (8008d08 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x80>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8008d0c <HAL_TIM_Base_Start_IT+0xe8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d115      	bne.n	8008cd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	4b19      	ldr	r3, [pc, #100]	@ (8008d10 <HAL_TIM_Base_Start_IT+0xec>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b06      	cmp	r3, #6
 8008cb4:	d015      	beq.n	8008ce2 <HAL_TIM_Base_Start_IT+0xbe>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cbc:	d011      	beq.n	8008ce2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cce:	e008      	b.n	8008ce2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e000      	b.n	8008ce4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40010000 	.word	0x40010000
 8008cf8:	40000400 	.word	0x40000400
 8008cfc:	40000800 	.word	0x40000800
 8008d00:	40000c00 	.word	0x40000c00
 8008d04:	40010400 	.word	0x40010400
 8008d08:	40014000 	.word	0x40014000
 8008d0c:	40001800 	.word	0x40001800
 8008d10:	00010007 	.word	0x00010007

08008d14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0201 	bic.w	r2, r2, #1
 8008d2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6a1a      	ldr	r2, [r3, #32]
 8008d32:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d36:	4013      	ands	r3, r2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10f      	bne.n	8008d5c <HAL_TIM_Base_Stop_IT+0x48>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	f240 4344 	movw	r3, #1092	@ 0x444
 8008d46:	4013      	ands	r3, r2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <HAL_TIM_Base_Stop_IT+0x48>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0201 	bic.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	f003 0302 	and.w	r3, r3, #2
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d122      	bne.n	8008dce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d11b      	bne.n	8008dce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f06f 0202 	mvn.w	r2, #2
 8008d9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9cf 	bl	8009158 <HAL_TIM_IC_CaptureCallback>
 8008dba:	e005      	b.n	8008dc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f9c1 	bl	8009144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f9d2 	bl	800916c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d122      	bne.n	8008e22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d11b      	bne.n	8008e22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f06f 0204 	mvn.w	r2, #4
 8008df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f9a5 	bl	8009158 <HAL_TIM_IC_CaptureCallback>
 8008e0e:	e005      	b.n	8008e1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f997 	bl	8009144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f9a8 	bl	800916c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	f003 0308 	and.w	r3, r3, #8
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d122      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f003 0308 	and.w	r3, r3, #8
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	d11b      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f06f 0208 	mvn.w	r2, #8
 8008e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f97b 	bl	8009158 <HAL_TIM_IC_CaptureCallback>
 8008e62:	e005      	b.n	8008e70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f96d 	bl	8009144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f97e 	bl	800916c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b10      	cmp	r3, #16
 8008e82:	d122      	bne.n	8008eca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	2b10      	cmp	r3, #16
 8008e90:	d11b      	bne.n	8008eca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f06f 0210 	mvn.w	r2, #16
 8008e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2208      	movs	r2, #8
 8008ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f951 	bl	8009158 <HAL_TIM_IC_CaptureCallback>
 8008eb6:	e005      	b.n	8008ec4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f943 	bl	8009144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f954 	bl	800916c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d10e      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d107      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f06f 0201 	mvn.w	r2, #1
 8008eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f00d fb3b 	bl	801656c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f00:	2b80      	cmp	r3, #128	@ 0x80
 8008f02:	d10e      	bne.n	8008f22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f0e:	2b80      	cmp	r3, #128	@ 0x80
 8008f10:	d107      	bne.n	8008f22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fb0b 	bl	8009538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f30:	d10e      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3c:	2b80      	cmp	r3, #128	@ 0x80
 8008f3e:	d107      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fafe 	bl	800954c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5a:	2b40      	cmp	r3, #64	@ 0x40
 8008f5c:	d10e      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f68:	2b40      	cmp	r3, #64	@ 0x40
 8008f6a:	d107      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f902 	bl	8009180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d10e      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b20      	cmp	r3, #32
 8008f96:	d107      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f06f 0220 	mvn.w	r2, #32
 8008fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fabe 	bl	8009524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_TIM_ConfigClockSource+0x1c>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e0b4      	b.n	8009136 <HAL_TIM_ConfigClockSource+0x186>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	4b56      	ldr	r3, [pc, #344]	@ (8009140 <HAL_TIM_ConfigClockSource+0x190>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009004:	d03e      	beq.n	8009084 <HAL_TIM_ConfigClockSource+0xd4>
 8009006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800900a:	f200 8087 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x16c>
 800900e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009012:	f000 8086 	beq.w	8009122 <HAL_TIM_ConfigClockSource+0x172>
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800901a:	d87f      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
 800901c:	2b70      	cmp	r3, #112	@ 0x70
 800901e:	d01a      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0xa6>
 8009020:	2b70      	cmp	r3, #112	@ 0x70
 8009022:	d87b      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
 8009024:	2b60      	cmp	r3, #96	@ 0x60
 8009026:	d050      	beq.n	80090ca <HAL_TIM_ConfigClockSource+0x11a>
 8009028:	2b60      	cmp	r3, #96	@ 0x60
 800902a:	d877      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
 800902c:	2b50      	cmp	r3, #80	@ 0x50
 800902e:	d03c      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0xfa>
 8009030:	2b50      	cmp	r3, #80	@ 0x50
 8009032:	d873      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
 8009034:	2b40      	cmp	r3, #64	@ 0x40
 8009036:	d058      	beq.n	80090ea <HAL_TIM_ConfigClockSource+0x13a>
 8009038:	2b40      	cmp	r3, #64	@ 0x40
 800903a:	d86f      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
 800903c:	2b30      	cmp	r3, #48	@ 0x30
 800903e:	d064      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x15a>
 8009040:	2b30      	cmp	r3, #48	@ 0x30
 8009042:	d86b      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
 8009044:	2b20      	cmp	r3, #32
 8009046:	d060      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x15a>
 8009048:	2b20      	cmp	r3, #32
 800904a:	d867      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d05c      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x15a>
 8009050:	2b10      	cmp	r3, #16
 8009052:	d05a      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x15a>
 8009054:	e062      	b.n	800911c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009066:	f000 f9af 	bl	80093c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	609a      	str	r2, [r3, #8]
      break;
 8009082:	e04f      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009094:	f000 f998 	bl	80093c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090a6:	609a      	str	r2, [r3, #8]
      break;
 80090a8:	e03c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090b6:	461a      	mov	r2, r3
 80090b8:	f000 f90c 	bl	80092d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2150      	movs	r1, #80	@ 0x50
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 f965 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 80090c8:	e02c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090d6:	461a      	mov	r2, r3
 80090d8:	f000 f92b 	bl	8009332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2160      	movs	r1, #96	@ 0x60
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f955 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 80090e8:	e01c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090f6:	461a      	mov	r2, r3
 80090f8:	f000 f8ec 	bl	80092d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2140      	movs	r1, #64	@ 0x40
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f945 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 8009108:	e00c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f000 f93c 	bl	8009392 <TIM_ITRx_SetConfig>
      break;
 800911a:	e003      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]
      break;
 8009120:	e000      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	fffeff88 	.word	0xfffeff88

08009144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a40      	ldr	r2, [pc, #256]	@ (80092a8 <TIM_Base_SetConfig+0x114>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d013      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b2:	d00f      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a3d      	ldr	r2, [pc, #244]	@ (80092ac <TIM_Base_SetConfig+0x118>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00b      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a3c      	ldr	r2, [pc, #240]	@ (80092b0 <TIM_Base_SetConfig+0x11c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d007      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a3b      	ldr	r2, [pc, #236]	@ (80092b4 <TIM_Base_SetConfig+0x120>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d003      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a3a      	ldr	r2, [pc, #232]	@ (80092b8 <TIM_Base_SetConfig+0x124>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d108      	bne.n	80091e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a2f      	ldr	r2, [pc, #188]	@ (80092a8 <TIM_Base_SetConfig+0x114>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d02b      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091f4:	d027      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a2c      	ldr	r2, [pc, #176]	@ (80092ac <TIM_Base_SetConfig+0x118>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d023      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a2b      	ldr	r2, [pc, #172]	@ (80092b0 <TIM_Base_SetConfig+0x11c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d01f      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a2a      	ldr	r2, [pc, #168]	@ (80092b4 <TIM_Base_SetConfig+0x120>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d01b      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a29      	ldr	r2, [pc, #164]	@ (80092b8 <TIM_Base_SetConfig+0x124>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d017      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a28      	ldr	r2, [pc, #160]	@ (80092bc <TIM_Base_SetConfig+0x128>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d013      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a27      	ldr	r2, [pc, #156]	@ (80092c0 <TIM_Base_SetConfig+0x12c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00f      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a26      	ldr	r2, [pc, #152]	@ (80092c4 <TIM_Base_SetConfig+0x130>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d00b      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a25      	ldr	r2, [pc, #148]	@ (80092c8 <TIM_Base_SetConfig+0x134>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d007      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a24      	ldr	r2, [pc, #144]	@ (80092cc <TIM_Base_SetConfig+0x138>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d003      	beq.n	8009246 <TIM_Base_SetConfig+0xb2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a23      	ldr	r2, [pc, #140]	@ (80092d0 <TIM_Base_SetConfig+0x13c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d108      	bne.n	8009258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800924c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a0a      	ldr	r2, [pc, #40]	@ (80092a8 <TIM_Base_SetConfig+0x114>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_Base_SetConfig+0xf8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a0c      	ldr	r2, [pc, #48]	@ (80092b8 <TIM_Base_SetConfig+0x124>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d103      	bne.n	8009294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	691a      	ldr	r2, [r3, #16]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	615a      	str	r2, [r3, #20]
}
 800929a:	bf00      	nop
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	40010000 	.word	0x40010000
 80092ac:	40000400 	.word	0x40000400
 80092b0:	40000800 	.word	0x40000800
 80092b4:	40000c00 	.word	0x40000c00
 80092b8:	40010400 	.word	0x40010400
 80092bc:	40014000 	.word	0x40014000
 80092c0:	40014400 	.word	0x40014400
 80092c4:	40014800 	.word	0x40014800
 80092c8:	40001800 	.word	0x40001800
 80092cc:	40001c00 	.word	0x40001c00
 80092d0:	40002000 	.word	0x40002000

080092d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	f023 0201 	bic.w	r2, r3, #1
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4313      	orrs	r3, r2
 8009308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f023 030a 	bic.w	r3, r3, #10
 8009310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009332:	b480      	push	{r7}
 8009334:	b087      	sub	sp, #28
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	f023 0210 	bic.w	r2, r3, #16
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800935c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800936e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	f043 0307 	orr.w	r3, r3, #7
 80093b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	609a      	str	r2, [r3, #8]
}
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	021a      	lsls	r2, r3, #8
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	609a      	str	r2, [r3, #8]
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800941c:	2302      	movs	r3, #2
 800941e:	e06d      	b.n	80094fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a30      	ldr	r2, [pc, #192]	@ (8009508 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d004      	beq.n	8009454 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a2f      	ldr	r2, [pc, #188]	@ (800950c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d108      	bne.n	8009466 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800945a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800946c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	4313      	orrs	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a20      	ldr	r2, [pc, #128]	@ (8009508 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d022      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009492:	d01d      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a1d      	ldr	r2, [pc, #116]	@ (8009510 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d018      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009514 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d013      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a1a      	ldr	r2, [pc, #104]	@ (8009518 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00e      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a15      	ldr	r2, [pc, #84]	@ (800950c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d009      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a16      	ldr	r2, [pc, #88]	@ (800951c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d004      	beq.n	80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a15      	ldr	r2, [pc, #84]	@ (8009520 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d10c      	bne.n	80094ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	40010000 	.word	0x40010000
 800950c:	40010400 	.word	0x40010400
 8009510:	40000400 	.word	0x40000400
 8009514:	40000800 	.word	0x40000800
 8009518:	40000c00 	.word	0x40000c00
 800951c:	40014000 	.word	0x40014000
 8009520:	40001800 	.word	0x40001800

08009524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e040      	b.n	80095f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7f7 fec8 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2224      	movs	r2, #36	@ 0x24
 800958c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0201 	bic.w	r2, r2, #1
 800959c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fca0 	bl	8009ee4 <UART_SetConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e022      	b.n	80095f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fef8 	bl	800a3ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0201 	orr.w	r2, r2, #1
 80095ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 ff7f 	bl	800a4f0 <UART_CheckIdleState>
 80095f2:	4603      	mov	r3, r0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08a      	sub	sp, #40	@ 0x28
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	603b      	str	r3, [r7, #0]
 8009608:	4613      	mov	r3, r2
 800960a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009610:	2b20      	cmp	r3, #32
 8009612:	d171      	bne.n	80096f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <HAL_UART_Transmit+0x24>
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e06a      	b.n	80096fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2221      	movs	r2, #33	@ 0x21
 8009630:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009632:	f7f8 fbab 	bl	8001d8c <HAL_GetTick>
 8009636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	88fa      	ldrh	r2, [r7, #6]
 800963c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	88fa      	ldrh	r2, [r7, #6]
 8009644:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009650:	d108      	bne.n	8009664 <HAL_UART_Transmit+0x68>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	e003      	b.n	800966c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009668:	2300      	movs	r3, #0
 800966a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800966c:	e02c      	b.n	80096c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2200      	movs	r2, #0
 8009676:	2180      	movs	r1, #128	@ 0x80
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 ff70 	bl	800a55e <UART_WaitOnFlagUntilTimeout>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e038      	b.n	80096fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10b      	bne.n	80096a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800969c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	3302      	adds	r3, #2
 80096a2:	61bb      	str	r3, [r7, #24]
 80096a4:	e007      	b.n	80096b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	3301      	adds	r3, #1
 80096b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1cc      	bne.n	800966e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	2140      	movs	r1, #64	@ 0x40
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 ff3d 	bl	800a55e <UART_WaitOnFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e005      	b.n	80096fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	e000      	b.n	80096fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80096f8:	2302      	movs	r3, #2
  }
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b08a      	sub	sp, #40	@ 0x28
 8009706:	af02      	add	r7, sp, #8
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	603b      	str	r3, [r7, #0]
 800970e:	4613      	mov	r3, r2
 8009710:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009718:	2b20      	cmp	r3, #32
 800971a:	f040 80b1 	bne.w	8009880 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <HAL_UART_Receive+0x28>
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e0a9      	b.n	8009882 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2222      	movs	r2, #34	@ 0x22
 800973a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009744:	f7f8 fb22 	bl	8001d8c <HAL_GetTick>
 8009748:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	88fa      	ldrh	r2, [r7, #6]
 8009756:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009762:	d10e      	bne.n	8009782 <HAL_UART_Receive+0x80>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d105      	bne.n	8009778 <HAL_UART_Receive+0x76>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009772:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009776:	e02d      	b.n	80097d4 <HAL_UART_Receive+0xd2>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	22ff      	movs	r2, #255	@ 0xff
 800977c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009780:	e028      	b.n	80097d4 <HAL_UART_Receive+0xd2>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10d      	bne.n	80097a6 <HAL_UART_Receive+0xa4>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d104      	bne.n	800979c <HAL_UART_Receive+0x9a>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	22ff      	movs	r2, #255	@ 0xff
 8009796:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800979a:	e01b      	b.n	80097d4 <HAL_UART_Receive+0xd2>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	227f      	movs	r2, #127	@ 0x7f
 80097a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80097a4:	e016      	b.n	80097d4 <HAL_UART_Receive+0xd2>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ae:	d10d      	bne.n	80097cc <HAL_UART_Receive+0xca>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d104      	bne.n	80097c2 <HAL_UART_Receive+0xc0>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	227f      	movs	r2, #127	@ 0x7f
 80097bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80097c0:	e008      	b.n	80097d4 <HAL_UART_Receive+0xd2>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	223f      	movs	r2, #63	@ 0x3f
 80097c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80097ca:	e003      	b.n	80097d4 <HAL_UART_Receive+0xd2>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097e4:	d108      	bne.n	80097f8 <HAL_UART_Receive+0xf6>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d104      	bne.n	80097f8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	e003      	b.n	8009800 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009800:	e032      	b.n	8009868 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2200      	movs	r2, #0
 800980a:	2120      	movs	r1, #32
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fea6 	bl	800a55e <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e032      	b.n	8009882 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10c      	bne.n	800983c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009828:	b29a      	uxth	r2, r3
 800982a:	8a7b      	ldrh	r3, [r7, #18]
 800982c:	4013      	ands	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	3302      	adds	r3, #2
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	e00c      	b.n	8009856 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009842:	b2da      	uxtb	r2, r3
 8009844:	8a7b      	ldrh	r3, [r7, #18]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	4013      	ands	r3, r2
 800984a:	b2da      	uxtb	r2, r3
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	3301      	adds	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800985c:	b29b      	uxth	r3, r3
 800985e:	3b01      	subs	r3, #1
 8009860:	b29a      	uxth	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800986e:	b29b      	uxth	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1c6      	bne.n	8009802 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	e000      	b.n	8009882 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8009880:	2302      	movs	r3, #2
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b08a      	sub	sp, #40	@ 0x28
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	4613      	mov	r3, r2
 8009896:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d132      	bne.n	8009908 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <HAL_UART_Receive_IT+0x24>
 80098a8:	88fb      	ldrh	r3, [r7, #6]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e02b      	b.n	800990a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d018      	beq.n	80098f8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	613b      	str	r3, [r7, #16]
   return(result);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098da:	627b      	str	r3, [r7, #36]	@ 0x24
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e4:	623b      	str	r3, [r7, #32]
 80098e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e8:	69f9      	ldr	r1, [r7, #28]
 80098ea:	6a3a      	ldr	r2, [r7, #32]
 80098ec:	e841 2300 	strex	r3, r2, [r1]
 80098f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e6      	bne.n	80098c6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	461a      	mov	r2, r3
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 fef4 	bl	800a6ec <UART_Start_Receive_IT>
 8009904:	4603      	mov	r3, r0
 8009906:	e000      	b.n	800990a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009908:	2302      	movs	r3, #2
  }
}
 800990a:	4618      	mov	r0, r3
 800990c:	3728      	adds	r7, #40	@ 0x28
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b0ba      	sub	sp, #232	@ 0xe8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800993a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800993e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009942:	4013      	ands	r3, r2
 8009944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800994c:	2b00      	cmp	r3, #0
 800994e:	d115      	bne.n	800997c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009954:	f003 0320 	and.w	r3, r3, #32
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00f      	beq.n	800997c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800995c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009960:	f003 0320 	and.w	r3, r3, #32
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 8297 	beq.w	8009ea0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
      }
      return;
 800997a:	e291      	b.n	8009ea0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800997c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 8117 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009996:	4b85      	ldr	r3, [pc, #532]	@ (8009bac <HAL_UART_IRQHandler+0x298>)
 8009998:	4013      	ands	r3, r2
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 810a 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d011      	beq.n	80099d0 <HAL_UART_IRQHandler+0xbc>
 80099ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2201      	movs	r2, #1
 80099be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099c6:	f043 0201 	orr.w	r2, r3, #1
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099d4:	f003 0302 	and.w	r3, r3, #2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d011      	beq.n	8009a00 <HAL_UART_IRQHandler+0xec>
 80099dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00b      	beq.n	8009a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2202      	movs	r2, #2
 80099ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f6:	f043 0204 	orr.w	r2, r3, #4
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d011      	beq.n	8009a30 <HAL_UART_IRQHandler+0x11c>
 8009a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00b      	beq.n	8009a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a26:	f043 0202 	orr.w	r2, r3, #2
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a34:	f003 0308 	and.w	r3, r3, #8
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d017      	beq.n	8009a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d105      	bne.n	8009a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2208      	movs	r2, #8
 8009a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a62:	f043 0208 	orr.w	r2, r3, #8
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d012      	beq.n	8009a9e <HAL_UART_IRQHandler+0x18a>
 8009a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00c      	beq.n	8009a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a94:	f043 0220 	orr.w	r2, r3, #32
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 81fd 	beq.w	8009ea4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00d      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae6:	2b40      	cmp	r3, #64	@ 0x40
 8009ae8:	d005      	beq.n	8009af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009aee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d04f      	beq.n	8009b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 febe 	bl	800a878 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b06:	2b40      	cmp	r3, #64	@ 0x40
 8009b08:	d141      	bne.n	8009b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3308      	adds	r3, #8
 8009b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009b36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1d9      	bne.n	8009b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d013      	beq.n	8009b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b62:	4a13      	ldr	r2, [pc, #76]	@ (8009bb0 <HAL_UART_IRQHandler+0x29c>)
 8009b64:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7f9 f9b2 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d017      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b84:	e00f      	b.n	8009ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f00c fee6 	bl	8016958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b8c:	e00b      	b.n	8009ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f00c fee2 	bl	8016958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b94:	e007      	b.n	8009ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f00c fede 	bl	8016958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009ba4:	e17e      	b.n	8009ea4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba6:	bf00      	nop
    return;
 8009ba8:	e17c      	b.n	8009ea4 <HAL_UART_IRQHandler+0x590>
 8009baa:	bf00      	nop
 8009bac:	04000120 	.word	0x04000120
 8009bb0:	0800a941 	.word	0x0800a941

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	f040 814c 	bne.w	8009e56 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc2:	f003 0310 	and.w	r3, r3, #16
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 8145 	beq.w	8009e56 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd0:	f003 0310 	and.w	r3, r3, #16
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 813e 	beq.w	8009e56 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2210      	movs	r2, #16
 8009be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bec:	2b40      	cmp	r3, #64	@ 0x40
 8009bee:	f040 80b6 	bne.w	8009d5e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 8150 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c12:	429a      	cmp	r2, r3
 8009c14:	f080 8148 	bcs.w	8009ea8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c2c:	f000 8086 	beq.w	8009d3c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	461a      	mov	r2, r3
 8009c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1da      	bne.n	8009c30 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c8c:	f023 0301 	bic.w	r3, r3, #1
 8009c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3308      	adds	r3, #8
 8009c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e1      	bne.n	8009c7a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ce0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e3      	bne.n	8009cb6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d0c:	f023 0310 	bic.w	r3, r3, #16
 8009d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e4      	bne.n	8009cfc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f9 f85c 	bl	8002df4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8b8 	bl	8009ecc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d5c:	e0a4      	b.n	8009ea8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 8096 	beq.w	8009eac <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8091 	beq.w	8009eac <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d92:	e853 3f00 	ldrex	r3, [r3]
 8009d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e4      	bne.n	8009d8a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dca:	e853 3f00 	ldrex	r3, [r3]
 8009dce:	623b      	str	r3, [r7, #32]
   return(result);
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	f023 0301 	bic.w	r3, r3, #1
 8009dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3308      	adds	r3, #8
 8009de0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009de4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dec:	e841 2300 	strex	r3, r2, [r1]
 8009df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e3      	bne.n	8009dc0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f023 0310 	bic.w	r3, r3, #16
 8009e20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e2e:	61fb      	str	r3, [r7, #28]
 8009e30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e32:	69b9      	ldr	r1, [r7, #24]
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	e841 2300 	strex	r3, r2, [r1]
 8009e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e4      	bne.n	8009e0c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2202      	movs	r2, #2
 8009e46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f83c 	bl	8009ecc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e54:	e02a      	b.n	8009eac <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00e      	beq.n	8009e80 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d008      	beq.n	8009e80 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01c      	beq.n	8009eb0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
    }
    return;
 8009e7e:	e017      	b.n	8009eb0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d012      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x59e>
 8009e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fd67 	bl	800a96c <UART_EndTransmit_IT>
    return;
 8009e9e:	e008      	b.n	8009eb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009ea0:	bf00      	nop
 8009ea2:	e006      	b.n	8009eb2 <HAL_UART_IRQHandler+0x59e>
    return;
 8009ea4:	bf00      	nop
 8009ea6:	e004      	b.n	8009eb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009ea8:	bf00      	nop
 8009eaa:	e002      	b.n	8009eb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009eac:	bf00      	nop
 8009eae:	e000      	b.n	8009eb2 <HAL_UART_IRQHandler+0x59e>
    return;
 8009eb0:	bf00      	nop
  }

}
 8009eb2:	37e8      	adds	r7, #232	@ 0xe8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4ba6      	ldr	r3, [pc, #664]	@ (800a1a8 <UART_SetConfig+0x2c4>)
 8009f10:	4013      	ands	r3, r2
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6812      	ldr	r2, [r2, #0]
 8009f16:	6979      	ldr	r1, [r7, #20]
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68da      	ldr	r2, [r3, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a94      	ldr	r2, [pc, #592]	@ (800a1ac <UART_SetConfig+0x2c8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d120      	bne.n	8009fa2 <UART_SetConfig+0xbe>
 8009f60:	4b93      	ldr	r3, [pc, #588]	@ (800a1b0 <UART_SetConfig+0x2cc>)
 8009f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d816      	bhi.n	8009f9c <UART_SetConfig+0xb8>
 8009f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f74 <UART_SetConfig+0x90>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009f85 	.word	0x08009f85
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009f8b 	.word	0x08009f8b
 8009f80:	08009f97 	.word	0x08009f97
 8009f84:	2301      	movs	r3, #1
 8009f86:	77fb      	strb	r3, [r7, #31]
 8009f88:	e150      	b.n	800a22c <UART_SetConfig+0x348>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	77fb      	strb	r3, [r7, #31]
 8009f8e:	e14d      	b.n	800a22c <UART_SetConfig+0x348>
 8009f90:	2304      	movs	r3, #4
 8009f92:	77fb      	strb	r3, [r7, #31]
 8009f94:	e14a      	b.n	800a22c <UART_SetConfig+0x348>
 8009f96:	2308      	movs	r3, #8
 8009f98:	77fb      	strb	r3, [r7, #31]
 8009f9a:	e147      	b.n	800a22c <UART_SetConfig+0x348>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	77fb      	strb	r3, [r7, #31]
 8009fa0:	e144      	b.n	800a22c <UART_SetConfig+0x348>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a83      	ldr	r2, [pc, #524]	@ (800a1b4 <UART_SetConfig+0x2d0>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d132      	bne.n	800a012 <UART_SetConfig+0x12e>
 8009fac:	4b80      	ldr	r3, [pc, #512]	@ (800a1b0 <UART_SetConfig+0x2cc>)
 8009fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fb2:	f003 030c 	and.w	r3, r3, #12
 8009fb6:	2b0c      	cmp	r3, #12
 8009fb8:	d828      	bhi.n	800a00c <UART_SetConfig+0x128>
 8009fba:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc0 <UART_SetConfig+0xdc>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	0800a00d 	.word	0x0800a00d
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a001 	.word	0x0800a001
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a00d 	.word	0x0800a00d
 8009fdc:	0800a00d 	.word	0x0800a00d
 8009fe0:	08009ffb 	.word	0x08009ffb
 8009fe4:	0800a00d 	.word	0x0800a00d
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a00d 	.word	0x0800a00d
 8009ff0:	0800a007 	.word	0x0800a007
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e118      	b.n	800a22c <UART_SetConfig+0x348>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	77fb      	strb	r3, [r7, #31]
 8009ffe:	e115      	b.n	800a22c <UART_SetConfig+0x348>
 800a000:	2304      	movs	r3, #4
 800a002:	77fb      	strb	r3, [r7, #31]
 800a004:	e112      	b.n	800a22c <UART_SetConfig+0x348>
 800a006:	2308      	movs	r3, #8
 800a008:	77fb      	strb	r3, [r7, #31]
 800a00a:	e10f      	b.n	800a22c <UART_SetConfig+0x348>
 800a00c:	2310      	movs	r3, #16
 800a00e:	77fb      	strb	r3, [r7, #31]
 800a010:	e10c      	b.n	800a22c <UART_SetConfig+0x348>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a68      	ldr	r2, [pc, #416]	@ (800a1b8 <UART_SetConfig+0x2d4>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d120      	bne.n	800a05e <UART_SetConfig+0x17a>
 800a01c:	4b64      	ldr	r3, [pc, #400]	@ (800a1b0 <UART_SetConfig+0x2cc>)
 800a01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a022:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a026:	2b30      	cmp	r3, #48	@ 0x30
 800a028:	d013      	beq.n	800a052 <UART_SetConfig+0x16e>
 800a02a:	2b30      	cmp	r3, #48	@ 0x30
 800a02c:	d814      	bhi.n	800a058 <UART_SetConfig+0x174>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d009      	beq.n	800a046 <UART_SetConfig+0x162>
 800a032:	2b20      	cmp	r3, #32
 800a034:	d810      	bhi.n	800a058 <UART_SetConfig+0x174>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <UART_SetConfig+0x15c>
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d006      	beq.n	800a04c <UART_SetConfig+0x168>
 800a03e:	e00b      	b.n	800a058 <UART_SetConfig+0x174>
 800a040:	2300      	movs	r3, #0
 800a042:	77fb      	strb	r3, [r7, #31]
 800a044:	e0f2      	b.n	800a22c <UART_SetConfig+0x348>
 800a046:	2302      	movs	r3, #2
 800a048:	77fb      	strb	r3, [r7, #31]
 800a04a:	e0ef      	b.n	800a22c <UART_SetConfig+0x348>
 800a04c:	2304      	movs	r3, #4
 800a04e:	77fb      	strb	r3, [r7, #31]
 800a050:	e0ec      	b.n	800a22c <UART_SetConfig+0x348>
 800a052:	2308      	movs	r3, #8
 800a054:	77fb      	strb	r3, [r7, #31]
 800a056:	e0e9      	b.n	800a22c <UART_SetConfig+0x348>
 800a058:	2310      	movs	r3, #16
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e0e6      	b.n	800a22c <UART_SetConfig+0x348>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a56      	ldr	r2, [pc, #344]	@ (800a1bc <UART_SetConfig+0x2d8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d120      	bne.n	800a0aa <UART_SetConfig+0x1c6>
 800a068:	4b51      	ldr	r3, [pc, #324]	@ (800a1b0 <UART_SetConfig+0x2cc>)
 800a06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a06e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a072:	2bc0      	cmp	r3, #192	@ 0xc0
 800a074:	d013      	beq.n	800a09e <UART_SetConfig+0x1ba>
 800a076:	2bc0      	cmp	r3, #192	@ 0xc0
 800a078:	d814      	bhi.n	800a0a4 <UART_SetConfig+0x1c0>
 800a07a:	2b80      	cmp	r3, #128	@ 0x80
 800a07c:	d009      	beq.n	800a092 <UART_SetConfig+0x1ae>
 800a07e:	2b80      	cmp	r3, #128	@ 0x80
 800a080:	d810      	bhi.n	800a0a4 <UART_SetConfig+0x1c0>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <UART_SetConfig+0x1a8>
 800a086:	2b40      	cmp	r3, #64	@ 0x40
 800a088:	d006      	beq.n	800a098 <UART_SetConfig+0x1b4>
 800a08a:	e00b      	b.n	800a0a4 <UART_SetConfig+0x1c0>
 800a08c:	2300      	movs	r3, #0
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	e0cc      	b.n	800a22c <UART_SetConfig+0x348>
 800a092:	2302      	movs	r3, #2
 800a094:	77fb      	strb	r3, [r7, #31]
 800a096:	e0c9      	b.n	800a22c <UART_SetConfig+0x348>
 800a098:	2304      	movs	r3, #4
 800a09a:	77fb      	strb	r3, [r7, #31]
 800a09c:	e0c6      	b.n	800a22c <UART_SetConfig+0x348>
 800a09e:	2308      	movs	r3, #8
 800a0a0:	77fb      	strb	r3, [r7, #31]
 800a0a2:	e0c3      	b.n	800a22c <UART_SetConfig+0x348>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	77fb      	strb	r3, [r7, #31]
 800a0a8:	e0c0      	b.n	800a22c <UART_SetConfig+0x348>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a44      	ldr	r2, [pc, #272]	@ (800a1c0 <UART_SetConfig+0x2dc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d125      	bne.n	800a100 <UART_SetConfig+0x21c>
 800a0b4:	4b3e      	ldr	r3, [pc, #248]	@ (800a1b0 <UART_SetConfig+0x2cc>)
 800a0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0c2:	d017      	beq.n	800a0f4 <UART_SetConfig+0x210>
 800a0c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0c8:	d817      	bhi.n	800a0fa <UART_SetConfig+0x216>
 800a0ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ce:	d00b      	beq.n	800a0e8 <UART_SetConfig+0x204>
 800a0d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d4:	d811      	bhi.n	800a0fa <UART_SetConfig+0x216>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <UART_SetConfig+0x1fe>
 800a0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0de:	d006      	beq.n	800a0ee <UART_SetConfig+0x20a>
 800a0e0:	e00b      	b.n	800a0fa <UART_SetConfig+0x216>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	77fb      	strb	r3, [r7, #31]
 800a0e6:	e0a1      	b.n	800a22c <UART_SetConfig+0x348>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	77fb      	strb	r3, [r7, #31]
 800a0ec:	e09e      	b.n	800a22c <UART_SetConfig+0x348>
 800a0ee:	2304      	movs	r3, #4
 800a0f0:	77fb      	strb	r3, [r7, #31]
 800a0f2:	e09b      	b.n	800a22c <UART_SetConfig+0x348>
 800a0f4:	2308      	movs	r3, #8
 800a0f6:	77fb      	strb	r3, [r7, #31]
 800a0f8:	e098      	b.n	800a22c <UART_SetConfig+0x348>
 800a0fa:	2310      	movs	r3, #16
 800a0fc:	77fb      	strb	r3, [r7, #31]
 800a0fe:	e095      	b.n	800a22c <UART_SetConfig+0x348>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a2f      	ldr	r2, [pc, #188]	@ (800a1c4 <UART_SetConfig+0x2e0>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d125      	bne.n	800a156 <UART_SetConfig+0x272>
 800a10a:	4b29      	ldr	r3, [pc, #164]	@ (800a1b0 <UART_SetConfig+0x2cc>)
 800a10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a110:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a114:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a118:	d017      	beq.n	800a14a <UART_SetConfig+0x266>
 800a11a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a11e:	d817      	bhi.n	800a150 <UART_SetConfig+0x26c>
 800a120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a124:	d00b      	beq.n	800a13e <UART_SetConfig+0x25a>
 800a126:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a12a:	d811      	bhi.n	800a150 <UART_SetConfig+0x26c>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d003      	beq.n	800a138 <UART_SetConfig+0x254>
 800a130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a134:	d006      	beq.n	800a144 <UART_SetConfig+0x260>
 800a136:	e00b      	b.n	800a150 <UART_SetConfig+0x26c>
 800a138:	2301      	movs	r3, #1
 800a13a:	77fb      	strb	r3, [r7, #31]
 800a13c:	e076      	b.n	800a22c <UART_SetConfig+0x348>
 800a13e:	2302      	movs	r3, #2
 800a140:	77fb      	strb	r3, [r7, #31]
 800a142:	e073      	b.n	800a22c <UART_SetConfig+0x348>
 800a144:	2304      	movs	r3, #4
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e070      	b.n	800a22c <UART_SetConfig+0x348>
 800a14a:	2308      	movs	r3, #8
 800a14c:	77fb      	strb	r3, [r7, #31]
 800a14e:	e06d      	b.n	800a22c <UART_SetConfig+0x348>
 800a150:	2310      	movs	r3, #16
 800a152:	77fb      	strb	r3, [r7, #31]
 800a154:	e06a      	b.n	800a22c <UART_SetConfig+0x348>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <UART_SetConfig+0x2e4>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d138      	bne.n	800a1d2 <UART_SetConfig+0x2ee>
 800a160:	4b13      	ldr	r3, [pc, #76]	@ (800a1b0 <UART_SetConfig+0x2cc>)
 800a162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a166:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a16a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a16e:	d017      	beq.n	800a1a0 <UART_SetConfig+0x2bc>
 800a170:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a174:	d82a      	bhi.n	800a1cc <UART_SetConfig+0x2e8>
 800a176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a17a:	d00b      	beq.n	800a194 <UART_SetConfig+0x2b0>
 800a17c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a180:	d824      	bhi.n	800a1cc <UART_SetConfig+0x2e8>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <UART_SetConfig+0x2aa>
 800a186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a18a:	d006      	beq.n	800a19a <UART_SetConfig+0x2b6>
 800a18c:	e01e      	b.n	800a1cc <UART_SetConfig+0x2e8>
 800a18e:	2300      	movs	r3, #0
 800a190:	77fb      	strb	r3, [r7, #31]
 800a192:	e04b      	b.n	800a22c <UART_SetConfig+0x348>
 800a194:	2302      	movs	r3, #2
 800a196:	77fb      	strb	r3, [r7, #31]
 800a198:	e048      	b.n	800a22c <UART_SetConfig+0x348>
 800a19a:	2304      	movs	r3, #4
 800a19c:	77fb      	strb	r3, [r7, #31]
 800a19e:	e045      	b.n	800a22c <UART_SetConfig+0x348>
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	77fb      	strb	r3, [r7, #31]
 800a1a4:	e042      	b.n	800a22c <UART_SetConfig+0x348>
 800a1a6:	bf00      	nop
 800a1a8:	efff69f3 	.word	0xefff69f3
 800a1ac:	40011000 	.word	0x40011000
 800a1b0:	40023800 	.word	0x40023800
 800a1b4:	40004400 	.word	0x40004400
 800a1b8:	40004800 	.word	0x40004800
 800a1bc:	40004c00 	.word	0x40004c00
 800a1c0:	40005000 	.word	0x40005000
 800a1c4:	40011400 	.word	0x40011400
 800a1c8:	40007800 	.word	0x40007800
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	77fb      	strb	r3, [r7, #31]
 800a1d0:	e02c      	b.n	800a22c <UART_SetConfig+0x348>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a72      	ldr	r2, [pc, #456]	@ (800a3a0 <UART_SetConfig+0x4bc>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d125      	bne.n	800a228 <UART_SetConfig+0x344>
 800a1dc:	4b71      	ldr	r3, [pc, #452]	@ (800a3a4 <UART_SetConfig+0x4c0>)
 800a1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a1e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1ea:	d017      	beq.n	800a21c <UART_SetConfig+0x338>
 800a1ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a1f0:	d817      	bhi.n	800a222 <UART_SetConfig+0x33e>
 800a1f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1f6:	d00b      	beq.n	800a210 <UART_SetConfig+0x32c>
 800a1f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1fc:	d811      	bhi.n	800a222 <UART_SetConfig+0x33e>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <UART_SetConfig+0x326>
 800a202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a206:	d006      	beq.n	800a216 <UART_SetConfig+0x332>
 800a208:	e00b      	b.n	800a222 <UART_SetConfig+0x33e>
 800a20a:	2300      	movs	r3, #0
 800a20c:	77fb      	strb	r3, [r7, #31]
 800a20e:	e00d      	b.n	800a22c <UART_SetConfig+0x348>
 800a210:	2302      	movs	r3, #2
 800a212:	77fb      	strb	r3, [r7, #31]
 800a214:	e00a      	b.n	800a22c <UART_SetConfig+0x348>
 800a216:	2304      	movs	r3, #4
 800a218:	77fb      	strb	r3, [r7, #31]
 800a21a:	e007      	b.n	800a22c <UART_SetConfig+0x348>
 800a21c:	2308      	movs	r3, #8
 800a21e:	77fb      	strb	r3, [r7, #31]
 800a220:	e004      	b.n	800a22c <UART_SetConfig+0x348>
 800a222:	2310      	movs	r3, #16
 800a224:	77fb      	strb	r3, [r7, #31]
 800a226:	e001      	b.n	800a22c <UART_SetConfig+0x348>
 800a228:	2310      	movs	r3, #16
 800a22a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a234:	d15b      	bne.n	800a2ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a236:	7ffb      	ldrb	r3, [r7, #31]
 800a238:	2b08      	cmp	r3, #8
 800a23a:	d828      	bhi.n	800a28e <UART_SetConfig+0x3aa>
 800a23c:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <UART_SetConfig+0x360>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a269 	.word	0x0800a269
 800a248:	0800a271 	.word	0x0800a271
 800a24c:	0800a279 	.word	0x0800a279
 800a250:	0800a28f 	.word	0x0800a28f
 800a254:	0800a27f 	.word	0x0800a27f
 800a258:	0800a28f 	.word	0x0800a28f
 800a25c:	0800a28f 	.word	0x0800a28f
 800a260:	0800a28f 	.word	0x0800a28f
 800a264:	0800a287 	.word	0x0800a287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a268:	f7fd f806 	bl	8007278 <HAL_RCC_GetPCLK1Freq>
 800a26c:	61b8      	str	r0, [r7, #24]
        break;
 800a26e:	e013      	b.n	800a298 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a270:	f7fd f816 	bl	80072a0 <HAL_RCC_GetPCLK2Freq>
 800a274:	61b8      	str	r0, [r7, #24]
        break;
 800a276:	e00f      	b.n	800a298 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a278:	4b4b      	ldr	r3, [pc, #300]	@ (800a3a8 <UART_SetConfig+0x4c4>)
 800a27a:	61bb      	str	r3, [r7, #24]
        break;
 800a27c:	e00c      	b.n	800a298 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a27e:	f7fc fee9 	bl	8007054 <HAL_RCC_GetSysClockFreq>
 800a282:	61b8      	str	r0, [r7, #24]
        break;
 800a284:	e008      	b.n	800a298 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a28a:	61bb      	str	r3, [r7, #24]
        break;
 800a28c:	e004      	b.n	800a298 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	77bb      	strb	r3, [r7, #30]
        break;
 800a296:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d074      	beq.n	800a388 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	005a      	lsls	r2, r3, #1
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	085b      	lsrs	r3, r3, #1
 800a2a8:	441a      	add	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b0f      	cmp	r3, #15
 800a2b8:	d916      	bls.n	800a2e8 <UART_SetConfig+0x404>
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2c0:	d212      	bcs.n	800a2e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f023 030f 	bic.w	r3, r3, #15
 800a2ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	085b      	lsrs	r3, r3, #1
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	89fb      	ldrh	r3, [r7, #14]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	89fa      	ldrh	r2, [r7, #14]
 800a2e4:	60da      	str	r2, [r3, #12]
 800a2e6:	e04f      	b.n	800a388 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	77bb      	strb	r3, [r7, #30]
 800a2ec:	e04c      	b.n	800a388 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2ee:	7ffb      	ldrb	r3, [r7, #31]
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d828      	bhi.n	800a346 <UART_SetConfig+0x462>
 800a2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2fc <UART_SetConfig+0x418>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a321 	.word	0x0800a321
 800a300:	0800a329 	.word	0x0800a329
 800a304:	0800a331 	.word	0x0800a331
 800a308:	0800a347 	.word	0x0800a347
 800a30c:	0800a337 	.word	0x0800a337
 800a310:	0800a347 	.word	0x0800a347
 800a314:	0800a347 	.word	0x0800a347
 800a318:	0800a347 	.word	0x0800a347
 800a31c:	0800a33f 	.word	0x0800a33f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a320:	f7fc ffaa 	bl	8007278 <HAL_RCC_GetPCLK1Freq>
 800a324:	61b8      	str	r0, [r7, #24]
        break;
 800a326:	e013      	b.n	800a350 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a328:	f7fc ffba 	bl	80072a0 <HAL_RCC_GetPCLK2Freq>
 800a32c:	61b8      	str	r0, [r7, #24]
        break;
 800a32e:	e00f      	b.n	800a350 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a330:	4b1d      	ldr	r3, [pc, #116]	@ (800a3a8 <UART_SetConfig+0x4c4>)
 800a332:	61bb      	str	r3, [r7, #24]
        break;
 800a334:	e00c      	b.n	800a350 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a336:	f7fc fe8d 	bl	8007054 <HAL_RCC_GetSysClockFreq>
 800a33a:	61b8      	str	r0, [r7, #24]
        break;
 800a33c:	e008      	b.n	800a350 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a33e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a342:	61bb      	str	r3, [r7, #24]
        break;
 800a344:	e004      	b.n	800a350 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	77bb      	strb	r3, [r7, #30]
        break;
 800a34e:	bf00      	nop
    }

    if (pclk != 0U)
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d018      	beq.n	800a388 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	085a      	lsrs	r2, r3, #1
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	441a      	add	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	fbb2 f3f3 	udiv	r3, r2, r3
 800a368:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b0f      	cmp	r3, #15
 800a36e:	d909      	bls.n	800a384 <UART_SetConfig+0x4a0>
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a376:	d205      	bcs.n	800a384 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60da      	str	r2, [r3, #12]
 800a382:	e001      	b.n	800a388 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a394:	7fbb      	ldrb	r3, [r7, #30]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	40007c00 	.word	0x40007c00
 800a3a4:	40023800 	.word	0x40023800
 800a3a8:	00f42400 	.word	0x00f42400

0800a3ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41e:	f003 0308 	and.w	r3, r3, #8
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4aa:	d10a      	bne.n	800a4c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a500:	f7f7 fc44 	bl	8001d8c <HAL_GetTick>
 800a504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0308 	and.w	r3, r3, #8
 800a510:	2b08      	cmp	r3, #8
 800a512:	d10e      	bne.n	800a532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f81b 	bl	800a55e <UART_WaitOnFlagUntilTimeout>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e011      	b.n	800a556 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2220      	movs	r2, #32
 800a536:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2220      	movs	r2, #32
 800a53c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b09c      	sub	sp, #112	@ 0x70
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	60b9      	str	r1, [r7, #8]
 800a568:	603b      	str	r3, [r7, #0]
 800a56a:	4613      	mov	r3, r2
 800a56c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a56e:	e0a7      	b.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	f000 80a3 	beq.w	800a6c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a57a:	f7f7 fc07 	bl	8001d8c <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a586:	429a      	cmp	r2, r3
 800a588:	d302      	bcc.n	800a590 <UART_WaitOnFlagUntilTimeout+0x32>
 800a58a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d13f      	bne.n	800a610 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a5a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5b0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a5b6:	e841 2300 	strex	r3, r2, [r1]
 800a5ba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a5bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1e6      	bne.n	800a590 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5cc:	e853 3f00 	ldrex	r3, [r3]
 800a5d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d4:	f023 0301 	bic.w	r3, r3, #1
 800a5d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a5e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ea:	e841 2300 	strex	r3, r2, [r1]
 800a5ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1e5      	bne.n	800a5c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2220      	movs	r2, #32
 800a5fa:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e068      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d050      	beq.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a62c:	d148      	bne.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a636:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a64c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a656:	637b      	str	r3, [r7, #52]	@ 0x34
 800a658:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a65c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e6      	bne.n	800a638 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	613b      	str	r3, [r7, #16]
   return(result);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f023 0301 	bic.w	r3, r3, #1
 800a680:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3308      	adds	r3, #8
 800a688:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a68a:	623a      	str	r2, [r7, #32]
 800a68c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	69f9      	ldr	r1, [r7, #28]
 800a690:	6a3a      	ldr	r2, [r7, #32]
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	61bb      	str	r3, [r7, #24]
   return(result);
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e5      	bne.n	800a66a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e010      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69da      	ldr	r2, [r3, #28]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	bf0c      	ite	eq
 800a6d0:	2301      	moveq	r3, #1
 800a6d2:	2300      	movne	r3, #0
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	79fb      	ldrb	r3, [r7, #7]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	f43f af48 	beq.w	800a570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3770      	adds	r7, #112	@ 0x70
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b097      	sub	sp, #92	@ 0x5c
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	88fa      	ldrh	r2, [r7, #6]
 800a704:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	88fa      	ldrh	r2, [r7, #6]
 800a70c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a71e:	d10e      	bne.n	800a73e <UART_Start_Receive_IT+0x52>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d105      	bne.n	800a734 <UART_Start_Receive_IT+0x48>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a72e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a732:	e02d      	b.n	800a790 <UART_Start_Receive_IT+0xa4>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	22ff      	movs	r2, #255	@ 0xff
 800a738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a73c:	e028      	b.n	800a790 <UART_Start_Receive_IT+0xa4>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10d      	bne.n	800a762 <UART_Start_Receive_IT+0x76>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d104      	bne.n	800a758 <UART_Start_Receive_IT+0x6c>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	22ff      	movs	r2, #255	@ 0xff
 800a752:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a756:	e01b      	b.n	800a790 <UART_Start_Receive_IT+0xa4>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	227f      	movs	r2, #127	@ 0x7f
 800a75c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a760:	e016      	b.n	800a790 <UART_Start_Receive_IT+0xa4>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a76a:	d10d      	bne.n	800a788 <UART_Start_Receive_IT+0x9c>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d104      	bne.n	800a77e <UART_Start_Receive_IT+0x92>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	227f      	movs	r2, #127	@ 0x7f
 800a778:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a77c:	e008      	b.n	800a790 <UART_Start_Receive_IT+0xa4>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	223f      	movs	r2, #63	@ 0x3f
 800a782:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a786:	e003      	b.n	800a790 <UART_Start_Receive_IT+0xa4>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2222      	movs	r2, #34	@ 0x22
 800a79c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3308      	adds	r3, #8
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7aa:	e853 3f00 	ldrex	r3, [r3]
 800a7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	f043 0301 	orr.w	r3, r3, #1
 800a7b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a7c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e5      	bne.n	800a7a0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7dc:	d107      	bne.n	800a7ee <UART_Start_Receive_IT+0x102>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d103      	bne.n	800a7ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a21      	ldr	r2, [pc, #132]	@ (800a870 <UART_Start_Receive_IT+0x184>)
 800a7ea:	669a      	str	r2, [r3, #104]	@ 0x68
 800a7ec:	e002      	b.n	800a7f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	4a20      	ldr	r2, [pc, #128]	@ (800a874 <UART_Start_Receive_IT+0x188>)
 800a7f2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d019      	beq.n	800a830 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a804:	e853 3f00 	ldrex	r3, [r3]
 800a808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a81a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a81c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e6      	bne.n	800a7fc <UART_Start_Receive_IT+0x110>
 800a82e:	e018      	b.n	800a862 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	613b      	str	r3, [r7, #16]
   return(result);
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f043 0320 	orr.w	r3, r3, #32
 800a844:	653b      	str	r3, [r7, #80]	@ 0x50
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a84e:	623b      	str	r3, [r7, #32]
 800a850:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	69f9      	ldr	r1, [r7, #28]
 800a854:	6a3a      	ldr	r2, [r7, #32]
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e6      	bne.n	800a830 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	375c      	adds	r7, #92	@ 0x5c
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	0800ab27 	.word	0x0800ab27
 800a874:	0800a9c1 	.word	0x0800a9c1

0800a878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a878:	b480      	push	{r7}
 800a87a:	b095      	sub	sp, #84	@ 0x54
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a89e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e6      	bne.n	800a880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
 800a8c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8da:	e841 2300 	strex	r3, r2, [r1]
 800a8de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1e5      	bne.n	800a8b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d118      	bne.n	800a920 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	e853 3f00 	ldrex	r3, [r3]
 800a8fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f023 0310 	bic.w	r3, r3, #16
 800a902:	647b      	str	r3, [r7, #68]	@ 0x44
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	461a      	mov	r2, r3
 800a90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	6979      	ldr	r1, [r7, #20]
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	613b      	str	r3, [r7, #16]
   return(result);
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e6      	bne.n	800a8ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2220      	movs	r2, #32
 800a924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a934:	bf00      	nop
 800a936:	3754      	adds	r7, #84	@ 0x54
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f00b fffa 	bl	8016958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a964:	bf00      	nop
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	60bb      	str	r3, [r7, #8]
   return(result);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a988:	61fb      	str	r3, [r7, #28]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	61bb      	str	r3, [r7, #24]
 800a994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6979      	ldr	r1, [r7, #20]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	613b      	str	r3, [r7, #16]
   return(result);
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e6      	bne.n	800a974 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff fa80 	bl	8009eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9b8:	bf00      	nop
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b096      	sub	sp, #88	@ 0x58
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9ce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d8:	2b22      	cmp	r3, #34	@ 0x22
 800a9da:	f040 8098 	bne.w	800ab0e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a9ec:	b2d9      	uxtb	r1, r3
 800a9ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f8:	400a      	ands	r2, r1
 800a9fa:	b2d2      	uxtb	r2, r2
 800a9fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	3b01      	subs	r3, #1
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d17b      	bne.n	800ab1e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2e:	e853 3f00 	ldrex	r3, [r3]
 800aa32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	461a      	mov	r2, r3
 800aa42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa44:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e6      	bne.n	800aa26 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3308      	adds	r3, #8
 800aa5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	623b      	str	r3, [r7, #32]
   return(result);
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	f023 0301 	bic.w	r3, r3, #1
 800aa6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3308      	adds	r3, #8
 800aa76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa78:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e5      	bne.n	800aa58 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d12e      	bne.n	800ab06 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	e853 3f00 	ldrex	r3, [r3]
 800aaba:	60fb      	str	r3, [r7, #12]
   return(result);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f023 0310 	bic.w	r3, r3, #16
 800aac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aacc:	61fb      	str	r3, [r7, #28]
 800aace:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad0:	69b9      	ldr	r1, [r7, #24]
 800aad2:	69fa      	ldr	r2, [r7, #28]
 800aad4:	e841 2300 	strex	r3, r2, [r1]
 800aad8:	617b      	str	r3, [r7, #20]
   return(result);
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1e6      	bne.n	800aaae <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f003 0310 	and.w	r3, r3, #16
 800aaea:	2b10      	cmp	r3, #16
 800aaec:	d103      	bne.n	800aaf6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2210      	movs	r2, #16
 800aaf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff f9e4 	bl	8009ecc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab04:	e00b      	b.n	800ab1e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f00b ff02 	bl	8016910 <HAL_UART_RxCpltCallback>
}
 800ab0c:	e007      	b.n	800ab1e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	699a      	ldr	r2, [r3, #24]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f042 0208 	orr.w	r2, r2, #8
 800ab1c:	619a      	str	r2, [r3, #24]
}
 800ab1e:	bf00      	nop
 800ab20:	3758      	adds	r7, #88	@ 0x58
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b096      	sub	sp, #88	@ 0x58
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab34:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab3e:	2b22      	cmp	r3, #34	@ 0x22
 800ab40:	f040 8098 	bne.w	800ac74 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab52:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ab54:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800ab58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab68:	1c9a      	adds	r2, r3, #2
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d17b      	bne.n	800ac84 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab94:	e853 3f00 	ldrex	r3, [r3]
 800ab98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800abac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abb2:	e841 2300 	strex	r3, r2, [r1]
 800abb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1e6      	bne.n	800ab8c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	e853 3f00 	ldrex	r3, [r3]
 800abcc:	61fb      	str	r3, [r7, #28]
   return(result);
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3308      	adds	r3, #8
 800abdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abe6:	e841 2300 	strex	r3, r2, [r1]
 800abea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e5      	bne.n	800abbe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d12e      	bne.n	800ac6c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f023 0310 	bic.w	r3, r3, #16
 800ac28:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac32:	61bb      	str	r3, [r7, #24]
 800ac34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	6979      	ldr	r1, [r7, #20]
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e6      	bne.n	800ac14 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	69db      	ldr	r3, [r3, #28]
 800ac4c:	f003 0310 	and.w	r3, r3, #16
 800ac50:	2b10      	cmp	r3, #16
 800ac52:	d103      	bne.n	800ac5c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2210      	movs	r2, #16
 800ac5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff f931 	bl	8009ecc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac6a:	e00b      	b.n	800ac84 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f00b fe4f 	bl	8016910 <HAL_UART_RxCpltCallback>
}
 800ac72:	e007      	b.n	800ac84 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0208 	orr.w	r2, r2, #8
 800ac82:	619a      	str	r2, [r3, #24]
}
 800ac84:	bf00      	nop
 800ac86:	3758      	adds	r7, #88	@ 0x58
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	f107 001c 	add.w	r0, r7, #28
 800ac9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d120      	bne.n	800ace6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	4b20      	ldr	r3, [pc, #128]	@ (800ad38 <USB_CoreInit+0xac>)
 800acb6:	4013      	ands	r3, r2
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acca:	2b01      	cmp	r3, #1
 800accc:	d105      	bne.n	800acda <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa96 	bl	800b20c <USB_CoreReset>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
 800ace4:	e010      	b.n	800ad08 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa8a 	bl	800b20c <USB_CoreReset>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800ad08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d10b      	bne.n	800ad26 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	f043 0206 	orr.w	r2, r3, #6
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f043 0220 	orr.w	r2, r3, #32
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad32:	b004      	add	sp, #16
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	ffbdffbf 	.word	0xffbdffbf

0800ad3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f023 0201 	bic.w	r2, r3, #1
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d115      	bne.n	800adac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	f7f7 f809 	bl	8001da4 <HAL_Delay>
      ms++;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fa29 	bl	800b1f0 <USB_GetMode>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d01e      	beq.n	800ade2 <USB_SetCurrentMode+0x84>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b31      	cmp	r3, #49	@ 0x31
 800ada8:	d9f0      	bls.n	800ad8c <USB_SetCurrentMode+0x2e>
 800adaa:	e01a      	b.n	800ade2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d115      	bne.n	800adde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800adbe:	2001      	movs	r0, #1
 800adc0:	f7f6 fff0 	bl	8001da4 <HAL_Delay>
      ms++;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	3301      	adds	r3, #1
 800adc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fa10 	bl	800b1f0 <USB_GetMode>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d005      	beq.n	800ade2 <USB_SetCurrentMode+0x84>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b31      	cmp	r3, #49	@ 0x31
 800adda:	d9f0      	bls.n	800adbe <USB_SetCurrentMode+0x60>
 800addc:	e001      	b.n	800ade2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e005      	b.n	800adee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b32      	cmp	r3, #50	@ 0x32
 800ade6:	d101      	bne.n	800adec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e000      	b.n	800adee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
	...

0800adf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adf8:	b084      	sub	sp, #16
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b086      	sub	sp, #24
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ae06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae12:	2300      	movs	r3, #0
 800ae14:	613b      	str	r3, [r7, #16]
 800ae16:	e009      	b.n	800ae2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	3340      	adds	r3, #64	@ 0x40
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	2b0e      	cmp	r3, #14
 800ae30:	d9f2      	bls.n	800ae18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d11c      	bne.n	800ae72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae46:	f043 0302 	orr.w	r3, r3, #2
 800ae4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae50:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	e005      	b.n	800ae7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae84:	461a      	mov	r2, r3
 800ae86:	2300      	movs	r3, #0
 800ae88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae90:	4619      	mov	r1, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae98:	461a      	mov	r2, r3
 800ae9a:	680b      	ldr	r3, [r1, #0]
 800ae9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d10c      	bne.n	800aebe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d104      	bne.n	800aeb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f965 	bl	800b17c <USB_SetDevSpeed>
 800aeb2:	e008      	b.n	800aec6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f960 	bl	800b17c <USB_SetDevSpeed>
 800aebc:	e003      	b.n	800aec6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aebe:	2103      	movs	r1, #3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f95b 	bl	800b17c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aec6:	2110      	movs	r1, #16
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f8f3 	bl	800b0b4 <USB_FlushTxFifo>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f91f 	bl	800b11c <USB_FlushRxFifo>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeee:	461a      	mov	r2, r3
 800aef0:	2300      	movs	r3, #0
 800aef2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aefa:	461a      	mov	r2, r3
 800aefc:	2300      	movs	r3, #0
 800aefe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af06:	461a      	mov	r2, r3
 800af08:	2300      	movs	r3, #0
 800af0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af0c:	2300      	movs	r3, #0
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	e043      	b.n	800af9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af28:	d118      	bne.n	800af5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10a      	bne.n	800af46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af3c:	461a      	mov	r2, r3
 800af3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800af42:	6013      	str	r3, [r2, #0]
 800af44:	e013      	b.n	800af6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	015a      	lsls	r2, r3, #5
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	4413      	add	r3, r2
 800af4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af52:	461a      	mov	r2, r3
 800af54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800af58:	6013      	str	r3, [r2, #0]
 800af5a:	e008      	b.n	800af6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af68:	461a      	mov	r2, r3
 800af6a:	2300      	movs	r3, #0
 800af6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af7a:	461a      	mov	r2, r3
 800af7c:	2300      	movs	r3, #0
 800af7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af8c:	461a      	mov	r2, r3
 800af8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800af92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	3301      	adds	r3, #1
 800af98:	613b      	str	r3, [r7, #16]
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d3b7      	bcc.n	800af12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afa2:	2300      	movs	r3, #0
 800afa4:	613b      	str	r3, [r7, #16]
 800afa6:	e043      	b.n	800b030 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afbe:	d118      	bne.n	800aff2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd2:	461a      	mov	r2, r3
 800afd4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	e013      	b.n	800b004 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe8:	461a      	mov	r2, r3
 800afea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	e008      	b.n	800b004 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800affe:	461a      	mov	r2, r3
 800b000:	2300      	movs	r3, #0
 800b002:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b010:	461a      	mov	r2, r3
 800b012:	2300      	movs	r3, #0
 800b014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b022:	461a      	mov	r2, r3
 800b024:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b028:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	3301      	adds	r3, #1
 800b02e:	613b      	str	r3, [r7, #16]
 800b030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	429a      	cmp	r2, r3
 800b036:	d3b7      	bcc.n	800afa8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b04a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b058:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	f043 0210 	orr.w	r2, r3, #16
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	699a      	ldr	r2, [r3, #24]
 800b070:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <USB_DevInit+0x2b4>)
 800b072:	4313      	orrs	r3, r2
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d005      	beq.n	800b08a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	f043 0208 	orr.w	r2, r3, #8
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b08a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d105      	bne.n	800b09c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699a      	ldr	r2, [r3, #24]
 800b094:	4b06      	ldr	r3, [pc, #24]	@ (800b0b0 <USB_DevInit+0x2b8>)
 800b096:	4313      	orrs	r3, r2
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0a8:	b004      	add	sp, #16
 800b0aa:	4770      	bx	lr
 800b0ac:	803c3800 	.word	0x803c3800
 800b0b0:	40000004 	.word	0x40000004

0800b0b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a13      	ldr	r2, [pc, #76]	@ (800b118 <USB_FlushTxFifo+0x64>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d901      	bls.n	800b0d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e01b      	b.n	800b10c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	daf2      	bge.n	800b0c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	019b      	lsls	r3, r3, #6
 800b0e4:	f043 0220 	orr.w	r2, r3, #32
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4a08      	ldr	r2, [pc, #32]	@ (800b118 <USB_FlushTxFifo+0x64>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d901      	bls.n	800b0fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e006      	b.n	800b10c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b20      	cmp	r3, #32
 800b108:	d0f0      	beq.n	800b0ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	00030d40 	.word	0x00030d40

0800b11c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4a11      	ldr	r2, [pc, #68]	@ (800b178 <USB_FlushRxFifo+0x5c>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d901      	bls.n	800b13a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e018      	b.n	800b16c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	daf2      	bge.n	800b128 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2210      	movs	r2, #16
 800b14a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3301      	adds	r3, #1
 800b150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	4a08      	ldr	r2, [pc, #32]	@ (800b178 <USB_FlushRxFifo+0x5c>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d901      	bls.n	800b15e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e006      	b.n	800b16c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	f003 0310 	and.w	r3, r3, #16
 800b166:	2b10      	cmp	r3, #16
 800b168:	d0f0      	beq.n	800b14c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	00030d40 	.word	0x00030d40

0800b17c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	68f9      	ldr	r1, [r7, #12]
 800b198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b19c:	4313      	orrs	r3, r2
 800b19e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1c8:	f023 0303 	bic.w	r3, r3, #3
 800b1cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1dc:	f043 0302 	orr.w	r3, r3, #2
 800b1e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	f003 0301 	and.w	r3, r3, #1
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b214:	2300      	movs	r3, #0
 800b216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3301      	adds	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4a13      	ldr	r2, [pc, #76]	@ (800b270 <USB_CoreReset+0x64>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d901      	bls.n	800b22a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e01b      	b.n	800b262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	daf2      	bge.n	800b218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	f043 0201 	orr.w	r2, r3, #1
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	3301      	adds	r3, #1
 800b246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4a09      	ldr	r2, [pc, #36]	@ (800b270 <USB_CoreReset+0x64>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d901      	bls.n	800b254 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e006      	b.n	800b262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d0f0      	beq.n	800b242 <USB_CoreReset+0x36>

  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	00030d40 	.word	0x00030d40

0800b274 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b27a:	4b8d      	ldr	r3, [pc, #564]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b27c:	22c0      	movs	r2, #192	@ 0xc0
 800b27e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b280:	4b8b      	ldr	r3, [pc, #556]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b282:	22a8      	movs	r2, #168	@ 0xa8
 800b284:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 800b286:	4b8a      	ldr	r3, [pc, #552]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b288:	2207      	movs	r2, #7
 800b28a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800b28c:	4b88      	ldr	r3, [pc, #544]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b28e:	2202      	movs	r2, #2
 800b290:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b292:	4b88      	ldr	r3, [pc, #544]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b294:	22ff      	movs	r2, #255	@ 0xff
 800b296:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b298:	4b86      	ldr	r3, [pc, #536]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b29a:	22ff      	movs	r2, #255	@ 0xff
 800b29c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b29e:	4b85      	ldr	r3, [pc, #532]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b2a0:	22ff      	movs	r2, #255	@ 0xff
 800b2a2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b2a4:	4b83      	ldr	r3, [pc, #524]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b2aa:	4b83      	ldr	r3, [pc, #524]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b2ac:	22c0      	movs	r2, #192	@ 0xc0
 800b2ae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b2b0:	4b81      	ldr	r3, [pc, #516]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b2b2:	22a8      	movs	r2, #168	@ 0xa8
 800b2b4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 7;
 800b2b6:	4b80      	ldr	r3, [pc, #512]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b2b8:	2207      	movs	r2, #7
 800b2ba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b2bc:	4b7e      	ldr	r3, [pc, #504]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b2be:	2201      	movs	r2, #1
 800b2c0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800b2c2:	f000 fd25 	bl	800bd10 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b2c6:	4b7a      	ldr	r3, [pc, #488]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	061a      	lsls	r2, r3, #24
 800b2cc:	4b78      	ldr	r3, [pc, #480]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2ce:	785b      	ldrb	r3, [r3, #1]
 800b2d0:	041b      	lsls	r3, r3, #16
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	4b76      	ldr	r3, [pc, #472]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2d6:	789b      	ldrb	r3, [r3, #2]
 800b2d8:	021b      	lsls	r3, r3, #8
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	4a74      	ldr	r2, [pc, #464]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2de:	78d2      	ldrb	r2, [r2, #3]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	061a      	lsls	r2, r3, #24
 800b2e4:	4b72      	ldr	r3, [pc, #456]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	0619      	lsls	r1, r3, #24
 800b2ea:	4b71      	ldr	r3, [pc, #452]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2ec:	785b      	ldrb	r3, [r3, #1]
 800b2ee:	041b      	lsls	r3, r3, #16
 800b2f0:	4319      	orrs	r1, r3
 800b2f2:	4b6f      	ldr	r3, [pc, #444]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2f4:	789b      	ldrb	r3, [r3, #2]
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	496d      	ldr	r1, [pc, #436]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b2fc:	78c9      	ldrb	r1, [r1, #3]
 800b2fe:	430b      	orrs	r3, r1
 800b300:	021b      	lsls	r3, r3, #8
 800b302:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b306:	431a      	orrs	r2, r3
 800b308:	4b69      	ldr	r3, [pc, #420]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	0619      	lsls	r1, r3, #24
 800b30e:	4b68      	ldr	r3, [pc, #416]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b310:	785b      	ldrb	r3, [r3, #1]
 800b312:	041b      	lsls	r3, r3, #16
 800b314:	4319      	orrs	r1, r3
 800b316:	4b66      	ldr	r3, [pc, #408]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b318:	789b      	ldrb	r3, [r3, #2]
 800b31a:	021b      	lsls	r3, r3, #8
 800b31c:	430b      	orrs	r3, r1
 800b31e:	4964      	ldr	r1, [pc, #400]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b320:	78c9      	ldrb	r1, [r1, #3]
 800b322:	430b      	orrs	r3, r1
 800b324:	0a1b      	lsrs	r3, r3, #8
 800b326:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b32a:	431a      	orrs	r2, r3
 800b32c:	4b60      	ldr	r3, [pc, #384]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	0619      	lsls	r1, r3, #24
 800b332:	4b5f      	ldr	r3, [pc, #380]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	041b      	lsls	r3, r3, #16
 800b338:	4319      	orrs	r1, r3
 800b33a:	4b5d      	ldr	r3, [pc, #372]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b33c:	789b      	ldrb	r3, [r3, #2]
 800b33e:	021b      	lsls	r3, r3, #8
 800b340:	430b      	orrs	r3, r1
 800b342:	495b      	ldr	r1, [pc, #364]	@ (800b4b0 <MX_LWIP_Init+0x23c>)
 800b344:	78c9      	ldrb	r1, [r1, #3]
 800b346:	430b      	orrs	r3, r1
 800b348:	0e1b      	lsrs	r3, r3, #24
 800b34a:	4313      	orrs	r3, r2
 800b34c:	4a5b      	ldr	r2, [pc, #364]	@ (800b4bc <MX_LWIP_Init+0x248>)
 800b34e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b350:	4b58      	ldr	r3, [pc, #352]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	061a      	lsls	r2, r3, #24
 800b356:	4b57      	ldr	r3, [pc, #348]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b358:	785b      	ldrb	r3, [r3, #1]
 800b35a:	041b      	lsls	r3, r3, #16
 800b35c:	431a      	orrs	r2, r3
 800b35e:	4b55      	ldr	r3, [pc, #340]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b360:	789b      	ldrb	r3, [r3, #2]
 800b362:	021b      	lsls	r3, r3, #8
 800b364:	4313      	orrs	r3, r2
 800b366:	4a53      	ldr	r2, [pc, #332]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b368:	78d2      	ldrb	r2, [r2, #3]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	061a      	lsls	r2, r3, #24
 800b36e:	4b51      	ldr	r3, [pc, #324]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	0619      	lsls	r1, r3, #24
 800b374:	4b4f      	ldr	r3, [pc, #316]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b376:	785b      	ldrb	r3, [r3, #1]
 800b378:	041b      	lsls	r3, r3, #16
 800b37a:	4319      	orrs	r1, r3
 800b37c:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b37e:	789b      	ldrb	r3, [r3, #2]
 800b380:	021b      	lsls	r3, r3, #8
 800b382:	430b      	orrs	r3, r1
 800b384:	494b      	ldr	r1, [pc, #300]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b386:	78c9      	ldrb	r1, [r1, #3]
 800b388:	430b      	orrs	r3, r1
 800b38a:	021b      	lsls	r3, r3, #8
 800b38c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b390:	431a      	orrs	r2, r3
 800b392:	4b48      	ldr	r3, [pc, #288]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	0619      	lsls	r1, r3, #24
 800b398:	4b46      	ldr	r3, [pc, #280]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b39a:	785b      	ldrb	r3, [r3, #1]
 800b39c:	041b      	lsls	r3, r3, #16
 800b39e:	4319      	orrs	r1, r3
 800b3a0:	4b44      	ldr	r3, [pc, #272]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b3a2:	789b      	ldrb	r3, [r3, #2]
 800b3a4:	021b      	lsls	r3, r3, #8
 800b3a6:	430b      	orrs	r3, r1
 800b3a8:	4942      	ldr	r1, [pc, #264]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b3aa:	78c9      	ldrb	r1, [r1, #3]
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	0a1b      	lsrs	r3, r3, #8
 800b3b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	4b3f      	ldr	r3, [pc, #252]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	0619      	lsls	r1, r3, #24
 800b3bc:	4b3d      	ldr	r3, [pc, #244]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b3be:	785b      	ldrb	r3, [r3, #1]
 800b3c0:	041b      	lsls	r3, r3, #16
 800b3c2:	4319      	orrs	r1, r3
 800b3c4:	4b3b      	ldr	r3, [pc, #236]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b3c6:	789b      	ldrb	r3, [r3, #2]
 800b3c8:	021b      	lsls	r3, r3, #8
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	4939      	ldr	r1, [pc, #228]	@ (800b4b4 <MX_LWIP_Init+0x240>)
 800b3ce:	78c9      	ldrb	r1, [r1, #3]
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	0e1b      	lsrs	r3, r3, #24
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	4a3a      	ldr	r2, [pc, #232]	@ (800b4c0 <MX_LWIP_Init+0x24c>)
 800b3d8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b3da:	4b37      	ldr	r3, [pc, #220]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	061a      	lsls	r2, r3, #24
 800b3e0:	4b35      	ldr	r3, [pc, #212]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b3e2:	785b      	ldrb	r3, [r3, #1]
 800b3e4:	041b      	lsls	r3, r3, #16
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	4b33      	ldr	r3, [pc, #204]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b3ea:	789b      	ldrb	r3, [r3, #2]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	4a31      	ldr	r2, [pc, #196]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b3f2:	78d2      	ldrb	r2, [r2, #3]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	061a      	lsls	r2, r3, #24
 800b3f8:	4b2f      	ldr	r3, [pc, #188]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	0619      	lsls	r1, r3, #24
 800b3fe:	4b2e      	ldr	r3, [pc, #184]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b400:	785b      	ldrb	r3, [r3, #1]
 800b402:	041b      	lsls	r3, r3, #16
 800b404:	4319      	orrs	r1, r3
 800b406:	4b2c      	ldr	r3, [pc, #176]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b408:	789b      	ldrb	r3, [r3, #2]
 800b40a:	021b      	lsls	r3, r3, #8
 800b40c:	430b      	orrs	r3, r1
 800b40e:	492a      	ldr	r1, [pc, #168]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b410:	78c9      	ldrb	r1, [r1, #3]
 800b412:	430b      	orrs	r3, r1
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b41a:	431a      	orrs	r2, r3
 800b41c:	4b26      	ldr	r3, [pc, #152]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	0619      	lsls	r1, r3, #24
 800b422:	4b25      	ldr	r3, [pc, #148]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	041b      	lsls	r3, r3, #16
 800b428:	4319      	orrs	r1, r3
 800b42a:	4b23      	ldr	r3, [pc, #140]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b42c:	789b      	ldrb	r3, [r3, #2]
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	430b      	orrs	r3, r1
 800b432:	4921      	ldr	r1, [pc, #132]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b434:	78c9      	ldrb	r1, [r1, #3]
 800b436:	430b      	orrs	r3, r1
 800b438:	0a1b      	lsrs	r3, r3, #8
 800b43a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b43e:	431a      	orrs	r2, r3
 800b440:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	0619      	lsls	r1, r3, #24
 800b446:	4b1c      	ldr	r3, [pc, #112]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b448:	785b      	ldrb	r3, [r3, #1]
 800b44a:	041b      	lsls	r3, r3, #16
 800b44c:	4319      	orrs	r1, r3
 800b44e:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b450:	789b      	ldrb	r3, [r3, #2]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	430b      	orrs	r3, r1
 800b456:	4918      	ldr	r1, [pc, #96]	@ (800b4b8 <MX_LWIP_Init+0x244>)
 800b458:	78c9      	ldrb	r1, [r1, #3]
 800b45a:	430b      	orrs	r3, r1
 800b45c:	0e1b      	lsrs	r3, r3, #24
 800b45e:	4313      	orrs	r3, r2
 800b460:	4a18      	ldr	r2, [pc, #96]	@ (800b4c4 <MX_LWIP_Init+0x250>)
 800b462:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b464:	4b18      	ldr	r3, [pc, #96]	@ (800b4c8 <MX_LWIP_Init+0x254>)
 800b466:	9302      	str	r3, [sp, #8]
 800b468:	4b18      	ldr	r3, [pc, #96]	@ (800b4cc <MX_LWIP_Init+0x258>)
 800b46a:	9301      	str	r3, [sp, #4]
 800b46c:	2300      	movs	r3, #0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	4b14      	ldr	r3, [pc, #80]	@ (800b4c4 <MX_LWIP_Init+0x250>)
 800b472:	4a13      	ldr	r2, [pc, #76]	@ (800b4c0 <MX_LWIP_Init+0x24c>)
 800b474:	4911      	ldr	r1, [pc, #68]	@ (800b4bc <MX_LWIP_Init+0x248>)
 800b476:	4816      	ldr	r0, [pc, #88]	@ (800b4d0 <MX_LWIP_Init+0x25c>)
 800b478:	f001 f936 	bl	800c6e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b47c:	4814      	ldr	r0, [pc, #80]	@ (800b4d0 <MX_LWIP_Init+0x25c>)
 800b47e:	f001 fae5 	bl	800ca4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b482:	4b13      	ldr	r3, [pc, #76]	@ (800b4d0 <MX_LWIP_Init+0x25c>)
 800b484:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b488:	089b      	lsrs	r3, r3, #2
 800b48a:	f003 0301 	and.w	r3, r3, #1
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b494:	480e      	ldr	r0, [pc, #56]	@ (800b4d0 <MX_LWIP_Init+0x25c>)
 800b496:	f001 fae9 	bl	800ca6c <netif_set_up>
 800b49a:	e002      	b.n	800b4a2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b49c:	480c      	ldr	r0, [pc, #48]	@ (800b4d0 <MX_LWIP_Init+0x25c>)
 800b49e:	f001 fb51 	bl	800cb44 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b4a2:	490c      	ldr	r1, [pc, #48]	@ (800b4d4 <MX_LWIP_Init+0x260>)
 800b4a4:	480a      	ldr	r0, [pc, #40]	@ (800b4d0 <MX_LWIP_Init+0x25c>)
 800b4a6:	f001 fbe3 	bl	800cc70 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b4aa:	bf00      	nop
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	20000bf0 	.word	0x20000bf0
 800b4b4:	20000bf4 	.word	0x20000bf4
 800b4b8:	20000bf8 	.word	0x20000bf8
 800b4bc:	20000be4 	.word	0x20000be4
 800b4c0:	20000be8 	.word	0x20000be8
 800b4c4:	20000bec 	.word	0x20000bec
 800b4c8:	08015b25 	.word	0x08015b25
 800b4cc:	0800b7ed 	.word	0x0800b7ed
 800b4d0:	20000bb0 	.word	0x20000bb0
 800b4d4:	0800b4d9 	.word	0x0800b4d9

0800b4d8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <SCB_InvalidateDCache_by_Addr>:
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800b4fe:	2320      	movs	r3, #32
 800b500:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b502:	f3bf 8f4f 	dsb	sy
}
 800b506:	bf00      	nop
    while (op_size > 0) {
 800b508:	e00b      	b.n	800b522 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800b50a:	4a0d      	ldr	r2, [pc, #52]	@ (800b540 <SCB_InvalidateDCache_by_Addr+0x54>)
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	4413      	add	r3, r2
 800b518:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	dcf0      	bgt.n	800b50a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b528:	f3bf 8f4f 	dsb	sy
}
 800b52c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b52e:	f3bf 8f6f 	isb	sy
}
 800b532:	bf00      	nop
}
 800b534:	bf00      	nop
 800b536:	371c      	adds	r7, #28
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	e000ed00 	.word	0xe000ed00

0800b544 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b550:	4b40      	ldr	r3, [pc, #256]	@ (800b654 <low_level_init+0x110>)
 800b552:	4a41      	ldr	r2, [pc, #260]	@ (800b658 <low_level_init+0x114>)
 800b554:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b556:	2300      	movs	r3, #0
 800b558:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b55a:	2380      	movs	r3, #128	@ 0x80
 800b55c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b55e:	23e1      	movs	r3, #225	@ 0xe1
 800b560:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b562:	2300      	movs	r3, #0
 800b564:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b566:	2300      	movs	r3, #0
 800b568:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b56a:	2300      	movs	r3, #0
 800b56c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b56e:	4a39      	ldr	r2, [pc, #228]	@ (800b654 <low_level_init+0x110>)
 800b570:	f107 0308 	add.w	r3, r7, #8
 800b574:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b576:	4b37      	ldr	r3, [pc, #220]	@ (800b654 <low_level_init+0x110>)
 800b578:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b57c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b57e:	4b35      	ldr	r3, [pc, #212]	@ (800b654 <low_level_init+0x110>)
 800b580:	4a36      	ldr	r2, [pc, #216]	@ (800b65c <low_level_init+0x118>)
 800b582:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b584:	4b33      	ldr	r3, [pc, #204]	@ (800b654 <low_level_init+0x110>)
 800b586:	4a36      	ldr	r2, [pc, #216]	@ (800b660 <low_level_init+0x11c>)
 800b588:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b58a:	4b32      	ldr	r3, [pc, #200]	@ (800b654 <low_level_init+0x110>)
 800b58c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b590:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b592:	4830      	ldr	r0, [pc, #192]	@ (800b654 <low_level_init+0x110>)
 800b594:	f7f7 ff0a 	bl	80033ac <HAL_ETH_Init>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b59c:	2238      	movs	r2, #56	@ 0x38
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4830      	ldr	r0, [pc, #192]	@ (800b664 <low_level_init+0x120>)
 800b5a2:	f00b fc83 	bl	8016eac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b5a6:	4b2f      	ldr	r3, [pc, #188]	@ (800b664 <low_level_init+0x120>)
 800b5a8:	2221      	movs	r2, #33	@ 0x21
 800b5aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b5ac:	4b2d      	ldr	r3, [pc, #180]	@ (800b664 <low_level_init+0x120>)
 800b5ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800b5b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b5b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b664 <low_level_init+0x120>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b5ba:	482b      	ldr	r0, [pc, #172]	@ (800b668 <low_level_init+0x124>)
 800b5bc:	f000 ff5c 	bl	800c478 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2206      	movs	r2, #6
 800b5c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b5c8:	4b22      	ldr	r3, [pc, #136]	@ (800b654 <low_level_init+0x110>)
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	781a      	ldrb	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b5d4:	4b1f      	ldr	r3, [pc, #124]	@ (800b654 <low_level_init+0x110>)
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	785a      	ldrb	r2, [r3, #1]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b5e0:	4b1c      	ldr	r3, [pc, #112]	@ (800b654 <low_level_init+0x110>)
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	789a      	ldrb	r2, [r3, #2]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b5ec:	4b19      	ldr	r3, [pc, #100]	@ (800b654 <low_level_init+0x110>)
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	78da      	ldrb	r2, [r3, #3]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b5f8:	4b16      	ldr	r3, [pc, #88]	@ (800b654 <low_level_init+0x110>)
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	791a      	ldrb	r2, [r3, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b604:	4b13      	ldr	r3, [pc, #76]	@ (800b654 <low_level_init+0x110>)
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	795a      	ldrb	r2, [r3, #5]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b616:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b61e:	f043 030a 	orr.w	r3, r3, #10
 800b622:	b2da      	uxtb	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b62a:	4910      	ldr	r1, [pc, #64]	@ (800b66c <low_level_init+0x128>)
 800b62c:	4810      	ldr	r0, [pc, #64]	@ (800b670 <low_level_init+0x12c>)
 800b62e:	f7f6 f9fa 	bl	8001a26 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b632:	480f      	ldr	r0, [pc, #60]	@ (800b670 <low_level_init+0x12c>)
 800b634:	f7f6 fa29 	bl	8001a8a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d103      	bne.n	800b646 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fa3a 	bl	800bab8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b644:	e001      	b.n	800b64a <low_level_init+0x106>
    Error_Handler();
 800b646:	f7f5 fbf7 	bl	8000e38 <Error_Handler>
}
 800b64a:	bf00      	nop
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20005588 	.word	0x20005588
 800b658:	40028000 	.word	0x40028000
 800b65c:	20000128 	.word	0x20000128
 800b660:	20000088 	.word	0x20000088
 800b664:	20005638 	.word	0x20005638
 800b668:	0801acd4 	.word	0x0801acd4
 800b66c:	2000000c 	.word	0x2000000c
 800b670:	20005670 	.word	0x20005670

0800b674 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b092      	sub	sp, #72	@ 0x48
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b682:	2300      	movs	r3, #0
 800b684:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b68c:	f107 030c 	add.w	r3, r7, #12
 800b690:	2230      	movs	r2, #48	@ 0x30
 800b692:	2100      	movs	r1, #0
 800b694:	4618      	mov	r0, r3
 800b696:	f00b fc09 	bl	8016eac <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b69a:	f107 030c 	add.w	r3, r7, #12
 800b69e:	2230      	movs	r2, #48	@ 0x30
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f00b fc02 	bl	8016eac <memset>

  for(q = p; q != NULL; q = q->next)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6ac:	e045      	b.n	800b73a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d902      	bls.n	800b6ba <low_level_output+0x46>
      return ERR_IF;
 800b6b4:	f06f 030b 	mvn.w	r3, #11
 800b6b8:	e055      	b.n	800b766 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b6ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6bc:	6859      	ldr	r1, [r3, #4]
 800b6be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	4413      	add	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	3348      	adds	r3, #72	@ 0x48
 800b6ca:	443b      	add	r3, r7
 800b6cc:	3b3c      	subs	r3, #60	@ 0x3c
 800b6ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6d2:	895b      	ldrh	r3, [r3, #10]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6d8:	4613      	mov	r3, r2
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	4413      	add	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	3348      	adds	r3, #72	@ 0x48
 800b6e2:	443b      	add	r3, r7
 800b6e4:	3b38      	subs	r3, #56	@ 0x38
 800b6e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b6e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d011      	beq.n	800b712 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b6ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6f0:	1e5a      	subs	r2, r3, #1
 800b6f2:	f107 000c 	add.w	r0, r7, #12
 800b6f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	440b      	add	r3, r1
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	18c1      	adds	r1, r0, r3
 800b702:	4613      	mov	r3, r2
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	4413      	add	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	3348      	adds	r3, #72	@ 0x48
 800b70c:	443b      	add	r3, r7
 800b70e:	3b34      	subs	r3, #52	@ 0x34
 800b710:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d109      	bne.n	800b72e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b71a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b71c:	4613      	mov	r3, r2
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	3348      	adds	r3, #72	@ 0x48
 800b726:	443b      	add	r3, r7
 800b728:	3b34      	subs	r3, #52	@ 0x34
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b72e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b730:	3301      	adds	r3, #1
 800b732:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	643b      	str	r3, [r7, #64]	@ 0x40
 800b73a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1b6      	bne.n	800b6ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	891b      	ldrh	r3, [r3, #8]
 800b744:	461a      	mov	r2, r3
 800b746:	4b0a      	ldr	r3, [pc, #40]	@ (800b770 <low_level_output+0xfc>)
 800b748:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b74a:	4a09      	ldr	r2, [pc, #36]	@ (800b770 <low_level_output+0xfc>)
 800b74c:	f107 030c 	add.w	r3, r7, #12
 800b750:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b752:	4a07      	ldr	r2, [pc, #28]	@ (800b770 <low_level_output+0xfc>)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b758:	2214      	movs	r2, #20
 800b75a:	4905      	ldr	r1, [pc, #20]	@ (800b770 <low_level_output+0xfc>)
 800b75c:	4805      	ldr	r0, [pc, #20]	@ (800b774 <low_level_output+0x100>)
 800b75e:	f7f7 ff59 	bl	8003614 <HAL_ETH_Transmit>

  return errval;
 800b762:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b766:	4618      	mov	r0, r3
 800b768:	3748      	adds	r7, #72	@ 0x48
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20005638 	.word	0x20005638
 800b774:	20005588 	.word	0x20005588

0800b778 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b780:	2300      	movs	r3, #0
 800b782:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b784:	4b07      	ldr	r3, [pc, #28]	@ (800b7a4 <low_level_input+0x2c>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d105      	bne.n	800b798 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b78c:	f107 030c 	add.w	r3, r7, #12
 800b790:	4619      	mov	r1, r3
 800b792:	4805      	ldr	r0, [pc, #20]	@ (800b7a8 <low_level_input+0x30>)
 800b794:	f7f7 ffd2 	bl	800373c <HAL_ETH_ReadData>
  }

  return p;
 800b798:	68fb      	ldr	r3, [r7, #12]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20005584 	.word	0x20005584
 800b7a8:	20005588 	.word	0x20005588

0800b7ac <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff ffdd 	bl	800b778 <low_level_input>
 800b7be:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00a      	beq.n	800b7dc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	6879      	ldr	r1, [r7, #4]
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	4798      	blx	r3
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d002      	beq.n	800b7dc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f001 fdca 	bl	800d370 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1ea      	bne.n	800b7b8 <ethernetif_input+0xc>
}
 800b7e2:	bf00      	nop
 800b7e4:	bf00      	nop
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <ethernetif_init+0x1c>
 800b7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b834 <ethernetif_init+0x48>)
 800b7fc:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 800b800:	490d      	ldr	r1, [pc, #52]	@ (800b838 <ethernetif_init+0x4c>)
 800b802:	480e      	ldr	r0, [pc, #56]	@ (800b83c <ethernetif_init+0x50>)
 800b804:	f00b f9fa 	bl	8016bfc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2273      	movs	r2, #115	@ 0x73
 800b80c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2274      	movs	r2, #116	@ 0x74
 800b814:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a09      	ldr	r2, [pc, #36]	@ (800b840 <ethernetif_init+0x54>)
 800b81c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a08      	ldr	r2, [pc, #32]	@ (800b844 <ethernetif_init+0x58>)
 800b822:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fe8d 	bl	800b544 <low_level_init>

  return ERR_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	08017b74 	.word	0x08017b74
 800b838:	08017b90 	.word	0x08017b90
 800b83c:	08017ba0 	.word	0x08017ba0
 800b840:	08013fdd 	.word	0x08013fdd
 800b844:	0800b675 	.word	0x0800b675

0800b848 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b854:	68f9      	ldr	r1, [r7, #12]
 800b856:	4807      	ldr	r0, [pc, #28]	@ (800b874 <pbuf_free_custom+0x2c>)
 800b858:	f000 fef0 	bl	800c63c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b85c:	4b06      	ldr	r3, [pc, #24]	@ (800b878 <pbuf_free_custom+0x30>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d102      	bne.n	800b86a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b864:	4b04      	ldr	r3, [pc, #16]	@ (800b878 <pbuf_free_custom+0x30>)
 800b866:	2200      	movs	r2, #0
 800b868:	701a      	strb	r2, [r3, #0]
  }
}
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	0801acd4 	.word	0x0801acd4
 800b878:	20005584 	.word	0x20005584

0800b87c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b880:	f7f6 fa84 	bl	8001d8c <HAL_GetTick>
 800b884:	4603      	mov	r3, r0
}
 800b886:	4618      	mov	r0, r3
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08e      	sub	sp, #56	@ 0x38
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	605a      	str	r2, [r3, #4]
 800b89e:	609a      	str	r2, [r3, #8]
 800b8a0:	60da      	str	r2, [r3, #12]
 800b8a2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a56      	ldr	r2, [pc, #344]	@ (800ba04 <HAL_ETH_MspInit+0x178>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	f040 80a6 	bne.w	800b9fc <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b8b0:	4b55      	ldr	r3, [pc, #340]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b4:	4a54      	ldr	r2, [pc, #336]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b8ba:	6313      	str	r3, [r2, #48]	@ 0x30
 800b8bc:	4b52      	ldr	r3, [pc, #328]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8c4:	623b      	str	r3, [r7, #32]
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	4b4f      	ldr	r3, [pc, #316]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8cc:	4a4e      	ldr	r2, [pc, #312]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8d2:	6313      	str	r3, [r2, #48]	@ 0x30
 800b8d4:	4b4c      	ldr	r3, [pc, #304]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b8dc:	61fb      	str	r3, [r7, #28]
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	4b49      	ldr	r3, [pc, #292]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8e4:	4a48      	ldr	r2, [pc, #288]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b8ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800b8ec:	4b46      	ldr	r3, [pc, #280]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8f4:	61bb      	str	r3, [r7, #24]
 800b8f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b8f8:	4b43      	ldr	r3, [pc, #268]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8fc:	4a42      	ldr	r2, [pc, #264]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b8fe:	f043 0304 	orr.w	r3, r3, #4
 800b902:	6313      	str	r3, [r2, #48]	@ 0x30
 800b904:	4b40      	ldr	r3, [pc, #256]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	617b      	str	r3, [r7, #20]
 800b90e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b910:	4b3d      	ldr	r3, [pc, #244]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b914:	4a3c      	ldr	r2, [pc, #240]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b916:	f043 0301 	orr.w	r3, r3, #1
 800b91a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b91c:	4b3a      	ldr	r3, [pc, #232]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	613b      	str	r3, [r7, #16]
 800b926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b928:	4b37      	ldr	r3, [pc, #220]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b92c:	4a36      	ldr	r2, [pc, #216]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b92e:	f043 0302 	orr.w	r3, r3, #2
 800b932:	6313      	str	r3, [r2, #48]	@ 0x30
 800b934:	4b34      	ldr	r3, [pc, #208]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b938:	f003 0302 	and.w	r3, r3, #2
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b940:	4b31      	ldr	r3, [pc, #196]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b944:	4a30      	ldr	r2, [pc, #192]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b94a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b94c:	4b2e      	ldr	r3, [pc, #184]	@ (800ba08 <HAL_ETH_MspInit+0x17c>)
 800b94e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b954:	60bb      	str	r3, [r7, #8]
 800b956:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b958:	2332      	movs	r3, #50	@ 0x32
 800b95a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b95c:	2302      	movs	r3, #2
 800b95e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b960:	2300      	movs	r3, #0
 800b962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b964:	2303      	movs	r3, #3
 800b966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b968:	230b      	movs	r3, #11
 800b96a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b96c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b970:	4619      	mov	r1, r3
 800b972:	4826      	ldr	r0, [pc, #152]	@ (800ba0c <HAL_ETH_MspInit+0x180>)
 800b974:	f7f8 ff00 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b978:	2386      	movs	r3, #134	@ 0x86
 800b97a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b97c:	2302      	movs	r3, #2
 800b97e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b980:	2300      	movs	r3, #0
 800b982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b984:	2303      	movs	r3, #3
 800b986:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b988:	230b      	movs	r3, #11
 800b98a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b98c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b990:	4619      	mov	r1, r3
 800b992:	481f      	ldr	r0, [pc, #124]	@ (800ba10 <HAL_ETH_MspInit+0x184>)
 800b994:	f7f8 fef0 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b99c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b99e:	2302      	movs	r3, #2
 800b9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b9aa:	230b      	movs	r3, #11
 800b9ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b9ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4817      	ldr	r0, [pc, #92]	@ (800ba14 <HAL_ETH_MspInit+0x188>)
 800b9b6:	f7f8 fedf 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b9ba:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b9be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b9cc:	230b      	movs	r3, #11
 800b9ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b9d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4810      	ldr	r0, [pc, #64]	@ (800ba18 <HAL_ETH_MspInit+0x18c>)
 800b9d8:	f7f8 fece 	bl	8004778 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2100      	movs	r1, #0
 800b9e0:	203d      	movs	r0, #61	@ 0x3d
 800b9e2:	f7f7 f844 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b9e6:	203d      	movs	r0, #61	@ 0x3d
 800b9e8:	f7f7 f85d 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	203e      	movs	r0, #62	@ 0x3e
 800b9f2:	f7f7 f83c 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800b9f6:	203e      	movs	r0, #62	@ 0x3e
 800b9f8:	f7f7 f855 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b9fc:	bf00      	nop
 800b9fe:	3738      	adds	r7, #56	@ 0x38
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	40028000 	.word	0x40028000
 800ba08:	40023800 	.word	0x40023800
 800ba0c:	40020800 	.word	0x40020800
 800ba10:	40020000 	.word	0x40020000
 800ba14:	40020400 	.word	0x40020400
 800ba18:	40021800 	.word	0x40021800

0800ba1c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ba20:	4802      	ldr	r0, [pc, #8]	@ (800ba2c <ETH_PHY_IO_Init+0x10>)
 800ba22:	f7f8 fa4f 	bl	8003ec4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	20005588 	.word	0x20005588

0800ba30 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	af00      	add	r7, sp, #0
  return 0;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	68f9      	ldr	r1, [r7, #12]
 800ba52:	4807      	ldr	r0, [pc, #28]	@ (800ba70 <ETH_PHY_IO_ReadReg+0x30>)
 800ba54:	f7f8 f89e 	bl	8003b94 <HAL_ETH_ReadPHYRegister>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ba5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba62:	e000      	b.n	800ba66 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20005588 	.word	0x20005588

0800ba74 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	68f9      	ldr	r1, [r7, #12]
 800ba86:	4807      	ldr	r0, [pc, #28]	@ (800baa4 <ETH_PHY_IO_WriteReg+0x30>)
 800ba88:	f7f8 f8cf 	bl	8003c2a <HAL_ETH_WritePHYRegister>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d002      	beq.n	800ba98 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ba92:	f04f 33ff 	mov.w	r3, #4294967295
 800ba96:	e000      	b.n	800ba9a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	20005588 	.word	0x20005588

0800baa8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800baac:	f7f6 f96e 	bl	8001d8c <HAL_GetTick>
 800bab0:	4603      	mov	r3, r0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b0a0      	sub	sp, #128	@ 0x80
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800bac0:	f107 030c 	add.w	r3, r7, #12
 800bac4:	2264      	movs	r2, #100	@ 0x64
 800bac6:	2100      	movs	r1, #0
 800bac8:	4618      	mov	r0, r3
 800baca:	f00b f9ef 	bl	8016eac <memset>
  int32_t PHYLinkState = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800bad2:	2300      	movs	r3, #0
 800bad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bad6:	2300      	movs	r3, #0
 800bad8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bada:	2300      	movs	r3, #0
 800badc:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bade:	483a      	ldr	r0, [pc, #232]	@ (800bbc8 <ethernet_link_check_state+0x110>)
 800bae0:	f7f6 f87b 	bl	8001bda <LAN8742_GetLinkState>
 800bae4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800baec:	089b      	lsrs	r3, r3, #2
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00c      	beq.n	800bb12 <ethernet_link_check_state+0x5a>
 800baf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	dc09      	bgt.n	800bb12 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800bafe:	4833      	ldr	r0, [pc, #204]	@ (800bbcc <ethernet_link_check_state+0x114>)
 800bb00:	f7f7 fd2f 	bl	8003562 <HAL_ETH_Stop>
    netif_set_down(netif);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f001 f81d 	bl	800cb44 <netif_set_down>
    netif_set_link_down(netif);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 f880 	bl	800cc10 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800bb10:	e055      	b.n	800bbbe <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb18:	f003 0304 	and.w	r3, r3, #4
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d14e      	bne.n	800bbbe <ethernet_link_check_state+0x106>
 800bb20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	dd4b      	ble.n	800bbbe <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800bb26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb28:	3b02      	subs	r3, #2
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d82a      	bhi.n	800bb84 <ethernet_link_check_state+0xcc>
 800bb2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb34 <ethernet_link_check_state+0x7c>)
 800bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb34:	0800bb45 	.word	0x0800bb45
 800bb38:	0800bb57 	.word	0x0800bb57
 800bb3c:	0800bb67 	.word	0x0800bb67
 800bb40:	0800bb77 	.word	0x0800bb77
      duplex = ETH_FULLDUPLEX_MODE;
 800bb44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb48:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bb4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb4e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bb50:	2301      	movs	r3, #1
 800bb52:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bb54:	e017      	b.n	800bb86 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bb56:	2300      	movs	r3, #0
 800bb58:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bb5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb5e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bb60:	2301      	movs	r3, #1
 800bb62:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bb64:	e00f      	b.n	800bb86 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800bb66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb6a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bb70:	2301      	movs	r3, #1
 800bb72:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bb74:	e007      	b.n	800bb86 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bb82:	e000      	b.n	800bb86 <ethernet_link_check_state+0xce>
      break;
 800bb84:	bf00      	nop
    if(linkchanged)
 800bb86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d018      	beq.n	800bbbe <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bb8c:	f107 030c 	add.w	r3, r7, #12
 800bb90:	4619      	mov	r1, r3
 800bb92:	480e      	ldr	r0, [pc, #56]	@ (800bbcc <ethernet_link_check_state+0x114>)
 800bb94:	f7f8 f892 	bl	8003cbc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bb98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb9a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800bb9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb9e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bba0:	f107 030c 	add.w	r3, r7, #12
 800bba4:	4619      	mov	r1, r3
 800bba6:	4809      	ldr	r0, [pc, #36]	@ (800bbcc <ethernet_link_check_state+0x114>)
 800bba8:	f7f8 f972 	bl	8003e90 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800bbac:	4807      	ldr	r0, [pc, #28]	@ (800bbcc <ethernet_link_check_state+0x114>)
 800bbae:	f7f7 fc79 	bl	80034a4 <HAL_ETH_Start>
      netif_set_up(netif);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 ff5a 	bl	800ca6c <netif_set_up>
      netif_set_link_up(netif);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fff5 	bl	800cba8 <netif_set_link_up>
}
 800bbbe:	bf00      	nop
 800bbc0:	3780      	adds	r7, #128	@ 0x80
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20005670 	.word	0x20005670
 800bbcc:	20005588 	.word	0x20005588

0800bbd0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bbd8:	4812      	ldr	r0, [pc, #72]	@ (800bc24 <HAL_ETH_RxAllocateCallback+0x54>)
 800bbda:	f000 fcc1 	bl	800c560 <memp_malloc_pool>
 800bbde:	60f8      	str	r0, [r7, #12]
  if (p)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d014      	beq.n	800bc10 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f103 0220 	add.w	r2, r3, #32
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4a0d      	ldr	r2, [pc, #52]	@ (800bc28 <HAL_ETH_RxAllocateCallback+0x58>)
 800bbf4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bbfe:	9201      	str	r2, [sp, #4]
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2241      	movs	r2, #65	@ 0x41
 800bc06:	2100      	movs	r1, #0
 800bc08:	2000      	movs	r0, #0
 800bc0a:	f001 f9f7 	bl	800cffc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bc0e:	e005      	b.n	800bc1c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bc10:	4b06      	ldr	r3, [pc, #24]	@ (800bc2c <HAL_ETH_RxAllocateCallback+0x5c>)
 800bc12:	2201      	movs	r2, #1
 800bc14:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	601a      	str	r2, [r3, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	0801acd4 	.word	0x0801acd4
 800bc28:	0800b849 	.word	0x0800b849
 800bc2c:	20005584 	.word	0x20005584

0800bc30 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bc46:	2300      	movs	r3, #0
 800bc48:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3b20      	subs	r3, #32
 800bc4e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	887a      	ldrh	r2, [r7, #2]
 800bc60:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d103      	bne.n	800bc72 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	69fa      	ldr	r2, [r7, #28]
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	e003      	b.n	800bc7a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	69fa      	ldr	r2, [r7, #28]
 800bc78:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	69fa      	ldr	r2, [r7, #28]
 800bc7e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	e009      	b.n	800bc9c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	891a      	ldrh	r2, [r3, #8]
 800bc8c:	887b      	ldrh	r3, [r7, #2]
 800bc8e:	4413      	add	r3, r2
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1f2      	bne.n	800bc88 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800bca2:	887b      	ldrh	r3, [r7, #2]
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7ff fc20 	bl	800b4ec <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bcac:	bf00      	nop
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	021b      	lsls	r3, r3, #8
 800bcc2:	b21a      	sxth	r2, r3
 800bcc4:	88fb      	ldrh	r3, [r7, #6]
 800bcc6:	0a1b      	lsrs	r3, r3, #8
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	b21b      	sxth	r3, r3
 800bccc:	4313      	orrs	r3, r2
 800bcce:	b21b      	sxth	r3, r3
 800bcd0:	b29b      	uxth	r3, r3
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	061a      	lsls	r2, r3, #24
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	021b      	lsls	r3, r3, #8
 800bcee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	0a1b      	lsrs	r3, r3, #8
 800bcf8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	0e1b      	lsrs	r3, r3, #24
 800bd02:	4313      	orrs	r3, r2
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800bd1a:	f000 f8d5 	bl	800bec8 <mem_init>
  memp_init();
 800bd1e:	f000 fbdb 	bl	800c4d8 <memp_init>
  pbuf_init();
  netif_init();
 800bd22:	f000 fcd9 	bl	800c6d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bd26:	f007 f863 	bl	8012df0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bd2a:	f001 fdbf 	bl	800d8ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bd2e:	f006 ffd5 	bl	8012cdc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bd32:	bf00      	nop
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bd46:	4b05      	ldr	r3, [pc, #20]	@ (800bd5c <ptr_to_mem+0x20>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	4413      	add	r3, r2
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	20005cfc 	.word	0x20005cfc

0800bd60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bd68:	4b05      	ldr	r3, [pc, #20]	@ (800bd80 <mem_to_ptr+0x20>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	b29b      	uxth	r3, r3
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	20005cfc 	.word	0x20005cfc

0800bd84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bd84:	b590      	push	{r4, r7, lr}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bd8c:	4b45      	ldr	r3, [pc, #276]	@ (800bea4 <plug_holes+0x120>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d206      	bcs.n	800bda4 <plug_holes+0x20>
 800bd96:	4b44      	ldr	r3, [pc, #272]	@ (800bea8 <plug_holes+0x124>)
 800bd98:	f240 12df 	movw	r2, #479	@ 0x1df
 800bd9c:	4943      	ldr	r1, [pc, #268]	@ (800beac <plug_holes+0x128>)
 800bd9e:	4844      	ldr	r0, [pc, #272]	@ (800beb0 <plug_holes+0x12c>)
 800bda0:	f00a ff2c 	bl	8016bfc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bda4:	4b43      	ldr	r3, [pc, #268]	@ (800beb4 <plug_holes+0x130>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d306      	bcc.n	800bdbc <plug_holes+0x38>
 800bdae:	4b3e      	ldr	r3, [pc, #248]	@ (800bea8 <plug_holes+0x124>)
 800bdb0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800bdb4:	4940      	ldr	r1, [pc, #256]	@ (800beb8 <plug_holes+0x134>)
 800bdb6:	483e      	ldr	r0, [pc, #248]	@ (800beb0 <plug_holes+0x12c>)
 800bdb8:	f00a ff20 	bl	8016bfc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	791b      	ldrb	r3, [r3, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d006      	beq.n	800bdd2 <plug_holes+0x4e>
 800bdc4:	4b38      	ldr	r3, [pc, #224]	@ (800bea8 <plug_holes+0x124>)
 800bdc6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bdca:	493c      	ldr	r1, [pc, #240]	@ (800bebc <plug_holes+0x138>)
 800bdcc:	4838      	ldr	r0, [pc, #224]	@ (800beb0 <plug_holes+0x12c>)
 800bdce:	f00a ff15 	bl	8016bfc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bdda:	d906      	bls.n	800bdea <plug_holes+0x66>
 800bddc:	4b32      	ldr	r3, [pc, #200]	@ (800bea8 <plug_holes+0x124>)
 800bdde:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800bde2:	4937      	ldr	r1, [pc, #220]	@ (800bec0 <plug_holes+0x13c>)
 800bde4:	4832      	ldr	r0, [pc, #200]	@ (800beb0 <plug_holes+0x12c>)
 800bde6:	f00a ff09 	bl	8016bfc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff ffa4 	bl	800bd3c <ptr_to_mem>
 800bdf4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d024      	beq.n	800be48 <plug_holes+0xc4>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	791b      	ldrb	r3, [r3, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d120      	bne.n	800be48 <plug_holes+0xc4>
 800be06:	4b2b      	ldr	r3, [pc, #172]	@ (800beb4 <plug_holes+0x130>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d01b      	beq.n	800be48 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800be10:	4b2c      	ldr	r3, [pc, #176]	@ (800bec4 <plug_holes+0x140>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	429a      	cmp	r2, r3
 800be18:	d102      	bne.n	800be20 <plug_holes+0x9c>
      lfree = mem;
 800be1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bec4 <plug_holes+0x140>)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	881a      	ldrh	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be30:	d00a      	beq.n	800be48 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff ff80 	bl	800bd3c <ptr_to_mem>
 800be3c:	4604      	mov	r4, r0
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff ff8e 	bl	800bd60 <mem_to_ptr>
 800be44:	4603      	mov	r3, r0
 800be46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	885b      	ldrh	r3, [r3, #2]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff ff75 	bl	800bd3c <ptr_to_mem>
 800be52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d01f      	beq.n	800be9c <plug_holes+0x118>
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	791b      	ldrb	r3, [r3, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d11b      	bne.n	800be9c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800be64:	4b17      	ldr	r3, [pc, #92]	@ (800bec4 <plug_holes+0x140>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d102      	bne.n	800be74 <plug_holes+0xf0>
      lfree = pmem;
 800be6e:	4a15      	ldr	r2, [pc, #84]	@ (800bec4 <plug_holes+0x140>)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	881a      	ldrh	r2, [r3, #0]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be84:	d00a      	beq.n	800be9c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff ff56 	bl	800bd3c <ptr_to_mem>
 800be90:	4604      	mov	r4, r0
 800be92:	68b8      	ldr	r0, [r7, #8]
 800be94:	f7ff ff64 	bl	800bd60 <mem_to_ptr>
 800be98:	4603      	mov	r3, r0
 800be9a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800be9c:	bf00      	nop
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd90      	pop	{r4, r7, pc}
 800bea4:	20005cfc 	.word	0x20005cfc
 800bea8:	08017bc8 	.word	0x08017bc8
 800beac:	08017bf8 	.word	0x08017bf8
 800beb0:	08017c10 	.word	0x08017c10
 800beb4:	20005d00 	.word	0x20005d00
 800beb8:	08017c38 	.word	0x08017c38
 800bebc:	08017c54 	.word	0x08017c54
 800bec0:	08017c70 	.word	0x08017c70
 800bec4:	20005d04 	.word	0x20005d04

0800bec8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bece:	4b18      	ldr	r3, [pc, #96]	@ (800bf30 <mem_init+0x68>)
 800bed0:	3303      	adds	r3, #3
 800bed2:	f023 0303 	bic.w	r3, r3, #3
 800bed6:	461a      	mov	r2, r3
 800bed8:	4b16      	ldr	r3, [pc, #88]	@ (800bf34 <mem_init+0x6c>)
 800beda:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bedc:	4b15      	ldr	r3, [pc, #84]	@ (800bf34 <mem_init+0x6c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800bee8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bef6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800befa:	f7ff ff1f 	bl	800bd3c <ptr_to_mem>
 800befe:	4603      	mov	r3, r0
 800bf00:	4a0d      	ldr	r2, [pc, #52]	@ (800bf38 <mem_init+0x70>)
 800bf02:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bf04:	4b0c      	ldr	r3, [pc, #48]	@ (800bf38 <mem_init+0x70>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf38 <mem_init+0x70>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800bf14:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bf16:	4b08      	ldr	r3, [pc, #32]	@ (800bf38 <mem_init+0x70>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800bf1e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bf20:	4b04      	ldr	r3, [pc, #16]	@ (800bf34 <mem_init+0x6c>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a05      	ldr	r2, [pc, #20]	@ (800bf3c <mem_init+0x74>)
 800bf26:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	200056a8 	.word	0x200056a8
 800bf34:	20005cfc 	.word	0x20005cfc
 800bf38:	20005d00 	.word	0x20005d00
 800bf3c:	20005d04 	.word	0x20005d04

0800bf40 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff ff09 	bl	800bd60 <mem_to_ptr>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff fef0 	bl	800bd3c <ptr_to_mem>
 800bf5c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff feea 	bl	800bd3c <ptr_to_mem>
 800bf68:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bf72:	d818      	bhi.n	800bfa6 <mem_link_valid+0x66>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	885b      	ldrh	r3, [r3, #2]
 800bf78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bf7c:	d813      	bhi.n	800bfa6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bf82:	8afa      	ldrh	r2, [r7, #22]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d004      	beq.n	800bf92 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	8afa      	ldrh	r2, [r7, #22]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d109      	bne.n	800bfa6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bf92:	4b08      	ldr	r3, [pc, #32]	@ (800bfb4 <mem_link_valid+0x74>)
 800bf94:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d006      	beq.n	800bfaa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	885b      	ldrh	r3, [r3, #2]
 800bfa0:	8afa      	ldrh	r2, [r7, #22]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d001      	beq.n	800bfaa <mem_link_valid+0x6a>
    return 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e000      	b.n	800bfac <mem_link_valid+0x6c>
  }
  return 1;
 800bfaa:	2301      	movs	r3, #1
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20005d00 	.word	0x20005d00

0800bfb8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d04c      	beq.n	800c060 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f003 0303 	and.w	r3, r3, #3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d007      	beq.n	800bfe0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bfd0:	4b25      	ldr	r3, [pc, #148]	@ (800c068 <mem_free+0xb0>)
 800bfd2:	f240 2273 	movw	r2, #627	@ 0x273
 800bfd6:	4925      	ldr	r1, [pc, #148]	@ (800c06c <mem_free+0xb4>)
 800bfd8:	4825      	ldr	r0, [pc, #148]	@ (800c070 <mem_free+0xb8>)
 800bfda:	f00a fe0f 	bl	8016bfc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bfde:	e040      	b.n	800c062 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3b08      	subs	r3, #8
 800bfe4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bfe6:	4b23      	ldr	r3, [pc, #140]	@ (800c074 <mem_free+0xbc>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d306      	bcc.n	800bffe <mem_free+0x46>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f103 020c 	add.w	r2, r3, #12
 800bff6:	4b20      	ldr	r3, [pc, #128]	@ (800c078 <mem_free+0xc0>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d907      	bls.n	800c00e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bffe:	4b1a      	ldr	r3, [pc, #104]	@ (800c068 <mem_free+0xb0>)
 800c000:	f240 227f 	movw	r2, #639	@ 0x27f
 800c004:	491d      	ldr	r1, [pc, #116]	@ (800c07c <mem_free+0xc4>)
 800c006:	481a      	ldr	r0, [pc, #104]	@ (800c070 <mem_free+0xb8>)
 800c008:	f00a fdf8 	bl	8016bfc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c00c:	e029      	b.n	800c062 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	791b      	ldrb	r3, [r3, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d107      	bne.n	800c026 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c016:	4b14      	ldr	r3, [pc, #80]	@ (800c068 <mem_free+0xb0>)
 800c018:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c01c:	4918      	ldr	r1, [pc, #96]	@ (800c080 <mem_free+0xc8>)
 800c01e:	4814      	ldr	r0, [pc, #80]	@ (800c070 <mem_free+0xb8>)
 800c020:	f00a fdec 	bl	8016bfc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c024:	e01d      	b.n	800c062 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f7ff ff8a 	bl	800bf40 <mem_link_valid>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d107      	bne.n	800c042 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c032:	4b0d      	ldr	r3, [pc, #52]	@ (800c068 <mem_free+0xb0>)
 800c034:	f240 2295 	movw	r2, #661	@ 0x295
 800c038:	4912      	ldr	r1, [pc, #72]	@ (800c084 <mem_free+0xcc>)
 800c03a:	480d      	ldr	r0, [pc, #52]	@ (800c070 <mem_free+0xb8>)
 800c03c:	f00a fdde 	bl	8016bfc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c040:	e00f      	b.n	800c062 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c048:	4b0f      	ldr	r3, [pc, #60]	@ (800c088 <mem_free+0xd0>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d202      	bcs.n	800c058 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c052:	4a0d      	ldr	r2, [pc, #52]	@ (800c088 <mem_free+0xd0>)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f7ff fe93 	bl	800bd84 <plug_holes>
 800c05e:	e000      	b.n	800c062 <mem_free+0xaa>
    return;
 800c060:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	08017bc8 	.word	0x08017bc8
 800c06c:	08017c9c 	.word	0x08017c9c
 800c070:	08017c10 	.word	0x08017c10
 800c074:	20005cfc 	.word	0x20005cfc
 800c078:	20005d00 	.word	0x20005d00
 800c07c:	08017cc0 	.word	0x08017cc0
 800c080:	08017cdc 	.word	0x08017cdc
 800c084:	08017d04 	.word	0x08017d04
 800c088:	20005d04 	.word	0x20005d04

0800c08c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b088      	sub	sp, #32
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c098:	887b      	ldrh	r3, [r7, #2]
 800c09a:	3303      	adds	r3, #3
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	f023 0303 	bic.w	r3, r3, #3
 800c0a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c0a4:	8bfb      	ldrh	r3, [r7, #30]
 800c0a6:	2b0b      	cmp	r3, #11
 800c0a8:	d801      	bhi.n	800c0ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c0aa:	230c      	movs	r3, #12
 800c0ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c0ae:	8bfb      	ldrh	r3, [r7, #30]
 800c0b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c0b4:	d803      	bhi.n	800c0be <mem_trim+0x32>
 800c0b6:	8bfa      	ldrh	r2, [r7, #30]
 800c0b8:	887b      	ldrh	r3, [r7, #2]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d201      	bcs.n	800c0c2 <mem_trim+0x36>
    return NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e0cc      	b.n	800c25c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c0c2:	4b68      	ldr	r3, [pc, #416]	@ (800c264 <mem_trim+0x1d8>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d304      	bcc.n	800c0d6 <mem_trim+0x4a>
 800c0cc:	4b66      	ldr	r3, [pc, #408]	@ (800c268 <mem_trim+0x1dc>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d306      	bcc.n	800c0e4 <mem_trim+0x58>
 800c0d6:	4b65      	ldr	r3, [pc, #404]	@ (800c26c <mem_trim+0x1e0>)
 800c0d8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c0dc:	4964      	ldr	r1, [pc, #400]	@ (800c270 <mem_trim+0x1e4>)
 800c0de:	4865      	ldr	r0, [pc, #404]	@ (800c274 <mem_trim+0x1e8>)
 800c0e0:	f00a fd8c 	bl	8016bfc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c0e4:	4b5f      	ldr	r3, [pc, #380]	@ (800c264 <mem_trim+0x1d8>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d304      	bcc.n	800c0f8 <mem_trim+0x6c>
 800c0ee:	4b5e      	ldr	r3, [pc, #376]	@ (800c268 <mem_trim+0x1dc>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d301      	bcc.n	800c0fc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	e0af      	b.n	800c25c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3b08      	subs	r3, #8
 800c100:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c102:	69b8      	ldr	r0, [r7, #24]
 800c104:	f7ff fe2c 	bl	800bd60 <mem_to_ptr>
 800c108:	4603      	mov	r3, r0
 800c10a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	881a      	ldrh	r2, [r3, #0]
 800c110:	8afb      	ldrh	r3, [r7, #22]
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	b29b      	uxth	r3, r3
 800c116:	3b08      	subs	r3, #8
 800c118:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c11a:	8bfa      	ldrh	r2, [r7, #30]
 800c11c:	8abb      	ldrh	r3, [r7, #20]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d906      	bls.n	800c130 <mem_trim+0xa4>
 800c122:	4b52      	ldr	r3, [pc, #328]	@ (800c26c <mem_trim+0x1e0>)
 800c124:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c128:	4953      	ldr	r1, [pc, #332]	@ (800c278 <mem_trim+0x1ec>)
 800c12a:	4852      	ldr	r0, [pc, #328]	@ (800c274 <mem_trim+0x1e8>)
 800c12c:	f00a fd66 	bl	8016bfc <iprintf>
  if (newsize > size) {
 800c130:	8bfa      	ldrh	r2, [r7, #30]
 800c132:	8abb      	ldrh	r3, [r7, #20]
 800c134:	429a      	cmp	r2, r3
 800c136:	d901      	bls.n	800c13c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c138:	2300      	movs	r3, #0
 800c13a:	e08f      	b.n	800c25c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c13c:	8bfa      	ldrh	r2, [r7, #30]
 800c13e:	8abb      	ldrh	r3, [r7, #20]
 800c140:	429a      	cmp	r2, r3
 800c142:	d101      	bne.n	800c148 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	e089      	b.n	800c25c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff fdf5 	bl	800bd3c <ptr_to_mem>
 800c152:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	791b      	ldrb	r3, [r3, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d13f      	bne.n	800c1dc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c164:	d106      	bne.n	800c174 <mem_trim+0xe8>
 800c166:	4b41      	ldr	r3, [pc, #260]	@ (800c26c <mem_trim+0x1e0>)
 800c168:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c16c:	4943      	ldr	r1, [pc, #268]	@ (800c27c <mem_trim+0x1f0>)
 800c16e:	4841      	ldr	r0, [pc, #260]	@ (800c274 <mem_trim+0x1e8>)
 800c170:	f00a fd44 	bl	8016bfc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	881b      	ldrh	r3, [r3, #0]
 800c178:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c17a:	8afa      	ldrh	r2, [r7, #22]
 800c17c:	8bfb      	ldrh	r3, [r7, #30]
 800c17e:	4413      	add	r3, r2
 800c180:	b29b      	uxth	r3, r3
 800c182:	3308      	adds	r3, #8
 800c184:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c186:	4b3e      	ldr	r3, [pc, #248]	@ (800c280 <mem_trim+0x1f4>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d106      	bne.n	800c19e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c190:	89fb      	ldrh	r3, [r7, #14]
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff fdd2 	bl	800bd3c <ptr_to_mem>
 800c198:	4603      	mov	r3, r0
 800c19a:	4a39      	ldr	r2, [pc, #228]	@ (800c280 <mem_trim+0x1f4>)
 800c19c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c19e:	89fb      	ldrh	r3, [r7, #14]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7ff fdcb 	bl	800bd3c <ptr_to_mem>
 800c1a6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	89ba      	ldrh	r2, [r7, #12]
 800c1b2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	8afa      	ldrh	r2, [r7, #22]
 800c1b8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	89fa      	ldrh	r2, [r7, #14]
 800c1be:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c1c8:	d047      	beq.n	800c25a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7ff fdb4 	bl	800bd3c <ptr_to_mem>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	89fb      	ldrh	r3, [r7, #14]
 800c1d8:	8053      	strh	r3, [r2, #2]
 800c1da:	e03e      	b.n	800c25a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c1dc:	8bfb      	ldrh	r3, [r7, #30]
 800c1de:	f103 0214 	add.w	r2, r3, #20
 800c1e2:	8abb      	ldrh	r3, [r7, #20]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d838      	bhi.n	800c25a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c1e8:	8afa      	ldrh	r2, [r7, #22]
 800c1ea:	8bfb      	ldrh	r3, [r7, #30]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	3308      	adds	r3, #8
 800c1f2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c1fc:	d106      	bne.n	800c20c <mem_trim+0x180>
 800c1fe:	4b1b      	ldr	r3, [pc, #108]	@ (800c26c <mem_trim+0x1e0>)
 800c200:	f240 3216 	movw	r2, #790	@ 0x316
 800c204:	491d      	ldr	r1, [pc, #116]	@ (800c27c <mem_trim+0x1f0>)
 800c206:	481b      	ldr	r0, [pc, #108]	@ (800c274 <mem_trim+0x1e8>)
 800c208:	f00a fcf8 	bl	8016bfc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c20c:	89fb      	ldrh	r3, [r7, #14]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fd94 	bl	800bd3c <ptr_to_mem>
 800c214:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c216:	4b1a      	ldr	r3, [pc, #104]	@ (800c280 <mem_trim+0x1f4>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d202      	bcs.n	800c226 <mem_trim+0x19a>
      lfree = mem2;
 800c220:	4a17      	ldr	r2, [pc, #92]	@ (800c280 <mem_trim+0x1f4>)
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2200      	movs	r2, #0
 800c22a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	881a      	ldrh	r2, [r3, #0]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	8afa      	ldrh	r2, [r7, #22]
 800c238:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	89fa      	ldrh	r2, [r7, #14]
 800c23e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c248:	d007      	beq.n	800c25a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	881b      	ldrh	r3, [r3, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff fd74 	bl	800bd3c <ptr_to_mem>
 800c254:	4602      	mov	r2, r0
 800c256:	89fb      	ldrh	r3, [r7, #14]
 800c258:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c25a:	687b      	ldr	r3, [r7, #4]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3720      	adds	r7, #32
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20005cfc 	.word	0x20005cfc
 800c268:	20005d00 	.word	0x20005d00
 800c26c:	08017bc8 	.word	0x08017bc8
 800c270:	08017d38 	.word	0x08017d38
 800c274:	08017c10 	.word	0x08017c10
 800c278:	08017d50 	.word	0x08017d50
 800c27c:	08017d70 	.word	0x08017d70
 800c280:	20005d04 	.word	0x20005d04

0800c284 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c28e:	88fb      	ldrh	r3, [r7, #6]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <mem_malloc+0x14>
    return NULL;
 800c294:	2300      	movs	r3, #0
 800c296:	e0d9      	b.n	800c44c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c298:	88fb      	ldrh	r3, [r7, #6]
 800c29a:	3303      	adds	r3, #3
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	f023 0303 	bic.w	r3, r3, #3
 800c2a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c2a4:	8bbb      	ldrh	r3, [r7, #28]
 800c2a6:	2b0b      	cmp	r3, #11
 800c2a8:	d801      	bhi.n	800c2ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c2ae:	8bbb      	ldrh	r3, [r7, #28]
 800c2b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c2b4:	d803      	bhi.n	800c2be <mem_malloc+0x3a>
 800c2b6:	8bba      	ldrh	r2, [r7, #28]
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d201      	bcs.n	800c2c2 <mem_malloc+0x3e>
    return NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e0c4      	b.n	800c44c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2c2:	4b64      	ldr	r3, [pc, #400]	@ (800c454 <mem_malloc+0x1d0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7ff fd4a 	bl	800bd60 <mem_to_ptr>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	83fb      	strh	r3, [r7, #30]
 800c2d0:	e0b4      	b.n	800c43c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c2d2:	8bfb      	ldrh	r3, [r7, #30]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff fd31 	bl	800bd3c <ptr_to_mem>
 800c2da:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	791b      	ldrb	r3, [r3, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 80a4 	bne.w	800c42e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	8bfb      	ldrh	r3, [r7, #30]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	f1a3 0208 	sub.w	r2, r3, #8
 800c2f4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	f0c0 8099 	bcc.w	800c42e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	8bfb      	ldrh	r3, [r7, #30]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	f1a3 0208 	sub.w	r2, r3, #8
 800c30a:	8bbb      	ldrh	r3, [r7, #28]
 800c30c:	3314      	adds	r3, #20
 800c30e:	429a      	cmp	r2, r3
 800c310:	d333      	bcc.n	800c37a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c312:	8bfa      	ldrh	r2, [r7, #30]
 800c314:	8bbb      	ldrh	r3, [r7, #28]
 800c316:	4413      	add	r3, r2
 800c318:	b29b      	uxth	r3, r3
 800c31a:	3308      	adds	r3, #8
 800c31c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c31e:	8a7b      	ldrh	r3, [r7, #18]
 800c320:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c324:	d106      	bne.n	800c334 <mem_malloc+0xb0>
 800c326:	4b4c      	ldr	r3, [pc, #304]	@ (800c458 <mem_malloc+0x1d4>)
 800c328:	f240 3287 	movw	r2, #903	@ 0x387
 800c32c:	494b      	ldr	r1, [pc, #300]	@ (800c45c <mem_malloc+0x1d8>)
 800c32e:	484c      	ldr	r0, [pc, #304]	@ (800c460 <mem_malloc+0x1dc>)
 800c330:	f00a fc64 	bl	8016bfc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c334:	8a7b      	ldrh	r3, [r7, #18]
 800c336:	4618      	mov	r0, r3
 800c338:	f7ff fd00 	bl	800bd3c <ptr_to_mem>
 800c33c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	881a      	ldrh	r2, [r3, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	8bfa      	ldrh	r2, [r7, #30]
 800c350:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	8a7a      	ldrh	r2, [r7, #18]
 800c356:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2201      	movs	r2, #1
 800c35c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c366:	d00b      	beq.n	800c380 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fce5 	bl	800bd3c <ptr_to_mem>
 800c372:	4602      	mov	r2, r0
 800c374:	8a7b      	ldrh	r3, [r7, #18]
 800c376:	8053      	strh	r3, [r2, #2]
 800c378:	e002      	b.n	800c380 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2201      	movs	r2, #1
 800c37e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c380:	4b34      	ldr	r3, [pc, #208]	@ (800c454 <mem_malloc+0x1d0>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	429a      	cmp	r2, r3
 800c388:	d127      	bne.n	800c3da <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c38a:	4b32      	ldr	r3, [pc, #200]	@ (800c454 <mem_malloc+0x1d0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c390:	e005      	b.n	800c39e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff fcd0 	bl	800bd3c <ptr_to_mem>
 800c39c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	791b      	ldrb	r3, [r3, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d004      	beq.n	800c3b0 <mem_malloc+0x12c>
 800c3a6:	4b2f      	ldr	r3, [pc, #188]	@ (800c464 <mem_malloc+0x1e0>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d1f0      	bne.n	800c392 <mem_malloc+0x10e>
          }
          lfree = cur;
 800c3b0:	4a28      	ldr	r2, [pc, #160]	@ (800c454 <mem_malloc+0x1d0>)
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c3b6:	4b27      	ldr	r3, [pc, #156]	@ (800c454 <mem_malloc+0x1d0>)
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	4b2a      	ldr	r3, [pc, #168]	@ (800c464 <mem_malloc+0x1e0>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d00b      	beq.n	800c3da <mem_malloc+0x156>
 800c3c2:	4b24      	ldr	r3, [pc, #144]	@ (800c454 <mem_malloc+0x1d0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	791b      	ldrb	r3, [r3, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d006      	beq.n	800c3da <mem_malloc+0x156>
 800c3cc:	4b22      	ldr	r3, [pc, #136]	@ (800c458 <mem_malloc+0x1d4>)
 800c3ce:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c3d2:	4925      	ldr	r1, [pc, #148]	@ (800c468 <mem_malloc+0x1e4>)
 800c3d4:	4822      	ldr	r0, [pc, #136]	@ (800c460 <mem_malloc+0x1dc>)
 800c3d6:	f00a fc11 	bl	8016bfc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c3da:	8bba      	ldrh	r2, [r7, #28]
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	4413      	add	r3, r2
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	4a20      	ldr	r2, [pc, #128]	@ (800c464 <mem_malloc+0x1e0>)
 800c3e4:	6812      	ldr	r2, [r2, #0]
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d906      	bls.n	800c3f8 <mem_malloc+0x174>
 800c3ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c458 <mem_malloc+0x1d4>)
 800c3ec:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c3f0:	491e      	ldr	r1, [pc, #120]	@ (800c46c <mem_malloc+0x1e8>)
 800c3f2:	481b      	ldr	r0, [pc, #108]	@ (800c460 <mem_malloc+0x1dc>)
 800c3f4:	f00a fc02 	bl	8016bfc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f003 0303 	and.w	r3, r3, #3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d006      	beq.n	800c410 <mem_malloc+0x18c>
 800c402:	4b15      	ldr	r3, [pc, #84]	@ (800c458 <mem_malloc+0x1d4>)
 800c404:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c408:	4919      	ldr	r1, [pc, #100]	@ (800c470 <mem_malloc+0x1ec>)
 800c40a:	4815      	ldr	r0, [pc, #84]	@ (800c460 <mem_malloc+0x1dc>)
 800c40c:	f00a fbf6 	bl	8016bfc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f003 0303 	and.w	r3, r3, #3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d006      	beq.n	800c428 <mem_malloc+0x1a4>
 800c41a:	4b0f      	ldr	r3, [pc, #60]	@ (800c458 <mem_malloc+0x1d4>)
 800c41c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c420:	4914      	ldr	r1, [pc, #80]	@ (800c474 <mem_malloc+0x1f0>)
 800c422:	480f      	ldr	r0, [pc, #60]	@ (800c460 <mem_malloc+0x1dc>)
 800c424:	f00a fbea 	bl	8016bfc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	3308      	adds	r3, #8
 800c42c:	e00e      	b.n	800c44c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c42e:	8bfb      	ldrh	r3, [r7, #30]
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff fc83 	bl	800bd3c <ptr_to_mem>
 800c436:	4603      	mov	r3, r0
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c43c:	8bfa      	ldrh	r2, [r7, #30]
 800c43e:	8bbb      	ldrh	r3, [r7, #28]
 800c440:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800c444:	429a      	cmp	r2, r3
 800c446:	f4ff af44 	bcc.w	800c2d2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3720      	adds	r7, #32
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	20005d04 	.word	0x20005d04
 800c458:	08017bc8 	.word	0x08017bc8
 800c45c:	08017d70 	.word	0x08017d70
 800c460:	08017c10 	.word	0x08017c10
 800c464:	20005d00 	.word	0x20005d00
 800c468:	08017d84 	.word	0x08017d84
 800c46c:	08017da0 	.word	0x08017da0
 800c470:	08017dd0 	.word	0x08017dd0
 800c474:	08017e00 	.word	0x08017e00

0800c478 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	2200      	movs	r2, #0
 800c486:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	3303      	adds	r3, #3
 800c48e:	f023 0303 	bic.w	r3, r3, #3
 800c492:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c494:	2300      	movs	r3, #0
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	e011      	b.n	800c4be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	60fb      	str	r3, [r7, #12]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	885b      	ldrh	r3, [r3, #2]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	dbe7      	blt.n	800c49a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c4ca:	bf00      	nop
 800c4cc:	bf00      	nop
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4de:	2300      	movs	r3, #0
 800c4e0:	80fb      	strh	r3, [r7, #6]
 800c4e2:	e009      	b.n	800c4f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c4e4:	88fb      	ldrh	r3, [r7, #6]
 800c4e6:	4a08      	ldr	r2, [pc, #32]	@ (800c508 <memp_init+0x30>)
 800c4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff ffc3 	bl	800c478 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4f2:	88fb      	ldrh	r3, [r7, #6]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	80fb      	strh	r3, [r7, #6]
 800c4f8:	88fb      	ldrh	r3, [r7, #6]
 800c4fa:	2b08      	cmp	r3, #8
 800c4fc:	d9f2      	bls.n	800c4e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c4fe:	bf00      	nop
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	0801ad4c 	.word	0x0801ad4c

0800c50c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d012      	beq.n	800c548 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	6812      	ldr	r2, [r2, #0]
 800c52a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f003 0303 	and.w	r3, r3, #3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d006      	beq.n	800c544 <do_memp_malloc_pool+0x38>
 800c536:	4b07      	ldr	r3, [pc, #28]	@ (800c554 <do_memp_malloc_pool+0x48>)
 800c538:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c53c:	4906      	ldr	r1, [pc, #24]	@ (800c558 <do_memp_malloc_pool+0x4c>)
 800c53e:	4807      	ldr	r0, [pc, #28]	@ (800c55c <do_memp_malloc_pool+0x50>)
 800c540:	f00a fb5c 	bl	8016bfc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	e000      	b.n	800c54a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	08017e24 	.word	0x08017e24
 800c558:	08017e54 	.word	0x08017e54
 800c55c:	08017e78 	.word	0x08017e78

0800c560 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d106      	bne.n	800c57c <memp_malloc_pool+0x1c>
 800c56e:	4b0a      	ldr	r3, [pc, #40]	@ (800c598 <memp_malloc_pool+0x38>)
 800c570:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c574:	4909      	ldr	r1, [pc, #36]	@ (800c59c <memp_malloc_pool+0x3c>)
 800c576:	480a      	ldr	r0, [pc, #40]	@ (800c5a0 <memp_malloc_pool+0x40>)
 800c578:	f00a fb40 	bl	8016bfc <iprintf>
  if (desc == NULL) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <memp_malloc_pool+0x26>
    return NULL;
 800c582:	2300      	movs	r3, #0
 800c584:	e003      	b.n	800c58e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff ffc0 	bl	800c50c <do_memp_malloc_pool>
 800c58c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	08017e24 	.word	0x08017e24
 800c59c:	08017ea0 	.word	0x08017ea0
 800c5a0:	08017e78 	.word	0x08017e78

0800c5a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	2b08      	cmp	r3, #8
 800c5b2:	d908      	bls.n	800c5c6 <memp_malloc+0x22>
 800c5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e0 <memp_malloc+0x3c>)
 800c5b6:	f240 1257 	movw	r2, #343	@ 0x157
 800c5ba:	490a      	ldr	r1, [pc, #40]	@ (800c5e4 <memp_malloc+0x40>)
 800c5bc:	480a      	ldr	r0, [pc, #40]	@ (800c5e8 <memp_malloc+0x44>)
 800c5be:	f00a fb1d 	bl	8016bfc <iprintf>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e008      	b.n	800c5d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c5c6:	79fb      	ldrb	r3, [r7, #7]
 800c5c8:	4a08      	ldr	r2, [pc, #32]	@ (800c5ec <memp_malloc+0x48>)
 800c5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff ff9c 	bl	800c50c <do_memp_malloc_pool>
 800c5d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	08017e24 	.word	0x08017e24
 800c5e4:	08017eb4 	.word	0x08017eb4
 800c5e8:	08017e78 	.word	0x08017e78
 800c5ec:	0801ad4c 	.word	0x0801ad4c

0800c5f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	f003 0303 	and.w	r3, r3, #3
 800c600:	2b00      	cmp	r3, #0
 800c602:	d006      	beq.n	800c612 <do_memp_free_pool+0x22>
 800c604:	4b0a      	ldr	r3, [pc, #40]	@ (800c630 <do_memp_free_pool+0x40>)
 800c606:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c60a:	490a      	ldr	r1, [pc, #40]	@ (800c634 <do_memp_free_pool+0x44>)
 800c60c:	480a      	ldr	r0, [pc, #40]	@ (800c638 <do_memp_free_pool+0x48>)
 800c60e:	f00a faf5 	bl	8016bfc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	08017e24 	.word	0x08017e24
 800c634:	08017ed4 	.word	0x08017ed4
 800c638:	08017e78 	.word	0x08017e78

0800c63c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d106      	bne.n	800c65a <memp_free_pool+0x1e>
 800c64c:	4b0a      	ldr	r3, [pc, #40]	@ (800c678 <memp_free_pool+0x3c>)
 800c64e:	f240 1295 	movw	r2, #405	@ 0x195
 800c652:	490a      	ldr	r1, [pc, #40]	@ (800c67c <memp_free_pool+0x40>)
 800c654:	480a      	ldr	r0, [pc, #40]	@ (800c680 <memp_free_pool+0x44>)
 800c656:	f00a fad1 	bl	8016bfc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d007      	beq.n	800c670 <memp_free_pool+0x34>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff ffc1 	bl	800c5f0 <do_memp_free_pool>
 800c66e:	e000      	b.n	800c672 <memp_free_pool+0x36>
    return;
 800c670:	bf00      	nop
}
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	08017e24 	.word	0x08017e24
 800c67c:	08017ea0 	.word	0x08017ea0
 800c680:	08017e78 	.word	0x08017e78

0800c684 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	4603      	mov	r3, r0
 800c68c:	6039      	str	r1, [r7, #0]
 800c68e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c690:	79fb      	ldrb	r3, [r7, #7]
 800c692:	2b08      	cmp	r3, #8
 800c694:	d907      	bls.n	800c6a6 <memp_free+0x22>
 800c696:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c8 <memp_free+0x44>)
 800c698:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c69c:	490b      	ldr	r1, [pc, #44]	@ (800c6cc <memp_free+0x48>)
 800c69e:	480c      	ldr	r0, [pc, #48]	@ (800c6d0 <memp_free+0x4c>)
 800c6a0:	f00a faac 	bl	8016bfc <iprintf>
 800c6a4:	e00c      	b.n	800c6c0 <memp_free+0x3c>

  if (mem == NULL) {
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d008      	beq.n	800c6be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	4a09      	ldr	r2, [pc, #36]	@ (800c6d4 <memp_free+0x50>)
 800c6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff ff9a 	bl	800c5f0 <do_memp_free_pool>
 800c6bc:	e000      	b.n	800c6c0 <memp_free+0x3c>
    return;
 800c6be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08017e24 	.word	0x08017e24
 800c6cc:	08017ef4 	.word	0x08017ef4
 800c6d0:	08017e78 	.word	0x08017e78
 800c6d4:	0801ad4c 	.word	0x0801ad4c

0800c6d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c6dc:	bf00      	nop
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d108      	bne.n	800c70e <netif_add+0x26>
 800c6fc:	4b57      	ldr	r3, [pc, #348]	@ (800c85c <netif_add+0x174>)
 800c6fe:	f240 1227 	movw	r2, #295	@ 0x127
 800c702:	4957      	ldr	r1, [pc, #348]	@ (800c860 <netif_add+0x178>)
 800c704:	4857      	ldr	r0, [pc, #348]	@ (800c864 <netif_add+0x17c>)
 800c706:	f00a fa79 	bl	8016bfc <iprintf>
 800c70a:	2300      	movs	r3, #0
 800c70c:	e0a2      	b.n	800c854 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	d108      	bne.n	800c726 <netif_add+0x3e>
 800c714:	4b51      	ldr	r3, [pc, #324]	@ (800c85c <netif_add+0x174>)
 800c716:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c71a:	4953      	ldr	r1, [pc, #332]	@ (800c868 <netif_add+0x180>)
 800c71c:	4851      	ldr	r0, [pc, #324]	@ (800c864 <netif_add+0x17c>)
 800c71e:	f00a fa6d 	bl	8016bfc <iprintf>
 800c722:	2300      	movs	r3, #0
 800c724:	e096      	b.n	800c854 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c72c:	4b4f      	ldr	r3, [pc, #316]	@ (800c86c <netif_add+0x184>)
 800c72e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c736:	4b4d      	ldr	r3, [pc, #308]	@ (800c86c <netif_add+0x184>)
 800c738:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c740:	4b4a      	ldr	r3, [pc, #296]	@ (800c86c <netif_add+0x184>)
 800c742:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	4a45      	ldr	r2, [pc, #276]	@ (800c870 <netif_add+0x188>)
 800c75a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6a3a      	ldr	r2, [r7, #32]
 800c774:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c776:	4b3f      	ldr	r3, [pc, #252]	@ (800c874 <netif_add+0x18c>)
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c784:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 f913 	bl	800c9b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	4798      	blx	r3
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <netif_add+0xba>
    return NULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e058      	b.n	800c854 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7a8:	2bff      	cmp	r3, #255	@ 0xff
 800c7aa:	d103      	bne.n	800c7b4 <netif_add+0xcc>
        netif->num = 0;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c7b8:	4b2f      	ldr	r3, [pc, #188]	@ (800c878 <netif_add+0x190>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	617b      	str	r3, [r7, #20]
 800c7be:	e02b      	b.n	800c818 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d106      	bne.n	800c7d6 <netif_add+0xee>
 800c7c8:	4b24      	ldr	r3, [pc, #144]	@ (800c85c <netif_add+0x174>)
 800c7ca:	f240 128b 	movw	r2, #395	@ 0x18b
 800c7ce:	492b      	ldr	r1, [pc, #172]	@ (800c87c <netif_add+0x194>)
 800c7d0:	4824      	ldr	r0, [pc, #144]	@ (800c864 <netif_add+0x17c>)
 800c7d2:	f00a fa13 	bl	8016bfc <iprintf>
        num_netifs++;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2bff      	cmp	r3, #255	@ 0xff
 800c7e0:	dd06      	ble.n	800c7f0 <netif_add+0x108>
 800c7e2:	4b1e      	ldr	r3, [pc, #120]	@ (800c85c <netif_add+0x174>)
 800c7e4:	f240 128d 	movw	r2, #397	@ 0x18d
 800c7e8:	4925      	ldr	r1, [pc, #148]	@ (800c880 <netif_add+0x198>)
 800c7ea:	481e      	ldr	r0, [pc, #120]	@ (800c864 <netif_add+0x17c>)
 800c7ec:	f00a fa06 	bl	8016bfc <iprintf>
        if (netif2->num == netif->num) {
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d108      	bne.n	800c812 <netif_add+0x12a>
          netif->num++;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c806:	3301      	adds	r3, #1
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c810:	e005      	b.n	800c81e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	617b      	str	r3, [r7, #20]
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1d0      	bne.n	800c7c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1be      	bne.n	800c7a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c82a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c82c:	d103      	bne.n	800c836 <netif_add+0x14e>
    netif_num = 0;
 800c82e:	4b11      	ldr	r3, [pc, #68]	@ (800c874 <netif_add+0x18c>)
 800c830:	2200      	movs	r2, #0
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	e006      	b.n	800c844 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c83c:	3301      	adds	r3, #1
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	4b0c      	ldr	r3, [pc, #48]	@ (800c874 <netif_add+0x18c>)
 800c842:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c844:	4b0c      	ldr	r3, [pc, #48]	@ (800c878 <netif_add+0x190>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c84c:	4a0a      	ldr	r2, [pc, #40]	@ (800c878 <netif_add+0x190>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c852:	68fb      	ldr	r3, [r7, #12]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	08017f10 	.word	0x08017f10
 800c860:	08017fa4 	.word	0x08017fa4
 800c864:	08017f60 	.word	0x08017f60
 800c868:	08017fc0 	.word	0x08017fc0
 800c86c:	0801adb0 	.word	0x0801adb0
 800c870:	0800cc93 	.word	0x0800cc93
 800c874:	20008bfc 	.word	0x20008bfc
 800c878:	20008bf4 	.word	0x20008bf4
 800c87c:	08017fe4 	.word	0x08017fe4
 800c880:	08017ff8 	.word	0x08017ff8

0800c884 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f002 fb55 	bl	800ef40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f006 ff23 	bl	80136e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <netif_do_set_ipaddr+0x20>
 800c8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c930 <netif_do_set_ipaddr+0x88>)
 800c8bc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c8c0:	491c      	ldr	r1, [pc, #112]	@ (800c934 <netif_do_set_ipaddr+0x8c>)
 800c8c2:	481d      	ldr	r0, [pc, #116]	@ (800c938 <netif_do_set_ipaddr+0x90>)
 800c8c4:	f00a f99a 	bl	8016bfc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <netif_do_set_ipaddr+0x34>
 800c8ce:	4b18      	ldr	r3, [pc, #96]	@ (800c930 <netif_do_set_ipaddr+0x88>)
 800c8d0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c8d4:	4917      	ldr	r1, [pc, #92]	@ (800c934 <netif_do_set_ipaddr+0x8c>)
 800c8d6:	4818      	ldr	r0, [pc, #96]	@ (800c938 <netif_do_set_ipaddr+0x90>)
 800c8d8:	f00a f990 	bl	8016bfc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d01c      	beq.n	800c924 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c8fa:	f107 0314 	add.w	r3, r7, #20
 800c8fe:	4619      	mov	r1, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff ffbf 	bl	800c884 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <netif_do_set_ipaddr+0x6a>
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	e000      	b.n	800c914 <netif_do_set_ipaddr+0x6c>
 800c912:	2300      	movs	r3, #0
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c918:	2101      	movs	r1, #1
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f000 f8d2 	bl	800cac4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	08017f10 	.word	0x08017f10
 800c934:	08018028 	.word	0x08018028
 800c938:	08017f60 	.word	0x08017f60

0800c93c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3308      	adds	r3, #8
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d00a      	beq.n	800c96c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <netif_do_set_netmask+0x26>
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	e000      	b.n	800c964 <netif_do_set_netmask+0x28>
 800c962:	2300      	movs	r3, #0
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b085      	sub	sp, #20
 800c97e:	af00      	add	r7, sp, #0
 800c980:	60f8      	str	r0, [r7, #12]
 800c982:	60b9      	str	r1, [r7, #8]
 800c984:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	330c      	adds	r3, #12
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	429a      	cmp	r2, r3
 800c992:	d00a      	beq.n	800c9aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <netif_do_set_gw+0x26>
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	e000      	b.n	800c9a2 <netif_do_set_gw+0x28>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e000      	b.n	800c9ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c9d4:	4b1c      	ldr	r3, [pc, #112]	@ (800ca48 <netif_set_addr+0x90>)
 800c9d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ca48 <netif_set_addr+0x90>)
 800c9e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d101      	bne.n	800c9ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c9e8:	4b17      	ldr	r3, [pc, #92]	@ (800ca48 <netif_set_addr+0x90>)
 800c9ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d003      	beq.n	800c9fa <netif_set_addr+0x42>
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <netif_set_addr+0x46>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <netif_set_addr+0x48>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d006      	beq.n	800ca16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca08:	f107 0310 	add.w	r3, r7, #16
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	68b9      	ldr	r1, [r7, #8]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7ff ff49 	bl	800c8a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	6879      	ldr	r1, [r7, #4]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff ff8e 	bl	800c93c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f7ff ffa8 	bl	800c97a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d106      	bne.n	800ca3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca30:	f107 0310 	add.w	r3, r7, #16
 800ca34:	461a      	mov	r2, r3
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f7ff ff35 	bl	800c8a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ca3e:	bf00      	nop
 800ca40:	3720      	adds	r7, #32
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	0801adb0 	.word	0x0801adb0

0800ca4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ca54:	4a04      	ldr	r2, [pc, #16]	@ (800ca68 <netif_set_default+0x1c>)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	20008bf8 	.word	0x20008bf8

0800ca6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d107      	bne.n	800ca8a <netif_set_up+0x1e>
 800ca7a:	4b0f      	ldr	r3, [pc, #60]	@ (800cab8 <netif_set_up+0x4c>)
 800ca7c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ca80:	490e      	ldr	r1, [pc, #56]	@ (800cabc <netif_set_up+0x50>)
 800ca82:	480f      	ldr	r0, [pc, #60]	@ (800cac0 <netif_set_up+0x54>)
 800ca84:	f00a f8ba 	bl	8016bfc <iprintf>
 800ca88:	e013      	b.n	800cab2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10c      	bne.n	800cab2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca9e:	f043 0301 	orr.w	r3, r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800caaa:	2103      	movs	r1, #3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f809 	bl	800cac4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	08017f10 	.word	0x08017f10
 800cabc:	08018098 	.word	0x08018098
 800cac0:	08017f60 	.word	0x08017f60

0800cac4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d106      	bne.n	800cae4 <netif_issue_reports+0x20>
 800cad6:	4b18      	ldr	r3, [pc, #96]	@ (800cb38 <netif_issue_reports+0x74>)
 800cad8:	f240 326d 	movw	r2, #877	@ 0x36d
 800cadc:	4917      	ldr	r1, [pc, #92]	@ (800cb3c <netif_issue_reports+0x78>)
 800cade:	4818      	ldr	r0, [pc, #96]	@ (800cb40 <netif_issue_reports+0x7c>)
 800cae0:	f00a f88c 	bl	8016bfc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800caea:	f003 0304 	and.w	r3, r3, #4
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d01e      	beq.n	800cb30 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800caf8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d017      	beq.n	800cb30 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d013      	beq.n	800cb32 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00e      	beq.n	800cb32 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb1a:	f003 0308 	and.w	r3, r3, #8
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d007      	beq.n	800cb32 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f007 fd45 	bl	80145b8 <etharp_request>
 800cb2e:	e000      	b.n	800cb32 <netif_issue_reports+0x6e>
    return;
 800cb30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	08017f10 	.word	0x08017f10
 800cb3c:	080180b4 	.word	0x080180b4
 800cb40:	08017f60 	.word	0x08017f60

0800cb44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d107      	bne.n	800cb62 <netif_set_down+0x1e>
 800cb52:	4b12      	ldr	r3, [pc, #72]	@ (800cb9c <netif_set_down+0x58>)
 800cb54:	f240 329b 	movw	r2, #923	@ 0x39b
 800cb58:	4911      	ldr	r1, [pc, #68]	@ (800cba0 <netif_set_down+0x5c>)
 800cb5a:	4812      	ldr	r0, [pc, #72]	@ (800cba4 <netif_set_down+0x60>)
 800cb5c:	f00a f84e 	bl	8016bfc <iprintf>
 800cb60:	e019      	b.n	800cb96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d012      	beq.n	800cb96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb76:	f023 0301 	bic.w	r3, r3, #1
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb88:	f003 0308 	and.w	r3, r3, #8
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f007 f8cf 	bl	8013d34 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	08017f10 	.word	0x08017f10
 800cba0:	080180d8 	.word	0x080180d8
 800cba4:	08017f60 	.word	0x08017f60

0800cba8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d107      	bne.n	800cbc6 <netif_set_link_up+0x1e>
 800cbb6:	4b13      	ldr	r3, [pc, #76]	@ (800cc04 <netif_set_link_up+0x5c>)
 800cbb8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800cbbc:	4912      	ldr	r1, [pc, #72]	@ (800cc08 <netif_set_link_up+0x60>)
 800cbbe:	4813      	ldr	r0, [pc, #76]	@ (800cc0c <netif_set_link_up+0x64>)
 800cbc0:	f00a f81c 	bl	8016bfc <iprintf>
 800cbc4:	e01b      	b.n	800cbfe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbcc:	f003 0304 	and.w	r3, r3, #4
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d114      	bne.n	800cbfe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbda:	f043 0304 	orr.w	r3, r3, #4
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cbe6:	2103      	movs	r1, #3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff ff6b 	bl	800cac4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	69db      	ldr	r3, [r3, #28]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d003      	beq.n	800cbfe <netif_set_link_up+0x56>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	08017f10 	.word	0x08017f10
 800cc08:	080180f8 	.word	0x080180f8
 800cc0c:	08017f60 	.word	0x08017f60

0800cc10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d107      	bne.n	800cc2e <netif_set_link_down+0x1e>
 800cc1e:	4b11      	ldr	r3, [pc, #68]	@ (800cc64 <netif_set_link_down+0x54>)
 800cc20:	f240 4206 	movw	r2, #1030	@ 0x406
 800cc24:	4910      	ldr	r1, [pc, #64]	@ (800cc68 <netif_set_link_down+0x58>)
 800cc26:	4811      	ldr	r0, [pc, #68]	@ (800cc6c <netif_set_link_down+0x5c>)
 800cc28:	f009 ffe8 	bl	8016bfc <iprintf>
 800cc2c:	e017      	b.n	800cc5e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d010      	beq.n	800cc5e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc42:	f023 0304 	bic.w	r3, r3, #4
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	69db      	ldr	r3, [r3, #28]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d003      	beq.n	800cc5e <netif_set_link_down+0x4e>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	69db      	ldr	r3, [r3, #28]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	08017f10 	.word	0x08017f10
 800cc68:	0801811c 	.word	0x0801811c
 800cc6c:	08017f60 	.word	0x08017f60

0800cc70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	61da      	str	r2, [r3, #28]
  }
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b085      	sub	sp, #20
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	60f8      	str	r0, [r7, #12]
 800cc9a:	60b9      	str	r1, [r7, #8]
 800cc9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cc9e:	f06f 030b 	mvn.w	r3, #11
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
	...

0800ccb0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d013      	beq.n	800cce8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ccc0:	4b0d      	ldr	r3, [pc, #52]	@ (800ccf8 <netif_get_by_index+0x48>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e00c      	b.n	800cce2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccce:	3301      	adds	r3, #1
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	79fa      	ldrb	r2, [r7, #7]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d101      	bne.n	800ccdc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	e006      	b.n	800ccea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1ef      	bne.n	800ccc8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	20008bf4 	.word	0x20008bf4

0800ccfc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cd02:	4b0c      	ldr	r3, [pc, #48]	@ (800cd34 <pbuf_free_ooseq+0x38>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cd08:	4b0b      	ldr	r3, [pc, #44]	@ (800cd38 <pbuf_free_ooseq+0x3c>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	607b      	str	r3, [r7, #4]
 800cd0e:	e00a      	b.n	800cd26 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f002 f94f 	bl	800efbc <tcp_free_ooseq>
      return;
 800cd1e:	e005      	b.n	800cd2c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	607b      	str	r3, [r7, #4]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1f1      	bne.n	800cd10 <pbuf_free_ooseq+0x14>
    }
  }
}
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	20008bfd 	.word	0x20008bfd
 800cd38:	20008c0c 	.word	0x20008c0c

0800cd3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800cd40:	4b03      	ldr	r3, [pc, #12]	@ (800cd50 <pbuf_pool_is_empty+0x14>)
 800cd42:	2201      	movs	r2, #1
 800cd44:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cd46:	bf00      	nop
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	20008bfd 	.word	0x20008bfd

0800cd54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	4611      	mov	r1, r2
 800cd60:	461a      	mov	r2, r3
 800cd62:	460b      	mov	r3, r1
 800cd64:	80fb      	strh	r3, [r7, #6]
 800cd66:	4613      	mov	r3, r2
 800cd68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	88fa      	ldrh	r2, [r7, #6]
 800cd7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	88ba      	ldrh	r2, [r7, #4]
 800cd80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cd82:	8b3b      	ldrh	r3, [r7, #24]
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	7f3a      	ldrb	r2, [r7, #28]
 800cd8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2201      	movs	r2, #1
 800cd94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	73da      	strb	r2, [r3, #15]
}
 800cd9c:	bf00      	nop
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08c      	sub	sp, #48	@ 0x30
 800cdac:	af02      	add	r7, sp, #8
 800cdae:	4603      	mov	r3, r0
 800cdb0:	71fb      	strb	r3, [r7, #7]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	80bb      	strh	r3, [r7, #4]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cdbe:	887b      	ldrh	r3, [r7, #2]
 800cdc0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cdc4:	d07f      	beq.n	800cec6 <pbuf_alloc+0x11e>
 800cdc6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cdca:	f300 80c8 	bgt.w	800cf5e <pbuf_alloc+0x1b6>
 800cdce:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cdd2:	d010      	beq.n	800cdf6 <pbuf_alloc+0x4e>
 800cdd4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cdd8:	f300 80c1 	bgt.w	800cf5e <pbuf_alloc+0x1b6>
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d002      	beq.n	800cde6 <pbuf_alloc+0x3e>
 800cde0:	2b41      	cmp	r3, #65	@ 0x41
 800cde2:	f040 80bc 	bne.w	800cf5e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cde6:	887a      	ldrh	r2, [r7, #2]
 800cde8:	88bb      	ldrh	r3, [r7, #4]
 800cdea:	4619      	mov	r1, r3
 800cdec:	2000      	movs	r0, #0
 800cdee:	f000 f8d1 	bl	800cf94 <pbuf_alloc_reference>
 800cdf2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800cdf4:	e0bd      	b.n	800cf72 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cdfe:	88bb      	ldrh	r3, [r7, #4]
 800ce00:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ce02:	2008      	movs	r0, #8
 800ce04:	f7ff fbce 	bl	800c5a4 <memp_malloc>
 800ce08:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d109      	bne.n	800ce24 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ce10:	f7ff ff94 	bl	800cd3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ce14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ce1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce1c:	f000 faa8 	bl	800d370 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ce20:	2300      	movs	r3, #0
 800ce22:	e0a7      	b.n	800cf74 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ce24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce26:	3303      	adds	r3, #3
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	f023 0303 	bic.w	r3, r3, #3
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	8b7a      	ldrh	r2, [r7, #26]
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	bf28      	it	cs
 800ce3c:	4613      	movcs	r3, r2
 800ce3e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ce40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce42:	3310      	adds	r3, #16
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	4413      	add	r3, r2
 800ce48:	3303      	adds	r3, #3
 800ce4a:	f023 0303 	bic.w	r3, r3, #3
 800ce4e:	4618      	mov	r0, r3
 800ce50:	89f9      	ldrh	r1, [r7, #14]
 800ce52:	8b7a      	ldrh	r2, [r7, #26]
 800ce54:	2300      	movs	r3, #0
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	887b      	ldrh	r3, [r7, #2]
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	4601      	mov	r1, r0
 800ce60:	6938      	ldr	r0, [r7, #16]
 800ce62:	f7ff ff77 	bl	800cd54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f003 0303 	and.w	r3, r3, #3
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d006      	beq.n	800ce80 <pbuf_alloc+0xd8>
 800ce72:	4b42      	ldr	r3, [pc, #264]	@ (800cf7c <pbuf_alloc+0x1d4>)
 800ce74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce78:	4941      	ldr	r1, [pc, #260]	@ (800cf80 <pbuf_alloc+0x1d8>)
 800ce7a:	4842      	ldr	r0, [pc, #264]	@ (800cf84 <pbuf_alloc+0x1dc>)
 800ce7c:	f009 febe 	bl	8016bfc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ce80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce82:	3303      	adds	r3, #3
 800ce84:	f023 0303 	bic.w	r3, r3, #3
 800ce88:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ce8c:	d106      	bne.n	800ce9c <pbuf_alloc+0xf4>
 800ce8e:	4b3b      	ldr	r3, [pc, #236]	@ (800cf7c <pbuf_alloc+0x1d4>)
 800ce90:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800ce94:	493c      	ldr	r1, [pc, #240]	@ (800cf88 <pbuf_alloc+0x1e0>)
 800ce96:	483b      	ldr	r0, [pc, #236]	@ (800cf84 <pbuf_alloc+0x1dc>)
 800ce98:	f009 feb0 	bl	8016bfc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d102      	bne.n	800cea8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cea6:	e002      	b.n	800ceae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ceb2:	8b7a      	ldrh	r2, [r7, #26]
 800ceb4:	89fb      	ldrh	r3, [r7, #14]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800cebe:	8b7b      	ldrh	r3, [r7, #26]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d19e      	bne.n	800ce02 <pbuf_alloc+0x5a>
      break;
 800cec4:	e055      	b.n	800cf72 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cec6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cec8:	3303      	adds	r3, #3
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	f023 0303 	bic.w	r3, r3, #3
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	88bb      	ldrh	r3, [r7, #4]
 800ced4:	3303      	adds	r3, #3
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	f023 0303 	bic.w	r3, r3, #3
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4413      	add	r3, r2
 800cee0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cee2:	8b3b      	ldrh	r3, [r7, #24]
 800cee4:	3310      	adds	r3, #16
 800cee6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cee8:	8b3a      	ldrh	r2, [r7, #24]
 800ceea:	88bb      	ldrh	r3, [r7, #4]
 800ceec:	3303      	adds	r3, #3
 800ceee:	f023 0303 	bic.w	r3, r3, #3
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d306      	bcc.n	800cf04 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cef6:	8afa      	ldrh	r2, [r7, #22]
 800cef8:	88bb      	ldrh	r3, [r7, #4]
 800cefa:	3303      	adds	r3, #3
 800cefc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d201      	bcs.n	800cf08 <pbuf_alloc+0x160>
        return NULL;
 800cf04:	2300      	movs	r3, #0
 800cf06:	e035      	b.n	800cf74 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cf08:	8afb      	ldrh	r3, [r7, #22]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff f9ba 	bl	800c284 <mem_malloc>
 800cf10:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800cf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <pbuf_alloc+0x174>
        return NULL;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e02b      	b.n	800cf74 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cf1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cf1e:	3310      	adds	r3, #16
 800cf20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf22:	4413      	add	r3, r2
 800cf24:	3303      	adds	r3, #3
 800cf26:	f023 0303 	bic.w	r3, r3, #3
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	88b9      	ldrh	r1, [r7, #4]
 800cf2e:	88ba      	ldrh	r2, [r7, #4]
 800cf30:	2300      	movs	r3, #0
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	887b      	ldrh	r3, [r7, #2]
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4601      	mov	r1, r0
 800cf3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf3e:	f7ff ff09 	bl	800cd54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	f003 0303 	and.w	r3, r3, #3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d010      	beq.n	800cf70 <pbuf_alloc+0x1c8>
 800cf4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf7c <pbuf_alloc+0x1d4>)
 800cf50:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cf54:	490d      	ldr	r1, [pc, #52]	@ (800cf8c <pbuf_alloc+0x1e4>)
 800cf56:	480b      	ldr	r0, [pc, #44]	@ (800cf84 <pbuf_alloc+0x1dc>)
 800cf58:	f009 fe50 	bl	8016bfc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cf5c:	e008      	b.n	800cf70 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cf5e:	4b07      	ldr	r3, [pc, #28]	@ (800cf7c <pbuf_alloc+0x1d4>)
 800cf60:	f240 1227 	movw	r2, #295	@ 0x127
 800cf64:	490a      	ldr	r1, [pc, #40]	@ (800cf90 <pbuf_alloc+0x1e8>)
 800cf66:	4807      	ldr	r0, [pc, #28]	@ (800cf84 <pbuf_alloc+0x1dc>)
 800cf68:	f009 fe48 	bl	8016bfc <iprintf>
      return NULL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e001      	b.n	800cf74 <pbuf_alloc+0x1cc>
      break;
 800cf70:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3728      	adds	r7, #40	@ 0x28
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	08018140 	.word	0x08018140
 800cf80:	08018170 	.word	0x08018170
 800cf84:	080181a0 	.word	0x080181a0
 800cf88:	080181c8 	.word	0x080181c8
 800cf8c:	080181fc 	.word	0x080181fc
 800cf90:	08018228 	.word	0x08018228

0800cf94 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	807b      	strh	r3, [r7, #2]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cfa4:	883b      	ldrh	r3, [r7, #0]
 800cfa6:	2b41      	cmp	r3, #65	@ 0x41
 800cfa8:	d009      	beq.n	800cfbe <pbuf_alloc_reference+0x2a>
 800cfaa:	883b      	ldrh	r3, [r7, #0]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d006      	beq.n	800cfbe <pbuf_alloc_reference+0x2a>
 800cfb0:	4b0f      	ldr	r3, [pc, #60]	@ (800cff0 <pbuf_alloc_reference+0x5c>)
 800cfb2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cfb6:	490f      	ldr	r1, [pc, #60]	@ (800cff4 <pbuf_alloc_reference+0x60>)
 800cfb8:	480f      	ldr	r0, [pc, #60]	@ (800cff8 <pbuf_alloc_reference+0x64>)
 800cfba:	f009 fe1f 	bl	8016bfc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cfbe:	2007      	movs	r0, #7
 800cfc0:	f7ff faf0 	bl	800c5a4 <memp_malloc>
 800cfc4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	e00b      	b.n	800cfe8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cfd0:	8879      	ldrh	r1, [r7, #2]
 800cfd2:	887a      	ldrh	r2, [r7, #2]
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	883b      	ldrh	r3, [r7, #0]
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	6879      	ldr	r1, [r7, #4]
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f7ff feb7 	bl	800cd54 <pbuf_init_alloced_pbuf>
  return p;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	08018140 	.word	0x08018140
 800cff4:	08018244 	.word	0x08018244
 800cff8:	080181a0 	.word	0x080181a0

0800cffc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af02      	add	r7, sp, #8
 800d002:	607b      	str	r3, [r7, #4]
 800d004:	4603      	mov	r3, r0
 800d006:	73fb      	strb	r3, [r7, #15]
 800d008:	460b      	mov	r3, r1
 800d00a:	81bb      	strh	r3, [r7, #12]
 800d00c:	4613      	mov	r3, r2
 800d00e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d010:	7bfb      	ldrb	r3, [r7, #15]
 800d012:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d014:	8a7b      	ldrh	r3, [r7, #18]
 800d016:	3303      	adds	r3, #3
 800d018:	f023 0203 	bic.w	r2, r3, #3
 800d01c:	89bb      	ldrh	r3, [r7, #12]
 800d01e:	441a      	add	r2, r3
 800d020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d022:	429a      	cmp	r2, r3
 800d024:	d901      	bls.n	800d02a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d026:	2300      	movs	r3, #0
 800d028:	e018      	b.n	800d05c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d007      	beq.n	800d040 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d030:	8a7b      	ldrh	r3, [r7, #18]
 800d032:	3303      	adds	r3, #3
 800d034:	f023 0303 	bic.w	r3, r3, #3
 800d038:	6a3a      	ldr	r2, [r7, #32]
 800d03a:	4413      	add	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	e001      	b.n	800d044 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d040:	2300      	movs	r3, #0
 800d042:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	89b9      	ldrh	r1, [r7, #12]
 800d048:	89ba      	ldrh	r2, [r7, #12]
 800d04a:	2302      	movs	r3, #2
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	897b      	ldrh	r3, [r7, #10]
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	460b      	mov	r3, r1
 800d054:	6979      	ldr	r1, [r7, #20]
 800d056:	f7ff fe7d 	bl	800cd54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d05a:	687b      	ldr	r3, [r7, #4]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	460b      	mov	r3, r1
 800d06e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <pbuf_realloc+0x20>
 800d076:	4b3a      	ldr	r3, [pc, #232]	@ (800d160 <pbuf_realloc+0xfc>)
 800d078:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d07c:	4939      	ldr	r1, [pc, #228]	@ (800d164 <pbuf_realloc+0x100>)
 800d07e:	483a      	ldr	r0, [pc, #232]	@ (800d168 <pbuf_realloc+0x104>)
 800d080:	f009 fdbc 	bl	8016bfc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	891b      	ldrh	r3, [r3, #8]
 800d088:	887a      	ldrh	r2, [r7, #2]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d263      	bcs.n	800d156 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	891a      	ldrh	r2, [r3, #8]
 800d092:	887b      	ldrh	r3, [r7, #2]
 800d094:	1ad3      	subs	r3, r2, r3
 800d096:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d098:	887b      	ldrh	r3, [r7, #2]
 800d09a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d0a0:	e018      	b.n	800d0d4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	895b      	ldrh	r3, [r3, #10]
 800d0a6:	897a      	ldrh	r2, [r7, #10]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	891a      	ldrh	r2, [r3, #8]
 800d0b0:	893b      	ldrh	r3, [r7, #8]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <pbuf_realloc+0x70>
 800d0c6:	4b26      	ldr	r3, [pc, #152]	@ (800d160 <pbuf_realloc+0xfc>)
 800d0c8:	f240 12af 	movw	r2, #431	@ 0x1af
 800d0cc:	4927      	ldr	r1, [pc, #156]	@ (800d16c <pbuf_realloc+0x108>)
 800d0ce:	4826      	ldr	r0, [pc, #152]	@ (800d168 <pbuf_realloc+0x104>)
 800d0d0:	f009 fd94 	bl	8016bfc <iprintf>
  while (rem_len > q->len) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	895b      	ldrh	r3, [r3, #10]
 800d0d8:	897a      	ldrh	r2, [r7, #10]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d8e1      	bhi.n	800d0a2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	7b1b      	ldrb	r3, [r3, #12]
 800d0e2:	f003 030f 	and.w	r3, r3, #15
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d121      	bne.n	800d12e <pbuf_realloc+0xca>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	895b      	ldrh	r3, [r3, #10]
 800d0ee:	897a      	ldrh	r2, [r7, #10]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d01c      	beq.n	800d12e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	7b5b      	ldrb	r3, [r3, #13]
 800d0f8:	f003 0302 	and.w	r3, r3, #2
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d116      	bne.n	800d12e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	685a      	ldr	r2, [r3, #4]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	b29a      	uxth	r2, r3
 800d10a:	897b      	ldrh	r3, [r7, #10]
 800d10c:	4413      	add	r3, r2
 800d10e:	b29b      	uxth	r3, r3
 800d110:	4619      	mov	r1, r3
 800d112:	68f8      	ldr	r0, [r7, #12]
 800d114:	f7fe ffba 	bl	800c08c <mem_trim>
 800d118:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <pbuf_realloc+0xca>
 800d120:	4b0f      	ldr	r3, [pc, #60]	@ (800d160 <pbuf_realloc+0xfc>)
 800d122:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d126:	4912      	ldr	r1, [pc, #72]	@ (800d170 <pbuf_realloc+0x10c>)
 800d128:	480f      	ldr	r0, [pc, #60]	@ (800d168 <pbuf_realloc+0x104>)
 800d12a:	f009 fd67 	bl	8016bfc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	897a      	ldrh	r2, [r7, #10]
 800d132:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	895a      	ldrh	r2, [r3, #10]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d004      	beq.n	800d14e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 f911 	bl	800d370 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	e000      	b.n	800d158 <pbuf_realloc+0xf4>
    return;
 800d156:	bf00      	nop

}
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	08018140 	.word	0x08018140
 800d164:	08018258 	.word	0x08018258
 800d168:	080181a0 	.word	0x080181a0
 800d16c:	08018270 	.word	0x08018270
 800d170:	08018288 	.word	0x08018288

0800d174 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <pbuf_add_header_impl+0x22>
 800d188:	4b2b      	ldr	r3, [pc, #172]	@ (800d238 <pbuf_add_header_impl+0xc4>)
 800d18a:	f240 12df 	movw	r2, #479	@ 0x1df
 800d18e:	492b      	ldr	r1, [pc, #172]	@ (800d23c <pbuf_add_header_impl+0xc8>)
 800d190:	482b      	ldr	r0, [pc, #172]	@ (800d240 <pbuf_add_header_impl+0xcc>)
 800d192:	f009 fd33 	bl	8016bfc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d003      	beq.n	800d1a4 <pbuf_add_header_impl+0x30>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1a2:	d301      	bcc.n	800d1a8 <pbuf_add_header_impl+0x34>
    return 1;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e043      	b.n	800d230 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <pbuf_add_header_impl+0x3e>
    return 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e03e      	b.n	800d230 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	891a      	ldrh	r2, [r3, #8]
 800d1ba:	8a7b      	ldrh	r3, [r7, #18]
 800d1bc:	4413      	add	r3, r2
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	8a7a      	ldrh	r2, [r7, #18]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d901      	bls.n	800d1ca <pbuf_add_header_impl+0x56>
    return 1;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e032      	b.n	800d230 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	7b1b      	ldrb	r3, [r3, #12]
 800d1ce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d1d0:	8a3b      	ldrh	r3, [r7, #16]
 800d1d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00c      	beq.n	800d1f4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	685a      	ldr	r2, [r3, #4]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	425b      	negs	r3, r3
 800d1e2:	4413      	add	r3, r2
 800d1e4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3310      	adds	r3, #16
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d20d      	bcs.n	800d20c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e01d      	b.n	800d230 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d1f4:	79fb      	ldrb	r3, [r7, #7]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d006      	beq.n	800d208 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	685a      	ldr	r2, [r3, #4]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	425b      	negs	r3, r3
 800d202:	4413      	add	r3, r2
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	e001      	b.n	800d20c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d208:	2301      	movs	r3, #1
 800d20a:	e011      	b.n	800d230 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	895a      	ldrh	r2, [r3, #10]
 800d216:	8a7b      	ldrh	r3, [r7, #18]
 800d218:	4413      	add	r3, r2
 800d21a:	b29a      	uxth	r2, r3
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	891a      	ldrh	r2, [r3, #8]
 800d224:	8a7b      	ldrh	r3, [r7, #18]
 800d226:	4413      	add	r3, r2
 800d228:	b29a      	uxth	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	811a      	strh	r2, [r3, #8]


  return 0;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	08018140 	.word	0x08018140
 800d23c:	080182a4 	.word	0x080182a4
 800d240:	080181a0 	.word	0x080181a0

0800d244 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d24e:	2200      	movs	r2, #0
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff ff8e 	bl	800d174 <pbuf_add_header_impl>
 800d258:	4603      	mov	r3, r0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d106      	bne.n	800d282 <pbuf_remove_header+0x1e>
 800d274:	4b20      	ldr	r3, [pc, #128]	@ (800d2f8 <pbuf_remove_header+0x94>)
 800d276:	f240 224b 	movw	r2, #587	@ 0x24b
 800d27a:	4920      	ldr	r1, [pc, #128]	@ (800d2fc <pbuf_remove_header+0x98>)
 800d27c:	4820      	ldr	r0, [pc, #128]	@ (800d300 <pbuf_remove_header+0x9c>)
 800d27e:	f009 fcbd 	bl	8016bfc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d003      	beq.n	800d290 <pbuf_remove_header+0x2c>
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d28e:	d301      	bcc.n	800d294 <pbuf_remove_header+0x30>
    return 1;
 800d290:	2301      	movs	r3, #1
 800d292:	e02c      	b.n	800d2ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d101      	bne.n	800d29e <pbuf_remove_header+0x3a>
    return 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	e027      	b.n	800d2ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	895b      	ldrh	r3, [r3, #10]
 800d2a6:	89fa      	ldrh	r2, [r7, #14]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d908      	bls.n	800d2be <pbuf_remove_header+0x5a>
 800d2ac:	4b12      	ldr	r3, [pc, #72]	@ (800d2f8 <pbuf_remove_header+0x94>)
 800d2ae:	f240 2255 	movw	r2, #597	@ 0x255
 800d2b2:	4914      	ldr	r1, [pc, #80]	@ (800d304 <pbuf_remove_header+0xa0>)
 800d2b4:	4812      	ldr	r0, [pc, #72]	@ (800d300 <pbuf_remove_header+0x9c>)
 800d2b6:	f009 fca1 	bl	8016bfc <iprintf>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e017      	b.n	800d2ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	441a      	add	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	895a      	ldrh	r2, [r3, #10]
 800d2d4:	89fb      	ldrh	r3, [r7, #14]
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	891a      	ldrh	r2, [r3, #8]
 800d2e2:	89fb      	ldrh	r3, [r7, #14]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	08018140 	.word	0x08018140
 800d2fc:	080182a4 	.word	0x080182a4
 800d300:	080181a0 	.word	0x080181a0
 800d304:	080182b0 	.word	0x080182b0

0800d308 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	807b      	strh	r3, [r7, #2]
 800d314:	4613      	mov	r3, r2
 800d316:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	da08      	bge.n	800d332 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d320:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d324:	425b      	negs	r3, r3
 800d326:	4619      	mov	r1, r3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7ff ff9b 	bl	800d264 <pbuf_remove_header>
 800d32e:	4603      	mov	r3, r0
 800d330:	e007      	b.n	800d342 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d332:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d336:	787a      	ldrb	r2, [r7, #1]
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7ff ff1a 	bl	800d174 <pbuf_add_header_impl>
 800d340:	4603      	mov	r3, r0
  }
}
 800d342:	4618      	mov	r0, r3
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d356:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d35a:	2201      	movs	r2, #1
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff ffd2 	bl	800d308 <pbuf_header_impl>
 800d364:	4603      	mov	r3, r0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10b      	bne.n	800d396 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d106      	bne.n	800d392 <pbuf_free+0x22>
 800d384:	4b38      	ldr	r3, [pc, #224]	@ (800d468 <pbuf_free+0xf8>)
 800d386:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d38a:	4938      	ldr	r1, [pc, #224]	@ (800d46c <pbuf_free+0xfc>)
 800d38c:	4838      	ldr	r0, [pc, #224]	@ (800d470 <pbuf_free+0x100>)
 800d38e:	f009 fc35 	bl	8016bfc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d392:	2300      	movs	r3, #0
 800d394:	e063      	b.n	800d45e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d39a:	e05c      	b.n	800d456 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	7b9b      	ldrb	r3, [r3, #14]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <pbuf_free+0x42>
 800d3a4:	4b30      	ldr	r3, [pc, #192]	@ (800d468 <pbuf_free+0xf8>)
 800d3a6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d3aa:	4932      	ldr	r1, [pc, #200]	@ (800d474 <pbuf_free+0x104>)
 800d3ac:	4830      	ldr	r0, [pc, #192]	@ (800d470 <pbuf_free+0x100>)
 800d3ae:	f009 fc25 	bl	8016bfc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	7b9b      	ldrb	r3, [r3, #14]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	739a      	strb	r2, [r3, #14]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	7b9b      	ldrb	r3, [r3, #14]
 800d3c2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d3c4:	7dbb      	ldrb	r3, [r7, #22]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d143      	bne.n	800d452 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7b1b      	ldrb	r3, [r3, #12]
 800d3d4:	f003 030f 	and.w	r3, r3, #15
 800d3d8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	7b5b      	ldrb	r3, [r3, #13]
 800d3de:	f003 0302 	and.w	r3, r3, #2
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d011      	beq.n	800d40a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <pbuf_free+0x90>
 800d3f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d468 <pbuf_free+0xf8>)
 800d3f4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d3f8:	491f      	ldr	r1, [pc, #124]	@ (800d478 <pbuf_free+0x108>)
 800d3fa:	481d      	ldr	r0, [pc, #116]	@ (800d470 <pbuf_free+0x100>)
 800d3fc:	f009 fbfe 	bl	8016bfc <iprintf>
        pc->custom_free_function(p);
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	4798      	blx	r3
 800d408:	e01d      	b.n	800d446 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d104      	bne.n	800d41a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	2008      	movs	r0, #8
 800d414:	f7ff f936 	bl	800c684 <memp_free>
 800d418:	e015      	b.n	800d446 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d104      	bne.n	800d42a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d420:	6879      	ldr	r1, [r7, #4]
 800d422:	2007      	movs	r0, #7
 800d424:	f7ff f92e 	bl	800c684 <memp_free>
 800d428:	e00d      	b.n	800d446 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d103      	bne.n	800d438 <pbuf_free+0xc8>
          mem_free(p);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7fe fdc1 	bl	800bfb8 <mem_free>
 800d436:	e006      	b.n	800d446 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d438:	4b0b      	ldr	r3, [pc, #44]	@ (800d468 <pbuf_free+0xf8>)
 800d43a:	f240 320f 	movw	r2, #783	@ 0x30f
 800d43e:	490f      	ldr	r1, [pc, #60]	@ (800d47c <pbuf_free+0x10c>)
 800d440:	480b      	ldr	r0, [pc, #44]	@ (800d470 <pbuf_free+0x100>)
 800d442:	f009 fbdb 	bl	8016bfc <iprintf>
        }
      }
      count++;
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	3301      	adds	r3, #1
 800d44a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	607b      	str	r3, [r7, #4]
 800d450:	e001      	b.n	800d456 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d452:	2300      	movs	r3, #0
 800d454:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d19f      	bne.n	800d39c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3718      	adds	r7, #24
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	08018140 	.word	0x08018140
 800d46c:	080182a4 	.word	0x080182a4
 800d470:	080181a0 	.word	0x080181a0
 800d474:	080182d0 	.word	0x080182d0
 800d478:	080182e8 	.word	0x080182e8
 800d47c:	0801830c 	.word	0x0801830c

0800d480 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d480:	b480      	push	{r7}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d488:	2300      	movs	r3, #0
 800d48a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d48c:	e005      	b.n	800d49a <pbuf_clen+0x1a>
    ++len;
 800d48e:	89fb      	ldrh	r3, [r7, #14]
 800d490:	3301      	adds	r3, #1
 800d492:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f6      	bne.n	800d48e <pbuf_clen+0xe>
  }
  return len;
 800d4a0:	89fb      	ldrh	r3, [r7, #14]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3714      	adds	r7, #20
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
	...

0800d4b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d010      	beq.n	800d4e0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7b9b      	ldrb	r3, [r3, #14]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7b9b      	ldrb	r3, [r3, #14]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <pbuf_ref+0x30>
 800d4d2:	4b05      	ldr	r3, [pc, #20]	@ (800d4e8 <pbuf_ref+0x38>)
 800d4d4:	f240 3242 	movw	r2, #834	@ 0x342
 800d4d8:	4904      	ldr	r1, [pc, #16]	@ (800d4ec <pbuf_ref+0x3c>)
 800d4da:	4805      	ldr	r0, [pc, #20]	@ (800d4f0 <pbuf_ref+0x40>)
 800d4dc:	f009 fb8e 	bl	8016bfc <iprintf>
  }
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	08018140 	.word	0x08018140
 800d4ec:	08018320 	.word	0x08018320
 800d4f0:	080181a0 	.word	0x080181a0

0800d4f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <pbuf_cat+0x16>
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d107      	bne.n	800d51a <pbuf_cat+0x26>
 800d50a:	4b20      	ldr	r3, [pc, #128]	@ (800d58c <pbuf_cat+0x98>)
 800d50c:	f240 3259 	movw	r2, #857	@ 0x359
 800d510:	491f      	ldr	r1, [pc, #124]	@ (800d590 <pbuf_cat+0x9c>)
 800d512:	4820      	ldr	r0, [pc, #128]	@ (800d594 <pbuf_cat+0xa0>)
 800d514:	f009 fb72 	bl	8016bfc <iprintf>
 800d518:	e034      	b.n	800d584 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	60fb      	str	r3, [r7, #12]
 800d51e:	e00a      	b.n	800d536 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	891a      	ldrh	r2, [r3, #8]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	891b      	ldrh	r3, [r3, #8]
 800d528:	4413      	add	r3, r2
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1f0      	bne.n	800d520 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	891a      	ldrh	r2, [r3, #8]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	895b      	ldrh	r3, [r3, #10]
 800d546:	429a      	cmp	r2, r3
 800d548:	d006      	beq.n	800d558 <pbuf_cat+0x64>
 800d54a:	4b10      	ldr	r3, [pc, #64]	@ (800d58c <pbuf_cat+0x98>)
 800d54c:	f240 3262 	movw	r2, #866	@ 0x362
 800d550:	4911      	ldr	r1, [pc, #68]	@ (800d598 <pbuf_cat+0xa4>)
 800d552:	4810      	ldr	r0, [pc, #64]	@ (800d594 <pbuf_cat+0xa0>)
 800d554:	f009 fb52 	bl	8016bfc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d006      	beq.n	800d56e <pbuf_cat+0x7a>
 800d560:	4b0a      	ldr	r3, [pc, #40]	@ (800d58c <pbuf_cat+0x98>)
 800d562:	f240 3263 	movw	r2, #867	@ 0x363
 800d566:	490d      	ldr	r1, [pc, #52]	@ (800d59c <pbuf_cat+0xa8>)
 800d568:	480a      	ldr	r0, [pc, #40]	@ (800d594 <pbuf_cat+0xa0>)
 800d56a:	f009 fb47 	bl	8016bfc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	891a      	ldrh	r2, [r3, #8]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	891b      	ldrh	r3, [r3, #8]
 800d576:	4413      	add	r3, r2
 800d578:	b29a      	uxth	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	08018140 	.word	0x08018140
 800d590:	08018334 	.word	0x08018334
 800d594:	080181a0 	.word	0x080181a0
 800d598:	0801836c 	.word	0x0801836c
 800d59c:	0801839c 	.word	0x0801839c

0800d5a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7ff ffa1 	bl	800d4f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d5b2:	6838      	ldr	r0, [r7, #0]
 800d5b4:	f7ff ff7c 	bl	800d4b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d5b8:	bf00      	nop
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d008      	beq.n	800d5ea <pbuf_copy+0x2a>
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d005      	beq.n	800d5ea <pbuf_copy+0x2a>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	891a      	ldrh	r2, [r3, #8]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	891b      	ldrh	r3, [r3, #8]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d209      	bcs.n	800d5fe <pbuf_copy+0x3e>
 800d5ea:	4b57      	ldr	r3, [pc, #348]	@ (800d748 <pbuf_copy+0x188>)
 800d5ec:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d5f0:	4956      	ldr	r1, [pc, #344]	@ (800d74c <pbuf_copy+0x18c>)
 800d5f2:	4857      	ldr	r0, [pc, #348]	@ (800d750 <pbuf_copy+0x190>)
 800d5f4:	f009 fb02 	bl	8016bfc <iprintf>
 800d5f8:	f06f 030f 	mvn.w	r3, #15
 800d5fc:	e09f      	b.n	800d73e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	895b      	ldrh	r3, [r3, #10]
 800d602:	461a      	mov	r2, r3
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	1ad2      	subs	r2, r2, r3
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	895b      	ldrh	r3, [r3, #10]
 800d60c:	4619      	mov	r1, r3
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	1acb      	subs	r3, r1, r3
 800d612:	429a      	cmp	r2, r3
 800d614:	d306      	bcc.n	800d624 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	895b      	ldrh	r3, [r3, #10]
 800d61a:	461a      	mov	r2, r3
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	60fb      	str	r3, [r7, #12]
 800d622:	e005      	b.n	800d630 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	895b      	ldrh	r3, [r3, #10]
 800d628:	461a      	mov	r2, r3
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685a      	ldr	r2, [r3, #4]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	18d0      	adds	r0, r2, r3
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	4413      	add	r3, r2
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	4619      	mov	r1, r3
 800d644:	f009 fce7 	bl	8017016 <memcpy>
    offset_to += len;
 800d648:	697a      	ldr	r2, [r7, #20]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	4413      	add	r3, r2
 800d64e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d650:	693a      	ldr	r2, [r7, #16]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	4413      	add	r3, r2
 800d656:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	895b      	ldrh	r3, [r3, #10]
 800d65c:	461a      	mov	r2, r3
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	4293      	cmp	r3, r2
 800d662:	d906      	bls.n	800d672 <pbuf_copy+0xb2>
 800d664:	4b38      	ldr	r3, [pc, #224]	@ (800d748 <pbuf_copy+0x188>)
 800d666:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d66a:	493a      	ldr	r1, [pc, #232]	@ (800d754 <pbuf_copy+0x194>)
 800d66c:	4838      	ldr	r0, [pc, #224]	@ (800d750 <pbuf_copy+0x190>)
 800d66e:	f009 fac5 	bl	8016bfc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	895b      	ldrh	r3, [r3, #10]
 800d676:	461a      	mov	r2, r3
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d906      	bls.n	800d68c <pbuf_copy+0xcc>
 800d67e:	4b32      	ldr	r3, [pc, #200]	@ (800d748 <pbuf_copy+0x188>)
 800d680:	f240 32da 	movw	r2, #986	@ 0x3da
 800d684:	4934      	ldr	r1, [pc, #208]	@ (800d758 <pbuf_copy+0x198>)
 800d686:	4832      	ldr	r0, [pc, #200]	@ (800d750 <pbuf_copy+0x190>)
 800d688:	f009 fab8 	bl	8016bfc <iprintf>
    if (offset_from >= p_from->len) {
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	895b      	ldrh	r3, [r3, #10]
 800d690:	461a      	mov	r2, r3
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	4293      	cmp	r3, r2
 800d696:	d304      	bcc.n	800d6a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	895b      	ldrh	r3, [r3, #10]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d114      	bne.n	800d6d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10c      	bne.n	800d6d8 <pbuf_copy+0x118>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d009      	beq.n	800d6d8 <pbuf_copy+0x118>
 800d6c4:	4b20      	ldr	r3, [pc, #128]	@ (800d748 <pbuf_copy+0x188>)
 800d6c6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d6ca:	4924      	ldr	r1, [pc, #144]	@ (800d75c <pbuf_copy+0x19c>)
 800d6cc:	4820      	ldr	r0, [pc, #128]	@ (800d750 <pbuf_copy+0x190>)
 800d6ce:	f009 fa95 	bl	8016bfc <iprintf>
 800d6d2:	f06f 030f 	mvn.w	r3, #15
 800d6d6:	e032      	b.n	800d73e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d013      	beq.n	800d706 <pbuf_copy+0x146>
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	895a      	ldrh	r2, [r3, #10]
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	891b      	ldrh	r3, [r3, #8]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d10d      	bne.n	800d706 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d009      	beq.n	800d706 <pbuf_copy+0x146>
 800d6f2:	4b15      	ldr	r3, [pc, #84]	@ (800d748 <pbuf_copy+0x188>)
 800d6f4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d6f8:	4919      	ldr	r1, [pc, #100]	@ (800d760 <pbuf_copy+0x1a0>)
 800d6fa:	4815      	ldr	r0, [pc, #84]	@ (800d750 <pbuf_copy+0x190>)
 800d6fc:	f009 fa7e 	bl	8016bfc <iprintf>
 800d700:	f06f 0305 	mvn.w	r3, #5
 800d704:	e01b      	b.n	800d73e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d013      	beq.n	800d734 <pbuf_copy+0x174>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	895a      	ldrh	r2, [r3, #10]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	891b      	ldrh	r3, [r3, #8]
 800d714:	429a      	cmp	r2, r3
 800d716:	d10d      	bne.n	800d734 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d009      	beq.n	800d734 <pbuf_copy+0x174>
 800d720:	4b09      	ldr	r3, [pc, #36]	@ (800d748 <pbuf_copy+0x188>)
 800d722:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d726:	490e      	ldr	r1, [pc, #56]	@ (800d760 <pbuf_copy+0x1a0>)
 800d728:	4809      	ldr	r0, [pc, #36]	@ (800d750 <pbuf_copy+0x190>)
 800d72a:	f009 fa67 	bl	8016bfc <iprintf>
 800d72e:	f06f 0305 	mvn.w	r3, #5
 800d732:	e004      	b.n	800d73e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	f47f af61 	bne.w	800d5fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	08018140 	.word	0x08018140
 800d74c:	080183e8 	.word	0x080183e8
 800d750:	080181a0 	.word	0x080181a0
 800d754:	08018418 	.word	0x08018418
 800d758:	08018430 	.word	0x08018430
 800d75c:	0801844c 	.word	0x0801844c
 800d760:	0801845c 	.word	0x0801845c

0800d764 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	4611      	mov	r1, r2
 800d770:	461a      	mov	r2, r3
 800d772:	460b      	mov	r3, r1
 800d774:	80fb      	strh	r3, [r7, #6]
 800d776:	4613      	mov	r3, r2
 800d778:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d108      	bne.n	800d79a <pbuf_copy_partial+0x36>
 800d788:	4b2b      	ldr	r3, [pc, #172]	@ (800d838 <pbuf_copy_partial+0xd4>)
 800d78a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d78e:	492b      	ldr	r1, [pc, #172]	@ (800d83c <pbuf_copy_partial+0xd8>)
 800d790:	482b      	ldr	r0, [pc, #172]	@ (800d840 <pbuf_copy_partial+0xdc>)
 800d792:	f009 fa33 	bl	8016bfc <iprintf>
 800d796:	2300      	movs	r3, #0
 800d798:	e04a      	b.n	800d830 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d108      	bne.n	800d7b2 <pbuf_copy_partial+0x4e>
 800d7a0:	4b25      	ldr	r3, [pc, #148]	@ (800d838 <pbuf_copy_partial+0xd4>)
 800d7a2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d7a6:	4927      	ldr	r1, [pc, #156]	@ (800d844 <pbuf_copy_partial+0xe0>)
 800d7a8:	4825      	ldr	r0, [pc, #148]	@ (800d840 <pbuf_copy_partial+0xdc>)
 800d7aa:	f009 fa27 	bl	8016bfc <iprintf>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e03e      	b.n	800d830 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	61fb      	str	r3, [r7, #28]
 800d7b6:	e034      	b.n	800d822 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d7b8:	88bb      	ldrh	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00a      	beq.n	800d7d4 <pbuf_copy_partial+0x70>
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	895b      	ldrh	r3, [r3, #10]
 800d7c2:	88ba      	ldrh	r2, [r7, #4]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d305      	bcc.n	800d7d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	895b      	ldrh	r3, [r3, #10]
 800d7cc:	88ba      	ldrh	r2, [r7, #4]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	80bb      	strh	r3, [r7, #4]
 800d7d2:	e023      	b.n	800d81c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	895a      	ldrh	r2, [r3, #10]
 800d7d8:	88bb      	ldrh	r3, [r7, #4]
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d7de:	8b3a      	ldrh	r2, [r7, #24]
 800d7e0:	88fb      	ldrh	r3, [r7, #6]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d901      	bls.n	800d7ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d7e6:	88fb      	ldrh	r3, [r7, #6]
 800d7e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d7ea:	8b7b      	ldrh	r3, [r7, #26]
 800d7ec:	68ba      	ldr	r2, [r7, #8]
 800d7ee:	18d0      	adds	r0, r2, r3
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	685a      	ldr	r2, [r3, #4]
 800d7f4:	88bb      	ldrh	r3, [r7, #4]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	8b3a      	ldrh	r2, [r7, #24]
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	f009 fc0b 	bl	8017016 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d800:	8afa      	ldrh	r2, [r7, #22]
 800d802:	8b3b      	ldrh	r3, [r7, #24]
 800d804:	4413      	add	r3, r2
 800d806:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d808:	8b7a      	ldrh	r2, [r7, #26]
 800d80a:	8b3b      	ldrh	r3, [r7, #24]
 800d80c:	4413      	add	r3, r2
 800d80e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d810:	88fa      	ldrh	r2, [r7, #6]
 800d812:	8b3b      	ldrh	r3, [r7, #24]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	61fb      	str	r3, [r7, #28]
 800d822:	88fb      	ldrh	r3, [r7, #6]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <pbuf_copy_partial+0xca>
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1c4      	bne.n	800d7b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d82e:	8afb      	ldrh	r3, [r7, #22]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3720      	adds	r7, #32
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	08018140 	.word	0x08018140
 800d83c:	08018488 	.word	0x08018488
 800d840:	080181a0 	.word	0x080181a0
 800d844:	080184a8 	.word	0x080184a8

0800d848 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	4603      	mov	r3, r0
 800d850:	603a      	str	r2, [r7, #0]
 800d852:	71fb      	strb	r3, [r7, #7]
 800d854:	460b      	mov	r3, r1
 800d856:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	8919      	ldrh	r1, [r3, #8]
 800d85c:	88ba      	ldrh	r2, [r7, #4]
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff faa1 	bl	800cda8 <pbuf_alloc>
 800d866:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d101      	bne.n	800d872 <pbuf_clone+0x2a>
    return NULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	e011      	b.n	800d896 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f7ff fea3 	bl	800d5c0 <pbuf_copy>
 800d87a:	4603      	mov	r3, r0
 800d87c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d87e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d006      	beq.n	800d894 <pbuf_clone+0x4c>
 800d886:	4b06      	ldr	r3, [pc, #24]	@ (800d8a0 <pbuf_clone+0x58>)
 800d888:	f240 5224 	movw	r2, #1316	@ 0x524
 800d88c:	4905      	ldr	r1, [pc, #20]	@ (800d8a4 <pbuf_clone+0x5c>)
 800d88e:	4806      	ldr	r0, [pc, #24]	@ (800d8a8 <pbuf_clone+0x60>)
 800d890:	f009 f9b4 	bl	8016bfc <iprintf>
  return q;
 800d894:	68fb      	ldr	r3, [r7, #12]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	08018140 	.word	0x08018140
 800d8a4:	080185b4 	.word	0x080185b4
 800d8a8:	080181a0 	.word	0x080181a0

0800d8ac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d8b0:	f009 f8a4 	bl	80169fc <rand>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	4b01      	ldr	r3, [pc, #4]	@ (800d8cc <tcp_init+0x20>)
 800d8c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d8c8:	bf00      	nop
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	20000020 	.word	0x20000020

0800d8d0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	7d1b      	ldrb	r3, [r3, #20]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d105      	bne.n	800d8ec <tcp_free+0x1c>
 800d8e0:	4b06      	ldr	r3, [pc, #24]	@ (800d8fc <tcp_free+0x2c>)
 800d8e2:	22d4      	movs	r2, #212	@ 0xd4
 800d8e4:	4906      	ldr	r1, [pc, #24]	@ (800d900 <tcp_free+0x30>)
 800d8e6:	4807      	ldr	r0, [pc, #28]	@ (800d904 <tcp_free+0x34>)
 800d8e8:	f009 f988 	bl	8016bfc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	f7fe fec8 	bl	800c684 <memp_free>
}
 800d8f4:	bf00      	nop
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	08018640 	.word	0x08018640
 800d900:	08018670 	.word	0x08018670
 800d904:	08018684 	.word	0x08018684

0800d908 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7d1b      	ldrb	r3, [r3, #20]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d105      	bne.n	800d924 <tcp_free_listen+0x1c>
 800d918:	4b06      	ldr	r3, [pc, #24]	@ (800d934 <tcp_free_listen+0x2c>)
 800d91a:	22df      	movs	r2, #223	@ 0xdf
 800d91c:	4906      	ldr	r1, [pc, #24]	@ (800d938 <tcp_free_listen+0x30>)
 800d91e:	4807      	ldr	r0, [pc, #28]	@ (800d93c <tcp_free_listen+0x34>)
 800d920:	f009 f96c 	bl	8016bfc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d924:	6879      	ldr	r1, [r7, #4]
 800d926:	2002      	movs	r0, #2
 800d928:	f7fe feac 	bl	800c684 <memp_free>
}
 800d92c:	bf00      	nop
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	08018640 	.word	0x08018640
 800d938:	080186ac 	.word	0x080186ac
 800d93c:	08018684 	.word	0x08018684

0800d940 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d944:	f000 fea4 	bl	800e690 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d948:	4b07      	ldr	r3, [pc, #28]	@ (800d968 <tcp_tmr+0x28>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	3301      	adds	r3, #1
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	4b05      	ldr	r3, [pc, #20]	@ (800d968 <tcp_tmr+0x28>)
 800d952:	701a      	strb	r2, [r3, #0]
 800d954:	4b04      	ldr	r3, [pc, #16]	@ (800d968 <tcp_tmr+0x28>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f003 0301 	and.w	r3, r3, #1
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d960:	f000 fb54 	bl	800e00c <tcp_slowtmr>
  }
}
 800d964:	bf00      	nop
 800d966:	bd80      	pop	{r7, pc}
 800d968:	20008c15 	.word	0x20008c15

0800d96c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d105      	bne.n	800d988 <tcp_remove_listener+0x1c>
 800d97c:	4b0d      	ldr	r3, [pc, #52]	@ (800d9b4 <tcp_remove_listener+0x48>)
 800d97e:	22ff      	movs	r2, #255	@ 0xff
 800d980:	490d      	ldr	r1, [pc, #52]	@ (800d9b8 <tcp_remove_listener+0x4c>)
 800d982:	480e      	ldr	r0, [pc, #56]	@ (800d9bc <tcp_remove_listener+0x50>)
 800d984:	f009 f93a 	bl	8016bfc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	60fb      	str	r3, [r7, #12]
 800d98c:	e00a      	b.n	800d9a4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	429a      	cmp	r2, r3
 800d996:	d102      	bne.n	800d99e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1f1      	bne.n	800d98e <tcp_remove_listener+0x22>
    }
  }
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	08018640 	.word	0x08018640
 800d9b8:	080186c8 	.word	0x080186c8
 800d9bc:	08018684 	.word	0x08018684

0800d9c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <tcp_listen_closed+0x1c>
 800d9ce:	4b14      	ldr	r3, [pc, #80]	@ (800da20 <tcp_listen_closed+0x60>)
 800d9d0:	f240 1211 	movw	r2, #273	@ 0x111
 800d9d4:	4913      	ldr	r1, [pc, #76]	@ (800da24 <tcp_listen_closed+0x64>)
 800d9d6:	4814      	ldr	r0, [pc, #80]	@ (800da28 <tcp_listen_closed+0x68>)
 800d9d8:	f009 f910 	bl	8016bfc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7d1b      	ldrb	r3, [r3, #20]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d006      	beq.n	800d9f2 <tcp_listen_closed+0x32>
 800d9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800da20 <tcp_listen_closed+0x60>)
 800d9e6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d9ea:	4910      	ldr	r1, [pc, #64]	@ (800da2c <tcp_listen_closed+0x6c>)
 800d9ec:	480e      	ldr	r0, [pc, #56]	@ (800da28 <tcp_listen_closed+0x68>)
 800d9ee:	f009 f905 	bl	8016bfc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	60fb      	str	r3, [r7, #12]
 800d9f6:	e00b      	b.n	800da10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d9f8:	4a0d      	ldr	r2, [pc, #52]	@ (800da30 <tcp_listen_closed+0x70>)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6879      	ldr	r1, [r7, #4]
 800da04:	4618      	mov	r0, r3
 800da06:	f7ff ffb1 	bl	800d96c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3301      	adds	r3, #1
 800da0e:	60fb      	str	r3, [r7, #12]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2b03      	cmp	r3, #3
 800da14:	d9f0      	bls.n	800d9f8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800da16:	bf00      	nop
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	08018640 	.word	0x08018640
 800da24:	080186f0 	.word	0x080186f0
 800da28:	08018684 	.word	0x08018684
 800da2c:	080186fc 	.word	0x080186fc
 800da30:	0801ad88 	.word	0x0801ad88

0800da34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800da34:	b5b0      	push	{r4, r5, r7, lr}
 800da36:	b088      	sub	sp, #32
 800da38:	af04      	add	r7, sp, #16
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <tcp_close_shutdown+0x20>
 800da46:	4b63      	ldr	r3, [pc, #396]	@ (800dbd4 <tcp_close_shutdown+0x1a0>)
 800da48:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800da4c:	4962      	ldr	r1, [pc, #392]	@ (800dbd8 <tcp_close_shutdown+0x1a4>)
 800da4e:	4863      	ldr	r0, [pc, #396]	@ (800dbdc <tcp_close_shutdown+0x1a8>)
 800da50:	f009 f8d4 	bl	8016bfc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800da54:	78fb      	ldrb	r3, [r7, #3]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d066      	beq.n	800db28 <tcp_close_shutdown+0xf4>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7d1b      	ldrb	r3, [r3, #20]
 800da5e:	2b04      	cmp	r3, #4
 800da60:	d003      	beq.n	800da6a <tcp_close_shutdown+0x36>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	7d1b      	ldrb	r3, [r3, #20]
 800da66:	2b07      	cmp	r3, #7
 800da68:	d15e      	bne.n	800db28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d104      	bne.n	800da7c <tcp_close_shutdown+0x48>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da76:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800da7a:	d055      	beq.n	800db28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8b5b      	ldrh	r3, [r3, #26]
 800da80:	f003 0310 	and.w	r3, r3, #16
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <tcp_close_shutdown+0x62>
 800da88:	4b52      	ldr	r3, [pc, #328]	@ (800dbd4 <tcp_close_shutdown+0x1a0>)
 800da8a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800da8e:	4954      	ldr	r1, [pc, #336]	@ (800dbe0 <tcp_close_shutdown+0x1ac>)
 800da90:	4852      	ldr	r0, [pc, #328]	@ (800dbdc <tcp_close_shutdown+0x1a8>)
 800da92:	f009 f8b3 	bl	8016bfc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800da9e:	687d      	ldr	r5, [r7, #4]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	3304      	adds	r3, #4
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	8ad2      	ldrh	r2, [r2, #22]
 800daa8:	6879      	ldr	r1, [r7, #4]
 800daaa:	8b09      	ldrh	r1, [r1, #24]
 800daac:	9102      	str	r1, [sp, #8]
 800daae:	9201      	str	r2, [sp, #4]
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	462b      	mov	r3, r5
 800dab4:	4622      	mov	r2, r4
 800dab6:	4601      	mov	r1, r0
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f004 fe8d 	bl	80127d8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f001 f8c8 	bl	800ec54 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dac4:	4b47      	ldr	r3, [pc, #284]	@ (800dbe4 <tcp_close_shutdown+0x1b0>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d105      	bne.n	800dada <tcp_close_shutdown+0xa6>
 800dace:	4b45      	ldr	r3, [pc, #276]	@ (800dbe4 <tcp_close_shutdown+0x1b0>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	4a43      	ldr	r2, [pc, #268]	@ (800dbe4 <tcp_close_shutdown+0x1b0>)
 800dad6:	6013      	str	r3, [r2, #0]
 800dad8:	e013      	b.n	800db02 <tcp_close_shutdown+0xce>
 800dada:	4b42      	ldr	r3, [pc, #264]	@ (800dbe4 <tcp_close_shutdown+0x1b0>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	60fb      	str	r3, [r7, #12]
 800dae0:	e00c      	b.n	800dafc <tcp_close_shutdown+0xc8>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d104      	bne.n	800daf6 <tcp_close_shutdown+0xc2>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	68da      	ldr	r2, [r3, #12]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	60da      	str	r2, [r3, #12]
 800daf4:	e005      	b.n	800db02 <tcp_close_shutdown+0xce>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	60fb      	str	r3, [r7, #12]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1ef      	bne.n	800dae2 <tcp_close_shutdown+0xae>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	60da      	str	r2, [r3, #12]
 800db08:	4b37      	ldr	r3, [pc, #220]	@ (800dbe8 <tcp_close_shutdown+0x1b4>)
 800db0a:	2201      	movs	r2, #1
 800db0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800db0e:	4b37      	ldr	r3, [pc, #220]	@ (800dbec <tcp_close_shutdown+0x1b8>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	429a      	cmp	r2, r3
 800db16:	d102      	bne.n	800db1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800db18:	f003 fd5c 	bl	80115d4 <tcp_trigger_input_pcb_close>
 800db1c:	e002      	b.n	800db24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7ff fed6 	bl	800d8d0 <tcp_free>
      }
      return ERR_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	e050      	b.n	800dbca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7d1b      	ldrb	r3, [r3, #20]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d03b      	beq.n	800dba8 <tcp_close_shutdown+0x174>
 800db30:	2b02      	cmp	r3, #2
 800db32:	dc44      	bgt.n	800dbbe <tcp_close_shutdown+0x18a>
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <tcp_close_shutdown+0x10a>
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d02a      	beq.n	800db92 <tcp_close_shutdown+0x15e>
 800db3c:	e03f      	b.n	800dbbe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	8adb      	ldrh	r3, [r3, #22]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d021      	beq.n	800db8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db46:	4b2a      	ldr	r3, [pc, #168]	@ (800dbf0 <tcp_close_shutdown+0x1bc>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d105      	bne.n	800db5c <tcp_close_shutdown+0x128>
 800db50:	4b27      	ldr	r3, [pc, #156]	@ (800dbf0 <tcp_close_shutdown+0x1bc>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	4a26      	ldr	r2, [pc, #152]	@ (800dbf0 <tcp_close_shutdown+0x1bc>)
 800db58:	6013      	str	r3, [r2, #0]
 800db5a:	e013      	b.n	800db84 <tcp_close_shutdown+0x150>
 800db5c:	4b24      	ldr	r3, [pc, #144]	@ (800dbf0 <tcp_close_shutdown+0x1bc>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	60bb      	str	r3, [r7, #8]
 800db62:	e00c      	b.n	800db7e <tcp_close_shutdown+0x14a>
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d104      	bne.n	800db78 <tcp_close_shutdown+0x144>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	68da      	ldr	r2, [r3, #12]
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	60da      	str	r2, [r3, #12]
 800db76:	e005      	b.n	800db84 <tcp_close_shutdown+0x150>
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	60bb      	str	r3, [r7, #8]
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1ef      	bne.n	800db64 <tcp_close_shutdown+0x130>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff fea0 	bl	800d8d0 <tcp_free>
      break;
 800db90:	e01a      	b.n	800dbc8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff ff14 	bl	800d9c0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800db98:	6879      	ldr	r1, [r7, #4]
 800db9a:	4816      	ldr	r0, [pc, #88]	@ (800dbf4 <tcp_close_shutdown+0x1c0>)
 800db9c:	f001 f8aa 	bl	800ecf4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff feb1 	bl	800d908 <tcp_free_listen>
      break;
 800dba6:	e00f      	b.n	800dbc8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dba8:	6879      	ldr	r1, [r7, #4]
 800dbaa:	480e      	ldr	r0, [pc, #56]	@ (800dbe4 <tcp_close_shutdown+0x1b0>)
 800dbac:	f001 f8a2 	bl	800ecf4 <tcp_pcb_remove>
 800dbb0:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe8 <tcp_close_shutdown+0x1b4>)
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fe8a 	bl	800d8d0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dbbc:	e004      	b.n	800dbc8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f81a 	bl	800dbf8 <tcp_close_shutdown_fin>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	e000      	b.n	800dbca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bdb0      	pop	{r4, r5, r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	08018640 	.word	0x08018640
 800dbd8:	08018714 	.word	0x08018714
 800dbdc:	08018684 	.word	0x08018684
 800dbe0:	08018734 	.word	0x08018734
 800dbe4:	20008c0c 	.word	0x20008c0c
 800dbe8:	20008c14 	.word	0x20008c14
 800dbec:	20008c4c 	.word	0x20008c4c
 800dbf0:	20008c04 	.word	0x20008c04
 800dbf4:	20008c08 	.word	0x20008c08

0800dbf8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d106      	bne.n	800dc14 <tcp_close_shutdown_fin+0x1c>
 800dc06:	4b2e      	ldr	r3, [pc, #184]	@ (800dcc0 <tcp_close_shutdown_fin+0xc8>)
 800dc08:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800dc0c:	492d      	ldr	r1, [pc, #180]	@ (800dcc4 <tcp_close_shutdown_fin+0xcc>)
 800dc0e:	482e      	ldr	r0, [pc, #184]	@ (800dcc8 <tcp_close_shutdown_fin+0xd0>)
 800dc10:	f008 fff4 	bl	8016bfc <iprintf>

  switch (pcb->state) {
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	7d1b      	ldrb	r3, [r3, #20]
 800dc18:	2b07      	cmp	r3, #7
 800dc1a:	d020      	beq.n	800dc5e <tcp_close_shutdown_fin+0x66>
 800dc1c:	2b07      	cmp	r3, #7
 800dc1e:	dc2b      	bgt.n	800dc78 <tcp_close_shutdown_fin+0x80>
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d002      	beq.n	800dc2a <tcp_close_shutdown_fin+0x32>
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d00d      	beq.n	800dc44 <tcp_close_shutdown_fin+0x4c>
 800dc28:	e026      	b.n	800dc78 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f003 fee2 	bl	80119f4 <tcp_send_fin>
 800dc30:	4603      	mov	r3, r0
 800dc32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d11f      	bne.n	800dc7c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2205      	movs	r2, #5
 800dc40:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc42:	e01b      	b.n	800dc7c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f003 fed5 	bl	80119f4 <tcp_send_fin>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d114      	bne.n	800dc80 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2205      	movs	r2, #5
 800dc5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc5c:	e010      	b.n	800dc80 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f003 fec8 	bl	80119f4 <tcp_send_fin>
 800dc64:	4603      	mov	r3, r0
 800dc66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d109      	bne.n	800dc84 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2209      	movs	r2, #9
 800dc74:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc76:	e005      	b.n	800dc84 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e01c      	b.n	800dcb6 <tcp_close_shutdown_fin+0xbe>
      break;
 800dc7c:	bf00      	nop
 800dc7e:	e002      	b.n	800dc86 <tcp_close_shutdown_fin+0x8e>
      break;
 800dc80:	bf00      	nop
 800dc82:	e000      	b.n	800dc86 <tcp_close_shutdown_fin+0x8e>
      break;
 800dc84:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dc86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d103      	bne.n	800dc96 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f003 ffee 	bl	8011c70 <tcp_output>
 800dc94:	e00d      	b.n	800dcb2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dc96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc9e:	d108      	bne.n	800dcb2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	8b5b      	ldrh	r3, [r3, #26]
 800dca4:	f043 0308 	orr.w	r3, r3, #8
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e001      	b.n	800dcb6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dcb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	08018640 	.word	0x08018640
 800dcc4:	080186f0 	.word	0x080186f0
 800dcc8:	08018684 	.word	0x08018684

0800dccc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d109      	bne.n	800dcee <tcp_close+0x22>
 800dcda:	4b0f      	ldr	r3, [pc, #60]	@ (800dd18 <tcp_close+0x4c>)
 800dcdc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800dce0:	490e      	ldr	r1, [pc, #56]	@ (800dd1c <tcp_close+0x50>)
 800dce2:	480f      	ldr	r0, [pc, #60]	@ (800dd20 <tcp_close+0x54>)
 800dce4:	f008 ff8a 	bl	8016bfc <iprintf>
 800dce8:	f06f 030f 	mvn.w	r3, #15
 800dcec:	e00f      	b.n	800dd0e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	7d1b      	ldrb	r3, [r3, #20]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d006      	beq.n	800dd04 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	8b5b      	ldrh	r3, [r3, #26]
 800dcfa:	f043 0310 	orr.w	r3, r3, #16
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dd04:	2101      	movs	r1, #1
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7ff fe94 	bl	800da34 <tcp_close_shutdown>
 800dd0c:	4603      	mov	r3, r0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	08018640 	.word	0x08018640
 800dd1c:	08018750 	.word	0x08018750
 800dd20:	08018684 	.word	0x08018684

0800dd24 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08e      	sub	sp, #56	@ 0x38
 800dd28:	af04      	add	r7, sp, #16
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <tcp_abandon+0x20>
 800dd34:	4b52      	ldr	r3, [pc, #328]	@ (800de80 <tcp_abandon+0x15c>)
 800dd36:	f240 223d 	movw	r2, #573	@ 0x23d
 800dd3a:	4952      	ldr	r1, [pc, #328]	@ (800de84 <tcp_abandon+0x160>)
 800dd3c:	4852      	ldr	r0, [pc, #328]	@ (800de88 <tcp_abandon+0x164>)
 800dd3e:	f008 ff5d 	bl	8016bfc <iprintf>
 800dd42:	e099      	b.n	800de78 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	7d1b      	ldrb	r3, [r3, #20]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d106      	bne.n	800dd5a <tcp_abandon+0x36>
 800dd4c:	4b4c      	ldr	r3, [pc, #304]	@ (800de80 <tcp_abandon+0x15c>)
 800dd4e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800dd52:	494e      	ldr	r1, [pc, #312]	@ (800de8c <tcp_abandon+0x168>)
 800dd54:	484c      	ldr	r0, [pc, #304]	@ (800de88 <tcp_abandon+0x164>)
 800dd56:	f008 ff51 	bl	8016bfc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	7d1b      	ldrb	r3, [r3, #20]
 800dd5e:	2b0a      	cmp	r3, #10
 800dd60:	d107      	bne.n	800dd72 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	484a      	ldr	r0, [pc, #296]	@ (800de90 <tcp_abandon+0x16c>)
 800dd66:	f000 ffc5 	bl	800ecf4 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff fdb0 	bl	800d8d0 <tcp_free>
 800dd70:	e082      	b.n	800de78 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd7e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd84:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd8c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7d1b      	ldrb	r3, [r3, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d126      	bne.n	800ddea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	8adb      	ldrh	r3, [r3, #22]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d02e      	beq.n	800de02 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dda4:	4b3b      	ldr	r3, [pc, #236]	@ (800de94 <tcp_abandon+0x170>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d105      	bne.n	800ddba <tcp_abandon+0x96>
 800ddae:	4b39      	ldr	r3, [pc, #228]	@ (800de94 <tcp_abandon+0x170>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	4a37      	ldr	r2, [pc, #220]	@ (800de94 <tcp_abandon+0x170>)
 800ddb6:	6013      	str	r3, [r2, #0]
 800ddb8:	e013      	b.n	800dde2 <tcp_abandon+0xbe>
 800ddba:	4b36      	ldr	r3, [pc, #216]	@ (800de94 <tcp_abandon+0x170>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	61fb      	str	r3, [r7, #28]
 800ddc0:	e00c      	b.n	800dddc <tcp_abandon+0xb8>
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d104      	bne.n	800ddd6 <tcp_abandon+0xb2>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	68da      	ldr	r2, [r3, #12]
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	60da      	str	r2, [r3, #12]
 800ddd4:	e005      	b.n	800dde2 <tcp_abandon+0xbe>
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	61fb      	str	r3, [r7, #28]
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1ef      	bne.n	800ddc2 <tcp_abandon+0x9e>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	60da      	str	r2, [r3, #12]
 800dde8:	e00b      	b.n	800de02 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	8adb      	ldrh	r3, [r3, #22]
 800ddf2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddf4:	6879      	ldr	r1, [r7, #4]
 800ddf6:	4828      	ldr	r0, [pc, #160]	@ (800de98 <tcp_abandon+0x174>)
 800ddf8:	f000 ff7c 	bl	800ecf4 <tcp_pcb_remove>
 800ddfc:	4b27      	ldr	r3, [pc, #156]	@ (800de9c <tcp_abandon+0x178>)
 800ddfe:	2201      	movs	r2, #1
 800de00:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de06:	2b00      	cmp	r3, #0
 800de08:	d004      	beq.n	800de14 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fd1e 	bl	800e850 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de20:	4618      	mov	r0, r3
 800de22:	f000 fd15 	bl	800e850 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d004      	beq.n	800de38 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de32:	4618      	mov	r0, r3
 800de34:	f000 fd0c 	bl	800e850 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800de38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00e      	beq.n	800de5c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800de3e:	6879      	ldr	r1, [r7, #4]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	3304      	adds	r3, #4
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	8b12      	ldrh	r2, [r2, #24]
 800de48:	9202      	str	r2, [sp, #8]
 800de4a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800de4c:	9201      	str	r2, [sp, #4]
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	460b      	mov	r3, r1
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	69b9      	ldr	r1, [r7, #24]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f004 fcbe 	bl	80127d8 <tcp_rst>
    }
    last_state = pcb->state;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	7d1b      	ldrb	r3, [r3, #20]
 800de60:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff fd34 	bl	800d8d0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d004      	beq.n	800de78 <tcp_abandon+0x154>
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	f06f 010c 	mvn.w	r1, #12
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	4798      	blx	r3
  }
}
 800de78:	3728      	adds	r7, #40	@ 0x28
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	08018640 	.word	0x08018640
 800de84:	08018784 	.word	0x08018784
 800de88:	08018684 	.word	0x08018684
 800de8c:	080187a0 	.word	0x080187a0
 800de90:	20008c10 	.word	0x20008c10
 800de94:	20008c04 	.word	0x20008c04
 800de98:	20008c0c 	.word	0x20008c0c
 800de9c:	20008c14 	.word	0x20008c14

0800dea0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dea8:	2101      	movs	r1, #1
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff ff3a 	bl	800dd24 <tcp_abandon>
}
 800deb0:	bf00      	nop
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d106      	bne.n	800ded4 <tcp_update_rcv_ann_wnd+0x1c>
 800dec6:	4b25      	ldr	r3, [pc, #148]	@ (800df5c <tcp_update_rcv_ann_wnd+0xa4>)
 800dec8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800decc:	4924      	ldr	r1, [pc, #144]	@ (800df60 <tcp_update_rcv_ann_wnd+0xa8>)
 800dece:	4825      	ldr	r0, [pc, #148]	@ (800df64 <tcp_update_rcv_ann_wnd+0xac>)
 800ded0:	f008 fe94 	bl	8016bfc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800dedc:	4413      	add	r3, r2
 800dede:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800dee8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800deec:	bf28      	it	cs
 800deee:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800def2:	b292      	uxth	r2, r2
 800def4:	4413      	add	r3, r2
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	db08      	blt.n	800df10 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	e020      	b.n	800df52 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	dd03      	ble.n	800df26 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800df24:	e014      	b.n	800df50 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df38:	d306      	bcc.n	800df48 <tcp_update_rcv_ann_wnd+0x90>
 800df3a:	4b08      	ldr	r3, [pc, #32]	@ (800df5c <tcp_update_rcv_ann_wnd+0xa4>)
 800df3c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800df40:	4909      	ldr	r1, [pc, #36]	@ (800df68 <tcp_update_rcv_ann_wnd+0xb0>)
 800df42:	4808      	ldr	r0, [pc, #32]	@ (800df64 <tcp_update_rcv_ann_wnd+0xac>)
 800df44:	f008 fe5a 	bl	8016bfc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800df50:	2300      	movs	r3, #0
  }
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	08018640 	.word	0x08018640
 800df60:	0801889c 	.word	0x0801889c
 800df64:	08018684 	.word	0x08018684
 800df68:	080188c0 	.word	0x080188c0

0800df6c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	460b      	mov	r3, r1
 800df76:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d107      	bne.n	800df8e <tcp_recved+0x22>
 800df7e:	4b1f      	ldr	r3, [pc, #124]	@ (800dffc <tcp_recved+0x90>)
 800df80:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800df84:	491e      	ldr	r1, [pc, #120]	@ (800e000 <tcp_recved+0x94>)
 800df86:	481f      	ldr	r0, [pc, #124]	@ (800e004 <tcp_recved+0x98>)
 800df88:	f008 fe38 	bl	8016bfc <iprintf>
 800df8c:	e032      	b.n	800dff4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	7d1b      	ldrb	r3, [r3, #20]
 800df92:	2b01      	cmp	r3, #1
 800df94:	d106      	bne.n	800dfa4 <tcp_recved+0x38>
 800df96:	4b19      	ldr	r3, [pc, #100]	@ (800dffc <tcp_recved+0x90>)
 800df98:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800df9c:	491a      	ldr	r1, [pc, #104]	@ (800e008 <tcp_recved+0x9c>)
 800df9e:	4819      	ldr	r0, [pc, #100]	@ (800e004 <tcp_recved+0x98>)
 800dfa0:	f008 fe2c 	bl	8016bfc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dfa8:	887b      	ldrh	r3, [r7, #2]
 800dfaa:	4413      	add	r3, r2
 800dfac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dfae:	89fb      	ldrh	r3, [r7, #14]
 800dfb0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dfb4:	d804      	bhi.n	800dfc0 <tcp_recved+0x54>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfba:	89fa      	ldrh	r2, [r7, #14]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d204      	bcs.n	800dfca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dfc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dfc8:	e002      	b.n	800dfd0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	89fa      	ldrh	r2, [r7, #14]
 800dfce:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff ff71 	bl	800deb8 <tcp_update_rcv_ann_wnd>
 800dfd6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dfde:	d309      	bcc.n	800dff4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	8b5b      	ldrh	r3, [r3, #26]
 800dfe4:	f043 0302 	orr.w	r3, r3, #2
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f003 fe3e 	bl	8011c70 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	08018640 	.word	0x08018640
 800e000:	080188dc 	.word	0x080188dc
 800e004:	08018684 	.word	0x08018684
 800e008:	080188f4 	.word	0x080188f4

0800e00c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e00c:	b5b0      	push	{r4, r5, r7, lr}
 800e00e:	b090      	sub	sp, #64	@ 0x40
 800e010:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e012:	2300      	movs	r3, #0
 800e014:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e018:	4b95      	ldr	r3, [pc, #596]	@ (800e270 <tcp_slowtmr+0x264>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3301      	adds	r3, #1
 800e01e:	4a94      	ldr	r2, [pc, #592]	@ (800e270 <tcp_slowtmr+0x264>)
 800e020:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e022:	4b94      	ldr	r3, [pc, #592]	@ (800e274 <tcp_slowtmr+0x268>)
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	3301      	adds	r3, #1
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	4b92      	ldr	r3, [pc, #584]	@ (800e274 <tcp_slowtmr+0x268>)
 800e02c:	701a      	strb	r2, [r3, #0]
 800e02e:	e000      	b.n	800e032 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e030:	bf00      	nop
  prev = NULL;
 800e032:	2300      	movs	r3, #0
 800e034:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e036:	4b90      	ldr	r3, [pc, #576]	@ (800e278 <tcp_slowtmr+0x26c>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e03c:	e29d      	b.n	800e57a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e040:	7d1b      	ldrb	r3, [r3, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <tcp_slowtmr+0x48>
 800e046:	4b8d      	ldr	r3, [pc, #564]	@ (800e27c <tcp_slowtmr+0x270>)
 800e048:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e04c:	498c      	ldr	r1, [pc, #560]	@ (800e280 <tcp_slowtmr+0x274>)
 800e04e:	488d      	ldr	r0, [pc, #564]	@ (800e284 <tcp_slowtmr+0x278>)
 800e050:	f008 fdd4 	bl	8016bfc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e056:	7d1b      	ldrb	r3, [r3, #20]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d106      	bne.n	800e06a <tcp_slowtmr+0x5e>
 800e05c:	4b87      	ldr	r3, [pc, #540]	@ (800e27c <tcp_slowtmr+0x270>)
 800e05e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e062:	4989      	ldr	r1, [pc, #548]	@ (800e288 <tcp_slowtmr+0x27c>)
 800e064:	4887      	ldr	r0, [pc, #540]	@ (800e284 <tcp_slowtmr+0x278>)
 800e066:	f008 fdc9 	bl	8016bfc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06c:	7d1b      	ldrb	r3, [r3, #20]
 800e06e:	2b0a      	cmp	r3, #10
 800e070:	d106      	bne.n	800e080 <tcp_slowtmr+0x74>
 800e072:	4b82      	ldr	r3, [pc, #520]	@ (800e27c <tcp_slowtmr+0x270>)
 800e074:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e078:	4984      	ldr	r1, [pc, #528]	@ (800e28c <tcp_slowtmr+0x280>)
 800e07a:	4882      	ldr	r0, [pc, #520]	@ (800e284 <tcp_slowtmr+0x278>)
 800e07c:	f008 fdbe 	bl	8016bfc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e082:	7f9a      	ldrb	r2, [r3, #30]
 800e084:	4b7b      	ldr	r3, [pc, #492]	@ (800e274 <tcp_slowtmr+0x268>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d105      	bne.n	800e098 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e096:	e270      	b.n	800e57a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800e098:	4b76      	ldr	r3, [pc, #472]	@ (800e274 <tcp_slowtmr+0x268>)
 800e09a:	781a      	ldrb	r2, [r3, #0]
 800e09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ae:	7d1b      	ldrb	r3, [r3, #20]
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d10a      	bne.n	800e0ca <tcp_slowtmr+0xbe>
 800e0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	d905      	bls.n	800e0ca <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e0be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0c8:	e11e      	b.n	800e308 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e0d0:	2b0b      	cmp	r3, #11
 800e0d2:	d905      	bls.n	800e0e0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0d8:	3301      	adds	r3, #1
 800e0da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0de:	e113      	b.n	800e308 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d075      	beq.n	800e1d6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d006      	beq.n	800e100 <tcp_slowtmr+0xf4>
 800e0f2:	4b62      	ldr	r3, [pc, #392]	@ (800e27c <tcp_slowtmr+0x270>)
 800e0f4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e0f8:	4965      	ldr	r1, [pc, #404]	@ (800e290 <tcp_slowtmr+0x284>)
 800e0fa:	4862      	ldr	r0, [pc, #392]	@ (800e284 <tcp_slowtmr+0x278>)
 800e0fc:	f008 fd7e 	bl	8016bfc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e104:	2b00      	cmp	r3, #0
 800e106:	d106      	bne.n	800e116 <tcp_slowtmr+0x10a>
 800e108:	4b5c      	ldr	r3, [pc, #368]	@ (800e27c <tcp_slowtmr+0x270>)
 800e10a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e10e:	4961      	ldr	r1, [pc, #388]	@ (800e294 <tcp_slowtmr+0x288>)
 800e110:	485c      	ldr	r0, [pc, #368]	@ (800e284 <tcp_slowtmr+0x278>)
 800e112:	f008 fd73 	bl	8016bfc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e118:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e11c:	2b0b      	cmp	r3, #11
 800e11e:	d905      	bls.n	800e12c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e124:	3301      	adds	r3, #1
 800e126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e12a:	e0ed      	b.n	800e308 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e132:	3b01      	subs	r3, #1
 800e134:	4a58      	ldr	r2, [pc, #352]	@ (800e298 <tcp_slowtmr+0x28c>)
 800e136:	5cd3      	ldrb	r3, [r2, r3]
 800e138:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e140:	7c7a      	ldrb	r2, [r7, #17]
 800e142:	429a      	cmp	r2, r3
 800e144:	d907      	bls.n	800e156 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e148:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e14c:	3301      	adds	r3, #1
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e152:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e158:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e15c:	7c7a      	ldrb	r2, [r7, #17]
 800e15e:	429a      	cmp	r2, r3
 800e160:	f200 80d2 	bhi.w	800e308 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e164:	2301      	movs	r3, #1
 800e166:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d108      	bne.n	800e184 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e172:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e174:	f004 fc24 	bl	80129c0 <tcp_zero_window_probe>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d014      	beq.n	800e1a8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e17e:	2300      	movs	r3, #0
 800e180:	623b      	str	r3, [r7, #32]
 800e182:	e011      	b.n	800e1a8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e18a:	4619      	mov	r1, r3
 800e18c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e18e:	f003 fae9 	bl	8011764 <tcp_split_unsent_seg>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d107      	bne.n	800e1a8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e198:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e19a:	f003 fd69 	bl	8011c70 <tcp_output>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d101      	bne.n	800e1a8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e1a8:	6a3b      	ldr	r3, [r7, #32]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 80ac 	beq.w	800e308 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e1be:	2b06      	cmp	r3, #6
 800e1c0:	f200 80a2 	bhi.w	800e308 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e1d4:	e098      	b.n	800e308 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	db0f      	blt.n	800e200 <tcp_slowtmr+0x1f4>
 800e1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e1e6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d008      	beq.n	800e200 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	b21a      	sxth	r2, r3
 800e1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fe:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e202:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e208:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e20c:	429a      	cmp	r2, r3
 800e20e:	db7b      	blt.n	800e308 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e212:	f004 f821 	bl	8012258 <tcp_rexmit_rto_prepare>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d007      	beq.n	800e22c <tcp_slowtmr+0x220>
 800e21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e220:	2b00      	cmp	r3, #0
 800e222:	d171      	bne.n	800e308 <tcp_slowtmr+0x2fc>
 800e224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d06d      	beq.n	800e308 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22e:	7d1b      	ldrb	r3, [r3, #20]
 800e230:	2b02      	cmp	r3, #2
 800e232:	d03a      	beq.n	800e2aa <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e23a:	2b0c      	cmp	r3, #12
 800e23c:	bf28      	it	cs
 800e23e:	230c      	movcs	r3, #12
 800e240:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e244:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e248:	10db      	asrs	r3, r3, #3
 800e24a:	b21b      	sxth	r3, r3
 800e24c:	461a      	mov	r2, r3
 800e24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e250:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e254:	4413      	add	r3, r2
 800e256:	7efa      	ldrb	r2, [r7, #27]
 800e258:	4910      	ldr	r1, [pc, #64]	@ (800e29c <tcp_slowtmr+0x290>)
 800e25a:	5c8a      	ldrb	r2, [r1, r2]
 800e25c:	4093      	lsls	r3, r2
 800e25e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e266:	4293      	cmp	r3, r2
 800e268:	dc1a      	bgt.n	800e2a0 <tcp_slowtmr+0x294>
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	b21a      	sxth	r2, r3
 800e26e:	e019      	b.n	800e2a4 <tcp_slowtmr+0x298>
 800e270:	20008c00 	.word	0x20008c00
 800e274:	20008c16 	.word	0x20008c16
 800e278:	20008c0c 	.word	0x20008c0c
 800e27c:	08018640 	.word	0x08018640
 800e280:	08018984 	.word	0x08018984
 800e284:	08018684 	.word	0x08018684
 800e288:	080189b0 	.word	0x080189b0
 800e28c:	080189dc 	.word	0x080189dc
 800e290:	08018a0c 	.word	0x08018a0c
 800e294:	08018a40 	.word	0x08018a40
 800e298:	0801ad80 	.word	0x0801ad80
 800e29c:	0801ad70 	.word	0x0801ad70
 800e2a0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	bf28      	it	cs
 800e2c0:	4613      	movcs	r3, r2
 800e2c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e2c4:	8a7b      	ldrh	r3, [r7, #18]
 800e2c6:	085b      	lsrs	r3, r3, #1
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2da:	005b      	lsls	r3, r3, #1
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d206      	bcs.n	800e2f0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e302:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e304:	f004 f818 	bl	8012338 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	2b06      	cmp	r3, #6
 800e30e:	d111      	bne.n	800e334 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e312:	8b5b      	ldrh	r3, [r3, #26]
 800e314:	f003 0310 	and.w	r3, r3, #16
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e31c:	4b9c      	ldr	r3, [pc, #624]	@ (800e590 <tcp_slowtmr+0x584>)
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e322:	6a1b      	ldr	r3, [r3, #32]
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	2b28      	cmp	r3, #40	@ 0x28
 800e328:	d904      	bls.n	800e334 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e32a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e32e:	3301      	adds	r3, #1
 800e330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	7a5b      	ldrb	r3, [r3, #9]
 800e338:	f003 0308 	and.w	r3, r3, #8
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d04a      	beq.n	800e3d6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e342:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e344:	2b04      	cmp	r3, #4
 800e346:	d003      	beq.n	800e350 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e34c:	2b07      	cmp	r3, #7
 800e34e:	d142      	bne.n	800e3d6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e350:	4b8f      	ldr	r3, [pc, #572]	@ (800e590 <tcp_slowtmr+0x584>)
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e356:	6a1b      	ldr	r3, [r3, #32]
 800e358:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e35c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e360:	4b8c      	ldr	r3, [pc, #560]	@ (800e594 <tcp_slowtmr+0x588>)
 800e362:	440b      	add	r3, r1
 800e364:	498c      	ldr	r1, [pc, #560]	@ (800e598 <tcp_slowtmr+0x58c>)
 800e366:	fba1 1303 	umull	r1, r3, r1, r3
 800e36a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d90a      	bls.n	800e386 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e374:	3301      	adds	r3, #1
 800e376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e37a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e37e:	3301      	adds	r3, #1
 800e380:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e384:	e027      	b.n	800e3d6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e386:	4b82      	ldr	r3, [pc, #520]	@ (800e590 <tcp_slowtmr+0x584>)
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e38c:	6a1b      	ldr	r3, [r3, #32]
 800e38e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e392:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e398:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e39c:	4618      	mov	r0, r3
 800e39e:	4b7f      	ldr	r3, [pc, #508]	@ (800e59c <tcp_slowtmr+0x590>)
 800e3a0:	fb00 f303 	mul.w	r3, r0, r3
 800e3a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e3a6:	497c      	ldr	r1, [pc, #496]	@ (800e598 <tcp_slowtmr+0x58c>)
 800e3a8:	fba1 1303 	umull	r1, r3, r1, r3
 800e3ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d911      	bls.n	800e3d6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e3b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3b4:	f004 fac4 	bl	8012940 <tcp_keepalive>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e3be:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d107      	bne.n	800e3d6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d011      	beq.n	800e402 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e3de:	4b6c      	ldr	r3, [pc, #432]	@ (800e590 <tcp_slowtmr+0x584>)
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e4:	6a1b      	ldr	r3, [r3, #32]
 800e3e6:	1ad2      	subs	r2, r2, r3
 800e3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	440b      	add	r3, r1
 800e3f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d302      	bcc.n	800e402 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e3fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3fe:	f000 fddd 	bl	800efbc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e404:	7d1b      	ldrb	r3, [r3, #20]
 800e406:	2b03      	cmp	r3, #3
 800e408:	d10b      	bne.n	800e422 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e40a:	4b61      	ldr	r3, [pc, #388]	@ (800e590 <tcp_slowtmr+0x584>)
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e410:	6a1b      	ldr	r3, [r3, #32]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	2b28      	cmp	r3, #40	@ 0x28
 800e416:	d904      	bls.n	800e422 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e41c:	3301      	adds	r3, #1
 800e41e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e424:	7d1b      	ldrb	r3, [r3, #20]
 800e426:	2b09      	cmp	r3, #9
 800e428:	d10b      	bne.n	800e442 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e42a:	4b59      	ldr	r3, [pc, #356]	@ (800e590 <tcp_slowtmr+0x584>)
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e430:	6a1b      	ldr	r3, [r3, #32]
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	2bf0      	cmp	r3, #240	@ 0xf0
 800e436:	d904      	bls.n	800e442 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e43c:	3301      	adds	r3, #1
 800e43e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e446:	2b00      	cmp	r3, #0
 800e448:	d060      	beq.n	800e50c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e450:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e452:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e454:	f000 fbfe 	bl	800ec54 <tcp_pcb_purge>
      if (prev != NULL) {
 800e458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d010      	beq.n	800e480 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e45e:	4b50      	ldr	r3, [pc, #320]	@ (800e5a0 <tcp_slowtmr+0x594>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e464:	429a      	cmp	r2, r3
 800e466:	d106      	bne.n	800e476 <tcp_slowtmr+0x46a>
 800e468:	4b4e      	ldr	r3, [pc, #312]	@ (800e5a4 <tcp_slowtmr+0x598>)
 800e46a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e46e:	494e      	ldr	r1, [pc, #312]	@ (800e5a8 <tcp_slowtmr+0x59c>)
 800e470:	484e      	ldr	r0, [pc, #312]	@ (800e5ac <tcp_slowtmr+0x5a0>)
 800e472:	f008 fbc3 	bl	8016bfc <iprintf>
        prev->next = pcb->next;
 800e476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e478:	68da      	ldr	r2, [r3, #12]
 800e47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47c:	60da      	str	r2, [r3, #12]
 800e47e:	e00f      	b.n	800e4a0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e480:	4b47      	ldr	r3, [pc, #284]	@ (800e5a0 <tcp_slowtmr+0x594>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e486:	429a      	cmp	r2, r3
 800e488:	d006      	beq.n	800e498 <tcp_slowtmr+0x48c>
 800e48a:	4b46      	ldr	r3, [pc, #280]	@ (800e5a4 <tcp_slowtmr+0x598>)
 800e48c:	f240 5271 	movw	r2, #1393	@ 0x571
 800e490:	4947      	ldr	r1, [pc, #284]	@ (800e5b0 <tcp_slowtmr+0x5a4>)
 800e492:	4846      	ldr	r0, [pc, #280]	@ (800e5ac <tcp_slowtmr+0x5a0>)
 800e494:	f008 fbb2 	bl	8016bfc <iprintf>
        tcp_active_pcbs = pcb->next;
 800e498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	4a40      	ldr	r2, [pc, #256]	@ (800e5a0 <tcp_slowtmr+0x594>)
 800e49e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e4a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d013      	beq.n	800e4d0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4aa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e4b0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b4:	3304      	adds	r3, #4
 800e4b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4b8:	8ad2      	ldrh	r2, [r2, #22]
 800e4ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e4bc:	8b09      	ldrh	r1, [r1, #24]
 800e4be:	9102      	str	r1, [sp, #8]
 800e4c0:	9201      	str	r2, [sp, #4]
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	462b      	mov	r3, r5
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	4601      	mov	r1, r0
 800e4ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4cc:	f004 f984 	bl	80127d8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d8:	7d1b      	ldrb	r3, [r3, #20]
 800e4da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e4e6:	6838      	ldr	r0, [r7, #0]
 800e4e8:	f7ff f9f2 	bl	800d8d0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e4ec:	4b31      	ldr	r3, [pc, #196]	@ (800e5b4 <tcp_slowtmr+0x5a8>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d004      	beq.n	800e502 <tcp_slowtmr+0x4f6>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f06f 010c 	mvn.w	r1, #12
 800e4fe:	68b8      	ldr	r0, [r7, #8]
 800e500:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e502:	4b2c      	ldr	r3, [pc, #176]	@ (800e5b4 <tcp_slowtmr+0x5a8>)
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d037      	beq.n	800e57a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e50a:	e592      	b.n	800e032 <tcp_slowtmr+0x26>
      prev = pcb;
 800e50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e518:	7f1b      	ldrb	r3, [r3, #28]
 800e51a:	3301      	adds	r3, #1
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e520:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e524:	7f1a      	ldrb	r2, [r3, #28]
 800e526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e528:	7f5b      	ldrb	r3, [r3, #29]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d325      	bcc.n	800e57a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e530:	2200      	movs	r2, #0
 800e532:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e534:	4b1f      	ldr	r3, [pc, #124]	@ (800e5b4 <tcp_slowtmr+0x5a8>)
 800e536:	2200      	movs	r2, #0
 800e538:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00b      	beq.n	800e55c <tcp_slowtmr+0x550>
 800e544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e54a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e54c:	6912      	ldr	r2, [r2, #16]
 800e54e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e550:	4610      	mov	r0, r2
 800e552:	4798      	blx	r3
 800e554:	4603      	mov	r3, r0
 800e556:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e55a:	e002      	b.n	800e562 <tcp_slowtmr+0x556>
 800e55c:	2300      	movs	r3, #0
 800e55e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e562:	4b14      	ldr	r3, [pc, #80]	@ (800e5b4 <tcp_slowtmr+0x5a8>)
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	f47f ad62 	bne.w	800e030 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e56c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e570:	2b00      	cmp	r3, #0
 800e572:	d102      	bne.n	800e57a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e576:	f003 fb7b 	bl	8011c70 <tcp_output>
  while (pcb != NULL) {
 800e57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f47f ad5e 	bne.w	800e03e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e582:	2300      	movs	r3, #0
 800e584:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e586:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b8 <tcp_slowtmr+0x5ac>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e58c:	e069      	b.n	800e662 <tcp_slowtmr+0x656>
 800e58e:	bf00      	nop
 800e590:	20008c00 	.word	0x20008c00
 800e594:	000a4cb8 	.word	0x000a4cb8
 800e598:	10624dd3 	.word	0x10624dd3
 800e59c:	000124f8 	.word	0x000124f8
 800e5a0:	20008c0c 	.word	0x20008c0c
 800e5a4:	08018640 	.word	0x08018640
 800e5a8:	08018a78 	.word	0x08018a78
 800e5ac:	08018684 	.word	0x08018684
 800e5b0:	08018aa4 	.word	0x08018aa4
 800e5b4:	20008c14 	.word	0x20008c14
 800e5b8:	20008c10 	.word	0x20008c10
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
 800e5c0:	2b0a      	cmp	r3, #10
 800e5c2:	d006      	beq.n	800e5d2 <tcp_slowtmr+0x5c6>
 800e5c4:	4b2b      	ldr	r3, [pc, #172]	@ (800e674 <tcp_slowtmr+0x668>)
 800e5c6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e5ca:	492b      	ldr	r1, [pc, #172]	@ (800e678 <tcp_slowtmr+0x66c>)
 800e5cc:	482b      	ldr	r0, [pc, #172]	@ (800e67c <tcp_slowtmr+0x670>)
 800e5ce:	f008 fb15 	bl	8016bfc <iprintf>
    pcb_remove = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e5d8:	4b29      	ldr	r3, [pc, #164]	@ (800e680 <tcp_slowtmr+0x674>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5de:	6a1b      	ldr	r3, [r3, #32]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	2bf0      	cmp	r3, #240	@ 0xf0
 800e5e4:	d904      	bls.n	800e5f0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d02f      	beq.n	800e658 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e5f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5fa:	f000 fb2b 	bl	800ec54 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e600:	2b00      	cmp	r3, #0
 800e602:	d010      	beq.n	800e626 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e604:	4b1f      	ldr	r3, [pc, #124]	@ (800e684 <tcp_slowtmr+0x678>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d106      	bne.n	800e61c <tcp_slowtmr+0x610>
 800e60e:	4b19      	ldr	r3, [pc, #100]	@ (800e674 <tcp_slowtmr+0x668>)
 800e610:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e614:	491c      	ldr	r1, [pc, #112]	@ (800e688 <tcp_slowtmr+0x67c>)
 800e616:	4819      	ldr	r0, [pc, #100]	@ (800e67c <tcp_slowtmr+0x670>)
 800e618:	f008 faf0 	bl	8016bfc <iprintf>
        prev->next = pcb->next;
 800e61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61e:	68da      	ldr	r2, [r3, #12]
 800e620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e622:	60da      	str	r2, [r3, #12]
 800e624:	e00f      	b.n	800e646 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e626:	4b17      	ldr	r3, [pc, #92]	@ (800e684 <tcp_slowtmr+0x678>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d006      	beq.n	800e63e <tcp_slowtmr+0x632>
 800e630:	4b10      	ldr	r3, [pc, #64]	@ (800e674 <tcp_slowtmr+0x668>)
 800e632:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e636:	4915      	ldr	r1, [pc, #84]	@ (800e68c <tcp_slowtmr+0x680>)
 800e638:	4810      	ldr	r0, [pc, #64]	@ (800e67c <tcp_slowtmr+0x670>)
 800e63a:	f008 fadf 	bl	8016bfc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	4a10      	ldr	r2, [pc, #64]	@ (800e684 <tcp_slowtmr+0x678>)
 800e644:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e648:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e650:	69f8      	ldr	r0, [r7, #28]
 800e652:	f7ff f93d 	bl	800d8d0 <tcp_free>
 800e656:	e004      	b.n	800e662 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1a9      	bne.n	800e5bc <tcp_slowtmr+0x5b0>
    }
  }
}
 800e668:	bf00      	nop
 800e66a:	bf00      	nop
 800e66c:	3730      	adds	r7, #48	@ 0x30
 800e66e:	46bd      	mov	sp, r7
 800e670:	bdb0      	pop	{r4, r5, r7, pc}
 800e672:	bf00      	nop
 800e674:	08018640 	.word	0x08018640
 800e678:	08018ad0 	.word	0x08018ad0
 800e67c:	08018684 	.word	0x08018684
 800e680:	20008c00 	.word	0x20008c00
 800e684:	20008c10 	.word	0x20008c10
 800e688:	08018b00 	.word	0x08018b00
 800e68c:	08018b28 	.word	0x08018b28

0800e690 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e696:	4b2d      	ldr	r3, [pc, #180]	@ (800e74c <tcp_fasttmr+0xbc>)
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	3301      	adds	r3, #1
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	4b2b      	ldr	r3, [pc, #172]	@ (800e74c <tcp_fasttmr+0xbc>)
 800e6a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e6a2:	4b2b      	ldr	r3, [pc, #172]	@ (800e750 <tcp_fasttmr+0xc0>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e6a8:	e048      	b.n	800e73c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	7f9a      	ldrb	r2, [r3, #30]
 800e6ae:	4b27      	ldr	r3, [pc, #156]	@ (800e74c <tcp_fasttmr+0xbc>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d03f      	beq.n	800e736 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e6b6:	4b25      	ldr	r3, [pc, #148]	@ (800e74c <tcp_fasttmr+0xbc>)
 800e6b8:	781a      	ldrb	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	8b5b      	ldrh	r3, [r3, #26]
 800e6c2:	f003 0301 	and.w	r3, r3, #1
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d010      	beq.n	800e6ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	8b5b      	ldrh	r3, [r3, #26]
 800e6ce:	f043 0302 	orr.w	r3, r3, #2
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f003 fac9 	bl	8011c70 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	8b5b      	ldrh	r3, [r3, #26]
 800e6e2:	f023 0303 	bic.w	r3, r3, #3
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	8b5b      	ldrh	r3, [r3, #26]
 800e6f0:	f003 0308 	and.w	r3, r3, #8
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d009      	beq.n	800e70c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	8b5b      	ldrh	r3, [r3, #26]
 800e6fc:	f023 0308 	bic.w	r3, r3, #8
 800e700:	b29a      	uxth	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7ff fa76 	bl	800dbf8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00a      	beq.n	800e730 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e71a:	4b0e      	ldr	r3, [pc, #56]	@ (800e754 <tcp_fasttmr+0xc4>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f819 	bl	800e758 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e726:	4b0b      	ldr	r3, [pc, #44]	@ (800e754 <tcp_fasttmr+0xc4>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d000      	beq.n	800e730 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e72e:	e7b8      	b.n	800e6a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	607b      	str	r3, [r7, #4]
 800e734:	e002      	b.n	800e73c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1b3      	bne.n	800e6aa <tcp_fasttmr+0x1a>
    }
  }
}
 800e742:	bf00      	nop
 800e744:	bf00      	nop
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	20008c16 	.word	0x20008c16
 800e750:	20008c0c 	.word	0x20008c0c
 800e754:	20008c14 	.word	0x20008c14

0800e758 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d109      	bne.n	800e77a <tcp_process_refused_data+0x22>
 800e766:	4b37      	ldr	r3, [pc, #220]	@ (800e844 <tcp_process_refused_data+0xec>)
 800e768:	f240 6209 	movw	r2, #1545	@ 0x609
 800e76c:	4936      	ldr	r1, [pc, #216]	@ (800e848 <tcp_process_refused_data+0xf0>)
 800e76e:	4837      	ldr	r0, [pc, #220]	@ (800e84c <tcp_process_refused_data+0xf4>)
 800e770:	f008 fa44 	bl	8016bfc <iprintf>
 800e774:	f06f 030f 	mvn.w	r3, #15
 800e778:	e060      	b.n	800e83c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e77e:	7b5b      	ldrb	r3, [r3, #13]
 800e780:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e786:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00b      	beq.n	800e7b0 <tcp_process_refused_data+0x58>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6918      	ldr	r0, [r3, #16]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	6879      	ldr	r1, [r7, #4]
 800e7a8:	47a0      	blx	r4
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	73fb      	strb	r3, [r7, #15]
 800e7ae:	e007      	b.n	800e7c0 <tcp_process_refused_data+0x68>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	6879      	ldr	r1, [r7, #4]
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	f000 f8a4 	bl	800e904 <tcp_recv_null>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d12a      	bne.n	800e81e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e7c8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ca:	f003 0320 	and.w	r3, r3, #32
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d033      	beq.n	800e83a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e7da:	d005      	beq.n	800e7e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00b      	beq.n	800e80a <tcp_process_refused_data+0xb2>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6918      	ldr	r0, [r3, #16]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	2200      	movs	r2, #0
 800e800:	6879      	ldr	r1, [r7, #4]
 800e802:	47a0      	blx	r4
 800e804:	4603      	mov	r3, r0
 800e806:	73fb      	strb	r3, [r7, #15]
 800e808:	e001      	b.n	800e80e <tcp_process_refused_data+0xb6>
 800e80a:	2300      	movs	r3, #0
 800e80c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e812:	f113 0f0d 	cmn.w	r3, #13
 800e816:	d110      	bne.n	800e83a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e818:	f06f 030c 	mvn.w	r3, #12
 800e81c:	e00e      	b.n	800e83c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e822:	f113 0f0d 	cmn.w	r3, #13
 800e826:	d102      	bne.n	800e82e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e828:	f06f 030c 	mvn.w	r3, #12
 800e82c:	e006      	b.n	800e83c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68ba      	ldr	r2, [r7, #8]
 800e832:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e834:	f06f 0304 	mvn.w	r3, #4
 800e838:	e000      	b.n	800e83c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3714      	adds	r7, #20
 800e840:	46bd      	mov	sp, r7
 800e842:	bd90      	pop	{r4, r7, pc}
 800e844:	08018640 	.word	0x08018640
 800e848:	08018b50 	.word	0x08018b50
 800e84c:	08018684 	.word	0x08018684

0800e850 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e858:	e007      	b.n	800e86a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 f80a 	bl	800e87a <tcp_seg_free>
    seg = next;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1f4      	bne.n	800e85a <tcp_segs_free+0xa>
  }
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b082      	sub	sp, #8
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00c      	beq.n	800e8a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d004      	beq.n	800e89a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe fd6b 	bl	800d370 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	2003      	movs	r0, #3
 800e89e:	f7fd fef1 	bl	800c684 <memp_free>
  }
}
 800e8a2:	bf00      	nop
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
	...

0800e8ac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <tcp_seg_copy+0x1c>
 800e8ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e8f8 <tcp_seg_copy+0x4c>)
 800e8bc:	f240 6282 	movw	r2, #1666	@ 0x682
 800e8c0:	490e      	ldr	r1, [pc, #56]	@ (800e8fc <tcp_seg_copy+0x50>)
 800e8c2:	480f      	ldr	r0, [pc, #60]	@ (800e900 <tcp_seg_copy+0x54>)
 800e8c4:	f008 f99a 	bl	8016bfc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e8c8:	2003      	movs	r0, #3
 800e8ca:	f7fd fe6b 	bl	800c5a4 <memp_malloc>
 800e8ce:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d101      	bne.n	800e8da <tcp_seg_copy+0x2e>
    return NULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	e00a      	b.n	800e8f0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e8da:	2210      	movs	r2, #16
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f008 fb99 	bl	8017016 <memcpy>
  pbuf_ref(cseg->p);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe fde1 	bl	800d4b0 <pbuf_ref>
  return cseg;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	08018640 	.word	0x08018640
 800e8fc:	08018b94 	.word	0x08018b94
 800e900:	08018684 	.word	0x08018684

0800e904 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	607a      	str	r2, [r7, #4]
 800e910:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d109      	bne.n	800e92c <tcp_recv_null+0x28>
 800e918:	4b12      	ldr	r3, [pc, #72]	@ (800e964 <tcp_recv_null+0x60>)
 800e91a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e91e:	4912      	ldr	r1, [pc, #72]	@ (800e968 <tcp_recv_null+0x64>)
 800e920:	4812      	ldr	r0, [pc, #72]	@ (800e96c <tcp_recv_null+0x68>)
 800e922:	f008 f96b 	bl	8016bfc <iprintf>
 800e926:	f06f 030f 	mvn.w	r3, #15
 800e92a:	e016      	b.n	800e95a <tcp_recv_null+0x56>

  if (p != NULL) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d009      	beq.n	800e946 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	891b      	ldrh	r3, [r3, #8]
 800e936:	4619      	mov	r1, r3
 800e938:	68b8      	ldr	r0, [r7, #8]
 800e93a:	f7ff fb17 	bl	800df6c <tcp_recved>
    pbuf_free(p);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f7fe fd16 	bl	800d370 <pbuf_free>
 800e944:	e008      	b.n	800e958 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d104      	bne.n	800e958 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e94e:	68b8      	ldr	r0, [r7, #8]
 800e950:	f7ff f9bc 	bl	800dccc <tcp_close>
 800e954:	4603      	mov	r3, r0
 800e956:	e000      	b.n	800e95a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	08018640 	.word	0x08018640
 800e968:	08018bb0 	.word	0x08018bb0
 800e96c:	08018684 	.word	0x08018684

0800e970 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	4603      	mov	r3, r0
 800e978:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	db01      	blt.n	800e986 <tcp_kill_prio+0x16>
 800e982:	79fb      	ldrb	r3, [r7, #7]
 800e984:	e000      	b.n	800e988 <tcp_kill_prio+0x18>
 800e986:	237f      	movs	r3, #127	@ 0x7f
 800e988:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e98a:	7afb      	ldrb	r3, [r7, #11]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d034      	beq.n	800e9fa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e990:	7afb      	ldrb	r3, [r7, #11]
 800e992:	3b01      	subs	r3, #1
 800e994:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e996:	2300      	movs	r3, #0
 800e998:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e99a:	2300      	movs	r3, #0
 800e99c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e99e:	4b19      	ldr	r3, [pc, #100]	@ (800ea04 <tcp_kill_prio+0x94>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	617b      	str	r3, [r7, #20]
 800e9a4:	e01f      	b.n	800e9e6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	7d5b      	ldrb	r3, [r3, #21]
 800e9aa:	7afa      	ldrb	r2, [r7, #11]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d80c      	bhi.n	800e9ca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e9b4:	7afa      	ldrb	r2, [r7, #11]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d112      	bne.n	800e9e0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e9ba:	4b13      	ldr	r3, [pc, #76]	@ (800ea08 <tcp_kill_prio+0x98>)
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d80a      	bhi.n	800e9e0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800ea08 <tcp_kill_prio+0x98>)
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	6a1b      	ldr	r3, [r3, #32]
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	7d5b      	ldrb	r3, [r3, #21]
 800e9de:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	617b      	str	r3, [r7, #20]
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1dc      	bne.n	800e9a6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d004      	beq.n	800e9fc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9f2:	6938      	ldr	r0, [r7, #16]
 800e9f4:	f7ff fa54 	bl	800dea0 <tcp_abort>
 800e9f8:	e000      	b.n	800e9fc <tcp_kill_prio+0x8c>
    return;
 800e9fa:	bf00      	nop
  }
}
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20008c0c 	.word	0x20008c0c
 800ea08:	20008c00 	.word	0x20008c00

0800ea0c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ea16:	79fb      	ldrb	r3, [r7, #7]
 800ea18:	2b08      	cmp	r3, #8
 800ea1a:	d009      	beq.n	800ea30 <tcp_kill_state+0x24>
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	2b09      	cmp	r3, #9
 800ea20:	d006      	beq.n	800ea30 <tcp_kill_state+0x24>
 800ea22:	4b1a      	ldr	r3, [pc, #104]	@ (800ea8c <tcp_kill_state+0x80>)
 800ea24:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ea28:	4919      	ldr	r1, [pc, #100]	@ (800ea90 <tcp_kill_state+0x84>)
 800ea2a:	481a      	ldr	r0, [pc, #104]	@ (800ea94 <tcp_kill_state+0x88>)
 800ea2c:	f008 f8e6 	bl	8016bfc <iprintf>

  inactivity = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea34:	2300      	movs	r3, #0
 800ea36:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea38:	4b17      	ldr	r3, [pc, #92]	@ (800ea98 <tcp_kill_state+0x8c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	617b      	str	r3, [r7, #20]
 800ea3e:	e017      	b.n	800ea70 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	7d1b      	ldrb	r3, [r3, #20]
 800ea44:	79fa      	ldrb	r2, [r7, #7]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d10f      	bne.n	800ea6a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ea4a:	4b14      	ldr	r3, [pc, #80]	@ (800ea9c <tcp_kill_state+0x90>)
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d807      	bhi.n	800ea6a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ea5a:	4b10      	ldr	r3, [pc, #64]	@ (800ea9c <tcp_kill_state+0x90>)
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	6a1b      	ldr	r3, [r3, #32]
 800ea62:	1ad3      	subs	r3, r2, r3
 800ea64:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	617b      	str	r3, [r7, #20]
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1e4      	bne.n	800ea40 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d003      	beq.n	800ea84 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	6938      	ldr	r0, [r7, #16]
 800ea80:	f7ff f950 	bl	800dd24 <tcp_abandon>
  }
}
 800ea84:	bf00      	nop
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	08018640 	.word	0x08018640
 800ea90:	08018bcc 	.word	0x08018bcc
 800ea94:	08018684 	.word	0x08018684
 800ea98:	20008c0c 	.word	0x20008c0c
 800ea9c:	20008c00 	.word	0x20008c00

0800eaa0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaae:	4b12      	ldr	r3, [pc, #72]	@ (800eaf8 <tcp_kill_timewait+0x58>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	e012      	b.n	800eadc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eab6:	4b11      	ldr	r3, [pc, #68]	@ (800eafc <tcp_kill_timewait+0x5c>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6a1b      	ldr	r3, [r3, #32]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d807      	bhi.n	800ead6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eac6:	4b0d      	ldr	r3, [pc, #52]	@ (800eafc <tcp_kill_timewait+0x5c>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1e9      	bne.n	800eab6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eae8:	68b8      	ldr	r0, [r7, #8]
 800eaea:	f7ff f9d9 	bl	800dea0 <tcp_abort>
  }
}
 800eaee:	bf00      	nop
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20008c10 	.word	0x20008c10
 800eafc:	20008c00 	.word	0x20008c00

0800eb00 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eb06:	4b10      	ldr	r3, [pc, #64]	@ (800eb48 <tcp_handle_closepend+0x48>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eb0c:	e014      	b.n	800eb38 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	8b5b      	ldrh	r3, [r3, #26]
 800eb18:	f003 0308 	and.w	r3, r3, #8
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d009      	beq.n	800eb34 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	8b5b      	ldrh	r3, [r3, #26]
 800eb24:	f023 0308 	bic.w	r3, r3, #8
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7ff f862 	bl	800dbf8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e7      	bne.n	800eb0e <tcp_handle_closepend+0xe>
  }
}
 800eb3e:	bf00      	nop
 800eb40:	bf00      	nop
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	20008c0c 	.word	0x20008c0c

0800eb4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb56:	2001      	movs	r0, #1
 800eb58:	f7fd fd24 	bl	800c5a4 <memp_malloc>
 800eb5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d126      	bne.n	800ebb2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800eb64:	f7ff ffcc 	bl	800eb00 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eb68:	f7ff ff9a 	bl	800eaa0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb6c:	2001      	movs	r0, #1
 800eb6e:	f7fd fd19 	bl	800c5a4 <memp_malloc>
 800eb72:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d11b      	bne.n	800ebb2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eb7a:	2009      	movs	r0, #9
 800eb7c:	f7ff ff46 	bl	800ea0c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb80:	2001      	movs	r0, #1
 800eb82:	f7fd fd0f 	bl	800c5a4 <memp_malloc>
 800eb86:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d111      	bne.n	800ebb2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800eb8e:	2008      	movs	r0, #8
 800eb90:	f7ff ff3c 	bl	800ea0c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb94:	2001      	movs	r0, #1
 800eb96:	f7fd fd05 	bl	800c5a4 <memp_malloc>
 800eb9a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d107      	bne.n	800ebb2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eba2:	79fb      	ldrb	r3, [r7, #7]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7ff fee3 	bl	800e970 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebaa:	2001      	movs	r0, #1
 800ebac:	f7fd fcfa 	bl	800c5a4 <memp_malloc>
 800ebb0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d03f      	beq.n	800ec38 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ebb8:	229c      	movs	r2, #156	@ 0x9c
 800ebba:	2100      	movs	r1, #0
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f008 f975 	bl	8016eac <memset>
    pcb->prio = prio;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	79fa      	ldrb	r2, [r7, #7]
 800ebc6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ebce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ebd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	22ff      	movs	r2, #255	@ 0xff
 800ebe6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ebee:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2206      	movs	r2, #6
 800ebf4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2206      	movs	r2, #6
 800ebfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec04:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <tcp_alloc+0xf8>)
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ec16:	4b0c      	ldr	r3, [pc, #48]	@ (800ec48 <tcp_alloc+0xfc>)
 800ec18:	781a      	ldrb	r2, [r3, #0]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ec24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4a08      	ldr	r2, [pc, #32]	@ (800ec4c <tcp_alloc+0x100>)
 800ec2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	4a07      	ldr	r2, [pc, #28]	@ (800ec50 <tcp_alloc+0x104>)
 800ec34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ec38:	68fb      	ldr	r3, [r7, #12]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	20008c00 	.word	0x20008c00
 800ec48:	20008c16 	.word	0x20008c16
 800ec4c:	0800e905 	.word	0x0800e905
 800ec50:	006ddd00 	.word	0x006ddd00

0800ec54 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d107      	bne.n	800ec72 <tcp_pcb_purge+0x1e>
 800ec62:	4b21      	ldr	r3, [pc, #132]	@ (800ece8 <tcp_pcb_purge+0x94>)
 800ec64:	f640 0251 	movw	r2, #2129	@ 0x851
 800ec68:	4920      	ldr	r1, [pc, #128]	@ (800ecec <tcp_pcb_purge+0x98>)
 800ec6a:	4821      	ldr	r0, [pc, #132]	@ (800ecf0 <tcp_pcb_purge+0x9c>)
 800ec6c:	f007 ffc6 	bl	8016bfc <iprintf>
 800ec70:	e037      	b.n	800ece2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	7d1b      	ldrb	r3, [r3, #20]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d033      	beq.n	800ece2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ec7e:	2b0a      	cmp	r3, #10
 800ec80:	d02f      	beq.n	800ece2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d02b      	beq.n	800ece2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d007      	beq.n	800eca2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fe fb6a 	bl	800d370 <pbuf_free>
      pcb->refused_data = NULL;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 f986 	bl	800efbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ecb6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff fdc7 	bl	800e850 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff fdc2 	bl	800e850 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	08018640 	.word	0x08018640
 800ecec:	08018c8c 	.word	0x08018c8c
 800ecf0:	08018684 	.word	0x08018684

0800ecf4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d106      	bne.n	800ed12 <tcp_pcb_remove+0x1e>
 800ed04:	4b3e      	ldr	r3, [pc, #248]	@ (800ee00 <tcp_pcb_remove+0x10c>)
 800ed06:	f640 0283 	movw	r2, #2179	@ 0x883
 800ed0a:	493e      	ldr	r1, [pc, #248]	@ (800ee04 <tcp_pcb_remove+0x110>)
 800ed0c:	483e      	ldr	r0, [pc, #248]	@ (800ee08 <tcp_pcb_remove+0x114>)
 800ed0e:	f007 ff75 	bl	8016bfc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <tcp_pcb_remove+0x32>
 800ed18:	4b39      	ldr	r3, [pc, #228]	@ (800ee00 <tcp_pcb_remove+0x10c>)
 800ed1a:	f640 0284 	movw	r2, #2180	@ 0x884
 800ed1e:	493b      	ldr	r1, [pc, #236]	@ (800ee0c <tcp_pcb_remove+0x118>)
 800ed20:	4839      	ldr	r0, [pc, #228]	@ (800ee08 <tcp_pcb_remove+0x114>)
 800ed22:	f007 ff6b 	bl	8016bfc <iprintf>

  TCP_RMV(pcblist, pcb);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d105      	bne.n	800ed3c <tcp_pcb_remove+0x48>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68da      	ldr	r2, [r3, #12]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	e013      	b.n	800ed64 <tcp_pcb_remove+0x70>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	60fb      	str	r3, [r7, #12]
 800ed42:	e00c      	b.n	800ed5e <tcp_pcb_remove+0x6a>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	683a      	ldr	r2, [r7, #0]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d104      	bne.n	800ed58 <tcp_pcb_remove+0x64>
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	68da      	ldr	r2, [r3, #12]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	60da      	str	r2, [r3, #12]
 800ed56:	e005      	b.n	800ed64 <tcp_pcb_remove+0x70>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1ef      	bne.n	800ed44 <tcp_pcb_remove+0x50>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2200      	movs	r2, #0
 800ed68:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ed6a:	6838      	ldr	r0, [r7, #0]
 800ed6c:	f7ff ff72 	bl	800ec54 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	7d1b      	ldrb	r3, [r3, #20]
 800ed74:	2b0a      	cmp	r3, #10
 800ed76:	d013      	beq.n	800eda0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d00f      	beq.n	800eda0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	8b5b      	ldrh	r3, [r3, #26]
 800ed84:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d009      	beq.n	800eda0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	8b5b      	ldrh	r3, [r3, #26]
 800ed90:	f043 0302 	orr.w	r3, r3, #2
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed9a:	6838      	ldr	r0, [r7, #0]
 800ed9c:	f002 ff68 	bl	8011c70 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	7d1b      	ldrb	r3, [r3, #20]
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d020      	beq.n	800edea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edac:	2b00      	cmp	r3, #0
 800edae:	d006      	beq.n	800edbe <tcp_pcb_remove+0xca>
 800edb0:	4b13      	ldr	r3, [pc, #76]	@ (800ee00 <tcp_pcb_remove+0x10c>)
 800edb2:	f640 0293 	movw	r2, #2195	@ 0x893
 800edb6:	4916      	ldr	r1, [pc, #88]	@ (800ee10 <tcp_pcb_remove+0x11c>)
 800edb8:	4813      	ldr	r0, [pc, #76]	@ (800ee08 <tcp_pcb_remove+0x114>)
 800edba:	f007 ff1f 	bl	8016bfc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d006      	beq.n	800edd4 <tcp_pcb_remove+0xe0>
 800edc6:	4b0e      	ldr	r3, [pc, #56]	@ (800ee00 <tcp_pcb_remove+0x10c>)
 800edc8:	f640 0294 	movw	r2, #2196	@ 0x894
 800edcc:	4911      	ldr	r1, [pc, #68]	@ (800ee14 <tcp_pcb_remove+0x120>)
 800edce:	480e      	ldr	r0, [pc, #56]	@ (800ee08 <tcp_pcb_remove+0x114>)
 800edd0:	f007 ff14 	bl	8016bfc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d006      	beq.n	800edea <tcp_pcb_remove+0xf6>
 800eddc:	4b08      	ldr	r3, [pc, #32]	@ (800ee00 <tcp_pcb_remove+0x10c>)
 800edde:	f640 0296 	movw	r2, #2198	@ 0x896
 800ede2:	490d      	ldr	r1, [pc, #52]	@ (800ee18 <tcp_pcb_remove+0x124>)
 800ede4:	4808      	ldr	r0, [pc, #32]	@ (800ee08 <tcp_pcb_remove+0x114>)
 800ede6:	f007 ff09 	bl	8016bfc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	2200      	movs	r2, #0
 800edee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	2200      	movs	r2, #0
 800edf4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800edf6:	bf00      	nop
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	08018640 	.word	0x08018640
 800ee04:	08018ca8 	.word	0x08018ca8
 800ee08:	08018684 	.word	0x08018684
 800ee0c:	08018cc4 	.word	0x08018cc4
 800ee10:	08018ce4 	.word	0x08018ce4
 800ee14:	08018cfc 	.word	0x08018cfc
 800ee18:	08018d18 	.word	0x08018d18

0800ee1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d106      	bne.n	800ee38 <tcp_next_iss+0x1c>
 800ee2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ee54 <tcp_next_iss+0x38>)
 800ee2c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ee30:	4909      	ldr	r1, [pc, #36]	@ (800ee58 <tcp_next_iss+0x3c>)
 800ee32:	480a      	ldr	r0, [pc, #40]	@ (800ee5c <tcp_next_iss+0x40>)
 800ee34:	f007 fee2 	bl	8016bfc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ee38:	4b09      	ldr	r3, [pc, #36]	@ (800ee60 <tcp_next_iss+0x44>)
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	4b09      	ldr	r3, [pc, #36]	@ (800ee64 <tcp_next_iss+0x48>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4413      	add	r3, r2
 800ee42:	4a07      	ldr	r2, [pc, #28]	@ (800ee60 <tcp_next_iss+0x44>)
 800ee44:	6013      	str	r3, [r2, #0]
  return iss;
 800ee46:	4b06      	ldr	r3, [pc, #24]	@ (800ee60 <tcp_next_iss+0x44>)
 800ee48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	08018640 	.word	0x08018640
 800ee58:	08018d30 	.word	0x08018d30
 800ee5c:	08018684 	.word	0x08018684
 800ee60:	20000024 	.word	0x20000024
 800ee64:	20008c00 	.word	0x20008c00

0800ee68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b086      	sub	sp, #24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d106      	bne.n	800ee8a <tcp_eff_send_mss_netif+0x22>
 800ee7c:	4b14      	ldr	r3, [pc, #80]	@ (800eed0 <tcp_eff_send_mss_netif+0x68>)
 800ee7e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ee82:	4914      	ldr	r1, [pc, #80]	@ (800eed4 <tcp_eff_send_mss_netif+0x6c>)
 800ee84:	4814      	ldr	r0, [pc, #80]	@ (800eed8 <tcp_eff_send_mss_netif+0x70>)
 800ee86:	f007 feb9 	bl	8016bfc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d101      	bne.n	800ee94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ee90:	89fb      	ldrh	r3, [r7, #14]
 800ee92:	e019      	b.n	800eec8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ee98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ee9a:	8afb      	ldrh	r3, [r7, #22]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d012      	beq.n	800eec6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eea0:	2328      	movs	r3, #40	@ 0x28
 800eea2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eea4:	8afa      	ldrh	r2, [r7, #22]
 800eea6:	8abb      	ldrh	r3, [r7, #20]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d904      	bls.n	800eeb6 <tcp_eff_send_mss_netif+0x4e>
 800eeac:	8afa      	ldrh	r2, [r7, #22]
 800eeae:	8abb      	ldrh	r3, [r7, #20]
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	e000      	b.n	800eeb8 <tcp_eff_send_mss_netif+0x50>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eeba:	8a7a      	ldrh	r2, [r7, #18]
 800eebc:	89fb      	ldrh	r3, [r7, #14]
 800eebe:	4293      	cmp	r3, r2
 800eec0:	bf28      	it	cs
 800eec2:	4613      	movcs	r3, r2
 800eec4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eec6:	89fb      	ldrh	r3, [r7, #14]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	08018640 	.word	0x08018640
 800eed4:	08018d4c 	.word	0x08018d4c
 800eed8:	08018684 	.word	0x08018684

0800eedc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d119      	bne.n	800ef24 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eef0:	4b10      	ldr	r3, [pc, #64]	@ (800ef34 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eef2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800eef6:	4910      	ldr	r1, [pc, #64]	@ (800ef38 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eef8:	4810      	ldr	r0, [pc, #64]	@ (800ef3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eefa:	f007 fe7f 	bl	8016bfc <iprintf>

  while (pcb != NULL) {
 800eefe:	e011      	b.n	800ef24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d108      	bne.n	800ef1e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f7fe ffc4 	bl	800dea0 <tcp_abort>
      pcb = next;
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	60fb      	str	r3, [r7, #12]
 800ef1c:	e002      	b.n	800ef24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1ea      	bne.n	800ef00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ef2a:	bf00      	nop
 800ef2c:	bf00      	nop
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	08018640 	.word	0x08018640
 800ef38:	08018d74 	.word	0x08018d74
 800ef3c:	08018684 	.word	0x08018684

0800ef40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d02a      	beq.n	800efa6 <tcp_netif_ip_addr_changed+0x66>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d026      	beq.n	800efa6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ef58:	4b15      	ldr	r3, [pc, #84]	@ (800efb0 <tcp_netif_ip_addr_changed+0x70>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff ffbc 	bl	800eedc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ef64:	4b13      	ldr	r3, [pc, #76]	@ (800efb4 <tcp_netif_ip_addr_changed+0x74>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f7ff ffb6 	bl	800eedc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d017      	beq.n	800efa6 <tcp_netif_ip_addr_changed+0x66>
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d013      	beq.n	800efa6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef7e:	4b0e      	ldr	r3, [pc, #56]	@ (800efb8 <tcp_netif_ip_addr_changed+0x78>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	60fb      	str	r3, [r7, #12]
 800ef84:	e00c      	b.n	800efa0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d103      	bne.n	800ef9a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	60fb      	str	r3, [r7, #12]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1ef      	bne.n	800ef86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800efa6:	bf00      	nop
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	20008c0c 	.word	0x20008c0c
 800efb4:	20008c04 	.word	0x20008c04
 800efb8:	20008c08 	.word	0x20008c08

0800efbc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d007      	beq.n	800efdc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff fc3d 	bl	800e850 <tcp_segs_free>
    pcb->ooseq = NULL;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800efdc:	bf00      	nop
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800efe4:	b590      	push	{r4, r7, lr}
 800efe6:	b08d      	sub	sp, #52	@ 0x34
 800efe8:	af04      	add	r7, sp, #16
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d105      	bne.n	800f000 <tcp_input+0x1c>
 800eff4:	4b9b      	ldr	r3, [pc, #620]	@ (800f264 <tcp_input+0x280>)
 800eff6:	2283      	movs	r2, #131	@ 0x83
 800eff8:	499b      	ldr	r1, [pc, #620]	@ (800f268 <tcp_input+0x284>)
 800effa:	489c      	ldr	r0, [pc, #624]	@ (800f26c <tcp_input+0x288>)
 800effc:	f007 fdfe 	bl	8016bfc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	4a9a      	ldr	r2, [pc, #616]	@ (800f270 <tcp_input+0x28c>)
 800f006:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	895b      	ldrh	r3, [r3, #10]
 800f00c:	2b13      	cmp	r3, #19
 800f00e:	f240 83d1 	bls.w	800f7b4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f012:	4b98      	ldr	r3, [pc, #608]	@ (800f274 <tcp_input+0x290>)
 800f014:	695b      	ldr	r3, [r3, #20]
 800f016:	4a97      	ldr	r2, [pc, #604]	@ (800f274 <tcp_input+0x290>)
 800f018:	6812      	ldr	r2, [r2, #0]
 800f01a:	4611      	mov	r1, r2
 800f01c:	4618      	mov	r0, r3
 800f01e:	f005 ff01 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	f040 83c7 	bne.w	800f7b8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f02a:	4b92      	ldr	r3, [pc, #584]	@ (800f274 <tcp_input+0x290>)
 800f02c:	695b      	ldr	r3, [r3, #20]
 800f02e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f032:	2be0      	cmp	r3, #224	@ 0xe0
 800f034:	f000 83c0 	beq.w	800f7b8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f038:	4b8d      	ldr	r3, [pc, #564]	@ (800f270 <tcp_input+0x28c>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	899b      	ldrh	r3, [r3, #12]
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4618      	mov	r0, r3
 800f042:	f7fc fe37 	bl	800bcb4 <lwip_htons>
 800f046:	4603      	mov	r3, r0
 800f048:	0b1b      	lsrs	r3, r3, #12
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f052:	7cbb      	ldrb	r3, [r7, #18]
 800f054:	2b13      	cmp	r3, #19
 800f056:	f240 83b1 	bls.w	800f7bc <tcp_input+0x7d8>
 800f05a:	7cbb      	ldrb	r3, [r7, #18]
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	891b      	ldrh	r3, [r3, #8]
 800f062:	429a      	cmp	r2, r3
 800f064:	f200 83aa 	bhi.w	800f7bc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f068:	7cbb      	ldrb	r3, [r7, #18]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	3b14      	subs	r3, #20
 800f06e:	b29a      	uxth	r2, r3
 800f070:	4b81      	ldr	r3, [pc, #516]	@ (800f278 <tcp_input+0x294>)
 800f072:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f074:	4b81      	ldr	r3, [pc, #516]	@ (800f27c <tcp_input+0x298>)
 800f076:	2200      	movs	r2, #0
 800f078:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	895a      	ldrh	r2, [r3, #10]
 800f07e:	7cbb      	ldrb	r3, [r7, #18]
 800f080:	b29b      	uxth	r3, r3
 800f082:	429a      	cmp	r2, r3
 800f084:	d309      	bcc.n	800f09a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f086:	4b7c      	ldr	r3, [pc, #496]	@ (800f278 <tcp_input+0x294>)
 800f088:	881a      	ldrh	r2, [r3, #0]
 800f08a:	4b7d      	ldr	r3, [pc, #500]	@ (800f280 <tcp_input+0x29c>)
 800f08c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f08e:	7cbb      	ldrb	r3, [r7, #18]
 800f090:	4619      	mov	r1, r3
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f7fe f8e6 	bl	800d264 <pbuf_remove_header>
 800f098:	e04e      	b.n	800f138 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d105      	bne.n	800f0ae <tcp_input+0xca>
 800f0a2:	4b70      	ldr	r3, [pc, #448]	@ (800f264 <tcp_input+0x280>)
 800f0a4:	22c2      	movs	r2, #194	@ 0xc2
 800f0a6:	4977      	ldr	r1, [pc, #476]	@ (800f284 <tcp_input+0x2a0>)
 800f0a8:	4870      	ldr	r0, [pc, #448]	@ (800f26c <tcp_input+0x288>)
 800f0aa:	f007 fda7 	bl	8016bfc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f0ae:	2114      	movs	r1, #20
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7fe f8d7 	bl	800d264 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	895a      	ldrh	r2, [r3, #10]
 800f0ba:	4b71      	ldr	r3, [pc, #452]	@ (800f280 <tcp_input+0x29c>)
 800f0bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f0be:	4b6e      	ldr	r3, [pc, #440]	@ (800f278 <tcp_input+0x294>)
 800f0c0:	881a      	ldrh	r2, [r3, #0]
 800f0c2:	4b6f      	ldr	r3, [pc, #444]	@ (800f280 <tcp_input+0x29c>)
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	1ad3      	subs	r3, r2, r3
 800f0c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f0ca:	4b6d      	ldr	r3, [pc, #436]	@ (800f280 <tcp_input+0x29c>)
 800f0cc:	881b      	ldrh	r3, [r3, #0]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7fe f8c7 	bl	800d264 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	895b      	ldrh	r3, [r3, #10]
 800f0dc:	8a3a      	ldrh	r2, [r7, #16]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	f200 836e 	bhi.w	800f7c0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	4a64      	ldr	r2, [pc, #400]	@ (800f27c <tcp_input+0x298>)
 800f0ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	8a3a      	ldrh	r2, [r7, #16]
 800f0f4:	4611      	mov	r1, r2
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fe f8b4 	bl	800d264 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	891a      	ldrh	r2, [r3, #8]
 800f100:	8a3b      	ldrh	r3, [r7, #16]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	b29a      	uxth	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	895b      	ldrh	r3, [r3, #10]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d005      	beq.n	800f11e <tcp_input+0x13a>
 800f112:	4b54      	ldr	r3, [pc, #336]	@ (800f264 <tcp_input+0x280>)
 800f114:	22df      	movs	r2, #223	@ 0xdf
 800f116:	495c      	ldr	r1, [pc, #368]	@ (800f288 <tcp_input+0x2a4>)
 800f118:	4854      	ldr	r0, [pc, #336]	@ (800f26c <tcp_input+0x288>)
 800f11a:	f007 fd6f 	bl	8016bfc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	891a      	ldrh	r2, [r3, #8]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	891b      	ldrh	r3, [r3, #8]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d005      	beq.n	800f138 <tcp_input+0x154>
 800f12c:	4b4d      	ldr	r3, [pc, #308]	@ (800f264 <tcp_input+0x280>)
 800f12e:	22e0      	movs	r2, #224	@ 0xe0
 800f130:	4956      	ldr	r1, [pc, #344]	@ (800f28c <tcp_input+0x2a8>)
 800f132:	484e      	ldr	r0, [pc, #312]	@ (800f26c <tcp_input+0x288>)
 800f134:	f007 fd62 	bl	8016bfc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f138:	4b4d      	ldr	r3, [pc, #308]	@ (800f270 <tcp_input+0x28c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	4a4b      	ldr	r2, [pc, #300]	@ (800f270 <tcp_input+0x28c>)
 800f142:	6814      	ldr	r4, [r2, #0]
 800f144:	4618      	mov	r0, r3
 800f146:	f7fc fdb5 	bl	800bcb4 <lwip_htons>
 800f14a:	4603      	mov	r3, r0
 800f14c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f14e:	4b48      	ldr	r3, [pc, #288]	@ (800f270 <tcp_input+0x28c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	885b      	ldrh	r3, [r3, #2]
 800f154:	b29b      	uxth	r3, r3
 800f156:	4a46      	ldr	r2, [pc, #280]	@ (800f270 <tcp_input+0x28c>)
 800f158:	6814      	ldr	r4, [r2, #0]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fc fdaa 	bl	800bcb4 <lwip_htons>
 800f160:	4603      	mov	r3, r0
 800f162:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f164:	4b42      	ldr	r3, [pc, #264]	@ (800f270 <tcp_input+0x28c>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	4a41      	ldr	r2, [pc, #260]	@ (800f270 <tcp_input+0x28c>)
 800f16c:	6814      	ldr	r4, [r2, #0]
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fc fdb5 	bl	800bcde <lwip_htonl>
 800f174:	4603      	mov	r3, r0
 800f176:	6063      	str	r3, [r4, #4]
 800f178:	6863      	ldr	r3, [r4, #4]
 800f17a:	4a45      	ldr	r2, [pc, #276]	@ (800f290 <tcp_input+0x2ac>)
 800f17c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f17e:	4b3c      	ldr	r3, [pc, #240]	@ (800f270 <tcp_input+0x28c>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	4a3a      	ldr	r2, [pc, #232]	@ (800f270 <tcp_input+0x28c>)
 800f186:	6814      	ldr	r4, [r2, #0]
 800f188:	4618      	mov	r0, r3
 800f18a:	f7fc fda8 	bl	800bcde <lwip_htonl>
 800f18e:	4603      	mov	r3, r0
 800f190:	60a3      	str	r3, [r4, #8]
 800f192:	68a3      	ldr	r3, [r4, #8]
 800f194:	4a3f      	ldr	r2, [pc, #252]	@ (800f294 <tcp_input+0x2b0>)
 800f196:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f198:	4b35      	ldr	r3, [pc, #212]	@ (800f270 <tcp_input+0x28c>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	89db      	ldrh	r3, [r3, #14]
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	4a33      	ldr	r2, [pc, #204]	@ (800f270 <tcp_input+0x28c>)
 800f1a2:	6814      	ldr	r4, [r2, #0]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fc fd85 	bl	800bcb4 <lwip_htons>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f1ae:	4b30      	ldr	r3, [pc, #192]	@ (800f270 <tcp_input+0x28c>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	899b      	ldrh	r3, [r3, #12]
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7fc fd7c 	bl	800bcb4 <lwip_htons>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	4b34      	ldr	r3, [pc, #208]	@ (800f298 <tcp_input+0x2b4>)
 800f1c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	891a      	ldrh	r2, [r3, #8]
 800f1ce:	4b33      	ldr	r3, [pc, #204]	@ (800f29c <tcp_input+0x2b8>)
 800f1d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f1d2:	4b31      	ldr	r3, [pc, #196]	@ (800f298 <tcp_input+0x2b4>)
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	f003 0303 	and.w	r3, r3, #3
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00c      	beq.n	800f1f8 <tcp_input+0x214>
    tcplen++;
 800f1de:	4b2f      	ldr	r3, [pc, #188]	@ (800f29c <tcp_input+0x2b8>)
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	4b2d      	ldr	r3, [pc, #180]	@ (800f29c <tcp_input+0x2b8>)
 800f1e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	891a      	ldrh	r2, [r3, #8]
 800f1ee:	4b2b      	ldr	r3, [pc, #172]	@ (800f29c <tcp_input+0x2b8>)
 800f1f0:	881b      	ldrh	r3, [r3, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	f200 82e6 	bhi.w	800f7c4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1fc:	4b28      	ldr	r3, [pc, #160]	@ (800f2a0 <tcp_input+0x2bc>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	61fb      	str	r3, [r7, #28]
 800f202:	e09d      	b.n	800f340 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	7d1b      	ldrb	r3, [r3, #20]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d105      	bne.n	800f218 <tcp_input+0x234>
 800f20c:	4b15      	ldr	r3, [pc, #84]	@ (800f264 <tcp_input+0x280>)
 800f20e:	22fb      	movs	r2, #251	@ 0xfb
 800f210:	4924      	ldr	r1, [pc, #144]	@ (800f2a4 <tcp_input+0x2c0>)
 800f212:	4816      	ldr	r0, [pc, #88]	@ (800f26c <tcp_input+0x288>)
 800f214:	f007 fcf2 	bl	8016bfc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	7d1b      	ldrb	r3, [r3, #20]
 800f21c:	2b0a      	cmp	r3, #10
 800f21e:	d105      	bne.n	800f22c <tcp_input+0x248>
 800f220:	4b10      	ldr	r3, [pc, #64]	@ (800f264 <tcp_input+0x280>)
 800f222:	22fc      	movs	r2, #252	@ 0xfc
 800f224:	4920      	ldr	r1, [pc, #128]	@ (800f2a8 <tcp_input+0x2c4>)
 800f226:	4811      	ldr	r0, [pc, #68]	@ (800f26c <tcp_input+0x288>)
 800f228:	f007 fce8 	bl	8016bfc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	7d1b      	ldrb	r3, [r3, #20]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d105      	bne.n	800f240 <tcp_input+0x25c>
 800f234:	4b0b      	ldr	r3, [pc, #44]	@ (800f264 <tcp_input+0x280>)
 800f236:	22fd      	movs	r2, #253	@ 0xfd
 800f238:	491c      	ldr	r1, [pc, #112]	@ (800f2ac <tcp_input+0x2c8>)
 800f23a:	480c      	ldr	r0, [pc, #48]	@ (800f26c <tcp_input+0x288>)
 800f23c:	f007 fcde 	bl	8016bfc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	7a1b      	ldrb	r3, [r3, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d033      	beq.n	800f2b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	7a1a      	ldrb	r2, [r3, #8]
 800f24c:	4b09      	ldr	r3, [pc, #36]	@ (800f274 <tcp_input+0x290>)
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f254:	3301      	adds	r3, #1
 800f256:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f258:	429a      	cmp	r2, r3
 800f25a:	d029      	beq.n	800f2b0 <tcp_input+0x2cc>
      prev = pcb;
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	61bb      	str	r3, [r7, #24]
      continue;
 800f260:	e06b      	b.n	800f33a <tcp_input+0x356>
 800f262:	bf00      	nop
 800f264:	08018da8 	.word	0x08018da8
 800f268:	08018ddc 	.word	0x08018ddc
 800f26c:	08018df4 	.word	0x08018df4
 800f270:	20008c28 	.word	0x20008c28
 800f274:	20005690 	.word	0x20005690
 800f278:	20008c2c 	.word	0x20008c2c
 800f27c:	20008c30 	.word	0x20008c30
 800f280:	20008c2e 	.word	0x20008c2e
 800f284:	08018e1c 	.word	0x08018e1c
 800f288:	08018e2c 	.word	0x08018e2c
 800f28c:	08018e38 	.word	0x08018e38
 800f290:	20008c38 	.word	0x20008c38
 800f294:	20008c3c 	.word	0x20008c3c
 800f298:	20008c44 	.word	0x20008c44
 800f29c:	20008c42 	.word	0x20008c42
 800f2a0:	20008c0c 	.word	0x20008c0c
 800f2a4:	08018e58 	.word	0x08018e58
 800f2a8:	08018e80 	.word	0x08018e80
 800f2ac:	08018eac 	.word	0x08018eac
    }

    if (pcb->remote_port == tcphdr->src &&
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	8b1a      	ldrh	r2, [r3, #24]
 800f2b4:	4b72      	ldr	r3, [pc, #456]	@ (800f480 <tcp_input+0x49c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	881b      	ldrh	r3, [r3, #0]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d13a      	bne.n	800f336 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	8ada      	ldrh	r2, [r3, #22]
 800f2c4:	4b6e      	ldr	r3, [pc, #440]	@ (800f480 <tcp_input+0x49c>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	885b      	ldrh	r3, [r3, #2]
 800f2ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d132      	bne.n	800f336 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	685a      	ldr	r2, [r3, #4]
 800f2d4:	4b6b      	ldr	r3, [pc, #428]	@ (800f484 <tcp_input+0x4a0>)
 800f2d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d12c      	bne.n	800f336 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	4b68      	ldr	r3, [pc, #416]	@ (800f484 <tcp_input+0x4a0>)
 800f2e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d126      	bne.n	800f336 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	69fa      	ldr	r2, [r7, #28]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d106      	bne.n	800f300 <tcp_input+0x31c>
 800f2f2:	4b65      	ldr	r3, [pc, #404]	@ (800f488 <tcp_input+0x4a4>)
 800f2f4:	f240 120d 	movw	r2, #269	@ 0x10d
 800f2f8:	4964      	ldr	r1, [pc, #400]	@ (800f48c <tcp_input+0x4a8>)
 800f2fa:	4865      	ldr	r0, [pc, #404]	@ (800f490 <tcp_input+0x4ac>)
 800f2fc:	f007 fc7e 	bl	8016bfc <iprintf>
      if (prev != NULL) {
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d00a      	beq.n	800f31c <tcp_input+0x338>
        prev->next = pcb->next;
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	68da      	ldr	r2, [r3, #12]
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f30e:	4b61      	ldr	r3, [pc, #388]	@ (800f494 <tcp_input+0x4b0>)
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f316:	4a5f      	ldr	r2, [pc, #380]	@ (800f494 <tcp_input+0x4b0>)
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	69fa      	ldr	r2, [r7, #28]
 800f322:	429a      	cmp	r2, r3
 800f324:	d111      	bne.n	800f34a <tcp_input+0x366>
 800f326:	4b58      	ldr	r3, [pc, #352]	@ (800f488 <tcp_input+0x4a4>)
 800f328:	f240 1215 	movw	r2, #277	@ 0x115
 800f32c:	495a      	ldr	r1, [pc, #360]	@ (800f498 <tcp_input+0x4b4>)
 800f32e:	4858      	ldr	r0, [pc, #352]	@ (800f490 <tcp_input+0x4ac>)
 800f330:	f007 fc64 	bl	8016bfc <iprintf>
      break;
 800f334:	e009      	b.n	800f34a <tcp_input+0x366>
    }
    prev = pcb;
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	61fb      	str	r3, [r7, #28]
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	2b00      	cmp	r3, #0
 800f344:	f47f af5e 	bne.w	800f204 <tcp_input+0x220>
 800f348:	e000      	b.n	800f34c <tcp_input+0x368>
      break;
 800f34a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f040 80aa 	bne.w	800f4a8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f354:	4b51      	ldr	r3, [pc, #324]	@ (800f49c <tcp_input+0x4b8>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	61fb      	str	r3, [r7, #28]
 800f35a:	e03f      	b.n	800f3dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	7d1b      	ldrb	r3, [r3, #20]
 800f360:	2b0a      	cmp	r3, #10
 800f362:	d006      	beq.n	800f372 <tcp_input+0x38e>
 800f364:	4b48      	ldr	r3, [pc, #288]	@ (800f488 <tcp_input+0x4a4>)
 800f366:	f240 121f 	movw	r2, #287	@ 0x11f
 800f36a:	494d      	ldr	r1, [pc, #308]	@ (800f4a0 <tcp_input+0x4bc>)
 800f36c:	4848      	ldr	r0, [pc, #288]	@ (800f490 <tcp_input+0x4ac>)
 800f36e:	f007 fc45 	bl	8016bfc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	7a1b      	ldrb	r3, [r3, #8]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d009      	beq.n	800f38e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	7a1a      	ldrb	r2, [r3, #8]
 800f37e:	4b41      	ldr	r3, [pc, #260]	@ (800f484 <tcp_input+0x4a0>)
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f386:	3301      	adds	r3, #1
 800f388:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d122      	bne.n	800f3d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	8b1a      	ldrh	r2, [r3, #24]
 800f392:	4b3b      	ldr	r3, [pc, #236]	@ (800f480 <tcp_input+0x49c>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d11b      	bne.n	800f3d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	8ada      	ldrh	r2, [r3, #22]
 800f3a2:	4b37      	ldr	r3, [pc, #220]	@ (800f480 <tcp_input+0x49c>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	885b      	ldrh	r3, [r3, #2]
 800f3a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d113      	bne.n	800f3d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	4b34      	ldr	r3, [pc, #208]	@ (800f484 <tcp_input+0x4a0>)
 800f3b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d10d      	bne.n	800f3d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	4b31      	ldr	r3, [pc, #196]	@ (800f484 <tcp_input+0x4a0>)
 800f3c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d107      	bne.n	800f3d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f3c6:	69f8      	ldr	r0, [r7, #28]
 800f3c8:	f000 fb56 	bl	800fa78 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7fd ffcf 	bl	800d370 <pbuf_free>
        return;
 800f3d2:	e1fd      	b.n	800f7d0 <tcp_input+0x7ec>
        continue;
 800f3d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	61fb      	str	r3, [r7, #28]
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1bc      	bne.n	800f35c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3e6:	4b2f      	ldr	r3, [pc, #188]	@ (800f4a4 <tcp_input+0x4c0>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	617b      	str	r3, [r7, #20]
 800f3ec:	e02a      	b.n	800f444 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	7a1b      	ldrb	r3, [r3, #8]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00c      	beq.n	800f410 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	7a1a      	ldrb	r2, [r3, #8]
 800f3fa:	4b22      	ldr	r3, [pc, #136]	@ (800f484 <tcp_input+0x4a0>)
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f402:	3301      	adds	r3, #1
 800f404:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f406:	429a      	cmp	r2, r3
 800f408:	d002      	beq.n	800f410 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	61bb      	str	r3, [r7, #24]
        continue;
 800f40e:	e016      	b.n	800f43e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	8ada      	ldrh	r2, [r3, #22]
 800f414:	4b1a      	ldr	r3, [pc, #104]	@ (800f480 <tcp_input+0x49c>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	885b      	ldrh	r3, [r3, #2]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d10c      	bne.n	800f43a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	4b17      	ldr	r3, [pc, #92]	@ (800f484 <tcp_input+0x4a0>)
 800f426:	695b      	ldr	r3, [r3, #20]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d00f      	beq.n	800f44c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00d      	beq.n	800f44e <tcp_input+0x46a>
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d009      	beq.n	800f44e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	617b      	str	r3, [r7, #20]
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1d1      	bne.n	800f3ee <tcp_input+0x40a>
 800f44a:	e000      	b.n	800f44e <tcp_input+0x46a>
            break;
 800f44c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d029      	beq.n	800f4a8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00a      	beq.n	800f470 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	68da      	ldr	r2, [r3, #12]
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f462:	4b10      	ldr	r3, [pc, #64]	@ (800f4a4 <tcp_input+0x4c0>)
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f46a:	4a0e      	ldr	r2, [pc, #56]	@ (800f4a4 <tcp_input+0x4c0>)
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f470:	6978      	ldr	r0, [r7, #20]
 800f472:	f000 fa03 	bl	800f87c <tcp_listen_input>
      }
      pbuf_free(p);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7fd ff7a 	bl	800d370 <pbuf_free>
      return;
 800f47c:	e1a8      	b.n	800f7d0 <tcp_input+0x7ec>
 800f47e:	bf00      	nop
 800f480:	20008c28 	.word	0x20008c28
 800f484:	20005690 	.word	0x20005690
 800f488:	08018da8 	.word	0x08018da8
 800f48c:	08018ed4 	.word	0x08018ed4
 800f490:	08018df4 	.word	0x08018df4
 800f494:	20008c0c 	.word	0x20008c0c
 800f498:	08018f00 	.word	0x08018f00
 800f49c:	20008c10 	.word	0x20008c10
 800f4a0:	08018f2c 	.word	0x08018f2c
 800f4a4:	20008c08 	.word	0x20008c08
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f000 8158 	beq.w	800f760 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f4b0:	4b95      	ldr	r3, [pc, #596]	@ (800f708 <tcp_input+0x724>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	891a      	ldrh	r2, [r3, #8]
 800f4ba:	4b93      	ldr	r3, [pc, #588]	@ (800f708 <tcp_input+0x724>)
 800f4bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f4be:	4a92      	ldr	r2, [pc, #584]	@ (800f708 <tcp_input+0x724>)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f4c4:	4b91      	ldr	r3, [pc, #580]	@ (800f70c <tcp_input+0x728>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a8f      	ldr	r2, [pc, #572]	@ (800f708 <tcp_input+0x724>)
 800f4ca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f4cc:	4b90      	ldr	r3, [pc, #576]	@ (800f710 <tcp_input+0x72c>)
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f4d2:	4b90      	ldr	r3, [pc, #576]	@ (800f714 <tcp_input+0x730>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f4d8:	4b8f      	ldr	r3, [pc, #572]	@ (800f718 <tcp_input+0x734>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f4de:	4b8f      	ldr	r3, [pc, #572]	@ (800f71c <tcp_input+0x738>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	f003 0308 	and.w	r3, r3, #8
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d006      	beq.n	800f4f8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	7b5b      	ldrb	r3, [r3, #13]
 800f4ee:	f043 0301 	orr.w	r3, r3, #1
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d017      	beq.n	800f530 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f500:	69f8      	ldr	r0, [r7, #28]
 800f502:	f7ff f929 	bl	800e758 <tcp_process_refused_data>
 800f506:	4603      	mov	r3, r0
 800f508:	f113 0f0d 	cmn.w	r3, #13
 800f50c:	d007      	beq.n	800f51e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f512:	2b00      	cmp	r3, #0
 800f514:	d00c      	beq.n	800f530 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f516:	4b82      	ldr	r3, [pc, #520]	@ (800f720 <tcp_input+0x73c>)
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d008      	beq.n	800f530 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f522:	2b00      	cmp	r3, #0
 800f524:	f040 80e3 	bne.w	800f6ee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f528:	69f8      	ldr	r0, [r7, #28]
 800f52a:	f003 f9a7 	bl	801287c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f52e:	e0de      	b.n	800f6ee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f530:	4a7c      	ldr	r2, [pc, #496]	@ (800f724 <tcp_input+0x740>)
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f536:	69f8      	ldr	r0, [r7, #28]
 800f538:	f000 fb18 	bl	800fb6c <tcp_process>
 800f53c:	4603      	mov	r3, r0
 800f53e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f540:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f544:	f113 0f0d 	cmn.w	r3, #13
 800f548:	f000 80d3 	beq.w	800f6f2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f54c:	4b71      	ldr	r3, [pc, #452]	@ (800f714 <tcp_input+0x730>)
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 0308 	and.w	r3, r3, #8
 800f554:	2b00      	cmp	r3, #0
 800f556:	d015      	beq.n	800f584 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d008      	beq.n	800f574 <tcp_input+0x590>
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f568:	69fa      	ldr	r2, [r7, #28]
 800f56a:	6912      	ldr	r2, [r2, #16]
 800f56c:	f06f 010d 	mvn.w	r1, #13
 800f570:	4610      	mov	r0, r2
 800f572:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f574:	69f9      	ldr	r1, [r7, #28]
 800f576:	486c      	ldr	r0, [pc, #432]	@ (800f728 <tcp_input+0x744>)
 800f578:	f7ff fbbc 	bl	800ecf4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f57c:	69f8      	ldr	r0, [r7, #28]
 800f57e:	f7fe f9a7 	bl	800d8d0 <tcp_free>
 800f582:	e0da      	b.n	800f73a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f584:	2300      	movs	r3, #0
 800f586:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f588:	4b63      	ldr	r3, [pc, #396]	@ (800f718 <tcp_input+0x734>)
 800f58a:	881b      	ldrh	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d01d      	beq.n	800f5cc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f590:	4b61      	ldr	r3, [pc, #388]	@ (800f718 <tcp_input+0x734>)
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00a      	beq.n	800f5b6 <tcp_input+0x5d2>
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5a6:	69fa      	ldr	r2, [r7, #28]
 800f5a8:	6910      	ldr	r0, [r2, #16]
 800f5aa:	89fa      	ldrh	r2, [r7, #14]
 800f5ac:	69f9      	ldr	r1, [r7, #28]
 800f5ae:	4798      	blx	r3
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	74fb      	strb	r3, [r7, #19]
 800f5b4:	e001      	b.n	800f5ba <tcp_input+0x5d6>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5be:	f113 0f0d 	cmn.w	r3, #13
 800f5c2:	f000 8098 	beq.w	800f6f6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f5c6:	4b54      	ldr	r3, [pc, #336]	@ (800f718 <tcp_input+0x734>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f5cc:	69f8      	ldr	r0, [r7, #28]
 800f5ce:	f000 f915 	bl	800f7fc <tcp_input_delayed_close>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f040 8090 	bne.w	800f6fa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f5da:	4b4d      	ldr	r3, [pc, #308]	@ (800f710 <tcp_input+0x72c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d041      	beq.n	800f666 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d006      	beq.n	800f5f8 <tcp_input+0x614>
 800f5ea:	4b50      	ldr	r3, [pc, #320]	@ (800f72c <tcp_input+0x748>)
 800f5ec:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f5f0:	494f      	ldr	r1, [pc, #316]	@ (800f730 <tcp_input+0x74c>)
 800f5f2:	4850      	ldr	r0, [pc, #320]	@ (800f734 <tcp_input+0x750>)
 800f5f4:	f007 fb02 	bl	8016bfc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	8b5b      	ldrh	r3, [r3, #26]
 800f5fc:	f003 0310 	and.w	r3, r3, #16
 800f600:	2b00      	cmp	r3, #0
 800f602:	d008      	beq.n	800f616 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f604:	4b42      	ldr	r3, [pc, #264]	@ (800f710 <tcp_input+0x72c>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fd feb1 	bl	800d370 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f60e:	69f8      	ldr	r0, [r7, #28]
 800f610:	f7fe fc46 	bl	800dea0 <tcp_abort>
            goto aborted;
 800f614:	e091      	b.n	800f73a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00c      	beq.n	800f63a <tcp_input+0x656>
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	6918      	ldr	r0, [r3, #16]
 800f62a:	4b39      	ldr	r3, [pc, #228]	@ (800f710 <tcp_input+0x72c>)
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	2300      	movs	r3, #0
 800f630:	69f9      	ldr	r1, [r7, #28]
 800f632:	47a0      	blx	r4
 800f634:	4603      	mov	r3, r0
 800f636:	74fb      	strb	r3, [r7, #19]
 800f638:	e008      	b.n	800f64c <tcp_input+0x668>
 800f63a:	4b35      	ldr	r3, [pc, #212]	@ (800f710 <tcp_input+0x72c>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	2300      	movs	r3, #0
 800f640:	69f9      	ldr	r1, [r7, #28]
 800f642:	2000      	movs	r0, #0
 800f644:	f7ff f95e 	bl	800e904 <tcp_recv_null>
 800f648:	4603      	mov	r3, r0
 800f64a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f64c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f650:	f113 0f0d 	cmn.w	r3, #13
 800f654:	d053      	beq.n	800f6fe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f656:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d003      	beq.n	800f666 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f65e:	4b2c      	ldr	r3, [pc, #176]	@ (800f710 <tcp_input+0x72c>)
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f666:	4b2b      	ldr	r3, [pc, #172]	@ (800f714 <tcp_input+0x730>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	f003 0320 	and.w	r3, r3, #32
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d030      	beq.n	800f6d4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f676:	2b00      	cmp	r3, #0
 800f678:	d009      	beq.n	800f68e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f67e:	7b5a      	ldrb	r2, [r3, #13]
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f684:	f042 0220 	orr.w	r2, r2, #32
 800f688:	b2d2      	uxtb	r2, r2
 800f68a:	735a      	strb	r2, [r3, #13]
 800f68c:	e022      	b.n	800f6d4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f692:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f696:	d005      	beq.n	800f6a4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f69c:	3301      	adds	r3, #1
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00b      	beq.n	800f6c6 <tcp_input+0x6e2>
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	6918      	ldr	r0, [r3, #16]
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	69f9      	ldr	r1, [r7, #28]
 800f6be:	47a0      	blx	r4
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	74fb      	strb	r3, [r7, #19]
 800f6c4:	e001      	b.n	800f6ca <tcp_input+0x6e6>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f6ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6ce:	f113 0f0d 	cmn.w	r3, #13
 800f6d2:	d016      	beq.n	800f702 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f6d4:	4b13      	ldr	r3, [pc, #76]	@ (800f724 <tcp_input+0x740>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f6da:	69f8      	ldr	r0, [r7, #28]
 800f6dc:	f000 f88e 	bl	800f7fc <tcp_input_delayed_close>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d128      	bne.n	800f738 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f6e6:	69f8      	ldr	r0, [r7, #28]
 800f6e8:	f002 fac2 	bl	8011c70 <tcp_output>
 800f6ec:	e025      	b.n	800f73a <tcp_input+0x756>
        goto aborted;
 800f6ee:	bf00      	nop
 800f6f0:	e023      	b.n	800f73a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f6f2:	bf00      	nop
 800f6f4:	e021      	b.n	800f73a <tcp_input+0x756>
              goto aborted;
 800f6f6:	bf00      	nop
 800f6f8:	e01f      	b.n	800f73a <tcp_input+0x756>
          goto aborted;
 800f6fa:	bf00      	nop
 800f6fc:	e01d      	b.n	800f73a <tcp_input+0x756>
            goto aborted;
 800f6fe:	bf00      	nop
 800f700:	e01b      	b.n	800f73a <tcp_input+0x756>
              goto aborted;
 800f702:	bf00      	nop
 800f704:	e019      	b.n	800f73a <tcp_input+0x756>
 800f706:	bf00      	nop
 800f708:	20008c18 	.word	0x20008c18
 800f70c:	20008c28 	.word	0x20008c28
 800f710:	20008c48 	.word	0x20008c48
 800f714:	20008c45 	.word	0x20008c45
 800f718:	20008c40 	.word	0x20008c40
 800f71c:	20008c44 	.word	0x20008c44
 800f720:	20008c42 	.word	0x20008c42
 800f724:	20008c4c 	.word	0x20008c4c
 800f728:	20008c0c 	.word	0x20008c0c
 800f72c:	08018da8 	.word	0x08018da8
 800f730:	08018f5c 	.word	0x08018f5c
 800f734:	08018df4 	.word	0x08018df4
          goto aborted;
 800f738:	bf00      	nop
    tcp_input_pcb = NULL;
 800f73a:	4b27      	ldr	r3, [pc, #156]	@ (800f7d8 <tcp_input+0x7f4>)
 800f73c:	2200      	movs	r2, #0
 800f73e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f740:	4b26      	ldr	r3, [pc, #152]	@ (800f7dc <tcp_input+0x7f8>)
 800f742:	2200      	movs	r2, #0
 800f744:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f746:	4b26      	ldr	r3, [pc, #152]	@ (800f7e0 <tcp_input+0x7fc>)
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d03f      	beq.n	800f7ce <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f74e:	4b24      	ldr	r3, [pc, #144]	@ (800f7e0 <tcp_input+0x7fc>)
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	4618      	mov	r0, r3
 800f754:	f7fd fe0c 	bl	800d370 <pbuf_free>
      inseg.p = NULL;
 800f758:	4b21      	ldr	r3, [pc, #132]	@ (800f7e0 <tcp_input+0x7fc>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f75e:	e036      	b.n	800f7ce <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f760:	4b20      	ldr	r3, [pc, #128]	@ (800f7e4 <tcp_input+0x800>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	899b      	ldrh	r3, [r3, #12]
 800f766:	b29b      	uxth	r3, r3
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fc faa3 	bl	800bcb4 <lwip_htons>
 800f76e:	4603      	mov	r3, r0
 800f770:	b2db      	uxtb	r3, r3
 800f772:	f003 0304 	and.w	r3, r3, #4
 800f776:	2b00      	cmp	r3, #0
 800f778:	d118      	bne.n	800f7ac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f77a:	4b1b      	ldr	r3, [pc, #108]	@ (800f7e8 <tcp_input+0x804>)
 800f77c:	6819      	ldr	r1, [r3, #0]
 800f77e:	4b1b      	ldr	r3, [pc, #108]	@ (800f7ec <tcp_input+0x808>)
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	4b1a      	ldr	r3, [pc, #104]	@ (800f7f0 <tcp_input+0x80c>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f78a:	4b16      	ldr	r3, [pc, #88]	@ (800f7e4 <tcp_input+0x800>)
 800f78c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f78e:	885b      	ldrh	r3, [r3, #2]
 800f790:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f792:	4a14      	ldr	r2, [pc, #80]	@ (800f7e4 <tcp_input+0x800>)
 800f794:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f796:	8812      	ldrh	r2, [r2, #0]
 800f798:	b292      	uxth	r2, r2
 800f79a:	9202      	str	r2, [sp, #8]
 800f79c:	9301      	str	r3, [sp, #4]
 800f79e:	4b15      	ldr	r3, [pc, #84]	@ (800f7f4 <tcp_input+0x810>)
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	4b15      	ldr	r3, [pc, #84]	@ (800f7f8 <tcp_input+0x814>)
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	f003 f816 	bl	80127d8 <tcp_rst>
    pbuf_free(p);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7fd fddf 	bl	800d370 <pbuf_free>
  return;
 800f7b2:	e00c      	b.n	800f7ce <tcp_input+0x7ea>
    goto dropped;
 800f7b4:	bf00      	nop
 800f7b6:	e006      	b.n	800f7c6 <tcp_input+0x7e2>
    goto dropped;
 800f7b8:	bf00      	nop
 800f7ba:	e004      	b.n	800f7c6 <tcp_input+0x7e2>
    goto dropped;
 800f7bc:	bf00      	nop
 800f7be:	e002      	b.n	800f7c6 <tcp_input+0x7e2>
      goto dropped;
 800f7c0:	bf00      	nop
 800f7c2:	e000      	b.n	800f7c6 <tcp_input+0x7e2>
      goto dropped;
 800f7c4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7fd fdd2 	bl	800d370 <pbuf_free>
 800f7cc:	e000      	b.n	800f7d0 <tcp_input+0x7ec>
  return;
 800f7ce:	bf00      	nop
}
 800f7d0:	3724      	adds	r7, #36	@ 0x24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd90      	pop	{r4, r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20008c4c 	.word	0x20008c4c
 800f7dc:	20008c48 	.word	0x20008c48
 800f7e0:	20008c18 	.word	0x20008c18
 800f7e4:	20008c28 	.word	0x20008c28
 800f7e8:	20008c3c 	.word	0x20008c3c
 800f7ec:	20008c42 	.word	0x20008c42
 800f7f0:	20008c38 	.word	0x20008c38
 800f7f4:	200056a0 	.word	0x200056a0
 800f7f8:	200056a4 	.word	0x200056a4

0800f7fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <tcp_input_delayed_close+0x1c>
 800f80a:	4b17      	ldr	r3, [pc, #92]	@ (800f868 <tcp_input_delayed_close+0x6c>)
 800f80c:	f240 225a 	movw	r2, #602	@ 0x25a
 800f810:	4916      	ldr	r1, [pc, #88]	@ (800f86c <tcp_input_delayed_close+0x70>)
 800f812:	4817      	ldr	r0, [pc, #92]	@ (800f870 <tcp_input_delayed_close+0x74>)
 800f814:	f007 f9f2 	bl	8016bfc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f818:	4b16      	ldr	r3, [pc, #88]	@ (800f874 <tcp_input_delayed_close+0x78>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f003 0310 	and.w	r3, r3, #16
 800f820:	2b00      	cmp	r3, #0
 800f822:	d01c      	beq.n	800f85e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	8b5b      	ldrh	r3, [r3, #26]
 800f828:	f003 0310 	and.w	r3, r3, #16
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10d      	bne.n	800f84c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f836:	2b00      	cmp	r3, #0
 800f838:	d008      	beq.n	800f84c <tcp_input_delayed_close+0x50>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	6912      	ldr	r2, [r2, #16]
 800f844:	f06f 010e 	mvn.w	r1, #14
 800f848:	4610      	mov	r0, r2
 800f84a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f84c:	6879      	ldr	r1, [r7, #4]
 800f84e:	480a      	ldr	r0, [pc, #40]	@ (800f878 <tcp_input_delayed_close+0x7c>)
 800f850:	f7ff fa50 	bl	800ecf4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7fe f83b 	bl	800d8d0 <tcp_free>
    return 1;
 800f85a:	2301      	movs	r3, #1
 800f85c:	e000      	b.n	800f860 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f85e:	2300      	movs	r3, #0
}
 800f860:	4618      	mov	r0, r3
 800f862:	3708      	adds	r7, #8
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	08018da8 	.word	0x08018da8
 800f86c:	08018f78 	.word	0x08018f78
 800f870:	08018df4 	.word	0x08018df4
 800f874:	20008c45 	.word	0x20008c45
 800f878:	20008c0c 	.word	0x20008c0c

0800f87c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f87c:	b590      	push	{r4, r7, lr}
 800f87e:	b08b      	sub	sp, #44	@ 0x2c
 800f880:	af04      	add	r7, sp, #16
 800f882:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f884:	4b6f      	ldr	r3, [pc, #444]	@ (800fa44 <tcp_listen_input+0x1c8>)
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f003 0304 	and.w	r3, r3, #4
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f040 80d2 	bne.w	800fa36 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d106      	bne.n	800f8a6 <tcp_listen_input+0x2a>
 800f898:	4b6b      	ldr	r3, [pc, #428]	@ (800fa48 <tcp_listen_input+0x1cc>)
 800f89a:	f240 2281 	movw	r2, #641	@ 0x281
 800f89e:	496b      	ldr	r1, [pc, #428]	@ (800fa4c <tcp_listen_input+0x1d0>)
 800f8a0:	486b      	ldr	r0, [pc, #428]	@ (800fa50 <tcp_listen_input+0x1d4>)
 800f8a2:	f007 f9ab 	bl	8016bfc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f8a6:	4b67      	ldr	r3, [pc, #412]	@ (800fa44 <tcp_listen_input+0x1c8>)
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	f003 0310 	and.w	r3, r3, #16
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d019      	beq.n	800f8e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8b2:	4b68      	ldr	r3, [pc, #416]	@ (800fa54 <tcp_listen_input+0x1d8>)
 800f8b4:	6819      	ldr	r1, [r3, #0]
 800f8b6:	4b68      	ldr	r3, [pc, #416]	@ (800fa58 <tcp_listen_input+0x1dc>)
 800f8b8:	881b      	ldrh	r3, [r3, #0]
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	4b67      	ldr	r3, [pc, #412]	@ (800fa5c <tcp_listen_input+0x1e0>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8c2:	4b67      	ldr	r3, [pc, #412]	@ (800fa60 <tcp_listen_input+0x1e4>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8c6:	885b      	ldrh	r3, [r3, #2]
 800f8c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8ca:	4a65      	ldr	r2, [pc, #404]	@ (800fa60 <tcp_listen_input+0x1e4>)
 800f8cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8ce:	8812      	ldrh	r2, [r2, #0]
 800f8d0:	b292      	uxth	r2, r2
 800f8d2:	9202      	str	r2, [sp, #8]
 800f8d4:	9301      	str	r3, [sp, #4]
 800f8d6:	4b63      	ldr	r3, [pc, #396]	@ (800fa64 <tcp_listen_input+0x1e8>)
 800f8d8:	9300      	str	r3, [sp, #0]
 800f8da:	4b63      	ldr	r3, [pc, #396]	@ (800fa68 <tcp_listen_input+0x1ec>)
 800f8dc:	4602      	mov	r2, r0
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f002 ff7a 	bl	80127d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f8e4:	e0a9      	b.n	800fa3a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f8e6:	4b57      	ldr	r3, [pc, #348]	@ (800fa44 <tcp_listen_input+0x1c8>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	f003 0302 	and.w	r3, r3, #2
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f000 80a3 	beq.w	800fa3a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7d5b      	ldrb	r3, [r3, #21]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7ff f927 	bl	800eb4c <tcp_alloc>
 800f8fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d111      	bne.n	800f92a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	699b      	ldr	r3, [r3, #24]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00a      	beq.n	800f924 <tcp_listen_input+0xa8>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	699b      	ldr	r3, [r3, #24]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	6910      	ldr	r0, [r2, #16]
 800f916:	f04f 32ff 	mov.w	r2, #4294967295
 800f91a:	2100      	movs	r1, #0
 800f91c:	4798      	blx	r3
 800f91e:	4603      	mov	r3, r0
 800f920:	73bb      	strb	r3, [r7, #14]
      return;
 800f922:	e08b      	b.n	800fa3c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f924:	23f0      	movs	r3, #240	@ 0xf0
 800f926:	73bb      	strb	r3, [r7, #14]
      return;
 800f928:	e088      	b.n	800fa3c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f92a:	4b50      	ldr	r3, [pc, #320]	@ (800fa6c <tcp_listen_input+0x1f0>)
 800f92c:	695a      	ldr	r2, [r3, #20]
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f932:	4b4e      	ldr	r3, [pc, #312]	@ (800fa6c <tcp_listen_input+0x1f0>)
 800f934:	691a      	ldr	r2, [r3, #16]
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	8ada      	ldrh	r2, [r3, #22]
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f942:	4b47      	ldr	r3, [pc, #284]	@ (800fa60 <tcp_listen_input+0x1e4>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	b29a      	uxth	r2, r3
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	2203      	movs	r2, #3
 800f952:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f954:	4b41      	ldr	r3, [pc, #260]	@ (800fa5c <tcp_listen_input+0x1e0>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f966:	6978      	ldr	r0, [r7, #20]
 800f968:	f7ff fa58 	bl	800ee1c <tcp_next_iss>
 800f96c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	693a      	ldr	r2, [r7, #16]
 800f972:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	693a      	ldr	r2, [r7, #16]
 800f978:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	693a      	ldr	r2, [r7, #16]
 800f984:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f986:	4b35      	ldr	r3, [pc, #212]	@ (800fa5c <tcp_listen_input+0x1e0>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	1e5a      	subs	r2, r3, #1
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	691a      	ldr	r2, [r3, #16]
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	7a5b      	ldrb	r3, [r3, #9]
 800f9a2:	f003 030c 	and.w	r3, r3, #12
 800f9a6:	b2da      	uxtb	r2, r3
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	7a1a      	ldrb	r2, [r3, #8]
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f9b4:	4b2e      	ldr	r3, [pc, #184]	@ (800fa70 <tcp_listen_input+0x1f4>)
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	60da      	str	r2, [r3, #12]
 800f9bc:	4a2c      	ldr	r2, [pc, #176]	@ (800fa70 <tcp_listen_input+0x1f4>)
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	6013      	str	r3, [r2, #0]
 800f9c2:	f003 f8cb 	bl	8012b5c <tcp_timer_needed>
 800f9c6:	4b2b      	ldr	r3, [pc, #172]	@ (800fa74 <tcp_listen_input+0x1f8>)
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f9cc:	6978      	ldr	r0, [r7, #20]
 800f9ce:	f001 fd8b 	bl	80114e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f9d2:	4b23      	ldr	r3, [pc, #140]	@ (800fa60 <tcp_listen_input+0x1e4>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	89db      	ldrh	r3, [r3, #14]
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f004 ff7f 	bl	80148f8 <ip4_route>
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	3304      	adds	r3, #4
 800fa00:	461a      	mov	r2, r3
 800fa02:	4620      	mov	r0, r4
 800fa04:	f7ff fa30 	bl	800ee68 <tcp_eff_send_mss_netif>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fa10:	2112      	movs	r1, #18
 800fa12:	6978      	ldr	r0, [r7, #20]
 800fa14:	f002 f83e 	bl	8011a94 <tcp_enqueue_flags>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fa1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d004      	beq.n	800fa2e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fa24:	2100      	movs	r1, #0
 800fa26:	6978      	ldr	r0, [r7, #20]
 800fa28:	f7fe f97c 	bl	800dd24 <tcp_abandon>
      return;
 800fa2c:	e006      	b.n	800fa3c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fa2e:	6978      	ldr	r0, [r7, #20]
 800fa30:	f002 f91e 	bl	8011c70 <tcp_output>
  return;
 800fa34:	e001      	b.n	800fa3a <tcp_listen_input+0x1be>
    return;
 800fa36:	bf00      	nop
 800fa38:	e000      	b.n	800fa3c <tcp_listen_input+0x1c0>
  return;
 800fa3a:	bf00      	nop
}
 800fa3c:	371c      	adds	r7, #28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd90      	pop	{r4, r7, pc}
 800fa42:	bf00      	nop
 800fa44:	20008c44 	.word	0x20008c44
 800fa48:	08018da8 	.word	0x08018da8
 800fa4c:	08018fa0 	.word	0x08018fa0
 800fa50:	08018df4 	.word	0x08018df4
 800fa54:	20008c3c 	.word	0x20008c3c
 800fa58:	20008c42 	.word	0x20008c42
 800fa5c:	20008c38 	.word	0x20008c38
 800fa60:	20008c28 	.word	0x20008c28
 800fa64:	200056a0 	.word	0x200056a0
 800fa68:	200056a4 	.word	0x200056a4
 800fa6c:	20005690 	.word	0x20005690
 800fa70:	20008c0c 	.word	0x20008c0c
 800fa74:	20008c14 	.word	0x20008c14

0800fa78 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af04      	add	r7, sp, #16
 800fa7e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fa80:	4b2f      	ldr	r3, [pc, #188]	@ (800fb40 <tcp_timewait_input+0xc8>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	f003 0304 	and.w	r3, r3, #4
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d153      	bne.n	800fb34 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d106      	bne.n	800faa0 <tcp_timewait_input+0x28>
 800fa92:	4b2c      	ldr	r3, [pc, #176]	@ (800fb44 <tcp_timewait_input+0xcc>)
 800fa94:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fa98:	492b      	ldr	r1, [pc, #172]	@ (800fb48 <tcp_timewait_input+0xd0>)
 800fa9a:	482c      	ldr	r0, [pc, #176]	@ (800fb4c <tcp_timewait_input+0xd4>)
 800fa9c:	f007 f8ae 	bl	8016bfc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800faa0:	4b27      	ldr	r3, [pc, #156]	@ (800fb40 <tcp_timewait_input+0xc8>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	f003 0302 	and.w	r3, r3, #2
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d02a      	beq.n	800fb02 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800faac:	4b28      	ldr	r3, [pc, #160]	@ (800fb50 <tcp_timewait_input+0xd8>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fab4:	1ad3      	subs	r3, r2, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	db2d      	blt.n	800fb16 <tcp_timewait_input+0x9e>
 800faba:	4b25      	ldr	r3, [pc, #148]	@ (800fb50 <tcp_timewait_input+0xd8>)
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac2:	6879      	ldr	r1, [r7, #4]
 800fac4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fac6:	440b      	add	r3, r1
 800fac8:	1ad3      	subs	r3, r2, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	dc23      	bgt.n	800fb16 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800face:	4b21      	ldr	r3, [pc, #132]	@ (800fb54 <tcp_timewait_input+0xdc>)
 800fad0:	6819      	ldr	r1, [r3, #0]
 800fad2:	4b21      	ldr	r3, [pc, #132]	@ (800fb58 <tcp_timewait_input+0xe0>)
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	4b1d      	ldr	r3, [pc, #116]	@ (800fb50 <tcp_timewait_input+0xd8>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fade:	4b1f      	ldr	r3, [pc, #124]	@ (800fb5c <tcp_timewait_input+0xe4>)
 800fae0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fae2:	885b      	ldrh	r3, [r3, #2]
 800fae4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fae6:	4a1d      	ldr	r2, [pc, #116]	@ (800fb5c <tcp_timewait_input+0xe4>)
 800fae8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faea:	8812      	ldrh	r2, [r2, #0]
 800faec:	b292      	uxth	r2, r2
 800faee:	9202      	str	r2, [sp, #8]
 800faf0:	9301      	str	r3, [sp, #4]
 800faf2:	4b1b      	ldr	r3, [pc, #108]	@ (800fb60 <tcp_timewait_input+0xe8>)
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	4b1b      	ldr	r3, [pc, #108]	@ (800fb64 <tcp_timewait_input+0xec>)
 800faf8:	4602      	mov	r2, r0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f002 fe6c 	bl	80127d8 <tcp_rst>
      return;
 800fb00:	e01b      	b.n	800fb3a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fb02:	4b0f      	ldr	r3, [pc, #60]	@ (800fb40 <tcp_timewait_input+0xc8>)
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d003      	beq.n	800fb16 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fb0e:	4b16      	ldr	r3, [pc, #88]	@ (800fb68 <tcp_timewait_input+0xf0>)
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fb16:	4b10      	ldr	r3, [pc, #64]	@ (800fb58 <tcp_timewait_input+0xe0>)
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00c      	beq.n	800fb38 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	8b5b      	ldrh	r3, [r3, #26]
 800fb22:	f043 0302 	orr.w	r3, r3, #2
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f002 f89f 	bl	8011c70 <tcp_output>
  }
  return;
 800fb32:	e001      	b.n	800fb38 <tcp_timewait_input+0xc0>
    return;
 800fb34:	bf00      	nop
 800fb36:	e000      	b.n	800fb3a <tcp_timewait_input+0xc2>
  return;
 800fb38:	bf00      	nop
}
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	20008c44 	.word	0x20008c44
 800fb44:	08018da8 	.word	0x08018da8
 800fb48:	08018fc0 	.word	0x08018fc0
 800fb4c:	08018df4 	.word	0x08018df4
 800fb50:	20008c38 	.word	0x20008c38
 800fb54:	20008c3c 	.word	0x20008c3c
 800fb58:	20008c42 	.word	0x20008c42
 800fb5c:	20008c28 	.word	0x20008c28
 800fb60:	200056a0 	.word	0x200056a0
 800fb64:	200056a4 	.word	0x200056a4
 800fb68:	20008c00 	.word	0x20008c00

0800fb6c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fb6c:	b590      	push	{r4, r7, lr}
 800fb6e:	b08d      	sub	sp, #52	@ 0x34
 800fb70:	af04      	add	r7, sp, #16
 800fb72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fb74:	2300      	movs	r3, #0
 800fb76:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d106      	bne.n	800fb90 <tcp_process+0x24>
 800fb82:	4b9d      	ldr	r3, [pc, #628]	@ (800fdf8 <tcp_process+0x28c>)
 800fb84:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fb88:	499c      	ldr	r1, [pc, #624]	@ (800fdfc <tcp_process+0x290>)
 800fb8a:	489d      	ldr	r0, [pc, #628]	@ (800fe00 <tcp_process+0x294>)
 800fb8c:	f007 f836 	bl	8016bfc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fb90:	4b9c      	ldr	r3, [pc, #624]	@ (800fe04 <tcp_process+0x298>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	f003 0304 	and.w	r3, r3, #4
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d04e      	beq.n	800fc3a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	7d1b      	ldrb	r3, [r3, #20]
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d108      	bne.n	800fbb6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fba8:	4b97      	ldr	r3, [pc, #604]	@ (800fe08 <tcp_process+0x29c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d123      	bne.n	800fbf8 <tcp_process+0x8c>
        acceptable = 1;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	76fb      	strb	r3, [r7, #27]
 800fbb4:	e020      	b.n	800fbf8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbba:	4b94      	ldr	r3, [pc, #592]	@ (800fe0c <tcp_process+0x2a0>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d102      	bne.n	800fbc8 <tcp_process+0x5c>
        acceptable = 1;
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	76fb      	strb	r3, [r7, #27]
 800fbc6:	e017      	b.n	800fbf8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fbc8:	4b90      	ldr	r3, [pc, #576]	@ (800fe0c <tcp_process+0x2a0>)
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	db10      	blt.n	800fbf8 <tcp_process+0x8c>
 800fbd6:	4b8d      	ldr	r3, [pc, #564]	@ (800fe0c <tcp_process+0x2a0>)
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbde:	6879      	ldr	r1, [r7, #4]
 800fbe0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fbe2:	440b      	add	r3, r1
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	dc06      	bgt.n	800fbf8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	8b5b      	ldrh	r3, [r3, #26]
 800fbee:	f043 0302 	orr.w	r3, r3, #2
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fbf8:	7efb      	ldrb	r3, [r7, #27]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d01b      	beq.n	800fc36 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	7d1b      	ldrb	r3, [r3, #20]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <tcp_process+0xa8>
 800fc06:	4b7c      	ldr	r3, [pc, #496]	@ (800fdf8 <tcp_process+0x28c>)
 800fc08:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fc0c:	4980      	ldr	r1, [pc, #512]	@ (800fe10 <tcp_process+0x2a4>)
 800fc0e:	487c      	ldr	r0, [pc, #496]	@ (800fe00 <tcp_process+0x294>)
 800fc10:	f006 fff4 	bl	8016bfc <iprintf>
      recv_flags |= TF_RESET;
 800fc14:	4b7f      	ldr	r3, [pc, #508]	@ (800fe14 <tcp_process+0x2a8>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	f043 0308 	orr.w	r3, r3, #8
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	4b7d      	ldr	r3, [pc, #500]	@ (800fe14 <tcp_process+0x2a8>)
 800fc20:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	8b5b      	ldrh	r3, [r3, #26]
 800fc26:	f023 0301 	bic.w	r3, r3, #1
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fc30:	f06f 030d 	mvn.w	r3, #13
 800fc34:	e37a      	b.n	801032c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	e378      	b.n	801032c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fc3a:	4b72      	ldr	r3, [pc, #456]	@ (800fe04 <tcp_process+0x298>)
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	f003 0302 	and.w	r3, r3, #2
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d010      	beq.n	800fc68 <tcp_process+0xfc>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	7d1b      	ldrb	r3, [r3, #20]
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d00c      	beq.n	800fc68 <tcp_process+0xfc>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	7d1b      	ldrb	r3, [r3, #20]
 800fc52:	2b03      	cmp	r3, #3
 800fc54:	d008      	beq.n	800fc68 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	8b5b      	ldrh	r3, [r3, #26]
 800fc5a:	f043 0302 	orr.w	r3, r3, #2
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	e361      	b.n	801032c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	8b5b      	ldrh	r3, [r3, #26]
 800fc6c:	f003 0310 	and.w	r3, r3, #16
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d103      	bne.n	800fc7c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fc74:	4b68      	ldr	r3, [pc, #416]	@ (800fe18 <tcp_process+0x2ac>)
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f001 fc2b 	bl	80114e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	7d1b      	ldrb	r3, [r3, #20]
 800fc96:	3b02      	subs	r3, #2
 800fc98:	2b07      	cmp	r3, #7
 800fc9a:	f200 8337 	bhi.w	801030c <tcp_process+0x7a0>
 800fc9e:	a201      	add	r2, pc, #4	@ (adr r2, 800fca4 <tcp_process+0x138>)
 800fca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca4:	0800fcc5 	.word	0x0800fcc5
 800fca8:	0800fef5 	.word	0x0800fef5
 800fcac:	0801006d 	.word	0x0801006d
 800fcb0:	08010097 	.word	0x08010097
 800fcb4:	080101bb 	.word	0x080101bb
 800fcb8:	0801006d 	.word	0x0801006d
 800fcbc:	08010247 	.word	0x08010247
 800fcc0:	080102d7 	.word	0x080102d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fcc4:	4b4f      	ldr	r3, [pc, #316]	@ (800fe04 <tcp_process+0x298>)
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	f003 0310 	and.w	r3, r3, #16
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f000 80e4 	beq.w	800fe9a <tcp_process+0x32e>
 800fcd2:	4b4c      	ldr	r3, [pc, #304]	@ (800fe04 <tcp_process+0x298>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	f003 0302 	and.w	r3, r3, #2
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f000 80dd 	beq.w	800fe9a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fce4:	1c5a      	adds	r2, r3, #1
 800fce6:	4b48      	ldr	r3, [pc, #288]	@ (800fe08 <tcp_process+0x29c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	f040 80d5 	bne.w	800fe9a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fcf0:	4b46      	ldr	r3, [pc, #280]	@ (800fe0c <tcp_process+0x2a0>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800fd02:	4b41      	ldr	r3, [pc, #260]	@ (800fe08 <tcp_process+0x29c>)
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fd0a:	4b44      	ldr	r3, [pc, #272]	@ (800fe1c <tcp_process+0x2b0>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	89db      	ldrh	r3, [r3, #14]
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fd24:	4b39      	ldr	r3, [pc, #228]	@ (800fe0c <tcp_process+0x2a0>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	1e5a      	subs	r2, r3, #1
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2204      	movs	r2, #4
 800fd32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f004 fddb 	bl	80148f8 <ip4_route>
 800fd42:	4601      	mov	r1, r0
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3304      	adds	r3, #4
 800fd48:	461a      	mov	r2, r3
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f7ff f88c 	bl	800ee68 <tcp_eff_send_mss_netif>
 800fd50:	4603      	mov	r3, r0
 800fd52:	461a      	mov	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd5c:	009a      	lsls	r2, r3, #2
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fd68:	428b      	cmp	r3, r1
 800fd6a:	bf38      	it	cc
 800fd6c:	460b      	movcc	r3, r1
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d204      	bcs.n	800fd7c <tcp_process+0x210>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	e00d      	b.n	800fd98 <tcp_process+0x22c>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd80:	005b      	lsls	r3, r3, #1
 800fd82:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d904      	bls.n	800fd94 <tcp_process+0x228>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd8e:	005b      	lsls	r3, r3, #1
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	e001      	b.n	800fd98 <tcp_process+0x22c>
 800fd94:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d106      	bne.n	800fdb6 <tcp_process+0x24a>
 800fda8:	4b13      	ldr	r3, [pc, #76]	@ (800fdf8 <tcp_process+0x28c>)
 800fdaa:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fdae:	491c      	ldr	r1, [pc, #112]	@ (800fe20 <tcp_process+0x2b4>)
 800fdb0:	4813      	ldr	r0, [pc, #76]	@ (800fe00 <tcp_process+0x294>)
 800fdb2:	f006 ff23 	bl	8016bfc <iprintf>
        --pcb->snd_queuelen;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fdbc:	3b01      	subs	r3, #1
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d12a      	bne.n	800fe28 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdd6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d106      	bne.n	800fdec <tcp_process+0x280>
 800fdde:	4b06      	ldr	r3, [pc, #24]	@ (800fdf8 <tcp_process+0x28c>)
 800fde0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800fde4:	490f      	ldr	r1, [pc, #60]	@ (800fe24 <tcp_process+0x2b8>)
 800fde6:	4806      	ldr	r0, [pc, #24]	@ (800fe00 <tcp_process+0x294>)
 800fde8:	f006 ff08 	bl	8016bfc <iprintf>
          pcb->unsent = rseg->next;
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fdf4:	e01c      	b.n	800fe30 <tcp_process+0x2c4>
 800fdf6:	bf00      	nop
 800fdf8:	08018da8 	.word	0x08018da8
 800fdfc:	08018fe0 	.word	0x08018fe0
 800fe00:	08018df4 	.word	0x08018df4
 800fe04:	20008c44 	.word	0x20008c44
 800fe08:	20008c3c 	.word	0x20008c3c
 800fe0c:	20008c38 	.word	0x20008c38
 800fe10:	08018ffc 	.word	0x08018ffc
 800fe14:	20008c45 	.word	0x20008c45
 800fe18:	20008c00 	.word	0x20008c00
 800fe1c:	20008c28 	.word	0x20008c28
 800fe20:	0801901c 	.word	0x0801901c
 800fe24:	08019034 	.word	0x08019034
        } else {
          pcb->unacked = rseg->next;
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800fe30:	69f8      	ldr	r0, [r7, #28]
 800fe32:	f7fe fd22 	bl	800e87a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d104      	bne.n	800fe48 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe44:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fe46:	e006      	b.n	800fe56 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00a      	beq.n	800fe76 <tcp_process+0x30a>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	6910      	ldr	r0, [r2, #16]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	6879      	ldr	r1, [r7, #4]
 800fe6e:	4798      	blx	r3
 800fe70:	4603      	mov	r3, r0
 800fe72:	76bb      	strb	r3, [r7, #26]
 800fe74:	e001      	b.n	800fe7a <tcp_process+0x30e>
 800fe76:	2300      	movs	r3, #0
 800fe78:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fe7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe7e:	f113 0f0d 	cmn.w	r3, #13
 800fe82:	d102      	bne.n	800fe8a <tcp_process+0x31e>
          return ERR_ABRT;
 800fe84:	f06f 030c 	mvn.w	r3, #12
 800fe88:	e250      	b.n	801032c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8b5b      	ldrh	r3, [r3, #26]
 800fe8e:	f043 0302 	orr.w	r3, r3, #2
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fe98:	e23a      	b.n	8010310 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fe9a:	4b98      	ldr	r3, [pc, #608]	@ (80100fc <tcp_process+0x590>)
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	f003 0310 	and.w	r3, r3, #16
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	f000 8234 	beq.w	8010310 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea8:	4b95      	ldr	r3, [pc, #596]	@ (8010100 <tcp_process+0x594>)
 800feaa:	6819      	ldr	r1, [r3, #0]
 800feac:	4b95      	ldr	r3, [pc, #596]	@ (8010104 <tcp_process+0x598>)
 800feae:	881b      	ldrh	r3, [r3, #0]
 800feb0:	461a      	mov	r2, r3
 800feb2:	4b95      	ldr	r3, [pc, #596]	@ (8010108 <tcp_process+0x59c>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feb8:	4b94      	ldr	r3, [pc, #592]	@ (801010c <tcp_process+0x5a0>)
 800feba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800febc:	885b      	ldrh	r3, [r3, #2]
 800febe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fec0:	4a92      	ldr	r2, [pc, #584]	@ (801010c <tcp_process+0x5a0>)
 800fec2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fec4:	8812      	ldrh	r2, [r2, #0]
 800fec6:	b292      	uxth	r2, r2
 800fec8:	9202      	str	r2, [sp, #8]
 800feca:	9301      	str	r3, [sp, #4]
 800fecc:	4b90      	ldr	r3, [pc, #576]	@ (8010110 <tcp_process+0x5a4>)
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	4b90      	ldr	r3, [pc, #576]	@ (8010114 <tcp_process+0x5a8>)
 800fed2:	4602      	mov	r2, r0
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f002 fc7f 	bl	80127d8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fee0:	2b05      	cmp	r3, #5
 800fee2:	f200 8215 	bhi.w	8010310 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2200      	movs	r2, #0
 800feea:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f002 fa4b 	bl	8012388 <tcp_rexmit_rto>
      break;
 800fef2:	e20d      	b.n	8010310 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fef4:	4b81      	ldr	r3, [pc, #516]	@ (80100fc <tcp_process+0x590>)
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	f003 0310 	and.w	r3, r3, #16
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f000 80a1 	beq.w	8010044 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff02:	4b7f      	ldr	r3, [pc, #508]	@ (8010100 <tcp_process+0x594>)
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	db7e      	blt.n	8010010 <tcp_process+0x4a4>
 800ff12:	4b7b      	ldr	r3, [pc, #492]	@ (8010100 <tcp_process+0x594>)
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff1a:	1ad3      	subs	r3, r2, r3
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	dc77      	bgt.n	8010010 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2204      	movs	r2, #4
 800ff24:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d102      	bne.n	800ff34 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ff2e:	23fa      	movs	r3, #250	@ 0xfa
 800ff30:	76bb      	strb	r3, [r7, #26]
 800ff32:	e01d      	b.n	800ff70 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff38:	699b      	ldr	r3, [r3, #24]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d106      	bne.n	800ff4c <tcp_process+0x3e0>
 800ff3e:	4b76      	ldr	r3, [pc, #472]	@ (8010118 <tcp_process+0x5ac>)
 800ff40:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ff44:	4975      	ldr	r1, [pc, #468]	@ (801011c <tcp_process+0x5b0>)
 800ff46:	4876      	ldr	r0, [pc, #472]	@ (8010120 <tcp_process+0x5b4>)
 800ff48:	f006 fe58 	bl	8016bfc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff50:	699b      	ldr	r3, [r3, #24]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00a      	beq.n	800ff6c <tcp_process+0x400>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff5a:	699b      	ldr	r3, [r3, #24]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	6910      	ldr	r0, [r2, #16]
 800ff60:	2200      	movs	r2, #0
 800ff62:	6879      	ldr	r1, [r7, #4]
 800ff64:	4798      	blx	r3
 800ff66:	4603      	mov	r3, r0
 800ff68:	76bb      	strb	r3, [r7, #26]
 800ff6a:	e001      	b.n	800ff70 <tcp_process+0x404>
 800ff6c:	23f0      	movs	r3, #240	@ 0xf0
 800ff6e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ff70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00a      	beq.n	800ff8e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ff78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff7c:	f113 0f0d 	cmn.w	r3, #13
 800ff80:	d002      	beq.n	800ff88 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7fd ff8c 	bl	800dea0 <tcp_abort>
            }
            return ERR_ABRT;
 800ff88:	f06f 030c 	mvn.w	r3, #12
 800ff8c:	e1ce      	b.n	801032c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 fae0 	bl	8010554 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ff94:	4b63      	ldr	r3, [pc, #396]	@ (8010124 <tcp_process+0x5b8>)
 800ff96:	881b      	ldrh	r3, [r3, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d005      	beq.n	800ffa8 <tcp_process+0x43c>
            recv_acked--;
 800ff9c:	4b61      	ldr	r3, [pc, #388]	@ (8010124 <tcp_process+0x5b8>)
 800ff9e:	881b      	ldrh	r3, [r3, #0]
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	4b5f      	ldr	r3, [pc, #380]	@ (8010124 <tcp_process+0x5b8>)
 800ffa6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffac:	009a      	lsls	r2, r3, #2
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffb2:	005b      	lsls	r3, r3, #1
 800ffb4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ffb8:	428b      	cmp	r3, r1
 800ffba:	bf38      	it	cc
 800ffbc:	460b      	movcc	r3, r1
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d204      	bcs.n	800ffcc <tcp_process+0x460>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffc6:	009b      	lsls	r3, r3, #2
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	e00d      	b.n	800ffe8 <tcp_process+0x47c>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffd0:	005b      	lsls	r3, r3, #1
 800ffd2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d904      	bls.n	800ffe4 <tcp_process+0x478>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffde:	005b      	lsls	r3, r3, #1
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	e001      	b.n	800ffe8 <tcp_process+0x47c>
 800ffe4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ffee:	4b4e      	ldr	r3, [pc, #312]	@ (8010128 <tcp_process+0x5bc>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	f003 0320 	and.w	r3, r3, #32
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d037      	beq.n	801006a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	8b5b      	ldrh	r3, [r3, #26]
 800fffe:	f043 0302 	orr.w	r3, r3, #2
 8010002:	b29a      	uxth	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2207      	movs	r2, #7
 801000c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801000e:	e02c      	b.n	801006a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010010:	4b3b      	ldr	r3, [pc, #236]	@ (8010100 <tcp_process+0x594>)
 8010012:	6819      	ldr	r1, [r3, #0]
 8010014:	4b3b      	ldr	r3, [pc, #236]	@ (8010104 <tcp_process+0x598>)
 8010016:	881b      	ldrh	r3, [r3, #0]
 8010018:	461a      	mov	r2, r3
 801001a:	4b3b      	ldr	r3, [pc, #236]	@ (8010108 <tcp_process+0x59c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010020:	4b3a      	ldr	r3, [pc, #232]	@ (801010c <tcp_process+0x5a0>)
 8010022:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010024:	885b      	ldrh	r3, [r3, #2]
 8010026:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010028:	4a38      	ldr	r2, [pc, #224]	@ (801010c <tcp_process+0x5a0>)
 801002a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801002c:	8812      	ldrh	r2, [r2, #0]
 801002e:	b292      	uxth	r2, r2
 8010030:	9202      	str	r2, [sp, #8]
 8010032:	9301      	str	r3, [sp, #4]
 8010034:	4b36      	ldr	r3, [pc, #216]	@ (8010110 <tcp_process+0x5a4>)
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	4b36      	ldr	r3, [pc, #216]	@ (8010114 <tcp_process+0x5a8>)
 801003a:	4602      	mov	r2, r0
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f002 fbcb 	bl	80127d8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010042:	e167      	b.n	8010314 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010044:	4b2d      	ldr	r3, [pc, #180]	@ (80100fc <tcp_process+0x590>)
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	f003 0302 	and.w	r3, r3, #2
 801004c:	2b00      	cmp	r3, #0
 801004e:	f000 8161 	beq.w	8010314 <tcp_process+0x7a8>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010056:	1e5a      	subs	r2, r3, #1
 8010058:	4b2b      	ldr	r3, [pc, #172]	@ (8010108 <tcp_process+0x59c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	429a      	cmp	r2, r3
 801005e:	f040 8159 	bne.w	8010314 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f002 f9b2 	bl	80123cc <tcp_rexmit>
      break;
 8010068:	e154      	b.n	8010314 <tcp_process+0x7a8>
 801006a:	e153      	b.n	8010314 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 fa71 	bl	8010554 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010072:	4b2d      	ldr	r3, [pc, #180]	@ (8010128 <tcp_process+0x5bc>)
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	f003 0320 	and.w	r3, r3, #32
 801007a:	2b00      	cmp	r3, #0
 801007c:	f000 814c 	beq.w	8010318 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	8b5b      	ldrh	r3, [r3, #26]
 8010084:	f043 0302 	orr.w	r3, r3, #2
 8010088:	b29a      	uxth	r2, r3
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2207      	movs	r2, #7
 8010092:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010094:	e140      	b.n	8010318 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 fa5c 	bl	8010554 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801009c:	4b22      	ldr	r3, [pc, #136]	@ (8010128 <tcp_process+0x5bc>)
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	f003 0320 	and.w	r3, r3, #32
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d071      	beq.n	801018c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100a8:	4b14      	ldr	r3, [pc, #80]	@ (80100fc <tcp_process+0x590>)
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	f003 0310 	and.w	r3, r3, #16
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d060      	beq.n	8010176 <tcp_process+0x60a>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80100b8:	4b11      	ldr	r3, [pc, #68]	@ (8010100 <tcp_process+0x594>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d15a      	bne.n	8010176 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d156      	bne.n	8010176 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	8b5b      	ldrh	r3, [r3, #26]
 80100cc:	f043 0302 	orr.w	r3, r3, #2
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f7fe fdbc 	bl	800ec54 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80100dc:	4b13      	ldr	r3, [pc, #76]	@ (801012c <tcp_process+0x5c0>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d105      	bne.n	80100f2 <tcp_process+0x586>
 80100e6:	4b11      	ldr	r3, [pc, #68]	@ (801012c <tcp_process+0x5c0>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	4a0f      	ldr	r2, [pc, #60]	@ (801012c <tcp_process+0x5c0>)
 80100ee:	6013      	str	r3, [r2, #0]
 80100f0:	e02e      	b.n	8010150 <tcp_process+0x5e4>
 80100f2:	4b0e      	ldr	r3, [pc, #56]	@ (801012c <tcp_process+0x5c0>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	617b      	str	r3, [r7, #20]
 80100f8:	e027      	b.n	801014a <tcp_process+0x5de>
 80100fa:	bf00      	nop
 80100fc:	20008c44 	.word	0x20008c44
 8010100:	20008c3c 	.word	0x20008c3c
 8010104:	20008c42 	.word	0x20008c42
 8010108:	20008c38 	.word	0x20008c38
 801010c:	20008c28 	.word	0x20008c28
 8010110:	200056a0 	.word	0x200056a0
 8010114:	200056a4 	.word	0x200056a4
 8010118:	08018da8 	.word	0x08018da8
 801011c:	08019048 	.word	0x08019048
 8010120:	08018df4 	.word	0x08018df4
 8010124:	20008c40 	.word	0x20008c40
 8010128:	20008c45 	.word	0x20008c45
 801012c:	20008c0c 	.word	0x20008c0c
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	429a      	cmp	r2, r3
 8010138:	d104      	bne.n	8010144 <tcp_process+0x5d8>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	68da      	ldr	r2, [r3, #12]
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	60da      	str	r2, [r3, #12]
 8010142:	e005      	b.n	8010150 <tcp_process+0x5e4>
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	617b      	str	r3, [r7, #20]
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1ef      	bne.n	8010130 <tcp_process+0x5c4>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	60da      	str	r2, [r3, #12]
 8010156:	4b77      	ldr	r3, [pc, #476]	@ (8010334 <tcp_process+0x7c8>)
 8010158:	2201      	movs	r2, #1
 801015a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	220a      	movs	r2, #10
 8010160:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010162:	4b75      	ldr	r3, [pc, #468]	@ (8010338 <tcp_process+0x7cc>)
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	60da      	str	r2, [r3, #12]
 801016a:	4a73      	ldr	r2, [pc, #460]	@ (8010338 <tcp_process+0x7cc>)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6013      	str	r3, [r2, #0]
 8010170:	f002 fcf4 	bl	8012b5c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010174:	e0d2      	b.n	801031c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	8b5b      	ldrh	r3, [r3, #26]
 801017a:	f043 0302 	orr.w	r3, r3, #2
 801017e:	b29a      	uxth	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2208      	movs	r2, #8
 8010188:	751a      	strb	r2, [r3, #20]
      break;
 801018a:	e0c7      	b.n	801031c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801018c:	4b6b      	ldr	r3, [pc, #428]	@ (801033c <tcp_process+0x7d0>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	f003 0310 	and.w	r3, r3, #16
 8010194:	2b00      	cmp	r3, #0
 8010196:	f000 80c1 	beq.w	801031c <tcp_process+0x7b0>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801019e:	4b68      	ldr	r3, [pc, #416]	@ (8010340 <tcp_process+0x7d4>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	f040 80ba 	bne.w	801031c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f040 80b5 	bne.w	801031c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2206      	movs	r2, #6
 80101b6:	751a      	strb	r2, [r3, #20]
      break;
 80101b8:	e0b0      	b.n	801031c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 f9ca 	bl	8010554 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80101c0:	4b60      	ldr	r3, [pc, #384]	@ (8010344 <tcp_process+0x7d8>)
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f003 0320 	and.w	r3, r3, #32
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 80a9 	beq.w	8010320 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	8b5b      	ldrh	r3, [r3, #26]
 80101d2:	f043 0302 	orr.w	r3, r3, #2
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7fe fd39 	bl	800ec54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80101e2:	4b59      	ldr	r3, [pc, #356]	@ (8010348 <tcp_process+0x7dc>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d105      	bne.n	80101f8 <tcp_process+0x68c>
 80101ec:	4b56      	ldr	r3, [pc, #344]	@ (8010348 <tcp_process+0x7dc>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	4a55      	ldr	r2, [pc, #340]	@ (8010348 <tcp_process+0x7dc>)
 80101f4:	6013      	str	r3, [r2, #0]
 80101f6:	e013      	b.n	8010220 <tcp_process+0x6b4>
 80101f8:	4b53      	ldr	r3, [pc, #332]	@ (8010348 <tcp_process+0x7dc>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	613b      	str	r3, [r7, #16]
 80101fe:	e00c      	b.n	801021a <tcp_process+0x6ae>
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	429a      	cmp	r2, r3
 8010208:	d104      	bne.n	8010214 <tcp_process+0x6a8>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	60da      	str	r2, [r3, #12]
 8010212:	e005      	b.n	8010220 <tcp_process+0x6b4>
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	613b      	str	r3, [r7, #16]
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d1ef      	bne.n	8010200 <tcp_process+0x694>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2200      	movs	r2, #0
 8010224:	60da      	str	r2, [r3, #12]
 8010226:	4b43      	ldr	r3, [pc, #268]	@ (8010334 <tcp_process+0x7c8>)
 8010228:	2201      	movs	r2, #1
 801022a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	220a      	movs	r2, #10
 8010230:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010232:	4b41      	ldr	r3, [pc, #260]	@ (8010338 <tcp_process+0x7cc>)
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	60da      	str	r2, [r3, #12]
 801023a:	4a3f      	ldr	r2, [pc, #252]	@ (8010338 <tcp_process+0x7cc>)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6013      	str	r3, [r2, #0]
 8010240:	f002 fc8c 	bl	8012b5c <tcp_timer_needed>
      }
      break;
 8010244:	e06c      	b.n	8010320 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 f984 	bl	8010554 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801024c:	4b3b      	ldr	r3, [pc, #236]	@ (801033c <tcp_process+0x7d0>)
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	f003 0310 	and.w	r3, r3, #16
 8010254:	2b00      	cmp	r3, #0
 8010256:	d065      	beq.n	8010324 <tcp_process+0x7b8>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801025c:	4b38      	ldr	r3, [pc, #224]	@ (8010340 <tcp_process+0x7d4>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	429a      	cmp	r2, r3
 8010262:	d15f      	bne.n	8010324 <tcp_process+0x7b8>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010268:	2b00      	cmp	r3, #0
 801026a:	d15b      	bne.n	8010324 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7fe fcf1 	bl	800ec54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010272:	4b35      	ldr	r3, [pc, #212]	@ (8010348 <tcp_process+0x7dc>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	429a      	cmp	r2, r3
 801027a:	d105      	bne.n	8010288 <tcp_process+0x71c>
 801027c:	4b32      	ldr	r3, [pc, #200]	@ (8010348 <tcp_process+0x7dc>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	4a31      	ldr	r2, [pc, #196]	@ (8010348 <tcp_process+0x7dc>)
 8010284:	6013      	str	r3, [r2, #0]
 8010286:	e013      	b.n	80102b0 <tcp_process+0x744>
 8010288:	4b2f      	ldr	r3, [pc, #188]	@ (8010348 <tcp_process+0x7dc>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	60fb      	str	r3, [r7, #12]
 801028e:	e00c      	b.n	80102aa <tcp_process+0x73e>
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	429a      	cmp	r2, r3
 8010298:	d104      	bne.n	80102a4 <tcp_process+0x738>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	68da      	ldr	r2, [r3, #12]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	60da      	str	r2, [r3, #12]
 80102a2:	e005      	b.n	80102b0 <tcp_process+0x744>
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	60fb      	str	r3, [r7, #12]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d1ef      	bne.n	8010290 <tcp_process+0x724>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	60da      	str	r2, [r3, #12]
 80102b6:	4b1f      	ldr	r3, [pc, #124]	@ (8010334 <tcp_process+0x7c8>)
 80102b8:	2201      	movs	r2, #1
 80102ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	220a      	movs	r2, #10
 80102c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80102c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010338 <tcp_process+0x7cc>)
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	60da      	str	r2, [r3, #12]
 80102ca:	4a1b      	ldr	r2, [pc, #108]	@ (8010338 <tcp_process+0x7cc>)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6013      	str	r3, [r2, #0]
 80102d0:	f002 fc44 	bl	8012b5c <tcp_timer_needed>
      }
      break;
 80102d4:	e026      	b.n	8010324 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 f93c 	bl	8010554 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102dc:	4b17      	ldr	r3, [pc, #92]	@ (801033c <tcp_process+0x7d0>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	f003 0310 	and.w	r3, r3, #16
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d01f      	beq.n	8010328 <tcp_process+0x7bc>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102ec:	4b14      	ldr	r3, [pc, #80]	@ (8010340 <tcp_process+0x7d4>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d119      	bne.n	8010328 <tcp_process+0x7bc>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d115      	bne.n	8010328 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80102fc:	4b11      	ldr	r3, [pc, #68]	@ (8010344 <tcp_process+0x7d8>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	f043 0310 	orr.w	r3, r3, #16
 8010304:	b2da      	uxtb	r2, r3
 8010306:	4b0f      	ldr	r3, [pc, #60]	@ (8010344 <tcp_process+0x7d8>)
 8010308:	701a      	strb	r2, [r3, #0]
      }
      break;
 801030a:	e00d      	b.n	8010328 <tcp_process+0x7bc>
    default:
      break;
 801030c:	bf00      	nop
 801030e:	e00c      	b.n	801032a <tcp_process+0x7be>
      break;
 8010310:	bf00      	nop
 8010312:	e00a      	b.n	801032a <tcp_process+0x7be>
      break;
 8010314:	bf00      	nop
 8010316:	e008      	b.n	801032a <tcp_process+0x7be>
      break;
 8010318:	bf00      	nop
 801031a:	e006      	b.n	801032a <tcp_process+0x7be>
      break;
 801031c:	bf00      	nop
 801031e:	e004      	b.n	801032a <tcp_process+0x7be>
      break;
 8010320:	bf00      	nop
 8010322:	e002      	b.n	801032a <tcp_process+0x7be>
      break;
 8010324:	bf00      	nop
 8010326:	e000      	b.n	801032a <tcp_process+0x7be>
      break;
 8010328:	bf00      	nop
  }
  return ERR_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3724      	adds	r7, #36	@ 0x24
 8010330:	46bd      	mov	sp, r7
 8010332:	bd90      	pop	{r4, r7, pc}
 8010334:	20008c14 	.word	0x20008c14
 8010338:	20008c10 	.word	0x20008c10
 801033c:	20008c44 	.word	0x20008c44
 8010340:	20008c3c 	.word	0x20008c3c
 8010344:	20008c45 	.word	0x20008c45
 8010348:	20008c0c 	.word	0x20008c0c

0801034c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801034c:	b590      	push	{r4, r7, lr}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d106      	bne.n	801036a <tcp_oos_insert_segment+0x1e>
 801035c:	4b3b      	ldr	r3, [pc, #236]	@ (801044c <tcp_oos_insert_segment+0x100>)
 801035e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010362:	493b      	ldr	r1, [pc, #236]	@ (8010450 <tcp_oos_insert_segment+0x104>)
 8010364:	483b      	ldr	r0, [pc, #236]	@ (8010454 <tcp_oos_insert_segment+0x108>)
 8010366:	f006 fc49 	bl	8016bfc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	899b      	ldrh	r3, [r3, #12]
 8010370:	b29b      	uxth	r3, r3
 8010372:	4618      	mov	r0, r3
 8010374:	f7fb fc9e 	bl	800bcb4 <lwip_htons>
 8010378:	4603      	mov	r3, r0
 801037a:	b2db      	uxtb	r3, r3
 801037c:	f003 0301 	and.w	r3, r3, #1
 8010380:	2b00      	cmp	r3, #0
 8010382:	d028      	beq.n	80103d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010384:	6838      	ldr	r0, [r7, #0]
 8010386:	f7fe fa63 	bl	800e850 <tcp_segs_free>
    next = NULL;
 801038a:	2300      	movs	r3, #0
 801038c:	603b      	str	r3, [r7, #0]
 801038e:	e056      	b.n	801043e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	68db      	ldr	r3, [r3, #12]
 8010394:	899b      	ldrh	r3, [r3, #12]
 8010396:	b29b      	uxth	r3, r3
 8010398:	4618      	mov	r0, r3
 801039a:	f7fb fc8b 	bl	800bcb4 <lwip_htons>
 801039e:	4603      	mov	r3, r0
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	f003 0301 	and.w	r3, r3, #1
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00d      	beq.n	80103c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	68db      	ldr	r3, [r3, #12]
 80103ae:	899b      	ldrh	r3, [r3, #12]
 80103b0:	b29c      	uxth	r4, r3
 80103b2:	2001      	movs	r0, #1
 80103b4:	f7fb fc7e 	bl	800bcb4 <lwip_htons>
 80103b8:	4603      	mov	r3, r0
 80103ba:	461a      	mov	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	4322      	orrs	r2, r4
 80103c2:	b292      	uxth	r2, r2
 80103c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7fe fa52 	bl	800e87a <tcp_seg_free>
    while (next &&
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00e      	beq.n	80103fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	891b      	ldrh	r3, [r3, #8]
 80103e0:	461a      	mov	r2, r3
 80103e2:	4b1d      	ldr	r3, [pc, #116]	@ (8010458 <tcp_oos_insert_segment+0x10c>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	441a      	add	r2, r3
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	6839      	ldr	r1, [r7, #0]
 80103f0:	8909      	ldrh	r1, [r1, #8]
 80103f2:	440b      	add	r3, r1
 80103f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	daca      	bge.n	8010390 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d01e      	beq.n	801043e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	891b      	ldrh	r3, [r3, #8]
 8010404:	461a      	mov	r2, r3
 8010406:	4b14      	ldr	r3, [pc, #80]	@ (8010458 <tcp_oos_insert_segment+0x10c>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	441a      	add	r2, r3
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010414:	2b00      	cmp	r3, #0
 8010416:	dd12      	ble.n	801043e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	b29a      	uxth	r2, r3
 8010420:	4b0d      	ldr	r3, [pc, #52]	@ (8010458 <tcp_oos_insert_segment+0x10c>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	b29b      	uxth	r3, r3
 8010426:	1ad3      	subs	r3, r2, r3
 8010428:	b29a      	uxth	r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	685a      	ldr	r2, [r3, #4]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	891b      	ldrh	r3, [r3, #8]
 8010436:	4619      	mov	r1, r3
 8010438:	4610      	mov	r0, r2
 801043a:	f7fc fe13 	bl	800d064 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	683a      	ldr	r2, [r7, #0]
 8010442:	601a      	str	r2, [r3, #0]
}
 8010444:	bf00      	nop
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	bd90      	pop	{r4, r7, pc}
 801044c:	08018da8 	.word	0x08018da8
 8010450:	08019068 	.word	0x08019068
 8010454:	08018df4 	.word	0x08018df4
 8010458:	20008c38 	.word	0x20008c38

0801045c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801045c:	b5b0      	push	{r4, r5, r7, lr}
 801045e:	b086      	sub	sp, #24
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
 8010468:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801046a:	e03e      	b.n	80104ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	4618      	mov	r0, r3
 801047c:	f7fd f800 	bl	800d480 <pbuf_clen>
 8010480:	4603      	mov	r3, r0
 8010482:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801048a:	8a7a      	ldrh	r2, [r7, #18]
 801048c:	429a      	cmp	r2, r3
 801048e:	d906      	bls.n	801049e <tcp_free_acked_segments+0x42>
 8010490:	4b2a      	ldr	r3, [pc, #168]	@ (801053c <tcp_free_acked_segments+0xe0>)
 8010492:	f240 4257 	movw	r2, #1111	@ 0x457
 8010496:	492a      	ldr	r1, [pc, #168]	@ (8010540 <tcp_free_acked_segments+0xe4>)
 8010498:	482a      	ldr	r0, [pc, #168]	@ (8010544 <tcp_free_acked_segments+0xe8>)
 801049a:	f006 fbaf 	bl	8016bfc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80104a4:	8a7b      	ldrh	r3, [r7, #18]
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	891a      	ldrh	r2, [r3, #8]
 80104b4:	4b24      	ldr	r3, [pc, #144]	@ (8010548 <tcp_free_acked_segments+0xec>)
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	4413      	add	r3, r2
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	4b22      	ldr	r3, [pc, #136]	@ (8010548 <tcp_free_acked_segments+0xec>)
 80104be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80104c0:	6978      	ldr	r0, [r7, #20]
 80104c2:	f7fe f9da 	bl	800e87a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00c      	beq.n	80104ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d109      	bne.n	80104ea <tcp_free_acked_segments+0x8e>
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d106      	bne.n	80104ea <tcp_free_acked_segments+0x8e>
 80104dc:	4b17      	ldr	r3, [pc, #92]	@ (801053c <tcp_free_acked_segments+0xe0>)
 80104de:	f240 4261 	movw	r2, #1121	@ 0x461
 80104e2:	491a      	ldr	r1, [pc, #104]	@ (801054c <tcp_free_acked_segments+0xf0>)
 80104e4:	4817      	ldr	r0, [pc, #92]	@ (8010544 <tcp_free_acked_segments+0xe8>)
 80104e6:	f006 fb89 	bl	8016bfc <iprintf>
  while (seg_list != NULL &&
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d020      	beq.n	8010532 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fb fbf1 	bl	800bcde <lwip_htonl>
 80104fc:	4604      	mov	r4, r0
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	891b      	ldrh	r3, [r3, #8]
 8010502:	461d      	mov	r5, r3
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	899b      	ldrh	r3, [r3, #12]
 801050a:	b29b      	uxth	r3, r3
 801050c:	4618      	mov	r0, r3
 801050e:	f7fb fbd1 	bl	800bcb4 <lwip_htons>
 8010512:	4603      	mov	r3, r0
 8010514:	b2db      	uxtb	r3, r3
 8010516:	f003 0303 	and.w	r3, r3, #3
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <tcp_free_acked_segments+0xc6>
 801051e:	2301      	movs	r3, #1
 8010520:	e000      	b.n	8010524 <tcp_free_acked_segments+0xc8>
 8010522:	2300      	movs	r3, #0
 8010524:	442b      	add	r3, r5
 8010526:	18e2      	adds	r2, r4, r3
 8010528:	4b09      	ldr	r3, [pc, #36]	@ (8010550 <tcp_free_acked_segments+0xf4>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801052e:	2b00      	cmp	r3, #0
 8010530:	dd9c      	ble.n	801046c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010532:	68bb      	ldr	r3, [r7, #8]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3718      	adds	r7, #24
 8010538:	46bd      	mov	sp, r7
 801053a:	bdb0      	pop	{r4, r5, r7, pc}
 801053c:	08018da8 	.word	0x08018da8
 8010540:	08019090 	.word	0x08019090
 8010544:	08018df4 	.word	0x08018df4
 8010548:	20008c40 	.word	0x20008c40
 801054c:	080190b8 	.word	0x080190b8
 8010550:	20008c3c 	.word	0x20008c3c

08010554 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010554:	b5b0      	push	{r4, r5, r7, lr}
 8010556:	b094      	sub	sp, #80	@ 0x50
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801055c:	2300      	movs	r3, #0
 801055e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d106      	bne.n	8010574 <tcp_receive+0x20>
 8010566:	4b91      	ldr	r3, [pc, #580]	@ (80107ac <tcp_receive+0x258>)
 8010568:	f240 427b 	movw	r2, #1147	@ 0x47b
 801056c:	4990      	ldr	r1, [pc, #576]	@ (80107b0 <tcp_receive+0x25c>)
 801056e:	4891      	ldr	r0, [pc, #580]	@ (80107b4 <tcp_receive+0x260>)
 8010570:	f006 fb44 	bl	8016bfc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	7d1b      	ldrb	r3, [r3, #20]
 8010578:	2b03      	cmp	r3, #3
 801057a:	d806      	bhi.n	801058a <tcp_receive+0x36>
 801057c:	4b8b      	ldr	r3, [pc, #556]	@ (80107ac <tcp_receive+0x258>)
 801057e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010582:	498d      	ldr	r1, [pc, #564]	@ (80107b8 <tcp_receive+0x264>)
 8010584:	488b      	ldr	r0, [pc, #556]	@ (80107b4 <tcp_receive+0x260>)
 8010586:	f006 fb39 	bl	8016bfc <iprintf>

  if (flags & TCP_ACK) {
 801058a:	4b8c      	ldr	r3, [pc, #560]	@ (80107bc <tcp_receive+0x268>)
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	f003 0310 	and.w	r3, r3, #16
 8010592:	2b00      	cmp	r3, #0
 8010594:	f000 8264 	beq.w	8010a60 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801059e:	461a      	mov	r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105a4:	4413      	add	r3, r2
 80105a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80105ac:	4b84      	ldr	r3, [pc, #528]	@ (80107c0 <tcp_receive+0x26c>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	db1b      	blt.n	80105ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80105ba:	4b81      	ldr	r3, [pc, #516]	@ (80107c0 <tcp_receive+0x26c>)
 80105bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80105be:	429a      	cmp	r2, r3
 80105c0:	d106      	bne.n	80105d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105c6:	4b7f      	ldr	r3, [pc, #508]	@ (80107c4 <tcp_receive+0x270>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	db0e      	blt.n	80105ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105d4:	4b7b      	ldr	r3, [pc, #492]	@ (80107c4 <tcp_receive+0x270>)
 80105d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105d8:	429a      	cmp	r2, r3
 80105da:	d125      	bne.n	8010628 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105dc:	4b7a      	ldr	r3, [pc, #488]	@ (80107c8 <tcp_receive+0x274>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	89db      	ldrh	r3, [r3, #14]
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d91c      	bls.n	8010628 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80105ee:	4b76      	ldr	r3, [pc, #472]	@ (80107c8 <tcp_receive+0x274>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	89db      	ldrh	r3, [r3, #14]
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010608:	429a      	cmp	r2, r3
 801060a:	d205      	bcs.n	8010618 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010618:	4b69      	ldr	r3, [pc, #420]	@ (80107c0 <tcp_receive+0x26c>)
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010620:	4b68      	ldr	r3, [pc, #416]	@ (80107c4 <tcp_receive+0x270>)
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010628:	4b66      	ldr	r3, [pc, #408]	@ (80107c4 <tcp_receive+0x270>)
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	2b00      	cmp	r3, #0
 8010634:	dc58      	bgt.n	80106e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010636:	4b65      	ldr	r3, [pc, #404]	@ (80107cc <tcp_receive+0x278>)
 8010638:	881b      	ldrh	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d14b      	bne.n	80106d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010648:	4413      	add	r3, r2
 801064a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801064c:	429a      	cmp	r2, r3
 801064e:	d142      	bne.n	80106d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010656:	2b00      	cmp	r3, #0
 8010658:	db3d      	blt.n	80106d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801065e:	4b59      	ldr	r3, [pc, #356]	@ (80107c4 <tcp_receive+0x270>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	429a      	cmp	r2, r3
 8010664:	d137      	bne.n	80106d6 <tcp_receive+0x182>
              found_dupack = 1;
 8010666:	2301      	movs	r3, #1
 8010668:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010670:	2bff      	cmp	r3, #255	@ 0xff
 8010672:	d007      	beq.n	8010684 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801067a:	3301      	adds	r3, #1
 801067c:	b2da      	uxtb	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801068a:	2b03      	cmp	r3, #3
 801068c:	d91b      	bls.n	80106c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010698:	4413      	add	r3, r2
 801069a:	b29a      	uxth	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d30a      	bcc.n	80106bc <tcp_receive+0x168>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106b0:	4413      	add	r3, r2
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80106ba:	e004      	b.n	80106c6 <tcp_receive+0x172>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d902      	bls.n	80106d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f001 fee7 	bl	80124a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80106d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f040 8161 	bne.w	80109a0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80106e6:	e15b      	b.n	80109a0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106e8:	4b36      	ldr	r3, [pc, #216]	@ (80107c4 <tcp_receive+0x270>)
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	3b01      	subs	r3, #1
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f2c0 814e 	blt.w	8010996 <tcp_receive+0x442>
 80106fa:	4b32      	ldr	r3, [pc, #200]	@ (80107c4 <tcp_receive+0x270>)
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	2b00      	cmp	r3, #0
 8010706:	f300 8146 	bgt.w	8010996 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	8b5b      	ldrh	r3, [r3, #26]
 801070e:	f003 0304 	and.w	r3, r3, #4
 8010712:	2b00      	cmp	r3, #0
 8010714:	d010      	beq.n	8010738 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	8b5b      	ldrh	r3, [r3, #26]
 801071a:	f023 0304 	bic.w	r3, r3, #4
 801071e:	b29a      	uxth	r2, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010746:	10db      	asrs	r3, r3, #3
 8010748:	b21b      	sxth	r3, r3
 801074a:	b29a      	uxth	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010752:	b29b      	uxth	r3, r3
 8010754:	4413      	add	r3, r2
 8010756:	b29b      	uxth	r3, r3
 8010758:	b21a      	sxth	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010760:	4b18      	ldr	r3, [pc, #96]	@ (80107c4 <tcp_receive+0x270>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	b29a      	uxth	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801076a:	b29b      	uxth	r3, r3
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010778:	4b12      	ldr	r3, [pc, #72]	@ (80107c4 <tcp_receive+0x270>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	7d1b      	ldrb	r3, [r3, #20]
 8010784:	2b03      	cmp	r3, #3
 8010786:	f240 8097 	bls.w	80108b8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010796:	429a      	cmp	r2, r3
 8010798:	d245      	bcs.n	8010826 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	8b5b      	ldrh	r3, [r3, #26]
 801079e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d014      	beq.n	80107d0 <tcp_receive+0x27c>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e013      	b.n	80107d2 <tcp_receive+0x27e>
 80107aa:	bf00      	nop
 80107ac:	08018da8 	.word	0x08018da8
 80107b0:	080190d8 	.word	0x080190d8
 80107b4:	08018df4 	.word	0x08018df4
 80107b8:	080190f4 	.word	0x080190f4
 80107bc:	20008c44 	.word	0x20008c44
 80107c0:	20008c38 	.word	0x20008c38
 80107c4:	20008c3c 	.word	0x20008c3c
 80107c8:	20008c28 	.word	0x20008c28
 80107cc:	20008c42 	.word	0x20008c42
 80107d0:	2302      	movs	r3, #2
 80107d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80107d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80107da:	b29a      	uxth	r2, r3
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107e0:	fb12 f303 	smulbb	r3, r2, r3
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80107e8:	4293      	cmp	r3, r2
 80107ea:	bf28      	it	cs
 80107ec:	4613      	movcs	r3, r2
 80107ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80107f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80107f8:	4413      	add	r3, r2
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010802:	429a      	cmp	r2, r3
 8010804:	d309      	bcc.n	801081a <tcp_receive+0x2c6>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801080c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801080e:	4413      	add	r3, r2
 8010810:	b29a      	uxth	r2, r3
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010818:	e04e      	b.n	80108b8 <tcp_receive+0x364>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010820:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010824:	e048      	b.n	80108b8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801082c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801082e:	4413      	add	r3, r2
 8010830:	b29a      	uxth	r2, r3
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010838:	429a      	cmp	r2, r3
 801083a:	d309      	bcc.n	8010850 <tcp_receive+0x2fc>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010842:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010844:	4413      	add	r3, r2
 8010846:	b29a      	uxth	r2, r3
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801084e:	e004      	b.n	801085a <tcp_receive+0x306>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010856:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010866:	429a      	cmp	r2, r3
 8010868:	d326      	bcc.n	80108b8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	b29a      	uxth	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801088a:	4413      	add	r3, r2
 801088c:	b29a      	uxth	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010894:	429a      	cmp	r2, r3
 8010896:	d30a      	bcc.n	80108ae <tcp_receive+0x35a>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80108a2:	4413      	add	r3, r2
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80108ac:	e004      	b.n	80108b8 <tcp_receive+0x364>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108c0:	4a98      	ldr	r2, [pc, #608]	@ (8010b24 <tcp_receive+0x5d0>)
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f7ff fdca 	bl	801045c <tcp_free_acked_segments>
 80108c8:	4602      	mov	r2, r0
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108d6:	4a94      	ldr	r2, [pc, #592]	@ (8010b28 <tcp_receive+0x5d4>)
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f7ff fdbf 	bl	801045c <tcp_free_acked_segments>
 80108de:	4602      	mov	r2, r0
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d104      	bne.n	80108f6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108f2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80108f4:	e002      	b.n	80108fc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010906:	2b00      	cmp	r3, #0
 8010908:	d103      	bne.n	8010912 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2200      	movs	r2, #0
 801090e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010918:	4b84      	ldr	r3, [pc, #528]	@ (8010b2c <tcp_receive+0x5d8>)
 801091a:	881b      	ldrh	r3, [r3, #0]
 801091c:	4413      	add	r3, r2
 801091e:	b29a      	uxth	r2, r3
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	8b5b      	ldrh	r3, [r3, #26]
 801092a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801092e:	2b00      	cmp	r3, #0
 8010930:	d035      	beq.n	801099e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010936:	2b00      	cmp	r3, #0
 8010938:	d118      	bne.n	801096c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00c      	beq.n	801095c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	4618      	mov	r0, r3
 8010950:	f7fb f9c5 	bl	800bcde <lwip_htonl>
 8010954:	4603      	mov	r3, r0
 8010956:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010958:	2b00      	cmp	r3, #0
 801095a:	dc20      	bgt.n	801099e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	8b5b      	ldrh	r3, [r3, #26]
 8010960:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010964:	b29a      	uxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801096a:	e018      	b.n	801099e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	4618      	mov	r0, r3
 801097a:	f7fb f9b0 	bl	800bcde <lwip_htonl>
 801097e:	4603      	mov	r3, r0
 8010980:	1ae3      	subs	r3, r4, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	dc0b      	bgt.n	801099e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	8b5b      	ldrh	r3, [r3, #26]
 801098a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801098e:	b29a      	uxth	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010994:	e003      	b.n	801099e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f001 ff70 	bl	801287c <tcp_send_empty_ack>
 801099c:	e000      	b.n	80109a0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801099e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d05b      	beq.n	8010a60 <tcp_receive+0x50c>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80109ac:	4b60      	ldr	r3, [pc, #384]	@ (8010b30 <tcp_receive+0x5dc>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	da54      	bge.n	8010a60 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80109b6:	4b5f      	ldr	r3, [pc, #380]	@ (8010b34 <tcp_receive+0x5e0>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80109ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109d4:	10db      	asrs	r3, r3, #3
 80109d6:	b21b      	sxth	r3, r3
 80109d8:	b29b      	uxth	r3, r3
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	b29b      	uxth	r3, r3
 80109de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80109ee:	4413      	add	r3, r2
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	b21a      	sxth	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80109f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	da05      	bge.n	8010a0c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010a04:	425b      	negs	r3, r3
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010a0c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a16:	109b      	asrs	r3, r3, #2
 8010a18:	b21b      	sxth	r3, r3
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010a30:	4413      	add	r3, r2
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	b21a      	sxth	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010a40:	10db      	asrs	r3, r3, #3
 8010a42:	b21b      	sxth	r3, r3
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	4413      	add	r3, r2
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	b21a      	sxth	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010a60:	4b35      	ldr	r3, [pc, #212]	@ (8010b38 <tcp_receive+0x5e4>)
 8010a62:	881b      	ldrh	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	f000 84df 	beq.w	8011428 <tcp_receive+0xed4>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	7d1b      	ldrb	r3, [r3, #20]
 8010a6e:	2b06      	cmp	r3, #6
 8010a70:	f200 84da 	bhi.w	8011428 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a78:	4b30      	ldr	r3, [pc, #192]	@ (8010b3c <tcp_receive+0x5e8>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f2c0 808f 	blt.w	8010ba4 <tcp_receive+0x650>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8010b38 <tcp_receive+0x5e4>)
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	4619      	mov	r1, r3
 8010a90:	4b2a      	ldr	r3, [pc, #168]	@ (8010b3c <tcp_receive+0x5e8>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	440b      	add	r3, r1
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	3301      	adds	r3, #1
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f300 8082 	bgt.w	8010ba4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010aa0:	4b27      	ldr	r3, [pc, #156]	@ (8010b40 <tcp_receive+0x5ec>)
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010aaa:	4b24      	ldr	r3, [pc, #144]	@ (8010b3c <tcp_receive+0x5e8>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010ab2:	4b23      	ldr	r3, [pc, #140]	@ (8010b40 <tcp_receive+0x5ec>)
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d106      	bne.n	8010ac8 <tcp_receive+0x574>
 8010aba:	4b22      	ldr	r3, [pc, #136]	@ (8010b44 <tcp_receive+0x5f0>)
 8010abc:	f240 5294 	movw	r2, #1428	@ 0x594
 8010ac0:	4921      	ldr	r1, [pc, #132]	@ (8010b48 <tcp_receive+0x5f4>)
 8010ac2:	4822      	ldr	r0, [pc, #136]	@ (8010b4c <tcp_receive+0x5f8>)
 8010ac4:	f006 f89a 	bl	8016bfc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d906      	bls.n	8010ae0 <tcp_receive+0x58c>
 8010ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8010b44 <tcp_receive+0x5f0>)
 8010ad4:	f240 5295 	movw	r2, #1429	@ 0x595
 8010ad8:	491d      	ldr	r1, [pc, #116]	@ (8010b50 <tcp_receive+0x5fc>)
 8010ada:	481c      	ldr	r0, [pc, #112]	@ (8010b4c <tcp_receive+0x5f8>)
 8010adc:	f006 f88e 	bl	8016bfc <iprintf>
      off = (u16_t)off32;
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ae6:	4b16      	ldr	r3, [pc, #88]	@ (8010b40 <tcp_receive+0x5ec>)
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	891b      	ldrh	r3, [r3, #8]
 8010aec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d906      	bls.n	8010b02 <tcp_receive+0x5ae>
 8010af4:	4b13      	ldr	r3, [pc, #76]	@ (8010b44 <tcp_receive+0x5f0>)
 8010af6:	f240 5297 	movw	r2, #1431	@ 0x597
 8010afa:	4916      	ldr	r1, [pc, #88]	@ (8010b54 <tcp_receive+0x600>)
 8010afc:	4813      	ldr	r0, [pc, #76]	@ (8010b4c <tcp_receive+0x5f8>)
 8010afe:	f006 f87d 	bl	8016bfc <iprintf>
      inseg.len -= off;
 8010b02:	4b0f      	ldr	r3, [pc, #60]	@ (8010b40 <tcp_receive+0x5ec>)
 8010b04:	891a      	ldrh	r2, [r3, #8]
 8010b06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8010b40 <tcp_receive+0x5ec>)
 8010b10:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010b12:	4b0b      	ldr	r3, [pc, #44]	@ (8010b40 <tcp_receive+0x5ec>)
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	891a      	ldrh	r2, [r3, #8]
 8010b18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010b20:	e02a      	b.n	8010b78 <tcp_receive+0x624>
 8010b22:	bf00      	nop
 8010b24:	08019110 	.word	0x08019110
 8010b28:	08019118 	.word	0x08019118
 8010b2c:	20008c40 	.word	0x20008c40
 8010b30:	20008c3c 	.word	0x20008c3c
 8010b34:	20008c00 	.word	0x20008c00
 8010b38:	20008c42 	.word	0x20008c42
 8010b3c:	20008c38 	.word	0x20008c38
 8010b40:	20008c18 	.word	0x20008c18
 8010b44:	08018da8 	.word	0x08018da8
 8010b48:	08019120 	.word	0x08019120
 8010b4c:	08018df4 	.word	0x08018df4
 8010b50:	08019130 	.word	0x08019130
 8010b54:	08019140 	.word	0x08019140
        off -= p->len;
 8010b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b5a:	895b      	ldrh	r3, [r3, #10]
 8010b5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b68:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010b6a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b6e:	2200      	movs	r2, #0
 8010b70:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b7a:	895b      	ldrh	r3, [r3, #10]
 8010b7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d8e9      	bhi.n	8010b58 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010b84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010b8c:	f7fc fb6a 	bl	800d264 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b94:	4a90      	ldr	r2, [pc, #576]	@ (8010dd8 <tcp_receive+0x884>)
 8010b96:	6013      	str	r3, [r2, #0]
 8010b98:	4b90      	ldr	r3, [pc, #576]	@ (8010ddc <tcp_receive+0x888>)
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	4a8e      	ldr	r2, [pc, #568]	@ (8010dd8 <tcp_receive+0x884>)
 8010b9e:	6812      	ldr	r2, [r2, #0]
 8010ba0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010ba2:	e00d      	b.n	8010bc0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8010dd8 <tcp_receive+0x884>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	da06      	bge.n	8010bc0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8b5b      	ldrh	r3, [r3, #26]
 8010bb6:	f043 0302 	orr.w	r3, r3, #2
 8010bba:	b29a      	uxth	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010bc0:	4b85      	ldr	r3, [pc, #532]	@ (8010dd8 <tcp_receive+0x884>)
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bc8:	1ad3      	subs	r3, r2, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f2c0 8427 	blt.w	801141e <tcp_receive+0xeca>
 8010bd0:	4b81      	ldr	r3, [pc, #516]	@ (8010dd8 <tcp_receive+0x884>)
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bd8:	6879      	ldr	r1, [r7, #4]
 8010bda:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010bdc:	440b      	add	r3, r1
 8010bde:	1ad3      	subs	r3, r2, r3
 8010be0:	3301      	adds	r3, #1
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f300 841b 	bgt.w	801141e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bec:	4b7a      	ldr	r3, [pc, #488]	@ (8010dd8 <tcp_receive+0x884>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	f040 8298 	bne.w	8011126 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010bf6:	4b79      	ldr	r3, [pc, #484]	@ (8010ddc <tcp_receive+0x888>)
 8010bf8:	891c      	ldrh	r4, [r3, #8]
 8010bfa:	4b78      	ldr	r3, [pc, #480]	@ (8010ddc <tcp_receive+0x888>)
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	899b      	ldrh	r3, [r3, #12]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fb f856 	bl	800bcb4 <lwip_htons>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	f003 0303 	and.w	r3, r3, #3
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <tcp_receive+0x6c4>
 8010c14:	2301      	movs	r3, #1
 8010c16:	e000      	b.n	8010c1a <tcp_receive+0x6c6>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	4423      	add	r3, r4
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	4b70      	ldr	r3, [pc, #448]	@ (8010de0 <tcp_receive+0x88c>)
 8010c20:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c26:	4b6e      	ldr	r3, [pc, #440]	@ (8010de0 <tcp_receive+0x88c>)
 8010c28:	881b      	ldrh	r3, [r3, #0]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d274      	bcs.n	8010d18 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c2e:	4b6b      	ldr	r3, [pc, #428]	@ (8010ddc <tcp_receive+0x888>)
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	899b      	ldrh	r3, [r3, #12]
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fb f83c 	bl	800bcb4 <lwip_htons>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	f003 0301 	and.w	r3, r3, #1
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d01e      	beq.n	8010c86 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010c48:	4b64      	ldr	r3, [pc, #400]	@ (8010ddc <tcp_receive+0x888>)
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	899b      	ldrh	r3, [r3, #12]
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	b21b      	sxth	r3, r3
 8010c52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010c56:	b21c      	sxth	r4, r3
 8010c58:	4b60      	ldr	r3, [pc, #384]	@ (8010ddc <tcp_receive+0x888>)
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	899b      	ldrh	r3, [r3, #12]
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fb f827 	bl	800bcb4 <lwip_htons>
 8010c66:	4603      	mov	r3, r0
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7fb f81f 	bl	800bcb4 <lwip_htons>
 8010c76:	4603      	mov	r3, r0
 8010c78:	b21b      	sxth	r3, r3
 8010c7a:	4323      	orrs	r3, r4
 8010c7c:	b21a      	sxth	r2, r3
 8010c7e:	4b57      	ldr	r3, [pc, #348]	@ (8010ddc <tcp_receive+0x888>)
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	b292      	uxth	r2, r2
 8010c84:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c8a:	4b54      	ldr	r3, [pc, #336]	@ (8010ddc <tcp_receive+0x888>)
 8010c8c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010c8e:	4b53      	ldr	r3, [pc, #332]	@ (8010ddc <tcp_receive+0x888>)
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	899b      	ldrh	r3, [r3, #12]
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fb f80c 	bl	800bcb4 <lwip_htons>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	f003 0302 	and.w	r3, r3, #2
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d005      	beq.n	8010cb4 <tcp_receive+0x760>
            inseg.len -= 1;
 8010ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8010ddc <tcp_receive+0x888>)
 8010caa:	891b      	ldrh	r3, [r3, #8]
 8010cac:	3b01      	subs	r3, #1
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8010ddc <tcp_receive+0x888>)
 8010cb2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010cb4:	4b49      	ldr	r3, [pc, #292]	@ (8010ddc <tcp_receive+0x888>)
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	4a48      	ldr	r2, [pc, #288]	@ (8010ddc <tcp_receive+0x888>)
 8010cba:	8912      	ldrh	r2, [r2, #8]
 8010cbc:	4611      	mov	r1, r2
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7fc f9d0 	bl	800d064 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010cc4:	4b45      	ldr	r3, [pc, #276]	@ (8010ddc <tcp_receive+0x888>)
 8010cc6:	891c      	ldrh	r4, [r3, #8]
 8010cc8:	4b44      	ldr	r3, [pc, #272]	@ (8010ddc <tcp_receive+0x888>)
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	899b      	ldrh	r3, [r3, #12]
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fa ffef 	bl	800bcb4 <lwip_htons>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	f003 0303 	and.w	r3, r3, #3
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d001      	beq.n	8010ce6 <tcp_receive+0x792>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e000      	b.n	8010ce8 <tcp_receive+0x794>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	4423      	add	r3, r4
 8010cea:	b29a      	uxth	r2, r3
 8010cec:	4b3c      	ldr	r3, [pc, #240]	@ (8010de0 <tcp_receive+0x88c>)
 8010cee:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8010de0 <tcp_receive+0x88c>)
 8010cf2:	881b      	ldrh	r3, [r3, #0]
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4b38      	ldr	r3, [pc, #224]	@ (8010dd8 <tcp_receive+0x884>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	441a      	add	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d04:	440b      	add	r3, r1
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d006      	beq.n	8010d18 <tcp_receive+0x7c4>
 8010d0a:	4b36      	ldr	r3, [pc, #216]	@ (8010de4 <tcp_receive+0x890>)
 8010d0c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010d10:	4935      	ldr	r1, [pc, #212]	@ (8010de8 <tcp_receive+0x894>)
 8010d12:	4836      	ldr	r0, [pc, #216]	@ (8010dec <tcp_receive+0x898>)
 8010d14:	f005 ff72 	bl	8016bfc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	f000 80e6 	beq.w	8010eee <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d22:	4b2e      	ldr	r3, [pc, #184]	@ (8010ddc <tcp_receive+0x888>)
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	899b      	ldrh	r3, [r3, #12]
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fa ffc2 	bl	800bcb4 <lwip_htons>
 8010d30:	4603      	mov	r3, r0
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f003 0301 	and.w	r3, r3, #1
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d010      	beq.n	8010d5e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010d3c:	e00a      	b.n	8010d54 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d42:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f7fd fd93 	bl	800e87a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d1f0      	bne.n	8010d3e <tcp_receive+0x7ea>
 8010d5c:	e0c7      	b.n	8010eee <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010d64:	e051      	b.n	8010e0a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	899b      	ldrh	r3, [r3, #12]
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fa ffa0 	bl	800bcb4 <lwip_htons>
 8010d74:	4603      	mov	r3, r0
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	f003 0301 	and.w	r3, r3, #1
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d03c      	beq.n	8010dfa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010d80:	4b16      	ldr	r3, [pc, #88]	@ (8010ddc <tcp_receive+0x888>)
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	899b      	ldrh	r3, [r3, #12]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fa ff93 	bl	800bcb4 <lwip_htons>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d12f      	bne.n	8010dfa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010d9a:	4b10      	ldr	r3, [pc, #64]	@ (8010ddc <tcp_receive+0x888>)
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	899b      	ldrh	r3, [r3, #12]
 8010da0:	b29c      	uxth	r4, r3
 8010da2:	2001      	movs	r0, #1
 8010da4:	f7fa ff86 	bl	800bcb4 <lwip_htons>
 8010da8:	4603      	mov	r3, r0
 8010daa:	461a      	mov	r2, r3
 8010dac:	4b0b      	ldr	r3, [pc, #44]	@ (8010ddc <tcp_receive+0x888>)
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	4322      	orrs	r2, r4
 8010db2:	b292      	uxth	r2, r2
 8010db4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010db6:	4b09      	ldr	r3, [pc, #36]	@ (8010ddc <tcp_receive+0x888>)
 8010db8:	891c      	ldrh	r4, [r3, #8]
 8010dba:	4b08      	ldr	r3, [pc, #32]	@ (8010ddc <tcp_receive+0x888>)
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	899b      	ldrh	r3, [r3, #12]
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fa ff76 	bl	800bcb4 <lwip_htons>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	f003 0303 	and.w	r3, r3, #3
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00d      	beq.n	8010df0 <tcp_receive+0x89c>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	e00c      	b.n	8010df2 <tcp_receive+0x89e>
 8010dd8:	20008c38 	.word	0x20008c38
 8010ddc:	20008c18 	.word	0x20008c18
 8010de0:	20008c42 	.word	0x20008c42
 8010de4:	08018da8 	.word	0x08018da8
 8010de8:	08019150 	.word	0x08019150
 8010dec:	08018df4 	.word	0x08018df4
 8010df0:	2300      	movs	r3, #0
 8010df2:	4423      	add	r3, r4
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	4b98      	ldr	r3, [pc, #608]	@ (8011058 <tcp_receive+0xb04>)
 8010df8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dfc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010e04:	6938      	ldr	r0, [r7, #16]
 8010e06:	f7fd fd38 	bl	800e87a <tcp_seg_free>
            while (next &&
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d00e      	beq.n	8010e2e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010e10:	4b91      	ldr	r3, [pc, #580]	@ (8011058 <tcp_receive+0xb04>)
 8010e12:	881b      	ldrh	r3, [r3, #0]
 8010e14:	461a      	mov	r2, r3
 8010e16:	4b91      	ldr	r3, [pc, #580]	@ (801105c <tcp_receive+0xb08>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	441a      	add	r2, r3
 8010e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e24:	8909      	ldrh	r1, [r1, #8]
 8010e26:	440b      	add	r3, r1
 8010e28:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	da9b      	bge.n	8010d66 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d059      	beq.n	8010ee8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010e34:	4b88      	ldr	r3, [pc, #544]	@ (8011058 <tcp_receive+0xb04>)
 8010e36:	881b      	ldrh	r3, [r3, #0]
 8010e38:	461a      	mov	r2, r3
 8010e3a:	4b88      	ldr	r3, [pc, #544]	@ (801105c <tcp_receive+0xb08>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	441a      	add	r2, r3
 8010e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	dd4d      	ble.n	8010ee8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	4b81      	ldr	r3, [pc, #516]	@ (801105c <tcp_receive+0xb08>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	4b80      	ldr	r3, [pc, #512]	@ (8011060 <tcp_receive+0xb0c>)
 8010e60:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e62:	4b7f      	ldr	r3, [pc, #508]	@ (8011060 <tcp_receive+0xb0c>)
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	899b      	ldrh	r3, [r3, #12]
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fa ff22 	bl	800bcb4 <lwip_htons>
 8010e70:	4603      	mov	r3, r0
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	f003 0302 	and.w	r3, r3, #2
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d005      	beq.n	8010e88 <tcp_receive+0x934>
                inseg.len -= 1;
 8010e7c:	4b78      	ldr	r3, [pc, #480]	@ (8011060 <tcp_receive+0xb0c>)
 8010e7e:	891b      	ldrh	r3, [r3, #8]
 8010e80:	3b01      	subs	r3, #1
 8010e82:	b29a      	uxth	r2, r3
 8010e84:	4b76      	ldr	r3, [pc, #472]	@ (8011060 <tcp_receive+0xb0c>)
 8010e86:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010e88:	4b75      	ldr	r3, [pc, #468]	@ (8011060 <tcp_receive+0xb0c>)
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	4a74      	ldr	r2, [pc, #464]	@ (8011060 <tcp_receive+0xb0c>)
 8010e8e:	8912      	ldrh	r2, [r2, #8]
 8010e90:	4611      	mov	r1, r2
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fc f8e6 	bl	800d064 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010e98:	4b71      	ldr	r3, [pc, #452]	@ (8011060 <tcp_receive+0xb0c>)
 8010e9a:	891c      	ldrh	r4, [r3, #8]
 8010e9c:	4b70      	ldr	r3, [pc, #448]	@ (8011060 <tcp_receive+0xb0c>)
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	899b      	ldrh	r3, [r3, #12]
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fa ff05 	bl	800bcb4 <lwip_htons>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	f003 0303 	and.w	r3, r3, #3
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d001      	beq.n	8010eba <tcp_receive+0x966>
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e000      	b.n	8010ebc <tcp_receive+0x968>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	4423      	add	r3, r4
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	4b65      	ldr	r3, [pc, #404]	@ (8011058 <tcp_receive+0xb04>)
 8010ec2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010ec4:	4b64      	ldr	r3, [pc, #400]	@ (8011058 <tcp_receive+0xb04>)
 8010ec6:	881b      	ldrh	r3, [r3, #0]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	4b64      	ldr	r3, [pc, #400]	@ (801105c <tcp_receive+0xb08>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	441a      	add	r2, r3
 8010ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d006      	beq.n	8010ee8 <tcp_receive+0x994>
 8010eda:	4b62      	ldr	r3, [pc, #392]	@ (8011064 <tcp_receive+0xb10>)
 8010edc:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010ee0:	4961      	ldr	r1, [pc, #388]	@ (8011068 <tcp_receive+0xb14>)
 8010ee2:	4862      	ldr	r0, [pc, #392]	@ (801106c <tcp_receive+0xb18>)
 8010ee4:	f005 fe8a 	bl	8016bfc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010eec:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010eee:	4b5a      	ldr	r3, [pc, #360]	@ (8011058 <tcp_receive+0xb04>)
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	4b59      	ldr	r3, [pc, #356]	@ (801105c <tcp_receive+0xb08>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	441a      	add	r2, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010f02:	4b55      	ldr	r3, [pc, #340]	@ (8011058 <tcp_receive+0xb04>)
 8010f04:	881b      	ldrh	r3, [r3, #0]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d206      	bcs.n	8010f18 <tcp_receive+0x9c4>
 8010f0a:	4b56      	ldr	r3, [pc, #344]	@ (8011064 <tcp_receive+0xb10>)
 8010f0c:	f240 6207 	movw	r2, #1543	@ 0x607
 8010f10:	4957      	ldr	r1, [pc, #348]	@ (8011070 <tcp_receive+0xb1c>)
 8010f12:	4856      	ldr	r0, [pc, #344]	@ (801106c <tcp_receive+0xb18>)
 8010f14:	f005 fe72 	bl	8016bfc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8011058 <tcp_receive+0xb04>)
 8010f1e:	881b      	ldrh	r3, [r3, #0]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f7fc ffc5 	bl	800deb8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8011060 <tcp_receive+0xb0c>)
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	891b      	ldrh	r3, [r3, #8]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d006      	beq.n	8010f46 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010f38:	4b49      	ldr	r3, [pc, #292]	@ (8011060 <tcp_receive+0xb0c>)
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8011074 <tcp_receive+0xb20>)
 8010f3e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010f40:	4b47      	ldr	r3, [pc, #284]	@ (8011060 <tcp_receive+0xb0c>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f46:	4b46      	ldr	r3, [pc, #280]	@ (8011060 <tcp_receive+0xb0c>)
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	899b      	ldrh	r3, [r3, #12]
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fa feb0 	bl	800bcb4 <lwip_htons>
 8010f54:	4603      	mov	r3, r0
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	f003 0301 	and.w	r3, r3, #1
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 80b8 	beq.w	80110d2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010f62:	4b45      	ldr	r3, [pc, #276]	@ (8011078 <tcp_receive+0xb24>)
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	f043 0320 	orr.w	r3, r3, #32
 8010f6a:	b2da      	uxtb	r2, r3
 8010f6c:	4b42      	ldr	r3, [pc, #264]	@ (8011078 <tcp_receive+0xb24>)
 8010f6e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010f70:	e0af      	b.n	80110d2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f76:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	4a36      	ldr	r2, [pc, #216]	@ (801105c <tcp_receive+0xb08>)
 8010f82:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	891b      	ldrh	r3, [r3, #8]
 8010f88:	461c      	mov	r4, r3
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	899b      	ldrh	r3, [r3, #12]
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fa fe8e 	bl	800bcb4 <lwip_htons>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	f003 0303 	and.w	r3, r3, #3
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <tcp_receive+0xa54>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e000      	b.n	8010faa <tcp_receive+0xa56>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	191a      	adds	r2, r3, r4
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb0:	441a      	add	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fba:	461c      	mov	r4, r3
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	891b      	ldrh	r3, [r3, #8]
 8010fc0:	461d      	mov	r5, r3
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	899b      	ldrh	r3, [r3, #12]
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fa fe72 	bl	800bcb4 <lwip_htons>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	f003 0303 	and.w	r3, r3, #3
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <tcp_receive+0xa8c>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e000      	b.n	8010fe2 <tcp_receive+0xa8e>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	442b      	add	r3, r5
 8010fe4:	429c      	cmp	r4, r3
 8010fe6:	d206      	bcs.n	8010ff6 <tcp_receive+0xaa2>
 8010fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8011064 <tcp_receive+0xb10>)
 8010fea:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010fee:	4923      	ldr	r1, [pc, #140]	@ (801107c <tcp_receive+0xb28>)
 8010ff0:	481e      	ldr	r0, [pc, #120]	@ (801106c <tcp_receive+0xb18>)
 8010ff2:	f005 fe03 	bl	8016bfc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	891b      	ldrh	r3, [r3, #8]
 8010ffa:	461c      	mov	r4, r3
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	899b      	ldrh	r3, [r3, #12]
 8011002:	b29b      	uxth	r3, r3
 8011004:	4618      	mov	r0, r3
 8011006:	f7fa fe55 	bl	800bcb4 <lwip_htons>
 801100a:	4603      	mov	r3, r0
 801100c:	b2db      	uxtb	r3, r3
 801100e:	f003 0303 	and.w	r3, r3, #3
 8011012:	2b00      	cmp	r3, #0
 8011014:	d001      	beq.n	801101a <tcp_receive+0xac6>
 8011016:	2301      	movs	r3, #1
 8011018:	e000      	b.n	801101c <tcp_receive+0xac8>
 801101a:	2300      	movs	r3, #0
 801101c:	1919      	adds	r1, r3, r4
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011022:	b28b      	uxth	r3, r1
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	b29a      	uxth	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7fc ff43 	bl	800deb8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	891b      	ldrh	r3, [r3, #8]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d028      	beq.n	801108e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801103c:	4b0d      	ldr	r3, [pc, #52]	@ (8011074 <tcp_receive+0xb20>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d01d      	beq.n	8011080 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011044:	4b0b      	ldr	r3, [pc, #44]	@ (8011074 <tcp_receive+0xb20>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	4619      	mov	r1, r3
 801104e:	4610      	mov	r0, r2
 8011050:	f7fc fa50 	bl	800d4f4 <pbuf_cat>
 8011054:	e018      	b.n	8011088 <tcp_receive+0xb34>
 8011056:	bf00      	nop
 8011058:	20008c42 	.word	0x20008c42
 801105c:	20008c38 	.word	0x20008c38
 8011060:	20008c18 	.word	0x20008c18
 8011064:	08018da8 	.word	0x08018da8
 8011068:	08019188 	.word	0x08019188
 801106c:	08018df4 	.word	0x08018df4
 8011070:	080191c4 	.word	0x080191c4
 8011074:	20008c48 	.word	0x20008c48
 8011078:	20008c45 	.word	0x20008c45
 801107c:	080191e4 	.word	0x080191e4
            } else {
              recv_data = cseg->p;
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	4a70      	ldr	r2, [pc, #448]	@ (8011248 <tcp_receive+0xcf4>)
 8011086:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	2200      	movs	r2, #0
 801108c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	899b      	ldrh	r3, [r3, #12]
 8011094:	b29b      	uxth	r3, r3
 8011096:	4618      	mov	r0, r3
 8011098:	f7fa fe0c 	bl	800bcb4 <lwip_htons>
 801109c:	4603      	mov	r3, r0
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	f003 0301 	and.w	r3, r3, #1
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00d      	beq.n	80110c4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80110a8:	4b68      	ldr	r3, [pc, #416]	@ (801124c <tcp_receive+0xcf8>)
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	f043 0320 	orr.w	r3, r3, #32
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	4b66      	ldr	r3, [pc, #408]	@ (801124c <tcp_receive+0xcf8>)
 80110b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	7d1b      	ldrb	r3, [r3, #20]
 80110ba:	2b04      	cmp	r3, #4
 80110bc:	d102      	bne.n	80110c4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2207      	movs	r2, #7
 80110c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80110cc:	68b8      	ldr	r0, [r7, #8]
 80110ce:	f7fd fbd4 	bl	800e87a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d008      	beq.n	80110ec <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	685a      	ldr	r2, [r3, #4]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80110e6:	429a      	cmp	r2, r3
 80110e8:	f43f af43 	beq.w	8010f72 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	8b5b      	ldrh	r3, [r3, #26]
 80110f0:	f003 0301 	and.w	r3, r3, #1
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d00e      	beq.n	8011116 <tcp_receive+0xbc2>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	8b5b      	ldrh	r3, [r3, #26]
 80110fc:	f023 0301 	bic.w	r3, r3, #1
 8011100:	b29a      	uxth	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	835a      	strh	r2, [r3, #26]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	8b5b      	ldrh	r3, [r3, #26]
 801110a:	f043 0302 	orr.w	r3, r3, #2
 801110e:	b29a      	uxth	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011114:	e187      	b.n	8011426 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	8b5b      	ldrh	r3, [r3, #26]
 801111a:	f043 0301 	orr.w	r3, r3, #1
 801111e:	b29a      	uxth	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011124:	e17f      	b.n	8011426 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801112a:	2b00      	cmp	r3, #0
 801112c:	d106      	bne.n	801113c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801112e:	4848      	ldr	r0, [pc, #288]	@ (8011250 <tcp_receive+0xcfc>)
 8011130:	f7fd fbbc 	bl	800e8ac <tcp_seg_copy>
 8011134:	4602      	mov	r2, r0
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	675a      	str	r2, [r3, #116]	@ 0x74
 801113a:	e16c      	b.n	8011416 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801113c:	2300      	movs	r3, #0
 801113e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011144:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011146:	e156      	b.n	80113f6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	685a      	ldr	r2, [r3, #4]
 801114e:	4b41      	ldr	r3, [pc, #260]	@ (8011254 <tcp_receive+0xd00>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	429a      	cmp	r2, r3
 8011154:	d11d      	bne.n	8011192 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011156:	4b3e      	ldr	r3, [pc, #248]	@ (8011250 <tcp_receive+0xcfc>)
 8011158:	891a      	ldrh	r2, [r3, #8]
 801115a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801115c:	891b      	ldrh	r3, [r3, #8]
 801115e:	429a      	cmp	r2, r3
 8011160:	f240 814e 	bls.w	8011400 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011164:	483a      	ldr	r0, [pc, #232]	@ (8011250 <tcp_receive+0xcfc>)
 8011166:	f7fd fba1 	bl	800e8ac <tcp_seg_copy>
 801116a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 8148 	beq.w	8011404 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011176:	2b00      	cmp	r3, #0
 8011178:	d003      	beq.n	8011182 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801117a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801117c:	697a      	ldr	r2, [r7, #20]
 801117e:	601a      	str	r2, [r3, #0]
 8011180:	e002      	b.n	8011188 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011188:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801118a:	6978      	ldr	r0, [r7, #20]
 801118c:	f7ff f8de 	bl	801034c <tcp_oos_insert_segment>
                }
                break;
 8011190:	e138      	b.n	8011404 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011194:	2b00      	cmp	r3, #0
 8011196:	d117      	bne.n	80111c8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011198:	4b2e      	ldr	r3, [pc, #184]	@ (8011254 <tcp_receive+0xd00>)
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	da57      	bge.n	8011258 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111a8:	4829      	ldr	r0, [pc, #164]	@ (8011250 <tcp_receive+0xcfc>)
 80111aa:	f7fd fb7f 	bl	800e8ac <tcp_seg_copy>
 80111ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f000 8128 	beq.w	8011408 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	69ba      	ldr	r2, [r7, #24]
 80111bc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80111be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80111c0:	69b8      	ldr	r0, [r7, #24]
 80111c2:	f7ff f8c3 	bl	801034c <tcp_oos_insert_segment>
                  }
                  break;
 80111c6:	e11f      	b.n	8011408 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80111c8:	4b22      	ldr	r3, [pc, #136]	@ (8011254 <tcp_receive+0xd00>)
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	3b01      	subs	r3, #1
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	db3e      	blt.n	8011258 <tcp_receive+0xd04>
 80111da:	4b1e      	ldr	r3, [pc, #120]	@ (8011254 <tcp_receive+0xd00>)
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	1ad3      	subs	r3, r2, r3
 80111e6:	3301      	adds	r3, #1
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	dc35      	bgt.n	8011258 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111ec:	4818      	ldr	r0, [pc, #96]	@ (8011250 <tcp_receive+0xcfc>)
 80111ee:	f7fd fb5d 	bl	800e8ac <tcp_seg_copy>
 80111f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80111f4:	69fb      	ldr	r3, [r7, #28]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	f000 8108 	beq.w	801140c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80111fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011204:	8912      	ldrh	r2, [r2, #8]
 8011206:	441a      	add	r2, r3
 8011208:	4b12      	ldr	r3, [pc, #72]	@ (8011254 <tcp_receive+0xd00>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	1ad3      	subs	r3, r2, r3
 801120e:	2b00      	cmp	r3, #0
 8011210:	dd12      	ble.n	8011238 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011212:	4b10      	ldr	r3, [pc, #64]	@ (8011254 <tcp_receive+0xd00>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	b29a      	uxth	r2, r3
 8011218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	b29b      	uxth	r3, r3
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	b29a      	uxth	r2, r3
 8011224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011226:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801122a:	685a      	ldr	r2, [r3, #4]
 801122c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801122e:	891b      	ldrh	r3, [r3, #8]
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f7fb ff16 	bl	800d064 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801123a:	69fa      	ldr	r2, [r7, #28]
 801123c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801123e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011240:	69f8      	ldr	r0, [r7, #28]
 8011242:	f7ff f883 	bl	801034c <tcp_oos_insert_segment>
                  }
                  break;
 8011246:	e0e1      	b.n	801140c <tcp_receive+0xeb8>
 8011248:	20008c48 	.word	0x20008c48
 801124c:	20008c45 	.word	0x20008c45
 8011250:	20008c18 	.word	0x20008c18
 8011254:	20008c38 	.word	0x20008c38
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801125c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2b00      	cmp	r3, #0
 8011262:	f040 80c5 	bne.w	80113f0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011266:	4b7f      	ldr	r3, [pc, #508]	@ (8011464 <tcp_receive+0xf10>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011272:	2b00      	cmp	r3, #0
 8011274:	f340 80bc 	ble.w	80113f0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	899b      	ldrh	r3, [r3, #12]
 801127e:	b29b      	uxth	r3, r3
 8011280:	4618      	mov	r0, r3
 8011282:	f7fa fd17 	bl	800bcb4 <lwip_htons>
 8011286:	4603      	mov	r3, r0
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	f040 80be 	bne.w	8011410 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011294:	4874      	ldr	r0, [pc, #464]	@ (8011468 <tcp_receive+0xf14>)
 8011296:	f7fd fb09 	bl	800e8ac <tcp_seg_copy>
 801129a:	4602      	mov	r2, r0
 801129c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801129e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80112a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	f000 80b5 	beq.w	8011414 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80112aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112b2:	8912      	ldrh	r2, [r2, #8]
 80112b4:	441a      	add	r2, r3
 80112b6:	4b6b      	ldr	r3, [pc, #428]	@ (8011464 <tcp_receive+0xf10>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	2b00      	cmp	r3, #0
 80112be:	dd12      	ble.n	80112e6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80112c0:	4b68      	ldr	r3, [pc, #416]	@ (8011464 <tcp_receive+0xf10>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80112d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d8:	685a      	ldr	r2, [r3, #4]
 80112da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112dc:	891b      	ldrh	r3, [r3, #8]
 80112de:	4619      	mov	r1, r3
 80112e0:	4610      	mov	r0, r2
 80112e2:	f7fb febf 	bl	800d064 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80112e6:	4b61      	ldr	r3, [pc, #388]	@ (801146c <tcp_receive+0xf18>)
 80112e8:	881b      	ldrh	r3, [r3, #0]
 80112ea:	461a      	mov	r2, r3
 80112ec:	4b5d      	ldr	r3, [pc, #372]	@ (8011464 <tcp_receive+0xf10>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	441a      	add	r2, r3
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80112fa:	440b      	add	r3, r1
 80112fc:	1ad3      	subs	r3, r2, r3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	f340 8088 	ble.w	8011414 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	899b      	ldrh	r3, [r3, #12]
 801130c:	b29b      	uxth	r3, r3
 801130e:	4618      	mov	r0, r3
 8011310:	f7fa fcd0 	bl	800bcb4 <lwip_htons>
 8011314:	4603      	mov	r3, r0
 8011316:	b2db      	uxtb	r3, r3
 8011318:	f003 0301 	and.w	r3, r3, #1
 801131c:	2b00      	cmp	r3, #0
 801131e:	d021      	beq.n	8011364 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	899b      	ldrh	r3, [r3, #12]
 8011328:	b29b      	uxth	r3, r3
 801132a:	b21b      	sxth	r3, r3
 801132c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011330:	b21c      	sxth	r4, r3
 8011332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	899b      	ldrh	r3, [r3, #12]
 801133a:	b29b      	uxth	r3, r3
 801133c:	4618      	mov	r0, r3
 801133e:	f7fa fcb9 	bl	800bcb4 <lwip_htons>
 8011342:	4603      	mov	r3, r0
 8011344:	b2db      	uxtb	r3, r3
 8011346:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801134a:	b29b      	uxth	r3, r3
 801134c:	4618      	mov	r0, r3
 801134e:	f7fa fcb1 	bl	800bcb4 <lwip_htons>
 8011352:	4603      	mov	r3, r0
 8011354:	b21b      	sxth	r3, r3
 8011356:	4323      	orrs	r3, r4
 8011358:	b21a      	sxth	r2, r3
 801135a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	b292      	uxth	r2, r2
 8011362:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011368:	b29a      	uxth	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801136e:	4413      	add	r3, r2
 8011370:	b299      	uxth	r1, r3
 8011372:	4b3c      	ldr	r3, [pc, #240]	@ (8011464 <tcp_receive+0xf10>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	b29a      	uxth	r2, r3
 8011378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	1a8a      	subs	r2, r1, r2
 801137e:	b292      	uxth	r2, r2
 8011380:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	685a      	ldr	r2, [r3, #4]
 8011388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	891b      	ldrh	r3, [r3, #8]
 801138e:	4619      	mov	r1, r3
 8011390:	4610      	mov	r0, r2
 8011392:	f7fb fe67 	bl	800d064 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	891c      	ldrh	r4, [r3, #8]
 801139c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	899b      	ldrh	r3, [r3, #12]
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fa fc84 	bl	800bcb4 <lwip_htons>
 80113ac:	4603      	mov	r3, r0
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	f003 0303 	and.w	r3, r3, #3
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d001      	beq.n	80113bc <tcp_receive+0xe68>
 80113b8:	2301      	movs	r3, #1
 80113ba:	e000      	b.n	80113be <tcp_receive+0xe6a>
 80113bc:	2300      	movs	r3, #0
 80113be:	4423      	add	r3, r4
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	4b2a      	ldr	r3, [pc, #168]	@ (801146c <tcp_receive+0xf18>)
 80113c4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80113c6:	4b29      	ldr	r3, [pc, #164]	@ (801146c <tcp_receive+0xf18>)
 80113c8:	881b      	ldrh	r3, [r3, #0]
 80113ca:	461a      	mov	r2, r3
 80113cc:	4b25      	ldr	r3, [pc, #148]	@ (8011464 <tcp_receive+0xf10>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	441a      	add	r2, r3
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113d6:	6879      	ldr	r1, [r7, #4]
 80113d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80113da:	440b      	add	r3, r1
 80113dc:	429a      	cmp	r2, r3
 80113de:	d019      	beq.n	8011414 <tcp_receive+0xec0>
 80113e0:	4b23      	ldr	r3, [pc, #140]	@ (8011470 <tcp_receive+0xf1c>)
 80113e2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80113e6:	4923      	ldr	r1, [pc, #140]	@ (8011474 <tcp_receive+0xf20>)
 80113e8:	4823      	ldr	r0, [pc, #140]	@ (8011478 <tcp_receive+0xf24>)
 80113ea:	f005 fc07 	bl	8016bfc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80113ee:	e011      	b.n	8011414 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80113f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80113f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f47f aea5 	bne.w	8011148 <tcp_receive+0xbf4>
 80113fe:	e00a      	b.n	8011416 <tcp_receive+0xec2>
                break;
 8011400:	bf00      	nop
 8011402:	e008      	b.n	8011416 <tcp_receive+0xec2>
                break;
 8011404:	bf00      	nop
 8011406:	e006      	b.n	8011416 <tcp_receive+0xec2>
                  break;
 8011408:	bf00      	nop
 801140a:	e004      	b.n	8011416 <tcp_receive+0xec2>
                  break;
 801140c:	bf00      	nop
 801140e:	e002      	b.n	8011416 <tcp_receive+0xec2>
                  break;
 8011410:	bf00      	nop
 8011412:	e000      	b.n	8011416 <tcp_receive+0xec2>
                break;
 8011414:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f001 fa30 	bl	801287c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801141c:	e003      	b.n	8011426 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f001 fa2c 	bl	801287c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011424:	e01a      	b.n	801145c <tcp_receive+0xf08>
 8011426:	e019      	b.n	801145c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011428:	4b0e      	ldr	r3, [pc, #56]	@ (8011464 <tcp_receive+0xf10>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	2b00      	cmp	r3, #0
 8011434:	db0a      	blt.n	801144c <tcp_receive+0xef8>
 8011436:	4b0b      	ldr	r3, [pc, #44]	@ (8011464 <tcp_receive+0xf10>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801143e:	6879      	ldr	r1, [r7, #4]
 8011440:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011442:	440b      	add	r3, r1
 8011444:	1ad3      	subs	r3, r2, r3
 8011446:	3301      	adds	r3, #1
 8011448:	2b00      	cmp	r3, #0
 801144a:	dd07      	ble.n	801145c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	8b5b      	ldrh	r3, [r3, #26]
 8011450:	f043 0302 	orr.w	r3, r3, #2
 8011454:	b29a      	uxth	r2, r3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801145a:	e7ff      	b.n	801145c <tcp_receive+0xf08>
 801145c:	bf00      	nop
 801145e:	3750      	adds	r7, #80	@ 0x50
 8011460:	46bd      	mov	sp, r7
 8011462:	bdb0      	pop	{r4, r5, r7, pc}
 8011464:	20008c38 	.word	0x20008c38
 8011468:	20008c18 	.word	0x20008c18
 801146c:	20008c42 	.word	0x20008c42
 8011470:	08018da8 	.word	0x08018da8
 8011474:	08019150 	.word	0x08019150
 8011478:	08018df4 	.word	0x08018df4

0801147c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011482:	4b15      	ldr	r3, [pc, #84]	@ (80114d8 <tcp_get_next_optbyte+0x5c>)
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	1c5a      	adds	r2, r3, #1
 8011488:	b291      	uxth	r1, r2
 801148a:	4a13      	ldr	r2, [pc, #76]	@ (80114d8 <tcp_get_next_optbyte+0x5c>)
 801148c:	8011      	strh	r1, [r2, #0]
 801148e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011490:	4b12      	ldr	r3, [pc, #72]	@ (80114dc <tcp_get_next_optbyte+0x60>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d004      	beq.n	80114a2 <tcp_get_next_optbyte+0x26>
 8011498:	4b11      	ldr	r3, [pc, #68]	@ (80114e0 <tcp_get_next_optbyte+0x64>)
 801149a:	881b      	ldrh	r3, [r3, #0]
 801149c:	88fa      	ldrh	r2, [r7, #6]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d208      	bcs.n	80114b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80114a2:	4b10      	ldr	r3, [pc, #64]	@ (80114e4 <tcp_get_next_optbyte+0x68>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	3314      	adds	r3, #20
 80114a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80114aa:	88fb      	ldrh	r3, [r7, #6]
 80114ac:	683a      	ldr	r2, [r7, #0]
 80114ae:	4413      	add	r3, r2
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	e00b      	b.n	80114cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80114b4:	88fb      	ldrh	r3, [r7, #6]
 80114b6:	b2da      	uxtb	r2, r3
 80114b8:	4b09      	ldr	r3, [pc, #36]	@ (80114e0 <tcp_get_next_optbyte+0x64>)
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80114c2:	4b06      	ldr	r3, [pc, #24]	@ (80114dc <tcp_get_next_optbyte+0x60>)
 80114c4:	681a      	ldr	r2, [r3, #0]
 80114c6:	797b      	ldrb	r3, [r7, #5]
 80114c8:	4413      	add	r3, r2
 80114ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr
 80114d8:	20008c34 	.word	0x20008c34
 80114dc:	20008c30 	.word	0x20008c30
 80114e0:	20008c2e 	.word	0x20008c2e
 80114e4:	20008c28 	.word	0x20008c28

080114e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b084      	sub	sp, #16
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d106      	bne.n	8011504 <tcp_parseopt+0x1c>
 80114f6:	4b32      	ldr	r3, [pc, #200]	@ (80115c0 <tcp_parseopt+0xd8>)
 80114f8:	f240 727d 	movw	r2, #1917	@ 0x77d
 80114fc:	4931      	ldr	r1, [pc, #196]	@ (80115c4 <tcp_parseopt+0xdc>)
 80114fe:	4832      	ldr	r0, [pc, #200]	@ (80115c8 <tcp_parseopt+0xe0>)
 8011500:	f005 fb7c 	bl	8016bfc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011504:	4b31      	ldr	r3, [pc, #196]	@ (80115cc <tcp_parseopt+0xe4>)
 8011506:	881b      	ldrh	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d056      	beq.n	80115ba <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801150c:	4b30      	ldr	r3, [pc, #192]	@ (80115d0 <tcp_parseopt+0xe8>)
 801150e:	2200      	movs	r2, #0
 8011510:	801a      	strh	r2, [r3, #0]
 8011512:	e046      	b.n	80115a2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011514:	f7ff ffb2 	bl	801147c <tcp_get_next_optbyte>
 8011518:	4603      	mov	r3, r0
 801151a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801151c:	7bfb      	ldrb	r3, [r7, #15]
 801151e:	2b02      	cmp	r3, #2
 8011520:	d006      	beq.n	8011530 <tcp_parseopt+0x48>
 8011522:	2b02      	cmp	r3, #2
 8011524:	dc2a      	bgt.n	801157c <tcp_parseopt+0x94>
 8011526:	2b00      	cmp	r3, #0
 8011528:	d042      	beq.n	80115b0 <tcp_parseopt+0xc8>
 801152a:	2b01      	cmp	r3, #1
 801152c:	d038      	beq.n	80115a0 <tcp_parseopt+0xb8>
 801152e:	e025      	b.n	801157c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011530:	f7ff ffa4 	bl	801147c <tcp_get_next_optbyte>
 8011534:	4603      	mov	r3, r0
 8011536:	2b04      	cmp	r3, #4
 8011538:	d13c      	bne.n	80115b4 <tcp_parseopt+0xcc>
 801153a:	4b25      	ldr	r3, [pc, #148]	@ (80115d0 <tcp_parseopt+0xe8>)
 801153c:	881b      	ldrh	r3, [r3, #0]
 801153e:	3301      	adds	r3, #1
 8011540:	4a22      	ldr	r2, [pc, #136]	@ (80115cc <tcp_parseopt+0xe4>)
 8011542:	8812      	ldrh	r2, [r2, #0]
 8011544:	4293      	cmp	r3, r2
 8011546:	da35      	bge.n	80115b4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011548:	f7ff ff98 	bl	801147c <tcp_get_next_optbyte>
 801154c:	4603      	mov	r3, r0
 801154e:	021b      	lsls	r3, r3, #8
 8011550:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011552:	f7ff ff93 	bl	801147c <tcp_get_next_optbyte>
 8011556:	4603      	mov	r3, r0
 8011558:	461a      	mov	r2, r3
 801155a:	89bb      	ldrh	r3, [r7, #12]
 801155c:	4313      	orrs	r3, r2
 801155e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011560:	89bb      	ldrh	r3, [r7, #12]
 8011562:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011566:	d804      	bhi.n	8011572 <tcp_parseopt+0x8a>
 8011568:	89bb      	ldrh	r3, [r7, #12]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d001      	beq.n	8011572 <tcp_parseopt+0x8a>
 801156e:	89ba      	ldrh	r2, [r7, #12]
 8011570:	e001      	b.n	8011576 <tcp_parseopt+0x8e>
 8011572:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801157a:	e012      	b.n	80115a2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801157c:	f7ff ff7e 	bl	801147c <tcp_get_next_optbyte>
 8011580:	4603      	mov	r3, r0
 8011582:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011584:	7afb      	ldrb	r3, [r7, #11]
 8011586:	2b01      	cmp	r3, #1
 8011588:	d916      	bls.n	80115b8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801158a:	7afb      	ldrb	r3, [r7, #11]
 801158c:	b29a      	uxth	r2, r3
 801158e:	4b10      	ldr	r3, [pc, #64]	@ (80115d0 <tcp_parseopt+0xe8>)
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	4413      	add	r3, r2
 8011594:	b29b      	uxth	r3, r3
 8011596:	3b02      	subs	r3, #2
 8011598:	b29a      	uxth	r2, r3
 801159a:	4b0d      	ldr	r3, [pc, #52]	@ (80115d0 <tcp_parseopt+0xe8>)
 801159c:	801a      	strh	r2, [r3, #0]
 801159e:	e000      	b.n	80115a2 <tcp_parseopt+0xba>
          break;
 80115a0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80115a2:	4b0b      	ldr	r3, [pc, #44]	@ (80115d0 <tcp_parseopt+0xe8>)
 80115a4:	881a      	ldrh	r2, [r3, #0]
 80115a6:	4b09      	ldr	r3, [pc, #36]	@ (80115cc <tcp_parseopt+0xe4>)
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d3b2      	bcc.n	8011514 <tcp_parseopt+0x2c>
 80115ae:	e004      	b.n	80115ba <tcp_parseopt+0xd2>
          return;
 80115b0:	bf00      	nop
 80115b2:	e002      	b.n	80115ba <tcp_parseopt+0xd2>
            return;
 80115b4:	bf00      	nop
 80115b6:	e000      	b.n	80115ba <tcp_parseopt+0xd2>
            return;
 80115b8:	bf00      	nop
      }
    }
  }
}
 80115ba:	3710      	adds	r7, #16
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	08018da8 	.word	0x08018da8
 80115c4:	0801920c 	.word	0x0801920c
 80115c8:	08018df4 	.word	0x08018df4
 80115cc:	20008c2c 	.word	0x20008c2c
 80115d0:	20008c34 	.word	0x20008c34

080115d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80115d4:	b480      	push	{r7}
 80115d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80115d8:	4b05      	ldr	r3, [pc, #20]	@ (80115f0 <tcp_trigger_input_pcb_close+0x1c>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	f043 0310 	orr.w	r3, r3, #16
 80115e0:	b2da      	uxtb	r2, r3
 80115e2:	4b03      	ldr	r3, [pc, #12]	@ (80115f0 <tcp_trigger_input_pcb_close+0x1c>)
 80115e4:	701a      	strb	r2, [r3, #0]
}
 80115e6:	bf00      	nop
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr
 80115f0:	20008c45 	.word	0x20008c45

080115f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00a      	beq.n	801161c <tcp_route+0x28>
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	7a1b      	ldrb	r3, [r3, #8]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d006      	beq.n	801161c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	7a1b      	ldrb	r3, [r3, #8]
 8011612:	4618      	mov	r0, r3
 8011614:	f7fb fb4c 	bl	800ccb0 <netif_get_by_index>
 8011618:	4603      	mov	r3, r0
 801161a:	e003      	b.n	8011624 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f003 f96b 	bl	80148f8 <ip4_route>
 8011622:	4603      	mov	r3, r0
  }
}
 8011624:	4618      	mov	r0, r3
 8011626:	3710      	adds	r7, #16
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801162c:	b590      	push	{r4, r7, lr}
 801162e:	b087      	sub	sp, #28
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	603b      	str	r3, [r7, #0]
 8011638:	4613      	mov	r3, r2
 801163a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d105      	bne.n	801164e <tcp_create_segment+0x22>
 8011642:	4b43      	ldr	r3, [pc, #268]	@ (8011750 <tcp_create_segment+0x124>)
 8011644:	22a3      	movs	r2, #163	@ 0xa3
 8011646:	4943      	ldr	r1, [pc, #268]	@ (8011754 <tcp_create_segment+0x128>)
 8011648:	4843      	ldr	r0, [pc, #268]	@ (8011758 <tcp_create_segment+0x12c>)
 801164a:	f005 fad7 	bl	8016bfc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d105      	bne.n	8011660 <tcp_create_segment+0x34>
 8011654:	4b3e      	ldr	r3, [pc, #248]	@ (8011750 <tcp_create_segment+0x124>)
 8011656:	22a4      	movs	r2, #164	@ 0xa4
 8011658:	4940      	ldr	r1, [pc, #256]	@ (801175c <tcp_create_segment+0x130>)
 801165a:	483f      	ldr	r0, [pc, #252]	@ (8011758 <tcp_create_segment+0x12c>)
 801165c:	f005 face 	bl	8016bfc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011660:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	b2db      	uxtb	r3, r3
 8011668:	f003 0304 	and.w	r3, r3, #4
 801166c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801166e:	2003      	movs	r0, #3
 8011670:	f7fa ff98 	bl	800c5a4 <memp_malloc>
 8011674:	6138      	str	r0, [r7, #16]
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d104      	bne.n	8011686 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801167c:	68b8      	ldr	r0, [r7, #8]
 801167e:	f7fb fe77 	bl	800d370 <pbuf_free>
    return NULL;
 8011682:	2300      	movs	r3, #0
 8011684:	e060      	b.n	8011748 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801168c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	2200      	movs	r2, #0
 8011692:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	891a      	ldrh	r2, [r3, #8]
 801169e:	7dfb      	ldrb	r3, [r7, #23]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d205      	bcs.n	80116b2 <tcp_create_segment+0x86>
 80116a6:	4b2a      	ldr	r3, [pc, #168]	@ (8011750 <tcp_create_segment+0x124>)
 80116a8:	22b0      	movs	r2, #176	@ 0xb0
 80116aa:	492d      	ldr	r1, [pc, #180]	@ (8011760 <tcp_create_segment+0x134>)
 80116ac:	482a      	ldr	r0, [pc, #168]	@ (8011758 <tcp_create_segment+0x12c>)
 80116ae:	f005 faa5 	bl	8016bfc <iprintf>
  seg->len = p->tot_len - optlen;
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	891a      	ldrh	r2, [r3, #8]
 80116b6:	7dfb      	ldrb	r3, [r7, #23]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	b29a      	uxth	r2, r3
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80116c2:	2114      	movs	r1, #20
 80116c4:	68b8      	ldr	r0, [r7, #8]
 80116c6:	f7fb fdbd 	bl	800d244 <pbuf_add_header>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d004      	beq.n	80116da <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80116d0:	6938      	ldr	r0, [r7, #16]
 80116d2:	f7fd f8d2 	bl	800e87a <tcp_seg_free>
    return NULL;
 80116d6:	2300      	movs	r3, #0
 80116d8:	e036      	b.n	8011748 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	685a      	ldr	r2, [r3, #4]
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	8ada      	ldrh	r2, [r3, #22]
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	68dc      	ldr	r4, [r3, #12]
 80116ec:	4610      	mov	r0, r2
 80116ee:	f7fa fae1 	bl	800bcb4 <lwip_htons>
 80116f2:	4603      	mov	r3, r0
 80116f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	8b1a      	ldrh	r2, [r3, #24]
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	68dc      	ldr	r4, [r3, #12]
 80116fe:	4610      	mov	r0, r2
 8011700:	f7fa fad8 	bl	800bcb4 <lwip_htons>
 8011704:	4603      	mov	r3, r0
 8011706:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	68dc      	ldr	r4, [r3, #12]
 801170c:	6838      	ldr	r0, [r7, #0]
 801170e:	f7fa fae6 	bl	800bcde <lwip_htonl>
 8011712:	4603      	mov	r3, r0
 8011714:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011716:	7dfb      	ldrb	r3, [r7, #23]
 8011718:	089b      	lsrs	r3, r3, #2
 801171a:	b2db      	uxtb	r3, r3
 801171c:	3305      	adds	r3, #5
 801171e:	b29b      	uxth	r3, r3
 8011720:	031b      	lsls	r3, r3, #12
 8011722:	b29a      	uxth	r2, r3
 8011724:	79fb      	ldrb	r3, [r7, #7]
 8011726:	b29b      	uxth	r3, r3
 8011728:	4313      	orrs	r3, r2
 801172a:	b29a      	uxth	r2, r3
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	68dc      	ldr	r4, [r3, #12]
 8011730:	4610      	mov	r0, r2
 8011732:	f7fa fabf 	bl	800bcb4 <lwip_htons>
 8011736:	4603      	mov	r3, r0
 8011738:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	2200      	movs	r2, #0
 8011740:	749a      	strb	r2, [r3, #18]
 8011742:	2200      	movs	r2, #0
 8011744:	74da      	strb	r2, [r3, #19]
  return seg;
 8011746:	693b      	ldr	r3, [r7, #16]
}
 8011748:	4618      	mov	r0, r3
 801174a:	371c      	adds	r7, #28
 801174c:	46bd      	mov	sp, r7
 801174e:	bd90      	pop	{r4, r7, pc}
 8011750:	08019228 	.word	0x08019228
 8011754:	0801925c 	.word	0x0801925c
 8011758:	0801927c 	.word	0x0801927c
 801175c:	080192a4 	.word	0x080192a4
 8011760:	080192c8 	.word	0x080192c8

08011764 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011764:	b590      	push	{r4, r7, lr}
 8011766:	b08b      	sub	sp, #44	@ 0x2c
 8011768:	af02      	add	r7, sp, #8
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	460b      	mov	r3, r1
 801176e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011770:	2300      	movs	r3, #0
 8011772:	61fb      	str	r3, [r7, #28]
 8011774:	2300      	movs	r3, #0
 8011776:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011778:	2300      	movs	r3, #0
 801177a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d106      	bne.n	8011790 <tcp_split_unsent_seg+0x2c>
 8011782:	4b95      	ldr	r3, [pc, #596]	@ (80119d8 <tcp_split_unsent_seg+0x274>)
 8011784:	f240 324b 	movw	r2, #843	@ 0x34b
 8011788:	4994      	ldr	r1, [pc, #592]	@ (80119dc <tcp_split_unsent_seg+0x278>)
 801178a:	4895      	ldr	r0, [pc, #596]	@ (80119e0 <tcp_split_unsent_seg+0x27c>)
 801178c:	f005 fa36 	bl	8016bfc <iprintf>

  useg = pcb->unsent;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011794:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d102      	bne.n	80117a2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801179c:	f04f 33ff 	mov.w	r3, #4294967295
 80117a0:	e116      	b.n	80119d0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80117a2:	887b      	ldrh	r3, [r7, #2]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d109      	bne.n	80117bc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80117a8:	4b8b      	ldr	r3, [pc, #556]	@ (80119d8 <tcp_split_unsent_seg+0x274>)
 80117aa:	f240 3253 	movw	r2, #851	@ 0x353
 80117ae:	498d      	ldr	r1, [pc, #564]	@ (80119e4 <tcp_split_unsent_seg+0x280>)
 80117b0:	488b      	ldr	r0, [pc, #556]	@ (80119e0 <tcp_split_unsent_seg+0x27c>)
 80117b2:	f005 fa23 	bl	8016bfc <iprintf>
    return ERR_VAL;
 80117b6:	f06f 0305 	mvn.w	r3, #5
 80117ba:	e109      	b.n	80119d0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	891b      	ldrh	r3, [r3, #8]
 80117c0:	887a      	ldrh	r2, [r7, #2]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d301      	bcc.n	80117ca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80117c6:	2300      	movs	r3, #0
 80117c8:	e102      	b.n	80119d0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117ce:	887a      	ldrh	r2, [r7, #2]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d906      	bls.n	80117e2 <tcp_split_unsent_seg+0x7e>
 80117d4:	4b80      	ldr	r3, [pc, #512]	@ (80119d8 <tcp_split_unsent_seg+0x274>)
 80117d6:	f240 325b 	movw	r2, #859	@ 0x35b
 80117da:	4983      	ldr	r1, [pc, #524]	@ (80119e8 <tcp_split_unsent_seg+0x284>)
 80117dc:	4880      	ldr	r0, [pc, #512]	@ (80119e0 <tcp_split_unsent_seg+0x27c>)
 80117de:	f005 fa0d 	bl	8016bfc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	891b      	ldrh	r3, [r3, #8]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d106      	bne.n	80117f8 <tcp_split_unsent_seg+0x94>
 80117ea:	4b7b      	ldr	r3, [pc, #492]	@ (80119d8 <tcp_split_unsent_seg+0x274>)
 80117ec:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80117f0:	497e      	ldr	r1, [pc, #504]	@ (80119ec <tcp_split_unsent_seg+0x288>)
 80117f2:	487b      	ldr	r0, [pc, #492]	@ (80119e0 <tcp_split_unsent_seg+0x27c>)
 80117f4:	f005 fa02 	bl	8016bfc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	7a9b      	ldrb	r3, [r3, #10]
 80117fc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80117fe:	7bfb      	ldrb	r3, [r7, #15]
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	b2db      	uxtb	r3, r3
 8011804:	f003 0304 	and.w	r3, r3, #4
 8011808:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	891a      	ldrh	r2, [r3, #8]
 801180e:	887b      	ldrh	r3, [r7, #2]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011814:	7bbb      	ldrb	r3, [r7, #14]
 8011816:	b29a      	uxth	r2, r3
 8011818:	89bb      	ldrh	r3, [r7, #12]
 801181a:	4413      	add	r3, r2
 801181c:	b29b      	uxth	r3, r3
 801181e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011822:	4619      	mov	r1, r3
 8011824:	2036      	movs	r0, #54	@ 0x36
 8011826:	f7fb fabf 	bl	800cda8 <pbuf_alloc>
 801182a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	2b00      	cmp	r3, #0
 8011830:	f000 80b7 	beq.w	80119a2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	891a      	ldrh	r2, [r3, #8]
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	891b      	ldrh	r3, [r3, #8]
 801183e:	1ad3      	subs	r3, r2, r3
 8011840:	b29a      	uxth	r2, r3
 8011842:	887b      	ldrh	r3, [r7, #2]
 8011844:	4413      	add	r3, r2
 8011846:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	6858      	ldr	r0, [r3, #4]
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	685a      	ldr	r2, [r3, #4]
 8011850:	7bbb      	ldrb	r3, [r7, #14]
 8011852:	18d1      	adds	r1, r2, r3
 8011854:	897b      	ldrh	r3, [r7, #10]
 8011856:	89ba      	ldrh	r2, [r7, #12]
 8011858:	f7fb ff84 	bl	800d764 <pbuf_copy_partial>
 801185c:	4603      	mov	r3, r0
 801185e:	461a      	mov	r2, r3
 8011860:	89bb      	ldrh	r3, [r7, #12]
 8011862:	4293      	cmp	r3, r2
 8011864:	f040 809f 	bne.w	80119a6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	899b      	ldrh	r3, [r3, #12]
 801186e:	b29b      	uxth	r3, r3
 8011870:	4618      	mov	r0, r3
 8011872:	f7fa fa1f 	bl	800bcb4 <lwip_htons>
 8011876:	4603      	mov	r3, r0
 8011878:	b2db      	uxtb	r3, r3
 801187a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801187e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011880:	2300      	movs	r3, #0
 8011882:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011884:	7efb      	ldrb	r3, [r7, #27]
 8011886:	f003 0308 	and.w	r3, r3, #8
 801188a:	2b00      	cmp	r3, #0
 801188c:	d007      	beq.n	801189e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801188e:	7efb      	ldrb	r3, [r7, #27]
 8011890:	f023 0308 	bic.w	r3, r3, #8
 8011894:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011896:	7ebb      	ldrb	r3, [r7, #26]
 8011898:	f043 0308 	orr.w	r3, r3, #8
 801189c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801189e:	7efb      	ldrb	r3, [r7, #27]
 80118a0:	f003 0301 	and.w	r3, r3, #1
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d007      	beq.n	80118b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80118a8:	7efb      	ldrb	r3, [r7, #27]
 80118aa:	f023 0301 	bic.w	r3, r3, #1
 80118ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80118b0:	7ebb      	ldrb	r3, [r7, #26]
 80118b2:	f043 0301 	orr.w	r3, r3, #1
 80118b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fa fa0d 	bl	800bcde <lwip_htonl>
 80118c4:	4602      	mov	r2, r0
 80118c6:	887b      	ldrh	r3, [r7, #2]
 80118c8:	18d1      	adds	r1, r2, r3
 80118ca:	7eba      	ldrb	r2, [r7, #26]
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	460b      	mov	r3, r1
 80118d2:	6939      	ldr	r1, [r7, #16]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7ff fea9 	bl	801162c <tcp_create_segment>
 80118da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d063      	beq.n	80119aa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fb fdca 	bl	800d480 <pbuf_clen>
 80118ec:	4603      	mov	r3, r0
 80118ee:	461a      	mov	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80118f6:	1a9b      	subs	r3, r3, r2
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	6858      	ldr	r0, [r3, #4]
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	891a      	ldrh	r2, [r3, #8]
 801190a:	89bb      	ldrh	r3, [r7, #12]
 801190c:	1ad3      	subs	r3, r2, r3
 801190e:	b29b      	uxth	r3, r3
 8011910:	4619      	mov	r1, r3
 8011912:	f7fb fba7 	bl	800d064 <pbuf_realloc>
  useg->len -= remainder;
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	891a      	ldrh	r2, [r3, #8]
 801191a:	89bb      	ldrh	r3, [r7, #12]
 801191c:	1ad3      	subs	r3, r2, r3
 801191e:	b29a      	uxth	r2, r3
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	899b      	ldrh	r3, [r3, #12]
 801192a:	b29c      	uxth	r4, r3
 801192c:	7efb      	ldrb	r3, [r7, #27]
 801192e:	b29b      	uxth	r3, r3
 8011930:	4618      	mov	r0, r3
 8011932:	f7fa f9bf 	bl	800bcb4 <lwip_htons>
 8011936:	4603      	mov	r3, r0
 8011938:	461a      	mov	r2, r3
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	4322      	orrs	r2, r4
 8011940:	b292      	uxth	r2, r2
 8011942:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	4618      	mov	r0, r3
 801194a:	f7fb fd99 	bl	800d480 <pbuf_clen>
 801194e:	4603      	mov	r3, r0
 8011950:	461a      	mov	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011958:	4413      	add	r3, r2
 801195a:	b29a      	uxth	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	4618      	mov	r0, r3
 8011968:	f7fb fd8a 	bl	800d480 <pbuf_clen>
 801196c:	4603      	mov	r3, r0
 801196e:	461a      	mov	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011976:	4413      	add	r3, r2
 8011978:	b29a      	uxth	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	69fa      	ldr	r2, [r7, #28]
 801198c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d103      	bne.n	801199e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2200      	movs	r2, #0
 801199a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801199e:	2300      	movs	r3, #0
 80119a0:	e016      	b.n	80119d0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80119a2:	bf00      	nop
 80119a4:	e002      	b.n	80119ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119a6:	bf00      	nop
 80119a8:	e000      	b.n	80119ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119aa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d006      	beq.n	80119c0 <tcp_split_unsent_seg+0x25c>
 80119b2:	4b09      	ldr	r3, [pc, #36]	@ (80119d8 <tcp_split_unsent_seg+0x274>)
 80119b4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80119b8:	490d      	ldr	r1, [pc, #52]	@ (80119f0 <tcp_split_unsent_seg+0x28c>)
 80119ba:	4809      	ldr	r0, [pc, #36]	@ (80119e0 <tcp_split_unsent_seg+0x27c>)
 80119bc:	f005 f91e 	bl	8016bfc <iprintf>
  if (p != NULL) {
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d002      	beq.n	80119cc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80119c6:	6938      	ldr	r0, [r7, #16]
 80119c8:	f7fb fcd2 	bl	800d370 <pbuf_free>
  }

  return ERR_MEM;
 80119cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3724      	adds	r7, #36	@ 0x24
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd90      	pop	{r4, r7, pc}
 80119d8:	08019228 	.word	0x08019228
 80119dc:	080195bc 	.word	0x080195bc
 80119e0:	0801927c 	.word	0x0801927c
 80119e4:	080195e0 	.word	0x080195e0
 80119e8:	08019604 	.word	0x08019604
 80119ec:	08019614 	.word	0x08019614
 80119f0:	08019624 	.word	0x08019624

080119f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80119f4:	b590      	push	{r4, r7, lr}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d106      	bne.n	8011a10 <tcp_send_fin+0x1c>
 8011a02:	4b21      	ldr	r3, [pc, #132]	@ (8011a88 <tcp_send_fin+0x94>)
 8011a04:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011a08:	4920      	ldr	r1, [pc, #128]	@ (8011a8c <tcp_send_fin+0x98>)
 8011a0a:	4821      	ldr	r0, [pc, #132]	@ (8011a90 <tcp_send_fin+0x9c>)
 8011a0c:	f005 f8f6 	bl	8016bfc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d02e      	beq.n	8011a76 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a1c:	60fb      	str	r3, [r7, #12]
 8011a1e:	e002      	b.n	8011a26 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d1f8      	bne.n	8011a20 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	899b      	ldrh	r3, [r3, #12]
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fa f93c 	bl	800bcb4 <lwip_htons>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	f003 0307 	and.w	r3, r3, #7
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d116      	bne.n	8011a76 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	899b      	ldrh	r3, [r3, #12]
 8011a4e:	b29c      	uxth	r4, r3
 8011a50:	2001      	movs	r0, #1
 8011a52:	f7fa f92f 	bl	800bcb4 <lwip_htons>
 8011a56:	4603      	mov	r3, r0
 8011a58:	461a      	mov	r2, r3
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	4322      	orrs	r2, r4
 8011a60:	b292      	uxth	r2, r2
 8011a62:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	8b5b      	ldrh	r3, [r3, #26]
 8011a68:	f043 0320 	orr.w	r3, r3, #32
 8011a6c:	b29a      	uxth	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011a72:	2300      	movs	r3, #0
 8011a74:	e004      	b.n	8011a80 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011a76:	2101      	movs	r1, #1
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f000 f80b 	bl	8011a94 <tcp_enqueue_flags>
 8011a7e:	4603      	mov	r3, r0
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3714      	adds	r7, #20
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd90      	pop	{r4, r7, pc}
 8011a88:	08019228 	.word	0x08019228
 8011a8c:	08019630 	.word	0x08019630
 8011a90:	0801927c 	.word	0x0801927c

08011a94 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b08a      	sub	sp, #40	@ 0x28
 8011a98:	af02      	add	r7, sp, #8
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011aa8:	78fb      	ldrb	r3, [r7, #3]
 8011aaa:	f003 0303 	and.w	r3, r3, #3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d106      	bne.n	8011ac0 <tcp_enqueue_flags+0x2c>
 8011ab2:	4b67      	ldr	r3, [pc, #412]	@ (8011c50 <tcp_enqueue_flags+0x1bc>)
 8011ab4:	f240 4211 	movw	r2, #1041	@ 0x411
 8011ab8:	4966      	ldr	r1, [pc, #408]	@ (8011c54 <tcp_enqueue_flags+0x1c0>)
 8011aba:	4867      	ldr	r0, [pc, #412]	@ (8011c58 <tcp_enqueue_flags+0x1c4>)
 8011abc:	f005 f89e 	bl	8016bfc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d106      	bne.n	8011ad4 <tcp_enqueue_flags+0x40>
 8011ac6:	4b62      	ldr	r3, [pc, #392]	@ (8011c50 <tcp_enqueue_flags+0x1bc>)
 8011ac8:	f240 4213 	movw	r2, #1043	@ 0x413
 8011acc:	4963      	ldr	r1, [pc, #396]	@ (8011c5c <tcp_enqueue_flags+0x1c8>)
 8011ace:	4862      	ldr	r0, [pc, #392]	@ (8011c58 <tcp_enqueue_flags+0x1c4>)
 8011ad0:	f005 f894 	bl	8016bfc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011ad4:	78fb      	ldrb	r3, [r7, #3]
 8011ad6:	f003 0302 	and.w	r3, r3, #2
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d001      	beq.n	8011ae2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011ade:	2301      	movs	r3, #1
 8011ae0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ae2:	7ffb      	ldrb	r3, [r7, #31]
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	f003 0304 	and.w	r3, r3, #4
 8011aec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011aee:	7dfb      	ldrb	r3, [r7, #23]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011af6:	4619      	mov	r1, r3
 8011af8:	2036      	movs	r0, #54	@ 0x36
 8011afa:	f7fb f955 	bl	800cda8 <pbuf_alloc>
 8011afe:	6138      	str	r0, [r7, #16]
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d109      	bne.n	8011b1a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	8b5b      	ldrh	r3, [r3, #26]
 8011b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b14:	f04f 33ff 	mov.w	r3, #4294967295
 8011b18:	e095      	b.n	8011c46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	895a      	ldrh	r2, [r3, #10]
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d206      	bcs.n	8011b34 <tcp_enqueue_flags+0xa0>
 8011b26:	4b4a      	ldr	r3, [pc, #296]	@ (8011c50 <tcp_enqueue_flags+0x1bc>)
 8011b28:	f240 4239 	movw	r2, #1081	@ 0x439
 8011b2c:	494c      	ldr	r1, [pc, #304]	@ (8011c60 <tcp_enqueue_flags+0x1cc>)
 8011b2e:	484a      	ldr	r0, [pc, #296]	@ (8011c58 <tcp_enqueue_flags+0x1c4>)
 8011b30:	f005 f864 	bl	8016bfc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011b38:	78fa      	ldrb	r2, [r7, #3]
 8011b3a:	7ffb      	ldrb	r3, [r7, #31]
 8011b3c:	9300      	str	r3, [sp, #0]
 8011b3e:	460b      	mov	r3, r1
 8011b40:	6939      	ldr	r1, [r7, #16]
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f7ff fd72 	bl	801162c <tcp_create_segment>
 8011b48:	60f8      	str	r0, [r7, #12]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d109      	bne.n	8011b64 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	8b5b      	ldrh	r3, [r3, #26]
 8011b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b62:	e070      	b.n	8011c46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	f003 0303 	and.w	r3, r3, #3
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d006      	beq.n	8011b7e <tcp_enqueue_flags+0xea>
 8011b70:	4b37      	ldr	r3, [pc, #220]	@ (8011c50 <tcp_enqueue_flags+0x1bc>)
 8011b72:	f240 4242 	movw	r2, #1090	@ 0x442
 8011b76:	493b      	ldr	r1, [pc, #236]	@ (8011c64 <tcp_enqueue_flags+0x1d0>)
 8011b78:	4837      	ldr	r0, [pc, #220]	@ (8011c58 <tcp_enqueue_flags+0x1c4>)
 8011b7a:	f005 f83f 	bl	8016bfc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	891b      	ldrh	r3, [r3, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d006      	beq.n	8011b94 <tcp_enqueue_flags+0x100>
 8011b86:	4b32      	ldr	r3, [pc, #200]	@ (8011c50 <tcp_enqueue_flags+0x1bc>)
 8011b88:	f240 4243 	movw	r2, #1091	@ 0x443
 8011b8c:	4936      	ldr	r1, [pc, #216]	@ (8011c68 <tcp_enqueue_flags+0x1d4>)
 8011b8e:	4832      	ldr	r0, [pc, #200]	@ (8011c58 <tcp_enqueue_flags+0x1c4>)
 8011b90:	f005 f834 	bl	8016bfc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d103      	bne.n	8011ba4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011ba2:	e00d      	b.n	8011bc0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ba8:	61bb      	str	r3, [r7, #24]
 8011baa:	e002      	b.n	8011bb2 <tcp_enqueue_flags+0x11e>
 8011bac:	69bb      	ldr	r3, [r7, #24]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	61bb      	str	r3, [r7, #24]
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d1f8      	bne.n	8011bac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011bc8:	78fb      	ldrb	r3, [r7, #3]
 8011bca:	f003 0302 	and.w	r3, r3, #2
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d104      	bne.n	8011bdc <tcp_enqueue_flags+0x148>
 8011bd2:	78fb      	ldrb	r3, [r7, #3]
 8011bd4:	f003 0301 	and.w	r3, r3, #1
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d004      	beq.n	8011be6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011be0:	1c5a      	adds	r2, r3, #1
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011be6:	78fb      	ldrb	r3, [r7, #3]
 8011be8:	f003 0301 	and.w	r3, r3, #1
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d006      	beq.n	8011bfe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	8b5b      	ldrh	r3, [r3, #26]
 8011bf4:	f043 0320 	orr.w	r3, r3, #32
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fb fc3c 	bl	800d480 <pbuf_clen>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c12:	4413      	add	r3, r2
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00e      	beq.n	8011c44 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d10a      	bne.n	8011c44 <tcp_enqueue_flags+0x1b0>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d106      	bne.n	8011c44 <tcp_enqueue_flags+0x1b0>
 8011c36:	4b06      	ldr	r3, [pc, #24]	@ (8011c50 <tcp_enqueue_flags+0x1bc>)
 8011c38:	f240 4265 	movw	r2, #1125	@ 0x465
 8011c3c:	490b      	ldr	r1, [pc, #44]	@ (8011c6c <tcp_enqueue_flags+0x1d8>)
 8011c3e:	4806      	ldr	r0, [pc, #24]	@ (8011c58 <tcp_enqueue_flags+0x1c4>)
 8011c40:	f004 ffdc 	bl	8016bfc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011c44:	2300      	movs	r3, #0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3720      	adds	r7, #32
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	08019228 	.word	0x08019228
 8011c54:	0801964c 	.word	0x0801964c
 8011c58:	0801927c 	.word	0x0801927c
 8011c5c:	080196a4 	.word	0x080196a4
 8011c60:	080196c4 	.word	0x080196c4
 8011c64:	08019700 	.word	0x08019700
 8011c68:	08019718 	.word	0x08019718
 8011c6c:	08019744 	.word	0x08019744

08011c70 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011c70:	b5b0      	push	{r4, r5, r7, lr}
 8011c72:	b08a      	sub	sp, #40	@ 0x28
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d106      	bne.n	8011c8c <tcp_output+0x1c>
 8011c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8011ea8 <tcp_output+0x238>)
 8011c80:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011c84:	4989      	ldr	r1, [pc, #548]	@ (8011eac <tcp_output+0x23c>)
 8011c86:	488a      	ldr	r0, [pc, #552]	@ (8011eb0 <tcp_output+0x240>)
 8011c88:	f004 ffb8 	bl	8016bfc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	7d1b      	ldrb	r3, [r3, #20]
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d106      	bne.n	8011ca2 <tcp_output+0x32>
 8011c94:	4b84      	ldr	r3, [pc, #528]	@ (8011ea8 <tcp_output+0x238>)
 8011c96:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011c9a:	4986      	ldr	r1, [pc, #536]	@ (8011eb4 <tcp_output+0x244>)
 8011c9c:	4884      	ldr	r0, [pc, #528]	@ (8011eb0 <tcp_output+0x240>)
 8011c9e:	f004 ffad 	bl	8016bfc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011ca2:	4b85      	ldr	r3, [pc, #532]	@ (8011eb8 <tcp_output+0x248>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d101      	bne.n	8011cb0 <tcp_output+0x40>
    return ERR_OK;
 8011cac:	2300      	movs	r3, #0
 8011cae:	e1ce      	b.n	801204e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	bf28      	it	cs
 8011cc0:	4613      	movcs	r3, r2
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d10b      	bne.n	8011cea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	8b5b      	ldrh	r3, [r3, #26]
 8011cd6:	f003 0302 	and.w	r3, r3, #2
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f000 81aa 	beq.w	8012034 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fdcb 	bl	801287c <tcp_send_empty_ack>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	e1b1      	b.n	801204e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011cea:	6879      	ldr	r1, [r7, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	3304      	adds	r3, #4
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff fc7e 	bl	80115f4 <tcp_route>
 8011cf8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d102      	bne.n	8011d06 <tcp_output+0x96>
    return ERR_RTE;
 8011d00:	f06f 0303 	mvn.w	r3, #3
 8011d04:	e1a3      	b.n	801204e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d003      	beq.n	8011d14 <tcp_output+0xa4>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d111      	bne.n	8011d38 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d002      	beq.n	8011d20 <tcp_output+0xb0>
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	e000      	b.n	8011d22 <tcp_output+0xb2>
 8011d20:	2300      	movs	r3, #0
 8011d22:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d102      	bne.n	8011d30 <tcp_output+0xc0>
      return ERR_RTE;
 8011d2a:	f06f 0303 	mvn.w	r3, #3
 8011d2e:	e18e      	b.n	801204e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	681a      	ldr	r2, [r3, #0]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7f9 ffcd 	bl	800bcde <lwip_htonl>
 8011d44:	4602      	mov	r2, r0
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d4e:	8912      	ldrh	r2, [r2, #8]
 8011d50:	4413      	add	r3, r2
 8011d52:	69ba      	ldr	r2, [r7, #24]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d227      	bcs.n	8011da8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011d5e:	461a      	mov	r2, r3
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d114      	bne.n	8011d90 <tcp_output+0x120>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d110      	bne.n	8011d90 <tcp_output+0x120>
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d10b      	bne.n	8011d90 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2201      	movs	r2, #1
 8011d84:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	8b5b      	ldrh	r3, [r3, #26]
 8011d94:	f003 0302 	and.w	r3, r3, #2
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f000 814d 	beq.w	8012038 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 fd6c 	bl	801287c <tcp_send_empty_ack>
 8011da4:	4603      	mov	r3, r0
 8011da6:	e152      	b.n	801204e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2200      	movs	r2, #0
 8011dac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011db4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011db6:	6a3b      	ldr	r3, [r7, #32]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	f000 811c 	beq.w	8011ff6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011dbe:	e002      	b.n	8011dc6 <tcp_output+0x156>
 8011dc0:	6a3b      	ldr	r3, [r7, #32]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	623b      	str	r3, [r7, #32]
 8011dc6:	6a3b      	ldr	r3, [r7, #32]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d1f8      	bne.n	8011dc0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011dce:	e112      	b.n	8011ff6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	899b      	ldrh	r3, [r3, #12]
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7f9 ff6b 	bl	800bcb4 <lwip_htons>
 8011dde:	4603      	mov	r3, r0
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	f003 0304 	and.w	r3, r3, #4
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d006      	beq.n	8011df8 <tcp_output+0x188>
 8011dea:	4b2f      	ldr	r3, [pc, #188]	@ (8011ea8 <tcp_output+0x238>)
 8011dec:	f240 5236 	movw	r2, #1334	@ 0x536
 8011df0:	4932      	ldr	r1, [pc, #200]	@ (8011ebc <tcp_output+0x24c>)
 8011df2:	482f      	ldr	r0, [pc, #188]	@ (8011eb0 <tcp_output+0x240>)
 8011df4:	f004 ff02 	bl	8016bfc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d01f      	beq.n	8011e40 <tcp_output+0x1d0>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	8b5b      	ldrh	r3, [r3, #26]
 8011e04:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d119      	bne.n	8011e40 <tcp_output+0x1d0>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00b      	beq.n	8011e2c <tcp_output+0x1bc>
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d110      	bne.n	8011e40 <tcp_output+0x1d0>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e22:	891a      	ldrh	r2, [r3, #8]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d209      	bcs.n	8011e40 <tcp_output+0x1d0>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d004      	beq.n	8011e40 <tcp_output+0x1d0>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e3c:	2b08      	cmp	r3, #8
 8011e3e:	d901      	bls.n	8011e44 <tcp_output+0x1d4>
 8011e40:	2301      	movs	r3, #1
 8011e42:	e000      	b.n	8011e46 <tcp_output+0x1d6>
 8011e44:	2300      	movs	r3, #0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d106      	bne.n	8011e58 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	8b5b      	ldrh	r3, [r3, #26]
 8011e4e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	f000 80e4 	beq.w	8012020 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	7d1b      	ldrb	r3, [r3, #20]
 8011e5c:	2b02      	cmp	r3, #2
 8011e5e:	d00d      	beq.n	8011e7c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	b29c      	uxth	r4, r3
 8011e68:	2010      	movs	r0, #16
 8011e6a:	f7f9 ff23 	bl	800bcb4 <lwip_htons>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	461a      	mov	r2, r3
 8011e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	4322      	orrs	r2, r4
 8011e78:	b292      	uxth	r2, r2
 8011e7a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011e7c:	697a      	ldr	r2, [r7, #20]
 8011e7e:	6879      	ldr	r1, [r7, #4]
 8011e80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e82:	f000 f909 	bl	8012098 <tcp_output_segment>
 8011e86:	4603      	mov	r3, r0
 8011e88:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d016      	beq.n	8011ec0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8b5b      	ldrh	r3, [r3, #26]
 8011e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	835a      	strh	r2, [r3, #26]
      return err;
 8011ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ea4:	e0d3      	b.n	801204e <tcp_output+0x3de>
 8011ea6:	bf00      	nop
 8011ea8:	08019228 	.word	0x08019228
 8011eac:	0801976c 	.word	0x0801976c
 8011eb0:	0801927c 	.word	0x0801927c
 8011eb4:	08019784 	.word	0x08019784
 8011eb8:	20008c4c 	.word	0x20008c4c
 8011ebc:	080197ac 	.word	0x080197ac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec2:	681a      	ldr	r2, [r3, #0]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	7d1b      	ldrb	r3, [r3, #20]
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d006      	beq.n	8011ede <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	8b5b      	ldrh	r3, [r3, #26]
 8011ed4:	f023 0303 	bic.w	r3, r3, #3
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7f9 fefa 	bl	800bcde <lwip_htonl>
 8011eea:	4604      	mov	r4, r0
 8011eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eee:	891b      	ldrh	r3, [r3, #8]
 8011ef0:	461d      	mov	r5, r3
 8011ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	899b      	ldrh	r3, [r3, #12]
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7f9 feda 	bl	800bcb4 <lwip_htons>
 8011f00:	4603      	mov	r3, r0
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	f003 0303 	and.w	r3, r3, #3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d001      	beq.n	8011f10 <tcp_output+0x2a0>
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	e000      	b.n	8011f12 <tcp_output+0x2a2>
 8011f10:	2300      	movs	r3, #0
 8011f12:	442b      	add	r3, r5
 8011f14:	4423      	add	r3, r4
 8011f16:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	1ad3      	subs	r3, r2, r3
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	da02      	bge.n	8011f2a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	68ba      	ldr	r2, [r7, #8]
 8011f28:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f2c:	891b      	ldrh	r3, [r3, #8]
 8011f2e:	461c      	mov	r4, r3
 8011f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	899b      	ldrh	r3, [r3, #12]
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7f9 febb 	bl	800bcb4 <lwip_htons>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	f003 0303 	and.w	r3, r3, #3
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d001      	beq.n	8011f4e <tcp_output+0x2de>
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e000      	b.n	8011f50 <tcp_output+0x2e0>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	4423      	add	r3, r4
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d049      	beq.n	8011fea <tcp_output+0x37a>
      seg->next = NULL;
 8011f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f58:	2200      	movs	r2, #0
 8011f5a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d105      	bne.n	8011f70 <tcp_output+0x300>
        pcb->unacked = seg;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f68:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6c:	623b      	str	r3, [r7, #32]
 8011f6e:	e03f      	b.n	8011ff0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7f9 feb1 	bl	800bcde <lwip_htonl>
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	6a3b      	ldr	r3, [r7, #32]
 8011f80:	68db      	ldr	r3, [r3, #12]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7f9 feaa 	bl	800bcde <lwip_htonl>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	1ae3      	subs	r3, r4, r3
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	da24      	bge.n	8011fdc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	3370      	adds	r3, #112	@ 0x70
 8011f96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011f98:	e002      	b.n	8011fa0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d011      	beq.n	8011fcc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7f9 fe94 	bl	800bcde <lwip_htonl>
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7f9 fe8d 	bl	800bcde <lwip_htonl>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	dbe6      	blt.n	8011f9a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fd2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fd8:	601a      	str	r2, [r3, #0]
 8011fda:	e009      	b.n	8011ff0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011fdc:	6a3b      	ldr	r3, [r7, #32]
 8011fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fe0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011fe2:	6a3b      	ldr	r3, [r7, #32]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	623b      	str	r3, [r7, #32]
 8011fe8:	e002      	b.n	8011ff0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011fea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011fec:	f7fc fc45 	bl	800e87a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d012      	beq.n	8012022 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	f7f9 fe6b 	bl	800bcde <lwip_htonl>
 8012008:	4602      	mov	r2, r0
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012012:	8912      	ldrh	r2, [r2, #8]
 8012014:	4413      	add	r3, r2
  while (seg != NULL &&
 8012016:	69ba      	ldr	r2, [r7, #24]
 8012018:	429a      	cmp	r2, r3
 801201a:	f4bf aed9 	bcs.w	8011dd0 <tcp_output+0x160>
 801201e:	e000      	b.n	8012022 <tcp_output+0x3b2>
      break;
 8012020:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012026:	2b00      	cmp	r3, #0
 8012028:	d108      	bne.n	801203c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2200      	movs	r2, #0
 801202e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012032:	e004      	b.n	801203e <tcp_output+0x3ce>
    goto output_done;
 8012034:	bf00      	nop
 8012036:	e002      	b.n	801203e <tcp_output+0x3ce>
    goto output_done;
 8012038:	bf00      	nop
 801203a:	e000      	b.n	801203e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801203c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	8b5b      	ldrh	r3, [r3, #26]
 8012042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012046:	b29a      	uxth	r2, r3
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3728      	adds	r7, #40	@ 0x28
 8012052:	46bd      	mov	sp, r7
 8012054:	bdb0      	pop	{r4, r5, r7, pc}
 8012056:	bf00      	nop

08012058 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d106      	bne.n	8012074 <tcp_output_segment_busy+0x1c>
 8012066:	4b09      	ldr	r3, [pc, #36]	@ (801208c <tcp_output_segment_busy+0x34>)
 8012068:	f240 529a 	movw	r2, #1434	@ 0x59a
 801206c:	4908      	ldr	r1, [pc, #32]	@ (8012090 <tcp_output_segment_busy+0x38>)
 801206e:	4809      	ldr	r0, [pc, #36]	@ (8012094 <tcp_output_segment_busy+0x3c>)
 8012070:	f004 fdc4 	bl	8016bfc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	7b9b      	ldrb	r3, [r3, #14]
 801207a:	2b01      	cmp	r3, #1
 801207c:	d001      	beq.n	8012082 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801207e:	2301      	movs	r3, #1
 8012080:	e000      	b.n	8012084 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012082:	2300      	movs	r3, #0
}
 8012084:	4618      	mov	r0, r3
 8012086:	3708      	adds	r7, #8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	08019228 	.word	0x08019228
 8012090:	080197c4 	.word	0x080197c4
 8012094:	0801927c 	.word	0x0801927c

08012098 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012098:	b5b0      	push	{r4, r5, r7, lr}
 801209a:	b08c      	sub	sp, #48	@ 0x30
 801209c:	af04      	add	r7, sp, #16
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d106      	bne.n	80120b8 <tcp_output_segment+0x20>
 80120aa:	4b64      	ldr	r3, [pc, #400]	@ (801223c <tcp_output_segment+0x1a4>)
 80120ac:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80120b0:	4963      	ldr	r1, [pc, #396]	@ (8012240 <tcp_output_segment+0x1a8>)
 80120b2:	4864      	ldr	r0, [pc, #400]	@ (8012244 <tcp_output_segment+0x1ac>)
 80120b4:	f004 fda2 	bl	8016bfc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d106      	bne.n	80120cc <tcp_output_segment+0x34>
 80120be:	4b5f      	ldr	r3, [pc, #380]	@ (801223c <tcp_output_segment+0x1a4>)
 80120c0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80120c4:	4960      	ldr	r1, [pc, #384]	@ (8012248 <tcp_output_segment+0x1b0>)
 80120c6:	485f      	ldr	r0, [pc, #380]	@ (8012244 <tcp_output_segment+0x1ac>)
 80120c8:	f004 fd98 	bl	8016bfc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d106      	bne.n	80120e0 <tcp_output_segment+0x48>
 80120d2:	4b5a      	ldr	r3, [pc, #360]	@ (801223c <tcp_output_segment+0x1a4>)
 80120d4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80120d8:	495c      	ldr	r1, [pc, #368]	@ (801224c <tcp_output_segment+0x1b4>)
 80120da:	485a      	ldr	r0, [pc, #360]	@ (8012244 <tcp_output_segment+0x1ac>)
 80120dc:	f004 fd8e 	bl	8016bfc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f7ff ffb9 	bl	8012058 <tcp_output_segment_busy>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80120ec:	2300      	movs	r3, #0
 80120ee:	e0a1      	b.n	8012234 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	68dc      	ldr	r4, [r3, #12]
 80120f8:	4610      	mov	r0, r2
 80120fa:	f7f9 fdf0 	bl	800bcde <lwip_htonl>
 80120fe:	4603      	mov	r3, r0
 8012100:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	68dc      	ldr	r4, [r3, #12]
 801210a:	4610      	mov	r0, r2
 801210c:	f7f9 fdd2 	bl	800bcb4 <lwip_htons>
 8012110:	4603      	mov	r3, r0
 8012112:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012118:	68ba      	ldr	r2, [r7, #8]
 801211a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801211c:	441a      	add	r2, r3
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	3314      	adds	r3, #20
 8012128:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	7a9b      	ldrb	r3, [r3, #10]
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	d015      	beq.n	8012162 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	3304      	adds	r3, #4
 801213a:	461a      	mov	r2, r3
 801213c:	6879      	ldr	r1, [r7, #4]
 801213e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012142:	f7fc fe91 	bl	800ee68 <tcp_eff_send_mss_netif>
 8012146:	4603      	mov	r3, r0
 8012148:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801214a:	8b7b      	ldrh	r3, [r7, #26]
 801214c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012150:	4618      	mov	r0, r3
 8012152:	f7f9 fdc4 	bl	800bcde <lwip_htonl>
 8012156:	4602      	mov	r2, r0
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	3304      	adds	r3, #4
 8012160:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012168:	2b00      	cmp	r3, #0
 801216a:	da02      	bge.n	8012172 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	2200      	movs	r2, #0
 8012170:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012176:	2b00      	cmp	r3, #0
 8012178:	d10c      	bne.n	8012194 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801217a:	4b35      	ldr	r3, [pc, #212]	@ (8012250 <tcp_output_segment+0x1b8>)
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	4618      	mov	r0, r3
 801218a:	f7f9 fda8 	bl	800bcde <lwip_htonl>
 801218e:	4602      	mov	r2, r0
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	68da      	ldr	r2, [r3, #12]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	8959      	ldrh	r1, [r3, #10]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	8b3a      	ldrh	r2, [r7, #24]
 80121ae:	1a8a      	subs	r2, r1, r2
 80121b0:	b292      	uxth	r2, r2
 80121b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	8919      	ldrh	r1, [r3, #8]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	8b3a      	ldrh	r2, [r7, #24]
 80121c0:	1a8a      	subs	r2, r1, r2
 80121c2:	b292      	uxth	r2, r2
 80121c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	68fa      	ldr	r2, [r7, #12]
 80121cc:	68d2      	ldr	r2, [r2, #12]
 80121ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	2200      	movs	r2, #0
 80121d6:	741a      	strb	r2, [r3, #16]
 80121d8:	2200      	movs	r2, #0
 80121da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	68da      	ldr	r2, [r3, #12]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	7a9b      	ldrb	r3, [r3, #10]
 80121e4:	f003 0301 	and.w	r3, r3, #1
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <tcp_output_segment+0x158>
 80121ec:	2318      	movs	r3, #24
 80121ee:	e000      	b.n	80121f2 <tcp_output_segment+0x15a>
 80121f0:	2314      	movs	r3, #20
 80121f2:	4413      	add	r3, r2
 80121f4:	69fa      	ldr	r2, [r7, #28]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d006      	beq.n	8012208 <tcp_output_segment+0x170>
 80121fa:	4b10      	ldr	r3, [pc, #64]	@ (801223c <tcp_output_segment+0x1a4>)
 80121fc:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012200:	4914      	ldr	r1, [pc, #80]	@ (8012254 <tcp_output_segment+0x1bc>)
 8012202:	4810      	ldr	r0, [pc, #64]	@ (8012244 <tcp_output_segment+0x1ac>)
 8012204:	f004 fcfa 	bl	8016bfc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	6858      	ldr	r0, [r3, #4]
 801220c:	68b9      	ldr	r1, [r7, #8]
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	1d1c      	adds	r4, r3, #4
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	7add      	ldrb	r5, [r3, #11]
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	7a9b      	ldrb	r3, [r3, #10]
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	9202      	str	r2, [sp, #8]
 801221e:	2206      	movs	r2, #6
 8012220:	9201      	str	r2, [sp, #4]
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	462b      	mov	r3, r5
 8012226:	4622      	mov	r2, r4
 8012228:	f002 fd24 	bl	8014c74 <ip4_output_if>
 801222c:	4603      	mov	r3, r0
 801222e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012230:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3720      	adds	r7, #32
 8012238:	46bd      	mov	sp, r7
 801223a:	bdb0      	pop	{r4, r5, r7, pc}
 801223c:	08019228 	.word	0x08019228
 8012240:	080197ec 	.word	0x080197ec
 8012244:	0801927c 	.word	0x0801927c
 8012248:	0801980c 	.word	0x0801980c
 801224c:	0801982c 	.word	0x0801982c
 8012250:	20008c00 	.word	0x20008c00
 8012254:	08019850 	.word	0x08019850

08012258 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012258:	b5b0      	push	{r4, r5, r7, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d106      	bne.n	8012274 <tcp_rexmit_rto_prepare+0x1c>
 8012266:	4b31      	ldr	r3, [pc, #196]	@ (801232c <tcp_rexmit_rto_prepare+0xd4>)
 8012268:	f240 6263 	movw	r2, #1635	@ 0x663
 801226c:	4930      	ldr	r1, [pc, #192]	@ (8012330 <tcp_rexmit_rto_prepare+0xd8>)
 801226e:	4831      	ldr	r0, [pc, #196]	@ (8012334 <tcp_rexmit_rto_prepare+0xdc>)
 8012270:	f004 fcc4 	bl	8016bfc <iprintf>

  if (pcb->unacked == NULL) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012278:	2b00      	cmp	r3, #0
 801227a:	d102      	bne.n	8012282 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801227c:	f06f 0305 	mvn.w	r3, #5
 8012280:	e050      	b.n	8012324 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012286:	60fb      	str	r3, [r7, #12]
 8012288:	e00b      	b.n	80122a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	f7ff fee4 	bl	8012058 <tcp_output_segment_busy>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d002      	beq.n	801229c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012296:	f06f 0305 	mvn.w	r3, #5
 801229a:	e043      	b.n	8012324 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	60fb      	str	r3, [r7, #12]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d1ef      	bne.n	801228a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f7ff fed4 	bl	8012058 <tcp_output_segment_busy>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d002      	beq.n	80122bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80122b6:	f06f 0305 	mvn.w	r3, #5
 80122ba:	e033      	b.n	8012324 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	8b5b      	ldrh	r3, [r3, #26]
 80122d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80122da:	b29a      	uxth	r2, r3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7f9 fcf9 	bl	800bcde <lwip_htonl>
 80122ec:	4604      	mov	r4, r0
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	891b      	ldrh	r3, [r3, #8]
 80122f2:	461d      	mov	r5, r3
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	899b      	ldrh	r3, [r3, #12]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7f9 fcd9 	bl	800bcb4 <lwip_htons>
 8012302:	4603      	mov	r3, r0
 8012304:	b2db      	uxtb	r3, r3
 8012306:	f003 0303 	and.w	r3, r3, #3
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <tcp_rexmit_rto_prepare+0xba>
 801230e:	2301      	movs	r3, #1
 8012310:	e000      	b.n	8012314 <tcp_rexmit_rto_prepare+0xbc>
 8012312:	2300      	movs	r3, #0
 8012314:	442b      	add	r3, r5
 8012316:	18e2      	adds	r2, r4, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012322:	2300      	movs	r3, #0
}
 8012324:	4618      	mov	r0, r3
 8012326:	3710      	adds	r7, #16
 8012328:	46bd      	mov	sp, r7
 801232a:	bdb0      	pop	{r4, r5, r7, pc}
 801232c:	08019228 	.word	0x08019228
 8012330:	08019864 	.word	0x08019864
 8012334:	0801927c 	.word	0x0801927c

08012338 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d106      	bne.n	8012354 <tcp_rexmit_rto_commit+0x1c>
 8012346:	4b0d      	ldr	r3, [pc, #52]	@ (801237c <tcp_rexmit_rto_commit+0x44>)
 8012348:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801234c:	490c      	ldr	r1, [pc, #48]	@ (8012380 <tcp_rexmit_rto_commit+0x48>)
 801234e:	480d      	ldr	r0, [pc, #52]	@ (8012384 <tcp_rexmit_rto_commit+0x4c>)
 8012350:	f004 fc54 	bl	8016bfc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801235a:	2bff      	cmp	r3, #255	@ 0xff
 801235c:	d007      	beq.n	801236e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012364:	3301      	adds	r3, #1
 8012366:	b2da      	uxtb	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f7ff fc7e 	bl	8011c70 <tcp_output>
}
 8012374:	bf00      	nop
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	08019228 	.word	0x08019228
 8012380:	08019888 	.word	0x08019888
 8012384:	0801927c 	.word	0x0801927c

08012388 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d106      	bne.n	80123a4 <tcp_rexmit_rto+0x1c>
 8012396:	4b0a      	ldr	r3, [pc, #40]	@ (80123c0 <tcp_rexmit_rto+0x38>)
 8012398:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801239c:	4909      	ldr	r1, [pc, #36]	@ (80123c4 <tcp_rexmit_rto+0x3c>)
 801239e:	480a      	ldr	r0, [pc, #40]	@ (80123c8 <tcp_rexmit_rto+0x40>)
 80123a0:	f004 fc2c 	bl	8016bfc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7ff ff57 	bl	8012258 <tcp_rexmit_rto_prepare>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d102      	bne.n	80123b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7ff ffc1 	bl	8012338 <tcp_rexmit_rto_commit>
  }
}
 80123b6:	bf00      	nop
 80123b8:	3708      	adds	r7, #8
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	08019228 	.word	0x08019228
 80123c4:	080198ac 	.word	0x080198ac
 80123c8:	0801927c 	.word	0x0801927c

080123cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80123cc:	b590      	push	{r4, r7, lr}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d106      	bne.n	80123e8 <tcp_rexmit+0x1c>
 80123da:	4b2f      	ldr	r3, [pc, #188]	@ (8012498 <tcp_rexmit+0xcc>)
 80123dc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80123e0:	492e      	ldr	r1, [pc, #184]	@ (801249c <tcp_rexmit+0xd0>)
 80123e2:	482f      	ldr	r0, [pc, #188]	@ (80124a0 <tcp_rexmit+0xd4>)
 80123e4:	f004 fc0a 	bl	8016bfc <iprintf>

  if (pcb->unacked == NULL) {
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d102      	bne.n	80123f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80123f0:	f06f 0305 	mvn.w	r3, #5
 80123f4:	e04c      	b.n	8012490 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80123fc:	68b8      	ldr	r0, [r7, #8]
 80123fe:	f7ff fe2b 	bl	8012058 <tcp_output_segment_busy>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d002      	beq.n	801240e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012408:	f06f 0305 	mvn.w	r3, #5
 801240c:	e040      	b.n	8012490 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	336c      	adds	r3, #108	@ 0x6c
 801241a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801241c:	e002      	b.n	8012424 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d011      	beq.n	8012450 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	4618      	mov	r0, r3
 8012436:	f7f9 fc52 	bl	800bcde <lwip_htonl>
 801243a:	4604      	mov	r4, r0
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	4618      	mov	r0, r3
 8012444:	f7f9 fc4b 	bl	800bcde <lwip_htonl>
 8012448:	4603      	mov	r3, r0
 801244a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801244c:	2b00      	cmp	r3, #0
 801244e:	dbe6      	blt.n	801241e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	68ba      	ldr	r2, [r7, #8]
 801245c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d103      	bne.n	801246e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2200      	movs	r2, #0
 801246a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012474:	2bff      	cmp	r3, #255	@ 0xff
 8012476:	d007      	beq.n	8012488 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801247e:	3301      	adds	r3, #1
 8012480:	b2da      	uxtb	r2, r3
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3714      	adds	r7, #20
 8012494:	46bd      	mov	sp, r7
 8012496:	bd90      	pop	{r4, r7, pc}
 8012498:	08019228 	.word	0x08019228
 801249c:	080198c8 	.word	0x080198c8
 80124a0:	0801927c 	.word	0x0801927c

080124a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d106      	bne.n	80124c0 <tcp_rexmit_fast+0x1c>
 80124b2:	4b2a      	ldr	r3, [pc, #168]	@ (801255c <tcp_rexmit_fast+0xb8>)
 80124b4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80124b8:	4929      	ldr	r1, [pc, #164]	@ (8012560 <tcp_rexmit_fast+0xbc>)
 80124ba:	482a      	ldr	r0, [pc, #168]	@ (8012564 <tcp_rexmit_fast+0xc0>)
 80124bc:	f004 fb9e 	bl	8016bfc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d045      	beq.n	8012554 <tcp_rexmit_fast+0xb0>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	8b5b      	ldrh	r3, [r3, #26]
 80124cc:	f003 0304 	and.w	r3, r3, #4
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d13f      	bne.n	8012554 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f7ff ff79 	bl	80123cc <tcp_rexmit>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d139      	bne.n	8012554 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80124ec:	4293      	cmp	r3, r2
 80124ee:	bf28      	it	cs
 80124f0:	4613      	movcs	r3, r2
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	da00      	bge.n	80124fa <tcp_rexmit_fast+0x56>
 80124f8:	3301      	adds	r3, #1
 80124fa:	105b      	asrs	r3, r3, #1
 80124fc:	b29a      	uxth	r2, r3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801250a:	461a      	mov	r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012510:	005b      	lsls	r3, r3, #1
 8012512:	429a      	cmp	r2, r3
 8012514:	d206      	bcs.n	8012524 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801251a:	005b      	lsls	r3, r3, #1
 801251c:	b29a      	uxth	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801252e:	4619      	mov	r1, r3
 8012530:	0049      	lsls	r1, r1, #1
 8012532:	440b      	add	r3, r1
 8012534:	b29b      	uxth	r3, r3
 8012536:	4413      	add	r3, r2
 8012538:	b29a      	uxth	r2, r3
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	8b5b      	ldrh	r3, [r3, #26]
 8012544:	f043 0304 	orr.w	r3, r3, #4
 8012548:	b29a      	uxth	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2200      	movs	r2, #0
 8012552:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	08019228 	.word	0x08019228
 8012560:	080198e0 	.word	0x080198e0
 8012564:	0801927c 	.word	0x0801927c

08012568 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b086      	sub	sp, #24
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	607b      	str	r3, [r7, #4]
 8012572:	460b      	mov	r3, r1
 8012574:	817b      	strh	r3, [r7, #10]
 8012576:	4613      	mov	r3, r2
 8012578:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801257a:	897a      	ldrh	r2, [r7, #10]
 801257c:	893b      	ldrh	r3, [r7, #8]
 801257e:	4413      	add	r3, r2
 8012580:	b29b      	uxth	r3, r3
 8012582:	3314      	adds	r3, #20
 8012584:	b29b      	uxth	r3, r3
 8012586:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801258a:	4619      	mov	r1, r3
 801258c:	2022      	movs	r0, #34	@ 0x22
 801258e:	f7fa fc0b 	bl	800cda8 <pbuf_alloc>
 8012592:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d04d      	beq.n	8012636 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801259a:	897b      	ldrh	r3, [r7, #10]
 801259c:	3313      	adds	r3, #19
 801259e:	697a      	ldr	r2, [r7, #20]
 80125a0:	8952      	ldrh	r2, [r2, #10]
 80125a2:	4293      	cmp	r3, r2
 80125a4:	db06      	blt.n	80125b4 <tcp_output_alloc_header_common+0x4c>
 80125a6:	4b26      	ldr	r3, [pc, #152]	@ (8012640 <tcp_output_alloc_header_common+0xd8>)
 80125a8:	f240 7223 	movw	r2, #1827	@ 0x723
 80125ac:	4925      	ldr	r1, [pc, #148]	@ (8012644 <tcp_output_alloc_header_common+0xdc>)
 80125ae:	4826      	ldr	r0, [pc, #152]	@ (8012648 <tcp_output_alloc_header_common+0xe0>)
 80125b0:	f004 fb24 	bl	8016bfc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80125ba:	8c3b      	ldrh	r3, [r7, #32]
 80125bc:	4618      	mov	r0, r3
 80125be:	f7f9 fb79 	bl	800bcb4 <lwip_htons>
 80125c2:	4603      	mov	r3, r0
 80125c4:	461a      	mov	r2, r3
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80125ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7f9 fb71 	bl	800bcb4 <lwip_htons>
 80125d2:	4603      	mov	r3, r0
 80125d4:	461a      	mov	r2, r3
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	f7f9 fb7c 	bl	800bcde <lwip_htonl>
 80125e6:	4602      	mov	r2, r0
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80125ec:	897b      	ldrh	r3, [r7, #10]
 80125ee:	089b      	lsrs	r3, r3, #2
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	3305      	adds	r3, #5
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	031b      	lsls	r3, r3, #12
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80125fe:	b29b      	uxth	r3, r3
 8012600:	4313      	orrs	r3, r2
 8012602:	b29b      	uxth	r3, r3
 8012604:	4618      	mov	r0, r3
 8012606:	f7f9 fb55 	bl	800bcb4 <lwip_htons>
 801260a:	4603      	mov	r3, r0
 801260c:	461a      	mov	r2, r3
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012612:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012614:	4618      	mov	r0, r3
 8012616:	f7f9 fb4d 	bl	800bcb4 <lwip_htons>
 801261a:	4603      	mov	r3, r0
 801261c:	461a      	mov	r2, r3
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	2200      	movs	r2, #0
 8012626:	741a      	strb	r2, [r3, #16]
 8012628:	2200      	movs	r2, #0
 801262a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	2200      	movs	r2, #0
 8012630:	749a      	strb	r2, [r3, #18]
 8012632:	2200      	movs	r2, #0
 8012634:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012636:	697b      	ldr	r3, [r7, #20]
}
 8012638:	4618      	mov	r0, r3
 801263a:	3718      	adds	r7, #24
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}
 8012640:	08019228 	.word	0x08019228
 8012644:	08019900 	.word	0x08019900
 8012648:	0801927c 	.word	0x0801927c

0801264c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801264c:	b5b0      	push	{r4, r5, r7, lr}
 801264e:	b08a      	sub	sp, #40	@ 0x28
 8012650:	af04      	add	r7, sp, #16
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	607b      	str	r3, [r7, #4]
 8012656:	460b      	mov	r3, r1
 8012658:	817b      	strh	r3, [r7, #10]
 801265a:	4613      	mov	r3, r2
 801265c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d106      	bne.n	8012672 <tcp_output_alloc_header+0x26>
 8012664:	4b15      	ldr	r3, [pc, #84]	@ (80126bc <tcp_output_alloc_header+0x70>)
 8012666:	f240 7242 	movw	r2, #1858	@ 0x742
 801266a:	4915      	ldr	r1, [pc, #84]	@ (80126c0 <tcp_output_alloc_header+0x74>)
 801266c:	4815      	ldr	r0, [pc, #84]	@ (80126c4 <tcp_output_alloc_header+0x78>)
 801266e:	f004 fac5 	bl	8016bfc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	8adb      	ldrh	r3, [r3, #22]
 801267a:	68fa      	ldr	r2, [r7, #12]
 801267c:	8b12      	ldrh	r2, [r2, #24]
 801267e:	68f9      	ldr	r1, [r7, #12]
 8012680:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012682:	893d      	ldrh	r5, [r7, #8]
 8012684:	897c      	ldrh	r4, [r7, #10]
 8012686:	9103      	str	r1, [sp, #12]
 8012688:	2110      	movs	r1, #16
 801268a:	9102      	str	r1, [sp, #8]
 801268c:	9201      	str	r2, [sp, #4]
 801268e:	9300      	str	r3, [sp, #0]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	462a      	mov	r2, r5
 8012694:	4621      	mov	r1, r4
 8012696:	f7ff ff67 	bl	8012568 <tcp_output_alloc_header_common>
 801269a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d006      	beq.n	80126b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126a6:	68fa      	ldr	r2, [r7, #12]
 80126a8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80126aa:	441a      	add	r2, r3
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80126b0:	697b      	ldr	r3, [r7, #20]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3718      	adds	r7, #24
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bdb0      	pop	{r4, r5, r7, pc}
 80126ba:	bf00      	nop
 80126bc:	08019228 	.word	0x08019228
 80126c0:	08019930 	.word	0x08019930
 80126c4:	0801927c 	.word	0x0801927c

080126c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b088      	sub	sp, #32
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	4611      	mov	r1, r2
 80126d4:	461a      	mov	r2, r3
 80126d6:	460b      	mov	r3, r1
 80126d8:	71fb      	strb	r3, [r7, #7]
 80126da:	4613      	mov	r3, r2
 80126dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d106      	bne.n	80126f6 <tcp_output_fill_options+0x2e>
 80126e8:	4b12      	ldr	r3, [pc, #72]	@ (8012734 <tcp_output_fill_options+0x6c>)
 80126ea:	f240 7256 	movw	r2, #1878	@ 0x756
 80126ee:	4912      	ldr	r1, [pc, #72]	@ (8012738 <tcp_output_fill_options+0x70>)
 80126f0:	4812      	ldr	r0, [pc, #72]	@ (801273c <tcp_output_fill_options+0x74>)
 80126f2:	f004 fa83 	bl	8016bfc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80126fc:	69bb      	ldr	r3, [r7, #24]
 80126fe:	3314      	adds	r3, #20
 8012700:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012702:	8bfb      	ldrh	r3, [r7, #30]
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	461a      	mov	r2, r3
 8012708:	79fb      	ldrb	r3, [r7, #7]
 801270a:	009b      	lsls	r3, r3, #2
 801270c:	f003 0304 	and.w	r3, r3, #4
 8012710:	4413      	add	r3, r2
 8012712:	3314      	adds	r3, #20
 8012714:	69ba      	ldr	r2, [r7, #24]
 8012716:	4413      	add	r3, r2
 8012718:	697a      	ldr	r2, [r7, #20]
 801271a:	429a      	cmp	r2, r3
 801271c:	d006      	beq.n	801272c <tcp_output_fill_options+0x64>
 801271e:	4b05      	ldr	r3, [pc, #20]	@ (8012734 <tcp_output_fill_options+0x6c>)
 8012720:	f240 7275 	movw	r2, #1909	@ 0x775
 8012724:	4906      	ldr	r1, [pc, #24]	@ (8012740 <tcp_output_fill_options+0x78>)
 8012726:	4805      	ldr	r0, [pc, #20]	@ (801273c <tcp_output_fill_options+0x74>)
 8012728:	f004 fa68 	bl	8016bfc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801272c:	bf00      	nop
 801272e:	3720      	adds	r7, #32
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}
 8012734:	08019228 	.word	0x08019228
 8012738:	08019958 	.word	0x08019958
 801273c:	0801927c 	.word	0x0801927c
 8012740:	08019850 	.word	0x08019850

08012744 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b08a      	sub	sp, #40	@ 0x28
 8012748:	af04      	add	r7, sp, #16
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	60b9      	str	r1, [r7, #8]
 801274e:	607a      	str	r2, [r7, #4]
 8012750:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d106      	bne.n	8012766 <tcp_output_control_segment+0x22>
 8012758:	4b1c      	ldr	r3, [pc, #112]	@ (80127cc <tcp_output_control_segment+0x88>)
 801275a:	f240 7287 	movw	r2, #1927	@ 0x787
 801275e:	491c      	ldr	r1, [pc, #112]	@ (80127d0 <tcp_output_control_segment+0x8c>)
 8012760:	481c      	ldr	r0, [pc, #112]	@ (80127d4 <tcp_output_control_segment+0x90>)
 8012762:	f004 fa4b 	bl	8016bfc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012766:	683a      	ldr	r2, [r7, #0]
 8012768:	6879      	ldr	r1, [r7, #4]
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f7fe ff42 	bl	80115f4 <tcp_route>
 8012770:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d102      	bne.n	801277e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012778:	23fc      	movs	r3, #252	@ 0xfc
 801277a:	75fb      	strb	r3, [r7, #23]
 801277c:	e01c      	b.n	80127b8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d006      	beq.n	8012792 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	7adb      	ldrb	r3, [r3, #11]
 8012788:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	7a9b      	ldrb	r3, [r3, #10]
 801278e:	757b      	strb	r3, [r7, #21]
 8012790:	e003      	b.n	801279a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012792:	23ff      	movs	r3, #255	@ 0xff
 8012794:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012796:	2300      	movs	r3, #0
 8012798:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801279a:	7dba      	ldrb	r2, [r7, #22]
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	9302      	str	r3, [sp, #8]
 80127a0:	2306      	movs	r3, #6
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	7d7b      	ldrb	r3, [r7, #21]
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	4613      	mov	r3, r2
 80127aa:	683a      	ldr	r2, [r7, #0]
 80127ac:	6879      	ldr	r1, [r7, #4]
 80127ae:	68b8      	ldr	r0, [r7, #8]
 80127b0:	f002 fa60 	bl	8014c74 <ip4_output_if>
 80127b4:	4603      	mov	r3, r0
 80127b6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80127b8:	68b8      	ldr	r0, [r7, #8]
 80127ba:	f7fa fdd9 	bl	800d370 <pbuf_free>
  return err;
 80127be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3718      	adds	r7, #24
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	08019228 	.word	0x08019228
 80127d0:	08019980 	.word	0x08019980
 80127d4:	0801927c 	.word	0x0801927c

080127d8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80127d8:	b590      	push	{r4, r7, lr}
 80127da:	b08b      	sub	sp, #44	@ 0x2c
 80127dc:	af04      	add	r7, sp, #16
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d106      	bne.n	80127fa <tcp_rst+0x22>
 80127ec:	4b1f      	ldr	r3, [pc, #124]	@ (801286c <tcp_rst+0x94>)
 80127ee:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80127f2:	491f      	ldr	r1, [pc, #124]	@ (8012870 <tcp_rst+0x98>)
 80127f4:	481f      	ldr	r0, [pc, #124]	@ (8012874 <tcp_rst+0x9c>)
 80127f6:	f004 fa01 	bl	8016bfc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80127fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d106      	bne.n	801280e <tcp_rst+0x36>
 8012800:	4b1a      	ldr	r3, [pc, #104]	@ (801286c <tcp_rst+0x94>)
 8012802:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012806:	491c      	ldr	r1, [pc, #112]	@ (8012878 <tcp_rst+0xa0>)
 8012808:	481a      	ldr	r0, [pc, #104]	@ (8012874 <tcp_rst+0x9c>)
 801280a:	f004 f9f7 	bl	8016bfc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801280e:	2300      	movs	r3, #0
 8012810:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012812:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012816:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012818:	7dfb      	ldrb	r3, [r7, #23]
 801281a:	b29c      	uxth	r4, r3
 801281c:	68b8      	ldr	r0, [r7, #8]
 801281e:	f7f9 fa5e 	bl	800bcde <lwip_htonl>
 8012822:	4602      	mov	r2, r0
 8012824:	8abb      	ldrh	r3, [r7, #20]
 8012826:	9303      	str	r3, [sp, #12]
 8012828:	2314      	movs	r3, #20
 801282a:	9302      	str	r3, [sp, #8]
 801282c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801282e:	9301      	str	r3, [sp, #4]
 8012830:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012832:	9300      	str	r3, [sp, #0]
 8012834:	4613      	mov	r3, r2
 8012836:	2200      	movs	r2, #0
 8012838:	4621      	mov	r1, r4
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7ff fe94 	bl	8012568 <tcp_output_alloc_header_common>
 8012840:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d00c      	beq.n	8012862 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012848:	7dfb      	ldrb	r3, [r7, #23]
 801284a:	2200      	movs	r2, #0
 801284c:	6939      	ldr	r1, [r7, #16]
 801284e:	68f8      	ldr	r0, [r7, #12]
 8012850:	f7ff ff3a 	bl	80126c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012856:	683a      	ldr	r2, [r7, #0]
 8012858:	6939      	ldr	r1, [r7, #16]
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	f7ff ff72 	bl	8012744 <tcp_output_control_segment>
 8012860:	e000      	b.n	8012864 <tcp_rst+0x8c>
    return;
 8012862:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012864:	371c      	adds	r7, #28
 8012866:	46bd      	mov	sp, r7
 8012868:	bd90      	pop	{r4, r7, pc}
 801286a:	bf00      	nop
 801286c:	08019228 	.word	0x08019228
 8012870:	080199ac 	.word	0x080199ac
 8012874:	0801927c 	.word	0x0801927c
 8012878:	080199c8 	.word	0x080199c8

0801287c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801287c:	b590      	push	{r4, r7, lr}
 801287e:	b087      	sub	sp, #28
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012884:	2300      	movs	r3, #0
 8012886:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012888:	2300      	movs	r3, #0
 801288a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <tcp_send_empty_ack+0x24>
 8012892:	4b28      	ldr	r3, [pc, #160]	@ (8012934 <tcp_send_empty_ack+0xb8>)
 8012894:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012898:	4927      	ldr	r1, [pc, #156]	@ (8012938 <tcp_send_empty_ack+0xbc>)
 801289a:	4828      	ldr	r0, [pc, #160]	@ (801293c <tcp_send_empty_ack+0xc0>)
 801289c:	f004 f9ae 	bl	8016bfc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128a0:	7dfb      	ldrb	r3, [r7, #23]
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	f003 0304 	and.w	r3, r3, #4
 80128aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80128ac:	7d7b      	ldrb	r3, [r7, #21]
 80128ae:	b29c      	uxth	r4, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7f9 fa12 	bl	800bcde <lwip_htonl>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2200      	movs	r2, #0
 80128be:	4621      	mov	r1, r4
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7ff fec3 	bl	801264c <tcp_output_alloc_header>
 80128c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d109      	bne.n	80128e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	8b5b      	ldrh	r3, [r3, #26]
 80128d2:	f043 0303 	orr.w	r3, r3, #3
 80128d6:	b29a      	uxth	r2, r3
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80128dc:	f06f 0301 	mvn.w	r3, #1
 80128e0:	e023      	b.n	801292a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80128e2:	7dbb      	ldrb	r3, [r7, #22]
 80128e4:	7dfa      	ldrb	r2, [r7, #23]
 80128e6:	6939      	ldr	r1, [r7, #16]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f7ff feed 	bl	80126c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	3304      	adds	r3, #4
 80128f4:	6939      	ldr	r1, [r7, #16]
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7ff ff24 	bl	8012744 <tcp_output_control_segment>
 80128fc:	4603      	mov	r3, r0
 80128fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d007      	beq.n	8012918 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	8b5b      	ldrh	r3, [r3, #26]
 801290c:	f043 0303 	orr.w	r3, r3, #3
 8012910:	b29a      	uxth	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	835a      	strh	r2, [r3, #26]
 8012916:	e006      	b.n	8012926 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	8b5b      	ldrh	r3, [r3, #26]
 801291c:	f023 0303 	bic.w	r3, r3, #3
 8012920:	b29a      	uxth	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012926:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801292a:	4618      	mov	r0, r3
 801292c:	371c      	adds	r7, #28
 801292e:	46bd      	mov	sp, r7
 8012930:	bd90      	pop	{r4, r7, pc}
 8012932:	bf00      	nop
 8012934:	08019228 	.word	0x08019228
 8012938:	080199e4 	.word	0x080199e4
 801293c:	0801927c 	.word	0x0801927c

08012940 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012940:	b590      	push	{r4, r7, lr}
 8012942:	b087      	sub	sp, #28
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012948:	2300      	movs	r3, #0
 801294a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d106      	bne.n	8012960 <tcp_keepalive+0x20>
 8012952:	4b18      	ldr	r3, [pc, #96]	@ (80129b4 <tcp_keepalive+0x74>)
 8012954:	f640 0224 	movw	r2, #2084	@ 0x824
 8012958:	4917      	ldr	r1, [pc, #92]	@ (80129b8 <tcp_keepalive+0x78>)
 801295a:	4818      	ldr	r0, [pc, #96]	@ (80129bc <tcp_keepalive+0x7c>)
 801295c:	f004 f94e 	bl	8016bfc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012960:	7dfb      	ldrb	r3, [r7, #23]
 8012962:	b29c      	uxth	r4, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012968:	3b01      	subs	r3, #1
 801296a:	4618      	mov	r0, r3
 801296c:	f7f9 f9b7 	bl	800bcde <lwip_htonl>
 8012970:	4603      	mov	r3, r0
 8012972:	2200      	movs	r2, #0
 8012974:	4621      	mov	r1, r4
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff fe68 	bl	801264c <tcp_output_alloc_header>
 801297c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d102      	bne.n	801298a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012984:	f04f 33ff 	mov.w	r3, #4294967295
 8012988:	e010      	b.n	80129ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801298a:	7dfb      	ldrb	r3, [r7, #23]
 801298c:	2200      	movs	r2, #0
 801298e:	6939      	ldr	r1, [r7, #16]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f7ff fe99 	bl	80126c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012996:	687a      	ldr	r2, [r7, #4]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	3304      	adds	r3, #4
 801299c:	6939      	ldr	r1, [r7, #16]
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f7ff fed0 	bl	8012744 <tcp_output_control_segment>
 80129a4:	4603      	mov	r3, r0
 80129a6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80129a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	371c      	adds	r7, #28
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd90      	pop	{r4, r7, pc}
 80129b4:	08019228 	.word	0x08019228
 80129b8:	08019a04 	.word	0x08019a04
 80129bc:	0801927c 	.word	0x0801927c

080129c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80129c0:	b590      	push	{r4, r7, lr}
 80129c2:	b08b      	sub	sp, #44	@ 0x2c
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129c8:	2300      	movs	r3, #0
 80129ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d106      	bne.n	80129e2 <tcp_zero_window_probe+0x22>
 80129d4:	4b4c      	ldr	r3, [pc, #304]	@ (8012b08 <tcp_zero_window_probe+0x148>)
 80129d6:	f640 024f 	movw	r2, #2127	@ 0x84f
 80129da:	494c      	ldr	r1, [pc, #304]	@ (8012b0c <tcp_zero_window_probe+0x14c>)
 80129dc:	484c      	ldr	r0, [pc, #304]	@ (8012b10 <tcp_zero_window_probe+0x150>)
 80129de:	f004 f90d 	bl	8016bfc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129e6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80129e8:	6a3b      	ldr	r3, [r7, #32]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d101      	bne.n	80129f2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80129ee:	2300      	movs	r3, #0
 80129f0:	e086      	b.n	8012b00 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80129f8:	2bff      	cmp	r3, #255	@ 0xff
 80129fa:	d007      	beq.n	8012a0c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012a02:	3301      	adds	r3, #1
 8012a04:	b2da      	uxtb	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012a0c:	6a3b      	ldr	r3, [r7, #32]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	899b      	ldrh	r3, [r3, #12]
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f9 f94d 	bl	800bcb4 <lwip_htons>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	f003 0301 	and.w	r3, r3, #1
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d005      	beq.n	8012a32 <tcp_zero_window_probe+0x72>
 8012a26:	6a3b      	ldr	r3, [r7, #32]
 8012a28:	891b      	ldrh	r3, [r3, #8]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d101      	bne.n	8012a32 <tcp_zero_window_probe+0x72>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e000      	b.n	8012a34 <tcp_zero_window_probe+0x74>
 8012a32:	2300      	movs	r3, #0
 8012a34:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012a36:	7ffb      	ldrb	r3, [r7, #31]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	bf0c      	ite	eq
 8012a3c:	2301      	moveq	r3, #1
 8012a3e:	2300      	movne	r3, #0
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a48:	b299      	uxth	r1, r3
 8012a4a:	6a3b      	ldr	r3, [r7, #32]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	8bba      	ldrh	r2, [r7, #28]
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f7ff fdfa 	bl	801264c <tcp_output_alloc_header>
 8012a58:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d102      	bne.n	8012a66 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012a60:	f04f 33ff 	mov.w	r3, #4294967295
 8012a64:	e04c      	b.n	8012b00 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012a6c:	7ffb      	ldrb	r3, [r7, #31]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d011      	beq.n	8012a96 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	899b      	ldrh	r3, [r3, #12]
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	b21b      	sxth	r3, r3
 8012a7a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012a7e:	b21c      	sxth	r4, r3
 8012a80:	2011      	movs	r0, #17
 8012a82:	f7f9 f917 	bl	800bcb4 <lwip_htons>
 8012a86:	4603      	mov	r3, r0
 8012a88:	b21b      	sxth	r3, r3
 8012a8a:	4323      	orrs	r3, r4
 8012a8c:	b21b      	sxth	r3, r3
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	819a      	strh	r2, [r3, #12]
 8012a94:	e010      	b.n	8012ab8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012a96:	69bb      	ldr	r3, [r7, #24]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	3314      	adds	r3, #20
 8012a9c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012a9e:	6a3b      	ldr	r3, [r7, #32]
 8012aa0:	6858      	ldr	r0, [r3, #4]
 8012aa2:	6a3b      	ldr	r3, [r7, #32]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	891a      	ldrh	r2, [r3, #8]
 8012aa8:	6a3b      	ldr	r3, [r7, #32]
 8012aaa:	891b      	ldrh	r3, [r3, #8]
 8012aac:	1ad3      	subs	r3, r2, r3
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	6939      	ldr	r1, [r7, #16]
 8012ab4:	f7fa fe56 	bl	800d764 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012ab8:	6a3b      	ldr	r3, [r7, #32]
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7f9 f90d 	bl	800bcde <lwip_htonl>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	da02      	bge.n	8012adc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	69b9      	ldr	r1, [r7, #24]
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7ff fdef 	bl	80126c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012aea:	687a      	ldr	r2, [r7, #4]
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	3304      	adds	r3, #4
 8012af0:	69b9      	ldr	r1, [r7, #24]
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f7ff fe26 	bl	8012744 <tcp_output_control_segment>
 8012af8:	4603      	mov	r3, r0
 8012afa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012afc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	372c      	adds	r7, #44	@ 0x2c
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd90      	pop	{r4, r7, pc}
 8012b08:	08019228 	.word	0x08019228
 8012b0c:	08019a20 	.word	0x08019a20
 8012b10:	0801927c 	.word	0x0801927c

08012b14 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b082      	sub	sp, #8
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012b1c:	f7fa ff10 	bl	800d940 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012b20:	4b0a      	ldr	r3, [pc, #40]	@ (8012b4c <tcpip_tcp_timer+0x38>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d103      	bne.n	8012b30 <tcpip_tcp_timer+0x1c>
 8012b28:	4b09      	ldr	r3, [pc, #36]	@ (8012b50 <tcpip_tcp_timer+0x3c>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d005      	beq.n	8012b3c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b30:	2200      	movs	r2, #0
 8012b32:	4908      	ldr	r1, [pc, #32]	@ (8012b54 <tcpip_tcp_timer+0x40>)
 8012b34:	20fa      	movs	r0, #250	@ 0xfa
 8012b36:	f000 f8f3 	bl	8012d20 <sys_timeout>
 8012b3a:	e003      	b.n	8012b44 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012b3c:	4b06      	ldr	r3, [pc, #24]	@ (8012b58 <tcpip_tcp_timer+0x44>)
 8012b3e:	2200      	movs	r2, #0
 8012b40:	601a      	str	r2, [r3, #0]
  }
}
 8012b42:	bf00      	nop
 8012b44:	bf00      	nop
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	20008c0c 	.word	0x20008c0c
 8012b50:	20008c10 	.word	0x20008c10
 8012b54:	08012b15 	.word	0x08012b15
 8012b58:	20008c58 	.word	0x20008c58

08012b5c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012b60:	4b0a      	ldr	r3, [pc, #40]	@ (8012b8c <tcp_timer_needed+0x30>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10f      	bne.n	8012b88 <tcp_timer_needed+0x2c>
 8012b68:	4b09      	ldr	r3, [pc, #36]	@ (8012b90 <tcp_timer_needed+0x34>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d103      	bne.n	8012b78 <tcp_timer_needed+0x1c>
 8012b70:	4b08      	ldr	r3, [pc, #32]	@ (8012b94 <tcp_timer_needed+0x38>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d007      	beq.n	8012b88 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012b78:	4b04      	ldr	r3, [pc, #16]	@ (8012b8c <tcp_timer_needed+0x30>)
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b7e:	2200      	movs	r2, #0
 8012b80:	4905      	ldr	r1, [pc, #20]	@ (8012b98 <tcp_timer_needed+0x3c>)
 8012b82:	20fa      	movs	r0, #250	@ 0xfa
 8012b84:	f000 f8cc 	bl	8012d20 <sys_timeout>
  }
}
 8012b88:	bf00      	nop
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	20008c58 	.word	0x20008c58
 8012b90:	20008c0c 	.word	0x20008c0c
 8012b94:	20008c10 	.word	0x20008c10
 8012b98:	08012b15 	.word	0x08012b15

08012b9c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b086      	sub	sp, #24
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012ba8:	2006      	movs	r0, #6
 8012baa:	f7f9 fcfb 	bl	800c5a4 <memp_malloc>
 8012bae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d109      	bne.n	8012bca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d151      	bne.n	8012c60 <sys_timeout_abs+0xc4>
 8012bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8012c68 <sys_timeout_abs+0xcc>)
 8012bbe:	22be      	movs	r2, #190	@ 0xbe
 8012bc0:	492a      	ldr	r1, [pc, #168]	@ (8012c6c <sys_timeout_abs+0xd0>)
 8012bc2:	482b      	ldr	r0, [pc, #172]	@ (8012c70 <sys_timeout_abs+0xd4>)
 8012bc4:	f004 f81a 	bl	8016bfc <iprintf>
    return;
 8012bc8:	e04a      	b.n	8012c60 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	68ba      	ldr	r2, [r7, #8]
 8012bd4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	68fa      	ldr	r2, [r7, #12]
 8012be0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012be2:	4b24      	ldr	r3, [pc, #144]	@ (8012c74 <sys_timeout_abs+0xd8>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d103      	bne.n	8012bf2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012bea:	4a22      	ldr	r2, [pc, #136]	@ (8012c74 <sys_timeout_abs+0xd8>)
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	6013      	str	r3, [r2, #0]
    return;
 8012bf0:	e037      	b.n	8012c62 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	685a      	ldr	r2, [r3, #4]
 8012bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8012c74 <sys_timeout_abs+0xd8>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	1ad3      	subs	r3, r2, r3
 8012bfe:	0fdb      	lsrs	r3, r3, #31
 8012c00:	f003 0301 	and.w	r3, r3, #1
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d007      	beq.n	8012c1a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8012c74 <sys_timeout_abs+0xd8>)
 8012c0c:	681a      	ldr	r2, [r3, #0]
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012c12:	4a18      	ldr	r2, [pc, #96]	@ (8012c74 <sys_timeout_abs+0xd8>)
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	6013      	str	r3, [r2, #0]
 8012c18:	e023      	b.n	8012c62 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c1a:	4b16      	ldr	r3, [pc, #88]	@ (8012c74 <sys_timeout_abs+0xd8>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	617b      	str	r3, [r7, #20]
 8012c20:	e01a      	b.n	8012c58 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00b      	beq.n	8012c42 <sys_timeout_abs+0xa6>
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	685a      	ldr	r2, [r3, #4]
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	1ad3      	subs	r3, r2, r3
 8012c36:	0fdb      	lsrs	r3, r3, #31
 8012c38:	f003 0301 	and.w	r3, r3, #1
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d007      	beq.n	8012c52 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	693a      	ldr	r2, [r7, #16]
 8012c4e:	601a      	str	r2, [r3, #0]
        break;
 8012c50:	e007      	b.n	8012c62 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	617b      	str	r3, [r7, #20]
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d1e1      	bne.n	8012c22 <sys_timeout_abs+0x86>
 8012c5e:	e000      	b.n	8012c62 <sys_timeout_abs+0xc6>
    return;
 8012c60:	bf00      	nop
      }
    }
  }
}
 8012c62:	3718      	adds	r7, #24
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	08019a44 	.word	0x08019a44
 8012c6c:	08019a78 	.word	0x08019a78
 8012c70:	08019ab8 	.word	0x08019ab8
 8012c74:	20008c50 	.word	0x20008c50

08012c78 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b086      	sub	sp, #24
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	4798      	blx	r3

  now = sys_now();
 8012c8a:	f7f8 fdf7 	bl	800b87c <sys_now>
 8012c8e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	4b0f      	ldr	r3, [pc, #60]	@ (8012cd4 <lwip_cyclic_timer+0x5c>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4413      	add	r3, r2
 8012c9a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	1ad3      	subs	r3, r2, r3
 8012ca2:	0fdb      	lsrs	r3, r3, #31
 8012ca4:	f003 0301 	and.w	r3, r3, #1
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d009      	beq.n	8012cc2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	4907      	ldr	r1, [pc, #28]	@ (8012cd8 <lwip_cyclic_timer+0x60>)
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ff ff6e 	bl	8012b9c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012cc0:	e004      	b.n	8012ccc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	4904      	ldr	r1, [pc, #16]	@ (8012cd8 <lwip_cyclic_timer+0x60>)
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f7ff ff68 	bl	8012b9c <sys_timeout_abs>
}
 8012ccc:	bf00      	nop
 8012cce:	3718      	adds	r7, #24
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	20008c54 	.word	0x20008c54
 8012cd8:	08012c79 	.word	0x08012c79

08012cdc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	607b      	str	r3, [r7, #4]
 8012ce6:	e00e      	b.n	8012d06 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8012d18 <sys_timeouts_init+0x3c>)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	00db      	lsls	r3, r3, #3
 8012cf4:	4a08      	ldr	r2, [pc, #32]	@ (8012d18 <sys_timeouts_init+0x3c>)
 8012cf6:	4413      	add	r3, r2
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	4908      	ldr	r1, [pc, #32]	@ (8012d1c <sys_timeouts_init+0x40>)
 8012cfc:	f000 f810 	bl	8012d20 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	3301      	adds	r3, #1
 8012d04:	607b      	str	r3, [r7, #4]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2b02      	cmp	r3, #2
 8012d0a:	d9ed      	bls.n	8012ce8 <sys_timeouts_init+0xc>
  }
}
 8012d0c:	bf00      	nop
 8012d0e:	bf00      	nop
 8012d10:	3708      	adds	r7, #8
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	0801ad98 	.word	0x0801ad98
 8012d1c:	08012c79 	.word	0x08012c79

08012d20 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	60b9      	str	r1, [r7, #8]
 8012d2a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d32:	d306      	bcc.n	8012d42 <sys_timeout+0x22>
 8012d34:	4b0a      	ldr	r3, [pc, #40]	@ (8012d60 <sys_timeout+0x40>)
 8012d36:	f240 1229 	movw	r2, #297	@ 0x129
 8012d3a:	490a      	ldr	r1, [pc, #40]	@ (8012d64 <sys_timeout+0x44>)
 8012d3c:	480a      	ldr	r0, [pc, #40]	@ (8012d68 <sys_timeout+0x48>)
 8012d3e:	f003 ff5d 	bl	8016bfc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012d42:	f7f8 fd9b 	bl	800b87c <sys_now>
 8012d46:	4602      	mov	r2, r0
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	68b9      	ldr	r1, [r7, #8]
 8012d52:	6978      	ldr	r0, [r7, #20]
 8012d54:	f7ff ff22 	bl	8012b9c <sys_timeout_abs>
#endif
}
 8012d58:	bf00      	nop
 8012d5a:	3718      	adds	r7, #24
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	08019a44 	.word	0x08019a44
 8012d64:	08019ae0 	.word	0x08019ae0
 8012d68:	08019ab8 	.word	0x08019ab8

08012d6c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012d72:	f7f8 fd83 	bl	800b87c <sys_now>
 8012d76:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012d78:	4b1a      	ldr	r3, [pc, #104]	@ (8012de4 <sys_check_timeouts+0x78>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <sys_check_timeouts+0x1a>
 8012d82:	f7f9 ffbb 	bl	800ccfc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012d86:	4b18      	ldr	r3, [pc, #96]	@ (8012de8 <sys_check_timeouts+0x7c>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d022      	beq.n	8012dd8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	68fa      	ldr	r2, [r7, #12]
 8012d98:	1ad3      	subs	r3, r2, r3
 8012d9a:	0fdb      	lsrs	r3, r3, #31
 8012d9c:	f003 0301 	and.w	r3, r3, #1
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d11a      	bne.n	8012ddc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	4a0f      	ldr	r2, [pc, #60]	@ (8012de8 <sys_check_timeouts+0x7c>)
 8012dac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8012dec <sys_check_timeouts+0x80>)
 8012dc0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012dc2:	68b9      	ldr	r1, [r7, #8]
 8012dc4:	2006      	movs	r0, #6
 8012dc6:	f7f9 fc5d 	bl	800c684 <memp_free>
    if (handler != NULL) {
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d0d3      	beq.n	8012d78 <sys_check_timeouts+0xc>
      handler(arg);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6838      	ldr	r0, [r7, #0]
 8012dd4:	4798      	blx	r3
  do {
 8012dd6:	e7cf      	b.n	8012d78 <sys_check_timeouts+0xc>
      return;
 8012dd8:	bf00      	nop
 8012dda:	e000      	b.n	8012dde <sys_check_timeouts+0x72>
      return;
 8012ddc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012dde:	3710      	adds	r7, #16
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	20008bfd 	.word	0x20008bfd
 8012de8:	20008c50 	.word	0x20008c50
 8012dec:	20008c54 	.word	0x20008c54

08012df0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012df4:	f003 fe02 	bl	80169fc <rand>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	4b01      	ldr	r3, [pc, #4]	@ (8012e10 <udp_init+0x20>)
 8012e0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012e0c:	bf00      	nop
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	20000028 	.word	0x20000028

08012e14 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012e14:	b480      	push	{r7}
 8012e16:	b083      	sub	sp, #12
 8012e18:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012e1e:	4b17      	ldr	r3, [pc, #92]	@ (8012e7c <udp_new_port+0x68>)
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	1c5a      	adds	r2, r3, #1
 8012e24:	b291      	uxth	r1, r2
 8012e26:	4a15      	ldr	r2, [pc, #84]	@ (8012e7c <udp_new_port+0x68>)
 8012e28:	8011      	strh	r1, [r2, #0]
 8012e2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d103      	bne.n	8012e3a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012e32:	4b12      	ldr	r3, [pc, #72]	@ (8012e7c <udp_new_port+0x68>)
 8012e34:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012e38:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e3a:	4b11      	ldr	r3, [pc, #68]	@ (8012e80 <udp_new_port+0x6c>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	603b      	str	r3, [r7, #0]
 8012e40:	e011      	b.n	8012e66 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	8a5a      	ldrh	r2, [r3, #18]
 8012e46:	4b0d      	ldr	r3, [pc, #52]	@ (8012e7c <udp_new_port+0x68>)
 8012e48:	881b      	ldrh	r3, [r3, #0]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d108      	bne.n	8012e60 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012e4e:	88fb      	ldrh	r3, [r7, #6]
 8012e50:	3301      	adds	r3, #1
 8012e52:	80fb      	strh	r3, [r7, #6]
 8012e54:	88fb      	ldrh	r3, [r7, #6]
 8012e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012e5a:	d3e0      	bcc.n	8012e1e <udp_new_port+0xa>
        return 0;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e007      	b.n	8012e70 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	603b      	str	r3, [r7, #0]
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d1ea      	bne.n	8012e42 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012e6c:	4b03      	ldr	r3, [pc, #12]	@ (8012e7c <udp_new_port+0x68>)
 8012e6e:	881b      	ldrh	r3, [r3, #0]
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	20000028 	.word	0x20000028
 8012e80:	20008c5c 	.word	0x20008c5c

08012e84 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	4613      	mov	r3, r2
 8012e90:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d105      	bne.n	8012ea4 <udp_input_local_match+0x20>
 8012e98:	4b27      	ldr	r3, [pc, #156]	@ (8012f38 <udp_input_local_match+0xb4>)
 8012e9a:	2287      	movs	r2, #135	@ 0x87
 8012e9c:	4927      	ldr	r1, [pc, #156]	@ (8012f3c <udp_input_local_match+0xb8>)
 8012e9e:	4828      	ldr	r0, [pc, #160]	@ (8012f40 <udp_input_local_match+0xbc>)
 8012ea0:	f003 feac 	bl	8016bfc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d105      	bne.n	8012eb6 <udp_input_local_match+0x32>
 8012eaa:	4b23      	ldr	r3, [pc, #140]	@ (8012f38 <udp_input_local_match+0xb4>)
 8012eac:	2288      	movs	r2, #136	@ 0x88
 8012eae:	4925      	ldr	r1, [pc, #148]	@ (8012f44 <udp_input_local_match+0xc0>)
 8012eb0:	4823      	ldr	r0, [pc, #140]	@ (8012f40 <udp_input_local_match+0xbc>)
 8012eb2:	f003 fea3 	bl	8016bfc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	7a1b      	ldrb	r3, [r3, #8]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00b      	beq.n	8012ed6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	7a1a      	ldrb	r2, [r3, #8]
 8012ec2:	4b21      	ldr	r3, [pc, #132]	@ (8012f48 <udp_input_local_match+0xc4>)
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012eca:	3301      	adds	r3, #1
 8012ecc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d001      	beq.n	8012ed6 <udp_input_local_match+0x52>
    return 0;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	e02b      	b.n	8012f2e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012ed6:	79fb      	ldrb	r3, [r7, #7]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d018      	beq.n	8012f0e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d013      	beq.n	8012f0a <udp_input_local_match+0x86>
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d00f      	beq.n	8012f0a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012eea:	4b17      	ldr	r3, [pc, #92]	@ (8012f48 <udp_input_local_match+0xc4>)
 8012eec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef2:	d00a      	beq.n	8012f0a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681a      	ldr	r2, [r3, #0]
 8012ef8:	4b13      	ldr	r3, [pc, #76]	@ (8012f48 <udp_input_local_match+0xc4>)
 8012efa:	695b      	ldr	r3, [r3, #20]
 8012efc:	405a      	eors	r2, r3
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	3308      	adds	r3, #8
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d110      	bne.n	8012f2c <udp_input_local_match+0xa8>
          return 1;
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	e00f      	b.n	8012f2e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d009      	beq.n	8012f28 <udp_input_local_match+0xa4>
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d005      	beq.n	8012f28 <udp_input_local_match+0xa4>
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	4b09      	ldr	r3, [pc, #36]	@ (8012f48 <udp_input_local_match+0xc4>)
 8012f22:	695b      	ldr	r3, [r3, #20]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d101      	bne.n	8012f2c <udp_input_local_match+0xa8>
        return 1;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	e000      	b.n	8012f2e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012f2c:	2300      	movs	r3, #0
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3710      	adds	r7, #16
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	08019b2c 	.word	0x08019b2c
 8012f3c:	08019b5c 	.word	0x08019b5c
 8012f40:	08019b80 	.word	0x08019b80
 8012f44:	08019ba8 	.word	0x08019ba8
 8012f48:	20005690 	.word	0x20005690

08012f4c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012f4c:	b590      	push	{r4, r7, lr}
 8012f4e:	b08d      	sub	sp, #52	@ 0x34
 8012f50:	af02      	add	r7, sp, #8
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012f56:	2300      	movs	r3, #0
 8012f58:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d105      	bne.n	8012f6c <udp_input+0x20>
 8012f60:	4b7c      	ldr	r3, [pc, #496]	@ (8013154 <udp_input+0x208>)
 8012f62:	22cf      	movs	r2, #207	@ 0xcf
 8012f64:	497c      	ldr	r1, [pc, #496]	@ (8013158 <udp_input+0x20c>)
 8012f66:	487d      	ldr	r0, [pc, #500]	@ (801315c <udp_input+0x210>)
 8012f68:	f003 fe48 	bl	8016bfc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d105      	bne.n	8012f7e <udp_input+0x32>
 8012f72:	4b78      	ldr	r3, [pc, #480]	@ (8013154 <udp_input+0x208>)
 8012f74:	22d0      	movs	r2, #208	@ 0xd0
 8012f76:	497a      	ldr	r1, [pc, #488]	@ (8013160 <udp_input+0x214>)
 8012f78:	4878      	ldr	r0, [pc, #480]	@ (801315c <udp_input+0x210>)
 8012f7a:	f003 fe3f 	bl	8016bfc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	895b      	ldrh	r3, [r3, #10]
 8012f82:	2b07      	cmp	r3, #7
 8012f84:	d803      	bhi.n	8012f8e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f7fa f9f2 	bl	800d370 <pbuf_free>
    goto end;
 8012f8c:	e0de      	b.n	801314c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012f94:	4b73      	ldr	r3, [pc, #460]	@ (8013164 <udp_input+0x218>)
 8012f96:	695b      	ldr	r3, [r3, #20]
 8012f98:	4a72      	ldr	r2, [pc, #456]	@ (8013164 <udp_input+0x218>)
 8012f9a:	6812      	ldr	r2, [r2, #0]
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f001 ff40 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	881b      	ldrh	r3, [r3, #0]
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7f8 fe80 	bl	800bcb4 <lwip_htons>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	885b      	ldrh	r3, [r3, #2]
 8012fbc:	b29b      	uxth	r3, r3
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7f8 fe78 	bl	800bcb4 <lwip_htons>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fd4:	4b64      	ldr	r3, [pc, #400]	@ (8013168 <udp_input+0x21c>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fda:	e054      	b.n	8013086 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fde:	8a5b      	ldrh	r3, [r3, #18]
 8012fe0:	89fa      	ldrh	r2, [r7, #14]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d14a      	bne.n	801307c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012fe6:	7cfb      	ldrb	r3, [r7, #19]
 8012fe8:	461a      	mov	r2, r3
 8012fea:	6839      	ldr	r1, [r7, #0]
 8012fec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012fee:	f7ff ff49 	bl	8012e84 <udp_input_local_match>
 8012ff2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d041      	beq.n	801307c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ffa:	7c1b      	ldrb	r3, [r3, #16]
 8012ffc:	f003 0304 	and.w	r3, r3, #4
 8013000:	2b00      	cmp	r3, #0
 8013002:	d11d      	bne.n	8013040 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d102      	bne.n	8013010 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801300c:	61fb      	str	r3, [r7, #28]
 801300e:	e017      	b.n	8013040 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013010:	7cfb      	ldrb	r3, [r7, #19]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d014      	beq.n	8013040 <udp_input+0xf4>
 8013016:	4b53      	ldr	r3, [pc, #332]	@ (8013164 <udp_input+0x218>)
 8013018:	695b      	ldr	r3, [r3, #20]
 801301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801301e:	d10f      	bne.n	8013040 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	681a      	ldr	r2, [r3, #0]
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	3304      	adds	r3, #4
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	429a      	cmp	r2, r3
 801302c:	d008      	beq.n	8013040 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	3304      	adds	r3, #4
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	429a      	cmp	r2, r3
 801303a:	d101      	bne.n	8013040 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801303e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013042:	8a9b      	ldrh	r3, [r3, #20]
 8013044:	8a3a      	ldrh	r2, [r7, #16]
 8013046:	429a      	cmp	r2, r3
 8013048:	d118      	bne.n	801307c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801304c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801304e:	2b00      	cmp	r3, #0
 8013050:	d005      	beq.n	801305e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013054:	685a      	ldr	r2, [r3, #4]
 8013056:	4b43      	ldr	r3, [pc, #268]	@ (8013164 <udp_input+0x218>)
 8013058:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801305a:	429a      	cmp	r2, r3
 801305c:	d10e      	bne.n	801307c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801305e:	6a3b      	ldr	r3, [r7, #32]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d014      	beq.n	801308e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013066:	68da      	ldr	r2, [r3, #12]
 8013068:	6a3b      	ldr	r3, [r7, #32]
 801306a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801306c:	4b3e      	ldr	r3, [pc, #248]	@ (8013168 <udp_input+0x21c>)
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013072:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013074:	4a3c      	ldr	r2, [pc, #240]	@ (8013168 <udp_input+0x21c>)
 8013076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013078:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801307a:	e008      	b.n	801308e <udp_input+0x142>
      }
    }

    prev = pcb;
 801307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801307e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013082:	68db      	ldr	r3, [r3, #12]
 8013084:	627b      	str	r3, [r7, #36]	@ 0x24
 8013086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013088:	2b00      	cmp	r3, #0
 801308a:	d1a7      	bne.n	8012fdc <udp_input+0x90>
 801308c:	e000      	b.n	8013090 <udp_input+0x144>
        break;
 801308e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013092:	2b00      	cmp	r3, #0
 8013094:	d101      	bne.n	801309a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801309c:	2b00      	cmp	r3, #0
 801309e:	d002      	beq.n	80130a6 <udp_input+0x15a>
    for_us = 1;
 80130a0:	2301      	movs	r3, #1
 80130a2:	76fb      	strb	r3, [r7, #27]
 80130a4:	e00a      	b.n	80130bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	3304      	adds	r3, #4
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	4b2d      	ldr	r3, [pc, #180]	@ (8013164 <udp_input+0x218>)
 80130ae:	695b      	ldr	r3, [r3, #20]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	bf0c      	ite	eq
 80130b4:	2301      	moveq	r3, #1
 80130b6:	2300      	movne	r3, #0
 80130b8:	b2db      	uxtb	r3, r3
 80130ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80130bc:	7efb      	ldrb	r3, [r7, #27]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d041      	beq.n	8013146 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80130c2:	2108      	movs	r1, #8
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7fa f8cd 	bl	800d264 <pbuf_remove_header>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d00a      	beq.n	80130e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80130d0:	4b20      	ldr	r3, [pc, #128]	@ (8013154 <udp_input+0x208>)
 80130d2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80130d6:	4925      	ldr	r1, [pc, #148]	@ (801316c <udp_input+0x220>)
 80130d8:	4820      	ldr	r0, [pc, #128]	@ (801315c <udp_input+0x210>)
 80130da:	f003 fd8f 	bl	8016bfc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7fa f946 	bl	800d370 <pbuf_free>
      goto end;
 80130e4:	e032      	b.n	801314c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80130e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d012      	beq.n	8013112 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80130ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ee:	699b      	ldr	r3, [r3, #24]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00a      	beq.n	801310a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80130f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f6:	699c      	ldr	r4, [r3, #24]
 80130f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130fa:	69d8      	ldr	r0, [r3, #28]
 80130fc:	8a3b      	ldrh	r3, [r7, #16]
 80130fe:	9300      	str	r3, [sp, #0]
 8013100:	4b1b      	ldr	r3, [pc, #108]	@ (8013170 <udp_input+0x224>)
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013106:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013108:	e021      	b.n	801314e <udp_input+0x202>
        pbuf_free(p);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f7fa f930 	bl	800d370 <pbuf_free>
        goto end;
 8013110:	e01c      	b.n	801314c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013112:	7cfb      	ldrb	r3, [r7, #19]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d112      	bne.n	801313e <udp_input+0x1f2>
 8013118:	4b12      	ldr	r3, [pc, #72]	@ (8013164 <udp_input+0x218>)
 801311a:	695b      	ldr	r3, [r3, #20]
 801311c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013120:	2be0      	cmp	r3, #224	@ 0xe0
 8013122:	d00c      	beq.n	801313e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013124:	4b0f      	ldr	r3, [pc, #60]	@ (8013164 <udp_input+0x218>)
 8013126:	899b      	ldrh	r3, [r3, #12]
 8013128:	3308      	adds	r3, #8
 801312a:	b29b      	uxth	r3, r3
 801312c:	b21b      	sxth	r3, r3
 801312e:	4619      	mov	r1, r3
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f7fa f90a 	bl	800d34a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013136:	2103      	movs	r1, #3
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f001 fb53 	bl	80147e4 <icmp_dest_unreach>
      pbuf_free(p);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7fa f916 	bl	800d370 <pbuf_free>
  return;
 8013144:	e003      	b.n	801314e <udp_input+0x202>
    pbuf_free(p);
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7fa f912 	bl	800d370 <pbuf_free>
  return;
 801314c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801314e:	372c      	adds	r7, #44	@ 0x2c
 8013150:	46bd      	mov	sp, r7
 8013152:	bd90      	pop	{r4, r7, pc}
 8013154:	08019b2c 	.word	0x08019b2c
 8013158:	08019bd0 	.word	0x08019bd0
 801315c:	08019b80 	.word	0x08019b80
 8013160:	08019be8 	.word	0x08019be8
 8013164:	20005690 	.word	0x20005690
 8013168:	20008c5c 	.word	0x20008c5c
 801316c:	08019c04 	.word	0x08019c04
 8013170:	200056a0 	.word	0x200056a0

08013174 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b088      	sub	sp, #32
 8013178:	af02      	add	r7, sp, #8
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	607a      	str	r2, [r7, #4]
 8013180:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d109      	bne.n	801319c <udp_sendto+0x28>
 8013188:	4b23      	ldr	r3, [pc, #140]	@ (8013218 <udp_sendto+0xa4>)
 801318a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801318e:	4923      	ldr	r1, [pc, #140]	@ (801321c <udp_sendto+0xa8>)
 8013190:	4823      	ldr	r0, [pc, #140]	@ (8013220 <udp_sendto+0xac>)
 8013192:	f003 fd33 	bl	8016bfc <iprintf>
 8013196:	f06f 030f 	mvn.w	r3, #15
 801319a:	e038      	b.n	801320e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d109      	bne.n	80131b6 <udp_sendto+0x42>
 80131a2:	4b1d      	ldr	r3, [pc, #116]	@ (8013218 <udp_sendto+0xa4>)
 80131a4:	f240 2219 	movw	r2, #537	@ 0x219
 80131a8:	491e      	ldr	r1, [pc, #120]	@ (8013224 <udp_sendto+0xb0>)
 80131aa:	481d      	ldr	r0, [pc, #116]	@ (8013220 <udp_sendto+0xac>)
 80131ac:	f003 fd26 	bl	8016bfc <iprintf>
 80131b0:	f06f 030f 	mvn.w	r3, #15
 80131b4:	e02b      	b.n	801320e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d109      	bne.n	80131d0 <udp_sendto+0x5c>
 80131bc:	4b16      	ldr	r3, [pc, #88]	@ (8013218 <udp_sendto+0xa4>)
 80131be:	f240 221a 	movw	r2, #538	@ 0x21a
 80131c2:	4919      	ldr	r1, [pc, #100]	@ (8013228 <udp_sendto+0xb4>)
 80131c4:	4816      	ldr	r0, [pc, #88]	@ (8013220 <udp_sendto+0xac>)
 80131c6:	f003 fd19 	bl	8016bfc <iprintf>
 80131ca:	f06f 030f 	mvn.w	r3, #15
 80131ce:	e01e      	b.n	801320e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	7a1b      	ldrb	r3, [r3, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d006      	beq.n	80131e6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	7a1b      	ldrb	r3, [r3, #8]
 80131dc:	4618      	mov	r0, r3
 80131de:	f7f9 fd67 	bl	800ccb0 <netif_get_by_index>
 80131e2:	6178      	str	r0, [r7, #20]
 80131e4:	e003      	b.n	80131ee <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f001 fb86 	bl	80148f8 <ip4_route>
 80131ec:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d102      	bne.n	80131fa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80131f4:	f06f 0303 	mvn.w	r3, #3
 80131f8:	e009      	b.n	801320e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80131fa:	887a      	ldrh	r2, [r7, #2]
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	4613      	mov	r3, r2
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	68b9      	ldr	r1, [r7, #8]
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	f000 f810 	bl	801322c <udp_sendto_if>
 801320c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801320e:	4618      	mov	r0, r3
 8013210:	3718      	adds	r7, #24
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	08019b2c 	.word	0x08019b2c
 801321c:	08019c50 	.word	0x08019c50
 8013220:	08019b80 	.word	0x08019b80
 8013224:	08019c68 	.word	0x08019c68
 8013228:	08019c84 	.word	0x08019c84

0801322c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b088      	sub	sp, #32
 8013230:	af02      	add	r7, sp, #8
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d109      	bne.n	8013254 <udp_sendto_if+0x28>
 8013240:	4b2e      	ldr	r3, [pc, #184]	@ (80132fc <udp_sendto_if+0xd0>)
 8013242:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013246:	492e      	ldr	r1, [pc, #184]	@ (8013300 <udp_sendto_if+0xd4>)
 8013248:	482e      	ldr	r0, [pc, #184]	@ (8013304 <udp_sendto_if+0xd8>)
 801324a:	f003 fcd7 	bl	8016bfc <iprintf>
 801324e:	f06f 030f 	mvn.w	r3, #15
 8013252:	e04f      	b.n	80132f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d109      	bne.n	801326e <udp_sendto_if+0x42>
 801325a:	4b28      	ldr	r3, [pc, #160]	@ (80132fc <udp_sendto_if+0xd0>)
 801325c:	f240 2281 	movw	r2, #641	@ 0x281
 8013260:	4929      	ldr	r1, [pc, #164]	@ (8013308 <udp_sendto_if+0xdc>)
 8013262:	4828      	ldr	r0, [pc, #160]	@ (8013304 <udp_sendto_if+0xd8>)
 8013264:	f003 fcca 	bl	8016bfc <iprintf>
 8013268:	f06f 030f 	mvn.w	r3, #15
 801326c:	e042      	b.n	80132f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d109      	bne.n	8013288 <udp_sendto_if+0x5c>
 8013274:	4b21      	ldr	r3, [pc, #132]	@ (80132fc <udp_sendto_if+0xd0>)
 8013276:	f240 2282 	movw	r2, #642	@ 0x282
 801327a:	4924      	ldr	r1, [pc, #144]	@ (801330c <udp_sendto_if+0xe0>)
 801327c:	4821      	ldr	r0, [pc, #132]	@ (8013304 <udp_sendto_if+0xd8>)
 801327e:	f003 fcbd 	bl	8016bfc <iprintf>
 8013282:	f06f 030f 	mvn.w	r3, #15
 8013286:	e035      	b.n	80132f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013288:	6a3b      	ldr	r3, [r7, #32]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d109      	bne.n	80132a2 <udp_sendto_if+0x76>
 801328e:	4b1b      	ldr	r3, [pc, #108]	@ (80132fc <udp_sendto_if+0xd0>)
 8013290:	f240 2283 	movw	r2, #643	@ 0x283
 8013294:	491e      	ldr	r1, [pc, #120]	@ (8013310 <udp_sendto_if+0xe4>)
 8013296:	481b      	ldr	r0, [pc, #108]	@ (8013304 <udp_sendto_if+0xd8>)
 8013298:	f003 fcb0 	bl	8016bfc <iprintf>
 801329c:	f06f 030f 	mvn.w	r3, #15
 80132a0:	e028      	b.n	80132f4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d009      	beq.n	80132bc <udp_sendto_if+0x90>
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d005      	beq.n	80132bc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132b8:	2be0      	cmp	r3, #224	@ 0xe0
 80132ba:	d103      	bne.n	80132c4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80132bc:	6a3b      	ldr	r3, [r7, #32]
 80132be:	3304      	adds	r3, #4
 80132c0:	617b      	str	r3, [r7, #20]
 80132c2:	e00b      	b.n	80132dc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	6a3b      	ldr	r3, [r7, #32]
 80132ca:	3304      	adds	r3, #4
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d002      	beq.n	80132d8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80132d2:	f06f 0303 	mvn.w	r3, #3
 80132d6:	e00d      	b.n	80132f4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80132dc:	887a      	ldrh	r2, [r7, #2]
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	9301      	str	r3, [sp, #4]
 80132e2:	6a3b      	ldr	r3, [r7, #32]
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	4613      	mov	r3, r2
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	68b9      	ldr	r1, [r7, #8]
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	f000 f811 	bl	8013314 <udp_sendto_if_src>
 80132f2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3718      	adds	r7, #24
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	08019b2c 	.word	0x08019b2c
 8013300:	08019ca0 	.word	0x08019ca0
 8013304:	08019b80 	.word	0x08019b80
 8013308:	08019cbc 	.word	0x08019cbc
 801330c:	08019cd8 	.word	0x08019cd8
 8013310:	08019cf8 	.word	0x08019cf8

08013314 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b08c      	sub	sp, #48	@ 0x30
 8013318:	af04      	add	r7, sp, #16
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	60b9      	str	r1, [r7, #8]
 801331e:	607a      	str	r2, [r7, #4]
 8013320:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d109      	bne.n	801333c <udp_sendto_if_src+0x28>
 8013328:	4b65      	ldr	r3, [pc, #404]	@ (80134c0 <udp_sendto_if_src+0x1ac>)
 801332a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801332e:	4965      	ldr	r1, [pc, #404]	@ (80134c4 <udp_sendto_if_src+0x1b0>)
 8013330:	4865      	ldr	r0, [pc, #404]	@ (80134c8 <udp_sendto_if_src+0x1b4>)
 8013332:	f003 fc63 	bl	8016bfc <iprintf>
 8013336:	f06f 030f 	mvn.w	r3, #15
 801333a:	e0bc      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d109      	bne.n	8013356 <udp_sendto_if_src+0x42>
 8013342:	4b5f      	ldr	r3, [pc, #380]	@ (80134c0 <udp_sendto_if_src+0x1ac>)
 8013344:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013348:	4960      	ldr	r1, [pc, #384]	@ (80134cc <udp_sendto_if_src+0x1b8>)
 801334a:	485f      	ldr	r0, [pc, #380]	@ (80134c8 <udp_sendto_if_src+0x1b4>)
 801334c:	f003 fc56 	bl	8016bfc <iprintf>
 8013350:	f06f 030f 	mvn.w	r3, #15
 8013354:	e0af      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d109      	bne.n	8013370 <udp_sendto_if_src+0x5c>
 801335c:	4b58      	ldr	r3, [pc, #352]	@ (80134c0 <udp_sendto_if_src+0x1ac>)
 801335e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013362:	495b      	ldr	r1, [pc, #364]	@ (80134d0 <udp_sendto_if_src+0x1bc>)
 8013364:	4858      	ldr	r0, [pc, #352]	@ (80134c8 <udp_sendto_if_src+0x1b4>)
 8013366:	f003 fc49 	bl	8016bfc <iprintf>
 801336a:	f06f 030f 	mvn.w	r3, #15
 801336e:	e0a2      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013372:	2b00      	cmp	r3, #0
 8013374:	d109      	bne.n	801338a <udp_sendto_if_src+0x76>
 8013376:	4b52      	ldr	r3, [pc, #328]	@ (80134c0 <udp_sendto_if_src+0x1ac>)
 8013378:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801337c:	4955      	ldr	r1, [pc, #340]	@ (80134d4 <udp_sendto_if_src+0x1c0>)
 801337e:	4852      	ldr	r0, [pc, #328]	@ (80134c8 <udp_sendto_if_src+0x1b4>)
 8013380:	f003 fc3c 	bl	8016bfc <iprintf>
 8013384:	f06f 030f 	mvn.w	r3, #15
 8013388:	e095      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801338c:	2b00      	cmp	r3, #0
 801338e:	d109      	bne.n	80133a4 <udp_sendto_if_src+0x90>
 8013390:	4b4b      	ldr	r3, [pc, #300]	@ (80134c0 <udp_sendto_if_src+0x1ac>)
 8013392:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8013396:	4950      	ldr	r1, [pc, #320]	@ (80134d8 <udp_sendto_if_src+0x1c4>)
 8013398:	484b      	ldr	r0, [pc, #300]	@ (80134c8 <udp_sendto_if_src+0x1b4>)
 801339a:	f003 fc2f 	bl	8016bfc <iprintf>
 801339e:	f06f 030f 	mvn.w	r3, #15
 80133a2:	e088      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	8a5b      	ldrh	r3, [r3, #18]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10f      	bne.n	80133cc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80133ac:	68f9      	ldr	r1, [r7, #12]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	8a5b      	ldrh	r3, [r3, #18]
 80133b2:	461a      	mov	r2, r3
 80133b4:	68f8      	ldr	r0, [r7, #12]
 80133b6:	f000 f893 	bl	80134e0 <udp_bind>
 80133ba:	4603      	mov	r3, r0
 80133bc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80133be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d002      	beq.n	80133cc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80133c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80133ca:	e074      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	891b      	ldrh	r3, [r3, #8]
 80133d0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80133d4:	4293      	cmp	r3, r2
 80133d6:	d902      	bls.n	80133de <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80133d8:	f04f 33ff 	mov.w	r3, #4294967295
 80133dc:	e06b      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80133de:	2108      	movs	r1, #8
 80133e0:	68b8      	ldr	r0, [r7, #8]
 80133e2:	f7f9 ff2f 	bl	800d244 <pbuf_add_header>
 80133e6:	4603      	mov	r3, r0
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d015      	beq.n	8013418 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80133ec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80133f0:	2108      	movs	r1, #8
 80133f2:	2022      	movs	r0, #34	@ 0x22
 80133f4:	f7f9 fcd8 	bl	800cda8 <pbuf_alloc>
 80133f8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d102      	bne.n	8013406 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013400:	f04f 33ff 	mov.w	r3, #4294967295
 8013404:	e057      	b.n	80134b6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	891b      	ldrh	r3, [r3, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d006      	beq.n	801341c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801340e:	68b9      	ldr	r1, [r7, #8]
 8013410:	69f8      	ldr	r0, [r7, #28]
 8013412:	f7fa f8c5 	bl	800d5a0 <pbuf_chain>
 8013416:	e001      	b.n	801341c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	895b      	ldrh	r3, [r3, #10]
 8013420:	2b07      	cmp	r3, #7
 8013422:	d806      	bhi.n	8013432 <udp_sendto_if_src+0x11e>
 8013424:	4b26      	ldr	r3, [pc, #152]	@ (80134c0 <udp_sendto_if_src+0x1ac>)
 8013426:	f240 320d 	movw	r2, #781	@ 0x30d
 801342a:	492c      	ldr	r1, [pc, #176]	@ (80134dc <udp_sendto_if_src+0x1c8>)
 801342c:	4826      	ldr	r0, [pc, #152]	@ (80134c8 <udp_sendto_if_src+0x1b4>)
 801342e:	f003 fbe5 	bl	8016bfc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	8a5b      	ldrh	r3, [r3, #18]
 801343c:	4618      	mov	r0, r3
 801343e:	f7f8 fc39 	bl	800bcb4 <lwip_htons>
 8013442:	4603      	mov	r3, r0
 8013444:	461a      	mov	r2, r3
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801344a:	887b      	ldrh	r3, [r7, #2]
 801344c:	4618      	mov	r0, r3
 801344e:	f7f8 fc31 	bl	800bcb4 <lwip_htons>
 8013452:	4603      	mov	r3, r0
 8013454:	461a      	mov	r2, r3
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	2200      	movs	r2, #0
 801345e:	719a      	strb	r2, [r3, #6]
 8013460:	2200      	movs	r2, #0
 8013462:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013464:	69fb      	ldr	r3, [r7, #28]
 8013466:	891b      	ldrh	r3, [r3, #8]
 8013468:	4618      	mov	r0, r3
 801346a:	f7f8 fc23 	bl	800bcb4 <lwip_htons>
 801346e:	4603      	mov	r3, r0
 8013470:	461a      	mov	r2, r3
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013476:	2311      	movs	r3, #17
 8013478:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	7adb      	ldrb	r3, [r3, #11]
 801347e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	7a9b      	ldrb	r3, [r3, #10]
 8013484:	7cb9      	ldrb	r1, [r7, #18]
 8013486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013488:	9202      	str	r2, [sp, #8]
 801348a:	7cfa      	ldrb	r2, [r7, #19]
 801348c:	9201      	str	r2, [sp, #4]
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	460b      	mov	r3, r1
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013496:	69f8      	ldr	r0, [r7, #28]
 8013498:	f001 fc16 	bl	8014cc8 <ip4_output_if_src>
 801349c:	4603      	mov	r3, r0
 801349e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80134a0:	69fa      	ldr	r2, [r7, #28]
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d004      	beq.n	80134b2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80134a8:	69f8      	ldr	r0, [r7, #28]
 80134aa:	f7f9 ff61 	bl	800d370 <pbuf_free>
    q = NULL;
 80134ae:	2300      	movs	r3, #0
 80134b0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80134b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3720      	adds	r7, #32
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	08019b2c 	.word	0x08019b2c
 80134c4:	08019d18 	.word	0x08019d18
 80134c8:	08019b80 	.word	0x08019b80
 80134cc:	08019d38 	.word	0x08019d38
 80134d0:	08019d58 	.word	0x08019d58
 80134d4:	08019d7c 	.word	0x08019d7c
 80134d8:	08019da0 	.word	0x08019da0
 80134dc:	08019dc4 	.word	0x08019dc4

080134e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	4613      	mov	r3, r2
 80134ec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d101      	bne.n	80134f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80134f4:	4b39      	ldr	r3, [pc, #228]	@ (80135dc <udp_bind+0xfc>)
 80134f6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d109      	bne.n	8013512 <udp_bind+0x32>
 80134fe:	4b38      	ldr	r3, [pc, #224]	@ (80135e0 <udp_bind+0x100>)
 8013500:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013504:	4937      	ldr	r1, [pc, #220]	@ (80135e4 <udp_bind+0x104>)
 8013506:	4838      	ldr	r0, [pc, #224]	@ (80135e8 <udp_bind+0x108>)
 8013508:	f003 fb78 	bl	8016bfc <iprintf>
 801350c:	f06f 030f 	mvn.w	r3, #15
 8013510:	e060      	b.n	80135d4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013512:	2300      	movs	r3, #0
 8013514:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013516:	4b35      	ldr	r3, [pc, #212]	@ (80135ec <udp_bind+0x10c>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	617b      	str	r3, [r7, #20]
 801351c:	e009      	b.n	8013532 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801351e:	68fa      	ldr	r2, [r7, #12]
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	429a      	cmp	r2, r3
 8013524:	d102      	bne.n	801352c <udp_bind+0x4c>
      rebind = 1;
 8013526:	2301      	movs	r3, #1
 8013528:	74fb      	strb	r3, [r7, #19]
      break;
 801352a:	e005      	b.n	8013538 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	617b      	str	r3, [r7, #20]
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d1f2      	bne.n	801351e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013538:	88fb      	ldrh	r3, [r7, #6]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d109      	bne.n	8013552 <udp_bind+0x72>
    port = udp_new_port();
 801353e:	f7ff fc69 	bl	8012e14 <udp_new_port>
 8013542:	4603      	mov	r3, r0
 8013544:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013546:	88fb      	ldrh	r3, [r7, #6]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d12c      	bne.n	80135a6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801354c:	f06f 0307 	mvn.w	r3, #7
 8013550:	e040      	b.n	80135d4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013552:	4b26      	ldr	r3, [pc, #152]	@ (80135ec <udp_bind+0x10c>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	617b      	str	r3, [r7, #20]
 8013558:	e022      	b.n	80135a0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801355a:	68fa      	ldr	r2, [r7, #12]
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	429a      	cmp	r2, r3
 8013560:	d01b      	beq.n	801359a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	8a5b      	ldrh	r3, [r3, #18]
 8013566:	88fa      	ldrh	r2, [r7, #6]
 8013568:	429a      	cmp	r2, r3
 801356a:	d116      	bne.n	801359a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	681a      	ldr	r2, [r3, #0]
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013574:	429a      	cmp	r2, r3
 8013576:	d00d      	beq.n	8013594 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00a      	beq.n	8013594 <udp_bind+0xb4>
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d006      	beq.n	8013594 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013586:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013588:	2b00      	cmp	r3, #0
 801358a:	d003      	beq.n	8013594 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d102      	bne.n	801359a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013594:	f06f 0307 	mvn.w	r3, #7
 8013598:	e01c      	b.n	80135d4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	617b      	str	r3, [r7, #20]
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d1d9      	bne.n	801355a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d002      	beq.n	80135b2 <udp_bind+0xd2>
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	e000      	b.n	80135b4 <udp_bind+0xd4>
 80135b2:	2300      	movs	r3, #0
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	88fa      	ldrh	r2, [r7, #6]
 80135bc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80135be:	7cfb      	ldrb	r3, [r7, #19]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d106      	bne.n	80135d2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80135c4:	4b09      	ldr	r3, [pc, #36]	@ (80135ec <udp_bind+0x10c>)
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80135cc:	4a07      	ldr	r2, [pc, #28]	@ (80135ec <udp_bind+0x10c>)
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80135d2:	2300      	movs	r3, #0
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3718      	adds	r7, #24
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	0801adb0 	.word	0x0801adb0
 80135e0:	08019b2c 	.word	0x08019b2c
 80135e4:	08019df4 	.word	0x08019df4
 80135e8:	08019b80 	.word	0x08019b80
 80135ec:	20008c5c 	.word	0x20008c5c

080135f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	60f8      	str	r0, [r7, #12]
 80135f8:	60b9      	str	r1, [r7, #8]
 80135fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d107      	bne.n	8013612 <udp_recv+0x22>
 8013602:	4b08      	ldr	r3, [pc, #32]	@ (8013624 <udp_recv+0x34>)
 8013604:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013608:	4907      	ldr	r1, [pc, #28]	@ (8013628 <udp_recv+0x38>)
 801360a:	4808      	ldr	r0, [pc, #32]	@ (801362c <udp_recv+0x3c>)
 801360c:	f003 faf6 	bl	8016bfc <iprintf>
 8013610:	e005      	b.n	801361e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	68ba      	ldr	r2, [r7, #8]
 8013616:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	687a      	ldr	r2, [r7, #4]
 801361c:	61da      	str	r2, [r3, #28]
}
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}
 8013624:	08019b2c 	.word	0x08019b2c
 8013628:	08019e60 	.word	0x08019e60
 801362c:	08019b80 	.word	0x08019b80

08013630 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d107      	bne.n	801364e <udp_remove+0x1e>
 801363e:	4b19      	ldr	r3, [pc, #100]	@ (80136a4 <udp_remove+0x74>)
 8013640:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013644:	4918      	ldr	r1, [pc, #96]	@ (80136a8 <udp_remove+0x78>)
 8013646:	4819      	ldr	r0, [pc, #100]	@ (80136ac <udp_remove+0x7c>)
 8013648:	f003 fad8 	bl	8016bfc <iprintf>
 801364c:	e026      	b.n	801369c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801364e:	4b18      	ldr	r3, [pc, #96]	@ (80136b0 <udp_remove+0x80>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	429a      	cmp	r2, r3
 8013656:	d105      	bne.n	8013664 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013658:	4b15      	ldr	r3, [pc, #84]	@ (80136b0 <udp_remove+0x80>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	4a14      	ldr	r2, [pc, #80]	@ (80136b0 <udp_remove+0x80>)
 8013660:	6013      	str	r3, [r2, #0]
 8013662:	e017      	b.n	8013694 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013664:	4b12      	ldr	r3, [pc, #72]	@ (80136b0 <udp_remove+0x80>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	60fb      	str	r3, [r7, #12]
 801366a:	e010      	b.n	801368e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d009      	beq.n	8013688 <udp_remove+0x58>
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	429a      	cmp	r2, r3
 801367c:	d104      	bne.n	8013688 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	68da      	ldr	r2, [r3, #12]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	60da      	str	r2, [r3, #12]
        break;
 8013686:	e005      	b.n	8013694 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	60fb      	str	r3, [r7, #12]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d1eb      	bne.n	801366c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013694:	6879      	ldr	r1, [r7, #4]
 8013696:	2000      	movs	r0, #0
 8013698:	f7f8 fff4 	bl	800c684 <memp_free>
}
 801369c:	3710      	adds	r7, #16
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	08019b2c 	.word	0x08019b2c
 80136a8:	08019e78 	.word	0x08019e78
 80136ac:	08019b80 	.word	0x08019b80
 80136b0:	20008c5c 	.word	0x20008c5c

080136b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80136ba:	2000      	movs	r0, #0
 80136bc:	f7f8 ff72 	bl	800c5a4 <memp_malloc>
 80136c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d007      	beq.n	80136d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80136c8:	2220      	movs	r2, #32
 80136ca:	2100      	movs	r1, #0
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f003 fbed 	bl	8016eac <memset>
    pcb->ttl = UDP_TTL;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	22ff      	movs	r2, #255	@ 0xff
 80136d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80136d8:	687b      	ldr	r3, [r7, #4]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3708      	adds	r7, #8
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
	...

080136e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80136e4:	b480      	push	{r7}
 80136e6:	b085      	sub	sp, #20
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d01e      	beq.n	8013732 <udp_netif_ip_addr_changed+0x4e>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d01a      	beq.n	8013732 <udp_netif_ip_addr_changed+0x4e>
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d017      	beq.n	8013732 <udp_netif_ip_addr_changed+0x4e>
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d013      	beq.n	8013732 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801370a:	4b0d      	ldr	r3, [pc, #52]	@ (8013740 <udp_netif_ip_addr_changed+0x5c>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	60fb      	str	r3, [r7, #12]
 8013710:	e00c      	b.n	801372c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	429a      	cmp	r2, r3
 801371c:	d103      	bne.n	8013726 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	68db      	ldr	r3, [r3, #12]
 801372a:	60fb      	str	r3, [r7, #12]
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d1ef      	bne.n	8013712 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013732:	bf00      	nop
 8013734:	3714      	adds	r7, #20
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop
 8013740:	20008c5c 	.word	0x20008c5c

08013744 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801374c:	4915      	ldr	r1, [pc, #84]	@ (80137a4 <etharp_free_entry+0x60>)
 801374e:	687a      	ldr	r2, [r7, #4]
 8013750:	4613      	mov	r3, r2
 8013752:	005b      	lsls	r3, r3, #1
 8013754:	4413      	add	r3, r2
 8013756:	00db      	lsls	r3, r3, #3
 8013758:	440b      	add	r3, r1
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d013      	beq.n	8013788 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013760:	4910      	ldr	r1, [pc, #64]	@ (80137a4 <etharp_free_entry+0x60>)
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	4613      	mov	r3, r2
 8013766:	005b      	lsls	r3, r3, #1
 8013768:	4413      	add	r3, r2
 801376a:	00db      	lsls	r3, r3, #3
 801376c:	440b      	add	r3, r1
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	4618      	mov	r0, r3
 8013772:	f7f9 fdfd 	bl	800d370 <pbuf_free>
    arp_table[i].q = NULL;
 8013776:	490b      	ldr	r1, [pc, #44]	@ (80137a4 <etharp_free_entry+0x60>)
 8013778:	687a      	ldr	r2, [r7, #4]
 801377a:	4613      	mov	r3, r2
 801377c:	005b      	lsls	r3, r3, #1
 801377e:	4413      	add	r3, r2
 8013780:	00db      	lsls	r3, r3, #3
 8013782:	440b      	add	r3, r1
 8013784:	2200      	movs	r2, #0
 8013786:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013788:	4906      	ldr	r1, [pc, #24]	@ (80137a4 <etharp_free_entry+0x60>)
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	4613      	mov	r3, r2
 801378e:	005b      	lsls	r3, r3, #1
 8013790:	4413      	add	r3, r2
 8013792:	00db      	lsls	r3, r3, #3
 8013794:	440b      	add	r3, r1
 8013796:	3314      	adds	r3, #20
 8013798:	2200      	movs	r2, #0
 801379a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801379c:	bf00      	nop
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	20008c60 	.word	0x20008c60

080137a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137ae:	2300      	movs	r3, #0
 80137b0:	607b      	str	r3, [r7, #4]
 80137b2:	e096      	b.n	80138e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80137b4:	494f      	ldr	r1, [pc, #316]	@ (80138f4 <etharp_tmr+0x14c>)
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	4613      	mov	r3, r2
 80137ba:	005b      	lsls	r3, r3, #1
 80137bc:	4413      	add	r3, r2
 80137be:	00db      	lsls	r3, r3, #3
 80137c0:	440b      	add	r3, r1
 80137c2:	3314      	adds	r3, #20
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80137c8:	78fb      	ldrb	r3, [r7, #3]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	f000 8086 	beq.w	80138dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80137d0:	4948      	ldr	r1, [pc, #288]	@ (80138f4 <etharp_tmr+0x14c>)
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	4613      	mov	r3, r2
 80137d6:	005b      	lsls	r3, r3, #1
 80137d8:	4413      	add	r3, r2
 80137da:	00db      	lsls	r3, r3, #3
 80137dc:	440b      	add	r3, r1
 80137de:	3312      	adds	r3, #18
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	3301      	adds	r3, #1
 80137e4:	b298      	uxth	r0, r3
 80137e6:	4943      	ldr	r1, [pc, #268]	@ (80138f4 <etharp_tmr+0x14c>)
 80137e8:	687a      	ldr	r2, [r7, #4]
 80137ea:	4613      	mov	r3, r2
 80137ec:	005b      	lsls	r3, r3, #1
 80137ee:	4413      	add	r3, r2
 80137f0:	00db      	lsls	r3, r3, #3
 80137f2:	440b      	add	r3, r1
 80137f4:	3312      	adds	r3, #18
 80137f6:	4602      	mov	r2, r0
 80137f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80137fa:	493e      	ldr	r1, [pc, #248]	@ (80138f4 <etharp_tmr+0x14c>)
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	4613      	mov	r3, r2
 8013800:	005b      	lsls	r3, r3, #1
 8013802:	4413      	add	r3, r2
 8013804:	00db      	lsls	r3, r3, #3
 8013806:	440b      	add	r3, r1
 8013808:	3312      	adds	r3, #18
 801380a:	881b      	ldrh	r3, [r3, #0]
 801380c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013810:	d215      	bcs.n	801383e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013812:	4938      	ldr	r1, [pc, #224]	@ (80138f4 <etharp_tmr+0x14c>)
 8013814:	687a      	ldr	r2, [r7, #4]
 8013816:	4613      	mov	r3, r2
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	4413      	add	r3, r2
 801381c:	00db      	lsls	r3, r3, #3
 801381e:	440b      	add	r3, r1
 8013820:	3314      	adds	r3, #20
 8013822:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013824:	2b01      	cmp	r3, #1
 8013826:	d10e      	bne.n	8013846 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013828:	4932      	ldr	r1, [pc, #200]	@ (80138f4 <etharp_tmr+0x14c>)
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	4613      	mov	r3, r2
 801382e:	005b      	lsls	r3, r3, #1
 8013830:	4413      	add	r3, r2
 8013832:	00db      	lsls	r3, r3, #3
 8013834:	440b      	add	r3, r1
 8013836:	3312      	adds	r3, #18
 8013838:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801383a:	2b04      	cmp	r3, #4
 801383c:	d903      	bls.n	8013846 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f7ff ff80 	bl	8013744 <etharp_free_entry>
 8013844:	e04a      	b.n	80138dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013846:	492b      	ldr	r1, [pc, #172]	@ (80138f4 <etharp_tmr+0x14c>)
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	4613      	mov	r3, r2
 801384c:	005b      	lsls	r3, r3, #1
 801384e:	4413      	add	r3, r2
 8013850:	00db      	lsls	r3, r3, #3
 8013852:	440b      	add	r3, r1
 8013854:	3314      	adds	r3, #20
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	2b03      	cmp	r3, #3
 801385a:	d10a      	bne.n	8013872 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801385c:	4925      	ldr	r1, [pc, #148]	@ (80138f4 <etharp_tmr+0x14c>)
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	4613      	mov	r3, r2
 8013862:	005b      	lsls	r3, r3, #1
 8013864:	4413      	add	r3, r2
 8013866:	00db      	lsls	r3, r3, #3
 8013868:	440b      	add	r3, r1
 801386a:	3314      	adds	r3, #20
 801386c:	2204      	movs	r2, #4
 801386e:	701a      	strb	r2, [r3, #0]
 8013870:	e034      	b.n	80138dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013872:	4920      	ldr	r1, [pc, #128]	@ (80138f4 <etharp_tmr+0x14c>)
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	4613      	mov	r3, r2
 8013878:	005b      	lsls	r3, r3, #1
 801387a:	4413      	add	r3, r2
 801387c:	00db      	lsls	r3, r3, #3
 801387e:	440b      	add	r3, r1
 8013880:	3314      	adds	r3, #20
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	2b04      	cmp	r3, #4
 8013886:	d10a      	bne.n	801389e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013888:	491a      	ldr	r1, [pc, #104]	@ (80138f4 <etharp_tmr+0x14c>)
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	4613      	mov	r3, r2
 801388e:	005b      	lsls	r3, r3, #1
 8013890:	4413      	add	r3, r2
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	440b      	add	r3, r1
 8013896:	3314      	adds	r3, #20
 8013898:	2202      	movs	r2, #2
 801389a:	701a      	strb	r2, [r3, #0]
 801389c:	e01e      	b.n	80138dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801389e:	4915      	ldr	r1, [pc, #84]	@ (80138f4 <etharp_tmr+0x14c>)
 80138a0:	687a      	ldr	r2, [r7, #4]
 80138a2:	4613      	mov	r3, r2
 80138a4:	005b      	lsls	r3, r3, #1
 80138a6:	4413      	add	r3, r2
 80138a8:	00db      	lsls	r3, r3, #3
 80138aa:	440b      	add	r3, r1
 80138ac:	3314      	adds	r3, #20
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d113      	bne.n	80138dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80138b4:	490f      	ldr	r1, [pc, #60]	@ (80138f4 <etharp_tmr+0x14c>)
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	4613      	mov	r3, r2
 80138ba:	005b      	lsls	r3, r3, #1
 80138bc:	4413      	add	r3, r2
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	440b      	add	r3, r1
 80138c2:	3308      	adds	r3, #8
 80138c4:	6818      	ldr	r0, [r3, #0]
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	4613      	mov	r3, r2
 80138ca:	005b      	lsls	r3, r3, #1
 80138cc:	4413      	add	r3, r2
 80138ce:	00db      	lsls	r3, r3, #3
 80138d0:	4a08      	ldr	r2, [pc, #32]	@ (80138f4 <etharp_tmr+0x14c>)
 80138d2:	4413      	add	r3, r2
 80138d4:	3304      	adds	r3, #4
 80138d6:	4619      	mov	r1, r3
 80138d8:	f000 fe6e 	bl	80145b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	3301      	adds	r3, #1
 80138e0:	607b      	str	r3, [r7, #4]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2b09      	cmp	r3, #9
 80138e6:	f77f af65 	ble.w	80137b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80138ea:	bf00      	nop
 80138ec:	bf00      	nop
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	20008c60 	.word	0x20008c60

080138f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b08a      	sub	sp, #40	@ 0x28
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	460b      	mov	r3, r1
 8013902:	607a      	str	r2, [r7, #4]
 8013904:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013906:	230a      	movs	r3, #10
 8013908:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801390a:	230a      	movs	r3, #10
 801390c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801390e:	230a      	movs	r3, #10
 8013910:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013912:	2300      	movs	r3, #0
 8013914:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013916:	230a      	movs	r3, #10
 8013918:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	83bb      	strh	r3, [r7, #28]
 801391e:	2300      	movs	r3, #0
 8013920:	837b      	strh	r3, [r7, #26]
 8013922:	2300      	movs	r3, #0
 8013924:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013926:	2300      	movs	r3, #0
 8013928:	843b      	strh	r3, [r7, #32]
 801392a:	e0ae      	b.n	8013a8a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801392c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013930:	49a6      	ldr	r1, [pc, #664]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013932:	4613      	mov	r3, r2
 8013934:	005b      	lsls	r3, r3, #1
 8013936:	4413      	add	r3, r2
 8013938:	00db      	lsls	r3, r3, #3
 801393a:	440b      	add	r3, r1
 801393c:	3314      	adds	r3, #20
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013942:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013946:	2b0a      	cmp	r3, #10
 8013948:	d105      	bne.n	8013956 <etharp_find_entry+0x5e>
 801394a:	7dfb      	ldrb	r3, [r7, #23]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d102      	bne.n	8013956 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013950:	8c3b      	ldrh	r3, [r7, #32]
 8013952:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013954:	e095      	b.n	8013a82 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013956:	7dfb      	ldrb	r3, [r7, #23]
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 8092 	beq.w	8013a82 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801395e:	7dfb      	ldrb	r3, [r7, #23]
 8013960:	2b01      	cmp	r3, #1
 8013962:	d009      	beq.n	8013978 <etharp_find_entry+0x80>
 8013964:	7dfb      	ldrb	r3, [r7, #23]
 8013966:	2b01      	cmp	r3, #1
 8013968:	d806      	bhi.n	8013978 <etharp_find_entry+0x80>
 801396a:	4b99      	ldr	r3, [pc, #612]	@ (8013bd0 <etharp_find_entry+0x2d8>)
 801396c:	f240 1223 	movw	r2, #291	@ 0x123
 8013970:	4998      	ldr	r1, [pc, #608]	@ (8013bd4 <etharp_find_entry+0x2dc>)
 8013972:	4899      	ldr	r0, [pc, #612]	@ (8013bd8 <etharp_find_entry+0x2e0>)
 8013974:	f003 f942 	bl	8016bfc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d020      	beq.n	80139c0 <etharp_find_entry+0xc8>
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	6819      	ldr	r1, [r3, #0]
 8013982:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013986:	4891      	ldr	r0, [pc, #580]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013988:	4613      	mov	r3, r2
 801398a:	005b      	lsls	r3, r3, #1
 801398c:	4413      	add	r3, r2
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	4403      	add	r3, r0
 8013992:	3304      	adds	r3, #4
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	4299      	cmp	r1, r3
 8013998:	d112      	bne.n	80139c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00c      	beq.n	80139ba <etharp_find_entry+0xc2>
 80139a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139a4:	4989      	ldr	r1, [pc, #548]	@ (8013bcc <etharp_find_entry+0x2d4>)
 80139a6:	4613      	mov	r3, r2
 80139a8:	005b      	lsls	r3, r3, #1
 80139aa:	4413      	add	r3, r2
 80139ac:	00db      	lsls	r3, r3, #3
 80139ae:	440b      	add	r3, r1
 80139b0:	3308      	adds	r3, #8
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	687a      	ldr	r2, [r7, #4]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d102      	bne.n	80139c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80139ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80139be:	e100      	b.n	8013bc2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80139c0:	7dfb      	ldrb	r3, [r7, #23]
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d140      	bne.n	8013a48 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80139c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ca:	4980      	ldr	r1, [pc, #512]	@ (8013bcc <etharp_find_entry+0x2d4>)
 80139cc:	4613      	mov	r3, r2
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	4413      	add	r3, r2
 80139d2:	00db      	lsls	r3, r3, #3
 80139d4:	440b      	add	r3, r1
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d01a      	beq.n	8013a12 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80139dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139e0:	497a      	ldr	r1, [pc, #488]	@ (8013bcc <etharp_find_entry+0x2d4>)
 80139e2:	4613      	mov	r3, r2
 80139e4:	005b      	lsls	r3, r3, #1
 80139e6:	4413      	add	r3, r2
 80139e8:	00db      	lsls	r3, r3, #3
 80139ea:	440b      	add	r3, r1
 80139ec:	3312      	adds	r3, #18
 80139ee:	881b      	ldrh	r3, [r3, #0]
 80139f0:	8bba      	ldrh	r2, [r7, #28]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d845      	bhi.n	8013a82 <etharp_find_entry+0x18a>
            old_queue = i;
 80139f6:	8c3b      	ldrh	r3, [r7, #32]
 80139f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80139fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139fe:	4973      	ldr	r1, [pc, #460]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013a00:	4613      	mov	r3, r2
 8013a02:	005b      	lsls	r3, r3, #1
 8013a04:	4413      	add	r3, r2
 8013a06:	00db      	lsls	r3, r3, #3
 8013a08:	440b      	add	r3, r1
 8013a0a:	3312      	adds	r3, #18
 8013a0c:	881b      	ldrh	r3, [r3, #0]
 8013a0e:	83bb      	strh	r3, [r7, #28]
 8013a10:	e037      	b.n	8013a82 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013a12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a16:	496d      	ldr	r1, [pc, #436]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013a18:	4613      	mov	r3, r2
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	4413      	add	r3, r2
 8013a1e:	00db      	lsls	r3, r3, #3
 8013a20:	440b      	add	r3, r1
 8013a22:	3312      	adds	r3, #18
 8013a24:	881b      	ldrh	r3, [r3, #0]
 8013a26:	8b7a      	ldrh	r2, [r7, #26]
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d82a      	bhi.n	8013a82 <etharp_find_entry+0x18a>
            old_pending = i;
 8013a2c:	8c3b      	ldrh	r3, [r7, #32]
 8013a2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8013a30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a34:	4965      	ldr	r1, [pc, #404]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013a36:	4613      	mov	r3, r2
 8013a38:	005b      	lsls	r3, r3, #1
 8013a3a:	4413      	add	r3, r2
 8013a3c:	00db      	lsls	r3, r3, #3
 8013a3e:	440b      	add	r3, r1
 8013a40:	3312      	adds	r3, #18
 8013a42:	881b      	ldrh	r3, [r3, #0]
 8013a44:	837b      	strh	r3, [r7, #26]
 8013a46:	e01c      	b.n	8013a82 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013a48:	7dfb      	ldrb	r3, [r7, #23]
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d919      	bls.n	8013a82 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013a4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a52:	495e      	ldr	r1, [pc, #376]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013a54:	4613      	mov	r3, r2
 8013a56:	005b      	lsls	r3, r3, #1
 8013a58:	4413      	add	r3, r2
 8013a5a:	00db      	lsls	r3, r3, #3
 8013a5c:	440b      	add	r3, r1
 8013a5e:	3312      	adds	r3, #18
 8013a60:	881b      	ldrh	r3, [r3, #0]
 8013a62:	8b3a      	ldrh	r2, [r7, #24]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d80c      	bhi.n	8013a82 <etharp_find_entry+0x18a>
            old_stable = i;
 8013a68:	8c3b      	ldrh	r3, [r7, #32]
 8013a6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013a6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a70:	4956      	ldr	r1, [pc, #344]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013a72:	4613      	mov	r3, r2
 8013a74:	005b      	lsls	r3, r3, #1
 8013a76:	4413      	add	r3, r2
 8013a78:	00db      	lsls	r3, r3, #3
 8013a7a:	440b      	add	r3, r1
 8013a7c:	3312      	adds	r3, #18
 8013a7e:	881b      	ldrh	r3, [r3, #0]
 8013a80:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a82:	8c3b      	ldrh	r3, [r7, #32]
 8013a84:	3301      	adds	r3, #1
 8013a86:	b29b      	uxth	r3, r3
 8013a88:	843b      	strh	r3, [r7, #32]
 8013a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a8e:	2b09      	cmp	r3, #9
 8013a90:	f77f af4c 	ble.w	801392c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013a94:	7afb      	ldrb	r3, [r7, #11]
 8013a96:	f003 0302 	and.w	r3, r3, #2
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d108      	bne.n	8013ab0 <etharp_find_entry+0x1b8>
 8013a9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013aa2:	2b0a      	cmp	r3, #10
 8013aa4:	d107      	bne.n	8013ab6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013aa6:	7afb      	ldrb	r3, [r7, #11]
 8013aa8:	f003 0301 	and.w	r3, r3, #1
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d102      	bne.n	8013ab6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ab4:	e085      	b.n	8013bc2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013ab6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013aba:	2b09      	cmp	r3, #9
 8013abc:	dc02      	bgt.n	8013ac4 <etharp_find_entry+0x1cc>
    i = empty;
 8013abe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ac0:	843b      	strh	r3, [r7, #32]
 8013ac2:	e039      	b.n	8013b38 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013ac4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013ac8:	2b09      	cmp	r3, #9
 8013aca:	dc14      	bgt.n	8013af6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013acc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013ace:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013ad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ad4:	493d      	ldr	r1, [pc, #244]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	005b      	lsls	r3, r3, #1
 8013ada:	4413      	add	r3, r2
 8013adc:	00db      	lsls	r3, r3, #3
 8013ade:	440b      	add	r3, r1
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d018      	beq.n	8013b18 <etharp_find_entry+0x220>
 8013ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8013bd0 <etharp_find_entry+0x2d8>)
 8013ae8:	f240 126d 	movw	r2, #365	@ 0x16d
 8013aec:	493b      	ldr	r1, [pc, #236]	@ (8013bdc <etharp_find_entry+0x2e4>)
 8013aee:	483a      	ldr	r0, [pc, #232]	@ (8013bd8 <etharp_find_entry+0x2e0>)
 8013af0:	f003 f884 	bl	8016bfc <iprintf>
 8013af4:	e010      	b.n	8013b18 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013af6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013afa:	2b09      	cmp	r3, #9
 8013afc:	dc02      	bgt.n	8013b04 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013afe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013b00:	843b      	strh	r3, [r7, #32]
 8013b02:	e009      	b.n	8013b18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013b04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b08:	2b09      	cmp	r3, #9
 8013b0a:	dc02      	bgt.n	8013b12 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013b0c:	8bfb      	ldrh	r3, [r7, #30]
 8013b0e:	843b      	strh	r3, [r7, #32]
 8013b10:	e002      	b.n	8013b18 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013b12:	f04f 33ff 	mov.w	r3, #4294967295
 8013b16:	e054      	b.n	8013bc2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b1c:	2b09      	cmp	r3, #9
 8013b1e:	dd06      	ble.n	8013b2e <etharp_find_entry+0x236>
 8013b20:	4b2b      	ldr	r3, [pc, #172]	@ (8013bd0 <etharp_find_entry+0x2d8>)
 8013b22:	f240 127f 	movw	r2, #383	@ 0x17f
 8013b26:	492e      	ldr	r1, [pc, #184]	@ (8013be0 <etharp_find_entry+0x2e8>)
 8013b28:	482b      	ldr	r0, [pc, #172]	@ (8013bd8 <etharp_find_entry+0x2e0>)
 8013b2a:	f003 f867 	bl	8016bfc <iprintf>
    etharp_free_entry(i);
 8013b2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7ff fe06 	bl	8013744 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b3c:	2b09      	cmp	r3, #9
 8013b3e:	dd06      	ble.n	8013b4e <etharp_find_entry+0x256>
 8013b40:	4b23      	ldr	r3, [pc, #140]	@ (8013bd0 <etharp_find_entry+0x2d8>)
 8013b42:	f240 1283 	movw	r2, #387	@ 0x183
 8013b46:	4926      	ldr	r1, [pc, #152]	@ (8013be0 <etharp_find_entry+0x2e8>)
 8013b48:	4823      	ldr	r0, [pc, #140]	@ (8013bd8 <etharp_find_entry+0x2e0>)
 8013b4a:	f003 f857 	bl	8016bfc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013b4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b52:	491e      	ldr	r1, [pc, #120]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013b54:	4613      	mov	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	4413      	add	r3, r2
 8013b5a:	00db      	lsls	r3, r3, #3
 8013b5c:	440b      	add	r3, r1
 8013b5e:	3314      	adds	r3, #20
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d006      	beq.n	8013b74 <etharp_find_entry+0x27c>
 8013b66:	4b1a      	ldr	r3, [pc, #104]	@ (8013bd0 <etharp_find_entry+0x2d8>)
 8013b68:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013b6c:	491d      	ldr	r1, [pc, #116]	@ (8013be4 <etharp_find_entry+0x2ec>)
 8013b6e:	481a      	ldr	r0, [pc, #104]	@ (8013bd8 <etharp_find_entry+0x2e0>)
 8013b70:	f003 f844 	bl	8016bfc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d00b      	beq.n	8013b92 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013b7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6819      	ldr	r1, [r3, #0]
 8013b82:	4812      	ldr	r0, [pc, #72]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013b84:	4613      	mov	r3, r2
 8013b86:	005b      	lsls	r3, r3, #1
 8013b88:	4413      	add	r3, r2
 8013b8a:	00db      	lsls	r3, r3, #3
 8013b8c:	4403      	add	r3, r0
 8013b8e:	3304      	adds	r3, #4
 8013b90:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013b92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b96:	490d      	ldr	r1, [pc, #52]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013b98:	4613      	mov	r3, r2
 8013b9a:	005b      	lsls	r3, r3, #1
 8013b9c:	4413      	add	r3, r2
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	440b      	add	r3, r1
 8013ba2:	3312      	adds	r3, #18
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013ba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bac:	4907      	ldr	r1, [pc, #28]	@ (8013bcc <etharp_find_entry+0x2d4>)
 8013bae:	4613      	mov	r3, r2
 8013bb0:	005b      	lsls	r3, r3, #1
 8013bb2:	4413      	add	r3, r2
 8013bb4:	00db      	lsls	r3, r3, #3
 8013bb6:	440b      	add	r3, r1
 8013bb8:	3308      	adds	r3, #8
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3728      	adds	r7, #40	@ 0x28
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	20008c60 	.word	0x20008c60
 8013bd0:	08019e90 	.word	0x08019e90
 8013bd4:	08019ec8 	.word	0x08019ec8
 8013bd8:	08019f08 	.word	0x08019f08
 8013bdc:	08019f30 	.word	0x08019f30
 8013be0:	08019f48 	.word	0x08019f48
 8013be4:	08019f5c 	.word	0x08019f5c

08013be8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b088      	sub	sp, #32
 8013bec:	af02      	add	r7, sp, #8
 8013bee:	60f8      	str	r0, [r7, #12]
 8013bf0:	60b9      	str	r1, [r7, #8]
 8013bf2:	607a      	str	r2, [r7, #4]
 8013bf4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013bfc:	2b06      	cmp	r3, #6
 8013bfe:	d006      	beq.n	8013c0e <etharp_update_arp_entry+0x26>
 8013c00:	4b48      	ldr	r3, [pc, #288]	@ (8013d24 <etharp_update_arp_entry+0x13c>)
 8013c02:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013c06:	4948      	ldr	r1, [pc, #288]	@ (8013d28 <etharp_update_arp_entry+0x140>)
 8013c08:	4848      	ldr	r0, [pc, #288]	@ (8013d2c <etharp_update_arp_entry+0x144>)
 8013c0a:	f002 fff7 	bl	8016bfc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d012      	beq.n	8013c3a <etharp_update_arp_entry+0x52>
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d00e      	beq.n	8013c3a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	68f9      	ldr	r1, [r7, #12]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f001 f8fe 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 8013c28:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d105      	bne.n	8013c3a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c36:	2be0      	cmp	r3, #224	@ 0xe0
 8013c38:	d102      	bne.n	8013c40 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013c3a:	f06f 030f 	mvn.w	r3, #15
 8013c3e:	e06c      	b.n	8013d1a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013c40:	78fb      	ldrb	r3, [r7, #3]
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	4619      	mov	r1, r3
 8013c46:	68b8      	ldr	r0, [r7, #8]
 8013c48:	f7ff fe56 	bl	80138f8 <etharp_find_entry>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013c50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	da02      	bge.n	8013c5e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013c58:	8afb      	ldrh	r3, [r7, #22]
 8013c5a:	b25b      	sxtb	r3, r3
 8013c5c:	e05d      	b.n	8013d1a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013c5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c62:	4933      	ldr	r1, [pc, #204]	@ (8013d30 <etharp_update_arp_entry+0x148>)
 8013c64:	4613      	mov	r3, r2
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	4413      	add	r3, r2
 8013c6a:	00db      	lsls	r3, r3, #3
 8013c6c:	440b      	add	r3, r1
 8013c6e:	3314      	adds	r3, #20
 8013c70:	2202      	movs	r2, #2
 8013c72:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013c74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c78:	492d      	ldr	r1, [pc, #180]	@ (8013d30 <etharp_update_arp_entry+0x148>)
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	005b      	lsls	r3, r3, #1
 8013c7e:	4413      	add	r3, r2
 8013c80:	00db      	lsls	r3, r3, #3
 8013c82:	440b      	add	r3, r1
 8013c84:	3308      	adds	r3, #8
 8013c86:	68fa      	ldr	r2, [r7, #12]
 8013c88:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013c8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c8e:	4613      	mov	r3, r2
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	4413      	add	r3, r2
 8013c94:	00db      	lsls	r3, r3, #3
 8013c96:	3308      	adds	r3, #8
 8013c98:	4a25      	ldr	r2, [pc, #148]	@ (8013d30 <etharp_update_arp_entry+0x148>)
 8013c9a:	4413      	add	r3, r2
 8013c9c:	3304      	adds	r3, #4
 8013c9e:	2206      	movs	r2, #6
 8013ca0:	6879      	ldr	r1, [r7, #4]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f003 f9b7 	bl	8017016 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013ca8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cac:	4920      	ldr	r1, [pc, #128]	@ (8013d30 <etharp_update_arp_entry+0x148>)
 8013cae:	4613      	mov	r3, r2
 8013cb0:	005b      	lsls	r3, r3, #1
 8013cb2:	4413      	add	r3, r2
 8013cb4:	00db      	lsls	r3, r3, #3
 8013cb6:	440b      	add	r3, r1
 8013cb8:	3312      	adds	r3, #18
 8013cba:	2200      	movs	r2, #0
 8013cbc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013cbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cc2:	491b      	ldr	r1, [pc, #108]	@ (8013d30 <etharp_update_arp_entry+0x148>)
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	005b      	lsls	r3, r3, #1
 8013cc8:	4413      	add	r3, r2
 8013cca:	00db      	lsls	r3, r3, #3
 8013ccc:	440b      	add	r3, r1
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d021      	beq.n	8013d18 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013cd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cd8:	4915      	ldr	r1, [pc, #84]	@ (8013d30 <etharp_update_arp_entry+0x148>)
 8013cda:	4613      	mov	r3, r2
 8013cdc:	005b      	lsls	r3, r3, #1
 8013cde:	4413      	add	r3, r2
 8013ce0:	00db      	lsls	r3, r3, #3
 8013ce2:	440b      	add	r3, r1
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013ce8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cec:	4910      	ldr	r1, [pc, #64]	@ (8013d30 <etharp_update_arp_entry+0x148>)
 8013cee:	4613      	mov	r3, r2
 8013cf0:	005b      	lsls	r3, r3, #1
 8013cf2:	4413      	add	r3, r2
 8013cf4:	00db      	lsls	r3, r3, #3
 8013cf6:	440b      	add	r3, r1
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013d02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6939      	ldr	r1, [r7, #16]
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f001 ff97 	bl	8015c40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013d12:	6938      	ldr	r0, [r7, #16]
 8013d14:	f7f9 fb2c 	bl	800d370 <pbuf_free>
  }
  return ERR_OK;
 8013d18:	2300      	movs	r3, #0
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3718      	adds	r7, #24
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
 8013d22:	bf00      	nop
 8013d24:	08019e90 	.word	0x08019e90
 8013d28:	08019f88 	.word	0x08019f88
 8013d2c:	08019f08 	.word	0x08019f08
 8013d30:	20008c60 	.word	0x20008c60

08013d34 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	60fb      	str	r3, [r7, #12]
 8013d40:	e01e      	b.n	8013d80 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013d42:	4913      	ldr	r1, [pc, #76]	@ (8013d90 <etharp_cleanup_netif+0x5c>)
 8013d44:	68fa      	ldr	r2, [r7, #12]
 8013d46:	4613      	mov	r3, r2
 8013d48:	005b      	lsls	r3, r3, #1
 8013d4a:	4413      	add	r3, r2
 8013d4c:	00db      	lsls	r3, r3, #3
 8013d4e:	440b      	add	r3, r1
 8013d50:	3314      	adds	r3, #20
 8013d52:	781b      	ldrb	r3, [r3, #0]
 8013d54:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013d56:	7afb      	ldrb	r3, [r7, #11]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d00e      	beq.n	8013d7a <etharp_cleanup_netif+0x46>
 8013d5c:	490c      	ldr	r1, [pc, #48]	@ (8013d90 <etharp_cleanup_netif+0x5c>)
 8013d5e:	68fa      	ldr	r2, [r7, #12]
 8013d60:	4613      	mov	r3, r2
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	00db      	lsls	r3, r3, #3
 8013d68:	440b      	add	r3, r1
 8013d6a:	3308      	adds	r3, #8
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d102      	bne.n	8013d7a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f7ff fce5 	bl	8013744 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	60fb      	str	r3, [r7, #12]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	2b09      	cmp	r3, #9
 8013d84:	dddd      	ble.n	8013d42 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013d86:	bf00      	nop
 8013d88:	bf00      	nop
 8013d8a:	3710      	adds	r7, #16
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	20008c60 	.word	0x20008c60

08013d94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013d94:	b5b0      	push	{r4, r5, r7, lr}
 8013d96:	b08a      	sub	sp, #40	@ 0x28
 8013d98:	af04      	add	r7, sp, #16
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d107      	bne.n	8013db4 <etharp_input+0x20>
 8013da4:	4b3d      	ldr	r3, [pc, #244]	@ (8013e9c <etharp_input+0x108>)
 8013da6:	f240 228a 	movw	r2, #650	@ 0x28a
 8013daa:	493d      	ldr	r1, [pc, #244]	@ (8013ea0 <etharp_input+0x10c>)
 8013dac:	483d      	ldr	r0, [pc, #244]	@ (8013ea4 <etharp_input+0x110>)
 8013dae:	f002 ff25 	bl	8016bfc <iprintf>
 8013db2:	e06f      	b.n	8013e94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	685b      	ldr	r3, [r3, #4]
 8013db8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013dc4:	d10c      	bne.n	8013de0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013dca:	2b06      	cmp	r3, #6
 8013dcc:	d108      	bne.n	8013de0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013dd2:	2b04      	cmp	r3, #4
 8013dd4:	d104      	bne.n	8013de0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	885b      	ldrh	r3, [r3, #2]
 8013dda:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013ddc:	2b08      	cmp	r3, #8
 8013dde:	d003      	beq.n	8013de8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7f9 fac5 	bl	800d370 <pbuf_free>
    return;
 8013de6:	e055      	b.n	8013e94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	330e      	adds	r3, #14
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013df0:	693b      	ldr	r3, [r7, #16]
 8013df2:	3318      	adds	r3, #24
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	3304      	adds	r3, #4
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d102      	bne.n	8013e08 <etharp_input+0x74>
    for_us = 0;
 8013e02:	2300      	movs	r3, #0
 8013e04:	75fb      	strb	r3, [r7, #23]
 8013e06:	e009      	b.n	8013e1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013e08:	68ba      	ldr	r2, [r7, #8]
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	3304      	adds	r3, #4
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	429a      	cmp	r2, r3
 8013e12:	bf0c      	ite	eq
 8013e14:	2301      	moveq	r3, #1
 8013e16:	2300      	movne	r3, #0
 8013e18:	b2db      	uxtb	r3, r3
 8013e1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	f103 0208 	add.w	r2, r3, #8
 8013e22:	7dfb      	ldrb	r3, [r7, #23]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d001      	beq.n	8013e2c <etharp_input+0x98>
 8013e28:	2301      	movs	r3, #1
 8013e2a:	e000      	b.n	8013e2e <etharp_input+0x9a>
 8013e2c:	2302      	movs	r3, #2
 8013e2e:	f107 010c 	add.w	r1, r7, #12
 8013e32:	6838      	ldr	r0, [r7, #0]
 8013e34:	f7ff fed8 	bl	8013be8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	88db      	ldrh	r3, [r3, #6]
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013e42:	d003      	beq.n	8013e4c <etharp_input+0xb8>
 8013e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013e48:	d01e      	beq.n	8013e88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013e4a:	e020      	b.n	8013e8e <etharp_input+0xfa>
      if (for_us) {
 8013e4c:	7dfb      	ldrb	r3, [r7, #23]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d01c      	beq.n	8013e8c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013e68:	693a      	ldr	r2, [r7, #16]
 8013e6a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013e6c:	2102      	movs	r1, #2
 8013e6e:	9103      	str	r1, [sp, #12]
 8013e70:	f107 010c 	add.w	r1, r7, #12
 8013e74:	9102      	str	r1, [sp, #8]
 8013e76:	9201      	str	r2, [sp, #4]
 8013e78:	9300      	str	r3, [sp, #0]
 8013e7a:	462b      	mov	r3, r5
 8013e7c:	4622      	mov	r2, r4
 8013e7e:	4601      	mov	r1, r0
 8013e80:	6838      	ldr	r0, [r7, #0]
 8013e82:	f000 faeb 	bl	801445c <etharp_raw>
      break;
 8013e86:	e001      	b.n	8013e8c <etharp_input+0xf8>
      break;
 8013e88:	bf00      	nop
 8013e8a:	e000      	b.n	8013e8e <etharp_input+0xfa>
      break;
 8013e8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f7f9 fa6e 	bl	800d370 <pbuf_free>
}
 8013e94:	3718      	adds	r7, #24
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bdb0      	pop	{r4, r5, r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	08019e90 	.word	0x08019e90
 8013ea0:	08019fe0 	.word	0x08019fe0
 8013ea4:	08019f08 	.word	0x08019f08

08013ea8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b086      	sub	sp, #24
 8013eac:	af02      	add	r7, sp, #8
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	60b9      	str	r1, [r7, #8]
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013eb6:	79fa      	ldrb	r2, [r7, #7]
 8013eb8:	4944      	ldr	r1, [pc, #272]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013eba:	4613      	mov	r3, r2
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	4413      	add	r3, r2
 8013ec0:	00db      	lsls	r3, r3, #3
 8013ec2:	440b      	add	r3, r1
 8013ec4:	3314      	adds	r3, #20
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d806      	bhi.n	8013eda <etharp_output_to_arp_index+0x32>
 8013ecc:	4b40      	ldr	r3, [pc, #256]	@ (8013fd0 <etharp_output_to_arp_index+0x128>)
 8013ece:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013ed2:	4940      	ldr	r1, [pc, #256]	@ (8013fd4 <etharp_output_to_arp_index+0x12c>)
 8013ed4:	4840      	ldr	r0, [pc, #256]	@ (8013fd8 <etharp_output_to_arp_index+0x130>)
 8013ed6:	f002 fe91 	bl	8016bfc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013eda:	79fa      	ldrb	r2, [r7, #7]
 8013edc:	493b      	ldr	r1, [pc, #236]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013ede:	4613      	mov	r3, r2
 8013ee0:	005b      	lsls	r3, r3, #1
 8013ee2:	4413      	add	r3, r2
 8013ee4:	00db      	lsls	r3, r3, #3
 8013ee6:	440b      	add	r3, r1
 8013ee8:	3314      	adds	r3, #20
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	2b02      	cmp	r3, #2
 8013eee:	d153      	bne.n	8013f98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013ef0:	79fa      	ldrb	r2, [r7, #7]
 8013ef2:	4936      	ldr	r1, [pc, #216]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013ef4:	4613      	mov	r3, r2
 8013ef6:	005b      	lsls	r3, r3, #1
 8013ef8:	4413      	add	r3, r2
 8013efa:	00db      	lsls	r3, r3, #3
 8013efc:	440b      	add	r3, r1
 8013efe:	3312      	adds	r3, #18
 8013f00:	881b      	ldrh	r3, [r3, #0]
 8013f02:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8013f06:	d919      	bls.n	8013f3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013f08:	79fa      	ldrb	r2, [r7, #7]
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	005b      	lsls	r3, r3, #1
 8013f0e:	4413      	add	r3, r2
 8013f10:	00db      	lsls	r3, r3, #3
 8013f12:	4a2e      	ldr	r2, [pc, #184]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013f14:	4413      	add	r3, r2
 8013f16:	3304      	adds	r3, #4
 8013f18:	4619      	mov	r1, r3
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f000 fb4c 	bl	80145b8 <etharp_request>
 8013f20:	4603      	mov	r3, r0
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d138      	bne.n	8013f98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f26:	79fa      	ldrb	r2, [r7, #7]
 8013f28:	4928      	ldr	r1, [pc, #160]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	005b      	lsls	r3, r3, #1
 8013f2e:	4413      	add	r3, r2
 8013f30:	00db      	lsls	r3, r3, #3
 8013f32:	440b      	add	r3, r1
 8013f34:	3314      	adds	r3, #20
 8013f36:	2203      	movs	r2, #3
 8013f38:	701a      	strb	r2, [r3, #0]
 8013f3a:	e02d      	b.n	8013f98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013f3c:	79fa      	ldrb	r2, [r7, #7]
 8013f3e:	4923      	ldr	r1, [pc, #140]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013f40:	4613      	mov	r3, r2
 8013f42:	005b      	lsls	r3, r3, #1
 8013f44:	4413      	add	r3, r2
 8013f46:	00db      	lsls	r3, r3, #3
 8013f48:	440b      	add	r3, r1
 8013f4a:	3312      	adds	r3, #18
 8013f4c:	881b      	ldrh	r3, [r3, #0]
 8013f4e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013f52:	d321      	bcc.n	8013f98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013f54:	79fa      	ldrb	r2, [r7, #7]
 8013f56:	4613      	mov	r3, r2
 8013f58:	005b      	lsls	r3, r3, #1
 8013f5a:	4413      	add	r3, r2
 8013f5c:	00db      	lsls	r3, r3, #3
 8013f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013f60:	4413      	add	r3, r2
 8013f62:	1d19      	adds	r1, r3, #4
 8013f64:	79fa      	ldrb	r2, [r7, #7]
 8013f66:	4613      	mov	r3, r2
 8013f68:	005b      	lsls	r3, r3, #1
 8013f6a:	4413      	add	r3, r2
 8013f6c:	00db      	lsls	r3, r3, #3
 8013f6e:	3308      	adds	r3, #8
 8013f70:	4a16      	ldr	r2, [pc, #88]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013f72:	4413      	add	r3, r2
 8013f74:	3304      	adds	r3, #4
 8013f76:	461a      	mov	r2, r3
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	f000 fafb 	bl	8014574 <etharp_request_dst>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d109      	bne.n	8013f98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f84:	79fa      	ldrb	r2, [r7, #7]
 8013f86:	4911      	ldr	r1, [pc, #68]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013f88:	4613      	mov	r3, r2
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	4413      	add	r3, r2
 8013f8e:	00db      	lsls	r3, r3, #3
 8013f90:	440b      	add	r3, r1
 8013f92:	3314      	adds	r3, #20
 8013f94:	2203      	movs	r2, #3
 8013f96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8013f9e:	79fa      	ldrb	r2, [r7, #7]
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	005b      	lsls	r3, r3, #1
 8013fa4:	4413      	add	r3, r2
 8013fa6:	00db      	lsls	r3, r3, #3
 8013fa8:	3308      	adds	r3, #8
 8013faa:	4a08      	ldr	r2, [pc, #32]	@ (8013fcc <etharp_output_to_arp_index+0x124>)
 8013fac:	4413      	add	r3, r2
 8013fae:	3304      	adds	r3, #4
 8013fb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013fb4:	9200      	str	r2, [sp, #0]
 8013fb6:	460a      	mov	r2, r1
 8013fb8:	68b9      	ldr	r1, [r7, #8]
 8013fba:	68f8      	ldr	r0, [r7, #12]
 8013fbc:	f001 fe40 	bl	8015c40 <ethernet_output>
 8013fc0:	4603      	mov	r3, r0
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3710      	adds	r7, #16
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	20008c60 	.word	0x20008c60
 8013fd0:	08019e90 	.word	0x08019e90
 8013fd4:	0801a000 	.word	0x0801a000
 8013fd8:	08019f08 	.word	0x08019f08

08013fdc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b08a      	sub	sp, #40	@ 0x28
 8013fe0:	af02      	add	r7, sp, #8
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d106      	bne.n	8014000 <etharp_output+0x24>
 8013ff2:	4b73      	ldr	r3, [pc, #460]	@ (80141c0 <etharp_output+0x1e4>)
 8013ff4:	f240 321e 	movw	r2, #798	@ 0x31e
 8013ff8:	4972      	ldr	r1, [pc, #456]	@ (80141c4 <etharp_output+0x1e8>)
 8013ffa:	4873      	ldr	r0, [pc, #460]	@ (80141c8 <etharp_output+0x1ec>)
 8013ffc:	f002 fdfe 	bl	8016bfc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d106      	bne.n	8014014 <etharp_output+0x38>
 8014006:	4b6e      	ldr	r3, [pc, #440]	@ (80141c0 <etharp_output+0x1e4>)
 8014008:	f240 321f 	movw	r2, #799	@ 0x31f
 801400c:	496f      	ldr	r1, [pc, #444]	@ (80141cc <etharp_output+0x1f0>)
 801400e:	486e      	ldr	r0, [pc, #440]	@ (80141c8 <etharp_output+0x1ec>)
 8014010:	f002 fdf4 	bl	8016bfc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d106      	bne.n	8014028 <etharp_output+0x4c>
 801401a:	4b69      	ldr	r3, [pc, #420]	@ (80141c0 <etharp_output+0x1e4>)
 801401c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014020:	496b      	ldr	r1, [pc, #428]	@ (80141d0 <etharp_output+0x1f4>)
 8014022:	4869      	ldr	r0, [pc, #420]	@ (80141c8 <etharp_output+0x1ec>)
 8014024:	f002 fdea 	bl	8016bfc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	68f9      	ldr	r1, [r7, #12]
 801402e:	4618      	mov	r0, r3
 8014030:	f000 fef8 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 8014034:	4603      	mov	r3, r0
 8014036:	2b00      	cmp	r3, #0
 8014038:	d002      	beq.n	8014040 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801403a:	4b66      	ldr	r3, [pc, #408]	@ (80141d4 <etharp_output+0x1f8>)
 801403c:	61fb      	str	r3, [r7, #28]
 801403e:	e0af      	b.n	80141a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014048:	2be0      	cmp	r3, #224	@ 0xe0
 801404a:	d118      	bne.n	801407e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801404c:	2301      	movs	r3, #1
 801404e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014050:	2300      	movs	r3, #0
 8014052:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014054:	235e      	movs	r3, #94	@ 0x5e
 8014056:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	3301      	adds	r3, #1
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014062:	b2db      	uxtb	r3, r3
 8014064:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	3302      	adds	r3, #2
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	3303      	adds	r3, #3
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014076:	f107 0310 	add.w	r3, r7, #16
 801407a:	61fb      	str	r3, [r7, #28]
 801407c:	e090      	b.n	80141a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	3304      	adds	r3, #4
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	405a      	eors	r2, r3
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	3308      	adds	r3, #8
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4013      	ands	r3, r2
 8014092:	2b00      	cmp	r3, #0
 8014094:	d012      	beq.n	80140bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801409c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d00b      	beq.n	80140bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	330c      	adds	r3, #12
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d003      	beq.n	80140b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	330c      	adds	r3, #12
 80140b2:	61bb      	str	r3, [r7, #24]
 80140b4:	e002      	b.n	80140bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80140b6:	f06f 0303 	mvn.w	r3, #3
 80140ba:	e07d      	b.n	80141b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80140bc:	4b46      	ldr	r3, [pc, #280]	@ (80141d8 <etharp_output+0x1fc>)
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	4619      	mov	r1, r3
 80140c2:	4a46      	ldr	r2, [pc, #280]	@ (80141dc <etharp_output+0x200>)
 80140c4:	460b      	mov	r3, r1
 80140c6:	005b      	lsls	r3, r3, #1
 80140c8:	440b      	add	r3, r1
 80140ca:	00db      	lsls	r3, r3, #3
 80140cc:	4413      	add	r3, r2
 80140ce:	3314      	adds	r3, #20
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	d925      	bls.n	8014122 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80140d6:	4b40      	ldr	r3, [pc, #256]	@ (80141d8 <etharp_output+0x1fc>)
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	4619      	mov	r1, r3
 80140dc:	4a3f      	ldr	r2, [pc, #252]	@ (80141dc <etharp_output+0x200>)
 80140de:	460b      	mov	r3, r1
 80140e0:	005b      	lsls	r3, r3, #1
 80140e2:	440b      	add	r3, r1
 80140e4:	00db      	lsls	r3, r3, #3
 80140e6:	4413      	add	r3, r2
 80140e8:	3308      	adds	r3, #8
 80140ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80140ec:	68fa      	ldr	r2, [r7, #12]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d117      	bne.n	8014122 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	4b38      	ldr	r3, [pc, #224]	@ (80141d8 <etharp_output+0x1fc>)
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	4618      	mov	r0, r3
 80140fc:	4937      	ldr	r1, [pc, #220]	@ (80141dc <etharp_output+0x200>)
 80140fe:	4603      	mov	r3, r0
 8014100:	005b      	lsls	r3, r3, #1
 8014102:	4403      	add	r3, r0
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	440b      	add	r3, r1
 8014108:	3304      	adds	r3, #4
 801410a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801410c:	429a      	cmp	r2, r3
 801410e:	d108      	bne.n	8014122 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014110:	4b31      	ldr	r3, [pc, #196]	@ (80141d8 <etharp_output+0x1fc>)
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	461a      	mov	r2, r3
 8014116:	68b9      	ldr	r1, [r7, #8]
 8014118:	68f8      	ldr	r0, [r7, #12]
 801411a:	f7ff fec5 	bl	8013ea8 <etharp_output_to_arp_index>
 801411e:	4603      	mov	r3, r0
 8014120:	e04a      	b.n	80141b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014122:	2300      	movs	r3, #0
 8014124:	75fb      	strb	r3, [r7, #23]
 8014126:	e031      	b.n	801418c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014128:	7dfa      	ldrb	r2, [r7, #23]
 801412a:	492c      	ldr	r1, [pc, #176]	@ (80141dc <etharp_output+0x200>)
 801412c:	4613      	mov	r3, r2
 801412e:	005b      	lsls	r3, r3, #1
 8014130:	4413      	add	r3, r2
 8014132:	00db      	lsls	r3, r3, #3
 8014134:	440b      	add	r3, r1
 8014136:	3314      	adds	r3, #20
 8014138:	781b      	ldrb	r3, [r3, #0]
 801413a:	2b01      	cmp	r3, #1
 801413c:	d923      	bls.n	8014186 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801413e:	7dfa      	ldrb	r2, [r7, #23]
 8014140:	4926      	ldr	r1, [pc, #152]	@ (80141dc <etharp_output+0x200>)
 8014142:	4613      	mov	r3, r2
 8014144:	005b      	lsls	r3, r3, #1
 8014146:	4413      	add	r3, r2
 8014148:	00db      	lsls	r3, r3, #3
 801414a:	440b      	add	r3, r1
 801414c:	3308      	adds	r3, #8
 801414e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014150:	68fa      	ldr	r2, [r7, #12]
 8014152:	429a      	cmp	r2, r3
 8014154:	d117      	bne.n	8014186 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	6819      	ldr	r1, [r3, #0]
 801415a:	7dfa      	ldrb	r2, [r7, #23]
 801415c:	481f      	ldr	r0, [pc, #124]	@ (80141dc <etharp_output+0x200>)
 801415e:	4613      	mov	r3, r2
 8014160:	005b      	lsls	r3, r3, #1
 8014162:	4413      	add	r3, r2
 8014164:	00db      	lsls	r3, r3, #3
 8014166:	4403      	add	r3, r0
 8014168:	3304      	adds	r3, #4
 801416a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801416c:	4299      	cmp	r1, r3
 801416e:	d10a      	bne.n	8014186 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014170:	4a19      	ldr	r2, [pc, #100]	@ (80141d8 <etharp_output+0x1fc>)
 8014172:	7dfb      	ldrb	r3, [r7, #23]
 8014174:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014176:	7dfb      	ldrb	r3, [r7, #23]
 8014178:	461a      	mov	r2, r3
 801417a:	68b9      	ldr	r1, [r7, #8]
 801417c:	68f8      	ldr	r0, [r7, #12]
 801417e:	f7ff fe93 	bl	8013ea8 <etharp_output_to_arp_index>
 8014182:	4603      	mov	r3, r0
 8014184:	e018      	b.n	80141b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014186:	7dfb      	ldrb	r3, [r7, #23]
 8014188:	3301      	adds	r3, #1
 801418a:	75fb      	strb	r3, [r7, #23]
 801418c:	7dfb      	ldrb	r3, [r7, #23]
 801418e:	2b09      	cmp	r3, #9
 8014190:	d9ca      	bls.n	8014128 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014192:	68ba      	ldr	r2, [r7, #8]
 8014194:	69b9      	ldr	r1, [r7, #24]
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	f000 f822 	bl	80141e0 <etharp_query>
 801419c:	4603      	mov	r3, r0
 801419e:	e00b      	b.n	80141b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80141a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	68b9      	ldr	r1, [r7, #8]
 80141b0:	68f8      	ldr	r0, [r7, #12]
 80141b2:	f001 fd45 	bl	8015c40 <ethernet_output>
 80141b6:	4603      	mov	r3, r0
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3720      	adds	r7, #32
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	08019e90 	.word	0x08019e90
 80141c4:	08019fe0 	.word	0x08019fe0
 80141c8:	08019f08 	.word	0x08019f08
 80141cc:	0801a030 	.word	0x0801a030
 80141d0:	08019fd0 	.word	0x08019fd0
 80141d4:	0801adb4 	.word	0x0801adb4
 80141d8:	20008d50 	.word	0x20008d50
 80141dc:	20008c60 	.word	0x20008c60

080141e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b08c      	sub	sp, #48	@ 0x30
 80141e4:	af02      	add	r7, sp, #8
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	3326      	adds	r3, #38	@ 0x26
 80141f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80141f2:	23ff      	movs	r3, #255	@ 0xff
 80141f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80141f8:	2300      	movs	r3, #0
 80141fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	68f9      	ldr	r1, [r7, #12]
 8014202:	4618      	mov	r0, r3
 8014204:	f000 fe0e 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	d10c      	bne.n	8014228 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014216:	2be0      	cmp	r3, #224	@ 0xe0
 8014218:	d006      	beq.n	8014228 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d003      	beq.n	8014228 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d102      	bne.n	801422e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014228:	f06f 030f 	mvn.w	r3, #15
 801422c:	e101      	b.n	8014432 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801422e:	68fa      	ldr	r2, [r7, #12]
 8014230:	2101      	movs	r1, #1
 8014232:	68b8      	ldr	r0, [r7, #8]
 8014234:	f7ff fb60 	bl	80138f8 <etharp_find_entry>
 8014238:	4603      	mov	r3, r0
 801423a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801423c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014240:	2b00      	cmp	r3, #0
 8014242:	da02      	bge.n	801424a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014244:	8a7b      	ldrh	r3, [r7, #18]
 8014246:	b25b      	sxtb	r3, r3
 8014248:	e0f3      	b.n	8014432 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801424a:	8a7b      	ldrh	r3, [r7, #18]
 801424c:	2b7e      	cmp	r3, #126	@ 0x7e
 801424e:	d906      	bls.n	801425e <etharp_query+0x7e>
 8014250:	4b7a      	ldr	r3, [pc, #488]	@ (801443c <etharp_query+0x25c>)
 8014252:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014256:	497a      	ldr	r1, [pc, #488]	@ (8014440 <etharp_query+0x260>)
 8014258:	487a      	ldr	r0, [pc, #488]	@ (8014444 <etharp_query+0x264>)
 801425a:	f002 fccf 	bl	8016bfc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801425e:	8a7b      	ldrh	r3, [r7, #18]
 8014260:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014262:	7c7a      	ldrb	r2, [r7, #17]
 8014264:	4978      	ldr	r1, [pc, #480]	@ (8014448 <etharp_query+0x268>)
 8014266:	4613      	mov	r3, r2
 8014268:	005b      	lsls	r3, r3, #1
 801426a:	4413      	add	r3, r2
 801426c:	00db      	lsls	r3, r3, #3
 801426e:	440b      	add	r3, r1
 8014270:	3314      	adds	r3, #20
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d115      	bne.n	80142a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8014278:	2301      	movs	r3, #1
 801427a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801427c:	7c7a      	ldrb	r2, [r7, #17]
 801427e:	4972      	ldr	r1, [pc, #456]	@ (8014448 <etharp_query+0x268>)
 8014280:	4613      	mov	r3, r2
 8014282:	005b      	lsls	r3, r3, #1
 8014284:	4413      	add	r3, r2
 8014286:	00db      	lsls	r3, r3, #3
 8014288:	440b      	add	r3, r1
 801428a:	3314      	adds	r3, #20
 801428c:	2201      	movs	r2, #1
 801428e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014290:	7c7a      	ldrb	r2, [r7, #17]
 8014292:	496d      	ldr	r1, [pc, #436]	@ (8014448 <etharp_query+0x268>)
 8014294:	4613      	mov	r3, r2
 8014296:	005b      	lsls	r3, r3, #1
 8014298:	4413      	add	r3, r2
 801429a:	00db      	lsls	r3, r3, #3
 801429c:	440b      	add	r3, r1
 801429e:	3308      	adds	r3, #8
 80142a0:	68fa      	ldr	r2, [r7, #12]
 80142a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80142a4:	7c7a      	ldrb	r2, [r7, #17]
 80142a6:	4968      	ldr	r1, [pc, #416]	@ (8014448 <etharp_query+0x268>)
 80142a8:	4613      	mov	r3, r2
 80142aa:	005b      	lsls	r3, r3, #1
 80142ac:	4413      	add	r3, r2
 80142ae:	00db      	lsls	r3, r3, #3
 80142b0:	440b      	add	r3, r1
 80142b2:	3314      	adds	r3, #20
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	2b01      	cmp	r3, #1
 80142b8:	d011      	beq.n	80142de <etharp_query+0xfe>
 80142ba:	7c7a      	ldrb	r2, [r7, #17]
 80142bc:	4962      	ldr	r1, [pc, #392]	@ (8014448 <etharp_query+0x268>)
 80142be:	4613      	mov	r3, r2
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	4413      	add	r3, r2
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	440b      	add	r3, r1
 80142c8:	3314      	adds	r3, #20
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	d806      	bhi.n	80142de <etharp_query+0xfe>
 80142d0:	4b5a      	ldr	r3, [pc, #360]	@ (801443c <etharp_query+0x25c>)
 80142d2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80142d6:	495d      	ldr	r1, [pc, #372]	@ (801444c <etharp_query+0x26c>)
 80142d8:	485a      	ldr	r0, [pc, #360]	@ (8014444 <etharp_query+0x264>)
 80142da:	f002 fc8f 	bl	8016bfc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80142de:	6a3b      	ldr	r3, [r7, #32]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d102      	bne.n	80142ea <etharp_query+0x10a>
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d10c      	bne.n	8014304 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80142ea:	68b9      	ldr	r1, [r7, #8]
 80142ec:	68f8      	ldr	r0, [r7, #12]
 80142ee:	f000 f963 	bl	80145b8 <etharp_request>
 80142f2:	4603      	mov	r3, r0
 80142f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d102      	bne.n	8014304 <etharp_query+0x124>
      return result;
 80142fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014302:	e096      	b.n	8014432 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d106      	bne.n	8014318 <etharp_query+0x138>
 801430a:	4b4c      	ldr	r3, [pc, #304]	@ (801443c <etharp_query+0x25c>)
 801430c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014310:	494f      	ldr	r1, [pc, #316]	@ (8014450 <etharp_query+0x270>)
 8014312:	484c      	ldr	r0, [pc, #304]	@ (8014444 <etharp_query+0x264>)
 8014314:	f002 fc72 	bl	8016bfc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014318:	7c7a      	ldrb	r2, [r7, #17]
 801431a:	494b      	ldr	r1, [pc, #300]	@ (8014448 <etharp_query+0x268>)
 801431c:	4613      	mov	r3, r2
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	00db      	lsls	r3, r3, #3
 8014324:	440b      	add	r3, r1
 8014326:	3314      	adds	r3, #20
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	2b01      	cmp	r3, #1
 801432c:	d917      	bls.n	801435e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801432e:	4a49      	ldr	r2, [pc, #292]	@ (8014454 <etharp_query+0x274>)
 8014330:	7c7b      	ldrb	r3, [r7, #17]
 8014332:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014334:	7c7a      	ldrb	r2, [r7, #17]
 8014336:	4613      	mov	r3, r2
 8014338:	005b      	lsls	r3, r3, #1
 801433a:	4413      	add	r3, r2
 801433c:	00db      	lsls	r3, r3, #3
 801433e:	3308      	adds	r3, #8
 8014340:	4a41      	ldr	r2, [pc, #260]	@ (8014448 <etharp_query+0x268>)
 8014342:	4413      	add	r3, r2
 8014344:	3304      	adds	r3, #4
 8014346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801434a:	9200      	str	r2, [sp, #0]
 801434c:	697a      	ldr	r2, [r7, #20]
 801434e:	6879      	ldr	r1, [r7, #4]
 8014350:	68f8      	ldr	r0, [r7, #12]
 8014352:	f001 fc75 	bl	8015c40 <ethernet_output>
 8014356:	4603      	mov	r3, r0
 8014358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801435c:	e067      	b.n	801442e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801435e:	7c7a      	ldrb	r2, [r7, #17]
 8014360:	4939      	ldr	r1, [pc, #228]	@ (8014448 <etharp_query+0x268>)
 8014362:	4613      	mov	r3, r2
 8014364:	005b      	lsls	r3, r3, #1
 8014366:	4413      	add	r3, r2
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	440b      	add	r3, r1
 801436c:	3314      	adds	r3, #20
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	2b01      	cmp	r3, #1
 8014372:	d15c      	bne.n	801442e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014374:	2300      	movs	r3, #0
 8014376:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801437c:	e01c      	b.n	80143b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801437e:	69fb      	ldr	r3, [r7, #28]
 8014380:	895a      	ldrh	r2, [r3, #10]
 8014382:	69fb      	ldr	r3, [r7, #28]
 8014384:	891b      	ldrh	r3, [r3, #8]
 8014386:	429a      	cmp	r2, r3
 8014388:	d10a      	bne.n	80143a0 <etharp_query+0x1c0>
 801438a:	69fb      	ldr	r3, [r7, #28]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d006      	beq.n	80143a0 <etharp_query+0x1c0>
 8014392:	4b2a      	ldr	r3, [pc, #168]	@ (801443c <etharp_query+0x25c>)
 8014394:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014398:	492f      	ldr	r1, [pc, #188]	@ (8014458 <etharp_query+0x278>)
 801439a:	482a      	ldr	r0, [pc, #168]	@ (8014444 <etharp_query+0x264>)
 801439c:	f002 fc2e 	bl	8016bfc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80143a0:	69fb      	ldr	r3, [r7, #28]
 80143a2:	7b1b      	ldrb	r3, [r3, #12]
 80143a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d002      	beq.n	80143b2 <etharp_query+0x1d2>
        copy_needed = 1;
 80143ac:	2301      	movs	r3, #1
 80143ae:	61bb      	str	r3, [r7, #24]
        break;
 80143b0:	e005      	b.n	80143be <etharp_query+0x1de>
      }
      p = p->next;
 80143b2:	69fb      	ldr	r3, [r7, #28]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d1df      	bne.n	801437e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80143be:	69bb      	ldr	r3, [r7, #24]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d007      	beq.n	80143d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80143c4:	687a      	ldr	r2, [r7, #4]
 80143c6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80143ca:	200e      	movs	r0, #14
 80143cc:	f7f9 fa3c 	bl	800d848 <pbuf_clone>
 80143d0:	61f8      	str	r0, [r7, #28]
 80143d2:	e004      	b.n	80143de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80143d8:	69f8      	ldr	r0, [r7, #28]
 80143da:	f7f9 f869 	bl	800d4b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d021      	beq.n	8014428 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80143e4:	7c7a      	ldrb	r2, [r7, #17]
 80143e6:	4918      	ldr	r1, [pc, #96]	@ (8014448 <etharp_query+0x268>)
 80143e8:	4613      	mov	r3, r2
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	4413      	add	r3, r2
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	440b      	add	r3, r1
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d00a      	beq.n	801440e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80143f8:	7c7a      	ldrb	r2, [r7, #17]
 80143fa:	4913      	ldr	r1, [pc, #76]	@ (8014448 <etharp_query+0x268>)
 80143fc:	4613      	mov	r3, r2
 80143fe:	005b      	lsls	r3, r3, #1
 8014400:	4413      	add	r3, r2
 8014402:	00db      	lsls	r3, r3, #3
 8014404:	440b      	add	r3, r1
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	4618      	mov	r0, r3
 801440a:	f7f8 ffb1 	bl	800d370 <pbuf_free>
      }
      arp_table[i].q = p;
 801440e:	7c7a      	ldrb	r2, [r7, #17]
 8014410:	490d      	ldr	r1, [pc, #52]	@ (8014448 <etharp_query+0x268>)
 8014412:	4613      	mov	r3, r2
 8014414:	005b      	lsls	r3, r3, #1
 8014416:	4413      	add	r3, r2
 8014418:	00db      	lsls	r3, r3, #3
 801441a:	440b      	add	r3, r1
 801441c:	69fa      	ldr	r2, [r7, #28]
 801441e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014420:	2300      	movs	r3, #0
 8014422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014426:	e002      	b.n	801442e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014428:	23ff      	movs	r3, #255	@ 0xff
 801442a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801442e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014432:	4618      	mov	r0, r3
 8014434:	3728      	adds	r7, #40	@ 0x28
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	08019e90 	.word	0x08019e90
 8014440:	0801a03c 	.word	0x0801a03c
 8014444:	08019f08 	.word	0x08019f08
 8014448:	20008c60 	.word	0x20008c60
 801444c:	0801a04c 	.word	0x0801a04c
 8014450:	0801a030 	.word	0x0801a030
 8014454:	20008d50 	.word	0x20008d50
 8014458:	0801a074 	.word	0x0801a074

0801445c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b08a      	sub	sp, #40	@ 0x28
 8014460:	af02      	add	r7, sp, #8
 8014462:	60f8      	str	r0, [r7, #12]
 8014464:	60b9      	str	r1, [r7, #8]
 8014466:	607a      	str	r2, [r7, #4]
 8014468:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801446a:	2300      	movs	r3, #0
 801446c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d106      	bne.n	8014482 <etharp_raw+0x26>
 8014474:	4b3a      	ldr	r3, [pc, #232]	@ (8014560 <etharp_raw+0x104>)
 8014476:	f240 4257 	movw	r2, #1111	@ 0x457
 801447a:	493a      	ldr	r1, [pc, #232]	@ (8014564 <etharp_raw+0x108>)
 801447c:	483a      	ldr	r0, [pc, #232]	@ (8014568 <etharp_raw+0x10c>)
 801447e:	f002 fbbd 	bl	8016bfc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014482:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014486:	211c      	movs	r1, #28
 8014488:	200e      	movs	r0, #14
 801448a:	f7f8 fc8d 	bl	800cda8 <pbuf_alloc>
 801448e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d102      	bne.n	801449c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014496:	f04f 33ff 	mov.w	r3, #4294967295
 801449a:	e05d      	b.n	8014558 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801449c:	69bb      	ldr	r3, [r7, #24]
 801449e:	895b      	ldrh	r3, [r3, #10]
 80144a0:	2b1b      	cmp	r3, #27
 80144a2:	d806      	bhi.n	80144b2 <etharp_raw+0x56>
 80144a4:	4b2e      	ldr	r3, [pc, #184]	@ (8014560 <etharp_raw+0x104>)
 80144a6:	f240 4262 	movw	r2, #1122	@ 0x462
 80144aa:	4930      	ldr	r1, [pc, #192]	@ (801456c <etharp_raw+0x110>)
 80144ac:	482e      	ldr	r0, [pc, #184]	@ (8014568 <etharp_raw+0x10c>)
 80144ae:	f002 fba5 	bl	8016bfc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80144b2:	69bb      	ldr	r3, [r7, #24]
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80144b8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7f7 fbfa 	bl	800bcb4 <lwip_htons>
 80144c0:	4603      	mov	r3, r0
 80144c2:	461a      	mov	r2, r3
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80144ce:	2b06      	cmp	r3, #6
 80144d0:	d006      	beq.n	80144e0 <etharp_raw+0x84>
 80144d2:	4b23      	ldr	r3, [pc, #140]	@ (8014560 <etharp_raw+0x104>)
 80144d4:	f240 4269 	movw	r2, #1129	@ 0x469
 80144d8:	4925      	ldr	r1, [pc, #148]	@ (8014570 <etharp_raw+0x114>)
 80144da:	4823      	ldr	r0, [pc, #140]	@ (8014568 <etharp_raw+0x10c>)
 80144dc:	f002 fb8e 	bl	8016bfc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	3308      	adds	r3, #8
 80144e4:	2206      	movs	r2, #6
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	4618      	mov	r0, r3
 80144ea:	f002 fd94 	bl	8017016 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	3312      	adds	r3, #18
 80144f2:	2206      	movs	r2, #6
 80144f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80144f6:	4618      	mov	r0, r3
 80144f8:	f002 fd8d 	bl	8017016 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	330e      	adds	r3, #14
 8014500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014502:	6812      	ldr	r2, [r2, #0]
 8014504:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014506:	697b      	ldr	r3, [r7, #20]
 8014508:	3318      	adds	r3, #24
 801450a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801450c:	6812      	ldr	r2, [r2, #0]
 801450e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	2200      	movs	r2, #0
 8014514:	701a      	strb	r2, [r3, #0]
 8014516:	2200      	movs	r2, #0
 8014518:	f042 0201 	orr.w	r2, r2, #1
 801451c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	2200      	movs	r2, #0
 8014522:	f042 0208 	orr.w	r2, r2, #8
 8014526:	709a      	strb	r2, [r3, #2]
 8014528:	2200      	movs	r2, #0
 801452a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	2206      	movs	r2, #6
 8014530:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	2204      	movs	r2, #4
 8014536:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014538:	f640 0306 	movw	r3, #2054	@ 0x806
 801453c:	9300      	str	r3, [sp, #0]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	68ba      	ldr	r2, [r7, #8]
 8014542:	69b9      	ldr	r1, [r7, #24]
 8014544:	68f8      	ldr	r0, [r7, #12]
 8014546:	f001 fb7b 	bl	8015c40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801454a:	69b8      	ldr	r0, [r7, #24]
 801454c:	f7f8 ff10 	bl	800d370 <pbuf_free>
  p = NULL;
 8014550:	2300      	movs	r3, #0
 8014552:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014554:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014558:	4618      	mov	r0, r3
 801455a:	3720      	adds	r7, #32
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	08019e90 	.word	0x08019e90
 8014564:	08019fe0 	.word	0x08019fe0
 8014568:	08019f08 	.word	0x08019f08
 801456c:	0801a090 	.word	0x0801a090
 8014570:	0801a0c4 	.word	0x0801a0c4

08014574 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b088      	sub	sp, #32
 8014578:	af04      	add	r7, sp, #16
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	60b9      	str	r1, [r7, #8]
 801457e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014590:	2201      	movs	r2, #1
 8014592:	9203      	str	r2, [sp, #12]
 8014594:	68ba      	ldr	r2, [r7, #8]
 8014596:	9202      	str	r2, [sp, #8]
 8014598:	4a06      	ldr	r2, [pc, #24]	@ (80145b4 <etharp_request_dst+0x40>)
 801459a:	9201      	str	r2, [sp, #4]
 801459c:	9300      	str	r3, [sp, #0]
 801459e:	4603      	mov	r3, r0
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	68f8      	ldr	r0, [r7, #12]
 80145a4:	f7ff ff5a 	bl	801445c <etharp_raw>
 80145a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3710      	adds	r7, #16
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	0801adbc 	.word	0x0801adbc

080145b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80145c2:	4a05      	ldr	r2, [pc, #20]	@ (80145d8 <etharp_request+0x20>)
 80145c4:	6839      	ldr	r1, [r7, #0]
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f7ff ffd4 	bl	8014574 <etharp_request_dst>
 80145cc:	4603      	mov	r3, r0
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3708      	adds	r7, #8
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	bf00      	nop
 80145d8:	0801adb4 	.word	0x0801adb4

080145dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b08e      	sub	sp, #56	@ 0x38
 80145e0:	af04      	add	r7, sp, #16
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80145e6:	4b79      	ldr	r3, [pc, #484]	@ (80147cc <icmp_input+0x1f0>)
 80145e8:	689b      	ldr	r3, [r3, #8]
 80145ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80145ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	f003 030f 	and.w	r3, r3, #15
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	009b      	lsls	r3, r3, #2
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80145fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80145fe:	2b13      	cmp	r3, #19
 8014600:	f240 80cd 	bls.w	801479e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	895b      	ldrh	r3, [r3, #10]
 8014608:	2b03      	cmp	r3, #3
 801460a:	f240 80ca 	bls.w	80147a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014618:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801461c:	2b00      	cmp	r3, #0
 801461e:	f000 80b7 	beq.w	8014790 <icmp_input+0x1b4>
 8014622:	2b08      	cmp	r3, #8
 8014624:	f040 80b7 	bne.w	8014796 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014628:	4b69      	ldr	r3, [pc, #420]	@ (80147d0 <icmp_input+0x1f4>)
 801462a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801462c:	4b67      	ldr	r3, [pc, #412]	@ (80147cc <icmp_input+0x1f0>)
 801462e:	695b      	ldr	r3, [r3, #20]
 8014630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014634:	2be0      	cmp	r3, #224	@ 0xe0
 8014636:	f000 80bb 	beq.w	80147b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801463a:	4b64      	ldr	r3, [pc, #400]	@ (80147cc <icmp_input+0x1f0>)
 801463c:	695b      	ldr	r3, [r3, #20]
 801463e:	4a63      	ldr	r2, [pc, #396]	@ (80147cc <icmp_input+0x1f0>)
 8014640:	6812      	ldr	r2, [r2, #0]
 8014642:	4611      	mov	r1, r2
 8014644:	4618      	mov	r0, r3
 8014646:	f000 fbed 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 801464a:	4603      	mov	r3, r0
 801464c:	2b00      	cmp	r3, #0
 801464e:	f040 80b1 	bne.w	80147b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	891b      	ldrh	r3, [r3, #8]
 8014656:	2b07      	cmp	r3, #7
 8014658:	f240 80a5 	bls.w	80147a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801465c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801465e:	330e      	adds	r3, #14
 8014660:	4619      	mov	r1, r3
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7f8 fdee 	bl	800d244 <pbuf_add_header>
 8014668:	4603      	mov	r3, r0
 801466a:	2b00      	cmp	r3, #0
 801466c:	d04b      	beq.n	8014706 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	891a      	ldrh	r2, [r3, #8]
 8014672:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014674:	4413      	add	r3, r2
 8014676:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	891b      	ldrh	r3, [r3, #8]
 801467c:	8b7a      	ldrh	r2, [r7, #26]
 801467e:	429a      	cmp	r2, r3
 8014680:	f0c0 809a 	bcc.w	80147b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014684:	8b7b      	ldrh	r3, [r7, #26]
 8014686:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801468a:	4619      	mov	r1, r3
 801468c:	200e      	movs	r0, #14
 801468e:	f7f8 fb8b 	bl	800cda8 <pbuf_alloc>
 8014692:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	2b00      	cmp	r3, #0
 8014698:	f000 8090 	beq.w	80147bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	895b      	ldrh	r3, [r3, #10]
 80146a0:	461a      	mov	r2, r3
 80146a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146a4:	3308      	adds	r3, #8
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d203      	bcs.n	80146b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80146aa:	6978      	ldr	r0, [r7, #20]
 80146ac:	f7f8 fe60 	bl	800d370 <pbuf_free>
          goto icmperr;
 80146b0:	e085      	b.n	80147be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80146b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80146ba:	4618      	mov	r0, r3
 80146bc:	f002 fcab 	bl	8017016 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80146c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146c2:	4619      	mov	r1, r3
 80146c4:	6978      	ldr	r0, [r7, #20]
 80146c6:	f7f8 fdcd 	bl	800d264 <pbuf_remove_header>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d009      	beq.n	80146e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80146d0:	4b40      	ldr	r3, [pc, #256]	@ (80147d4 <icmp_input+0x1f8>)
 80146d2:	22b6      	movs	r2, #182	@ 0xb6
 80146d4:	4940      	ldr	r1, [pc, #256]	@ (80147d8 <icmp_input+0x1fc>)
 80146d6:	4841      	ldr	r0, [pc, #260]	@ (80147dc <icmp_input+0x200>)
 80146d8:	f002 fa90 	bl	8016bfc <iprintf>
          pbuf_free(r);
 80146dc:	6978      	ldr	r0, [r7, #20]
 80146de:	f7f8 fe47 	bl	800d370 <pbuf_free>
          goto icmperr;
 80146e2:	e06c      	b.n	80147be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80146e4:	6879      	ldr	r1, [r7, #4]
 80146e6:	6978      	ldr	r0, [r7, #20]
 80146e8:	f7f8 ff6a 	bl	800d5c0 <pbuf_copy>
 80146ec:	4603      	mov	r3, r0
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d003      	beq.n	80146fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80146f2:	6978      	ldr	r0, [r7, #20]
 80146f4:	f7f8 fe3c 	bl	800d370 <pbuf_free>
          goto icmperr;
 80146f8:	e061      	b.n	80147be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f7f8 fe38 	bl	800d370 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	607b      	str	r3, [r7, #4]
 8014704:	e00f      	b.n	8014726 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014706:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014708:	330e      	adds	r3, #14
 801470a:	4619      	mov	r1, r3
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f7f8 fda9 	bl	800d264 <pbuf_remove_header>
 8014712:	4603      	mov	r3, r0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d006      	beq.n	8014726 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014718:	4b2e      	ldr	r3, [pc, #184]	@ (80147d4 <icmp_input+0x1f8>)
 801471a:	22c7      	movs	r2, #199	@ 0xc7
 801471c:	4930      	ldr	r1, [pc, #192]	@ (80147e0 <icmp_input+0x204>)
 801471e:	482f      	ldr	r0, [pc, #188]	@ (80147dc <icmp_input+0x200>)
 8014720:	f002 fa6c 	bl	8016bfc <iprintf>
          goto icmperr;
 8014724:	e04b      	b.n	80147be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801472c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801472e:	4619      	mov	r1, r3
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7f8 fd87 	bl	800d244 <pbuf_add_header>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d12b      	bne.n	8014794 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014742:	69fb      	ldr	r3, [r7, #28]
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801474a:	4b20      	ldr	r3, [pc, #128]	@ (80147cc <icmp_input+0x1f0>)
 801474c:	691a      	ldr	r2, [r3, #16]
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	2200      	movs	r2, #0
 8014756:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	2200      	movs	r2, #0
 801475c:	709a      	strb	r2, [r3, #2]
 801475e:	2200      	movs	r2, #0
 8014760:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	22ff      	movs	r2, #255	@ 0xff
 8014766:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	2200      	movs	r2, #0
 801476c:	729a      	strb	r2, [r3, #10]
 801476e:	2200      	movs	r2, #0
 8014770:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	9302      	str	r3, [sp, #8]
 8014776:	2301      	movs	r3, #1
 8014778:	9301      	str	r3, [sp, #4]
 801477a:	2300      	movs	r3, #0
 801477c:	9300      	str	r3, [sp, #0]
 801477e:	23ff      	movs	r3, #255	@ 0xff
 8014780:	2200      	movs	r2, #0
 8014782:	69f9      	ldr	r1, [r7, #28]
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f000 fa75 	bl	8014c74 <ip4_output_if>
 801478a:	4603      	mov	r3, r0
 801478c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801478e:	e001      	b.n	8014794 <icmp_input+0x1b8>
      break;
 8014790:	bf00      	nop
 8014792:	e000      	b.n	8014796 <icmp_input+0x1ba>
      break;
 8014794:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f7f8 fdea 	bl	800d370 <pbuf_free>
  return;
 801479c:	e013      	b.n	80147c6 <icmp_input+0x1ea>
    goto lenerr;
 801479e:	bf00      	nop
 80147a0:	e002      	b.n	80147a8 <icmp_input+0x1cc>
    goto lenerr;
 80147a2:	bf00      	nop
 80147a4:	e000      	b.n	80147a8 <icmp_input+0x1cc>
        goto lenerr;
 80147a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f7f8 fde1 	bl	800d370 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147ae:	e00a      	b.n	80147c6 <icmp_input+0x1ea>
        goto icmperr;
 80147b0:	bf00      	nop
 80147b2:	e004      	b.n	80147be <icmp_input+0x1e2>
        goto icmperr;
 80147b4:	bf00      	nop
 80147b6:	e002      	b.n	80147be <icmp_input+0x1e2>
          goto icmperr;
 80147b8:	bf00      	nop
 80147ba:	e000      	b.n	80147be <icmp_input+0x1e2>
          goto icmperr;
 80147bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7f8 fdd6 	bl	800d370 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80147c6:	3728      	adds	r7, #40	@ 0x28
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	20005690 	.word	0x20005690
 80147d0:	200056a4 	.word	0x200056a4
 80147d4:	0801a108 	.word	0x0801a108
 80147d8:	0801a140 	.word	0x0801a140
 80147dc:	0801a178 	.word	0x0801a178
 80147e0:	0801a1a0 	.word	0x0801a1a0

080147e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	460b      	mov	r3, r1
 80147ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80147f0:	78fb      	ldrb	r3, [r7, #3]
 80147f2:	461a      	mov	r2, r3
 80147f4:	2103      	movs	r1, #3
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f000 f814 	bl	8014824 <icmp_send_response>
}
 80147fc:	bf00      	nop
 80147fe:	3708      	adds	r7, #8
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}

08014804 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	460b      	mov	r3, r1
 801480e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014810:	78fb      	ldrb	r3, [r7, #3]
 8014812:	461a      	mov	r2, r3
 8014814:	210b      	movs	r1, #11
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 f804 	bl	8014824 <icmp_send_response>
}
 801481c:	bf00      	nop
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}

08014824 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b08c      	sub	sp, #48	@ 0x30
 8014828:	af04      	add	r7, sp, #16
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	460b      	mov	r3, r1
 801482e:	70fb      	strb	r3, [r7, #3]
 8014830:	4613      	mov	r3, r2
 8014832:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014834:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014838:	2124      	movs	r1, #36	@ 0x24
 801483a:	2022      	movs	r0, #34	@ 0x22
 801483c:	f7f8 fab4 	bl	800cda8 <pbuf_alloc>
 8014840:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014842:	69fb      	ldr	r3, [r7, #28]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d04c      	beq.n	80148e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014848:	69fb      	ldr	r3, [r7, #28]
 801484a:	895b      	ldrh	r3, [r3, #10]
 801484c:	2b23      	cmp	r3, #35	@ 0x23
 801484e:	d806      	bhi.n	801485e <icmp_send_response+0x3a>
 8014850:	4b26      	ldr	r3, [pc, #152]	@ (80148ec <icmp_send_response+0xc8>)
 8014852:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014856:	4926      	ldr	r1, [pc, #152]	@ (80148f0 <icmp_send_response+0xcc>)
 8014858:	4826      	ldr	r0, [pc, #152]	@ (80148f4 <icmp_send_response+0xd0>)
 801485a:	f002 f9cf 	bl	8016bfc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	685b      	ldr	r3, [r3, #4]
 8014868:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	78fa      	ldrb	r2, [r7, #3]
 801486e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	78ba      	ldrb	r2, [r7, #2]
 8014874:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	2200      	movs	r2, #0
 801487a:	711a      	strb	r2, [r3, #4]
 801487c:	2200      	movs	r2, #0
 801487e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	2200      	movs	r2, #0
 8014884:	719a      	strb	r2, [r3, #6]
 8014886:	2200      	movs	r2, #0
 8014888:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	f103 0008 	add.w	r0, r3, #8
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	221c      	movs	r2, #28
 8014898:	4619      	mov	r1, r3
 801489a:	f002 fbbc 	bl	8017016 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801489e:	69bb      	ldr	r3, [r7, #24]
 80148a0:	68db      	ldr	r3, [r3, #12]
 80148a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80148a4:	f107 030c 	add.w	r3, r7, #12
 80148a8:	4618      	mov	r0, r3
 80148aa:	f000 f825 	bl	80148f8 <ip4_route>
 80148ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d011      	beq.n	80148da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	2200      	movs	r2, #0
 80148ba:	709a      	strb	r2, [r3, #2]
 80148bc:	2200      	movs	r2, #0
 80148be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80148c0:	f107 020c 	add.w	r2, r7, #12
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	9302      	str	r3, [sp, #8]
 80148c8:	2301      	movs	r3, #1
 80148ca:	9301      	str	r3, [sp, #4]
 80148cc:	2300      	movs	r3, #0
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	23ff      	movs	r3, #255	@ 0xff
 80148d2:	2100      	movs	r1, #0
 80148d4:	69f8      	ldr	r0, [r7, #28]
 80148d6:	f000 f9cd 	bl	8014c74 <ip4_output_if>
  }
  pbuf_free(q);
 80148da:	69f8      	ldr	r0, [r7, #28]
 80148dc:	f7f8 fd48 	bl	800d370 <pbuf_free>
 80148e0:	e000      	b.n	80148e4 <icmp_send_response+0xc0>
    return;
 80148e2:	bf00      	nop
}
 80148e4:	3720      	adds	r7, #32
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	0801a108 	.word	0x0801a108
 80148f0:	0801a1d4 	.word	0x0801a1d4
 80148f4:	0801a178 	.word	0x0801a178

080148f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014900:	4b33      	ldr	r3, [pc, #204]	@ (80149d0 <ip4_route+0xd8>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	60fb      	str	r3, [r7, #12]
 8014906:	e036      	b.n	8014976 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801490e:	f003 0301 	and.w	r3, r3, #1
 8014912:	b2db      	uxtb	r3, r3
 8014914:	2b00      	cmp	r3, #0
 8014916:	d02b      	beq.n	8014970 <ip4_route+0x78>
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801491e:	089b      	lsrs	r3, r3, #2
 8014920:	f003 0301 	and.w	r3, r3, #1
 8014924:	b2db      	uxtb	r3, r3
 8014926:	2b00      	cmp	r3, #0
 8014928:	d022      	beq.n	8014970 <ip4_route+0x78>
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	3304      	adds	r3, #4
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d01d      	beq.n	8014970 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	3304      	adds	r3, #4
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	405a      	eors	r2, r3
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	3308      	adds	r3, #8
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	4013      	ands	r3, r2
 8014948:	2b00      	cmp	r3, #0
 801494a:	d101      	bne.n	8014950 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	e038      	b.n	80149c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014956:	f003 0302 	and.w	r3, r3, #2
 801495a:	2b00      	cmp	r3, #0
 801495c:	d108      	bne.n	8014970 <ip4_route+0x78>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	330c      	adds	r3, #12
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	429a      	cmp	r2, r3
 801496a:	d101      	bne.n	8014970 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	e028      	b.n	80149c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	60fb      	str	r3, [r7, #12]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d1c5      	bne.n	8014908 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801497c:	4b15      	ldr	r3, [pc, #84]	@ (80149d4 <ip4_route+0xdc>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d01a      	beq.n	80149ba <ip4_route+0xc2>
 8014984:	4b13      	ldr	r3, [pc, #76]	@ (80149d4 <ip4_route+0xdc>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801498c:	f003 0301 	and.w	r3, r3, #1
 8014990:	2b00      	cmp	r3, #0
 8014992:	d012      	beq.n	80149ba <ip4_route+0xc2>
 8014994:	4b0f      	ldr	r3, [pc, #60]	@ (80149d4 <ip4_route+0xdc>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801499c:	f003 0304 	and.w	r3, r3, #4
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d00a      	beq.n	80149ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149a4:	4b0b      	ldr	r3, [pc, #44]	@ (80149d4 <ip4_route+0xdc>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	3304      	adds	r3, #4
 80149aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d004      	beq.n	80149ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80149b8:	d101      	bne.n	80149be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80149ba:	2300      	movs	r3, #0
 80149bc:	e001      	b.n	80149c2 <ip4_route+0xca>
  }

  return netif_default;
 80149be:	4b05      	ldr	r3, [pc, #20]	@ (80149d4 <ip4_route+0xdc>)
 80149c0:	681b      	ldr	r3, [r3, #0]
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3714      	adds	r7, #20
 80149c6:	46bd      	mov	sp, r7
 80149c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	20008bf4 	.word	0x20008bf4
 80149d4:	20008bf8 	.word	0x20008bf8

080149d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149e6:	f003 0301 	and.w	r3, r3, #1
 80149ea:	b2db      	uxtb	r3, r3
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d016      	beq.n	8014a1e <ip4_input_accept+0x46>
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	3304      	adds	r3, #4
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d011      	beq.n	8014a1e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80149fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014a28 <ip4_input_accept+0x50>)
 80149fc:	695a      	ldr	r2, [r3, #20]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	3304      	adds	r3, #4
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d008      	beq.n	8014a1a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014a08:	4b07      	ldr	r3, [pc, #28]	@ (8014a28 <ip4_input_accept+0x50>)
 8014a0a:	695b      	ldr	r3, [r3, #20]
 8014a0c:	6879      	ldr	r1, [r7, #4]
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f000 fa08 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 8014a14:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d001      	beq.n	8014a1e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	e000      	b.n	8014a20 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014a1e:	2300      	movs	r3, #0
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3708      	adds	r7, #8
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	20005690 	.word	0x20005690

08014a2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b086      	sub	sp, #24
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	091b      	lsrs	r3, r3, #4
 8014a42:	b2db      	uxtb	r3, r3
 8014a44:	2b04      	cmp	r3, #4
 8014a46:	d004      	beq.n	8014a52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f7f8 fc91 	bl	800d370 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	e107      	b.n	8014c62 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	f003 030f 	and.w	r3, r3, #15
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	009b      	lsls	r3, r3, #2
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	885b      	ldrh	r3, [r3, #2]
 8014a66:	b29b      	uxth	r3, r3
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7f7 f923 	bl	800bcb4 <lwip_htons>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	891b      	ldrh	r3, [r3, #8]
 8014a76:	89ba      	ldrh	r2, [r7, #12]
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d204      	bcs.n	8014a86 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014a7c:	89bb      	ldrh	r3, [r7, #12]
 8014a7e:	4619      	mov	r1, r3
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f7f8 faef 	bl	800d064 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	895b      	ldrh	r3, [r3, #10]
 8014a8a:	89fa      	ldrh	r2, [r7, #14]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d807      	bhi.n	8014aa0 <ip4_input+0x74>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	891b      	ldrh	r3, [r3, #8]
 8014a94:	89ba      	ldrh	r2, [r7, #12]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d802      	bhi.n	8014aa0 <ip4_input+0x74>
 8014a9a:	89fb      	ldrh	r3, [r7, #14]
 8014a9c:	2b13      	cmp	r3, #19
 8014a9e:	d804      	bhi.n	8014aaa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f7f8 fc65 	bl	800d370 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	e0db      	b.n	8014c62 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	691b      	ldr	r3, [r3, #16]
 8014aae:	4a6f      	ldr	r2, [pc, #444]	@ (8014c6c <ip4_input+0x240>)
 8014ab0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	68db      	ldr	r3, [r3, #12]
 8014ab6:	4a6d      	ldr	r2, [pc, #436]	@ (8014c6c <ip4_input+0x240>)
 8014ab8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014aba:	4b6c      	ldr	r3, [pc, #432]	@ (8014c6c <ip4_input+0x240>)
 8014abc:	695b      	ldr	r3, [r3, #20]
 8014abe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014ac2:	2be0      	cmp	r3, #224	@ 0xe0
 8014ac4:	d112      	bne.n	8014aec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014acc:	f003 0301 	and.w	r3, r3, #1
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d007      	beq.n	8014ae6 <ip4_input+0xba>
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	3304      	adds	r3, #4
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <ip4_input+0xba>
      netif = inp;
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	613b      	str	r3, [r7, #16]
 8014ae4:	e02a      	b.n	8014b3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	613b      	str	r3, [r7, #16]
 8014aea:	e027      	b.n	8014b3c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014aec:	6838      	ldr	r0, [r7, #0]
 8014aee:	f7ff ff73 	bl	80149d8 <ip4_input_accept>
 8014af2:	4603      	mov	r3, r0
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <ip4_input+0xd2>
      netif = inp;
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	613b      	str	r3, [r7, #16]
 8014afc:	e01e      	b.n	8014b3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014afe:	2300      	movs	r3, #0
 8014b00:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014b02:	4b5a      	ldr	r3, [pc, #360]	@ (8014c6c <ip4_input+0x240>)
 8014b04:	695b      	ldr	r3, [r3, #20]
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	2b7f      	cmp	r3, #127	@ 0x7f
 8014b0a:	d017      	beq.n	8014b3c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014b0c:	4b58      	ldr	r3, [pc, #352]	@ (8014c70 <ip4_input+0x244>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	613b      	str	r3, [r7, #16]
 8014b12:	e00e      	b.n	8014b32 <ip4_input+0x106>
          if (netif == inp) {
 8014b14:	693a      	ldr	r2, [r7, #16]
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d006      	beq.n	8014b2a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014b1c:	6938      	ldr	r0, [r7, #16]
 8014b1e:	f7ff ff5b 	bl	80149d8 <ip4_input_accept>
 8014b22:	4603      	mov	r3, r0
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d108      	bne.n	8014b3a <ip4_input+0x10e>
 8014b28:	e000      	b.n	8014b2c <ip4_input+0x100>
            continue;
 8014b2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	613b      	str	r3, [r7, #16]
 8014b32:	693b      	ldr	r3, [r7, #16]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1ed      	bne.n	8014b14 <ip4_input+0xe8>
 8014b38:	e000      	b.n	8014b3c <ip4_input+0x110>
            break;
 8014b3a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8014c6c <ip4_input+0x240>)
 8014b3e:	691b      	ldr	r3, [r3, #16]
 8014b40:	6839      	ldr	r1, [r7, #0]
 8014b42:	4618      	mov	r0, r3
 8014b44:	f000 f96e 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d105      	bne.n	8014b5a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014b4e:	4b47      	ldr	r3, [pc, #284]	@ (8014c6c <ip4_input+0x240>)
 8014b50:	691b      	ldr	r3, [r3, #16]
 8014b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b56:	2be0      	cmp	r3, #224	@ 0xe0
 8014b58:	d104      	bne.n	8014b64 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014b5a:	6878      	ldr	r0, [r7, #4]
 8014b5c:	f7f8 fc08 	bl	800d370 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014b60:	2300      	movs	r3, #0
 8014b62:	e07e      	b.n	8014c62 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014b64:	693b      	ldr	r3, [r7, #16]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d104      	bne.n	8014b74 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f7f8 fc00 	bl	800d370 <pbuf_free>
    return ERR_OK;
 8014b70:	2300      	movs	r3, #0
 8014b72:	e076      	b.n	8014c62 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	88db      	ldrh	r3, [r3, #6]
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014b80:	4013      	ands	r3, r2
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d00b      	beq.n	8014b9e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f000 fc92 	bl	80154b0 <ip4_reass>
 8014b8c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d101      	bne.n	8014b98 <ip4_input+0x16c>
      return ERR_OK;
 8014b94:	2300      	movs	r3, #0
 8014b96:	e064      	b.n	8014c62 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014b9e:	4a33      	ldr	r2, [pc, #204]	@ (8014c6c <ip4_input+0x240>)
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014ba4:	4a31      	ldr	r2, [pc, #196]	@ (8014c6c <ip4_input+0x240>)
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014baa:	4a30      	ldr	r2, [pc, #192]	@ (8014c6c <ip4_input+0x240>)
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	f003 030f 	and.w	r3, r3, #15
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	009b      	lsls	r3, r3, #2
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8014c6c <ip4_input+0x240>)
 8014bc2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014bc4:	89fb      	ldrh	r3, [r7, #14]
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f7f8 fb4b 	bl	800d264 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	7a5b      	ldrb	r3, [r3, #9]
 8014bd2:	2b11      	cmp	r3, #17
 8014bd4:	d006      	beq.n	8014be4 <ip4_input+0x1b8>
 8014bd6:	2b11      	cmp	r3, #17
 8014bd8:	dc13      	bgt.n	8014c02 <ip4_input+0x1d6>
 8014bda:	2b01      	cmp	r3, #1
 8014bdc:	d00c      	beq.n	8014bf8 <ip4_input+0x1cc>
 8014bde:	2b06      	cmp	r3, #6
 8014be0:	d005      	beq.n	8014bee <ip4_input+0x1c2>
 8014be2:	e00e      	b.n	8014c02 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014be4:	6839      	ldr	r1, [r7, #0]
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f7fe f9b0 	bl	8012f4c <udp_input>
        break;
 8014bec:	e026      	b.n	8014c3c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014bee:	6839      	ldr	r1, [r7, #0]
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7fa f9f7 	bl	800efe4 <tcp_input>
        break;
 8014bf6:	e021      	b.n	8014c3c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014bf8:	6839      	ldr	r1, [r7, #0]
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f7ff fcee 	bl	80145dc <icmp_input>
        break;
 8014c00:	e01c      	b.n	8014c3c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c02:	4b1a      	ldr	r3, [pc, #104]	@ (8014c6c <ip4_input+0x240>)
 8014c04:	695b      	ldr	r3, [r3, #20]
 8014c06:	6939      	ldr	r1, [r7, #16]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f000 f90b 	bl	8014e24 <ip4_addr_isbroadcast_u32>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d10f      	bne.n	8014c34 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c14:	4b15      	ldr	r3, [pc, #84]	@ (8014c6c <ip4_input+0x240>)
 8014c16:	695b      	ldr	r3, [r3, #20]
 8014c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c1c:	2be0      	cmp	r3, #224	@ 0xe0
 8014c1e:	d009      	beq.n	8014c34 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c24:	4619      	mov	r1, r3
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7f8 fb8f 	bl	800d34a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014c2c:	2102      	movs	r1, #2
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7ff fdd8 	bl	80147e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f7f8 fb9b 	bl	800d370 <pbuf_free>
        break;
 8014c3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8014c6c <ip4_input+0x240>)
 8014c3e:	2200      	movs	r2, #0
 8014c40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014c42:	4b0a      	ldr	r3, [pc, #40]	@ (8014c6c <ip4_input+0x240>)
 8014c44:	2200      	movs	r2, #0
 8014c46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014c48:	4b08      	ldr	r3, [pc, #32]	@ (8014c6c <ip4_input+0x240>)
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014c4e:	4b07      	ldr	r3, [pc, #28]	@ (8014c6c <ip4_input+0x240>)
 8014c50:	2200      	movs	r2, #0
 8014c52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014c54:	4b05      	ldr	r3, [pc, #20]	@ (8014c6c <ip4_input+0x240>)
 8014c56:	2200      	movs	r2, #0
 8014c58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014c5a:	4b04      	ldr	r3, [pc, #16]	@ (8014c6c <ip4_input+0x240>)
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014c60:	2300      	movs	r3, #0
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3718      	adds	r7, #24
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	20005690 	.word	0x20005690
 8014c70:	20008bf4 	.word	0x20008bf4

08014c74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b08a      	sub	sp, #40	@ 0x28
 8014c78:	af04      	add	r7, sp, #16
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
 8014c80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d009      	beq.n	8014ca0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d003      	beq.n	8014c9a <ip4_output_if+0x26>
 8014c92:	68bb      	ldr	r3, [r7, #8]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d102      	bne.n	8014ca0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c9c:	3304      	adds	r3, #4
 8014c9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014ca0:	78fa      	ldrb	r2, [r7, #3]
 8014ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca4:	9302      	str	r3, [sp, #8]
 8014ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014caa:	9301      	str	r3, [sp, #4]
 8014cac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cb0:	9300      	str	r3, [sp, #0]
 8014cb2:	4613      	mov	r3, r2
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	6979      	ldr	r1, [r7, #20]
 8014cb8:	68f8      	ldr	r0, [r7, #12]
 8014cba:	f000 f805 	bl	8014cc8 <ip4_output_if_src>
 8014cbe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3718      	adds	r7, #24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b088      	sub	sp, #32
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	607a      	str	r2, [r7, #4]
 8014cd4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	7b9b      	ldrb	r3, [r3, #14]
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d006      	beq.n	8014cec <ip4_output_if_src+0x24>
 8014cde:	4b4b      	ldr	r3, [pc, #300]	@ (8014e0c <ip4_output_if_src+0x144>)
 8014ce0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014ce4:	494a      	ldr	r1, [pc, #296]	@ (8014e10 <ip4_output_if_src+0x148>)
 8014ce6:	484b      	ldr	r0, [pc, #300]	@ (8014e14 <ip4_output_if_src+0x14c>)
 8014ce8:	f001 ff88 	bl	8016bfc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d060      	beq.n	8014db4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014cf2:	2314      	movs	r3, #20
 8014cf4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014cf6:	2114      	movs	r1, #20
 8014cf8:	68f8      	ldr	r0, [r7, #12]
 8014cfa:	f7f8 faa3 	bl	800d244 <pbuf_add_header>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d002      	beq.n	8014d0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014d04:	f06f 0301 	mvn.w	r3, #1
 8014d08:	e07c      	b.n	8014e04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	685b      	ldr	r3, [r3, #4]
 8014d0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	895b      	ldrh	r3, [r3, #10]
 8014d14:	2b13      	cmp	r3, #19
 8014d16:	d806      	bhi.n	8014d26 <ip4_output_if_src+0x5e>
 8014d18:	4b3c      	ldr	r3, [pc, #240]	@ (8014e0c <ip4_output_if_src+0x144>)
 8014d1a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014d1e:	493e      	ldr	r1, [pc, #248]	@ (8014e18 <ip4_output_if_src+0x150>)
 8014d20:	483c      	ldr	r0, [pc, #240]	@ (8014e14 <ip4_output_if_src+0x14c>)
 8014d22:	f001 ff6b 	bl	8016bfc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014d26:	69fb      	ldr	r3, [r7, #28]
 8014d28:	78fa      	ldrb	r2, [r7, #3]
 8014d2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014d2c:	69fb      	ldr	r3, [r7, #28]
 8014d2e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014d32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	69fb      	ldr	r3, [r7, #28]
 8014d3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014d3c:	8b7b      	ldrh	r3, [r7, #26]
 8014d3e:	089b      	lsrs	r3, r3, #2
 8014d40:	b29b      	uxth	r3, r3
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d48:	b2da      	uxtb	r2, r3
 8014d4a:	69fb      	ldr	r3, [r7, #28]
 8014d4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014d4e:	69fb      	ldr	r3, [r7, #28]
 8014d50:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014d54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	891b      	ldrh	r3, [r3, #8]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7f6 ffaa 	bl	800bcb4 <lwip_htons>
 8014d60:	4603      	mov	r3, r0
 8014d62:	461a      	mov	r2, r3
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014d68:	69fb      	ldr	r3, [r7, #28]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	719a      	strb	r2, [r3, #6]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014d72:	4b2a      	ldr	r3, [pc, #168]	@ (8014e1c <ip4_output_if_src+0x154>)
 8014d74:	881b      	ldrh	r3, [r3, #0]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7f6 ff9c 	bl	800bcb4 <lwip_htons>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	461a      	mov	r2, r3
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014d84:	4b25      	ldr	r3, [pc, #148]	@ (8014e1c <ip4_output_if_src+0x154>)
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	4b23      	ldr	r3, [pc, #140]	@ (8014e1c <ip4_output_if_src+0x154>)
 8014d8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d104      	bne.n	8014da0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014d96:	4b22      	ldr	r3, [pc, #136]	@ (8014e20 <ip4_output_if_src+0x158>)
 8014d98:	681a      	ldr	r2, [r3, #0]
 8014d9a:	69fb      	ldr	r3, [r7, #28]
 8014d9c:	60da      	str	r2, [r3, #12]
 8014d9e:	e003      	b.n	8014da8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	681a      	ldr	r2, [r3, #0]
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	2200      	movs	r2, #0
 8014dac:	729a      	strb	r2, [r3, #10]
 8014dae:	2200      	movs	r2, #0
 8014db0:	72da      	strb	r2, [r3, #11]
 8014db2:	e00f      	b.n	8014dd4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	895b      	ldrh	r3, [r3, #10]
 8014db8:	2b13      	cmp	r3, #19
 8014dba:	d802      	bhi.n	8014dc2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014dbc:	f06f 0301 	mvn.w	r3, #1
 8014dc0:	e020      	b.n	8014e04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014dc8:	69fb      	ldr	r3, [r7, #28]
 8014dca:	691b      	ldr	r3, [r3, #16]
 8014dcc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014dce:	f107 0314 	add.w	r3, r7, #20
 8014dd2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d00c      	beq.n	8014df6 <ip4_output_if_src+0x12e>
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	891a      	ldrh	r2, [r3, #8]
 8014de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d906      	bls.n	8014df6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014de8:	687a      	ldr	r2, [r7, #4]
 8014dea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014dec:	68f8      	ldr	r0, [r7, #12]
 8014dee:	f000 fd53 	bl	8015898 <ip4_frag>
 8014df2:	4603      	mov	r3, r0
 8014df4:	e006      	b.n	8014e04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014df8:	695b      	ldr	r3, [r3, #20]
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	68f9      	ldr	r1, [r7, #12]
 8014dfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e00:	4798      	blx	r3
 8014e02:	4603      	mov	r3, r0
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3720      	adds	r7, #32
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	0801a200 	.word	0x0801a200
 8014e10:	0801a234 	.word	0x0801a234
 8014e14:	0801a240 	.word	0x0801a240
 8014e18:	0801a268 	.word	0x0801a268
 8014e1c:	20008d52 	.word	0x20008d52
 8014e20:	0801adb0 	.word	0x0801adb0

08014e24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014e24:	b480      	push	{r7}
 8014e26:	b085      	sub	sp, #20
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e38:	d002      	beq.n	8014e40 <ip4_addr_isbroadcast_u32+0x1c>
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d101      	bne.n	8014e44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014e40:	2301      	movs	r3, #1
 8014e42:	e02a      	b.n	8014e9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014e4a:	f003 0302 	and.w	r3, r3, #2
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d101      	bne.n	8014e56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014e52:	2300      	movs	r3, #0
 8014e54:	e021      	b.n	8014e9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	3304      	adds	r3, #4
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	687a      	ldr	r2, [r7, #4]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d101      	bne.n	8014e66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014e62:	2300      	movs	r3, #0
 8014e64:	e019      	b.n	8014e9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014e66:	68fa      	ldr	r2, [r7, #12]
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	3304      	adds	r3, #4
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	405a      	eors	r2, r3
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	3308      	adds	r3, #8
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	4013      	ands	r3, r2
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d10d      	bne.n	8014e98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	3308      	adds	r3, #8
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	43da      	mvns	r2, r3
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	3308      	adds	r3, #8
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d101      	bne.n	8014e98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014e94:	2301      	movs	r3, #1
 8014e96:	e000      	b.n	8014e9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014e98:	2300      	movs	r3, #0
  }
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3714      	adds	r7, #20
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea4:	4770      	bx	lr
	...

08014ea8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014eb2:	4b12      	ldr	r3, [pc, #72]	@ (8014efc <ip_reass_tmr+0x54>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014eb8:	e018      	b.n	8014eec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	7fdb      	ldrb	r3, [r3, #31]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d00b      	beq.n	8014eda <ip_reass_tmr+0x32>
      r->timer--;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	7fdb      	ldrb	r3, [r3, #31]
 8014ec6:	3b01      	subs	r3, #1
 8014ec8:	b2da      	uxtb	r2, r3
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	60fb      	str	r3, [r7, #12]
 8014ed8:	e008      	b.n	8014eec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014ee4:	68b9      	ldr	r1, [r7, #8]
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f000 f80a 	bl	8014f00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d1e3      	bne.n	8014eba <ip_reass_tmr+0x12>
    }
  }
}
 8014ef2:	bf00      	nop
 8014ef4:	bf00      	nop
 8014ef6:	3710      	adds	r7, #16
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	20008d54 	.word	0x20008d54

08014f00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b088      	sub	sp, #32
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014f0e:	683a      	ldr	r2, [r7, #0]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d105      	bne.n	8014f22 <ip_reass_free_complete_datagram+0x22>
 8014f16:	4b45      	ldr	r3, [pc, #276]	@ (801502c <ip_reass_free_complete_datagram+0x12c>)
 8014f18:	22ab      	movs	r2, #171	@ 0xab
 8014f1a:	4945      	ldr	r1, [pc, #276]	@ (8015030 <ip_reass_free_complete_datagram+0x130>)
 8014f1c:	4845      	ldr	r0, [pc, #276]	@ (8015034 <ip_reass_free_complete_datagram+0x134>)
 8014f1e:	f001 fe6d 	bl	8016bfc <iprintf>
  if (prev != NULL) {
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d00a      	beq.n	8014f3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d005      	beq.n	8014f3e <ip_reass_free_complete_datagram+0x3e>
 8014f32:	4b3e      	ldr	r3, [pc, #248]	@ (801502c <ip_reass_free_complete_datagram+0x12c>)
 8014f34:	22ad      	movs	r2, #173	@ 0xad
 8014f36:	4940      	ldr	r1, [pc, #256]	@ (8015038 <ip_reass_free_complete_datagram+0x138>)
 8014f38:	483e      	ldr	r0, [pc, #248]	@ (8015034 <ip_reass_free_complete_datagram+0x134>)
 8014f3a:	f001 fe5f 	bl	8016bfc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	685b      	ldr	r3, [r3, #4]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	889b      	ldrh	r3, [r3, #4]
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d12a      	bne.n	8014fa6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	685b      	ldr	r3, [r3, #4]
 8014f54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014f5e:	69bb      	ldr	r3, [r7, #24]
 8014f60:	6858      	ldr	r0, [r3, #4]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	3308      	adds	r3, #8
 8014f66:	2214      	movs	r2, #20
 8014f68:	4619      	mov	r1, r3
 8014f6a:	f002 f854 	bl	8017016 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014f6e:	2101      	movs	r1, #1
 8014f70:	69b8      	ldr	r0, [r7, #24]
 8014f72:	f7ff fc47 	bl	8014804 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014f76:	69b8      	ldr	r0, [r7, #24]
 8014f78:	f7f8 fa82 	bl	800d480 <pbuf_clen>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014f80:	8bfa      	ldrh	r2, [r7, #30]
 8014f82:	8a7b      	ldrh	r3, [r7, #18]
 8014f84:	4413      	add	r3, r2
 8014f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f8a:	db05      	blt.n	8014f98 <ip_reass_free_complete_datagram+0x98>
 8014f8c:	4b27      	ldr	r3, [pc, #156]	@ (801502c <ip_reass_free_complete_datagram+0x12c>)
 8014f8e:	22bc      	movs	r2, #188	@ 0xbc
 8014f90:	492a      	ldr	r1, [pc, #168]	@ (801503c <ip_reass_free_complete_datagram+0x13c>)
 8014f92:	4828      	ldr	r0, [pc, #160]	@ (8015034 <ip_reass_free_complete_datagram+0x134>)
 8014f94:	f001 fe32 	bl	8016bfc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014f98:	8bfa      	ldrh	r2, [r7, #30]
 8014f9a:	8a7b      	ldrh	r3, [r7, #18]
 8014f9c:	4413      	add	r3, r2
 8014f9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014fa0:	69b8      	ldr	r0, [r7, #24]
 8014fa2:	f7f8 f9e5 	bl	800d370 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014fac:	e01f      	b.n	8014fee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014fbe:	68f8      	ldr	r0, [r7, #12]
 8014fc0:	f7f8 fa5e 	bl	800d480 <pbuf_clen>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014fc8:	8bfa      	ldrh	r2, [r7, #30]
 8014fca:	8a7b      	ldrh	r3, [r7, #18]
 8014fcc:	4413      	add	r3, r2
 8014fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014fd2:	db05      	blt.n	8014fe0 <ip_reass_free_complete_datagram+0xe0>
 8014fd4:	4b15      	ldr	r3, [pc, #84]	@ (801502c <ip_reass_free_complete_datagram+0x12c>)
 8014fd6:	22cc      	movs	r2, #204	@ 0xcc
 8014fd8:	4918      	ldr	r1, [pc, #96]	@ (801503c <ip_reass_free_complete_datagram+0x13c>)
 8014fda:	4816      	ldr	r0, [pc, #88]	@ (8015034 <ip_reass_free_complete_datagram+0x134>)
 8014fdc:	f001 fe0e 	bl	8016bfc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014fe0:	8bfa      	ldrh	r2, [r7, #30]
 8014fe2:	8a7b      	ldrh	r3, [r7, #18]
 8014fe4:	4413      	add	r3, r2
 8014fe6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014fe8:	68f8      	ldr	r0, [r7, #12]
 8014fea:	f7f8 f9c1 	bl	800d370 <pbuf_free>
  while (p != NULL) {
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d1dc      	bne.n	8014fae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014ff4:	6839      	ldr	r1, [r7, #0]
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f000 f8c2 	bl	8015180 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014ffc:	4b10      	ldr	r3, [pc, #64]	@ (8015040 <ip_reass_free_complete_datagram+0x140>)
 8014ffe:	881b      	ldrh	r3, [r3, #0]
 8015000:	8bfa      	ldrh	r2, [r7, #30]
 8015002:	429a      	cmp	r2, r3
 8015004:	d905      	bls.n	8015012 <ip_reass_free_complete_datagram+0x112>
 8015006:	4b09      	ldr	r3, [pc, #36]	@ (801502c <ip_reass_free_complete_datagram+0x12c>)
 8015008:	22d2      	movs	r2, #210	@ 0xd2
 801500a:	490e      	ldr	r1, [pc, #56]	@ (8015044 <ip_reass_free_complete_datagram+0x144>)
 801500c:	4809      	ldr	r0, [pc, #36]	@ (8015034 <ip_reass_free_complete_datagram+0x134>)
 801500e:	f001 fdf5 	bl	8016bfc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015012:	4b0b      	ldr	r3, [pc, #44]	@ (8015040 <ip_reass_free_complete_datagram+0x140>)
 8015014:	881a      	ldrh	r2, [r3, #0]
 8015016:	8bfb      	ldrh	r3, [r7, #30]
 8015018:	1ad3      	subs	r3, r2, r3
 801501a:	b29a      	uxth	r2, r3
 801501c:	4b08      	ldr	r3, [pc, #32]	@ (8015040 <ip_reass_free_complete_datagram+0x140>)
 801501e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015020:	8bfb      	ldrh	r3, [r7, #30]
}
 8015022:	4618      	mov	r0, r3
 8015024:	3720      	adds	r7, #32
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
 801502a:	bf00      	nop
 801502c:	0801a298 	.word	0x0801a298
 8015030:	0801a2d4 	.word	0x0801a2d4
 8015034:	0801a2e0 	.word	0x0801a2e0
 8015038:	0801a308 	.word	0x0801a308
 801503c:	0801a31c 	.word	0x0801a31c
 8015040:	20008d58 	.word	0x20008d58
 8015044:	0801a33c 	.word	0x0801a33c

08015048 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b08a      	sub	sp, #40	@ 0x28
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
 8015050:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015052:	2300      	movs	r3, #0
 8015054:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015056:	2300      	movs	r3, #0
 8015058:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801505a:	2300      	movs	r3, #0
 801505c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801505e:	2300      	movs	r3, #0
 8015060:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015062:	2300      	movs	r3, #0
 8015064:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015066:	4b28      	ldr	r3, [pc, #160]	@ (8015108 <ip_reass_remove_oldest_datagram+0xc0>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801506c:	e030      	b.n	80150d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015070:	695a      	ldr	r2, [r3, #20]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	68db      	ldr	r3, [r3, #12]
 8015076:	429a      	cmp	r2, r3
 8015078:	d10c      	bne.n	8015094 <ip_reass_remove_oldest_datagram+0x4c>
 801507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801507c:	699a      	ldr	r2, [r3, #24]
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	691b      	ldr	r3, [r3, #16]
 8015082:	429a      	cmp	r2, r3
 8015084:	d106      	bne.n	8015094 <ip_reass_remove_oldest_datagram+0x4c>
 8015086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015088:	899a      	ldrh	r2, [r3, #12]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	889b      	ldrh	r3, [r3, #4]
 801508e:	b29b      	uxth	r3, r3
 8015090:	429a      	cmp	r2, r3
 8015092:	d014      	beq.n	80150be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	3301      	adds	r3, #1
 8015098:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d104      	bne.n	80150aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80150a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80150a4:	69fb      	ldr	r3, [r7, #28]
 80150a6:	61bb      	str	r3, [r7, #24]
 80150a8:	e009      	b.n	80150be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80150aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ac:	7fda      	ldrb	r2, [r3, #31]
 80150ae:	6a3b      	ldr	r3, [r7, #32]
 80150b0:	7fdb      	ldrb	r3, [r3, #31]
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d803      	bhi.n	80150be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80150b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80150ba:	69fb      	ldr	r3, [r7, #28]
 80150bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80150be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d001      	beq.n	80150ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80150c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80150ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80150d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d1cb      	bne.n	801506e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80150d6:	6a3b      	ldr	r3, [r7, #32]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d008      	beq.n	80150ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80150dc:	69b9      	ldr	r1, [r7, #24]
 80150de:	6a38      	ldr	r0, [r7, #32]
 80150e0:	f7ff ff0e 	bl	8014f00 <ip_reass_free_complete_datagram>
 80150e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80150e6:	697a      	ldr	r2, [r7, #20]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	4413      	add	r3, r2
 80150ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80150ee:	697a      	ldr	r2, [r7, #20]
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	da02      	bge.n	80150fc <ip_reass_remove_oldest_datagram+0xb4>
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	2b01      	cmp	r3, #1
 80150fa:	dcac      	bgt.n	8015056 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80150fc:	697b      	ldr	r3, [r7, #20]
}
 80150fe:	4618      	mov	r0, r3
 8015100:	3728      	adds	r7, #40	@ 0x28
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	20008d54 	.word	0x20008d54

0801510c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b084      	sub	sp, #16
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015116:	2004      	movs	r0, #4
 8015118:	f7f7 fa44 	bl	800c5a4 <memp_malloc>
 801511c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d110      	bne.n	8015146 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015124:	6839      	ldr	r1, [r7, #0]
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7ff ff8e 	bl	8015048 <ip_reass_remove_oldest_datagram>
 801512c:	4602      	mov	r2, r0
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	4293      	cmp	r3, r2
 8015132:	dc03      	bgt.n	801513c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015134:	2004      	movs	r0, #4
 8015136:	f7f7 fa35 	bl	800c5a4 <memp_malloc>
 801513a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d101      	bne.n	8015146 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015142:	2300      	movs	r3, #0
 8015144:	e016      	b.n	8015174 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015146:	2220      	movs	r2, #32
 8015148:	2100      	movs	r1, #0
 801514a:	68f8      	ldr	r0, [r7, #12]
 801514c:	f001 feae 	bl	8016eac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	220f      	movs	r2, #15
 8015154:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015156:	4b09      	ldr	r3, [pc, #36]	@ (801517c <ip_reass_enqueue_new_datagram+0x70>)
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801515e:	4a07      	ldr	r2, [pc, #28]	@ (801517c <ip_reass_enqueue_new_datagram+0x70>)
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	3308      	adds	r3, #8
 8015168:	2214      	movs	r2, #20
 801516a:	6879      	ldr	r1, [r7, #4]
 801516c:	4618      	mov	r0, r3
 801516e:	f001 ff52 	bl	8017016 <memcpy>
  return ipr;
 8015172:	68fb      	ldr	r3, [r7, #12]
}
 8015174:	4618      	mov	r0, r3
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	20008d54 	.word	0x20008d54

08015180 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801518a:	4b10      	ldr	r3, [pc, #64]	@ (80151cc <ip_reass_dequeue_datagram+0x4c>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	687a      	ldr	r2, [r7, #4]
 8015190:	429a      	cmp	r2, r3
 8015192:	d104      	bne.n	801519e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	4a0c      	ldr	r2, [pc, #48]	@ (80151cc <ip_reass_dequeue_datagram+0x4c>)
 801519a:	6013      	str	r3, [r2, #0]
 801519c:	e00d      	b.n	80151ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d106      	bne.n	80151b2 <ip_reass_dequeue_datagram+0x32>
 80151a4:	4b0a      	ldr	r3, [pc, #40]	@ (80151d0 <ip_reass_dequeue_datagram+0x50>)
 80151a6:	f240 1245 	movw	r2, #325	@ 0x145
 80151aa:	490a      	ldr	r1, [pc, #40]	@ (80151d4 <ip_reass_dequeue_datagram+0x54>)
 80151ac:	480a      	ldr	r0, [pc, #40]	@ (80151d8 <ip_reass_dequeue_datagram+0x58>)
 80151ae:	f001 fd25 	bl	8016bfc <iprintf>
    prev->next = ipr->next;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681a      	ldr	r2, [r3, #0]
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80151ba:	6879      	ldr	r1, [r7, #4]
 80151bc:	2004      	movs	r0, #4
 80151be:	f7f7 fa61 	bl	800c684 <memp_free>
}
 80151c2:	bf00      	nop
 80151c4:	3708      	adds	r7, #8
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}
 80151ca:	bf00      	nop
 80151cc:	20008d54 	.word	0x20008d54
 80151d0:	0801a298 	.word	0x0801a298
 80151d4:	0801a360 	.word	0x0801a360
 80151d8:	0801a2e0 	.word	0x0801a2e0

080151dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b08c      	sub	sp, #48	@ 0x30
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80151e8:	2300      	movs	r3, #0
 80151ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80151ec:	2301      	movs	r3, #1
 80151ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80151f0:	68bb      	ldr	r3, [r7, #8]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80151f6:	69fb      	ldr	r3, [r7, #28]
 80151f8:	885b      	ldrh	r3, [r3, #2]
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7f6 fd59 	bl	800bcb4 <lwip_htons>
 8015202:	4603      	mov	r3, r0
 8015204:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	781b      	ldrb	r3, [r3, #0]
 801520a:	f003 030f 	and.w	r3, r3, #15
 801520e:	b2db      	uxtb	r3, r3
 8015210:	009b      	lsls	r3, r3, #2
 8015212:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015214:	7e7b      	ldrb	r3, [r7, #25]
 8015216:	b29b      	uxth	r3, r3
 8015218:	8b7a      	ldrh	r2, [r7, #26]
 801521a:	429a      	cmp	r2, r3
 801521c:	d202      	bcs.n	8015224 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801521e:	f04f 33ff 	mov.w	r3, #4294967295
 8015222:	e135      	b.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015224:	7e7b      	ldrb	r3, [r7, #25]
 8015226:	b29b      	uxth	r3, r3
 8015228:	8b7a      	ldrh	r2, [r7, #26]
 801522a:	1ad3      	subs	r3, r2, r3
 801522c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	88db      	ldrh	r3, [r3, #6]
 8015232:	b29b      	uxth	r3, r3
 8015234:	4618      	mov	r0, r3
 8015236:	f7f6 fd3d 	bl	800bcb4 <lwip_htons>
 801523a:	4603      	mov	r3, r0
 801523c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015240:	b29b      	uxth	r3, r3
 8015242:	00db      	lsls	r3, r3, #3
 8015244:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801524e:	2200      	movs	r2, #0
 8015250:	701a      	strb	r2, [r3, #0]
 8015252:	2200      	movs	r2, #0
 8015254:	705a      	strb	r2, [r3, #1]
 8015256:	2200      	movs	r2, #0
 8015258:	709a      	strb	r2, [r3, #2]
 801525a:	2200      	movs	r2, #0
 801525c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801525e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015260:	8afa      	ldrh	r2, [r7, #22]
 8015262:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015264:	8afa      	ldrh	r2, [r7, #22]
 8015266:	8b7b      	ldrh	r3, [r7, #26]
 8015268:	4413      	add	r3, r2
 801526a:	b29a      	uxth	r2, r3
 801526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801526e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015272:	88db      	ldrh	r3, [r3, #6]
 8015274:	b29b      	uxth	r3, r3
 8015276:	8afa      	ldrh	r2, [r7, #22]
 8015278:	429a      	cmp	r2, r3
 801527a:	d902      	bls.n	8015282 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801527c:	f04f 33ff 	mov.w	r3, #4294967295
 8015280:	e106      	b.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	627b      	str	r3, [r7, #36]	@ 0x24
 8015288:	e068      	b.n	801535c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015292:	889b      	ldrh	r3, [r3, #4]
 8015294:	b29a      	uxth	r2, r3
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	889b      	ldrh	r3, [r3, #4]
 801529a:	b29b      	uxth	r3, r3
 801529c:	429a      	cmp	r2, r3
 801529e:	d235      	bcs.n	801530c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80152a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80152a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d020      	beq.n	80152ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80152ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ae:	889b      	ldrh	r3, [r3, #4]
 80152b0:	b29a      	uxth	r2, r3
 80152b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152b4:	88db      	ldrh	r3, [r3, #6]
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d307      	bcc.n	80152cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80152bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152be:	88db      	ldrh	r3, [r3, #6]
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	693b      	ldr	r3, [r7, #16]
 80152c4:	889b      	ldrh	r3, [r3, #4]
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d902      	bls.n	80152d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152cc:	f04f 33ff 	mov.w	r3, #4294967295
 80152d0:	e0de      	b.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80152d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152d4:	68ba      	ldr	r2, [r7, #8]
 80152d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80152d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152da:	88db      	ldrh	r3, [r3, #6]
 80152dc:	b29a      	uxth	r2, r3
 80152de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152e0:	889b      	ldrh	r3, [r3, #4]
 80152e2:	b29b      	uxth	r3, r3
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d03d      	beq.n	8015364 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80152ec:	e03a      	b.n	8015364 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80152ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f0:	88db      	ldrh	r3, [r3, #6]
 80152f2:	b29a      	uxth	r2, r3
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	889b      	ldrh	r3, [r3, #4]
 80152f8:	b29b      	uxth	r3, r3
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d902      	bls.n	8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015302:	e0c5      	b.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	68ba      	ldr	r2, [r7, #8]
 8015308:	605a      	str	r2, [r3, #4]
      break;
 801530a:	e02b      	b.n	8015364 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530e:	889b      	ldrh	r3, [r3, #4]
 8015310:	b29a      	uxth	r2, r3
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	889b      	ldrh	r3, [r3, #4]
 8015316:	b29b      	uxth	r3, r3
 8015318:	429a      	cmp	r2, r3
 801531a:	d102      	bne.n	8015322 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801531c:	f04f 33ff 	mov.w	r3, #4294967295
 8015320:	e0b6      	b.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015324:	889b      	ldrh	r3, [r3, #4]
 8015326:	b29a      	uxth	r2, r3
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	88db      	ldrh	r3, [r3, #6]
 801532c:	b29b      	uxth	r3, r3
 801532e:	429a      	cmp	r2, r3
 8015330:	d202      	bcs.n	8015338 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015332:	f04f 33ff 	mov.w	r3, #4294967295
 8015336:	e0ab      	b.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801533a:	2b00      	cmp	r3, #0
 801533c:	d009      	beq.n	8015352 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015340:	88db      	ldrh	r3, [r3, #6]
 8015342:	b29a      	uxth	r2, r3
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	889b      	ldrh	r3, [r3, #4]
 8015348:	b29b      	uxth	r3, r3
 801534a:	429a      	cmp	r2, r3
 801534c:	d001      	beq.n	8015352 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801534e:	2300      	movs	r3, #0
 8015350:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801535e:	2b00      	cmp	r3, #0
 8015360:	d193      	bne.n	801528a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015362:	e000      	b.n	8015366 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015364:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015368:	2b00      	cmp	r3, #0
 801536a:	d12d      	bne.n	80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801536e:	2b00      	cmp	r3, #0
 8015370:	d01c      	beq.n	80153ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015374:	88db      	ldrh	r3, [r3, #6]
 8015376:	b29a      	uxth	r2, r3
 8015378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801537a:	889b      	ldrh	r3, [r3, #4]
 801537c:	b29b      	uxth	r3, r3
 801537e:	429a      	cmp	r2, r3
 8015380:	d906      	bls.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015382:	4b45      	ldr	r3, [pc, #276]	@ (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015384:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015388:	4944      	ldr	r1, [pc, #272]	@ (801549c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801538a:	4845      	ldr	r0, [pc, #276]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801538c:	f001 fc36 	bl	8016bfc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015392:	68ba      	ldr	r2, [r7, #8]
 8015394:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015398:	88db      	ldrh	r3, [r3, #6]
 801539a:	b29a      	uxth	r2, r3
 801539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801539e:	889b      	ldrh	r3, [r3, #4]
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d010      	beq.n	80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80153a6:	2300      	movs	r3, #0
 80153a8:	623b      	str	r3, [r7, #32]
 80153aa:	e00d      	b.n	80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d006      	beq.n	80153c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80153b4:	4b38      	ldr	r3, [pc, #224]	@ (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153b6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80153ba:	493a      	ldr	r1, [pc, #232]	@ (80154a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80153bc:	4838      	ldr	r0, [pc, #224]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153be:	f001 fc1d 	bl	8016bfc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	68ba      	ldr	r2, [r7, #8]
 80153c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d105      	bne.n	80153da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	7f9b      	ldrb	r3, [r3, #30]
 80153d2:	f003 0301 	and.w	r3, r3, #1
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d059      	beq.n	801548e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80153da:	6a3b      	ldr	r3, [r7, #32]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d04f      	beq.n	8015480 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d006      	beq.n	80153f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	889b      	ldrh	r3, [r3, #4]
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d002      	beq.n	80153fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80153f6:	2300      	movs	r3, #0
 80153f8:	623b      	str	r3, [r7, #32]
 80153fa:	e041      	b.n	8015480 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80153fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015406:	e012      	b.n	801542e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015410:	88db      	ldrh	r3, [r3, #6]
 8015412:	b29a      	uxth	r2, r3
 8015414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015416:	889b      	ldrh	r3, [r3, #4]
 8015418:	b29b      	uxth	r3, r3
 801541a:	429a      	cmp	r2, r3
 801541c:	d002      	beq.n	8015424 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801541e:	2300      	movs	r3, #0
 8015420:	623b      	str	r3, [r7, #32]
            break;
 8015422:	e007      	b.n	8015434 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015426:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015430:	2b00      	cmp	r3, #0
 8015432:	d1e9      	bne.n	8015408 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015434:	6a3b      	ldr	r3, [r7, #32]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d022      	beq.n	8015480 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d106      	bne.n	8015450 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015442:	4b15      	ldr	r3, [pc, #84]	@ (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015444:	f240 12df 	movw	r2, #479	@ 0x1df
 8015448:	4917      	ldr	r1, [pc, #92]	@ (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801544a:	4815      	ldr	r0, [pc, #84]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801544c:	f001 fbd6 	bl	8016bfc <iprintf>
          LWIP_ASSERT("sanity check",
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015458:	429a      	cmp	r2, r3
 801545a:	d106      	bne.n	801546a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801545c:	4b0e      	ldr	r3, [pc, #56]	@ (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801545e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015462:	4911      	ldr	r1, [pc, #68]	@ (80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015464:	480e      	ldr	r0, [pc, #56]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015466:	f001 fbc9 	bl	8016bfc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d006      	beq.n	8015480 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015472:	4b09      	ldr	r3, [pc, #36]	@ (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015474:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015478:	490c      	ldr	r1, [pc, #48]	@ (80154ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801547a:	4809      	ldr	r0, [pc, #36]	@ (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801547c:	f001 fbbe 	bl	8016bfc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015480:	6a3b      	ldr	r3, [r7, #32]
 8015482:	2b00      	cmp	r3, #0
 8015484:	bf14      	ite	ne
 8015486:	2301      	movne	r3, #1
 8015488:	2300      	moveq	r3, #0
 801548a:	b2db      	uxtb	r3, r3
 801548c:	e000      	b.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801548e:	2300      	movs	r3, #0
}
 8015490:	4618      	mov	r0, r3
 8015492:	3730      	adds	r7, #48	@ 0x30
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}
 8015498:	0801a298 	.word	0x0801a298
 801549c:	0801a37c 	.word	0x0801a37c
 80154a0:	0801a2e0 	.word	0x0801a2e0
 80154a4:	0801a39c 	.word	0x0801a39c
 80154a8:	0801a3d4 	.word	0x0801a3d4
 80154ac:	0801a3e4 	.word	0x0801a3e4

080154b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b08e      	sub	sp, #56	@ 0x38
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	685b      	ldr	r3, [r3, #4]
 80154bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80154be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	f003 030f 	and.w	r3, r3, #15
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	009b      	lsls	r3, r3, #2
 80154ca:	b2db      	uxtb	r3, r3
 80154cc:	2b14      	cmp	r3, #20
 80154ce:	f040 8171 	bne.w	80157b4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80154d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154d4:	88db      	ldrh	r3, [r3, #6]
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	4618      	mov	r0, r3
 80154da:	f7f6 fbeb 	bl	800bcb4 <lwip_htons>
 80154de:	4603      	mov	r3, r0
 80154e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	00db      	lsls	r3, r3, #3
 80154e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80154ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154ec:	885b      	ldrh	r3, [r3, #2]
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7f6 fbdf 	bl	800bcb4 <lwip_htons>
 80154f6:	4603      	mov	r3, r0
 80154f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80154fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	f003 030f 	and.w	r3, r3, #15
 8015502:	b2db      	uxtb	r3, r3
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801550a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801550e:	b29b      	uxth	r3, r3
 8015510:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015512:	429a      	cmp	r2, r3
 8015514:	f0c0 8150 	bcc.w	80157b8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015518:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801551c:	b29b      	uxth	r3, r3
 801551e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015520:	1ad3      	subs	r3, r2, r3
 8015522:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f7f7 ffab 	bl	800d480 <pbuf_clen>
 801552a:	4603      	mov	r3, r0
 801552c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801552e:	4b8c      	ldr	r3, [pc, #560]	@ (8015760 <ip4_reass+0x2b0>)
 8015530:	881b      	ldrh	r3, [r3, #0]
 8015532:	461a      	mov	r2, r3
 8015534:	8c3b      	ldrh	r3, [r7, #32]
 8015536:	4413      	add	r3, r2
 8015538:	2b0a      	cmp	r3, #10
 801553a:	dd10      	ble.n	801555e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801553c:	8c3b      	ldrh	r3, [r7, #32]
 801553e:	4619      	mov	r1, r3
 8015540:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015542:	f7ff fd81 	bl	8015048 <ip_reass_remove_oldest_datagram>
 8015546:	4603      	mov	r3, r0
 8015548:	2b00      	cmp	r3, #0
 801554a:	f000 8137 	beq.w	80157bc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801554e:	4b84      	ldr	r3, [pc, #528]	@ (8015760 <ip4_reass+0x2b0>)
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	461a      	mov	r2, r3
 8015554:	8c3b      	ldrh	r3, [r7, #32]
 8015556:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015558:	2b0a      	cmp	r3, #10
 801555a:	f300 812f 	bgt.w	80157bc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801555e:	4b81      	ldr	r3, [pc, #516]	@ (8015764 <ip4_reass+0x2b4>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	633b      	str	r3, [r7, #48]	@ 0x30
 8015564:	e015      	b.n	8015592 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015568:	695a      	ldr	r2, [r3, #20]
 801556a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	429a      	cmp	r2, r3
 8015570:	d10c      	bne.n	801558c <ip4_reass+0xdc>
 8015572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015574:	699a      	ldr	r2, [r3, #24]
 8015576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015578:	691b      	ldr	r3, [r3, #16]
 801557a:	429a      	cmp	r2, r3
 801557c:	d106      	bne.n	801558c <ip4_reass+0xdc>
 801557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015580:	899a      	ldrh	r2, [r3, #12]
 8015582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015584:	889b      	ldrh	r3, [r3, #4]
 8015586:	b29b      	uxth	r3, r3
 8015588:	429a      	cmp	r2, r3
 801558a:	d006      	beq.n	801559a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	633b      	str	r3, [r7, #48]	@ 0x30
 8015592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015594:	2b00      	cmp	r3, #0
 8015596:	d1e6      	bne.n	8015566 <ip4_reass+0xb6>
 8015598:	e000      	b.n	801559c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801559a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d109      	bne.n	80155b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80155a2:	8c3b      	ldrh	r3, [r7, #32]
 80155a4:	4619      	mov	r1, r3
 80155a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155a8:	f7ff fdb0 	bl	801510c <ip_reass_enqueue_new_datagram>
 80155ac:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80155ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d11c      	bne.n	80155ee <ip4_reass+0x13e>
      goto nullreturn;
 80155b4:	e105      	b.n	80157c2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155b8:	88db      	ldrh	r3, [r3, #6]
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	4618      	mov	r0, r3
 80155be:	f7f6 fb79 	bl	800bcb4 <lwip_htons>
 80155c2:	4603      	mov	r3, r0
 80155c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d110      	bne.n	80155ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80155cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ce:	89db      	ldrh	r3, [r3, #14]
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7f6 fb6f 	bl	800bcb4 <lwip_htons>
 80155d6:	4603      	mov	r3, r0
 80155d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d006      	beq.n	80155ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80155e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e2:	3308      	adds	r3, #8
 80155e4:	2214      	movs	r2, #20
 80155e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80155e8:	4618      	mov	r0, r3
 80155ea:	f001 fd14 	bl	8017016 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80155ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155f0:	88db      	ldrh	r3, [r3, #6]
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	f003 0320 	and.w	r3, r3, #32
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	bf0c      	ite	eq
 80155fc:	2301      	moveq	r3, #1
 80155fe:	2300      	movne	r3, #0
 8015600:	b2db      	uxtb	r3, r3
 8015602:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015604:	69fb      	ldr	r3, [r7, #28]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d00e      	beq.n	8015628 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801560a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801560c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801560e:	4413      	add	r3, r2
 8015610:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015612:	8b7a      	ldrh	r2, [r7, #26]
 8015614:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015616:	429a      	cmp	r2, r3
 8015618:	f0c0 80a0 	bcc.w	801575c <ip4_reass+0x2ac>
 801561c:	8b7b      	ldrh	r3, [r7, #26]
 801561e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015622:	4293      	cmp	r3, r2
 8015624:	f200 809a 	bhi.w	801575c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015628:	69fa      	ldr	r2, [r7, #28]
 801562a:	6879      	ldr	r1, [r7, #4]
 801562c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801562e:	f7ff fdd5 	bl	80151dc <ip_reass_chain_frag_into_datagram_and_validate>
 8015632:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801563a:	f000 809b 	beq.w	8015774 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801563e:	4b48      	ldr	r3, [pc, #288]	@ (8015760 <ip4_reass+0x2b0>)
 8015640:	881a      	ldrh	r2, [r3, #0]
 8015642:	8c3b      	ldrh	r3, [r7, #32]
 8015644:	4413      	add	r3, r2
 8015646:	b29a      	uxth	r2, r3
 8015648:	4b45      	ldr	r3, [pc, #276]	@ (8015760 <ip4_reass+0x2b0>)
 801564a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d00d      	beq.n	801566e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015652:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015654:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015656:	4413      	add	r3, r2
 8015658:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801565c:	8a7a      	ldrh	r2, [r7, #18]
 801565e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015662:	7f9b      	ldrb	r3, [r3, #30]
 8015664:	f043 0301 	orr.w	r3, r3, #1
 8015668:	b2da      	uxtb	r2, r3
 801566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801566c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	2b01      	cmp	r3, #1
 8015672:	d171      	bne.n	8015758 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015676:	8b9b      	ldrh	r3, [r3, #28]
 8015678:	3314      	adds	r3, #20
 801567a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	685b      	ldr	r3, [r3, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	685b      	ldr	r3, [r3, #4]
 801568c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015690:	3308      	adds	r3, #8
 8015692:	2214      	movs	r2, #20
 8015694:	4619      	mov	r1, r3
 8015696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015698:	f001 fcbd 	bl	8017016 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801569c:	8a3b      	ldrh	r3, [r7, #16]
 801569e:	4618      	mov	r0, r3
 80156a0:	f7f6 fb08 	bl	800bcb4 <lwip_htons>
 80156a4:	4603      	mov	r3, r0
 80156a6:	461a      	mov	r2, r3
 80156a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80156ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ae:	2200      	movs	r2, #0
 80156b0:	719a      	strb	r2, [r3, #6]
 80156b2:	2200      	movs	r2, #0
 80156b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80156b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156b8:	2200      	movs	r2, #0
 80156ba:	729a      	strb	r2, [r3, #10]
 80156bc:	2200      	movs	r2, #0
 80156be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80156c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80156c6:	e00d      	b.n	80156e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80156c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80156ce:	2114      	movs	r1, #20
 80156d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80156d2:	f7f7 fdc7 	bl	800d264 <pbuf_remove_header>
      pbuf_cat(p, r);
 80156d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7f7 ff0b 	bl	800d4f4 <pbuf_cat>
      r = iprh->next_pbuf;
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80156e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d1ee      	bne.n	80156c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80156ea:	4b1e      	ldr	r3, [pc, #120]	@ (8015764 <ip4_reass+0x2b4>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d102      	bne.n	80156fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80156f4:	2300      	movs	r3, #0
 80156f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80156f8:	e010      	b.n	801571c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80156fa:	4b1a      	ldr	r3, [pc, #104]	@ (8015764 <ip4_reass+0x2b4>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015700:	e007      	b.n	8015712 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015708:	429a      	cmp	r2, r3
 801570a:	d006      	beq.n	801571a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015714:	2b00      	cmp	r3, #0
 8015716:	d1f4      	bne.n	8015702 <ip4_reass+0x252>
 8015718:	e000      	b.n	801571c <ip4_reass+0x26c>
          break;
 801571a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801571c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801571e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015720:	f7ff fd2e 	bl	8015180 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f7f7 feab 	bl	800d480 <pbuf_clen>
 801572a:	4603      	mov	r3, r0
 801572c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801572e:	4b0c      	ldr	r3, [pc, #48]	@ (8015760 <ip4_reass+0x2b0>)
 8015730:	881b      	ldrh	r3, [r3, #0]
 8015732:	8c3a      	ldrh	r2, [r7, #32]
 8015734:	429a      	cmp	r2, r3
 8015736:	d906      	bls.n	8015746 <ip4_reass+0x296>
 8015738:	4b0b      	ldr	r3, [pc, #44]	@ (8015768 <ip4_reass+0x2b8>)
 801573a:	f240 229b 	movw	r2, #667	@ 0x29b
 801573e:	490b      	ldr	r1, [pc, #44]	@ (801576c <ip4_reass+0x2bc>)
 8015740:	480b      	ldr	r0, [pc, #44]	@ (8015770 <ip4_reass+0x2c0>)
 8015742:	f001 fa5b 	bl	8016bfc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015746:	4b06      	ldr	r3, [pc, #24]	@ (8015760 <ip4_reass+0x2b0>)
 8015748:	881a      	ldrh	r2, [r3, #0]
 801574a:	8c3b      	ldrh	r3, [r7, #32]
 801574c:	1ad3      	subs	r3, r2, r3
 801574e:	b29a      	uxth	r2, r3
 8015750:	4b03      	ldr	r3, [pc, #12]	@ (8015760 <ip4_reass+0x2b0>)
 8015752:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	e038      	b.n	80157ca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015758:	2300      	movs	r3, #0
 801575a:	e036      	b.n	80157ca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801575c:	bf00      	nop
 801575e:	e00a      	b.n	8015776 <ip4_reass+0x2c6>
 8015760:	20008d58 	.word	0x20008d58
 8015764:	20008d54 	.word	0x20008d54
 8015768:	0801a298 	.word	0x0801a298
 801576c:	0801a408 	.word	0x0801a408
 8015770:	0801a2e0 	.word	0x0801a2e0
    goto nullreturn_ipr;
 8015774:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015778:	2b00      	cmp	r3, #0
 801577a:	d106      	bne.n	801578a <ip4_reass+0x2da>
 801577c:	4b15      	ldr	r3, [pc, #84]	@ (80157d4 <ip4_reass+0x324>)
 801577e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015782:	4915      	ldr	r1, [pc, #84]	@ (80157d8 <ip4_reass+0x328>)
 8015784:	4815      	ldr	r0, [pc, #84]	@ (80157dc <ip4_reass+0x32c>)
 8015786:	f001 fa39 	bl	8016bfc <iprintf>
  if (ipr->p == NULL) {
 801578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d116      	bne.n	80157c0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015792:	4b13      	ldr	r3, [pc, #76]	@ (80157e0 <ip4_reass+0x330>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015798:	429a      	cmp	r2, r3
 801579a:	d006      	beq.n	80157aa <ip4_reass+0x2fa>
 801579c:	4b0d      	ldr	r3, [pc, #52]	@ (80157d4 <ip4_reass+0x324>)
 801579e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80157a2:	4910      	ldr	r1, [pc, #64]	@ (80157e4 <ip4_reass+0x334>)
 80157a4:	480d      	ldr	r0, [pc, #52]	@ (80157dc <ip4_reass+0x32c>)
 80157a6:	f001 fa29 	bl	8016bfc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80157aa:	2100      	movs	r1, #0
 80157ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80157ae:	f7ff fce7 	bl	8015180 <ip_reass_dequeue_datagram>
 80157b2:	e006      	b.n	80157c2 <ip4_reass+0x312>
    goto nullreturn;
 80157b4:	bf00      	nop
 80157b6:	e004      	b.n	80157c2 <ip4_reass+0x312>
    goto nullreturn;
 80157b8:	bf00      	nop
 80157ba:	e002      	b.n	80157c2 <ip4_reass+0x312>
      goto nullreturn;
 80157bc:	bf00      	nop
 80157be:	e000      	b.n	80157c2 <ip4_reass+0x312>
  }

nullreturn:
 80157c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f7f7 fdd4 	bl	800d370 <pbuf_free>
  return NULL;
 80157c8:	2300      	movs	r3, #0
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3738      	adds	r7, #56	@ 0x38
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	0801a298 	.word	0x0801a298
 80157d8:	0801a424 	.word	0x0801a424
 80157dc:	0801a2e0 	.word	0x0801a2e0
 80157e0:	20008d54 	.word	0x20008d54
 80157e4:	0801a430 	.word	0x0801a430

080157e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80157ec:	2005      	movs	r0, #5
 80157ee:	f7f6 fed9 	bl	800c5a4 <memp_malloc>
 80157f2:	4603      	mov	r3, r0
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d106      	bne.n	8015814 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015806:	4b07      	ldr	r3, [pc, #28]	@ (8015824 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015808:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801580c:	4906      	ldr	r1, [pc, #24]	@ (8015828 <ip_frag_free_pbuf_custom_ref+0x30>)
 801580e:	4807      	ldr	r0, [pc, #28]	@ (801582c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015810:	f001 f9f4 	bl	8016bfc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015814:	6879      	ldr	r1, [r7, #4]
 8015816:	2005      	movs	r0, #5
 8015818:	f7f6 ff34 	bl	800c684 <memp_free>
}
 801581c:	bf00      	nop
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}
 8015824:	0801a298 	.word	0x0801a298
 8015828:	0801a450 	.word	0x0801a450
 801582c:	0801a2e0 	.word	0x0801a2e0

08015830 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d106      	bne.n	8015850 <ipfrag_free_pbuf_custom+0x20>
 8015842:	4b11      	ldr	r3, [pc, #68]	@ (8015888 <ipfrag_free_pbuf_custom+0x58>)
 8015844:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015848:	4910      	ldr	r1, [pc, #64]	@ (801588c <ipfrag_free_pbuf_custom+0x5c>)
 801584a:	4811      	ldr	r0, [pc, #68]	@ (8015890 <ipfrag_free_pbuf_custom+0x60>)
 801584c:	f001 f9d6 	bl	8016bfc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015850:	68fa      	ldr	r2, [r7, #12]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	429a      	cmp	r2, r3
 8015856:	d006      	beq.n	8015866 <ipfrag_free_pbuf_custom+0x36>
 8015858:	4b0b      	ldr	r3, [pc, #44]	@ (8015888 <ipfrag_free_pbuf_custom+0x58>)
 801585a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801585e:	490d      	ldr	r1, [pc, #52]	@ (8015894 <ipfrag_free_pbuf_custom+0x64>)
 8015860:	480b      	ldr	r0, [pc, #44]	@ (8015890 <ipfrag_free_pbuf_custom+0x60>)
 8015862:	f001 f9cb 	bl	8016bfc <iprintf>
  if (pcr->original != NULL) {
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	695b      	ldr	r3, [r3, #20]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d004      	beq.n	8015878 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	695b      	ldr	r3, [r3, #20]
 8015872:	4618      	mov	r0, r3
 8015874:	f7f7 fd7c 	bl	800d370 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015878:	68f8      	ldr	r0, [r7, #12]
 801587a:	f7ff ffbd 	bl	80157f8 <ip_frag_free_pbuf_custom_ref>
}
 801587e:	bf00      	nop
 8015880:	3710      	adds	r7, #16
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	0801a298 	.word	0x0801a298
 801588c:	0801a45c 	.word	0x0801a45c
 8015890:	0801a2e0 	.word	0x0801a2e0
 8015894:	0801a468 	.word	0x0801a468

08015898 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b094      	sub	sp, #80	@ 0x50
 801589c:	af02      	add	r7, sp, #8
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80158a4:	2300      	movs	r3, #0
 80158a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80158ae:	3b14      	subs	r3, #20
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	da00      	bge.n	80158b6 <ip4_frag+0x1e>
 80158b4:	3307      	adds	r3, #7
 80158b6:	10db      	asrs	r3, r3, #3
 80158b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80158ba:	2314      	movs	r3, #20
 80158bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80158c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80158c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	f003 030f 	and.w	r3, r3, #15
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	009b      	lsls	r3, r3, #2
 80158d4:	b2db      	uxtb	r3, r3
 80158d6:	2b14      	cmp	r3, #20
 80158d8:	d002      	beq.n	80158e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80158da:	f06f 0305 	mvn.w	r3, #5
 80158de:	e110      	b.n	8015b02 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	895b      	ldrh	r3, [r3, #10]
 80158e4:	2b13      	cmp	r3, #19
 80158e6:	d809      	bhi.n	80158fc <ip4_frag+0x64>
 80158e8:	4b88      	ldr	r3, [pc, #544]	@ (8015b0c <ip4_frag+0x274>)
 80158ea:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80158ee:	4988      	ldr	r1, [pc, #544]	@ (8015b10 <ip4_frag+0x278>)
 80158f0:	4888      	ldr	r0, [pc, #544]	@ (8015b14 <ip4_frag+0x27c>)
 80158f2:	f001 f983 	bl	8016bfc <iprintf>
 80158f6:	f06f 0305 	mvn.w	r3, #5
 80158fa:	e102      	b.n	8015b02 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80158fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158fe:	88db      	ldrh	r3, [r3, #6]
 8015900:	b29b      	uxth	r3, r3
 8015902:	4618      	mov	r0, r3
 8015904:	f7f6 f9d6 	bl	800bcb4 <lwip_htons>
 8015908:	4603      	mov	r3, r0
 801590a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801590c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801590e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015912:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015916:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801591c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	891b      	ldrh	r3, [r3, #8]
 8015922:	3b14      	subs	r3, #20
 8015924:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015928:	e0e1      	b.n	8015aee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801592a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801592c:	00db      	lsls	r3, r3, #3
 801592e:	b29b      	uxth	r3, r3
 8015930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015934:	4293      	cmp	r3, r2
 8015936:	bf28      	it	cs
 8015938:	4613      	movcs	r3, r2
 801593a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801593c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015940:	2114      	movs	r1, #20
 8015942:	200e      	movs	r0, #14
 8015944:	f7f7 fa30 	bl	800cda8 <pbuf_alloc>
 8015948:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801594c:	2b00      	cmp	r3, #0
 801594e:	f000 80d5 	beq.w	8015afc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015954:	895b      	ldrh	r3, [r3, #10]
 8015956:	2b13      	cmp	r3, #19
 8015958:	d806      	bhi.n	8015968 <ip4_frag+0xd0>
 801595a:	4b6c      	ldr	r3, [pc, #432]	@ (8015b0c <ip4_frag+0x274>)
 801595c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015960:	496d      	ldr	r1, [pc, #436]	@ (8015b18 <ip4_frag+0x280>)
 8015962:	486c      	ldr	r0, [pc, #432]	@ (8015b14 <ip4_frag+0x27c>)
 8015964:	f001 f94a 	bl	8016bfc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801596a:	685b      	ldr	r3, [r3, #4]
 801596c:	2214      	movs	r2, #20
 801596e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015970:	4618      	mov	r0, r3
 8015972:	f001 fb50 	bl	8017016 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801597c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801597e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8015982:	e064      	b.n	8015a4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	895a      	ldrh	r2, [r3, #10]
 8015988:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801598a:	1ad3      	subs	r3, r2, r3
 801598c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	895b      	ldrh	r3, [r3, #10]
 8015992:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015994:	429a      	cmp	r2, r3
 8015996:	d906      	bls.n	80159a6 <ip4_frag+0x10e>
 8015998:	4b5c      	ldr	r3, [pc, #368]	@ (8015b0c <ip4_frag+0x274>)
 801599a:	f240 322d 	movw	r2, #813	@ 0x32d
 801599e:	495f      	ldr	r1, [pc, #380]	@ (8015b1c <ip4_frag+0x284>)
 80159a0:	485c      	ldr	r0, [pc, #368]	@ (8015b14 <ip4_frag+0x27c>)
 80159a2:	f001 f92b 	bl	8016bfc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80159a6:	8bfa      	ldrh	r2, [r7, #30]
 80159a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80159ac:	4293      	cmp	r3, r2
 80159ae:	bf28      	it	cs
 80159b0:	4613      	movcs	r3, r2
 80159b2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80159b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d105      	bne.n	80159ca <ip4_frag+0x132>
        poff = 0;
 80159be:	2300      	movs	r3, #0
 80159c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	60fb      	str	r3, [r7, #12]
        continue;
 80159c8:	e041      	b.n	8015a4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80159ca:	f7ff ff0d 	bl	80157e8 <ip_frag_alloc_pbuf_custom_ref>
 80159ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80159d0:	69bb      	ldr	r3, [r7, #24]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d103      	bne.n	80159de <ip4_frag+0x146>
        pbuf_free(rambuf);
 80159d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80159d8:	f7f7 fcca 	bl	800d370 <pbuf_free>
        goto memerr;
 80159dc:	e08f      	b.n	8015afe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80159e6:	4413      	add	r3, r2
 80159e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80159ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80159f0:	9201      	str	r2, [sp, #4]
 80159f2:	9300      	str	r3, [sp, #0]
 80159f4:	4603      	mov	r3, r0
 80159f6:	2241      	movs	r2, #65	@ 0x41
 80159f8:	2000      	movs	r0, #0
 80159fa:	f7f7 faff 	bl	800cffc <pbuf_alloced_custom>
 80159fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d106      	bne.n	8015a14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015a06:	69b8      	ldr	r0, [r7, #24]
 8015a08:	f7ff fef6 	bl	80157f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015a0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a0e:	f7f7 fcaf 	bl	800d370 <pbuf_free>
        goto memerr;
 8015a12:	e074      	b.n	8015afe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015a14:	68f8      	ldr	r0, [r7, #12]
 8015a16:	f7f7 fd4b 	bl	800d4b0 <pbuf_ref>
      pcr->original = p;
 8015a1a:	69bb      	ldr	r3, [r7, #24]
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015a20:	69bb      	ldr	r3, [r7, #24]
 8015a22:	4a3f      	ldr	r2, [pc, #252]	@ (8015b20 <ip4_frag+0x288>)
 8015a24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015a26:	6979      	ldr	r1, [r7, #20]
 8015a28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a2a:	f7f7 fd63 	bl	800d4f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015a2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015a32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a36:	1ad3      	subs	r3, r2, r3
 8015a38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015a3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d004      	beq.n	8015a4e <ip4_frag+0x1b6>
        poff = 0;
 8015a44:	2300      	movs	r3, #0
 8015a46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d196      	bne.n	8015984 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015a56:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015a58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a5c:	4413      	add	r3, r2
 8015a5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015a64:	f1a3 0213 	sub.w	r2, r3, #19
 8015a68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	bfcc      	ite	gt
 8015a70:	2301      	movgt	r3, #1
 8015a72:	2300      	movle	r3, #0
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a80:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015a82:	6a3b      	ldr	r3, [r7, #32]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d002      	beq.n	8015a8e <ip4_frag+0x1f6>
 8015a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d003      	beq.n	8015a96 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015a8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015a90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015a94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015a96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7f6 f90b 	bl	800bcb4 <lwip_htons>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	461a      	mov	r2, r3
 8015aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aa4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015aa6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015aa8:	3314      	adds	r3, #20
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7f6 f901 	bl	800bcb4 <lwip_htons>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ab8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015abc:	2200      	movs	r2, #0
 8015abe:	729a      	strb	r2, [r3, #10]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	695b      	ldr	r3, [r3, #20]
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015acc:	68b8      	ldr	r0, [r7, #8]
 8015ace:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015ad0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ad2:	f7f7 fc4d 	bl	800d370 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015ad6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015ada:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015ae2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015ae6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015ae8:	4413      	add	r3, r2
 8015aea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015aee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	f47f af19 	bne.w	801592a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015af8:	2300      	movs	r3, #0
 8015afa:	e002      	b.n	8015b02 <ip4_frag+0x26a>
      goto memerr;
 8015afc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3748      	adds	r7, #72	@ 0x48
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	0801a298 	.word	0x0801a298
 8015b10:	0801a474 	.word	0x0801a474
 8015b14:	0801a2e0 	.word	0x0801a2e0
 8015b18:	0801a490 	.word	0x0801a490
 8015b1c:	0801a4b0 	.word	0x0801a4b0
 8015b20:	08015831 	.word	0x08015831

08015b24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b086      	sub	sp, #24
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015b2e:	230e      	movs	r3, #14
 8015b30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	895b      	ldrh	r3, [r3, #10]
 8015b36:	2b0e      	cmp	r3, #14
 8015b38:	d96e      	bls.n	8015c18 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	7bdb      	ldrb	r3, [r3, #15]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d106      	bne.n	8015b50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015b48:	3301      	adds	r3, #1
 8015b4a:	b2da      	uxtb	r2, r3
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	685b      	ldr	r3, [r3, #4]
 8015b54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	7b1a      	ldrb	r2, [r3, #12]
 8015b5a:	7b5b      	ldrb	r3, [r3, #13]
 8015b5c:	021b      	lsls	r3, r3, #8
 8015b5e:	4313      	orrs	r3, r2
 8015b60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	f003 0301 	and.w	r3, r3, #1
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d023      	beq.n	8015bb6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	d10f      	bne.n	8015b96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	785b      	ldrb	r3, [r3, #1]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d11b      	bne.n	8015bb6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b82:	2b5e      	cmp	r3, #94	@ 0x5e
 8015b84:	d117      	bne.n	8015bb6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	7b5b      	ldrb	r3, [r3, #13]
 8015b8a:	f043 0310 	orr.w	r3, r3, #16
 8015b8e:	b2da      	uxtb	r2, r3
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	735a      	strb	r2, [r3, #13]
 8015b94:	e00f      	b.n	8015bb6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	2206      	movs	r2, #6
 8015b9a:	4928      	ldr	r1, [pc, #160]	@ (8015c3c <ethernet_input+0x118>)
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f001 f975 	bl	8016e8c <memcmp>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d106      	bne.n	8015bb6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	7b5b      	ldrb	r3, [r3, #13]
 8015bac:	f043 0308 	orr.w	r3, r3, #8
 8015bb0:	b2da      	uxtb	r2, r3
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015bb6:	89fb      	ldrh	r3, [r7, #14]
 8015bb8:	2b08      	cmp	r3, #8
 8015bba:	d003      	beq.n	8015bc4 <ethernet_input+0xa0>
 8015bbc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015bc0:	d014      	beq.n	8015bec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015bc2:	e032      	b.n	8015c2a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015bca:	f003 0308 	and.w	r3, r3, #8
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d024      	beq.n	8015c1c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015bd2:	8afb      	ldrh	r3, [r7, #22]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f7f7 fb44 	bl	800d264 <pbuf_remove_header>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d11e      	bne.n	8015c20 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015be2:	6839      	ldr	r1, [r7, #0]
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f7fe ff21 	bl	8014a2c <ip4_input>
      break;
 8015bea:	e013      	b.n	8015c14 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015bf2:	f003 0308 	and.w	r3, r3, #8
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d014      	beq.n	8015c24 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015bfa:	8afb      	ldrh	r3, [r7, #22]
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f7f7 fb30 	bl	800d264 <pbuf_remove_header>
 8015c04:	4603      	mov	r3, r0
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d10e      	bne.n	8015c28 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015c0a:	6839      	ldr	r1, [r7, #0]
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7fe f8c1 	bl	8013d94 <etharp_input>
      break;
 8015c12:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015c14:	2300      	movs	r3, #0
 8015c16:	e00c      	b.n	8015c32 <ethernet_input+0x10e>
    goto free_and_return;
 8015c18:	bf00      	nop
 8015c1a:	e006      	b.n	8015c2a <ethernet_input+0x106>
        goto free_and_return;
 8015c1c:	bf00      	nop
 8015c1e:	e004      	b.n	8015c2a <ethernet_input+0x106>
        goto free_and_return;
 8015c20:	bf00      	nop
 8015c22:	e002      	b.n	8015c2a <ethernet_input+0x106>
        goto free_and_return;
 8015c24:	bf00      	nop
 8015c26:	e000      	b.n	8015c2a <ethernet_input+0x106>
        goto free_and_return;
 8015c28:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f7f7 fba0 	bl	800d370 <pbuf_free>
  return ERR_OK;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3718      	adds	r7, #24
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	0801adb4 	.word	0x0801adb4

08015c40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b086      	sub	sp, #24
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
 8015c4c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015c4e:	8c3b      	ldrh	r3, [r7, #32]
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7f6 f82f 	bl	800bcb4 <lwip_htons>
 8015c56:	4603      	mov	r3, r0
 8015c58:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015c5a:	210e      	movs	r1, #14
 8015c5c:	68b8      	ldr	r0, [r7, #8]
 8015c5e:	f7f7 faf1 	bl	800d244 <pbuf_add_header>
 8015c62:	4603      	mov	r3, r0
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d125      	bne.n	8015cb4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	685b      	ldr	r3, [r3, #4]
 8015c6c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	8afa      	ldrh	r2, [r7, #22]
 8015c72:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	2206      	movs	r2, #6
 8015c78:	6839      	ldr	r1, [r7, #0]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f001 f9cb 	bl	8017016 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015c80:	693b      	ldr	r3, [r7, #16]
 8015c82:	3306      	adds	r3, #6
 8015c84:	2206      	movs	r2, #6
 8015c86:	6879      	ldr	r1, [r7, #4]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f001 f9c4 	bl	8017016 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015c94:	2b06      	cmp	r3, #6
 8015c96:	d006      	beq.n	8015ca6 <ethernet_output+0x66>
 8015c98:	4b0a      	ldr	r3, [pc, #40]	@ (8015cc4 <ethernet_output+0x84>)
 8015c9a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015c9e:	490a      	ldr	r1, [pc, #40]	@ (8015cc8 <ethernet_output+0x88>)
 8015ca0:	480a      	ldr	r0, [pc, #40]	@ (8015ccc <ethernet_output+0x8c>)
 8015ca2:	f000 ffab 	bl	8016bfc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	699b      	ldr	r3, [r3, #24]
 8015caa:	68b9      	ldr	r1, [r7, #8]
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	4798      	blx	r3
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	e002      	b.n	8015cba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015cb4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015cb6:	f06f 0301 	mvn.w	r3, #1
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3718      	adds	r7, #24
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	0801a4c0 	.word	0x0801a4c0
 8015cc8:	0801a4f8 	.word	0x0801a4f8
 8015ccc:	0801a52c 	.word	0x0801a52c

08015cd0 <rtg_main>:
u16_t dest_port = 0;
struct udp_pcb *upcb;
uint8_t incomming_buffer[MAX_BUF_LEN] = {0};
u16_t incomming_len = 0;

void rtg_main() {
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	af00      	add	r7, sp, #0
    printf("UDP Server is running...\r\n");
 8015cd4:	480a      	ldr	r0, [pc, #40]	@ (8015d00 <rtg_main+0x30>)
 8015cd6:	f000 fff9 	bl	8016ccc <puts>
    udpServer_init();
 8015cda:	f000 f96b 	bl	8015fb4 <udpServer_init>

    while (1) {
        ethernetif_input(&gnetif);
 8015cde:	4809      	ldr	r0, [pc, #36]	@ (8015d04 <rtg_main+0x34>)
 8015ce0:	f7f5 fd64 	bl	800b7ac <ethernetif_input>
        sys_check_timeouts();
 8015ce4:	f7fd f842 	bl	8012d6c <sys_check_timeouts>

        if (callback_flag == 1) {
 8015ce8:	4b07      	ldr	r3, [pc, #28]	@ (8015d08 <rtg_main+0x38>)
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	d1f6      	bne.n	8015cde <rtg_main+0xe>
            printf("Received command for testing\r\n");
 8015cf0:	4806      	ldr	r0, [pc, #24]	@ (8015d0c <rtg_main+0x3c>)
 8015cf2:	f000 ffeb 	bl	8016ccc <puts>
            callback_flag = 0;
 8015cf6:	4b04      	ldr	r3, [pc, #16]	@ (8015d08 <rtg_main+0x38>)
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	701a      	strb	r2, [r3, #0]
        ethernetif_input(&gnetif);
 8015cfc:	e7ef      	b.n	8015cde <rtg_main+0xe>
 8015cfe:	bf00      	nop
 8015d00:	0801a554 	.word	0x0801a554
 8015d04:	20000bb0 	.word	0x20000bb0
 8015d08:	20008d5a 	.word	0x20008d5a
 8015d0c:	0801a570 	.word	0x0801a570

08015d10 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d24:	68b9      	ldr	r1, [r7, #8]
 8015d26:	4804      	ldr	r0, [pc, #16]	@ (8015d38 <_write+0x28>)
 8015d28:	f7f3 fc68 	bl	80095fc <HAL_UART_Transmit>
	return len;
 8015d2c:	687b      	ldr	r3, [r7, #4]
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	20000558 	.word	0x20000558

08015d3c <__io_getchar>:

// scanf
int __io_getchar(void) {
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8015d42:	2300      	movs	r3, #0
 8015d44:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8015d46:	1df9      	adds	r1, r7, #7
 8015d48:	f04f 33ff 	mov.w	r3, #4294967295
 8015d4c:	2201      	movs	r2, #1
 8015d4e:	4807      	ldr	r0, [pc, #28]	@ (8015d6c <__io_getchar+0x30>)
 8015d50:	f7f3 fcd7 	bl	8009702 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8015d54:	1df9      	adds	r1, r7, #7
 8015d56:	f04f 33ff 	mov.w	r3, #4294967295
 8015d5a:	2201      	movs	r2, #1
 8015d5c:	4803      	ldr	r0, [pc, #12]	@ (8015d6c <__io_getchar+0x30>)
 8015d5e:	f7f3 fc4d 	bl	80095fc <HAL_UART_Transmit>
	return ch;
 8015d62:	79fb      	ldrb	r3, [r7, #7]
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	20000558 	.word	0x20000558

08015d70 <_read>:

int _read(int file, char *ptr, int len) {
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b086      	sub	sp, #24
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	617b      	str	r3, [r7, #20]
	char ch;

	for (; DataIdx < len; DataIdx++) {
 8015d80:	e016      	b.n	8015db0 <_read+0x40>
		ch = __io_getchar();
 8015d82:	f7ff ffdb 	bl	8015d3c <__io_getchar>
 8015d86:	4603      	mov	r3, r0
 8015d88:	74fb      	strb	r3, [r7, #19]
		*ptr = ch;
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	7cfa      	ldrb	r2, [r7, #19]
 8015d8e:	701a      	strb	r2, [r3, #0]
		ptr++;
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	3301      	adds	r3, #1
 8015d94:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8015d96:	7cfb      	ldrb	r3, [r7, #19]
 8015d98:	2b0d      	cmp	r3, #13
 8015d9a:	d002      	beq.n	8015da2 <_read+0x32>
 8015d9c:	7cfb      	ldrb	r3, [r7, #19]
 8015d9e:	2b0a      	cmp	r3, #10
 8015da0:	d103      	bne.n	8015daa <_read+0x3a>
			*(ptr) = 0;
 8015da2:	68bb      	ldr	r3, [r7, #8]
 8015da4:	2200      	movs	r2, #0
 8015da6:	701a      	strb	r2, [r3, #0]
			break;
 8015da8:	e006      	b.n	8015db8 <_read+0x48>
	for (; DataIdx < len; DataIdx++) {
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	3301      	adds	r3, #1
 8015dae:	617b      	str	r3, [r7, #20]
 8015db0:	697a      	ldr	r2, [r7, #20]
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	429a      	cmp	r2, r3
 8015db6:	dbe4      	blt.n	8015d82 <_read+0x12>
		}
	}
	return DataIdx + 1;
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	3301      	adds	r3, #1
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3718      	adds	r7, #24
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}

08015dc4 <execute_test>:
#include "ADC_test.h"
#include "Timer_test.h"
#include "SPI_test.h"
#include "I2C_test.h"

static uint8_t execute_test(TestCommand* command) {
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b082      	sub	sp, #8
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
    printf("Executing test for Peripheral: %u, Test-ID: %u\r\n",
           (unsigned int)command->peripheral,
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	791b      	ldrb	r3, [r3, #4]
    printf("Executing test for Peripheral: %u, Test-ID: %u\r\n",
 8015dd0:	4619      	mov	r1, r3
           (unsigned int)command->test_id);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
    printf("Executing test for Peripheral: %u, Test-ID: %u\r\n",
 8015dd6:	461a      	mov	r2, r3
 8015dd8:	4833      	ldr	r0, [pc, #204]	@ (8015ea8 <execute_test+0xe4>)
 8015dda:	f000 ff0f 	bl	8016bfc <iprintf>

    switch (command->peripheral) {
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	791b      	ldrb	r3, [r3, #4]
 8015de2:	3b01      	subs	r3, #1
 8015de4:	2b0f      	cmp	r3, #15
 8015de6:	d853      	bhi.n	8015e90 <execute_test+0xcc>
 8015de8:	a201      	add	r2, pc, #4	@ (adr r2, 8015df0 <execute_test+0x2c>)
 8015dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dee:	bf00      	nop
 8015df0:	08015e55 	.word	0x08015e55
 8015df4:	08015e31 	.word	0x08015e31
 8015df8:	08015e91 	.word	0x08015e91
 8015dfc:	08015e63 	.word	0x08015e63
 8015e00:	08015e91 	.word	0x08015e91
 8015e04:	08015e91 	.word	0x08015e91
 8015e08:	08015e91 	.word	0x08015e91
 8015e0c:	08015e7b 	.word	0x08015e7b
 8015e10:	08015e91 	.word	0x08015e91
 8015e14:	08015e91 	.word	0x08015e91
 8015e18:	08015e91 	.word	0x08015e91
 8015e1c:	08015e91 	.word	0x08015e91
 8015e20:	08015e91 	.word	0x08015e91
 8015e24:	08015e91 	.word	0x08015e91
 8015e28:	08015e91 	.word	0x08015e91
 8015e2c:	08015e47 	.word	0x08015e47
        case TEST_PERIPHERAL_UART:
            return test_uart(command->bit_pattern, command->pattern_length, command->iterations);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	1dd8      	adds	r0, r3, #7
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	7999      	ldrb	r1, [r3, #6]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	795b      	ldrb	r3, [r3, #5]
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	f000 fbdb 	bl	80165f8 <test_uart>
 8015e42:	4603      	mov	r3, r0
 8015e44:	e02b      	b.n	8015e9e <execute_test+0xda>
        case TEST_PERIPHERAL_ADC:
            return test_adc(command->iterations);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	795b      	ldrb	r3, [r3, #5]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f000 f8e4 	bl	8016018 <test_adc>
 8015e50:	4603      	mov	r3, r0
 8015e52:	e024      	b.n	8015e9e <execute_test+0xda>
        case TEST_PERIPHERAL_TIMER:
            return test_timer(command->iterations);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	795b      	ldrb	r3, [r3, #5]
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f000 fadf 	bl	801641c <test_timer>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	e01d      	b.n	8015e9e <execute_test+0xda>
        case TEST_PERIPHERAL_SPI:
            return test_spi(command->bit_pattern, command->pattern_length, command->iterations);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	1dd8      	adds	r0, r3, #7
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	799b      	ldrb	r3, [r3, #6]
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	795b      	ldrb	r3, [r3, #5]
 8015e70:	461a      	mov	r2, r3
 8015e72:	f000 fa19 	bl	80162a8 <test_spi>
 8015e76:	4603      	mov	r3, r0
 8015e78:	e011      	b.n	8015e9e <execute_test+0xda>
        case TEST_PERIPHERAL_I2C:
            return test_i2c(command->bit_pattern, command->pattern_length, command->iterations);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	1dd8      	adds	r0, r3, #7
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	7999      	ldrb	r1, [r3, #6]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	795b      	ldrb	r3, [r3, #5]
 8015e86:	461a      	mov	r2, r3
 8015e88:	f000 f98a 	bl	80161a0 <test_i2c>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	e006      	b.n	8015e9e <execute_test+0xda>
        default:
            printf("Invalid peripheral for testing: %d\r\n", command->peripheral);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	791b      	ldrb	r3, [r3, #4]
 8015e94:	4619      	mov	r1, r3
 8015e96:	4805      	ldr	r0, [pc, #20]	@ (8015eac <execute_test+0xe8>)
 8015e98:	f000 feb0 	bl	8016bfc <iprintf>
            return 0xFF;
 8015e9c:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3708      	adds	r7, #8
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	0801a590 	.word	0x0801a590
 8015eac:	0801a5c4 	.word	0x0801a5c4

08015eb0 <udp_receive_callback>:

void udp_receive_callback(void* arg, struct udp_pcb* upcb, struct pbuf* p, const ip_addr_t* addr, u16_t port) {
 8015eb0:	b590      	push	{r4, r7, lr}
 8015eb2:	b0a5      	sub	sp, #148	@ 0x94
 8015eb4:	af02      	add	r7, sp, #8
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	607a      	str	r2, [r7, #4]
 8015ebc:	603b      	str	r3, [r7, #0]
    TestCommand command;
    TestResult result;

    // Parse incoming command
    memcpy(&command, p->payload, sizeof(TestCommand));
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	6859      	ldr	r1, [r3, #4]
 8015ec2:	f107 031c 	add.w	r3, r7, #28
 8015ec6:	226c      	movs	r2, #108	@ 0x6c
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f001 f8a4 	bl	8017016 <memcpy>
    pbuf_free(p);
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f7f7 fa4e 	bl	800d370 <pbuf_free>

    // Validate pattern length
       if (command.pattern_length != strlen(command.bit_pattern)) {
 8015ed4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015ed8:	461c      	mov	r4, r3
 8015eda:	f107 031c 	add.w	r3, r7, #28
 8015ede:	3307      	adds	r3, #7
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7ea f995 	bl	8000210 <strlen>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	429c      	cmp	r4, r3
 8015eea:	d01c      	beq.n	8015f26 <udp_receive_callback+0x76>
           printf("Pattern length mismatch. Expected: %d, Received: %d\r\n", (int)strlen(command.bit_pattern), command.pattern_length);
 8015eec:	f107 031c 	add.w	r3, r7, #28
 8015ef0:	3307      	adds	r3, #7
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f7ea f98c 	bl	8000210 <strlen>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	4619      	mov	r1, r3
 8015efc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015f00:	461a      	mov	r2, r3
 8015f02:	4814      	ldr	r0, [pc, #80]	@ (8015f54 <udp_receive_callback+0xa4>)
 8015f04:	f000 fe7a 	bl	8016bfc <iprintf>
           result.result = 0xFF;  // Indicate error
 8015f08:	23ff      	movs	r3, #255	@ 0xff
 8015f0a:	763b      	strb	r3, [r7, #24]
           result.test_id = command.test_id;
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	617b      	str	r3, [r7, #20]
           send_packet(upcb, &result, sizeof(TestResult), addr, port);
 8015f10:	f107 0114 	add.w	r1, r7, #20
 8015f14:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8015f18:	9300      	str	r3, [sp, #0]
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	2208      	movs	r2, #8
 8015f1e:	68b8      	ldr	r0, [r7, #8]
 8015f20:	f000 f81a 	bl	8015f58 <send_packet>
 8015f24:	e012      	b.n	8015f4c <udp_receive_callback+0x9c>
           return;
       }

    // Execute the test
    result.test_id = command.test_id;
 8015f26:	69fb      	ldr	r3, [r7, #28]
 8015f28:	617b      	str	r3, [r7, #20]
    result.result = execute_test(&command);
 8015f2a:	f107 031c 	add.w	r3, r7, #28
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f7ff ff48 	bl	8015dc4 <execute_test>
 8015f34:	4603      	mov	r3, r0
 8015f36:	763b      	strb	r3, [r7, #24]

    // Send the result back to the client
    send_packet(upcb, &result, sizeof(TestResult), addr, port);
 8015f38:	f107 0114 	add.w	r1, r7, #20
 8015f3c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	2208      	movs	r2, #8
 8015f46:	68b8      	ldr	r0, [r7, #8]
 8015f48:	f000 f806 	bl	8015f58 <send_packet>
}
 8015f4c:	378c      	adds	r7, #140	@ 0x8c
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd90      	pop	{r4, r7, pc}
 8015f52:	bf00      	nop
 8015f54:	0801a5ec 	.word	0x0801a5ec

08015f58 <send_packet>:



err_t send_packet(struct udp_pcb* pcb, const void* payload, u16_t payload_len, const ip_addr_t* ipaddr, u16_t port)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b086      	sub	sp, #24
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	603b      	str	r3, [r7, #0]
 8015f64:	4613      	mov	r3, r2
 8015f66:	80fb      	strh	r3, [r7, #6]
    err_t err;
    struct pbuf* p;

    // allocate a pbuf for the payload
    p = pbuf_alloc(PBUF_TRANSPORT, payload_len, PBUF_RAM);
 8015f68:	88fb      	ldrh	r3, [r7, #6]
 8015f6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015f6e:	4619      	mov	r1, r3
 8015f70:	2036      	movs	r0, #54	@ 0x36
 8015f72:	f7f6 ff19 	bl	800cda8 <pbuf_alloc>
 8015f76:	6178      	str	r0, [r7, #20]
    if (!p) {
 8015f78:	697b      	ldr	r3, [r7, #20]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d102      	bne.n	8015f84 <send_packet+0x2c>
        // failed to allocate pbuf
        return ERR_MEM;
 8015f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f82:	e013      	b.n	8015fac <send_packet+0x54>
    }

    // copy the payload into the pbuf
    memcpy(p->payload, payload, payload_len);
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	88fa      	ldrh	r2, [r7, #6]
 8015f8a:	68b9      	ldr	r1, [r7, #8]
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f001 f842 	bl	8017016 <memcpy>

    // send the packet
    err = udp_sendto(pcb, p, ipaddr, port);
 8015f92:	8c3b      	ldrh	r3, [r7, #32]
 8015f94:	683a      	ldr	r2, [r7, #0]
 8015f96:	6979      	ldr	r1, [r7, #20]
 8015f98:	68f8      	ldr	r0, [r7, #12]
 8015f9a:	f7fd f8eb 	bl	8013174 <udp_sendto>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	74fb      	strb	r3, [r7, #19]

    // free the pbuf
    pbuf_free(p);
 8015fa2:	6978      	ldr	r0, [r7, #20]
 8015fa4:	f7f7 f9e4 	bl	800d370 <pbuf_free>

    return err;
 8015fa8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3718      	adds	r7, #24
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <udpServer_init>:


void udpServer_init(void) {
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   upcb = udp_new();
 8015fba:	f7fd fb7b 	bl	80136b4 <udp_new>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	4a11      	ldr	r2, [pc, #68]	@ (8016008 <udpServer_init+0x54>)
 8015fc2:	6013      	str	r3, [r2, #0]
   callback_flag = 0;
 8015fc4:	4b11      	ldr	r3, [pc, #68]	@ (801600c <udpServer_init+0x58>)
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	701a      	strb	r2, [r3, #0]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 50,007 is the server UDP port
 8015fca:	4b0f      	ldr	r3, [pc, #60]	@ (8016008 <udpServer_init+0x54>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	f24c 3257 	movw	r2, #50007	@ 0xc357
 8015fd2:	490f      	ldr	r1, [pc, #60]	@ (8016010 <udpServer_init+0x5c>)
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7fd fa83 	bl	80134e0 <udp_bind>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	71fb      	strb	r3, [r7, #7]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 8015fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d107      	bne.n	8015ff6 <udpServer_init+0x42>
	   udp_recv(upcb, udp_receive_callback, NULL);
 8015fe6:	4b08      	ldr	r3, [pc, #32]	@ (8016008 <udpServer_init+0x54>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	2200      	movs	r2, #0
 8015fec:	4909      	ldr	r1, [pc, #36]	@ (8016014 <udpServer_init+0x60>)
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f7fd fafe 	bl	80135f0 <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 8015ff4:	e004      	b.n	8016000 <udpServer_init+0x4c>
	   udp_remove(upcb);
 8015ff6:	4b04      	ldr	r3, [pc, #16]	@ (8016008 <udpServer_init+0x54>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7fd fb18 	bl	8013630 <udp_remove>
}
 8016000:	bf00      	nop
 8016002:	3708      	adds	r7, #8
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	20008d5c 	.word	0x20008d5c
 801600c:	20008d5a 	.word	0x20008d5a
 8016010:	0801adb0 	.word	0x0801adb0
 8016014:	08015eb1 	.word	0x08015eb1

08016018 <test_adc>:
 * Perform ADC test.
 *
 * @param iterations Number of iterations to sample ADC.
 * @return 1 for success, 0 for failure.
 */
uint8_t test_adc(uint16_t iterations) {
 8016018:	b580      	push	{r7, lr}
 801601a:	b088      	sub	sp, #32
 801601c:	af02      	add	r7, sp, #8
 801601e:	4603      	mov	r3, r0
 8016020:	80fb      	strh	r3, [r7, #6]
    printf("Starting ADC Test with %u iterations...\r\n", iterations);
 8016022:	88fb      	ldrh	r3, [r7, #6]
 8016024:	4619      	mov	r1, r3
 8016026:	483b      	ldr	r0, [pc, #236]	@ (8016114 <test_adc+0xfc>)
 8016028:	f000 fde8 	bl	8016bfc <iprintf>

    uint32_t adc_value = 0;
 801602c:	2300      	movs	r3, #0
 801602e:	60fb      	str	r3, [r7, #12]
    uint32_t success = 1;
 8016030:	2301      	movs	r3, #1
 8016032:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < iterations; i++) {
 8016034:	2300      	movs	r3, #0
 8016036:	827b      	strh	r3, [r7, #18]
 8016038:	e04f      	b.n	80160da <test_adc+0xc2>
        // Start ADC conversion
        HAL_ADC_Start(&hadc1);
 801603a:	4837      	ldr	r0, [pc, #220]	@ (8016118 <test_adc+0x100>)
 801603c:	f7eb ff1a 	bl	8001e74 <HAL_ADC_Start>

        // Wait for ADC conversion to complete
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8016040:	2164      	movs	r1, #100	@ 0x64
 8016042:	4835      	ldr	r0, [pc, #212]	@ (8016118 <test_adc+0x100>)
 8016044:	f7ec f818 	bl	8002078 <HAL_ADC_PollForConversion>
 8016048:	4603      	mov	r3, r0
 801604a:	2b00      	cmp	r3, #0
 801604c:	d131      	bne.n	80160b2 <test_adc+0x9a>
            adc_value = HAL_ADC_GetValue(&hadc1);
 801604e:	4832      	ldr	r0, [pc, #200]	@ (8016118 <test_adc+0x100>)
 8016050:	f7ec f9ad 	bl	80023ae <HAL_ADC_GetValue>
 8016054:	60f8      	str	r0, [r7, #12]

            printf("Iteration %u: ADC Value = %lu (Expected: %lu ± %lu)\r\n",i + 1, adc_value, known_adc_values[i], acceptable_offset);
 8016056:	8a7b      	ldrh	r3, [r7, #18]
 8016058:	1c59      	adds	r1, r3, #1
 801605a:	8a7b      	ldrh	r3, [r7, #18]
 801605c:	4a2f      	ldr	r2, [pc, #188]	@ (801611c <test_adc+0x104>)
 801605e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016062:	2296      	movs	r2, #150	@ 0x96
 8016064:	9200      	str	r2, [sp, #0]
 8016066:	68fa      	ldr	r2, [r7, #12]
 8016068:	482d      	ldr	r0, [pc, #180]	@ (8016120 <test_adc+0x108>)
 801606a:	f000 fdc7 	bl	8016bfc <iprintf>


            // Validate the ADC value within the acceptable range
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 801606e:	8a7b      	ldrh	r3, [r7, #18]
 8016070:	4a2a      	ldr	r2, [pc, #168]	@ (801611c <test_adc+0x104>)
 8016072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016076:	2296      	movs	r2, #150	@ 0x96
 8016078:	1a9b      	subs	r3, r3, r2
 801607a:	68fa      	ldr	r2, [r7, #12]
 801607c:	429a      	cmp	r2, r3
 801607e:	d308      	bcc.n	8016092 <test_adc+0x7a>
                adc_value > known_adc_values[i] + acceptable_offset) {
 8016080:	8a7b      	ldrh	r3, [r7, #18]
 8016082:	4a26      	ldr	r2, [pc, #152]	@ (801611c <test_adc+0x104>)
 8016084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016088:	2296      	movs	r2, #150	@ 0x96
 801608a:	4413      	add	r3, r2
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 801608c:	68fa      	ldr	r2, [r7, #12]
 801608e:	429a      	cmp	r2, r3
 8016090:	d91a      	bls.n	80160c8 <test_adc+0xb0>
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 8016092:	8a7b      	ldrh	r3, [r7, #18]
 8016094:	1c59      	adds	r1, r3, #1
 8016096:	8a7b      	ldrh	r3, [r7, #18]
                       i + 1, known_adc_values[i], acceptable_offset, adc_value);
 8016098:	4a20      	ldr	r2, [pc, #128]	@ (801611c <test_adc+0x104>)
 801609a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 801609e:	2096      	movs	r0, #150	@ 0x96
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	9300      	str	r3, [sp, #0]
 80160a4:	4603      	mov	r3, r0
 80160a6:	481f      	ldr	r0, [pc, #124]	@ (8016124 <test_adc+0x10c>)
 80160a8:	f000 fda8 	bl	8016bfc <iprintf>
                success = 0; // Mark as failure
 80160ac:	2300      	movs	r3, #0
 80160ae:	617b      	str	r3, [r7, #20]
 80160b0:	e00a      	b.n	80160c8 <test_adc+0xb0>
            }
        } else {
            printf("ADC conversion timeout on iteration %u.\r\n", i + 1);
 80160b2:	8a7b      	ldrh	r3, [r7, #18]
 80160b4:	3301      	adds	r3, #1
 80160b6:	4619      	mov	r1, r3
 80160b8:	481b      	ldr	r0, [pc, #108]	@ (8016128 <test_adc+0x110>)
 80160ba:	f000 fd9f 	bl	8016bfc <iprintf>
            HAL_ADC_Stop(&hadc1);
 80160be:	4816      	ldr	r0, [pc, #88]	@ (8016118 <test_adc+0x100>)
 80160c0:	f7eb ffa6 	bl	8002010 <HAL_ADC_Stop>
            return 0xFF; // Failure
 80160c4:	23ff      	movs	r3, #255	@ 0xff
 80160c6:	e020      	b.n	801610a <test_adc+0xf2>
        }

        // Stop ADC conversion
        HAL_ADC_Stop(&hadc1);
 80160c8:	4813      	ldr	r0, [pc, #76]	@ (8016118 <test_adc+0x100>)
 80160ca:	f7eb ffa1 	bl	8002010 <HAL_ADC_Stop>

        // Add delay between iterations
        HAL_Delay(100);
 80160ce:	2064      	movs	r0, #100	@ 0x64
 80160d0:	f7eb fe68 	bl	8001da4 <HAL_Delay>
    for (uint16_t i = 0; i < iterations; i++) {
 80160d4:	8a7b      	ldrh	r3, [r7, #18]
 80160d6:	3301      	adds	r3, #1
 80160d8:	827b      	strh	r3, [r7, #18]
 80160da:	8a7a      	ldrh	r2, [r7, #18]
 80160dc:	88fb      	ldrh	r3, [r7, #6]
 80160de:	429a      	cmp	r2, r3
 80160e0:	d3ab      	bcc.n	801603a <test_adc+0x22>
    }

    if (success) {
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d00c      	beq.n	8016102 <test_adc+0xea>
        printf("ADC Test Passed for all %u iterations.\r\n", iterations);
 80160e8:	88fb      	ldrh	r3, [r7, #6]
 80160ea:	4619      	mov	r1, r3
 80160ec:	480f      	ldr	r0, [pc, #60]	@ (801612c <test_adc+0x114>)
 80160ee:	f000 fd85 	bl	8016bfc <iprintf>
    } else {
        printf("ADC Test Failed.\r\n");
        return 0xFF;
    }
    printf("***********************\r\n");
 80160f2:	480f      	ldr	r0, [pc, #60]	@ (8016130 <test_adc+0x118>)
 80160f4:	f000 fdea 	bl	8016ccc <puts>
    printf("\nADC Test complete.\r\n");
 80160f8:	480e      	ldr	r0, [pc, #56]	@ (8016134 <test_adc+0x11c>)
 80160fa:	f000 fde7 	bl	8016ccc <puts>
    return 1;
 80160fe:	2301      	movs	r3, #1
 8016100:	e003      	b.n	801610a <test_adc+0xf2>
        printf("ADC Test Failed.\r\n");
 8016102:	480d      	ldr	r0, [pc, #52]	@ (8016138 <test_adc+0x120>)
 8016104:	f000 fde2 	bl	8016ccc <puts>
        return 0xFF;
 8016108:	23ff      	movs	r3, #255	@ 0xff
}
 801610a:	4618      	mov	r0, r3
 801610c:	3718      	adds	r7, #24
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
 8016112:	bf00      	nop
 8016114:	0801a624 	.word	0x0801a624
 8016118:	200001e4 	.word	0x200001e4
 801611c:	0801adc4 	.word	0x0801adc4
 8016120:	0801a650 	.word	0x0801a650
 8016124:	0801a688 	.word	0x0801a688
 8016128:	0801a6c4 	.word	0x0801a6c4
 801612c:	0801a6f0 	.word	0x0801a6f0
 8016130:	0801a730 	.word	0x0801a730
 8016134:	0801a74c 	.word	0x0801a74c
 8016138:	0801a71c 	.word	0x0801a71c

0801613c <I2C_Scan>:
#include "I2C_test.h"

unsigned char data_from_i2c4;
uint8_t address; // Global variable for the detected address

uint8_t I2C_Scan(I2C_HandleTypeDef *hi2c) {
 801613c:	b580      	push	{r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C bus...\r\n");
 8016144:	4813      	ldr	r0, [pc, #76]	@ (8016194 <I2C_Scan+0x58>)
 8016146:	f000 fdc1 	bl	8016ccc <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 801614a:	2301      	movs	r3, #1
 801614c:	73fb      	strb	r3, [r7, #15]
 801614e:	e015      	b.n	801617c <I2C_Scan+0x40>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8016150:	7bfb      	ldrb	r3, [r7, #15]
 8016152:	b29b      	uxth	r3, r3
 8016154:	005b      	lsls	r3, r3, #1
 8016156:	b299      	uxth	r1, r3
 8016158:	230a      	movs	r3, #10
 801615a:	2201      	movs	r2, #1
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7ee fea5 	bl	8004eac <HAL_I2C_IsDeviceReady>
 8016162:	4603      	mov	r3, r0
 8016164:	2b00      	cmp	r3, #0
 8016166:	d106      	bne.n	8016176 <I2C_Scan+0x3a>
            printf("Device found at 0x%02X\r\n", addr);
 8016168:	7bfb      	ldrb	r3, [r7, #15]
 801616a:	4619      	mov	r1, r3
 801616c:	480a      	ldr	r0, [pc, #40]	@ (8016198 <I2C_Scan+0x5c>)
 801616e:	f000 fd45 	bl	8016bfc <iprintf>
            return addr; // Return the first found address
 8016172:	7bfb      	ldrb	r3, [r7, #15]
 8016174:	e00a      	b.n	801618c <I2C_Scan+0x50>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8016176:	7bfb      	ldrb	r3, [r7, #15]
 8016178:	3301      	adds	r3, #1
 801617a:	73fb      	strb	r3, [r7, #15]
 801617c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016180:	2b00      	cmp	r3, #0
 8016182:	dae5      	bge.n	8016150 <I2C_Scan+0x14>
        }
    }
    printf("No device found.\r\n");
 8016184:	4805      	ldr	r0, [pc, #20]	@ (801619c <I2C_Scan+0x60>)
 8016186:	f000 fda1 	bl	8016ccc <puts>
    return 0; // No device found
 801618a:	2300      	movs	r3, #0
}
 801618c:	4618      	mov	r0, r3
 801618e:	3710      	adds	r7, #16
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	0801a764 	.word	0x0801a764
 8016198:	0801a77c 	.word	0x0801a77c
 801619c:	0801a798 	.word	0x0801a798

080161a0 <test_i2c>:

uint8_t test_i2c(char *bit_pattern, uint8_t pattern_length, uint16_t iterations) {
 80161a0:	b590      	push	{r4, r7, lr}
 80161a2:	b087      	sub	sp, #28
 80161a4:	af02      	add	r7, sp, #8
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	460b      	mov	r3, r1
 80161aa:	70fb      	strb	r3, [r7, #3]
 80161ac:	4613      	mov	r3, r2
 80161ae:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef status;

    // Scan for a valid device
    address = I2C_Scan(I2C_4);
 80161b0:	482a      	ldr	r0, [pc, #168]	@ (801625c <test_i2c+0xbc>)
 80161b2:	f7ff ffc3 	bl	801613c <I2C_Scan>
 80161b6:	4603      	mov	r3, r0
 80161b8:	461a      	mov	r2, r3
 80161ba:	4b29      	ldr	r3, [pc, #164]	@ (8016260 <test_i2c+0xc0>)
 80161bc:	701a      	strb	r2, [r3, #0]
    if (address == 0) {
 80161be:	4b28      	ldr	r3, [pc, #160]	@ (8016260 <test_i2c+0xc0>)
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d104      	bne.n	80161d0 <test_i2c+0x30>
        printf("No device found. Cannot proceed with the test.\r\n");
 80161c6:	4827      	ldr	r0, [pc, #156]	@ (8016264 <test_i2c+0xc4>)
 80161c8:	f000 fd80 	bl	8016ccc <puts>
        return 0xFF; // Error
 80161cc:	23ff      	movs	r3, #255	@ 0xff
 80161ce:	e041      	b.n	8016254 <test_i2c+0xb4>
    }

    // Prepare slave to receive
    HAL_I2C_Slave_Receive_IT(I2C_2, &data_from_i2c4, sizeof(data_from_i2c4));
 80161d0:	2201      	movs	r2, #1
 80161d2:	4925      	ldr	r1, [pc, #148]	@ (8016268 <test_i2c+0xc8>)
 80161d4:	4825      	ldr	r0, [pc, #148]	@ (801626c <test_i2c+0xcc>)
 80161d6:	f7ee fe19 	bl	8004e0c <HAL_I2C_Slave_Receive_IT>

    // Perform test iterations
    for (uint16_t i = 0; i < iterations; i++) {
 80161da:	2300      	movs	r3, #0
 80161dc:	81fb      	strh	r3, [r7, #14]
 80161de:	e02e      	b.n	801623e <test_i2c+0x9e>
        printf("Iteration %d/%d\r\n", i + 1, iterations);
 80161e0:	89fb      	ldrh	r3, [r7, #14]
 80161e2:	3301      	adds	r3, #1
 80161e4:	883a      	ldrh	r2, [r7, #0]
 80161e6:	4619      	mov	r1, r3
 80161e8:	4821      	ldr	r0, [pc, #132]	@ (8016270 <test_i2c+0xd0>)
 80161ea:	f000 fd07 	bl	8016bfc <iprintf>

        // Master transmits bit pattern to slave
        status = HAL_I2C_Master_Transmit(I2C_4, address << 1, (uint8_t *)bit_pattern, pattern_length, HAL_MAX_DELAY);
 80161ee:	4b1c      	ldr	r3, [pc, #112]	@ (8016260 <test_i2c+0xc0>)
 80161f0:	781b      	ldrb	r3, [r3, #0]
 80161f2:	005b      	lsls	r3, r3, #1
 80161f4:	b299      	uxth	r1, r3
 80161f6:	78fb      	ldrb	r3, [r7, #3]
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	f04f 32ff 	mov.w	r2, #4294967295
 80161fe:	9200      	str	r2, [sp, #0]
 8016200:	687a      	ldr	r2, [r7, #4]
 8016202:	4816      	ldr	r0, [pc, #88]	@ (801625c <test_i2c+0xbc>)
 8016204:	f7ee fd0e 	bl	8004c24 <HAL_I2C_Master_Transmit>
 8016208:	4603      	mov	r3, r0
 801620a:	737b      	strb	r3, [r7, #13]
        if (status != HAL_OK) {
 801620c:	7b7b      	ldrb	r3, [r7, #13]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d00c      	beq.n	801622c <test_i2c+0x8c>
            printf("Transmission failed at iteration %d. Error: %ld\r\n", i + 1, HAL_I2C_GetError(I2C_4));
 8016212:	89fb      	ldrh	r3, [r7, #14]
 8016214:	1c5c      	adds	r4, r3, #1
 8016216:	4811      	ldr	r0, [pc, #68]	@ (801625c <test_i2c+0xbc>)
 8016218:	f7ee ffc8 	bl	80051ac <HAL_I2C_GetError>
 801621c:	4603      	mov	r3, r0
 801621e:	461a      	mov	r2, r3
 8016220:	4621      	mov	r1, r4
 8016222:	4814      	ldr	r0, [pc, #80]	@ (8016274 <test_i2c+0xd4>)
 8016224:	f000 fcea 	bl	8016bfc <iprintf>
            return 0xFF; // Error
 8016228:	23ff      	movs	r3, #255	@ 0xff
 801622a:	e013      	b.n	8016254 <test_i2c+0xb4>
        }

        printf("Iteration %d successful.\r\n", i + 1);
 801622c:	89fb      	ldrh	r3, [r7, #14]
 801622e:	3301      	adds	r3, #1
 8016230:	4619      	mov	r1, r3
 8016232:	4811      	ldr	r0, [pc, #68]	@ (8016278 <test_i2c+0xd8>)
 8016234:	f000 fce2 	bl	8016bfc <iprintf>
    for (uint16_t i = 0; i < iterations; i++) {
 8016238:	89fb      	ldrh	r3, [r7, #14]
 801623a:	3301      	adds	r3, #1
 801623c:	81fb      	strh	r3, [r7, #14]
 801623e:	89fa      	ldrh	r2, [r7, #14]
 8016240:	883b      	ldrh	r3, [r7, #0]
 8016242:	429a      	cmp	r2, r3
 8016244:	d3cc      	bcc.n	80161e0 <test_i2c+0x40>
    }

    printf("***********************\r\n");
 8016246:	480d      	ldr	r0, [pc, #52]	@ (801627c <test_i2c+0xdc>)
 8016248:	f000 fd40 	bl	8016ccc <puts>
    printf("\nI2C test completed successfully.\r\n");
 801624c:	480c      	ldr	r0, [pc, #48]	@ (8016280 <test_i2c+0xe0>)
 801624e:	f000 fd3d 	bl	8016ccc <puts>
    return 1; // Success
 8016252:	2301      	movs	r3, #1
}
 8016254:	4618      	mov	r0, r3
 8016256:	3714      	adds	r7, #20
 8016258:	46bd      	mov	sp, r7
 801625a:	bd90      	pop	{r4, r7, pc}
 801625c:	20000294 	.word	0x20000294
 8016260:	20008d61 	.word	0x20008d61
 8016264:	0801a7ac 	.word	0x0801a7ac
 8016268:	20008d60 	.word	0x20008d60
 801626c:	20000240 	.word	0x20000240
 8016270:	0801a7dc 	.word	0x0801a7dc
 8016274:	0801a7f0 	.word	0x0801a7f0
 8016278:	0801a824 	.word	0x0801a824
 801627c:	0801a840 	.word	0x0801a840
 8016280:	0801a85c 	.word	0x0801a85c

08016284 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
    // Prepare for the next reception
    HAL_I2C_Slave_Receive_IT(I2C_2, &data_from_i2c4, sizeof(data_from_i2c4));
 801628c:	2201      	movs	r2, #1
 801628e:	4904      	ldr	r1, [pc, #16]	@ (80162a0 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8016290:	4804      	ldr	r0, [pc, #16]	@ (80162a4 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8016292:	f7ee fdbb 	bl	8004e0c <HAL_I2C_Slave_Receive_IT>
}
 8016296:	bf00      	nop
 8016298:	3708      	adds	r7, #8
 801629a:	46bd      	mov	sp, r7
 801629c:	bd80      	pop	{r7, pc}
 801629e:	bf00      	nop
 80162a0:	20008d60 	.word	0x20008d60
 80162a4:	20000240 	.word	0x20000240

080162a8 <test_spi>:

#include "SPI_test.h"

static  uint8_t data_from_spi1 = 0;  // Data received from slave

uint8_t test_spi(const char *bit_pattern, size_t pattern_length, int iterations) {
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b086      	sub	sp, #24
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]

    uint8_t data_to_spi2 = 0;    // Data sent to slave
 80162b4:	2300      	movs	r3, #0
 80162b6:	74fb      	strb	r3, [r7, #19]

    printf("Starting SPI Test with pattern: %s, length: %d, iterations: %d\n\r",
 80162b8:	68ba      	ldr	r2, [r7, #8]
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	68f9      	ldr	r1, [r7, #12]
 80162be:	483d      	ldr	r0, [pc, #244]	@ (80163b4 <test_spi+0x10c>)
 80162c0:	f000 fc9c 	bl	8016bfc <iprintf>
           bit_pattern, (int)pattern_length, iterations);
	HAL_SPI_Receive_IT(SPI_2, &data_from_spi1, 1);
 80162c4:	2201      	movs	r2, #1
 80162c6:	493c      	ldr	r1, [pc, #240]	@ (80163b8 <test_spi+0x110>)
 80162c8:	483c      	ldr	r0, [pc, #240]	@ (80163bc <test_spi+0x114>)
 80162ca:	f7f1 fe07 	bl	8007edc <HAL_SPI_Receive_IT>
    for (int i = 0; i < iterations; i++) {
 80162ce:	2300      	movs	r3, #0
 80162d0:	617b      	str	r3, [r7, #20]
 80162d2:	e060      	b.n	8016396 <test_spi+0xee>
        printf("\nIteration %d:\r\n", i + 1);
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	3301      	adds	r3, #1
 80162d8:	4619      	mov	r1, r3
 80162da:	4839      	ldr	r0, [pc, #228]	@ (80163c0 <test_spi+0x118>)
 80162dc:	f000 fc8e 	bl	8016bfc <iprintf>
		data_to_spi2++;
 80162e0:	7cfb      	ldrb	r3, [r7, #19]
 80162e2:	3301      	adds	r3, #1
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	74fb      	strb	r3, [r7, #19]
		data_to_spi2 %= 255;
 80162e8:	7cfa      	ldrb	r2, [r7, #19]
 80162ea:	4b36      	ldr	r3, [pc, #216]	@ (80163c4 <test_spi+0x11c>)
 80162ec:	fba3 1302 	umull	r1, r3, r3, r2
 80162f0:	09d9      	lsrs	r1, r3, #7
 80162f2:	460b      	mov	r3, r1
 80162f4:	021b      	lsls	r3, r3, #8
 80162f6:	1a5b      	subs	r3, r3, r1
 80162f8:	1ad3      	subs	r3, r2, r3
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	74fb      	strb	r3, [r7, #19]
        HAL_Delay(100);  // Delay for readability
 80162fe:	2064      	movs	r0, #100	@ 0x64
 8016300:	f7eb fd50 	bl	8001da4 <HAL_Delay>
        // Transmit data from Master (SPI1) to Slave (SPI2)
        if (HAL_SPI_Transmit(SPI_1, &data_to_spi2, 1, 100) == HAL_OK) {
 8016304:	f107 0113 	add.w	r1, r7, #19
 8016308:	2364      	movs	r3, #100	@ 0x64
 801630a:	2201      	movs	r2, #1
 801630c:	482e      	ldr	r0, [pc, #184]	@ (80163c8 <test_spi+0x120>)
 801630e:	f7f1 fc76 	bl	8007bfe <HAL_SPI_Transmit>
 8016312:	4603      	mov	r3, r0
 8016314:	2b00      	cmp	r3, #0
 8016316:	d10d      	bne.n	8016334 <test_spi+0x8c>
            printf("Master sent: 0x%02X\n\r", data_to_spi2);
 8016318:	7cfb      	ldrb	r3, [r7, #19]
 801631a:	4619      	mov	r1, r3
 801631c:	482b      	ldr	r0, [pc, #172]	@ (80163cc <test_spi+0x124>)
 801631e:	f000 fc6d 	bl	8016bfc <iprintf>
            printf("Master Transmit Error! Returning 0xFF\n\r");
            return 0xFF;  // Return failure code
        }

        // Receive data from Slave (SPI2)
        if (HAL_SPI_Receive_IT(SPI_1, &data_from_spi1, 1) == HAL_OK) {
 8016322:	2201      	movs	r2, #1
 8016324:	4924      	ldr	r1, [pc, #144]	@ (80163b8 <test_spi+0x110>)
 8016326:	4828      	ldr	r0, [pc, #160]	@ (80163c8 <test_spi+0x120>)
 8016328:	f7f1 fdd8 	bl	8007edc <HAL_SPI_Receive_IT>
 801632c:	4603      	mov	r3, r0
 801632e:	2b00      	cmp	r3, #0
 8016330:	d111      	bne.n	8016356 <test_spi+0xae>
 8016332:	e004      	b.n	801633e <test_spi+0x96>
            printf("Master Transmit Error! Returning 0xFF\n\r");
 8016334:	4826      	ldr	r0, [pc, #152]	@ (80163d0 <test_spi+0x128>)
 8016336:	f000 fc61 	bl	8016bfc <iprintf>
            return 0xFF;  // Return failure code
 801633a:	23ff      	movs	r3, #255	@ 0xff
 801633c:	e036      	b.n	80163ac <test_spi+0x104>
            printf("Master received: 0x%02X\n\r", data_from_spi1);
 801633e:	4b1e      	ldr	r3, [pc, #120]	@ (80163b8 <test_spi+0x110>)
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	4619      	mov	r1, r3
 8016344:	4823      	ldr	r0, [pc, #140]	@ (80163d4 <test_spi+0x12c>)
 8016346:	f000 fc59 	bl	8016bfc <iprintf>
            printf("Master Receive Error! Returning 0xFF\n\r");
            return 0xFF;  // Return failure code
        }

        // Compare transmitted and received data
        if (data_to_spi2 != data_from_spi1) {
 801634a:	7cfa      	ldrb	r2, [r7, #19]
 801634c:	4b1a      	ldr	r3, [pc, #104]	@ (80163b8 <test_spi+0x110>)
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	429a      	cmp	r2, r3
 8016352:	d00f      	beq.n	8016374 <test_spi+0xcc>
 8016354:	e004      	b.n	8016360 <test_spi+0xb8>
            printf("Master Receive Error! Returning 0xFF\n\r");
 8016356:	4820      	ldr	r0, [pc, #128]	@ (80163d8 <test_spi+0x130>)
 8016358:	f000 fc50 	bl	8016bfc <iprintf>
            return 0xFF;  // Return failure code
 801635c:	23ff      	movs	r3, #255	@ 0xff
 801635e:	e025      	b.n	80163ac <test_spi+0x104>
            printf("Mismatch! Sent: 0x%02X, Received: 0x%02X\n\r", data_to_spi2, data_from_spi1);
 8016360:	7cfb      	ldrb	r3, [r7, #19]
 8016362:	4619      	mov	r1, r3
 8016364:	4b14      	ldr	r3, [pc, #80]	@ (80163b8 <test_spi+0x110>)
 8016366:	781b      	ldrb	r3, [r3, #0]
 8016368:	461a      	mov	r2, r3
 801636a:	481c      	ldr	r0, [pc, #112]	@ (80163dc <test_spi+0x134>)
 801636c:	f000 fc46 	bl	8016bfc <iprintf>
           return 0xFF;  // Return failure if mismatch
 8016370:	23ff      	movs	r3, #255	@ 0xff
 8016372:	e01b      	b.n	80163ac <test_spi+0x104>
        } else {
            printf("Match! Sent: 0x%02X, Received: 0x%02X\n\r", data_to_spi2, data_from_spi1);
 8016374:	7cfb      	ldrb	r3, [r7, #19]
 8016376:	4619      	mov	r1, r3
 8016378:	4b0f      	ldr	r3, [pc, #60]	@ (80163b8 <test_spi+0x110>)
 801637a:	781b      	ldrb	r3, [r3, #0]
 801637c:	461a      	mov	r2, r3
 801637e:	4818      	ldr	r0, [pc, #96]	@ (80163e0 <test_spi+0x138>)
 8016380:	f000 fc3c 	bl	8016bfc <iprintf>
            printf("Iteration %d passed\r\n", i + 1);
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	3301      	adds	r3, #1
 8016388:	4619      	mov	r1, r3
 801638a:	4816      	ldr	r0, [pc, #88]	@ (80163e4 <test_spi+0x13c>)
 801638c:	f000 fc36 	bl	8016bfc <iprintf>
    for (int i = 0; i < iterations; i++) {
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	3301      	adds	r3, #1
 8016394:	617b      	str	r3, [r7, #20]
 8016396:	697a      	ldr	r2, [r7, #20]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	429a      	cmp	r2, r3
 801639c:	db9a      	blt.n	80162d4 <test_spi+0x2c>
        }
    }
    printf("***********************\r\n");
 801639e:	4812      	ldr	r0, [pc, #72]	@ (80163e8 <test_spi+0x140>)
 80163a0:	f000 fc94 	bl	8016ccc <puts>
    printf("\nSPI test complete.\r\n");
 80163a4:	4811      	ldr	r0, [pc, #68]	@ (80163ec <test_spi+0x144>)
 80163a6:	f000 fc91 	bl	8016ccc <puts>
    return 1;  // Return success code
 80163aa:	2301      	movs	r3, #1
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3718      	adds	r7, #24
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	0801a880 	.word	0x0801a880
 80163b8:	20008d62 	.word	0x20008d62
 80163bc:	2000034c 	.word	0x2000034c
 80163c0:	0801a8c4 	.word	0x0801a8c4
 80163c4:	80808081 	.word	0x80808081
 80163c8:	200002e8 	.word	0x200002e8
 80163cc:	0801a8d8 	.word	0x0801a8d8
 80163d0:	0801a8f0 	.word	0x0801a8f0
 80163d4:	0801a918 	.word	0x0801a918
 80163d8:	0801a934 	.word	0x0801a934
 80163dc:	0801a95c 	.word	0x0801a95c
 80163e0:	0801a988 	.word	0x0801a988
 80163e4:	0801a9b0 	.word	0x0801a9b0
 80163e8:	0801a9c8 	.word	0x0801a9c8
 80163ec:	0801a9e4 	.word	0x0801a9e4

080163f0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
    if (hspi == SPI_2) {
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	4a06      	ldr	r2, [pc, #24]	@ (8016414 <HAL_SPI_RxCpltCallback+0x24>)
 80163fc:	4293      	cmp	r3, r2
 80163fe:	d104      	bne.n	801640a <HAL_SPI_RxCpltCallback+0x1a>
        HAL_SPI_Receive_IT(SPI_2, &data_from_spi1, sizeof(data_from_spi1));
 8016400:	2201      	movs	r2, #1
 8016402:	4905      	ldr	r1, [pc, #20]	@ (8016418 <HAL_SPI_RxCpltCallback+0x28>)
 8016404:	4803      	ldr	r0, [pc, #12]	@ (8016414 <HAL_SPI_RxCpltCallback+0x24>)
 8016406:	f7f1 fd69 	bl	8007edc <HAL_SPI_Receive_IT>
    }
}
 801640a:	bf00      	nop
 801640c:	3708      	adds	r7, #8
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	2000034c 	.word	0x2000034c
 8016418:	20008d62 	.word	0x20008d62

0801641c <test_timer>:
volatile uint8_t tim3_done = 0;
volatile uint8_t tim2_done = 0;
volatile uint32_t random_duration = 0;


uint8_t test_timer(uint16_t iterations) {
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
 8016422:	4603      	mov	r3, r0
 8016424:	80fb      	strh	r3, [r7, #6]
    printf("Starting Timer Test with %u iterations...\r\n", iterations);
 8016426:	88fb      	ldrh	r3, [r7, #6]
 8016428:	4619      	mov	r1, r3
 801642a:	4840      	ldr	r0, [pc, #256]	@ (801652c <test_timer+0x110>)
 801642c:	f000 fbe6 	bl	8016bfc <iprintf>
    srand(time(NULL));
 8016430:	2000      	movs	r0, #0
 8016432:	f000 fd55 	bl	8016ee0 <time>
 8016436:	4602      	mov	r2, r0
 8016438:	460b      	mov	r3, r1
 801643a:	4613      	mov	r3, r2
 801643c:	4618      	mov	r0, r3
 801643e:	f000 faaf 	bl	80169a0 <srand>
    for (uint16_t i = 0; i < iterations; i++) {
 8016442:	2300      	movs	r3, #0
 8016444:	81fb      	strh	r3, [r7, #14]
 8016446:	e062      	b.n	801650e <test_timer+0xf2>
    	printf("\nIteration %d:\r\n", i + 1);
 8016448:	89fb      	ldrh	r3, [r7, #14]
 801644a:	3301      	adds	r3, #1
 801644c:	4619      	mov	r1, r3
 801644e:	4838      	ldr	r0, [pc, #224]	@ (8016530 <test_timer+0x114>)
 8016450:	f000 fbd4 	bl	8016bfc <iprintf>
    // Generate a random time duration between 1 and 10 seconds
    random_duration = (rand() % 10) + 1;
 8016454:	f000 fad2 	bl	80169fc <rand>
 8016458:	4601      	mov	r1, r0
 801645a:	4b36      	ldr	r3, [pc, #216]	@ (8016534 <test_timer+0x118>)
 801645c:	fb83 2301 	smull	r2, r3, r3, r1
 8016460:	109a      	asrs	r2, r3, #2
 8016462:	17cb      	asrs	r3, r1, #31
 8016464:	1ad2      	subs	r2, r2, r3
 8016466:	4613      	mov	r3, r2
 8016468:	009b      	lsls	r3, r3, #2
 801646a:	4413      	add	r3, r2
 801646c:	005b      	lsls	r3, r3, #1
 801646e:	1aca      	subs	r2, r1, r3
 8016470:	1c53      	adds	r3, r2, #1
 8016472:	461a      	mov	r2, r3
 8016474:	4b30      	ldr	r3, [pc, #192]	@ (8016538 <test_timer+0x11c>)
 8016476:	601a      	str	r2, [r3, #0]
    printf("Random duration: %lu seconds\r\n", random_duration);
 8016478:	4b2f      	ldr	r3, [pc, #188]	@ (8016538 <test_timer+0x11c>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	4619      	mov	r1, r3
 801647e:	482f      	ldr	r0, [pc, #188]	@ (801653c <test_timer+0x120>)
 8016480:	f000 fbbc 	bl	8016bfc <iprintf>

    HAL_TIM_Base_Start_IT(TIM3A); //needs to be done by the developer
 8016484:	482e      	ldr	r0, [pc, #184]	@ (8016540 <test_timer+0x124>)
 8016486:	f7f2 fbcd 	bl	8008c24 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(TIM2A); //needs to be done by the developer
 801648a:	482e      	ldr	r0, [pc, #184]	@ (8016544 <test_timer+0x128>)
 801648c:	f7f2 fbca 	bl	8008c24 <HAL_TIM_Base_Start_IT>

    // Reset flags and counters
    tim3_seconds = 0;
 8016490:	4b2d      	ldr	r3, [pc, #180]	@ (8016548 <test_timer+0x12c>)
 8016492:	2200      	movs	r2, #0
 8016494:	601a      	str	r2, [r3, #0]
    tim2_seconds = 0;
 8016496:	4b2d      	ldr	r3, [pc, #180]	@ (801654c <test_timer+0x130>)
 8016498:	2200      	movs	r2, #0
 801649a:	601a      	str	r2, [r3, #0]
    tim3_done = 0;
 801649c:	4b2c      	ldr	r3, [pc, #176]	@ (8016550 <test_timer+0x134>)
 801649e:	2200      	movs	r2, #0
 80164a0:	701a      	strb	r2, [r3, #0]
    tim2_done = 0;
 80164a2:	4b2c      	ldr	r3, [pc, #176]	@ (8016554 <test_timer+0x138>)
 80164a4:	2200      	movs	r2, #0
 80164a6:	701a      	strb	r2, [r3, #0]

    // Wait for both timers to complete the random duration
    while (!tim3_done || !tim2_done) {
 80164a8:	bf00      	nop
 80164aa:	4b29      	ldr	r3, [pc, #164]	@ (8016550 <test_timer+0x134>)
 80164ac:	781b      	ldrb	r3, [r3, #0]
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d0fa      	beq.n	80164aa <test_timer+0x8e>
 80164b4:	4b27      	ldr	r3, [pc, #156]	@ (8016554 <test_timer+0x138>)
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d0f5      	beq.n	80164aa <test_timer+0x8e>

    }
    // Compare the timers
    if (tim3_seconds == random_duration && tim2_seconds == random_duration) {
 80164be:	4b22      	ldr	r3, [pc, #136]	@ (8016548 <test_timer+0x12c>)
 80164c0:	681a      	ldr	r2, [r3, #0]
 80164c2:	4b1d      	ldr	r3, [pc, #116]	@ (8016538 <test_timer+0x11c>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	d117      	bne.n	80164fa <test_timer+0xde>
 80164ca:	4b20      	ldr	r3, [pc, #128]	@ (801654c <test_timer+0x130>)
 80164cc:	681a      	ldr	r2, [r3, #0]
 80164ce:	4b1a      	ldr	r3, [pc, #104]	@ (8016538 <test_timer+0x11c>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d111      	bne.n	80164fa <test_timer+0xde>
        printf("Timers are synchronized: TIM3 = %lu, TIM2 = %lu\r\n", tim3_seconds, tim2_seconds);
 80164d6:	4b1c      	ldr	r3, [pc, #112]	@ (8016548 <test_timer+0x12c>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	4a1c      	ldr	r2, [pc, #112]	@ (801654c <test_timer+0x130>)
 80164dc:	6812      	ldr	r2, [r2, #0]
 80164de:	4619      	mov	r1, r3
 80164e0:	481d      	ldr	r0, [pc, #116]	@ (8016558 <test_timer+0x13c>)
 80164e2:	f000 fb8b 	bl	8016bfc <iprintf>
        printf("Iteration %d passed\r\n", i + 1);
 80164e6:	89fb      	ldrh	r3, [r7, #14]
 80164e8:	3301      	adds	r3, #1
 80164ea:	4619      	mov	r1, r3
 80164ec:	481b      	ldr	r0, [pc, #108]	@ (801655c <test_timer+0x140>)
 80164ee:	f000 fb85 	bl	8016bfc <iprintf>
    for (uint16_t i = 0; i < iterations; i++) {
 80164f2:	89fb      	ldrh	r3, [r7, #14]
 80164f4:	3301      	adds	r3, #1
 80164f6:	81fb      	strh	r3, [r7, #14]
 80164f8:	e009      	b.n	801650e <test_timer+0xf2>
    } else {
        printf("Timers mismatch: TIM3 = %lu, TIM2 = %lu\r\n", tim3_seconds, tim2_seconds);
 80164fa:	4b13      	ldr	r3, [pc, #76]	@ (8016548 <test_timer+0x12c>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	4a13      	ldr	r2, [pc, #76]	@ (801654c <test_timer+0x130>)
 8016500:	6812      	ldr	r2, [r2, #0]
 8016502:	4619      	mov	r1, r3
 8016504:	4816      	ldr	r0, [pc, #88]	@ (8016560 <test_timer+0x144>)
 8016506:	f000 fb79 	bl	8016bfc <iprintf>
        return 0xFF; // Failure
 801650a:	23ff      	movs	r3, #255	@ 0xff
 801650c:	e00a      	b.n	8016524 <test_timer+0x108>
    for (uint16_t i = 0; i < iterations; i++) {
 801650e:	89fa      	ldrh	r2, [r7, #14]
 8016510:	88fb      	ldrh	r3, [r7, #6]
 8016512:	429a      	cmp	r2, r3
 8016514:	d398      	bcc.n	8016448 <test_timer+0x2c>
    }
    }
    printf("***********************\r\n");
 8016516:	4813      	ldr	r0, [pc, #76]	@ (8016564 <test_timer+0x148>)
 8016518:	f000 fbd8 	bl	8016ccc <puts>
    printf("\nTimer Test complete.\r\n");
 801651c:	4812      	ldr	r0, [pc, #72]	@ (8016568 <test_timer+0x14c>)
 801651e:	f000 fbd5 	bl	8016ccc <puts>
    return 1;
 8016522:	2301      	movs	r3, #1
}
 8016524:	4618      	mov	r0, r3
 8016526:	3710      	adds	r7, #16
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}
 801652c:	0801a9fc 	.word	0x0801a9fc
 8016530:	0801aa28 	.word	0x0801aa28
 8016534:	66666667 	.word	0x66666667
 8016538:	20008d70 	.word	0x20008d70
 801653c:	0801aa3c 	.word	0x0801aa3c
 8016540:	200003fc 	.word	0x200003fc
 8016544:	200003b0 	.word	0x200003b0
 8016548:	20008d64 	.word	0x20008d64
 801654c:	20008d68 	.word	0x20008d68
 8016550:	20008d6c 	.word	0x20008d6c
 8016554:	20008d6d 	.word	0x20008d6d
 8016558:	0801aa5c 	.word	0x0801aa5c
 801655c:	0801aa90 	.word	0x0801aa90
 8016560:	0801aaa8 	.word	0x0801aaa8
 8016564:	0801aad4 	.word	0x0801aad4
 8016568:	0801aaf0 	.word	0x0801aaf0

0801656c <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801656c:	b580      	push	{r7, lr}
 801656e:	b082      	sub	sp, #8
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	4a17      	ldr	r2, [pc, #92]	@ (80165d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 801657a:	4293      	cmp	r3, r2
 801657c:	d111      	bne.n	80165a2 <HAL_TIM_PeriodElapsedCallback+0x36>
        tim3_seconds++;
 801657e:	4b17      	ldr	r3, [pc, #92]	@ (80165dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	3301      	adds	r3, #1
 8016584:	4a15      	ldr	r2, [pc, #84]	@ (80165dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8016586:	6013      	str	r3, [r2, #0]
        if (tim3_seconds >= random_duration) {
 8016588:	4b14      	ldr	r3, [pc, #80]	@ (80165dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 801658a:	681a      	ldr	r2, [r3, #0]
 801658c:	4b14      	ldr	r3, [pc, #80]	@ (80165e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	429a      	cmp	r2, r3
 8016592:	d31c      	bcc.n	80165ce <HAL_TIM_PeriodElapsedCallback+0x62>
            tim3_done = 1;
 8016594:	4b13      	ldr	r3, [pc, #76]	@ (80165e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8016596:	2201      	movs	r2, #1
 8016598:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(TIM3A); // Stop TIM1
 801659a:	4813      	ldr	r0, [pc, #76]	@ (80165e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 801659c:	f7f2 fbba 	bl	8008d14 <HAL_TIM_Base_Stop_IT>
        if (tim2_seconds >= random_duration) {
            tim2_done = 1;
            HAL_TIM_Base_Stop_IT(TIM2A); // Stop TIM2
        }
    }
}
 80165a0:	e015      	b.n	80165ce <HAL_TIM_PeriodElapsedCallback+0x62>
    } else if (htim->Instance == TIM2) {
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80165aa:	d110      	bne.n	80165ce <HAL_TIM_PeriodElapsedCallback+0x62>
        tim2_seconds++;
 80165ac:	4b0f      	ldr	r3, [pc, #60]	@ (80165ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	3301      	adds	r3, #1
 80165b2:	4a0e      	ldr	r2, [pc, #56]	@ (80165ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80165b4:	6013      	str	r3, [r2, #0]
        if (tim2_seconds >= random_duration) {
 80165b6:	4b0d      	ldr	r3, [pc, #52]	@ (80165ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	4b09      	ldr	r3, [pc, #36]	@ (80165e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	429a      	cmp	r2, r3
 80165c0:	d305      	bcc.n	80165ce <HAL_TIM_PeriodElapsedCallback+0x62>
            tim2_done = 1;
 80165c2:	4b0b      	ldr	r3, [pc, #44]	@ (80165f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80165c4:	2201      	movs	r2, #1
 80165c6:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(TIM2A); // Stop TIM2
 80165c8:	480a      	ldr	r0, [pc, #40]	@ (80165f4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80165ca:	f7f2 fba3 	bl	8008d14 <HAL_TIM_Base_Stop_IT>
}
 80165ce:	bf00      	nop
 80165d0:	3708      	adds	r7, #8
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
 80165d6:	bf00      	nop
 80165d8:	40000400 	.word	0x40000400
 80165dc:	20008d64 	.word	0x20008d64
 80165e0:	20008d70 	.word	0x20008d70
 80165e4:	20008d6c 	.word	0x20008d6c
 80165e8:	200003fc 	.word	0x200003fc
 80165ec:	20008d68 	.word	0x20008d68
 80165f0:	20008d6d 	.word	0x20008d6d
 80165f4:	200003b0 	.word	0x200003b0

080165f8 <test_uart>:
volatile uint8_t Uart_5_ErrorCallback_Flag = 0;
volatile uint8_t Uart_2_ErrorCallback_Flag = 0;

volatile HAL_StatusTypeDef status2tx, status2rx, status5tx, status5rx;

uint8_t test_uart(const char* bit_pattern, uint8_t pattern_length, uint8_t iterations) {
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b0c4      	sub	sp, #272	@ 0x110
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016602:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016606:	6018      	str	r0, [r3, #0]
 8016608:	4608      	mov	r0, r1
 801660a:	4611      	mov	r1, r2
 801660c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016610:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8016614:	4602      	mov	r2, r0
 8016616:	701a      	strb	r2, [r3, #0]
 8016618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801661c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8016620:	460a      	mov	r2, r1
 8016622:	701a      	strb	r2, [r3, #0]
    uint8_t recv_msg5_rx[128] = {0};
 8016624:	2300      	movs	r3, #0
 8016626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801662a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801662e:	227c      	movs	r2, #124	@ 0x7c
 8016630:	2100      	movs	r1, #0
 8016632:	4618      	mov	r0, r3
 8016634:	f000 fc3a 	bl	8016eac <memset>
    uint8_t recv_msg2_rx[128] = {0};
 8016638:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801663c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016640:	2200      	movs	r2, #0
 8016642:	601a      	str	r2, [r3, #0]
 8016644:	3304      	adds	r3, #4
 8016646:	227c      	movs	r2, #124	@ 0x7c
 8016648:	2100      	movs	r1, #0
 801664a:	4618      	mov	r0, r3
 801664c:	f000 fc2e 	bl	8016eac <memset>

    for (uint8_t i = 0; i < iterations; ++i) {
 8016650:	2300      	movs	r3, #0
 8016652:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8016656:	e117      	b.n	8016888 <test_uart+0x290>
        printf("\nIteration %d:\r\n", i + 1);
 8016658:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 801665c:	3301      	adds	r3, #1
 801665e:	4619      	mov	r1, r3
 8016660:	4894      	ldr	r0, [pc, #592]	@ (80168b4 <test_uart+0x2bc>)
 8016662:	f000 facb 	bl	8016bfc <iprintf>

        uint32_t iteration_start_time = HAL_GetTick(); // Track total time for the iteration
 8016666:	f7eb fb91 	bl	8001d8c <HAL_GetTick>
 801666a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 801666e:	e0ea      	b.n	8016846 <test_uart+0x24e>
            // UART2 Transmission
            status2tx = HAL_UART_Transmit(UART_2, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 8016670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016674:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8016678:	781b      	ldrb	r3, [r3, #0]
 801667a:	b29b      	uxth	r3, r3
 801667c:	3301      	adds	r3, #1
 801667e:	b29a      	uxth	r2, r3
 8016680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016684:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8016688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801668c:	6809      	ldr	r1, [r1, #0]
 801668e:	488a      	ldr	r0, [pc, #552]	@ (80168b8 <test_uart+0x2c0>)
 8016690:	f7f2 ffb4 	bl	80095fc <HAL_UART_Transmit>
 8016694:	4603      	mov	r3, r0
 8016696:	461a      	mov	r2, r3
 8016698:	4b88      	ldr	r3, [pc, #544]	@ (80168bc <test_uart+0x2c4>)
 801669a:	701a      	strb	r2, [r3, #0]
            if (status2tx != HAL_OK) {
 801669c:	4b87      	ldr	r3, [pc, #540]	@ (80168bc <test_uart+0x2c4>)
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d008      	beq.n	80166b8 <test_uart+0xc0>
                printf("UART2 TX failed with status: %d\r\n", status2tx);
 80166a6:	4b85      	ldr	r3, [pc, #532]	@ (80168bc <test_uart+0x2c4>)
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	4619      	mov	r1, r3
 80166ae:	4884      	ldr	r0, [pc, #528]	@ (80168c0 <test_uart+0x2c8>)
 80166b0:	f000 faa4 	bl	8016bfc <iprintf>
                return 0xFF;
 80166b4:	23ff      	movs	r3, #255	@ 0xff
 80166b6:	e0f8      	b.n	80168aa <test_uart+0x2b2>
            }
            HAL_Delay(100);
 80166b8:	2064      	movs	r0, #100	@ 0x64
 80166ba:	f7eb fb73 	bl	8001da4 <HAL_Delay>

            // UART5 Transmission
            status5tx = HAL_UART_Transmit(UART_5, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 80166be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80166c2:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	3301      	adds	r3, #1
 80166cc:	b29a      	uxth	r2, r3
 80166ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80166d2:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 80166d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80166da:	6809      	ldr	r1, [r1, #0]
 80166dc:	4879      	ldr	r0, [pc, #484]	@ (80168c4 <test_uart+0x2cc>)
 80166de:	f7f2 ff8d 	bl	80095fc <HAL_UART_Transmit>
 80166e2:	4603      	mov	r3, r0
 80166e4:	461a      	mov	r2, r3
 80166e6:	4b78      	ldr	r3, [pc, #480]	@ (80168c8 <test_uart+0x2d0>)
 80166e8:	701a      	strb	r2, [r3, #0]
            if (status5tx != HAL_OK) {
 80166ea:	4b77      	ldr	r3, [pc, #476]	@ (80168c8 <test_uart+0x2d0>)
 80166ec:	781b      	ldrb	r3, [r3, #0]
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d008      	beq.n	8016706 <test_uart+0x10e>
                printf("UART5 TX failed with status: %d\r\n", status5tx);
 80166f4:	4b74      	ldr	r3, [pc, #464]	@ (80168c8 <test_uart+0x2d0>)
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	b2db      	uxtb	r3, r3
 80166fa:	4619      	mov	r1, r3
 80166fc:	4873      	ldr	r0, [pc, #460]	@ (80168cc <test_uart+0x2d4>)
 80166fe:	f000 fa7d 	bl	8016bfc <iprintf>
                return 0xFF;
 8016702:	23ff      	movs	r3, #255	@ 0xff
 8016704:	e0d1      	b.n	80168aa <test_uart+0x2b2>
            }
            HAL_Delay(100);
 8016706:	2064      	movs	r0, #100	@ 0x64
 8016708:	f7eb fb4c 	bl	8001da4 <HAL_Delay>

            // UART5 Reception
            status5rx = HAL_UART_Receive_IT(UART_5, recv_msg5_rx, pattern_length + 1);
 801670c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016710:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8016714:	781b      	ldrb	r3, [r3, #0]
 8016716:	b29b      	uxth	r3, r3
 8016718:	3301      	adds	r3, #1
 801671a:	b29a      	uxth	r2, r3
 801671c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8016720:	4619      	mov	r1, r3
 8016722:	4868      	ldr	r0, [pc, #416]	@ (80168c4 <test_uart+0x2cc>)
 8016724:	f7f3 f8b1 	bl	800988a <HAL_UART_Receive_IT>
 8016728:	4603      	mov	r3, r0
 801672a:	461a      	mov	r2, r3
 801672c:	4b68      	ldr	r3, [pc, #416]	@ (80168d0 <test_uart+0x2d8>)
 801672e:	701a      	strb	r2, [r3, #0]
            if (status5rx != HAL_OK) {
 8016730:	4b67      	ldr	r3, [pc, #412]	@ (80168d0 <test_uart+0x2d8>)
 8016732:	781b      	ldrb	r3, [r3, #0]
 8016734:	b2db      	uxtb	r3, r3
 8016736:	2b00      	cmp	r3, #0
 8016738:	d008      	beq.n	801674c <test_uart+0x154>
                printf("UART5 RX failed with status: %d\r\n", status5rx);
 801673a:	4b65      	ldr	r3, [pc, #404]	@ (80168d0 <test_uart+0x2d8>)
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	b2db      	uxtb	r3, r3
 8016740:	4619      	mov	r1, r3
 8016742:	4864      	ldr	r0, [pc, #400]	@ (80168d4 <test_uart+0x2dc>)
 8016744:	f000 fa5a 	bl	8016bfc <iprintf>
                return 0xFF;
 8016748:	23ff      	movs	r3, #255	@ 0xff
 801674a:	e0ae      	b.n	80168aa <test_uart+0x2b2>
            }

            // UART2 Reception
            status2rx = HAL_UART_Receive_IT(UART_2, recv_msg2_rx, pattern_length + 1);
 801674c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016750:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	b29b      	uxth	r3, r3
 8016758:	3301      	adds	r3, #1
 801675a:	b29a      	uxth	r2, r3
 801675c:	f107 0308 	add.w	r3, r7, #8
 8016760:	4619      	mov	r1, r3
 8016762:	4855      	ldr	r0, [pc, #340]	@ (80168b8 <test_uart+0x2c0>)
 8016764:	f7f3 f891 	bl	800988a <HAL_UART_Receive_IT>
 8016768:	4603      	mov	r3, r0
 801676a:	461a      	mov	r2, r3
 801676c:	4b5a      	ldr	r3, [pc, #360]	@ (80168d8 <test_uart+0x2e0>)
 801676e:	701a      	strb	r2, [r3, #0]
            if (status2rx != HAL_OK) {
 8016770:	4b59      	ldr	r3, [pc, #356]	@ (80168d8 <test_uart+0x2e0>)
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	b2db      	uxtb	r3, r3
 8016776:	2b00      	cmp	r3, #0
 8016778:	d008      	beq.n	801678c <test_uart+0x194>
                printf("UART2 RX failed with status: %d\r\n", status2rx);
 801677a:	4b57      	ldr	r3, [pc, #348]	@ (80168d8 <test_uart+0x2e0>)
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	b2db      	uxtb	r3, r3
 8016780:	4619      	mov	r1, r3
 8016782:	4856      	ldr	r0, [pc, #344]	@ (80168dc <test_uart+0x2e4>)
 8016784:	f000 fa3a 	bl	8016bfc <iprintf>
                return 0xFF;
 8016788:	23ff      	movs	r3, #255	@ 0xff
 801678a:	e08e      	b.n	80168aa <test_uart+0x2b2>
            }

            // Error Handling and Data Verification
            if (Uart_5_ErrorCallback_Flag == 1 || Uart_2_ErrorCallback_Flag == 1) {
 801678c:	4b54      	ldr	r3, [pc, #336]	@ (80168e0 <test_uart+0x2e8>)
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	b2db      	uxtb	r3, r3
 8016792:	2b01      	cmp	r3, #1
 8016794:	d004      	beq.n	80167a0 <test_uart+0x1a8>
 8016796:	4b53      	ldr	r3, [pc, #332]	@ (80168e4 <test_uart+0x2ec>)
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	b2db      	uxtb	r3, r3
 801679c:	2b01      	cmp	r3, #1
 801679e:	d109      	bne.n	80167b4 <test_uart+0x1bc>
                printf("Error detected in UART5 or UART2\r\n");
 80167a0:	4851      	ldr	r0, [pc, #324]	@ (80168e8 <test_uart+0x2f0>)
 80167a2:	f000 fa93 	bl	8016ccc <puts>
                Uart_5_ErrorCallback_Flag = 0;
 80167a6:	4b4e      	ldr	r3, [pc, #312]	@ (80168e0 <test_uart+0x2e8>)
 80167a8:	2200      	movs	r2, #0
 80167aa:	701a      	strb	r2, [r3, #0]
                Uart_2_ErrorCallback_Flag = 0;
 80167ac:	4b4d      	ldr	r3, [pc, #308]	@ (80168e4 <test_uart+0x2ec>)
 80167ae:	2200      	movs	r2, #0
 80167b0:	701a      	strb	r2, [r3, #0]
 80167b2:	e048      	b.n	8016846 <test_uart+0x24e>
            } else {
                if (UART_5_RX_Complete_Callback_Flag == 1) {
 80167b4:	4b4d      	ldr	r3, [pc, #308]	@ (80168ec <test_uart+0x2f4>)
 80167b6:	781b      	ldrb	r3, [r3, #0]
 80167b8:	b2db      	uxtb	r3, r3
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	d108      	bne.n	80167d0 <test_uart+0x1d8>
                    printf("Received message by UART5 RX: %s\r\n", recv_msg5_rx);
 80167be:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80167c2:	4619      	mov	r1, r3
 80167c4:	484a      	ldr	r0, [pc, #296]	@ (80168f0 <test_uart+0x2f8>)
 80167c6:	f000 fa19 	bl	8016bfc <iprintf>
                    UART_5_RX_Complete_Callback_Flag = 0;
 80167ca:	4b48      	ldr	r3, [pc, #288]	@ (80168ec <test_uart+0x2f4>)
 80167cc:	2200      	movs	r2, #0
 80167ce:	701a      	strb	r2, [r3, #0]
                }
                if (UART_2_RX_Complete_Callback_Flag == 1) {
 80167d0:	4b48      	ldr	r3, [pc, #288]	@ (80168f4 <test_uart+0x2fc>)
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	2b01      	cmp	r3, #1
 80167d8:	d108      	bne.n	80167ec <test_uart+0x1f4>
                    printf("Received message by UART2 RX: %s\r\n", recv_msg2_rx);
 80167da:	f107 0308 	add.w	r3, r7, #8
 80167de:	4619      	mov	r1, r3
 80167e0:	4845      	ldr	r0, [pc, #276]	@ (80168f8 <test_uart+0x300>)
 80167e2:	f000 fa0b 	bl	8016bfc <iprintf>
                    UART_2_RX_Complete_Callback_Flag = 0;
 80167e6:	4b43      	ldr	r3, [pc, #268]	@ (80168f4 <test_uart+0x2fc>)
 80167e8:	2200      	movs	r2, #0
 80167ea:	701a      	strb	r2, [r3, #0]
                }

                // Compare received data
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 80167ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80167f0:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80167f4:	781a      	ldrb	r2, [r3, #0]
 80167f6:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80167fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80167fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016802:	6818      	ldr	r0, [r3, #0]
 8016804:	f000 fb5a 	bl	8016ebc <strncmp>
 8016808:	4603      	mov	r3, r0
 801680a:	2b00      	cmp	r3, #0
 801680c:	d118      	bne.n	8016840 <test_uart+0x248>
                    strncmp(bit_pattern, (char*)recv_msg2_rx, pattern_length) == 0) {
 801680e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016812:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8016816:	781a      	ldrb	r2, [r3, #0]
 8016818:	f107 0108 	add.w	r1, r7, #8
 801681c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016820:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016824:	6818      	ldr	r0, [r3, #0]
 8016826:	f000 fb49 	bl	8016ebc <strncmp>
 801682a:	4603      	mov	r3, r0
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 801682c:	2b00      	cmp	r3, #0
 801682e:	d107      	bne.n	8016840 <test_uart+0x248>
                    printf("Iteration %d passed\r\n", i + 1);
 8016830:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8016834:	3301      	adds	r3, #1
 8016836:	4619      	mov	r1, r3
 8016838:	4830      	ldr	r0, [pc, #192]	@ (80168fc <test_uart+0x304>)
 801683a:	f000 f9df 	bl	8016bfc <iprintf>
                    break; // Exit while loop once successful
 801683e:	e00c      	b.n	801685a <test_uart+0x262>
                } else {
                    printf("Data mismatch detected. Retrying...\r\n");
 8016840:	482f      	ldr	r0, [pc, #188]	@ (8016900 <test_uart+0x308>)
 8016842:	f000 fa43 	bl	8016ccc <puts>
        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 8016846:	f7eb faa1 	bl	8001d8c <HAL_GetTick>
 801684a:	4602      	mov	r2, r0
 801684c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8016850:	1ad3      	subs	r3, r2, r3
 8016852:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016856:	f4ff af0b 	bcc.w	8016670 <test_uart+0x78>
                }
            }
        }

        if (HAL_GetTick() - iteration_start_time >= SHORT_TIMEOUT) {
 801685a:	f7eb fa97 	bl	8001d8c <HAL_GetTick>
 801685e:	4602      	mov	r2, r0
 8016860:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801686a:	d308      	bcc.n	801687e <test_uart+0x286>
            printf("Iteration %d failed due to timeout\r\n", i + 1);
 801686c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8016870:	3301      	adds	r3, #1
 8016872:	4619      	mov	r1, r3
 8016874:	4823      	ldr	r0, [pc, #140]	@ (8016904 <test_uart+0x30c>)
 8016876:	f000 f9c1 	bl	8016bfc <iprintf>
            return 0xFF;
 801687a:	23ff      	movs	r3, #255	@ 0xff
 801687c:	e015      	b.n	80168aa <test_uart+0x2b2>
    for (uint8_t i = 0; i < iterations; ++i) {
 801687e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8016882:	3301      	adds	r3, #1
 8016884:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8016888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801688c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8016890:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8016894:	781b      	ldrb	r3, [r3, #0]
 8016896:	429a      	cmp	r2, r3
 8016898:	f4ff aede 	bcc.w	8016658 <test_uart+0x60>
        }
    }
    printf("***********************\r\n");
 801689c:	481a      	ldr	r0, [pc, #104]	@ (8016908 <test_uart+0x310>)
 801689e:	f000 fa15 	bl	8016ccc <puts>
    printf("\nUART test complete\r\n");
 80168a2:	481a      	ldr	r0, [pc, #104]	@ (801690c <test_uart+0x314>)
 80168a4:	f000 fa12 	bl	8016ccc <puts>
    return 1;
 80168a8:	2301      	movs	r3, #1
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	0801ab08 	.word	0x0801ab08
 80168b8:	200004d0 	.word	0x200004d0
 80168bc:	20008d78 	.word	0x20008d78
 80168c0:	0801ab1c 	.word	0x0801ab1c
 80168c4:	20000448 	.word	0x20000448
 80168c8:	20008d7a 	.word	0x20008d7a
 80168cc:	0801ab40 	.word	0x0801ab40
 80168d0:	20008d7b 	.word	0x20008d7b
 80168d4:	0801ab64 	.word	0x0801ab64
 80168d8:	20008d79 	.word	0x20008d79
 80168dc:	0801ab88 	.word	0x0801ab88
 80168e0:	20008d76 	.word	0x20008d76
 80168e4:	20008d77 	.word	0x20008d77
 80168e8:	0801abac 	.word	0x0801abac
 80168ec:	20008d74 	.word	0x20008d74
 80168f0:	0801abd0 	.word	0x0801abd0
 80168f4:	20008d75 	.word	0x20008d75
 80168f8:	0801abf4 	.word	0x0801abf4
 80168fc:	0801ac18 	.word	0x0801ac18
 8016900:	0801ac30 	.word	0x0801ac30
 8016904:	0801ac58 	.word	0x0801ac58
 8016908:	0801ac80 	.word	0x0801ac80
 801690c:	0801ac9c 	.word	0x0801ac9c

08016910 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8016910:	b480      	push	{r7}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	4a0a      	ldr	r2, [pc, #40]	@ (8016948 <HAL_UART_RxCpltCallback+0x38>)
 801691e:	4293      	cmp	r3, r2
 8016920:	d103      	bne.n	801692a <HAL_UART_RxCpltCallback+0x1a>
        UART_5_RX_Complete_Callback_Flag = 1;
 8016922:	4b0a      	ldr	r3, [pc, #40]	@ (801694c <HAL_UART_RxCpltCallback+0x3c>)
 8016924:	2201      	movs	r2, #1
 8016926:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        UART_2_RX_Complete_Callback_Flag = 1;
    }
}
 8016928:	e007      	b.n	801693a <HAL_UART_RxCpltCallback+0x2a>
    } else if (huart->Instance == USART2) {
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	4a08      	ldr	r2, [pc, #32]	@ (8016950 <HAL_UART_RxCpltCallback+0x40>)
 8016930:	4293      	cmp	r3, r2
 8016932:	d102      	bne.n	801693a <HAL_UART_RxCpltCallback+0x2a>
        UART_2_RX_Complete_Callback_Flag = 1;
 8016934:	4b07      	ldr	r3, [pc, #28]	@ (8016954 <HAL_UART_RxCpltCallback+0x44>)
 8016936:	2201      	movs	r2, #1
 8016938:	701a      	strb	r2, [r3, #0]
}
 801693a:	bf00      	nop
 801693c:	370c      	adds	r7, #12
 801693e:	46bd      	mov	sp, r7
 8016940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016944:	4770      	bx	lr
 8016946:	bf00      	nop
 8016948:	40005000 	.word	0x40005000
 801694c:	20008d74 	.word	0x20008d74
 8016950:	40004400 	.word	0x40004400
 8016954:	20008d75 	.word	0x20008d75

08016958 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	4a0a      	ldr	r2, [pc, #40]	@ (8016990 <HAL_UART_ErrorCallback+0x38>)
 8016966:	4293      	cmp	r3, r2
 8016968:	d103      	bne.n	8016972 <HAL_UART_ErrorCallback+0x1a>
        Uart_5_ErrorCallback_Flag = 1;
 801696a:	4b0a      	ldr	r3, [pc, #40]	@ (8016994 <HAL_UART_ErrorCallback+0x3c>)
 801696c:	2201      	movs	r2, #1
 801696e:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        Uart_2_ErrorCallback_Flag = 1;
    }
}
 8016970:	e007      	b.n	8016982 <HAL_UART_ErrorCallback+0x2a>
    } else if (huart->Instance == USART2) {
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	4a08      	ldr	r2, [pc, #32]	@ (8016998 <HAL_UART_ErrorCallback+0x40>)
 8016978:	4293      	cmp	r3, r2
 801697a:	d102      	bne.n	8016982 <HAL_UART_ErrorCallback+0x2a>
        Uart_2_ErrorCallback_Flag = 1;
 801697c:	4b07      	ldr	r3, [pc, #28]	@ (801699c <HAL_UART_ErrorCallback+0x44>)
 801697e:	2201      	movs	r2, #1
 8016980:	701a      	strb	r2, [r3, #0]
}
 8016982:	bf00      	nop
 8016984:	370c      	adds	r7, #12
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop
 8016990:	40005000 	.word	0x40005000
 8016994:	20008d76 	.word	0x20008d76
 8016998:	40004400 	.word	0x40004400
 801699c:	20008d77 	.word	0x20008d77

080169a0 <srand>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	4b10      	ldr	r3, [pc, #64]	@ (80169e4 <srand+0x44>)
 80169a4:	681d      	ldr	r5, [r3, #0]
 80169a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169a8:	4604      	mov	r4, r0
 80169aa:	b9b3      	cbnz	r3, 80169da <srand+0x3a>
 80169ac:	2018      	movs	r0, #24
 80169ae:	f000 fba9 	bl	8017104 <malloc>
 80169b2:	4602      	mov	r2, r0
 80169b4:	6328      	str	r0, [r5, #48]	@ 0x30
 80169b6:	b920      	cbnz	r0, 80169c2 <srand+0x22>
 80169b8:	4b0b      	ldr	r3, [pc, #44]	@ (80169e8 <srand+0x48>)
 80169ba:	480c      	ldr	r0, [pc, #48]	@ (80169ec <srand+0x4c>)
 80169bc:	2146      	movs	r1, #70	@ 0x46
 80169be:	f000 fb39 	bl	8017034 <__assert_func>
 80169c2:	490b      	ldr	r1, [pc, #44]	@ (80169f0 <srand+0x50>)
 80169c4:	4b0b      	ldr	r3, [pc, #44]	@ (80169f4 <srand+0x54>)
 80169c6:	e9c0 1300 	strd	r1, r3, [r0]
 80169ca:	4b0b      	ldr	r3, [pc, #44]	@ (80169f8 <srand+0x58>)
 80169cc:	6083      	str	r3, [r0, #8]
 80169ce:	230b      	movs	r3, #11
 80169d0:	8183      	strh	r3, [r0, #12]
 80169d2:	2100      	movs	r1, #0
 80169d4:	2001      	movs	r0, #1
 80169d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80169da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169dc:	2200      	movs	r2, #0
 80169de:	611c      	str	r4, [r3, #16]
 80169e0:	615a      	str	r2, [r3, #20]
 80169e2:	bd38      	pop	{r3, r4, r5, pc}
 80169e4:	20000038 	.word	0x20000038
 80169e8:	0801add8 	.word	0x0801add8
 80169ec:	0801adef 	.word	0x0801adef
 80169f0:	abcd330e 	.word	0xabcd330e
 80169f4:	e66d1234 	.word	0xe66d1234
 80169f8:	0005deec 	.word	0x0005deec

080169fc <rand>:
 80169fc:	4b16      	ldr	r3, [pc, #88]	@ (8016a58 <rand+0x5c>)
 80169fe:	b510      	push	{r4, lr}
 8016a00:	681c      	ldr	r4, [r3, #0]
 8016a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a04:	b9b3      	cbnz	r3, 8016a34 <rand+0x38>
 8016a06:	2018      	movs	r0, #24
 8016a08:	f000 fb7c 	bl	8017104 <malloc>
 8016a0c:	4602      	mov	r2, r0
 8016a0e:	6320      	str	r0, [r4, #48]	@ 0x30
 8016a10:	b920      	cbnz	r0, 8016a1c <rand+0x20>
 8016a12:	4b12      	ldr	r3, [pc, #72]	@ (8016a5c <rand+0x60>)
 8016a14:	4812      	ldr	r0, [pc, #72]	@ (8016a60 <rand+0x64>)
 8016a16:	2152      	movs	r1, #82	@ 0x52
 8016a18:	f000 fb0c 	bl	8017034 <__assert_func>
 8016a1c:	4911      	ldr	r1, [pc, #68]	@ (8016a64 <rand+0x68>)
 8016a1e:	4b12      	ldr	r3, [pc, #72]	@ (8016a68 <rand+0x6c>)
 8016a20:	e9c0 1300 	strd	r1, r3, [r0]
 8016a24:	4b11      	ldr	r3, [pc, #68]	@ (8016a6c <rand+0x70>)
 8016a26:	6083      	str	r3, [r0, #8]
 8016a28:	230b      	movs	r3, #11
 8016a2a:	8183      	strh	r3, [r0, #12]
 8016a2c:	2100      	movs	r1, #0
 8016a2e:	2001      	movs	r0, #1
 8016a30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016a34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016a36:	480e      	ldr	r0, [pc, #56]	@ (8016a70 <rand+0x74>)
 8016a38:	690b      	ldr	r3, [r1, #16]
 8016a3a:	694c      	ldr	r4, [r1, #20]
 8016a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8016a74 <rand+0x78>)
 8016a3e:	4358      	muls	r0, r3
 8016a40:	fb02 0004 	mla	r0, r2, r4, r0
 8016a44:	fba3 3202 	umull	r3, r2, r3, r2
 8016a48:	3301      	adds	r3, #1
 8016a4a:	eb40 0002 	adc.w	r0, r0, r2
 8016a4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016a52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016a56:	bd10      	pop	{r4, pc}
 8016a58:	20000038 	.word	0x20000038
 8016a5c:	0801add8 	.word	0x0801add8
 8016a60:	0801adef 	.word	0x0801adef
 8016a64:	abcd330e 	.word	0xabcd330e
 8016a68:	e66d1234 	.word	0xe66d1234
 8016a6c:	0005deec 	.word	0x0005deec
 8016a70:	5851f42d 	.word	0x5851f42d
 8016a74:	4c957f2d 	.word	0x4c957f2d

08016a78 <std>:
 8016a78:	2300      	movs	r3, #0
 8016a7a:	b510      	push	{r4, lr}
 8016a7c:	4604      	mov	r4, r0
 8016a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8016a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a86:	6083      	str	r3, [r0, #8]
 8016a88:	8181      	strh	r1, [r0, #12]
 8016a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8016a8c:	81c2      	strh	r2, [r0, #14]
 8016a8e:	6183      	str	r3, [r0, #24]
 8016a90:	4619      	mov	r1, r3
 8016a92:	2208      	movs	r2, #8
 8016a94:	305c      	adds	r0, #92	@ 0x5c
 8016a96:	f000 fa09 	bl	8016eac <memset>
 8016a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ad0 <std+0x58>)
 8016a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8016a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ad4 <std+0x5c>)
 8016aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ad8 <std+0x60>)
 8016aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8016adc <std+0x64>)
 8016aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8016aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8016ae0 <std+0x68>)
 8016aac:	6224      	str	r4, [r4, #32]
 8016aae:	429c      	cmp	r4, r3
 8016ab0:	d006      	beq.n	8016ac0 <std+0x48>
 8016ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016ab6:	4294      	cmp	r4, r2
 8016ab8:	d002      	beq.n	8016ac0 <std+0x48>
 8016aba:	33d0      	adds	r3, #208	@ 0xd0
 8016abc:	429c      	cmp	r4, r3
 8016abe:	d105      	bne.n	8016acc <std+0x54>
 8016ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ac8:	f000 baa2 	b.w	8017010 <__retarget_lock_init_recursive>
 8016acc:	bd10      	pop	{r4, pc}
 8016ace:	bf00      	nop
 8016ad0:	08016cdd 	.word	0x08016cdd
 8016ad4:	08016cff 	.word	0x08016cff
 8016ad8:	08016d37 	.word	0x08016d37
 8016adc:	08016d5b 	.word	0x08016d5b
 8016ae0:	20008d7c 	.word	0x20008d7c

08016ae4 <stdio_exit_handler>:
 8016ae4:	4a02      	ldr	r2, [pc, #8]	@ (8016af0 <stdio_exit_handler+0xc>)
 8016ae6:	4903      	ldr	r1, [pc, #12]	@ (8016af4 <stdio_exit_handler+0x10>)
 8016ae8:	4803      	ldr	r0, [pc, #12]	@ (8016af8 <stdio_exit_handler+0x14>)
 8016aea:	f000 b869 	b.w	8016bc0 <_fwalk_sglue>
 8016aee:	bf00      	nop
 8016af0:	2000002c 	.word	0x2000002c
 8016af4:	08017919 	.word	0x08017919
 8016af8:	2000003c 	.word	0x2000003c

08016afc <cleanup_stdio>:
 8016afc:	6841      	ldr	r1, [r0, #4]
 8016afe:	4b0c      	ldr	r3, [pc, #48]	@ (8016b30 <cleanup_stdio+0x34>)
 8016b00:	4299      	cmp	r1, r3
 8016b02:	b510      	push	{r4, lr}
 8016b04:	4604      	mov	r4, r0
 8016b06:	d001      	beq.n	8016b0c <cleanup_stdio+0x10>
 8016b08:	f000 ff06 	bl	8017918 <_fflush_r>
 8016b0c:	68a1      	ldr	r1, [r4, #8]
 8016b0e:	4b09      	ldr	r3, [pc, #36]	@ (8016b34 <cleanup_stdio+0x38>)
 8016b10:	4299      	cmp	r1, r3
 8016b12:	d002      	beq.n	8016b1a <cleanup_stdio+0x1e>
 8016b14:	4620      	mov	r0, r4
 8016b16:	f000 feff 	bl	8017918 <_fflush_r>
 8016b1a:	68e1      	ldr	r1, [r4, #12]
 8016b1c:	4b06      	ldr	r3, [pc, #24]	@ (8016b38 <cleanup_stdio+0x3c>)
 8016b1e:	4299      	cmp	r1, r3
 8016b20:	d004      	beq.n	8016b2c <cleanup_stdio+0x30>
 8016b22:	4620      	mov	r0, r4
 8016b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b28:	f000 bef6 	b.w	8017918 <_fflush_r>
 8016b2c:	bd10      	pop	{r4, pc}
 8016b2e:	bf00      	nop
 8016b30:	20008d7c 	.word	0x20008d7c
 8016b34:	20008de4 	.word	0x20008de4
 8016b38:	20008e4c 	.word	0x20008e4c

08016b3c <global_stdio_init.part.0>:
 8016b3c:	b510      	push	{r4, lr}
 8016b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8016b6c <global_stdio_init.part.0+0x30>)
 8016b40:	4c0b      	ldr	r4, [pc, #44]	@ (8016b70 <global_stdio_init.part.0+0x34>)
 8016b42:	4a0c      	ldr	r2, [pc, #48]	@ (8016b74 <global_stdio_init.part.0+0x38>)
 8016b44:	601a      	str	r2, [r3, #0]
 8016b46:	4620      	mov	r0, r4
 8016b48:	2200      	movs	r2, #0
 8016b4a:	2104      	movs	r1, #4
 8016b4c:	f7ff ff94 	bl	8016a78 <std>
 8016b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016b54:	2201      	movs	r2, #1
 8016b56:	2109      	movs	r1, #9
 8016b58:	f7ff ff8e 	bl	8016a78 <std>
 8016b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016b60:	2202      	movs	r2, #2
 8016b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b66:	2112      	movs	r1, #18
 8016b68:	f7ff bf86 	b.w	8016a78 <std>
 8016b6c:	20008eb4 	.word	0x20008eb4
 8016b70:	20008d7c 	.word	0x20008d7c
 8016b74:	08016ae5 	.word	0x08016ae5

08016b78 <__sfp_lock_acquire>:
 8016b78:	4801      	ldr	r0, [pc, #4]	@ (8016b80 <__sfp_lock_acquire+0x8>)
 8016b7a:	f000 ba4a 	b.w	8017012 <__retarget_lock_acquire_recursive>
 8016b7e:	bf00      	nop
 8016b80:	20008ebd 	.word	0x20008ebd

08016b84 <__sfp_lock_release>:
 8016b84:	4801      	ldr	r0, [pc, #4]	@ (8016b8c <__sfp_lock_release+0x8>)
 8016b86:	f000 ba45 	b.w	8017014 <__retarget_lock_release_recursive>
 8016b8a:	bf00      	nop
 8016b8c:	20008ebd 	.word	0x20008ebd

08016b90 <__sinit>:
 8016b90:	b510      	push	{r4, lr}
 8016b92:	4604      	mov	r4, r0
 8016b94:	f7ff fff0 	bl	8016b78 <__sfp_lock_acquire>
 8016b98:	6a23      	ldr	r3, [r4, #32]
 8016b9a:	b11b      	cbz	r3, 8016ba4 <__sinit+0x14>
 8016b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ba0:	f7ff bff0 	b.w	8016b84 <__sfp_lock_release>
 8016ba4:	4b04      	ldr	r3, [pc, #16]	@ (8016bb8 <__sinit+0x28>)
 8016ba6:	6223      	str	r3, [r4, #32]
 8016ba8:	4b04      	ldr	r3, [pc, #16]	@ (8016bbc <__sinit+0x2c>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d1f5      	bne.n	8016b9c <__sinit+0xc>
 8016bb0:	f7ff ffc4 	bl	8016b3c <global_stdio_init.part.0>
 8016bb4:	e7f2      	b.n	8016b9c <__sinit+0xc>
 8016bb6:	bf00      	nop
 8016bb8:	08016afd 	.word	0x08016afd
 8016bbc:	20008eb4 	.word	0x20008eb4

08016bc0 <_fwalk_sglue>:
 8016bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bc4:	4607      	mov	r7, r0
 8016bc6:	4688      	mov	r8, r1
 8016bc8:	4614      	mov	r4, r2
 8016bca:	2600      	movs	r6, #0
 8016bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8016bd4:	d505      	bpl.n	8016be2 <_fwalk_sglue+0x22>
 8016bd6:	6824      	ldr	r4, [r4, #0]
 8016bd8:	2c00      	cmp	r4, #0
 8016bda:	d1f7      	bne.n	8016bcc <_fwalk_sglue+0xc>
 8016bdc:	4630      	mov	r0, r6
 8016bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016be2:	89ab      	ldrh	r3, [r5, #12]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d907      	bls.n	8016bf8 <_fwalk_sglue+0x38>
 8016be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bec:	3301      	adds	r3, #1
 8016bee:	d003      	beq.n	8016bf8 <_fwalk_sglue+0x38>
 8016bf0:	4629      	mov	r1, r5
 8016bf2:	4638      	mov	r0, r7
 8016bf4:	47c0      	blx	r8
 8016bf6:	4306      	orrs	r6, r0
 8016bf8:	3568      	adds	r5, #104	@ 0x68
 8016bfa:	e7e9      	b.n	8016bd0 <_fwalk_sglue+0x10>

08016bfc <iprintf>:
 8016bfc:	b40f      	push	{r0, r1, r2, r3}
 8016bfe:	b507      	push	{r0, r1, r2, lr}
 8016c00:	4906      	ldr	r1, [pc, #24]	@ (8016c1c <iprintf+0x20>)
 8016c02:	ab04      	add	r3, sp, #16
 8016c04:	6808      	ldr	r0, [r1, #0]
 8016c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c0a:	6881      	ldr	r1, [r0, #8]
 8016c0c:	9301      	str	r3, [sp, #4]
 8016c0e:	f000 fb59 	bl	80172c4 <_vfiprintf_r>
 8016c12:	b003      	add	sp, #12
 8016c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c18:	b004      	add	sp, #16
 8016c1a:	4770      	bx	lr
 8016c1c:	20000038 	.word	0x20000038

08016c20 <_puts_r>:
 8016c20:	6a03      	ldr	r3, [r0, #32]
 8016c22:	b570      	push	{r4, r5, r6, lr}
 8016c24:	6884      	ldr	r4, [r0, #8]
 8016c26:	4605      	mov	r5, r0
 8016c28:	460e      	mov	r6, r1
 8016c2a:	b90b      	cbnz	r3, 8016c30 <_puts_r+0x10>
 8016c2c:	f7ff ffb0 	bl	8016b90 <__sinit>
 8016c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016c32:	07db      	lsls	r3, r3, #31
 8016c34:	d405      	bmi.n	8016c42 <_puts_r+0x22>
 8016c36:	89a3      	ldrh	r3, [r4, #12]
 8016c38:	0598      	lsls	r0, r3, #22
 8016c3a:	d402      	bmi.n	8016c42 <_puts_r+0x22>
 8016c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016c3e:	f000 f9e8 	bl	8017012 <__retarget_lock_acquire_recursive>
 8016c42:	89a3      	ldrh	r3, [r4, #12]
 8016c44:	0719      	lsls	r1, r3, #28
 8016c46:	d502      	bpl.n	8016c4e <_puts_r+0x2e>
 8016c48:	6923      	ldr	r3, [r4, #16]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d135      	bne.n	8016cba <_puts_r+0x9a>
 8016c4e:	4621      	mov	r1, r4
 8016c50:	4628      	mov	r0, r5
 8016c52:	f000 f8c5 	bl	8016de0 <__swsetup_r>
 8016c56:	b380      	cbz	r0, 8016cba <_puts_r+0x9a>
 8016c58:	f04f 35ff 	mov.w	r5, #4294967295
 8016c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016c5e:	07da      	lsls	r2, r3, #31
 8016c60:	d405      	bmi.n	8016c6e <_puts_r+0x4e>
 8016c62:	89a3      	ldrh	r3, [r4, #12]
 8016c64:	059b      	lsls	r3, r3, #22
 8016c66:	d402      	bmi.n	8016c6e <_puts_r+0x4e>
 8016c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016c6a:	f000 f9d3 	bl	8017014 <__retarget_lock_release_recursive>
 8016c6e:	4628      	mov	r0, r5
 8016c70:	bd70      	pop	{r4, r5, r6, pc}
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	da04      	bge.n	8016c80 <_puts_r+0x60>
 8016c76:	69a2      	ldr	r2, [r4, #24]
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	dc17      	bgt.n	8016cac <_puts_r+0x8c>
 8016c7c:	290a      	cmp	r1, #10
 8016c7e:	d015      	beq.n	8016cac <_puts_r+0x8c>
 8016c80:	6823      	ldr	r3, [r4, #0]
 8016c82:	1c5a      	adds	r2, r3, #1
 8016c84:	6022      	str	r2, [r4, #0]
 8016c86:	7019      	strb	r1, [r3, #0]
 8016c88:	68a3      	ldr	r3, [r4, #8]
 8016c8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c8e:	3b01      	subs	r3, #1
 8016c90:	60a3      	str	r3, [r4, #8]
 8016c92:	2900      	cmp	r1, #0
 8016c94:	d1ed      	bne.n	8016c72 <_puts_r+0x52>
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	da11      	bge.n	8016cbe <_puts_r+0x9e>
 8016c9a:	4622      	mov	r2, r4
 8016c9c:	210a      	movs	r1, #10
 8016c9e:	4628      	mov	r0, r5
 8016ca0:	f000 f85f 	bl	8016d62 <__swbuf_r>
 8016ca4:	3001      	adds	r0, #1
 8016ca6:	d0d7      	beq.n	8016c58 <_puts_r+0x38>
 8016ca8:	250a      	movs	r5, #10
 8016caa:	e7d7      	b.n	8016c5c <_puts_r+0x3c>
 8016cac:	4622      	mov	r2, r4
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f000 f857 	bl	8016d62 <__swbuf_r>
 8016cb4:	3001      	adds	r0, #1
 8016cb6:	d1e7      	bne.n	8016c88 <_puts_r+0x68>
 8016cb8:	e7ce      	b.n	8016c58 <_puts_r+0x38>
 8016cba:	3e01      	subs	r6, #1
 8016cbc:	e7e4      	b.n	8016c88 <_puts_r+0x68>
 8016cbe:	6823      	ldr	r3, [r4, #0]
 8016cc0:	1c5a      	adds	r2, r3, #1
 8016cc2:	6022      	str	r2, [r4, #0]
 8016cc4:	220a      	movs	r2, #10
 8016cc6:	701a      	strb	r2, [r3, #0]
 8016cc8:	e7ee      	b.n	8016ca8 <_puts_r+0x88>
	...

08016ccc <puts>:
 8016ccc:	4b02      	ldr	r3, [pc, #8]	@ (8016cd8 <puts+0xc>)
 8016cce:	4601      	mov	r1, r0
 8016cd0:	6818      	ldr	r0, [r3, #0]
 8016cd2:	f7ff bfa5 	b.w	8016c20 <_puts_r>
 8016cd6:	bf00      	nop
 8016cd8:	20000038 	.word	0x20000038

08016cdc <__sread>:
 8016cdc:	b510      	push	{r4, lr}
 8016cde:	460c      	mov	r4, r1
 8016ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ce4:	f000 f94c 	bl	8016f80 <_read_r>
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	bfab      	itete	ge
 8016cec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016cee:	89a3      	ldrhlt	r3, [r4, #12]
 8016cf0:	181b      	addge	r3, r3, r0
 8016cf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016cf6:	bfac      	ite	ge
 8016cf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016cfa:	81a3      	strhlt	r3, [r4, #12]
 8016cfc:	bd10      	pop	{r4, pc}

08016cfe <__swrite>:
 8016cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d02:	461f      	mov	r7, r3
 8016d04:	898b      	ldrh	r3, [r1, #12]
 8016d06:	05db      	lsls	r3, r3, #23
 8016d08:	4605      	mov	r5, r0
 8016d0a:	460c      	mov	r4, r1
 8016d0c:	4616      	mov	r6, r2
 8016d0e:	d505      	bpl.n	8016d1c <__swrite+0x1e>
 8016d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d14:	2302      	movs	r3, #2
 8016d16:	2200      	movs	r2, #0
 8016d18:	f000 f920 	bl	8016f5c <_lseek_r>
 8016d1c:	89a3      	ldrh	r3, [r4, #12]
 8016d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016d26:	81a3      	strh	r3, [r4, #12]
 8016d28:	4632      	mov	r2, r6
 8016d2a:	463b      	mov	r3, r7
 8016d2c:	4628      	mov	r0, r5
 8016d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d32:	f000 b937 	b.w	8016fa4 <_write_r>

08016d36 <__sseek>:
 8016d36:	b510      	push	{r4, lr}
 8016d38:	460c      	mov	r4, r1
 8016d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d3e:	f000 f90d 	bl	8016f5c <_lseek_r>
 8016d42:	1c43      	adds	r3, r0, #1
 8016d44:	89a3      	ldrh	r3, [r4, #12]
 8016d46:	bf15      	itete	ne
 8016d48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016d4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016d4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016d52:	81a3      	strheq	r3, [r4, #12]
 8016d54:	bf18      	it	ne
 8016d56:	81a3      	strhne	r3, [r4, #12]
 8016d58:	bd10      	pop	{r4, pc}

08016d5a <__sclose>:
 8016d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d5e:	f000 b8db 	b.w	8016f18 <_close_r>

08016d62 <__swbuf_r>:
 8016d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d64:	460e      	mov	r6, r1
 8016d66:	4614      	mov	r4, r2
 8016d68:	4605      	mov	r5, r0
 8016d6a:	b118      	cbz	r0, 8016d74 <__swbuf_r+0x12>
 8016d6c:	6a03      	ldr	r3, [r0, #32]
 8016d6e:	b90b      	cbnz	r3, 8016d74 <__swbuf_r+0x12>
 8016d70:	f7ff ff0e 	bl	8016b90 <__sinit>
 8016d74:	69a3      	ldr	r3, [r4, #24]
 8016d76:	60a3      	str	r3, [r4, #8]
 8016d78:	89a3      	ldrh	r3, [r4, #12]
 8016d7a:	071a      	lsls	r2, r3, #28
 8016d7c:	d501      	bpl.n	8016d82 <__swbuf_r+0x20>
 8016d7e:	6923      	ldr	r3, [r4, #16]
 8016d80:	b943      	cbnz	r3, 8016d94 <__swbuf_r+0x32>
 8016d82:	4621      	mov	r1, r4
 8016d84:	4628      	mov	r0, r5
 8016d86:	f000 f82b 	bl	8016de0 <__swsetup_r>
 8016d8a:	b118      	cbz	r0, 8016d94 <__swbuf_r+0x32>
 8016d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8016d90:	4638      	mov	r0, r7
 8016d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d94:	6823      	ldr	r3, [r4, #0]
 8016d96:	6922      	ldr	r2, [r4, #16]
 8016d98:	1a98      	subs	r0, r3, r2
 8016d9a:	6963      	ldr	r3, [r4, #20]
 8016d9c:	b2f6      	uxtb	r6, r6
 8016d9e:	4283      	cmp	r3, r0
 8016da0:	4637      	mov	r7, r6
 8016da2:	dc05      	bgt.n	8016db0 <__swbuf_r+0x4e>
 8016da4:	4621      	mov	r1, r4
 8016da6:	4628      	mov	r0, r5
 8016da8:	f000 fdb6 	bl	8017918 <_fflush_r>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d1ed      	bne.n	8016d8c <__swbuf_r+0x2a>
 8016db0:	68a3      	ldr	r3, [r4, #8]
 8016db2:	3b01      	subs	r3, #1
 8016db4:	60a3      	str	r3, [r4, #8]
 8016db6:	6823      	ldr	r3, [r4, #0]
 8016db8:	1c5a      	adds	r2, r3, #1
 8016dba:	6022      	str	r2, [r4, #0]
 8016dbc:	701e      	strb	r6, [r3, #0]
 8016dbe:	6962      	ldr	r2, [r4, #20]
 8016dc0:	1c43      	adds	r3, r0, #1
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d004      	beq.n	8016dd0 <__swbuf_r+0x6e>
 8016dc6:	89a3      	ldrh	r3, [r4, #12]
 8016dc8:	07db      	lsls	r3, r3, #31
 8016dca:	d5e1      	bpl.n	8016d90 <__swbuf_r+0x2e>
 8016dcc:	2e0a      	cmp	r6, #10
 8016dce:	d1df      	bne.n	8016d90 <__swbuf_r+0x2e>
 8016dd0:	4621      	mov	r1, r4
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f000 fda0 	bl	8017918 <_fflush_r>
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d0d9      	beq.n	8016d90 <__swbuf_r+0x2e>
 8016ddc:	e7d6      	b.n	8016d8c <__swbuf_r+0x2a>
	...

08016de0 <__swsetup_r>:
 8016de0:	b538      	push	{r3, r4, r5, lr}
 8016de2:	4b29      	ldr	r3, [pc, #164]	@ (8016e88 <__swsetup_r+0xa8>)
 8016de4:	4605      	mov	r5, r0
 8016de6:	6818      	ldr	r0, [r3, #0]
 8016de8:	460c      	mov	r4, r1
 8016dea:	b118      	cbz	r0, 8016df4 <__swsetup_r+0x14>
 8016dec:	6a03      	ldr	r3, [r0, #32]
 8016dee:	b90b      	cbnz	r3, 8016df4 <__swsetup_r+0x14>
 8016df0:	f7ff fece 	bl	8016b90 <__sinit>
 8016df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016df8:	0719      	lsls	r1, r3, #28
 8016dfa:	d422      	bmi.n	8016e42 <__swsetup_r+0x62>
 8016dfc:	06da      	lsls	r2, r3, #27
 8016dfe:	d407      	bmi.n	8016e10 <__swsetup_r+0x30>
 8016e00:	2209      	movs	r2, #9
 8016e02:	602a      	str	r2, [r5, #0]
 8016e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e08:	81a3      	strh	r3, [r4, #12]
 8016e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e0e:	e033      	b.n	8016e78 <__swsetup_r+0x98>
 8016e10:	0758      	lsls	r0, r3, #29
 8016e12:	d512      	bpl.n	8016e3a <__swsetup_r+0x5a>
 8016e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e16:	b141      	cbz	r1, 8016e2a <__swsetup_r+0x4a>
 8016e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e1c:	4299      	cmp	r1, r3
 8016e1e:	d002      	beq.n	8016e26 <__swsetup_r+0x46>
 8016e20:	4628      	mov	r0, r5
 8016e22:	f000 f925 	bl	8017070 <_free_r>
 8016e26:	2300      	movs	r3, #0
 8016e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e2a:	89a3      	ldrh	r3, [r4, #12]
 8016e2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016e30:	81a3      	strh	r3, [r4, #12]
 8016e32:	2300      	movs	r3, #0
 8016e34:	6063      	str	r3, [r4, #4]
 8016e36:	6923      	ldr	r3, [r4, #16]
 8016e38:	6023      	str	r3, [r4, #0]
 8016e3a:	89a3      	ldrh	r3, [r4, #12]
 8016e3c:	f043 0308 	orr.w	r3, r3, #8
 8016e40:	81a3      	strh	r3, [r4, #12]
 8016e42:	6923      	ldr	r3, [r4, #16]
 8016e44:	b94b      	cbnz	r3, 8016e5a <__swsetup_r+0x7a>
 8016e46:	89a3      	ldrh	r3, [r4, #12]
 8016e48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e50:	d003      	beq.n	8016e5a <__swsetup_r+0x7a>
 8016e52:	4621      	mov	r1, r4
 8016e54:	4628      	mov	r0, r5
 8016e56:	f000 fdbf 	bl	80179d8 <__smakebuf_r>
 8016e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e5e:	f013 0201 	ands.w	r2, r3, #1
 8016e62:	d00a      	beq.n	8016e7a <__swsetup_r+0x9a>
 8016e64:	2200      	movs	r2, #0
 8016e66:	60a2      	str	r2, [r4, #8]
 8016e68:	6962      	ldr	r2, [r4, #20]
 8016e6a:	4252      	negs	r2, r2
 8016e6c:	61a2      	str	r2, [r4, #24]
 8016e6e:	6922      	ldr	r2, [r4, #16]
 8016e70:	b942      	cbnz	r2, 8016e84 <__swsetup_r+0xa4>
 8016e72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016e76:	d1c5      	bne.n	8016e04 <__swsetup_r+0x24>
 8016e78:	bd38      	pop	{r3, r4, r5, pc}
 8016e7a:	0799      	lsls	r1, r3, #30
 8016e7c:	bf58      	it	pl
 8016e7e:	6962      	ldrpl	r2, [r4, #20]
 8016e80:	60a2      	str	r2, [r4, #8]
 8016e82:	e7f4      	b.n	8016e6e <__swsetup_r+0x8e>
 8016e84:	2000      	movs	r0, #0
 8016e86:	e7f7      	b.n	8016e78 <__swsetup_r+0x98>
 8016e88:	20000038 	.word	0x20000038

08016e8c <memcmp>:
 8016e8c:	b510      	push	{r4, lr}
 8016e8e:	3901      	subs	r1, #1
 8016e90:	4402      	add	r2, r0
 8016e92:	4290      	cmp	r0, r2
 8016e94:	d101      	bne.n	8016e9a <memcmp+0xe>
 8016e96:	2000      	movs	r0, #0
 8016e98:	e005      	b.n	8016ea6 <memcmp+0x1a>
 8016e9a:	7803      	ldrb	r3, [r0, #0]
 8016e9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016ea0:	42a3      	cmp	r3, r4
 8016ea2:	d001      	beq.n	8016ea8 <memcmp+0x1c>
 8016ea4:	1b18      	subs	r0, r3, r4
 8016ea6:	bd10      	pop	{r4, pc}
 8016ea8:	3001      	adds	r0, #1
 8016eaa:	e7f2      	b.n	8016e92 <memcmp+0x6>

08016eac <memset>:
 8016eac:	4402      	add	r2, r0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	4293      	cmp	r3, r2
 8016eb2:	d100      	bne.n	8016eb6 <memset+0xa>
 8016eb4:	4770      	bx	lr
 8016eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8016eba:	e7f9      	b.n	8016eb0 <memset+0x4>

08016ebc <strncmp>:
 8016ebc:	b510      	push	{r4, lr}
 8016ebe:	b16a      	cbz	r2, 8016edc <strncmp+0x20>
 8016ec0:	3901      	subs	r1, #1
 8016ec2:	1884      	adds	r4, r0, r2
 8016ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ec8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d103      	bne.n	8016ed8 <strncmp+0x1c>
 8016ed0:	42a0      	cmp	r0, r4
 8016ed2:	d001      	beq.n	8016ed8 <strncmp+0x1c>
 8016ed4:	2a00      	cmp	r2, #0
 8016ed6:	d1f5      	bne.n	8016ec4 <strncmp+0x8>
 8016ed8:	1ad0      	subs	r0, r2, r3
 8016eda:	bd10      	pop	{r4, pc}
 8016edc:	4610      	mov	r0, r2
 8016ede:	e7fc      	b.n	8016eda <strncmp+0x1e>

08016ee0 <time>:
 8016ee0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8016ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8016f14 <time+0x34>)
 8016ee4:	f04f 36ff 	mov.w	r6, #4294967295
 8016ee8:	f04f 37ff 	mov.w	r7, #4294967295
 8016eec:	4669      	mov	r1, sp
 8016eee:	4604      	mov	r4, r0
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	6818      	ldr	r0, [r3, #0]
 8016ef4:	e9cd 6700 	strd	r6, r7, [sp]
 8016ef8:	f000 f81e 	bl	8016f38 <_gettimeofday_r>
 8016efc:	2800      	cmp	r0, #0
 8016efe:	bfb8      	it	lt
 8016f00:	e9cd 6700 	strdlt	r6, r7, [sp]
 8016f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f08:	b10c      	cbz	r4, 8016f0e <time+0x2e>
 8016f0a:	e9c4 0100 	strd	r0, r1, [r4]
 8016f0e:	b004      	add	sp, #16
 8016f10:	bdd0      	pop	{r4, r6, r7, pc}
 8016f12:	bf00      	nop
 8016f14:	20000038 	.word	0x20000038

08016f18 <_close_r>:
 8016f18:	b538      	push	{r3, r4, r5, lr}
 8016f1a:	4d06      	ldr	r5, [pc, #24]	@ (8016f34 <_close_r+0x1c>)
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	4604      	mov	r4, r0
 8016f20:	4608      	mov	r0, r1
 8016f22:	602b      	str	r3, [r5, #0]
 8016f24:	f7ea fcd7 	bl	80018d6 <_close>
 8016f28:	1c43      	adds	r3, r0, #1
 8016f2a:	d102      	bne.n	8016f32 <_close_r+0x1a>
 8016f2c:	682b      	ldr	r3, [r5, #0]
 8016f2e:	b103      	cbz	r3, 8016f32 <_close_r+0x1a>
 8016f30:	6023      	str	r3, [r4, #0]
 8016f32:	bd38      	pop	{r3, r4, r5, pc}
 8016f34:	20008eb8 	.word	0x20008eb8

08016f38 <_gettimeofday_r>:
 8016f38:	b538      	push	{r3, r4, r5, lr}
 8016f3a:	4d07      	ldr	r5, [pc, #28]	@ (8016f58 <_gettimeofday_r+0x20>)
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	4604      	mov	r4, r0
 8016f40:	4608      	mov	r0, r1
 8016f42:	4611      	mov	r1, r2
 8016f44:	602b      	str	r3, [r5, #0]
 8016f46:	f000 fe01 	bl	8017b4c <_gettimeofday>
 8016f4a:	1c43      	adds	r3, r0, #1
 8016f4c:	d102      	bne.n	8016f54 <_gettimeofday_r+0x1c>
 8016f4e:	682b      	ldr	r3, [r5, #0]
 8016f50:	b103      	cbz	r3, 8016f54 <_gettimeofday_r+0x1c>
 8016f52:	6023      	str	r3, [r4, #0]
 8016f54:	bd38      	pop	{r3, r4, r5, pc}
 8016f56:	bf00      	nop
 8016f58:	20008eb8 	.word	0x20008eb8

08016f5c <_lseek_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4d07      	ldr	r5, [pc, #28]	@ (8016f7c <_lseek_r+0x20>)
 8016f60:	4604      	mov	r4, r0
 8016f62:	4608      	mov	r0, r1
 8016f64:	4611      	mov	r1, r2
 8016f66:	2200      	movs	r2, #0
 8016f68:	602a      	str	r2, [r5, #0]
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	f7ea fcda 	bl	8001924 <_lseek>
 8016f70:	1c43      	adds	r3, r0, #1
 8016f72:	d102      	bne.n	8016f7a <_lseek_r+0x1e>
 8016f74:	682b      	ldr	r3, [r5, #0]
 8016f76:	b103      	cbz	r3, 8016f7a <_lseek_r+0x1e>
 8016f78:	6023      	str	r3, [r4, #0]
 8016f7a:	bd38      	pop	{r3, r4, r5, pc}
 8016f7c:	20008eb8 	.word	0x20008eb8

08016f80 <_read_r>:
 8016f80:	b538      	push	{r3, r4, r5, lr}
 8016f82:	4d07      	ldr	r5, [pc, #28]	@ (8016fa0 <_read_r+0x20>)
 8016f84:	4604      	mov	r4, r0
 8016f86:	4608      	mov	r0, r1
 8016f88:	4611      	mov	r1, r2
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	602a      	str	r2, [r5, #0]
 8016f8e:	461a      	mov	r2, r3
 8016f90:	f7fe feee 	bl	8015d70 <_read>
 8016f94:	1c43      	adds	r3, r0, #1
 8016f96:	d102      	bne.n	8016f9e <_read_r+0x1e>
 8016f98:	682b      	ldr	r3, [r5, #0]
 8016f9a:	b103      	cbz	r3, 8016f9e <_read_r+0x1e>
 8016f9c:	6023      	str	r3, [r4, #0]
 8016f9e:	bd38      	pop	{r3, r4, r5, pc}
 8016fa0:	20008eb8 	.word	0x20008eb8

08016fa4 <_write_r>:
 8016fa4:	b538      	push	{r3, r4, r5, lr}
 8016fa6:	4d07      	ldr	r5, [pc, #28]	@ (8016fc4 <_write_r+0x20>)
 8016fa8:	4604      	mov	r4, r0
 8016faa:	4608      	mov	r0, r1
 8016fac:	4611      	mov	r1, r2
 8016fae:	2200      	movs	r2, #0
 8016fb0:	602a      	str	r2, [r5, #0]
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	f7fe feac 	bl	8015d10 <_write>
 8016fb8:	1c43      	adds	r3, r0, #1
 8016fba:	d102      	bne.n	8016fc2 <_write_r+0x1e>
 8016fbc:	682b      	ldr	r3, [r5, #0]
 8016fbe:	b103      	cbz	r3, 8016fc2 <_write_r+0x1e>
 8016fc0:	6023      	str	r3, [r4, #0]
 8016fc2:	bd38      	pop	{r3, r4, r5, pc}
 8016fc4:	20008eb8 	.word	0x20008eb8

08016fc8 <__libc_init_array>:
 8016fc8:	b570      	push	{r4, r5, r6, lr}
 8016fca:	4d0d      	ldr	r5, [pc, #52]	@ (8017000 <__libc_init_array+0x38>)
 8016fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8017004 <__libc_init_array+0x3c>)
 8016fce:	1b64      	subs	r4, r4, r5
 8016fd0:	10a4      	asrs	r4, r4, #2
 8016fd2:	2600      	movs	r6, #0
 8016fd4:	42a6      	cmp	r6, r4
 8016fd6:	d109      	bne.n	8016fec <__libc_init_array+0x24>
 8016fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8017008 <__libc_init_array+0x40>)
 8016fda:	4c0c      	ldr	r4, [pc, #48]	@ (801700c <__libc_init_array+0x44>)
 8016fdc:	f000 fdbe 	bl	8017b5c <_init>
 8016fe0:	1b64      	subs	r4, r4, r5
 8016fe2:	10a4      	asrs	r4, r4, #2
 8016fe4:	2600      	movs	r6, #0
 8016fe6:	42a6      	cmp	r6, r4
 8016fe8:	d105      	bne.n	8016ff6 <__libc_init_array+0x2e>
 8016fea:	bd70      	pop	{r4, r5, r6, pc}
 8016fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ff0:	4798      	blx	r3
 8016ff2:	3601      	adds	r6, #1
 8016ff4:	e7ee      	b.n	8016fd4 <__libc_init_array+0xc>
 8016ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ffa:	4798      	blx	r3
 8016ffc:	3601      	adds	r6, #1
 8016ffe:	e7f2      	b.n	8016fe6 <__libc_init_array+0x1e>
 8017000:	0801aec0 	.word	0x0801aec0
 8017004:	0801aec0 	.word	0x0801aec0
 8017008:	0801aec0 	.word	0x0801aec0
 801700c:	0801aec4 	.word	0x0801aec4

08017010 <__retarget_lock_init_recursive>:
 8017010:	4770      	bx	lr

08017012 <__retarget_lock_acquire_recursive>:
 8017012:	4770      	bx	lr

08017014 <__retarget_lock_release_recursive>:
 8017014:	4770      	bx	lr

08017016 <memcpy>:
 8017016:	440a      	add	r2, r1
 8017018:	4291      	cmp	r1, r2
 801701a:	f100 33ff 	add.w	r3, r0, #4294967295
 801701e:	d100      	bne.n	8017022 <memcpy+0xc>
 8017020:	4770      	bx	lr
 8017022:	b510      	push	{r4, lr}
 8017024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017028:	f803 4f01 	strb.w	r4, [r3, #1]!
 801702c:	4291      	cmp	r1, r2
 801702e:	d1f9      	bne.n	8017024 <memcpy+0xe>
 8017030:	bd10      	pop	{r4, pc}
	...

08017034 <__assert_func>:
 8017034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017036:	4614      	mov	r4, r2
 8017038:	461a      	mov	r2, r3
 801703a:	4b09      	ldr	r3, [pc, #36]	@ (8017060 <__assert_func+0x2c>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	4605      	mov	r5, r0
 8017040:	68d8      	ldr	r0, [r3, #12]
 8017042:	b954      	cbnz	r4, 801705a <__assert_func+0x26>
 8017044:	4b07      	ldr	r3, [pc, #28]	@ (8017064 <__assert_func+0x30>)
 8017046:	461c      	mov	r4, r3
 8017048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801704c:	9100      	str	r1, [sp, #0]
 801704e:	462b      	mov	r3, r5
 8017050:	4905      	ldr	r1, [pc, #20]	@ (8017068 <__assert_func+0x34>)
 8017052:	f000 fc89 	bl	8017968 <fiprintf>
 8017056:	f000 fd2d 	bl	8017ab4 <abort>
 801705a:	4b04      	ldr	r3, [pc, #16]	@ (801706c <__assert_func+0x38>)
 801705c:	e7f4      	b.n	8017048 <__assert_func+0x14>
 801705e:	bf00      	nop
 8017060:	20000038 	.word	0x20000038
 8017064:	0801ae82 	.word	0x0801ae82
 8017068:	0801ae54 	.word	0x0801ae54
 801706c:	0801ae47 	.word	0x0801ae47

08017070 <_free_r>:
 8017070:	b538      	push	{r3, r4, r5, lr}
 8017072:	4605      	mov	r5, r0
 8017074:	2900      	cmp	r1, #0
 8017076:	d041      	beq.n	80170fc <_free_r+0x8c>
 8017078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801707c:	1f0c      	subs	r4, r1, #4
 801707e:	2b00      	cmp	r3, #0
 8017080:	bfb8      	it	lt
 8017082:	18e4      	addlt	r4, r4, r3
 8017084:	f000 f8e8 	bl	8017258 <__malloc_lock>
 8017088:	4a1d      	ldr	r2, [pc, #116]	@ (8017100 <_free_r+0x90>)
 801708a:	6813      	ldr	r3, [r2, #0]
 801708c:	b933      	cbnz	r3, 801709c <_free_r+0x2c>
 801708e:	6063      	str	r3, [r4, #4]
 8017090:	6014      	str	r4, [r2, #0]
 8017092:	4628      	mov	r0, r5
 8017094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017098:	f000 b8e4 	b.w	8017264 <__malloc_unlock>
 801709c:	42a3      	cmp	r3, r4
 801709e:	d908      	bls.n	80170b2 <_free_r+0x42>
 80170a0:	6820      	ldr	r0, [r4, #0]
 80170a2:	1821      	adds	r1, r4, r0
 80170a4:	428b      	cmp	r3, r1
 80170a6:	bf01      	itttt	eq
 80170a8:	6819      	ldreq	r1, [r3, #0]
 80170aa:	685b      	ldreq	r3, [r3, #4]
 80170ac:	1809      	addeq	r1, r1, r0
 80170ae:	6021      	streq	r1, [r4, #0]
 80170b0:	e7ed      	b.n	801708e <_free_r+0x1e>
 80170b2:	461a      	mov	r2, r3
 80170b4:	685b      	ldr	r3, [r3, #4]
 80170b6:	b10b      	cbz	r3, 80170bc <_free_r+0x4c>
 80170b8:	42a3      	cmp	r3, r4
 80170ba:	d9fa      	bls.n	80170b2 <_free_r+0x42>
 80170bc:	6811      	ldr	r1, [r2, #0]
 80170be:	1850      	adds	r0, r2, r1
 80170c0:	42a0      	cmp	r0, r4
 80170c2:	d10b      	bne.n	80170dc <_free_r+0x6c>
 80170c4:	6820      	ldr	r0, [r4, #0]
 80170c6:	4401      	add	r1, r0
 80170c8:	1850      	adds	r0, r2, r1
 80170ca:	4283      	cmp	r3, r0
 80170cc:	6011      	str	r1, [r2, #0]
 80170ce:	d1e0      	bne.n	8017092 <_free_r+0x22>
 80170d0:	6818      	ldr	r0, [r3, #0]
 80170d2:	685b      	ldr	r3, [r3, #4]
 80170d4:	6053      	str	r3, [r2, #4]
 80170d6:	4408      	add	r0, r1
 80170d8:	6010      	str	r0, [r2, #0]
 80170da:	e7da      	b.n	8017092 <_free_r+0x22>
 80170dc:	d902      	bls.n	80170e4 <_free_r+0x74>
 80170de:	230c      	movs	r3, #12
 80170e0:	602b      	str	r3, [r5, #0]
 80170e2:	e7d6      	b.n	8017092 <_free_r+0x22>
 80170e4:	6820      	ldr	r0, [r4, #0]
 80170e6:	1821      	adds	r1, r4, r0
 80170e8:	428b      	cmp	r3, r1
 80170ea:	bf04      	itt	eq
 80170ec:	6819      	ldreq	r1, [r3, #0]
 80170ee:	685b      	ldreq	r3, [r3, #4]
 80170f0:	6063      	str	r3, [r4, #4]
 80170f2:	bf04      	itt	eq
 80170f4:	1809      	addeq	r1, r1, r0
 80170f6:	6021      	streq	r1, [r4, #0]
 80170f8:	6054      	str	r4, [r2, #4]
 80170fa:	e7ca      	b.n	8017092 <_free_r+0x22>
 80170fc:	bd38      	pop	{r3, r4, r5, pc}
 80170fe:	bf00      	nop
 8017100:	20008ec4 	.word	0x20008ec4

08017104 <malloc>:
 8017104:	4b02      	ldr	r3, [pc, #8]	@ (8017110 <malloc+0xc>)
 8017106:	4601      	mov	r1, r0
 8017108:	6818      	ldr	r0, [r3, #0]
 801710a:	f000 b825 	b.w	8017158 <_malloc_r>
 801710e:	bf00      	nop
 8017110:	20000038 	.word	0x20000038

08017114 <sbrk_aligned>:
 8017114:	b570      	push	{r4, r5, r6, lr}
 8017116:	4e0f      	ldr	r6, [pc, #60]	@ (8017154 <sbrk_aligned+0x40>)
 8017118:	460c      	mov	r4, r1
 801711a:	6831      	ldr	r1, [r6, #0]
 801711c:	4605      	mov	r5, r0
 801711e:	b911      	cbnz	r1, 8017126 <sbrk_aligned+0x12>
 8017120:	f000 fcb8 	bl	8017a94 <_sbrk_r>
 8017124:	6030      	str	r0, [r6, #0]
 8017126:	4621      	mov	r1, r4
 8017128:	4628      	mov	r0, r5
 801712a:	f000 fcb3 	bl	8017a94 <_sbrk_r>
 801712e:	1c43      	adds	r3, r0, #1
 8017130:	d103      	bne.n	801713a <sbrk_aligned+0x26>
 8017132:	f04f 34ff 	mov.w	r4, #4294967295
 8017136:	4620      	mov	r0, r4
 8017138:	bd70      	pop	{r4, r5, r6, pc}
 801713a:	1cc4      	adds	r4, r0, #3
 801713c:	f024 0403 	bic.w	r4, r4, #3
 8017140:	42a0      	cmp	r0, r4
 8017142:	d0f8      	beq.n	8017136 <sbrk_aligned+0x22>
 8017144:	1a21      	subs	r1, r4, r0
 8017146:	4628      	mov	r0, r5
 8017148:	f000 fca4 	bl	8017a94 <_sbrk_r>
 801714c:	3001      	adds	r0, #1
 801714e:	d1f2      	bne.n	8017136 <sbrk_aligned+0x22>
 8017150:	e7ef      	b.n	8017132 <sbrk_aligned+0x1e>
 8017152:	bf00      	nop
 8017154:	20008ec0 	.word	0x20008ec0

08017158 <_malloc_r>:
 8017158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801715c:	1ccd      	adds	r5, r1, #3
 801715e:	f025 0503 	bic.w	r5, r5, #3
 8017162:	3508      	adds	r5, #8
 8017164:	2d0c      	cmp	r5, #12
 8017166:	bf38      	it	cc
 8017168:	250c      	movcc	r5, #12
 801716a:	2d00      	cmp	r5, #0
 801716c:	4606      	mov	r6, r0
 801716e:	db01      	blt.n	8017174 <_malloc_r+0x1c>
 8017170:	42a9      	cmp	r1, r5
 8017172:	d904      	bls.n	801717e <_malloc_r+0x26>
 8017174:	230c      	movs	r3, #12
 8017176:	6033      	str	r3, [r6, #0]
 8017178:	2000      	movs	r0, #0
 801717a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801717e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017254 <_malloc_r+0xfc>
 8017182:	f000 f869 	bl	8017258 <__malloc_lock>
 8017186:	f8d8 3000 	ldr.w	r3, [r8]
 801718a:	461c      	mov	r4, r3
 801718c:	bb44      	cbnz	r4, 80171e0 <_malloc_r+0x88>
 801718e:	4629      	mov	r1, r5
 8017190:	4630      	mov	r0, r6
 8017192:	f7ff ffbf 	bl	8017114 <sbrk_aligned>
 8017196:	1c43      	adds	r3, r0, #1
 8017198:	4604      	mov	r4, r0
 801719a:	d158      	bne.n	801724e <_malloc_r+0xf6>
 801719c:	f8d8 4000 	ldr.w	r4, [r8]
 80171a0:	4627      	mov	r7, r4
 80171a2:	2f00      	cmp	r7, #0
 80171a4:	d143      	bne.n	801722e <_malloc_r+0xd6>
 80171a6:	2c00      	cmp	r4, #0
 80171a8:	d04b      	beq.n	8017242 <_malloc_r+0xea>
 80171aa:	6823      	ldr	r3, [r4, #0]
 80171ac:	4639      	mov	r1, r7
 80171ae:	4630      	mov	r0, r6
 80171b0:	eb04 0903 	add.w	r9, r4, r3
 80171b4:	f000 fc6e 	bl	8017a94 <_sbrk_r>
 80171b8:	4581      	cmp	r9, r0
 80171ba:	d142      	bne.n	8017242 <_malloc_r+0xea>
 80171bc:	6821      	ldr	r1, [r4, #0]
 80171be:	1a6d      	subs	r5, r5, r1
 80171c0:	4629      	mov	r1, r5
 80171c2:	4630      	mov	r0, r6
 80171c4:	f7ff ffa6 	bl	8017114 <sbrk_aligned>
 80171c8:	3001      	adds	r0, #1
 80171ca:	d03a      	beq.n	8017242 <_malloc_r+0xea>
 80171cc:	6823      	ldr	r3, [r4, #0]
 80171ce:	442b      	add	r3, r5
 80171d0:	6023      	str	r3, [r4, #0]
 80171d2:	f8d8 3000 	ldr.w	r3, [r8]
 80171d6:	685a      	ldr	r2, [r3, #4]
 80171d8:	bb62      	cbnz	r2, 8017234 <_malloc_r+0xdc>
 80171da:	f8c8 7000 	str.w	r7, [r8]
 80171de:	e00f      	b.n	8017200 <_malloc_r+0xa8>
 80171e0:	6822      	ldr	r2, [r4, #0]
 80171e2:	1b52      	subs	r2, r2, r5
 80171e4:	d420      	bmi.n	8017228 <_malloc_r+0xd0>
 80171e6:	2a0b      	cmp	r2, #11
 80171e8:	d917      	bls.n	801721a <_malloc_r+0xc2>
 80171ea:	1961      	adds	r1, r4, r5
 80171ec:	42a3      	cmp	r3, r4
 80171ee:	6025      	str	r5, [r4, #0]
 80171f0:	bf18      	it	ne
 80171f2:	6059      	strne	r1, [r3, #4]
 80171f4:	6863      	ldr	r3, [r4, #4]
 80171f6:	bf08      	it	eq
 80171f8:	f8c8 1000 	streq.w	r1, [r8]
 80171fc:	5162      	str	r2, [r4, r5]
 80171fe:	604b      	str	r3, [r1, #4]
 8017200:	4630      	mov	r0, r6
 8017202:	f000 f82f 	bl	8017264 <__malloc_unlock>
 8017206:	f104 000b 	add.w	r0, r4, #11
 801720a:	1d23      	adds	r3, r4, #4
 801720c:	f020 0007 	bic.w	r0, r0, #7
 8017210:	1ac2      	subs	r2, r0, r3
 8017212:	bf1c      	itt	ne
 8017214:	1a1b      	subne	r3, r3, r0
 8017216:	50a3      	strne	r3, [r4, r2]
 8017218:	e7af      	b.n	801717a <_malloc_r+0x22>
 801721a:	6862      	ldr	r2, [r4, #4]
 801721c:	42a3      	cmp	r3, r4
 801721e:	bf0c      	ite	eq
 8017220:	f8c8 2000 	streq.w	r2, [r8]
 8017224:	605a      	strne	r2, [r3, #4]
 8017226:	e7eb      	b.n	8017200 <_malloc_r+0xa8>
 8017228:	4623      	mov	r3, r4
 801722a:	6864      	ldr	r4, [r4, #4]
 801722c:	e7ae      	b.n	801718c <_malloc_r+0x34>
 801722e:	463c      	mov	r4, r7
 8017230:	687f      	ldr	r7, [r7, #4]
 8017232:	e7b6      	b.n	80171a2 <_malloc_r+0x4a>
 8017234:	461a      	mov	r2, r3
 8017236:	685b      	ldr	r3, [r3, #4]
 8017238:	42a3      	cmp	r3, r4
 801723a:	d1fb      	bne.n	8017234 <_malloc_r+0xdc>
 801723c:	2300      	movs	r3, #0
 801723e:	6053      	str	r3, [r2, #4]
 8017240:	e7de      	b.n	8017200 <_malloc_r+0xa8>
 8017242:	230c      	movs	r3, #12
 8017244:	6033      	str	r3, [r6, #0]
 8017246:	4630      	mov	r0, r6
 8017248:	f000 f80c 	bl	8017264 <__malloc_unlock>
 801724c:	e794      	b.n	8017178 <_malloc_r+0x20>
 801724e:	6005      	str	r5, [r0, #0]
 8017250:	e7d6      	b.n	8017200 <_malloc_r+0xa8>
 8017252:	bf00      	nop
 8017254:	20008ec4 	.word	0x20008ec4

08017258 <__malloc_lock>:
 8017258:	4801      	ldr	r0, [pc, #4]	@ (8017260 <__malloc_lock+0x8>)
 801725a:	f7ff beda 	b.w	8017012 <__retarget_lock_acquire_recursive>
 801725e:	bf00      	nop
 8017260:	20008ebc 	.word	0x20008ebc

08017264 <__malloc_unlock>:
 8017264:	4801      	ldr	r0, [pc, #4]	@ (801726c <__malloc_unlock+0x8>)
 8017266:	f7ff bed5 	b.w	8017014 <__retarget_lock_release_recursive>
 801726a:	bf00      	nop
 801726c:	20008ebc 	.word	0x20008ebc

08017270 <__sfputc_r>:
 8017270:	6893      	ldr	r3, [r2, #8]
 8017272:	3b01      	subs	r3, #1
 8017274:	2b00      	cmp	r3, #0
 8017276:	b410      	push	{r4}
 8017278:	6093      	str	r3, [r2, #8]
 801727a:	da08      	bge.n	801728e <__sfputc_r+0x1e>
 801727c:	6994      	ldr	r4, [r2, #24]
 801727e:	42a3      	cmp	r3, r4
 8017280:	db01      	blt.n	8017286 <__sfputc_r+0x16>
 8017282:	290a      	cmp	r1, #10
 8017284:	d103      	bne.n	801728e <__sfputc_r+0x1e>
 8017286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801728a:	f7ff bd6a 	b.w	8016d62 <__swbuf_r>
 801728e:	6813      	ldr	r3, [r2, #0]
 8017290:	1c58      	adds	r0, r3, #1
 8017292:	6010      	str	r0, [r2, #0]
 8017294:	7019      	strb	r1, [r3, #0]
 8017296:	4608      	mov	r0, r1
 8017298:	f85d 4b04 	ldr.w	r4, [sp], #4
 801729c:	4770      	bx	lr

0801729e <__sfputs_r>:
 801729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172a0:	4606      	mov	r6, r0
 80172a2:	460f      	mov	r7, r1
 80172a4:	4614      	mov	r4, r2
 80172a6:	18d5      	adds	r5, r2, r3
 80172a8:	42ac      	cmp	r4, r5
 80172aa:	d101      	bne.n	80172b0 <__sfputs_r+0x12>
 80172ac:	2000      	movs	r0, #0
 80172ae:	e007      	b.n	80172c0 <__sfputs_r+0x22>
 80172b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b4:	463a      	mov	r2, r7
 80172b6:	4630      	mov	r0, r6
 80172b8:	f7ff ffda 	bl	8017270 <__sfputc_r>
 80172bc:	1c43      	adds	r3, r0, #1
 80172be:	d1f3      	bne.n	80172a8 <__sfputs_r+0xa>
 80172c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172c4 <_vfiprintf_r>:
 80172c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c8:	460d      	mov	r5, r1
 80172ca:	b09d      	sub	sp, #116	@ 0x74
 80172cc:	4614      	mov	r4, r2
 80172ce:	4698      	mov	r8, r3
 80172d0:	4606      	mov	r6, r0
 80172d2:	b118      	cbz	r0, 80172dc <_vfiprintf_r+0x18>
 80172d4:	6a03      	ldr	r3, [r0, #32]
 80172d6:	b90b      	cbnz	r3, 80172dc <_vfiprintf_r+0x18>
 80172d8:	f7ff fc5a 	bl	8016b90 <__sinit>
 80172dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172de:	07d9      	lsls	r1, r3, #31
 80172e0:	d405      	bmi.n	80172ee <_vfiprintf_r+0x2a>
 80172e2:	89ab      	ldrh	r3, [r5, #12]
 80172e4:	059a      	lsls	r2, r3, #22
 80172e6:	d402      	bmi.n	80172ee <_vfiprintf_r+0x2a>
 80172e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172ea:	f7ff fe92 	bl	8017012 <__retarget_lock_acquire_recursive>
 80172ee:	89ab      	ldrh	r3, [r5, #12]
 80172f0:	071b      	lsls	r3, r3, #28
 80172f2:	d501      	bpl.n	80172f8 <_vfiprintf_r+0x34>
 80172f4:	692b      	ldr	r3, [r5, #16]
 80172f6:	b99b      	cbnz	r3, 8017320 <_vfiprintf_r+0x5c>
 80172f8:	4629      	mov	r1, r5
 80172fa:	4630      	mov	r0, r6
 80172fc:	f7ff fd70 	bl	8016de0 <__swsetup_r>
 8017300:	b170      	cbz	r0, 8017320 <_vfiprintf_r+0x5c>
 8017302:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017304:	07dc      	lsls	r4, r3, #31
 8017306:	d504      	bpl.n	8017312 <_vfiprintf_r+0x4e>
 8017308:	f04f 30ff 	mov.w	r0, #4294967295
 801730c:	b01d      	add	sp, #116	@ 0x74
 801730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017312:	89ab      	ldrh	r3, [r5, #12]
 8017314:	0598      	lsls	r0, r3, #22
 8017316:	d4f7      	bmi.n	8017308 <_vfiprintf_r+0x44>
 8017318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801731a:	f7ff fe7b 	bl	8017014 <__retarget_lock_release_recursive>
 801731e:	e7f3      	b.n	8017308 <_vfiprintf_r+0x44>
 8017320:	2300      	movs	r3, #0
 8017322:	9309      	str	r3, [sp, #36]	@ 0x24
 8017324:	2320      	movs	r3, #32
 8017326:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801732a:	f8cd 800c 	str.w	r8, [sp, #12]
 801732e:	2330      	movs	r3, #48	@ 0x30
 8017330:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80174e0 <_vfiprintf_r+0x21c>
 8017334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017338:	f04f 0901 	mov.w	r9, #1
 801733c:	4623      	mov	r3, r4
 801733e:	469a      	mov	sl, r3
 8017340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017344:	b10a      	cbz	r2, 801734a <_vfiprintf_r+0x86>
 8017346:	2a25      	cmp	r2, #37	@ 0x25
 8017348:	d1f9      	bne.n	801733e <_vfiprintf_r+0x7a>
 801734a:	ebba 0b04 	subs.w	fp, sl, r4
 801734e:	d00b      	beq.n	8017368 <_vfiprintf_r+0xa4>
 8017350:	465b      	mov	r3, fp
 8017352:	4622      	mov	r2, r4
 8017354:	4629      	mov	r1, r5
 8017356:	4630      	mov	r0, r6
 8017358:	f7ff ffa1 	bl	801729e <__sfputs_r>
 801735c:	3001      	adds	r0, #1
 801735e:	f000 80a7 	beq.w	80174b0 <_vfiprintf_r+0x1ec>
 8017362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017364:	445a      	add	r2, fp
 8017366:	9209      	str	r2, [sp, #36]	@ 0x24
 8017368:	f89a 3000 	ldrb.w	r3, [sl]
 801736c:	2b00      	cmp	r3, #0
 801736e:	f000 809f 	beq.w	80174b0 <_vfiprintf_r+0x1ec>
 8017372:	2300      	movs	r3, #0
 8017374:	f04f 32ff 	mov.w	r2, #4294967295
 8017378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801737c:	f10a 0a01 	add.w	sl, sl, #1
 8017380:	9304      	str	r3, [sp, #16]
 8017382:	9307      	str	r3, [sp, #28]
 8017384:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017388:	931a      	str	r3, [sp, #104]	@ 0x68
 801738a:	4654      	mov	r4, sl
 801738c:	2205      	movs	r2, #5
 801738e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017392:	4853      	ldr	r0, [pc, #332]	@ (80174e0 <_vfiprintf_r+0x21c>)
 8017394:	f7e8 ff44 	bl	8000220 <memchr>
 8017398:	9a04      	ldr	r2, [sp, #16]
 801739a:	b9d8      	cbnz	r0, 80173d4 <_vfiprintf_r+0x110>
 801739c:	06d1      	lsls	r1, r2, #27
 801739e:	bf44      	itt	mi
 80173a0:	2320      	movmi	r3, #32
 80173a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173a6:	0713      	lsls	r3, r2, #28
 80173a8:	bf44      	itt	mi
 80173aa:	232b      	movmi	r3, #43	@ 0x2b
 80173ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173b0:	f89a 3000 	ldrb.w	r3, [sl]
 80173b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80173b6:	d015      	beq.n	80173e4 <_vfiprintf_r+0x120>
 80173b8:	9a07      	ldr	r2, [sp, #28]
 80173ba:	4654      	mov	r4, sl
 80173bc:	2000      	movs	r0, #0
 80173be:	f04f 0c0a 	mov.w	ip, #10
 80173c2:	4621      	mov	r1, r4
 80173c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173c8:	3b30      	subs	r3, #48	@ 0x30
 80173ca:	2b09      	cmp	r3, #9
 80173cc:	d94b      	bls.n	8017466 <_vfiprintf_r+0x1a2>
 80173ce:	b1b0      	cbz	r0, 80173fe <_vfiprintf_r+0x13a>
 80173d0:	9207      	str	r2, [sp, #28]
 80173d2:	e014      	b.n	80173fe <_vfiprintf_r+0x13a>
 80173d4:	eba0 0308 	sub.w	r3, r0, r8
 80173d8:	fa09 f303 	lsl.w	r3, r9, r3
 80173dc:	4313      	orrs	r3, r2
 80173de:	9304      	str	r3, [sp, #16]
 80173e0:	46a2      	mov	sl, r4
 80173e2:	e7d2      	b.n	801738a <_vfiprintf_r+0xc6>
 80173e4:	9b03      	ldr	r3, [sp, #12]
 80173e6:	1d19      	adds	r1, r3, #4
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	9103      	str	r1, [sp, #12]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	bfbb      	ittet	lt
 80173f0:	425b      	neglt	r3, r3
 80173f2:	f042 0202 	orrlt.w	r2, r2, #2
 80173f6:	9307      	strge	r3, [sp, #28]
 80173f8:	9307      	strlt	r3, [sp, #28]
 80173fa:	bfb8      	it	lt
 80173fc:	9204      	strlt	r2, [sp, #16]
 80173fe:	7823      	ldrb	r3, [r4, #0]
 8017400:	2b2e      	cmp	r3, #46	@ 0x2e
 8017402:	d10a      	bne.n	801741a <_vfiprintf_r+0x156>
 8017404:	7863      	ldrb	r3, [r4, #1]
 8017406:	2b2a      	cmp	r3, #42	@ 0x2a
 8017408:	d132      	bne.n	8017470 <_vfiprintf_r+0x1ac>
 801740a:	9b03      	ldr	r3, [sp, #12]
 801740c:	1d1a      	adds	r2, r3, #4
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	9203      	str	r2, [sp, #12]
 8017412:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017416:	3402      	adds	r4, #2
 8017418:	9305      	str	r3, [sp, #20]
 801741a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174f0 <_vfiprintf_r+0x22c>
 801741e:	7821      	ldrb	r1, [r4, #0]
 8017420:	2203      	movs	r2, #3
 8017422:	4650      	mov	r0, sl
 8017424:	f7e8 fefc 	bl	8000220 <memchr>
 8017428:	b138      	cbz	r0, 801743a <_vfiprintf_r+0x176>
 801742a:	9b04      	ldr	r3, [sp, #16]
 801742c:	eba0 000a 	sub.w	r0, r0, sl
 8017430:	2240      	movs	r2, #64	@ 0x40
 8017432:	4082      	lsls	r2, r0
 8017434:	4313      	orrs	r3, r2
 8017436:	3401      	adds	r4, #1
 8017438:	9304      	str	r3, [sp, #16]
 801743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801743e:	4829      	ldr	r0, [pc, #164]	@ (80174e4 <_vfiprintf_r+0x220>)
 8017440:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017444:	2206      	movs	r2, #6
 8017446:	f7e8 feeb 	bl	8000220 <memchr>
 801744a:	2800      	cmp	r0, #0
 801744c:	d03f      	beq.n	80174ce <_vfiprintf_r+0x20a>
 801744e:	4b26      	ldr	r3, [pc, #152]	@ (80174e8 <_vfiprintf_r+0x224>)
 8017450:	bb1b      	cbnz	r3, 801749a <_vfiprintf_r+0x1d6>
 8017452:	9b03      	ldr	r3, [sp, #12]
 8017454:	3307      	adds	r3, #7
 8017456:	f023 0307 	bic.w	r3, r3, #7
 801745a:	3308      	adds	r3, #8
 801745c:	9303      	str	r3, [sp, #12]
 801745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017460:	443b      	add	r3, r7
 8017462:	9309      	str	r3, [sp, #36]	@ 0x24
 8017464:	e76a      	b.n	801733c <_vfiprintf_r+0x78>
 8017466:	fb0c 3202 	mla	r2, ip, r2, r3
 801746a:	460c      	mov	r4, r1
 801746c:	2001      	movs	r0, #1
 801746e:	e7a8      	b.n	80173c2 <_vfiprintf_r+0xfe>
 8017470:	2300      	movs	r3, #0
 8017472:	3401      	adds	r4, #1
 8017474:	9305      	str	r3, [sp, #20]
 8017476:	4619      	mov	r1, r3
 8017478:	f04f 0c0a 	mov.w	ip, #10
 801747c:	4620      	mov	r0, r4
 801747e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017482:	3a30      	subs	r2, #48	@ 0x30
 8017484:	2a09      	cmp	r2, #9
 8017486:	d903      	bls.n	8017490 <_vfiprintf_r+0x1cc>
 8017488:	2b00      	cmp	r3, #0
 801748a:	d0c6      	beq.n	801741a <_vfiprintf_r+0x156>
 801748c:	9105      	str	r1, [sp, #20]
 801748e:	e7c4      	b.n	801741a <_vfiprintf_r+0x156>
 8017490:	fb0c 2101 	mla	r1, ip, r1, r2
 8017494:	4604      	mov	r4, r0
 8017496:	2301      	movs	r3, #1
 8017498:	e7f0      	b.n	801747c <_vfiprintf_r+0x1b8>
 801749a:	ab03      	add	r3, sp, #12
 801749c:	9300      	str	r3, [sp, #0]
 801749e:	462a      	mov	r2, r5
 80174a0:	4b12      	ldr	r3, [pc, #72]	@ (80174ec <_vfiprintf_r+0x228>)
 80174a2:	a904      	add	r1, sp, #16
 80174a4:	4630      	mov	r0, r6
 80174a6:	f3af 8000 	nop.w
 80174aa:	4607      	mov	r7, r0
 80174ac:	1c78      	adds	r0, r7, #1
 80174ae:	d1d6      	bne.n	801745e <_vfiprintf_r+0x19a>
 80174b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80174b2:	07d9      	lsls	r1, r3, #31
 80174b4:	d405      	bmi.n	80174c2 <_vfiprintf_r+0x1fe>
 80174b6:	89ab      	ldrh	r3, [r5, #12]
 80174b8:	059a      	lsls	r2, r3, #22
 80174ba:	d402      	bmi.n	80174c2 <_vfiprintf_r+0x1fe>
 80174bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174be:	f7ff fda9 	bl	8017014 <__retarget_lock_release_recursive>
 80174c2:	89ab      	ldrh	r3, [r5, #12]
 80174c4:	065b      	lsls	r3, r3, #25
 80174c6:	f53f af1f 	bmi.w	8017308 <_vfiprintf_r+0x44>
 80174ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174cc:	e71e      	b.n	801730c <_vfiprintf_r+0x48>
 80174ce:	ab03      	add	r3, sp, #12
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	462a      	mov	r2, r5
 80174d4:	4b05      	ldr	r3, [pc, #20]	@ (80174ec <_vfiprintf_r+0x228>)
 80174d6:	a904      	add	r1, sp, #16
 80174d8:	4630      	mov	r0, r6
 80174da:	f000 f879 	bl	80175d0 <_printf_i>
 80174de:	e7e4      	b.n	80174aa <_vfiprintf_r+0x1e6>
 80174e0:	0801ae83 	.word	0x0801ae83
 80174e4:	0801ae8d 	.word	0x0801ae8d
 80174e8:	00000000 	.word	0x00000000
 80174ec:	0801729f 	.word	0x0801729f
 80174f0:	0801ae89 	.word	0x0801ae89

080174f4 <_printf_common>:
 80174f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174f8:	4616      	mov	r6, r2
 80174fa:	4698      	mov	r8, r3
 80174fc:	688a      	ldr	r2, [r1, #8]
 80174fe:	690b      	ldr	r3, [r1, #16]
 8017500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017504:	4293      	cmp	r3, r2
 8017506:	bfb8      	it	lt
 8017508:	4613      	movlt	r3, r2
 801750a:	6033      	str	r3, [r6, #0]
 801750c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017510:	4607      	mov	r7, r0
 8017512:	460c      	mov	r4, r1
 8017514:	b10a      	cbz	r2, 801751a <_printf_common+0x26>
 8017516:	3301      	adds	r3, #1
 8017518:	6033      	str	r3, [r6, #0]
 801751a:	6823      	ldr	r3, [r4, #0]
 801751c:	0699      	lsls	r1, r3, #26
 801751e:	bf42      	ittt	mi
 8017520:	6833      	ldrmi	r3, [r6, #0]
 8017522:	3302      	addmi	r3, #2
 8017524:	6033      	strmi	r3, [r6, #0]
 8017526:	6825      	ldr	r5, [r4, #0]
 8017528:	f015 0506 	ands.w	r5, r5, #6
 801752c:	d106      	bne.n	801753c <_printf_common+0x48>
 801752e:	f104 0a19 	add.w	sl, r4, #25
 8017532:	68e3      	ldr	r3, [r4, #12]
 8017534:	6832      	ldr	r2, [r6, #0]
 8017536:	1a9b      	subs	r3, r3, r2
 8017538:	42ab      	cmp	r3, r5
 801753a:	dc26      	bgt.n	801758a <_printf_common+0x96>
 801753c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017540:	6822      	ldr	r2, [r4, #0]
 8017542:	3b00      	subs	r3, #0
 8017544:	bf18      	it	ne
 8017546:	2301      	movne	r3, #1
 8017548:	0692      	lsls	r2, r2, #26
 801754a:	d42b      	bmi.n	80175a4 <_printf_common+0xb0>
 801754c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017550:	4641      	mov	r1, r8
 8017552:	4638      	mov	r0, r7
 8017554:	47c8      	blx	r9
 8017556:	3001      	adds	r0, #1
 8017558:	d01e      	beq.n	8017598 <_printf_common+0xa4>
 801755a:	6823      	ldr	r3, [r4, #0]
 801755c:	6922      	ldr	r2, [r4, #16]
 801755e:	f003 0306 	and.w	r3, r3, #6
 8017562:	2b04      	cmp	r3, #4
 8017564:	bf02      	ittt	eq
 8017566:	68e5      	ldreq	r5, [r4, #12]
 8017568:	6833      	ldreq	r3, [r6, #0]
 801756a:	1aed      	subeq	r5, r5, r3
 801756c:	68a3      	ldr	r3, [r4, #8]
 801756e:	bf0c      	ite	eq
 8017570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017574:	2500      	movne	r5, #0
 8017576:	4293      	cmp	r3, r2
 8017578:	bfc4      	itt	gt
 801757a:	1a9b      	subgt	r3, r3, r2
 801757c:	18ed      	addgt	r5, r5, r3
 801757e:	2600      	movs	r6, #0
 8017580:	341a      	adds	r4, #26
 8017582:	42b5      	cmp	r5, r6
 8017584:	d11a      	bne.n	80175bc <_printf_common+0xc8>
 8017586:	2000      	movs	r0, #0
 8017588:	e008      	b.n	801759c <_printf_common+0xa8>
 801758a:	2301      	movs	r3, #1
 801758c:	4652      	mov	r2, sl
 801758e:	4641      	mov	r1, r8
 8017590:	4638      	mov	r0, r7
 8017592:	47c8      	blx	r9
 8017594:	3001      	adds	r0, #1
 8017596:	d103      	bne.n	80175a0 <_printf_common+0xac>
 8017598:	f04f 30ff 	mov.w	r0, #4294967295
 801759c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175a0:	3501      	adds	r5, #1
 80175a2:	e7c6      	b.n	8017532 <_printf_common+0x3e>
 80175a4:	18e1      	adds	r1, r4, r3
 80175a6:	1c5a      	adds	r2, r3, #1
 80175a8:	2030      	movs	r0, #48	@ 0x30
 80175aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80175ae:	4422      	add	r2, r4
 80175b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80175b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80175b8:	3302      	adds	r3, #2
 80175ba:	e7c7      	b.n	801754c <_printf_common+0x58>
 80175bc:	2301      	movs	r3, #1
 80175be:	4622      	mov	r2, r4
 80175c0:	4641      	mov	r1, r8
 80175c2:	4638      	mov	r0, r7
 80175c4:	47c8      	blx	r9
 80175c6:	3001      	adds	r0, #1
 80175c8:	d0e6      	beq.n	8017598 <_printf_common+0xa4>
 80175ca:	3601      	adds	r6, #1
 80175cc:	e7d9      	b.n	8017582 <_printf_common+0x8e>
	...

080175d0 <_printf_i>:
 80175d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175d4:	7e0f      	ldrb	r7, [r1, #24]
 80175d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80175d8:	2f78      	cmp	r7, #120	@ 0x78
 80175da:	4691      	mov	r9, r2
 80175dc:	4680      	mov	r8, r0
 80175de:	460c      	mov	r4, r1
 80175e0:	469a      	mov	sl, r3
 80175e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80175e6:	d807      	bhi.n	80175f8 <_printf_i+0x28>
 80175e8:	2f62      	cmp	r7, #98	@ 0x62
 80175ea:	d80a      	bhi.n	8017602 <_printf_i+0x32>
 80175ec:	2f00      	cmp	r7, #0
 80175ee:	f000 80d2 	beq.w	8017796 <_printf_i+0x1c6>
 80175f2:	2f58      	cmp	r7, #88	@ 0x58
 80175f4:	f000 80b9 	beq.w	801776a <_printf_i+0x19a>
 80175f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80175fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017600:	e03a      	b.n	8017678 <_printf_i+0xa8>
 8017602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017606:	2b15      	cmp	r3, #21
 8017608:	d8f6      	bhi.n	80175f8 <_printf_i+0x28>
 801760a:	a101      	add	r1, pc, #4	@ (adr r1, 8017610 <_printf_i+0x40>)
 801760c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017610:	08017669 	.word	0x08017669
 8017614:	0801767d 	.word	0x0801767d
 8017618:	080175f9 	.word	0x080175f9
 801761c:	080175f9 	.word	0x080175f9
 8017620:	080175f9 	.word	0x080175f9
 8017624:	080175f9 	.word	0x080175f9
 8017628:	0801767d 	.word	0x0801767d
 801762c:	080175f9 	.word	0x080175f9
 8017630:	080175f9 	.word	0x080175f9
 8017634:	080175f9 	.word	0x080175f9
 8017638:	080175f9 	.word	0x080175f9
 801763c:	0801777d 	.word	0x0801777d
 8017640:	080176a7 	.word	0x080176a7
 8017644:	08017737 	.word	0x08017737
 8017648:	080175f9 	.word	0x080175f9
 801764c:	080175f9 	.word	0x080175f9
 8017650:	0801779f 	.word	0x0801779f
 8017654:	080175f9 	.word	0x080175f9
 8017658:	080176a7 	.word	0x080176a7
 801765c:	080175f9 	.word	0x080175f9
 8017660:	080175f9 	.word	0x080175f9
 8017664:	0801773f 	.word	0x0801773f
 8017668:	6833      	ldr	r3, [r6, #0]
 801766a:	1d1a      	adds	r2, r3, #4
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	6032      	str	r2, [r6, #0]
 8017670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017678:	2301      	movs	r3, #1
 801767a:	e09d      	b.n	80177b8 <_printf_i+0x1e8>
 801767c:	6833      	ldr	r3, [r6, #0]
 801767e:	6820      	ldr	r0, [r4, #0]
 8017680:	1d19      	adds	r1, r3, #4
 8017682:	6031      	str	r1, [r6, #0]
 8017684:	0606      	lsls	r6, r0, #24
 8017686:	d501      	bpl.n	801768c <_printf_i+0xbc>
 8017688:	681d      	ldr	r5, [r3, #0]
 801768a:	e003      	b.n	8017694 <_printf_i+0xc4>
 801768c:	0645      	lsls	r5, r0, #25
 801768e:	d5fb      	bpl.n	8017688 <_printf_i+0xb8>
 8017690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017694:	2d00      	cmp	r5, #0
 8017696:	da03      	bge.n	80176a0 <_printf_i+0xd0>
 8017698:	232d      	movs	r3, #45	@ 0x2d
 801769a:	426d      	negs	r5, r5
 801769c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80176a0:	4859      	ldr	r0, [pc, #356]	@ (8017808 <_printf_i+0x238>)
 80176a2:	230a      	movs	r3, #10
 80176a4:	e011      	b.n	80176ca <_printf_i+0xfa>
 80176a6:	6821      	ldr	r1, [r4, #0]
 80176a8:	6833      	ldr	r3, [r6, #0]
 80176aa:	0608      	lsls	r0, r1, #24
 80176ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80176b0:	d402      	bmi.n	80176b8 <_printf_i+0xe8>
 80176b2:	0649      	lsls	r1, r1, #25
 80176b4:	bf48      	it	mi
 80176b6:	b2ad      	uxthmi	r5, r5
 80176b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80176ba:	4853      	ldr	r0, [pc, #332]	@ (8017808 <_printf_i+0x238>)
 80176bc:	6033      	str	r3, [r6, #0]
 80176be:	bf14      	ite	ne
 80176c0:	230a      	movne	r3, #10
 80176c2:	2308      	moveq	r3, #8
 80176c4:	2100      	movs	r1, #0
 80176c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80176ca:	6866      	ldr	r6, [r4, #4]
 80176cc:	60a6      	str	r6, [r4, #8]
 80176ce:	2e00      	cmp	r6, #0
 80176d0:	bfa2      	ittt	ge
 80176d2:	6821      	ldrge	r1, [r4, #0]
 80176d4:	f021 0104 	bicge.w	r1, r1, #4
 80176d8:	6021      	strge	r1, [r4, #0]
 80176da:	b90d      	cbnz	r5, 80176e0 <_printf_i+0x110>
 80176dc:	2e00      	cmp	r6, #0
 80176de:	d04b      	beq.n	8017778 <_printf_i+0x1a8>
 80176e0:	4616      	mov	r6, r2
 80176e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80176e6:	fb03 5711 	mls	r7, r3, r1, r5
 80176ea:	5dc7      	ldrb	r7, [r0, r7]
 80176ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80176f0:	462f      	mov	r7, r5
 80176f2:	42bb      	cmp	r3, r7
 80176f4:	460d      	mov	r5, r1
 80176f6:	d9f4      	bls.n	80176e2 <_printf_i+0x112>
 80176f8:	2b08      	cmp	r3, #8
 80176fa:	d10b      	bne.n	8017714 <_printf_i+0x144>
 80176fc:	6823      	ldr	r3, [r4, #0]
 80176fe:	07df      	lsls	r7, r3, #31
 8017700:	d508      	bpl.n	8017714 <_printf_i+0x144>
 8017702:	6923      	ldr	r3, [r4, #16]
 8017704:	6861      	ldr	r1, [r4, #4]
 8017706:	4299      	cmp	r1, r3
 8017708:	bfde      	ittt	le
 801770a:	2330      	movle	r3, #48	@ 0x30
 801770c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017710:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017714:	1b92      	subs	r2, r2, r6
 8017716:	6122      	str	r2, [r4, #16]
 8017718:	f8cd a000 	str.w	sl, [sp]
 801771c:	464b      	mov	r3, r9
 801771e:	aa03      	add	r2, sp, #12
 8017720:	4621      	mov	r1, r4
 8017722:	4640      	mov	r0, r8
 8017724:	f7ff fee6 	bl	80174f4 <_printf_common>
 8017728:	3001      	adds	r0, #1
 801772a:	d14a      	bne.n	80177c2 <_printf_i+0x1f2>
 801772c:	f04f 30ff 	mov.w	r0, #4294967295
 8017730:	b004      	add	sp, #16
 8017732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	f043 0320 	orr.w	r3, r3, #32
 801773c:	6023      	str	r3, [r4, #0]
 801773e:	4833      	ldr	r0, [pc, #204]	@ (801780c <_printf_i+0x23c>)
 8017740:	2778      	movs	r7, #120	@ 0x78
 8017742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	6831      	ldr	r1, [r6, #0]
 801774a:	061f      	lsls	r7, r3, #24
 801774c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017750:	d402      	bmi.n	8017758 <_printf_i+0x188>
 8017752:	065f      	lsls	r7, r3, #25
 8017754:	bf48      	it	mi
 8017756:	b2ad      	uxthmi	r5, r5
 8017758:	6031      	str	r1, [r6, #0]
 801775a:	07d9      	lsls	r1, r3, #31
 801775c:	bf44      	itt	mi
 801775e:	f043 0320 	orrmi.w	r3, r3, #32
 8017762:	6023      	strmi	r3, [r4, #0]
 8017764:	b11d      	cbz	r5, 801776e <_printf_i+0x19e>
 8017766:	2310      	movs	r3, #16
 8017768:	e7ac      	b.n	80176c4 <_printf_i+0xf4>
 801776a:	4827      	ldr	r0, [pc, #156]	@ (8017808 <_printf_i+0x238>)
 801776c:	e7e9      	b.n	8017742 <_printf_i+0x172>
 801776e:	6823      	ldr	r3, [r4, #0]
 8017770:	f023 0320 	bic.w	r3, r3, #32
 8017774:	6023      	str	r3, [r4, #0]
 8017776:	e7f6      	b.n	8017766 <_printf_i+0x196>
 8017778:	4616      	mov	r6, r2
 801777a:	e7bd      	b.n	80176f8 <_printf_i+0x128>
 801777c:	6833      	ldr	r3, [r6, #0]
 801777e:	6825      	ldr	r5, [r4, #0]
 8017780:	6961      	ldr	r1, [r4, #20]
 8017782:	1d18      	adds	r0, r3, #4
 8017784:	6030      	str	r0, [r6, #0]
 8017786:	062e      	lsls	r6, r5, #24
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	d501      	bpl.n	8017790 <_printf_i+0x1c0>
 801778c:	6019      	str	r1, [r3, #0]
 801778e:	e002      	b.n	8017796 <_printf_i+0x1c6>
 8017790:	0668      	lsls	r0, r5, #25
 8017792:	d5fb      	bpl.n	801778c <_printf_i+0x1bc>
 8017794:	8019      	strh	r1, [r3, #0]
 8017796:	2300      	movs	r3, #0
 8017798:	6123      	str	r3, [r4, #16]
 801779a:	4616      	mov	r6, r2
 801779c:	e7bc      	b.n	8017718 <_printf_i+0x148>
 801779e:	6833      	ldr	r3, [r6, #0]
 80177a0:	1d1a      	adds	r2, r3, #4
 80177a2:	6032      	str	r2, [r6, #0]
 80177a4:	681e      	ldr	r6, [r3, #0]
 80177a6:	6862      	ldr	r2, [r4, #4]
 80177a8:	2100      	movs	r1, #0
 80177aa:	4630      	mov	r0, r6
 80177ac:	f7e8 fd38 	bl	8000220 <memchr>
 80177b0:	b108      	cbz	r0, 80177b6 <_printf_i+0x1e6>
 80177b2:	1b80      	subs	r0, r0, r6
 80177b4:	6060      	str	r0, [r4, #4]
 80177b6:	6863      	ldr	r3, [r4, #4]
 80177b8:	6123      	str	r3, [r4, #16]
 80177ba:	2300      	movs	r3, #0
 80177bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177c0:	e7aa      	b.n	8017718 <_printf_i+0x148>
 80177c2:	6923      	ldr	r3, [r4, #16]
 80177c4:	4632      	mov	r2, r6
 80177c6:	4649      	mov	r1, r9
 80177c8:	4640      	mov	r0, r8
 80177ca:	47d0      	blx	sl
 80177cc:	3001      	adds	r0, #1
 80177ce:	d0ad      	beq.n	801772c <_printf_i+0x15c>
 80177d0:	6823      	ldr	r3, [r4, #0]
 80177d2:	079b      	lsls	r3, r3, #30
 80177d4:	d413      	bmi.n	80177fe <_printf_i+0x22e>
 80177d6:	68e0      	ldr	r0, [r4, #12]
 80177d8:	9b03      	ldr	r3, [sp, #12]
 80177da:	4298      	cmp	r0, r3
 80177dc:	bfb8      	it	lt
 80177de:	4618      	movlt	r0, r3
 80177e0:	e7a6      	b.n	8017730 <_printf_i+0x160>
 80177e2:	2301      	movs	r3, #1
 80177e4:	4632      	mov	r2, r6
 80177e6:	4649      	mov	r1, r9
 80177e8:	4640      	mov	r0, r8
 80177ea:	47d0      	blx	sl
 80177ec:	3001      	adds	r0, #1
 80177ee:	d09d      	beq.n	801772c <_printf_i+0x15c>
 80177f0:	3501      	adds	r5, #1
 80177f2:	68e3      	ldr	r3, [r4, #12]
 80177f4:	9903      	ldr	r1, [sp, #12]
 80177f6:	1a5b      	subs	r3, r3, r1
 80177f8:	42ab      	cmp	r3, r5
 80177fa:	dcf2      	bgt.n	80177e2 <_printf_i+0x212>
 80177fc:	e7eb      	b.n	80177d6 <_printf_i+0x206>
 80177fe:	2500      	movs	r5, #0
 8017800:	f104 0619 	add.w	r6, r4, #25
 8017804:	e7f5      	b.n	80177f2 <_printf_i+0x222>
 8017806:	bf00      	nop
 8017808:	0801ae94 	.word	0x0801ae94
 801780c:	0801aea5 	.word	0x0801aea5

08017810 <__sflush_r>:
 8017810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017818:	0716      	lsls	r6, r2, #28
 801781a:	4605      	mov	r5, r0
 801781c:	460c      	mov	r4, r1
 801781e:	d454      	bmi.n	80178ca <__sflush_r+0xba>
 8017820:	684b      	ldr	r3, [r1, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	dc02      	bgt.n	801782c <__sflush_r+0x1c>
 8017826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017828:	2b00      	cmp	r3, #0
 801782a:	dd48      	ble.n	80178be <__sflush_r+0xae>
 801782c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801782e:	2e00      	cmp	r6, #0
 8017830:	d045      	beq.n	80178be <__sflush_r+0xae>
 8017832:	2300      	movs	r3, #0
 8017834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017838:	682f      	ldr	r7, [r5, #0]
 801783a:	6a21      	ldr	r1, [r4, #32]
 801783c:	602b      	str	r3, [r5, #0]
 801783e:	d030      	beq.n	80178a2 <__sflush_r+0x92>
 8017840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017842:	89a3      	ldrh	r3, [r4, #12]
 8017844:	0759      	lsls	r1, r3, #29
 8017846:	d505      	bpl.n	8017854 <__sflush_r+0x44>
 8017848:	6863      	ldr	r3, [r4, #4]
 801784a:	1ad2      	subs	r2, r2, r3
 801784c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801784e:	b10b      	cbz	r3, 8017854 <__sflush_r+0x44>
 8017850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017852:	1ad2      	subs	r2, r2, r3
 8017854:	2300      	movs	r3, #0
 8017856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017858:	6a21      	ldr	r1, [r4, #32]
 801785a:	4628      	mov	r0, r5
 801785c:	47b0      	blx	r6
 801785e:	1c43      	adds	r3, r0, #1
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	d106      	bne.n	8017872 <__sflush_r+0x62>
 8017864:	6829      	ldr	r1, [r5, #0]
 8017866:	291d      	cmp	r1, #29
 8017868:	d82b      	bhi.n	80178c2 <__sflush_r+0xb2>
 801786a:	4a2a      	ldr	r2, [pc, #168]	@ (8017914 <__sflush_r+0x104>)
 801786c:	410a      	asrs	r2, r1
 801786e:	07d6      	lsls	r6, r2, #31
 8017870:	d427      	bmi.n	80178c2 <__sflush_r+0xb2>
 8017872:	2200      	movs	r2, #0
 8017874:	6062      	str	r2, [r4, #4]
 8017876:	04d9      	lsls	r1, r3, #19
 8017878:	6922      	ldr	r2, [r4, #16]
 801787a:	6022      	str	r2, [r4, #0]
 801787c:	d504      	bpl.n	8017888 <__sflush_r+0x78>
 801787e:	1c42      	adds	r2, r0, #1
 8017880:	d101      	bne.n	8017886 <__sflush_r+0x76>
 8017882:	682b      	ldr	r3, [r5, #0]
 8017884:	b903      	cbnz	r3, 8017888 <__sflush_r+0x78>
 8017886:	6560      	str	r0, [r4, #84]	@ 0x54
 8017888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801788a:	602f      	str	r7, [r5, #0]
 801788c:	b1b9      	cbz	r1, 80178be <__sflush_r+0xae>
 801788e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017892:	4299      	cmp	r1, r3
 8017894:	d002      	beq.n	801789c <__sflush_r+0x8c>
 8017896:	4628      	mov	r0, r5
 8017898:	f7ff fbea 	bl	8017070 <_free_r>
 801789c:	2300      	movs	r3, #0
 801789e:	6363      	str	r3, [r4, #52]	@ 0x34
 80178a0:	e00d      	b.n	80178be <__sflush_r+0xae>
 80178a2:	2301      	movs	r3, #1
 80178a4:	4628      	mov	r0, r5
 80178a6:	47b0      	blx	r6
 80178a8:	4602      	mov	r2, r0
 80178aa:	1c50      	adds	r0, r2, #1
 80178ac:	d1c9      	bne.n	8017842 <__sflush_r+0x32>
 80178ae:	682b      	ldr	r3, [r5, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d0c6      	beq.n	8017842 <__sflush_r+0x32>
 80178b4:	2b1d      	cmp	r3, #29
 80178b6:	d001      	beq.n	80178bc <__sflush_r+0xac>
 80178b8:	2b16      	cmp	r3, #22
 80178ba:	d11e      	bne.n	80178fa <__sflush_r+0xea>
 80178bc:	602f      	str	r7, [r5, #0]
 80178be:	2000      	movs	r0, #0
 80178c0:	e022      	b.n	8017908 <__sflush_r+0xf8>
 80178c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178c6:	b21b      	sxth	r3, r3
 80178c8:	e01b      	b.n	8017902 <__sflush_r+0xf2>
 80178ca:	690f      	ldr	r7, [r1, #16]
 80178cc:	2f00      	cmp	r7, #0
 80178ce:	d0f6      	beq.n	80178be <__sflush_r+0xae>
 80178d0:	0793      	lsls	r3, r2, #30
 80178d2:	680e      	ldr	r6, [r1, #0]
 80178d4:	bf08      	it	eq
 80178d6:	694b      	ldreq	r3, [r1, #20]
 80178d8:	600f      	str	r7, [r1, #0]
 80178da:	bf18      	it	ne
 80178dc:	2300      	movne	r3, #0
 80178de:	eba6 0807 	sub.w	r8, r6, r7
 80178e2:	608b      	str	r3, [r1, #8]
 80178e4:	f1b8 0f00 	cmp.w	r8, #0
 80178e8:	dde9      	ble.n	80178be <__sflush_r+0xae>
 80178ea:	6a21      	ldr	r1, [r4, #32]
 80178ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80178ee:	4643      	mov	r3, r8
 80178f0:	463a      	mov	r2, r7
 80178f2:	4628      	mov	r0, r5
 80178f4:	47b0      	blx	r6
 80178f6:	2800      	cmp	r0, #0
 80178f8:	dc08      	bgt.n	801790c <__sflush_r+0xfc>
 80178fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017902:	81a3      	strh	r3, [r4, #12]
 8017904:	f04f 30ff 	mov.w	r0, #4294967295
 8017908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801790c:	4407      	add	r7, r0
 801790e:	eba8 0800 	sub.w	r8, r8, r0
 8017912:	e7e7      	b.n	80178e4 <__sflush_r+0xd4>
 8017914:	dfbffffe 	.word	0xdfbffffe

08017918 <_fflush_r>:
 8017918:	b538      	push	{r3, r4, r5, lr}
 801791a:	690b      	ldr	r3, [r1, #16]
 801791c:	4605      	mov	r5, r0
 801791e:	460c      	mov	r4, r1
 8017920:	b913      	cbnz	r3, 8017928 <_fflush_r+0x10>
 8017922:	2500      	movs	r5, #0
 8017924:	4628      	mov	r0, r5
 8017926:	bd38      	pop	{r3, r4, r5, pc}
 8017928:	b118      	cbz	r0, 8017932 <_fflush_r+0x1a>
 801792a:	6a03      	ldr	r3, [r0, #32]
 801792c:	b90b      	cbnz	r3, 8017932 <_fflush_r+0x1a>
 801792e:	f7ff f92f 	bl	8016b90 <__sinit>
 8017932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d0f3      	beq.n	8017922 <_fflush_r+0xa>
 801793a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801793c:	07d0      	lsls	r0, r2, #31
 801793e:	d404      	bmi.n	801794a <_fflush_r+0x32>
 8017940:	0599      	lsls	r1, r3, #22
 8017942:	d402      	bmi.n	801794a <_fflush_r+0x32>
 8017944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017946:	f7ff fb64 	bl	8017012 <__retarget_lock_acquire_recursive>
 801794a:	4628      	mov	r0, r5
 801794c:	4621      	mov	r1, r4
 801794e:	f7ff ff5f 	bl	8017810 <__sflush_r>
 8017952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017954:	07da      	lsls	r2, r3, #31
 8017956:	4605      	mov	r5, r0
 8017958:	d4e4      	bmi.n	8017924 <_fflush_r+0xc>
 801795a:	89a3      	ldrh	r3, [r4, #12]
 801795c:	059b      	lsls	r3, r3, #22
 801795e:	d4e1      	bmi.n	8017924 <_fflush_r+0xc>
 8017960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017962:	f7ff fb57 	bl	8017014 <__retarget_lock_release_recursive>
 8017966:	e7dd      	b.n	8017924 <_fflush_r+0xc>

08017968 <fiprintf>:
 8017968:	b40e      	push	{r1, r2, r3}
 801796a:	b503      	push	{r0, r1, lr}
 801796c:	4601      	mov	r1, r0
 801796e:	ab03      	add	r3, sp, #12
 8017970:	4805      	ldr	r0, [pc, #20]	@ (8017988 <fiprintf+0x20>)
 8017972:	f853 2b04 	ldr.w	r2, [r3], #4
 8017976:	6800      	ldr	r0, [r0, #0]
 8017978:	9301      	str	r3, [sp, #4]
 801797a:	f7ff fca3 	bl	80172c4 <_vfiprintf_r>
 801797e:	b002      	add	sp, #8
 8017980:	f85d eb04 	ldr.w	lr, [sp], #4
 8017984:	b003      	add	sp, #12
 8017986:	4770      	bx	lr
 8017988:	20000038 	.word	0x20000038

0801798c <__swhatbuf_r>:
 801798c:	b570      	push	{r4, r5, r6, lr}
 801798e:	460c      	mov	r4, r1
 8017990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017994:	2900      	cmp	r1, #0
 8017996:	b096      	sub	sp, #88	@ 0x58
 8017998:	4615      	mov	r5, r2
 801799a:	461e      	mov	r6, r3
 801799c:	da0d      	bge.n	80179ba <__swhatbuf_r+0x2e>
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80179a4:	f04f 0100 	mov.w	r1, #0
 80179a8:	bf14      	ite	ne
 80179aa:	2340      	movne	r3, #64	@ 0x40
 80179ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80179b0:	2000      	movs	r0, #0
 80179b2:	6031      	str	r1, [r6, #0]
 80179b4:	602b      	str	r3, [r5, #0]
 80179b6:	b016      	add	sp, #88	@ 0x58
 80179b8:	bd70      	pop	{r4, r5, r6, pc}
 80179ba:	466a      	mov	r2, sp
 80179bc:	f000 f848 	bl	8017a50 <_fstat_r>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	dbec      	blt.n	801799e <__swhatbuf_r+0x12>
 80179c4:	9901      	ldr	r1, [sp, #4]
 80179c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80179ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80179ce:	4259      	negs	r1, r3
 80179d0:	4159      	adcs	r1, r3
 80179d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80179d6:	e7eb      	b.n	80179b0 <__swhatbuf_r+0x24>

080179d8 <__smakebuf_r>:
 80179d8:	898b      	ldrh	r3, [r1, #12]
 80179da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179dc:	079d      	lsls	r5, r3, #30
 80179de:	4606      	mov	r6, r0
 80179e0:	460c      	mov	r4, r1
 80179e2:	d507      	bpl.n	80179f4 <__smakebuf_r+0x1c>
 80179e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80179e8:	6023      	str	r3, [r4, #0]
 80179ea:	6123      	str	r3, [r4, #16]
 80179ec:	2301      	movs	r3, #1
 80179ee:	6163      	str	r3, [r4, #20]
 80179f0:	b003      	add	sp, #12
 80179f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f4:	ab01      	add	r3, sp, #4
 80179f6:	466a      	mov	r2, sp
 80179f8:	f7ff ffc8 	bl	801798c <__swhatbuf_r>
 80179fc:	9f00      	ldr	r7, [sp, #0]
 80179fe:	4605      	mov	r5, r0
 8017a00:	4639      	mov	r1, r7
 8017a02:	4630      	mov	r0, r6
 8017a04:	f7ff fba8 	bl	8017158 <_malloc_r>
 8017a08:	b948      	cbnz	r0, 8017a1e <__smakebuf_r+0x46>
 8017a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a0e:	059a      	lsls	r2, r3, #22
 8017a10:	d4ee      	bmi.n	80179f0 <__smakebuf_r+0x18>
 8017a12:	f023 0303 	bic.w	r3, r3, #3
 8017a16:	f043 0302 	orr.w	r3, r3, #2
 8017a1a:	81a3      	strh	r3, [r4, #12]
 8017a1c:	e7e2      	b.n	80179e4 <__smakebuf_r+0xc>
 8017a1e:	89a3      	ldrh	r3, [r4, #12]
 8017a20:	6020      	str	r0, [r4, #0]
 8017a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a26:	81a3      	strh	r3, [r4, #12]
 8017a28:	9b01      	ldr	r3, [sp, #4]
 8017a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017a2e:	b15b      	cbz	r3, 8017a48 <__smakebuf_r+0x70>
 8017a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a34:	4630      	mov	r0, r6
 8017a36:	f000 f81d 	bl	8017a74 <_isatty_r>
 8017a3a:	b128      	cbz	r0, 8017a48 <__smakebuf_r+0x70>
 8017a3c:	89a3      	ldrh	r3, [r4, #12]
 8017a3e:	f023 0303 	bic.w	r3, r3, #3
 8017a42:	f043 0301 	orr.w	r3, r3, #1
 8017a46:	81a3      	strh	r3, [r4, #12]
 8017a48:	89a3      	ldrh	r3, [r4, #12]
 8017a4a:	431d      	orrs	r5, r3
 8017a4c:	81a5      	strh	r5, [r4, #12]
 8017a4e:	e7cf      	b.n	80179f0 <__smakebuf_r+0x18>

08017a50 <_fstat_r>:
 8017a50:	b538      	push	{r3, r4, r5, lr}
 8017a52:	4d07      	ldr	r5, [pc, #28]	@ (8017a70 <_fstat_r+0x20>)
 8017a54:	2300      	movs	r3, #0
 8017a56:	4604      	mov	r4, r0
 8017a58:	4608      	mov	r0, r1
 8017a5a:	4611      	mov	r1, r2
 8017a5c:	602b      	str	r3, [r5, #0]
 8017a5e:	f7e9 ff46 	bl	80018ee <_fstat>
 8017a62:	1c43      	adds	r3, r0, #1
 8017a64:	d102      	bne.n	8017a6c <_fstat_r+0x1c>
 8017a66:	682b      	ldr	r3, [r5, #0]
 8017a68:	b103      	cbz	r3, 8017a6c <_fstat_r+0x1c>
 8017a6a:	6023      	str	r3, [r4, #0]
 8017a6c:	bd38      	pop	{r3, r4, r5, pc}
 8017a6e:	bf00      	nop
 8017a70:	20008eb8 	.word	0x20008eb8

08017a74 <_isatty_r>:
 8017a74:	b538      	push	{r3, r4, r5, lr}
 8017a76:	4d06      	ldr	r5, [pc, #24]	@ (8017a90 <_isatty_r+0x1c>)
 8017a78:	2300      	movs	r3, #0
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	4608      	mov	r0, r1
 8017a7e:	602b      	str	r3, [r5, #0]
 8017a80:	f7e9 ff45 	bl	800190e <_isatty>
 8017a84:	1c43      	adds	r3, r0, #1
 8017a86:	d102      	bne.n	8017a8e <_isatty_r+0x1a>
 8017a88:	682b      	ldr	r3, [r5, #0]
 8017a8a:	b103      	cbz	r3, 8017a8e <_isatty_r+0x1a>
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	bd38      	pop	{r3, r4, r5, pc}
 8017a90:	20008eb8 	.word	0x20008eb8

08017a94 <_sbrk_r>:
 8017a94:	b538      	push	{r3, r4, r5, lr}
 8017a96:	4d06      	ldr	r5, [pc, #24]	@ (8017ab0 <_sbrk_r+0x1c>)
 8017a98:	2300      	movs	r3, #0
 8017a9a:	4604      	mov	r4, r0
 8017a9c:	4608      	mov	r0, r1
 8017a9e:	602b      	str	r3, [r5, #0]
 8017aa0:	f7e9 ff4e 	bl	8001940 <_sbrk>
 8017aa4:	1c43      	adds	r3, r0, #1
 8017aa6:	d102      	bne.n	8017aae <_sbrk_r+0x1a>
 8017aa8:	682b      	ldr	r3, [r5, #0]
 8017aaa:	b103      	cbz	r3, 8017aae <_sbrk_r+0x1a>
 8017aac:	6023      	str	r3, [r4, #0]
 8017aae:	bd38      	pop	{r3, r4, r5, pc}
 8017ab0:	20008eb8 	.word	0x20008eb8

08017ab4 <abort>:
 8017ab4:	b508      	push	{r3, lr}
 8017ab6:	2006      	movs	r0, #6
 8017ab8:	f000 f82c 	bl	8017b14 <raise>
 8017abc:	2001      	movs	r0, #1
 8017abe:	f7e9 feff 	bl	80018c0 <_exit>

08017ac2 <_raise_r>:
 8017ac2:	291f      	cmp	r1, #31
 8017ac4:	b538      	push	{r3, r4, r5, lr}
 8017ac6:	4605      	mov	r5, r0
 8017ac8:	460c      	mov	r4, r1
 8017aca:	d904      	bls.n	8017ad6 <_raise_r+0x14>
 8017acc:	2316      	movs	r3, #22
 8017ace:	6003      	str	r3, [r0, #0]
 8017ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ad4:	bd38      	pop	{r3, r4, r5, pc}
 8017ad6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017ad8:	b112      	cbz	r2, 8017ae0 <_raise_r+0x1e>
 8017ada:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ade:	b94b      	cbnz	r3, 8017af4 <_raise_r+0x32>
 8017ae0:	4628      	mov	r0, r5
 8017ae2:	f000 f831 	bl	8017b48 <_getpid_r>
 8017ae6:	4622      	mov	r2, r4
 8017ae8:	4601      	mov	r1, r0
 8017aea:	4628      	mov	r0, r5
 8017aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017af0:	f000 b818 	b.w	8017b24 <_kill_r>
 8017af4:	2b01      	cmp	r3, #1
 8017af6:	d00a      	beq.n	8017b0e <_raise_r+0x4c>
 8017af8:	1c59      	adds	r1, r3, #1
 8017afa:	d103      	bne.n	8017b04 <_raise_r+0x42>
 8017afc:	2316      	movs	r3, #22
 8017afe:	6003      	str	r3, [r0, #0]
 8017b00:	2001      	movs	r0, #1
 8017b02:	e7e7      	b.n	8017ad4 <_raise_r+0x12>
 8017b04:	2100      	movs	r1, #0
 8017b06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	4798      	blx	r3
 8017b0e:	2000      	movs	r0, #0
 8017b10:	e7e0      	b.n	8017ad4 <_raise_r+0x12>
	...

08017b14 <raise>:
 8017b14:	4b02      	ldr	r3, [pc, #8]	@ (8017b20 <raise+0xc>)
 8017b16:	4601      	mov	r1, r0
 8017b18:	6818      	ldr	r0, [r3, #0]
 8017b1a:	f7ff bfd2 	b.w	8017ac2 <_raise_r>
 8017b1e:	bf00      	nop
 8017b20:	20000038 	.word	0x20000038

08017b24 <_kill_r>:
 8017b24:	b538      	push	{r3, r4, r5, lr}
 8017b26:	4d07      	ldr	r5, [pc, #28]	@ (8017b44 <_kill_r+0x20>)
 8017b28:	2300      	movs	r3, #0
 8017b2a:	4604      	mov	r4, r0
 8017b2c:	4608      	mov	r0, r1
 8017b2e:	4611      	mov	r1, r2
 8017b30:	602b      	str	r3, [r5, #0]
 8017b32:	f7e9 feb3 	bl	800189c <_kill>
 8017b36:	1c43      	adds	r3, r0, #1
 8017b38:	d102      	bne.n	8017b40 <_kill_r+0x1c>
 8017b3a:	682b      	ldr	r3, [r5, #0]
 8017b3c:	b103      	cbz	r3, 8017b40 <_kill_r+0x1c>
 8017b3e:	6023      	str	r3, [r4, #0]
 8017b40:	bd38      	pop	{r3, r4, r5, pc}
 8017b42:	bf00      	nop
 8017b44:	20008eb8 	.word	0x20008eb8

08017b48 <_getpid_r>:
 8017b48:	f7e9 bea0 	b.w	800188c <_getpid>

08017b4c <_gettimeofday>:
 8017b4c:	4b02      	ldr	r3, [pc, #8]	@ (8017b58 <_gettimeofday+0xc>)
 8017b4e:	2258      	movs	r2, #88	@ 0x58
 8017b50:	601a      	str	r2, [r3, #0]
 8017b52:	f04f 30ff 	mov.w	r0, #4294967295
 8017b56:	4770      	bx	lr
 8017b58:	20008eb8 	.word	0x20008eb8

08017b5c <_init>:
 8017b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b5e:	bf00      	nop
 8017b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b62:	bc08      	pop	{r3}
 8017b64:	469e      	mov	lr, r3
 8017b66:	4770      	bx	lr

08017b68 <_fini>:
 8017b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b6a:	bf00      	nop
 8017b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b6e:	bc08      	pop	{r3}
 8017b70:	469e      	mov	lr, r3
 8017b72:	4770      	bx	lr
