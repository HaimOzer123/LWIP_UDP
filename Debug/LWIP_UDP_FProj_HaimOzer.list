
LWIP_UDP_FProj_HaimOzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001448c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003078  0801465c  0801465c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176d4  080176d4  000191c8  2**0
                  CONTENTS
  4 .ARM          00000008  080176d4  080176d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176dc  080176dc  000191c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176dc  080176dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080176e0  080176e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080176e4  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0801776c  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0801780c  00019128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008b8c  200001c8  080178ac  000191c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008d54  080178ac  00019d54  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000191c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002db9b  00000000  00000000  000191f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000759e  00000000  00000000  00046d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002238  00000000  00000000  0004e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b13  00000000  00000000  00050570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037ee8  00000000  00000000  00052083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003b575  00000000  00000000  00089f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001138f4  00000000  00000000  000c54e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d8dd4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000096f0  00000000  00000000  001d8e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  001e2508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014644 	.word	0x08014644

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08014644 	.word	0x08014644

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 f8ee 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f81a 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fa7e 	bl	8000abc <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 fa56 	bl	8000a70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f9f6 	bl	80009b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 fa24 	bl	8000a14 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005cc:	f007 fd74 	bl	80080b8 <MX_LWIP_Init>
  MX_UART5_Init();
 80005d0:	f000 f990 	bl	80008f4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f9be 	bl	8000954 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d8:	f000 f872 	bl	80006c0 <MX_ADC1_Init>
  MX_DAC_Init();
 80005dc:	f000 f8c2 	bl	8000764 <MX_DAC_Init>
  MX_TIM2_Init();
 80005e0:	f000 f8ea 	bl	80007b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e4:	f000 f936 	bl	8000854 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rtg_main();
 80005e8:	f012 fa94 	bl	8012b14 <rtg_main>
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x3c>

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f013 f9c8 	bl	8013994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000614:	f004 f906 	bl	8004824 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <SystemClock_Config+0xc8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a26      	ldr	r2, [pc, #152]	@ (80006b8 <SystemClock_Config+0xc8>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <SystemClock_Config+0xc8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000638:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <SystemClock_Config+0xcc>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000650:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000664:	2348      	movs	r3, #72	@ 0x48
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800066c:	2303      	movs	r3, #3
 800066e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f004 f8e5 	bl	8004844 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 face 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 fb73 	bl	8004d8c <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ac:	f000 fab8 	bl	8000c20 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fe:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <MX_ADC1_Init+0xa0>)
 8000702:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000720:	f001 f8ba 	bl	8001898 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 fa79 	bl	8000c20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_ADC1_Init+0x98>)
 8000740:	f001 fbb6 	bl	8001eb0 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800074a:	f000 fa69 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001e4 	.word	0x200001e4
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_DAC_Init+0x4c>)
 8000774:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <MX_DAC_Init+0x50>)
 8000776:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000778:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <MX_DAC_Init+0x4c>)
 800077a:	f001 ff04 	bl	8002586 <HAL_DAC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000784:	f000 fa4c 	bl	8000c20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_DAC_Init+0x4c>)
 8000798:	f001 ff7b 	bl	8002692 <HAL_DAC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007a2:	f000 fa3d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000022c 	.word	0x2000022c
 80007b4:	40007400 	.word	0x40007400

080007b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600;
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007e0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80007e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_TIM2_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000800:	4813      	ldr	r0, [pc, #76]	@ (8000850 <MX_TIM2_Init+0x98>)
 8000802:	f005 f8d9 	bl	80059b8 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800080c:	f000 fa08 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	@ (8000850 <MX_TIM2_Init+0x98>)
 800081e:	f005 fae9 	bl	8005df4 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000828:	f000 f9fa 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_TIM2_Init+0x98>)
 800083a:	f005 fd07 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000844:	f000 f9ec 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000240 	.word	0x20000240

08000854 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_TIM3_Init+0x98>)
 8000874:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <MX_TIM3_Init+0x9c>)
 8000876:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_TIM3_Init+0x98>)
 800087a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800087e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_TIM3_Init+0x98>)
 8000882:	2210      	movs	r2, #16
 8000884:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_TIM3_Init+0x98>)
 8000888:	f242 720f 	movw	r2, #9999	@ 0x270f
 800088c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_TIM3_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_TIM3_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800089a:	4814      	ldr	r0, [pc, #80]	@ (80008ec <MX_TIM3_Init+0x98>)
 800089c:	f005 f88c 	bl	80059b8 <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008a6:	f000 f9bb 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	@ (80008ec <MX_TIM3_Init+0x98>)
 80008b8:	f005 fa9c 	bl	8005df4 <HAL_TIM_ConfigClockSource>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008c2:	f000 f9ad 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	@ (80008ec <MX_TIM3_Init+0x98>)
 80008d4:	f005 fcba 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008de:	f000 f99f 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000028c 	.word	0x2000028c
 80008f0:	40000400 	.word	0x40000400

080008f4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_UART5_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_UART5_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_UART5_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_UART5_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_UART5_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_UART5_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_UART5_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_UART5_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_UART5_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_UART5_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_UART5_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_UART5_Init+0x58>)
 8000938:	f005 fd34 	bl	80063a4 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f96d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200002d8 	.word	0x200002d8
 8000950:	40005000 	.word	0x40005000

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800095a:	4a15      	ldr	r2, [pc, #84]	@ (80009b0 <MX_USART2_UART_Init+0x5c>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000998:	f005 fd04 	bl	80063a4 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f93d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000360 	.word	0x20000360
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <MX_USART3_UART_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009f8:	f005 fcd4 	bl	80063a4 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a02:	f000 f90d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200003e8 	.word	0x200003e8
 8000a10:	40004800 	.word	0x40004800

08000a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2206      	movs	r2, #6
 8000a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	f003 fd9b 	bl	8004592 <HAL_PCD_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8dd 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000530 	.word	0x20000530

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <MX_DMA_Init+0x48>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab8 <MX_DMA_Init+0x48>)
 8000a7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <MX_DMA_Init+0x48>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	200b      	movs	r0, #11
 8000a94:	f001 fd41 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f001 fd5a 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2010      	movs	r0, #16
 8000aa4:	f001 fd39 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000aa8:	2010      	movs	r0, #16
 8000aaa:	f001 fd52 	bl	8002552 <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	@ 0x30
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b4c      	ldr	r3, [pc, #304]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	4b49      	ldr	r3, [pc, #292]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a48      	ldr	r2, [pc, #288]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b46      	ldr	r3, [pc, #280]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b43      	ldr	r3, [pc, #268]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a42      	ldr	r2, [pc, #264]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b40      	ldr	r3, [pc, #256]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b3a      	ldr	r3, [pc, #232]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b37      	ldr	r3, [pc, #220]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a36      	ldr	r2, [pc, #216]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b34      	ldr	r3, [pc, #208]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4a:	4b31      	ldr	r3, [pc, #196]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a30      	ldr	r2, [pc, #192]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <MX_GPIO_Init+0x154>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b68:	482a      	ldr	r0, [pc, #168]	@ (8000c14 <MX_GPIO_Init+0x158>)
 8000b6a:	f003 fcf9 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2140      	movs	r1, #64	@ 0x40
 8000b72:	4829      	ldr	r0, [pc, #164]	@ (8000c18 <MX_GPIO_Init+0x15c>)
 8000b74:	f003 fcf4 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4823      	ldr	r0, [pc, #140]	@ (8000c1c <MX_GPIO_Init+0x160>)
 8000b90:	f003 fb3a 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b94:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4819      	ldr	r0, [pc, #100]	@ (8000c14 <MX_GPIO_Init+0x158>)
 8000bae:	f003 fb2b 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bb2:	2340      	movs	r3, #64	@ 0x40
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4813      	ldr	r0, [pc, #76]	@ (8000c18 <MX_GPIO_Init+0x15c>)
 8000bca:	f003 fb1d 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_GPIO_Init+0x15c>)
 8000be2:	f003 fb11 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_GPIO_Init+0x160>)
 8000c04:	f003 fb00 	bl	8004208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	@ 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40021800 	.word	0x40021800
 8000c1c:	40020800 	.word	0x40020800

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x44>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	@ (8000cf8 <HAL_ADC_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12b      	bne.n	8000cee <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <HAL_ADC_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <HAL_ADC_MspInit+0x88>)
 8000c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_ADC_MspInit+0x88>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <HAL_ADC_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <HAL_ADC_MspInit+0x88>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_ADC_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <HAL_ADC_MspInit+0x8c>)
 8000cda:	f003 fa95 	bl	8004208 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2012      	movs	r0, #18
 8000ce4:	f001 fc19 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ce8:	2012      	movs	r0, #18
 8000cea:	f001 fc32 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	@ 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <HAL_DAC_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12b      	bne.n	8000d7e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_DAC_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <HAL_DAC_MspInit+0x88>)
 8000d2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_DAC_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_DAC_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <HAL_DAC_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <HAL_DAC_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d56:	2310      	movs	r3, #16
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <HAL_DAC_MspInit+0x8c>)
 8000d6a:	f003 fa4d 	bl	8004208 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2036      	movs	r0, #54	@ 0x36
 8000d74:	f001 fbd1 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d78:	2036      	movs	r0, #54	@ 0x36
 8000d7a:	f001 fbea 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40007400 	.word	0x40007400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000da4:	d114      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	201c      	movs	r0, #28
 8000dc4:	f001 fba9 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dc8:	201c      	movs	r0, #28
 8000dca:	f001 fbc2 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dce:	e018      	b.n	8000e02 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d113      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a0b      	ldr	r2, [pc, #44]	@ (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	201d      	movs	r0, #29
 8000df8:	f001 fb8f 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dfc:	201d      	movs	r0, #29
 8000dfe:	f001 fba8 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40000400 	.word	0x40000400

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0b0      	sub	sp, #192	@ 0xc0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e30:	2284      	movs	r2, #132	@ 0x84
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f012 fdad 	bl	8013994 <memset>
  if(huart->Instance==UART5)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4aad      	ldr	r2, [pc, #692]	@ (80010f4 <HAL_UART_MspInit+0x2e0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	f040 8097 	bne.w	8000f74 <HAL_UART_MspInit+0x160>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 f9bf 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000e60:	f7ff fede 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e64:	4ba4      	ldr	r3, [pc, #656]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	4aa3      	ldr	r2, [pc, #652]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e70:	4ba1      	ldr	r3, [pc, #644]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b9e      	ldr	r3, [pc, #632]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	4a9d      	ldr	r2, [pc, #628]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e88:	4b9b      	ldr	r3, [pc, #620]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	623b      	str	r3, [r7, #32]
 8000e92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b98      	ldr	r3, [pc, #608]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	4a97      	ldr	r2, [pc, #604]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea0:	4b95      	ldr	r3, [pc, #596]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	488a      	ldr	r0, [pc, #552]	@ (80010fc <HAL_UART_MspInit+0x2e8>)
 8000ed4:	f003 f998 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000efa:	4619      	mov	r1, r3
 8000efc:	4880      	ldr	r0, [pc, #512]	@ (8001100 <HAL_UART_MspInit+0x2ec>)
 8000efe:	f003 f983 	bl	8004208 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000f02:	4b80      	ldr	r3, [pc, #512]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f04:	4a80      	ldr	r2, [pc, #512]	@ (8001108 <HAL_UART_MspInit+0x2f4>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000f08:	4b7e      	ldr	r3, [pc, #504]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f10:	4b7c      	ldr	r3, [pc, #496]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b7b      	ldr	r3, [pc, #492]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b79      	ldr	r3, [pc, #484]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f24:	4b77      	ldr	r3, [pc, #476]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f2a:	4b76      	ldr	r3, [pc, #472]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000f30:	4b74      	ldr	r3, [pc, #464]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f36:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f38:	4b72      	ldr	r3, [pc, #456]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f3e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f40:	4b70      	ldr	r3, [pc, #448]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000f46:	486f      	ldr	r0, [pc, #444]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f48:	f001 fbfc 	bl	8002744 <HAL_DMA_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000f52:	f7ff fe65 	bl	8000c20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f5a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f5c:	4a69      	ldr	r2, [pc, #420]	@ (8001104 <HAL_UART_MspInit+0x2f0>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2035      	movs	r0, #53	@ 0x35
 8000f68:	f001 fad7 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f6c:	2035      	movs	r0, #53	@ 0x35
 8000f6e:	f001 faf0 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f72:	e0ba      	b.n	80010ea <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a64      	ldr	r2, [pc, #400]	@ (800110c <HAL_UART_MspInit+0x2f8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d173      	bne.n	8001066 <HAL_UART_MspInit+0x252>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 f924 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_UART_MspInit+0x186>
      Error_Handler();
 8000f96:	f7ff fe43 	bl	8000c20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9a:	4b57      	ldr	r3, [pc, #348]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a56      	ldr	r2, [pc, #344]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b54      	ldr	r3, [pc, #336]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	4b51      	ldr	r3, [pc, #324]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a50      	ldr	r2, [pc, #320]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fca:	2360      	movs	r3, #96	@ 0x60
 8000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fec:	4619      	mov	r1, r3
 8000fee:	4844      	ldr	r0, [pc, #272]	@ (8001100 <HAL_UART_MspInit+0x2ec>)
 8000ff0:	f003 f90a 	bl	8004208 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ff4:	4b46      	ldr	r3, [pc, #280]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8000ff6:	4a47      	ldr	r2, [pc, #284]	@ (8001114 <HAL_UART_MspInit+0x300>)
 8000ff8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ffa:	4b45      	ldr	r3, [pc, #276]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8000ffc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001000:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001002:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001008:	4b41      	ldr	r3, [pc, #260]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800100e:	4b40      	ldr	r3, [pc, #256]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8001010:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001014:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001016:	4b3e      	ldr	r3, [pc, #248]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800101c:	4b3c      	ldr	r3, [pc, #240]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001022:	4b3b      	ldr	r3, [pc, #236]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8001024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001028:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800102a:	4b39      	ldr	r3, [pc, #228]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 800102c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001030:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001032:	4b37      	ldr	r3, [pc, #220]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001038:	4835      	ldr	r0, [pc, #212]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 800103a:	f001 fb83 	bl	8002744 <HAL_DMA_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8001044:	f7ff fdec 	bl	8000c20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a31      	ldr	r2, [pc, #196]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 800104c:	675a      	str	r2, [r3, #116]	@ 0x74
 800104e:	4a30      	ldr	r2, [pc, #192]	@ (8001110 <HAL_UART_MspInit+0x2fc>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2026      	movs	r0, #38	@ 0x26
 800105a:	f001 fa5e 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105e:	2026      	movs	r0, #38	@ 0x26
 8001060:	f001 fa77 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8001064:	e041      	b.n	80010ea <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2b      	ldr	r2, [pc, #172]	@ (8001118 <HAL_UART_MspInit+0x304>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d13c      	bne.n	80010ea <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001070:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001076:	2300      	movs	r3, #0
 8001078:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107e:	4618      	mov	r0, r3
 8001080:	f004 f8aa 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_UART_MspInit+0x27a>
      Error_Handler();
 800108a:	f7ff fdc9 	bl	8000c20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a19      	ldr	r2, [pc, #100]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_UART_MspInit+0x2e4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d8:	2307      	movs	r3, #7
 80010da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010de:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010e2:	4619      	mov	r1, r3
 80010e4:	4806      	ldr	r0, [pc, #24]	@ (8001100 <HAL_UART_MspInit+0x2ec>)
 80010e6:	f003 f88f 	bl	8004208 <HAL_GPIO_Init>
}
 80010ea:	bf00      	nop
 80010ec:	37c0      	adds	r7, #192	@ 0xc0
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40005000 	.word	0x40005000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	20000470 	.word	0x20000470
 8001108:	40026010 	.word	0x40026010
 800110c:	40004400 	.word	0x40004400
 8001110:	200004d0 	.word	0x200004d0
 8001114:	40026088 	.word	0x40026088
 8001118:	40004800 	.word	0x40004800

0800111c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0ac      	sub	sp, #176	@ 0xb0
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	2284      	movs	r2, #132	@ 0x84
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f012 fc29 	bl	8013994 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800114a:	d159      	bne.n	8001200 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800114c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001150:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	4618      	mov	r0, r3
 800115e:	f004 f83b 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001168:	f7ff fd5a 	bl	8000c20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6313      	str	r3, [r2, #48]	@ 0x30
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001184:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001188:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800119e:	230a      	movs	r3, #10
 80011a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011a8:	4619      	mov	r1, r3
 80011aa:	4818      	ldr	r0, [pc, #96]	@ (800120c <HAL_PCD_MspInit+0xf0>)
 80011ac:	f003 f82c 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4810      	ldr	r0, [pc, #64]	@ (800120c <HAL_PCD_MspInit+0xf0>)
 80011cc:	f003 f81c 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 80011d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 80011d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011da:	6353      	str	r3, [r2, #52]	@ 0x34
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 80011de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <HAL_PCD_MspInit+0xec>)
 80011f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	37b0      	adds	r7, #176	@ 0xb0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <NMI_Handler+0x4>

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <UsageFault_Handler+0x4>

08001238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 fad3 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <DMA1_Stream0_IRQHandler+0x10>)
 8001276:	f001 fba5 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000470 	.word	0x20000470

08001284 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <DMA1_Stream5_IRQHandler+0x10>)
 800128a:	f001 fb9b 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200004d0 	.word	0x200004d0

08001298 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <ADC_IRQHandler+0x10>)
 800129e:	f000 fccc 	bl	8001c3a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001e4 	.word	0x200001e4

080012ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <TIM2_IRQHandler+0x10>)
 80012b2:	f004 fc80 	bl	8005bb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000240 	.word	0x20000240

080012c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <TIM3_IRQHandler+0x10>)
 80012c6:	f004 fc76 	bl	8005bb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000028c 	.word	0x2000028c

080012d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <USART2_IRQHandler+0x10>)
 80012da:	f005 fa3d 	bl	8006758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000360 	.word	0x20000360

080012e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <UART5_IRQHandler+0x10>)
 80012ee:	f005 fa33 	bl	8006758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002d8 	.word	0x200002d8

080012fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <TIM6_DAC_IRQHandler+0x10>)
 8001302:	f001 f962 	bl	80025ca <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000022c 	.word	0x2000022c

08001310 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <ETH_IRQHandler+0x10>)
 8001316:	f002 f891 	bl	800343c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20005418 	.word	0x20005418

08001324 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <ETH_WKUP_IRQHandler+0x10>)
 800132a:	f002 f887 	bl	800343c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20005418 	.word	0x20005418

08001338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_kill>:

int _kill(int pid, int sig)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <_kill+0x20>)
 8001354:	2216      	movs	r2, #22
 8001356:	601a      	str	r2, [r3, #0]
  return -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	20008d44 	.word	0x20008d44

0800136c <_exit>:

void _exit (int status)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe5 	bl	8001348 <_kill>
  while (1) {}    /* Make sure we hang here */
 800137e:	bf00      	nop
 8001380:	e7fd      	b.n	800137e <_exit+0x12>

08001382 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013aa:	605a      	str	r2, [r3, #4]
  return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_isatty>:

int _isatty(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d205      	bcs.n	8001428 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <_sbrk+0x6c>)
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	20050000 	.word	0x20050000
 800144c:	00000400 	.word	0x00000400
 8001450:	20000a38 	.word	0x20000a38
 8001454:	20008d58 	.word	0x20008d58
 8001458:	20008d44 	.word	0x20008d44

0800145c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480d      	ldr	r0, [pc, #52]	@ (80014bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001486:	490e      	ldr	r1, [pc, #56]	@ (80014c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001488:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800149c:	4c0b      	ldr	r4, [pc, #44]	@ (80014cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014aa:	f7ff ffd7 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f012 faff 	bl	8013ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff f87d 	bl	80005b0 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80014c4:	080176e4 	.word	0x080176e4
  ldr r2, =_sbss
 80014c8:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80014cc:	20008d54 	.word	0x20008d54

080014d0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <CAN1_RX0_IRQHandler>

080014d2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <LAN8742_RegisterBusIO+0x28>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <LAN8742_RegisterBusIO+0x28>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <LAN8742_RegisterBusIO+0x28>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e014      	b.n	800152a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d17c      	bne.n	8001650 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2220      	movs	r2, #32
 8001568:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e01c      	b.n	80015aa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f107 0208 	add.w	r2, r7, #8
 8001578:	2112      	movs	r1, #18
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	4798      	blx	r3
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	da03      	bge.n	800158c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001584:	f06f 0304 	mvn.w	r3, #4
 8001588:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800158a:	e00b      	b.n	80015a4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	429a      	cmp	r2, r3
 8001596:	d105      	bne.n	80015a4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
         break;
 80015a2:	e005      	b.n	80015b0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b1f      	cmp	r3, #31
 80015ae:	d9df      	bls.n	8001570 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b1f      	cmp	r3, #31
 80015b6:	d902      	bls.n	80015be <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015b8:	f06f 0302 	mvn.w	r3, #2
 80015bc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d145      	bne.n	8001650 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6810      	ldr	r0, [r2, #0]
 80015cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015d0:	2100      	movs	r1, #0
 80015d2:	4798      	blx	r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db37      	blt.n	800164a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6810      	ldr	r0, [r2, #0]
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	2100      	movs	r1, #0
 80015e8:	4798      	blx	r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db28      	blt.n	8001642 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4798      	blx	r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80015fa:	e01c      	b.n	8001636 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4798      	blx	r3
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800160e:	d80e      	bhi.n	800162e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6810      	ldr	r0, [r2, #0]
 8001618:	f107 0208 	add.w	r2, r7, #8
 800161c:	2100      	movs	r1, #0
 800161e:	4798      	blx	r3
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	da07      	bge.n	8001636 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001626:	f06f 0304 	mvn.w	r3, #4
 800162a:	613b      	str	r3, [r7, #16]
                 break;
 800162c:	e010      	b.n	8001650 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800162e:	f06f 0301 	mvn.w	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
               break;
 8001634:	e00c      	b.n	8001650 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1dd      	bne.n	80015fc <LAN8742_Init+0xc6>
 8001640:	e006      	b.n	8001650 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001642:	f06f 0304 	mvn.w	r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	e002      	b.n	8001650 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800164a:	f06f 0303 	mvn.w	r3, #3
 800164e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d112      	bne.n	800167c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4798      	blx	r3
 800165c:	4603      	mov	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001660:	bf00      	nop
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	4798      	blx	r3
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001674:	d9f5      	bls.n	8001662 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800167c:	693b      	ldr	r3, [r7, #16]
 }
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6810      	ldr	r0, [r2, #0]
 800169a:	f107 020c 	add.w	r2, r7, #12
 800169e:	2101      	movs	r1, #1
 80016a0:	4798      	blx	r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da02      	bge.n	80016ae <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016a8:	f06f 0304 	mvn.w	r3, #4
 80016ac:	e06e      	b.n	800178c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6810      	ldr	r0, [r2, #0]
 80016b6:	f107 020c 	add.w	r2, r7, #12
 80016ba:	2101      	movs	r1, #1
 80016bc:	4798      	blx	r3
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	da02      	bge.n	80016ca <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016c4:	f06f 0304 	mvn.w	r3, #4
 80016c8:	e060      	b.n	800178c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80016d4:	2301      	movs	r3, #1
 80016d6:	e059      	b.n	800178c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6810      	ldr	r0, [r2, #0]
 80016e0:	f107 020c 	add.w	r2, r7, #12
 80016e4:	2100      	movs	r1, #0
 80016e6:	4798      	blx	r3
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da02      	bge.n	80016f4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016ee:	f06f 0304 	mvn.w	r3, #4
 80016f2:	e04b      	b.n	800178c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11b      	bne.n	8001736 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <LAN8742_GetLinkState+0x90>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001712:	2302      	movs	r3, #2
 8001714:	e03a      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001720:	2303      	movs	r3, #3
 8001722:	e033      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800172e:	2304      	movs	r3, #4
 8001730:	e02c      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001732:	2305      	movs	r3, #5
 8001734:	e02a      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6810      	ldr	r0, [r2, #0]
 800173e:	f107 020c 	add.w	r2, r7, #12
 8001742:	211f      	movs	r1, #31
 8001744:	4798      	blx	r3
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	da02      	bge.n	8001752 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800174c:	f06f 0304 	mvn.w	r3, #4
 8001750:	e01c      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800175c:	2306      	movs	r3, #6
 800175e:	e015      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 031c 	and.w	r3, r3, #28
 8001766:	2b18      	cmp	r3, #24
 8001768:	d101      	bne.n	800176e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800176a:	2302      	movs	r3, #2
 800176c:	e00e      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 031c 	and.w	r3, r3, #28
 8001774:	2b08      	cmp	r3, #8
 8001776:	d101      	bne.n	800177c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001778:	2303      	movs	r3, #3
 800177a:	e007      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 031c 	and.w	r3, r3, #28
 8001782:	2b14      	cmp	r3, #20
 8001784:	d101      	bne.n	800178a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001786:	2304      	movs	r3, #4
 8001788:	e000      	b.n	800178c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800178a:	2305      	movs	r3, #5
    }				
  }
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 feb3 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f806 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fa42 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_InitTick+0x54>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_InitTick+0x58>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fecd 	bl	800256e <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 fe95 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_InitTick+0x5c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000000 	.word	0x20000000
 8001808:	20000008 	.word	0x20000008
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	20000a3c 	.word	0x20000a3c

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000a3c 	.word	0x20000a3c

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffde 	bl	8001838 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e031      	b.n	8001912 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff f9dc 	bl	8000c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_ADC_Init+0x84>)
 80018dc:	4013      	ands	r3, r2
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fc38 	bl	800215c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40
 8001902:	e001      	b.n	8001908 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	ffffeefd 	.word	0xffffeefd

08001920 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADC_Start+0x1a>
 8001936:	2302      	movs	r3, #2
 8001938:	e0ad      	b.n	8001a96 <HAL_ADC_Start+0x176>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d018      	beq.n	8001982 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001960:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <HAL_ADC_Start+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a50      	ldr	r2, [pc, #320]	@ (8001aa8 <HAL_ADC_Start+0x188>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9a      	lsrs	r2, r3, #18
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001974:	e002      	b.n	800197c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3b01      	subs	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d175      	bne.n	8001a7c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001994:	4b45      	ldr	r3, [pc, #276]	@ (8001aac <HAL_ADC_Start+0x18c>)
 8001996:	4013      	ands	r3, r2
 8001998:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019ca:	d106      	bne.n	80019da <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f023 0206 	bic.w	r2, r3, #6
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80019f2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab0 <HAL_ADC_Start+0x190>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d143      	bne.n	8001a94 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	e03a      	b.n	8001a94 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <HAL_ADC_Start+0x194>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d10e      	bne.n	8001a46 <HAL_ADC_Start+0x126>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a44:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_ADC_Start+0x190>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d120      	bne.n	8001a94 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <HAL_ADC_Start+0x198>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d11b      	bne.n	8001a94 <HAL_ADC_Start+0x174>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d114      	bne.n	8001a94 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	e00b      	b.n	8001a94 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f043 0210 	orr.w	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83
 8001aac:	fffff8fe 	.word	0xfffff8fe
 8001ab0:	40012300 	.word	0x40012300
 8001ab4:	40012000 	.word	0x40012000
 8001ab8:	40012200 	.word	0x40012200

08001abc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Stop+0x16>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e01f      	b.n	8001b12 <HAL_ADC_Stop+0x56>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_ADC_Stop+0x64>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	ffffeefe 	.word	0xffffeefe

08001b24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b40:	d113      	bne.n	8001b6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b50:	d10b      	bne.n	8001b6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f043 0220 	orr.w	r2, r3, #32
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e063      	b.n	8001c32 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b6a:	f7ff fe65 	bl	8001838 <HAL_GetTick>
 8001b6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b70:	e021      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d01d      	beq.n	8001bb6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_ADC_PollForConversion+0x6c>
 8001b80:	f7ff fe5a 	bl	8001838 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d212      	bcs.n	8001bb6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f043 0204 	orr.w	r2, r3, #4
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e03d      	b.n	8001c32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d1d6      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0212 	mvn.w	r2, #18
 8001bcc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d123      	bne.n	8001c30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11f      	bne.n	8001c30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d111      	bne.n	8001c30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d049      	beq.n	8001d04 <HAL_ADC_IRQHandler+0xca>
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d046      	beq.n	8001d04 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d105      	bne.n	8001c8e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d12b      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d127      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d119      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0220 	bic.w	r2, r2, #32
 8001cce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8bd 	bl	8001e74 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f06f 0212 	mvn.w	r2, #18
 8001d02:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d057      	beq.n	8001dca <HAL_ADC_IRQHandler+0x190>
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d054      	beq.n	8001dca <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d139      	bne.n	8001dba <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d12b      	bne.n	8001dba <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d124      	bne.n	8001dba <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11d      	bne.n	8001dba <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d119      	bne.n	8001dba <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d94:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fac8 	bl	8002350 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 020c 	mvn.w	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d017      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x1d6>
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d014      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10d      	bne.n	8001e10 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f841 	bl	8001e88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0201 	mvn.w	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e1e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x218>
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d012      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	f043 0202 	orr.w	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0220 	mvn.w	r2, #32
 8001e40:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f82a 	bl	8001e9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0220 	mvn.w	r2, #32
 8001e50:	601a      	str	r2, [r3, #0]
  }
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1c>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e136      	b.n	800213a <HAL_ADC_ConfigChannel+0x28a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	d93a      	bls.n	8001f52 <HAL_ADC_ConfigChannel+0xa2>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ee4:	d035      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68d9      	ldr	r1, [r3, #12]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	2207      	movs	r2, #7
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	400a      	ands	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a8d      	ldr	r2, [pc, #564]	@ (8002148 <HAL_ADC_ConfigChannel+0x298>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68d9      	ldr	r1, [r3, #12]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2a:	e035      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4403      	add	r3, r0
 8001f44:	3b1e      	subs	r3, #30
 8001f46:	409a      	lsls	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f50:	e022      	b.n	8001f98 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	400a      	ands	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6919      	ldr	r1, [r3, #16]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4403      	add	r3, r0
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b06      	cmp	r3, #6
 8001f9e:	d824      	bhi.n	8001fea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b05      	subs	r3, #5
 8001fb2:	221f      	movs	r2, #31
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b05      	subs	r3, #5
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fe8:	e04c      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d824      	bhi.n	800203c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b23      	subs	r3, #35	@ 0x23
 8002004:	221f      	movs	r2, #31
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	400a      	ands	r2, r1
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b23      	subs	r3, #35	@ 0x23
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
 800203a:	e023      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b41      	subs	r3, #65	@ 0x41
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43da      	mvns	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	400a      	ands	r2, r1
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b41      	subs	r3, #65	@ 0x41
 8002078:	fa00 f203 	lsl.w	r2, r0, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a30      	ldr	r2, [pc, #192]	@ (800214c <HAL_ADC_ConfigChannel+0x29c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1f4>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a2c      	ldr	r2, [pc, #176]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 800209e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a28      	ldr	r2, [pc, #160]	@ (800214c <HAL_ADC_ConfigChannel+0x29c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10f      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d10b      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80020b6:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a25      	ldr	r2, [pc, #148]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_ADC_ConfigChannel+0x29c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12b      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002148 <HAL_ADC_ConfigChannel+0x298>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x23a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d122      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80020f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020f6:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <HAL_ADC_ConfigChannel+0x2a0>)
 80020fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002100:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a10      	ldr	r2, [pc, #64]	@ (8002148 <HAL_ADC_ConfigChannel+0x298>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_ADC_ConfigChannel+0x2a4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a11      	ldr	r2, [pc, #68]	@ (8002158 <HAL_ADC_ConfigChannel+0x2a8>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9a      	lsrs	r2, r3, #18
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002122:	e002      	b.n	800212a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	10000012 	.word	0x10000012
 800214c:	40012000 	.word	0x40012000
 8002150:	40012300 	.word	0x40012300
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002164:	4b78      	ldr	r3, [pc, #480]	@ (8002348 <ADC_Init+0x1ec>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a77      	ldr	r2, [pc, #476]	@ (8002348 <ADC_Init+0x1ec>)
 800216a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800216e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002170:	4b75      	ldr	r3, [pc, #468]	@ (8002348 <ADC_Init+0x1ec>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4973      	ldr	r1, [pc, #460]	@ (8002348 <ADC_Init+0x1ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800218c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ea:	4a58      	ldr	r2, [pc, #352]	@ (800234c <ADC_Init+0x1f0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6899      	ldr	r1, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e00f      	b.n	8002256 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0202 	bic.w	r2, r2, #2
 8002264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	005a      	lsls	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	035a      	lsls	r2, r3, #13
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e007      	b.n	80022cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	051a      	lsls	r2, r3, #20
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800230e:	025a      	lsls	r2, r3, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	029a      	lsls	r2, r3, #10
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40012300 	.word	0x40012300
 800234c:	0f000001 	.word	0x0f000001

08002350 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	4313      	orrs	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	05fa0000 	.word	0x05fa0000

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	@ (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	@ (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	@ (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e014      	b.n	80025c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	791b      	ldrb	r3, [r3, #4]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fe fbab 	bl	8000d04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e0:	d120      	bne.n	8002624 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f0:	d118      	bne.n	8002624 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800261c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f82d 	bl	800267e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800262e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002632:	d120      	bne.n	8002676 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800263e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002642:	d118      	bne.n	8002676 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2204      	movs	r2, #4
 8002648:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800265e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800266e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f85d 	bl	8002730 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002692:	b480      	push	{r7}
 8002694:	b087      	sub	sp, #28
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	795b      	ldrb	r3, [r3, #5]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_DAC_ConfigChannel+0x18>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e03c      	b.n	8002724 <HAL_DAC_ConfigChannel+0x92>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2202      	movs	r2, #2
 80026b4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4013      	ands	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	22c0      	movs	r2, #192	@ 0xc0
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff f872 	bl	8001838 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e099      	b.n	8002894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002780:	e00f      	b.n	80027a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002782:	f7ff f859 	bl	8001838 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b05      	cmp	r3, #5
 800278e:	d908      	bls.n	80027a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e078      	b.n	8002894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e8      	bne.n	8002782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4b38      	ldr	r3, [pc, #224]	@ (800289c <HAL_DMA_Init+0x158>)
 80027bc:	4013      	ands	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d107      	bne.n	800280c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	4313      	orrs	r3, r2
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	2b04      	cmp	r3, #4
 8002834:	d117      	bne.n	8002866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fa7b 	bl	8002d44 <DMA_CheckFifoParam>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2240      	movs	r2, #64	@ 0x40
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002862:	2301      	movs	r3, #1
 8002864:	e016      	b.n	8002894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa32 	bl	8002cd8 <DMA_CalcBaseAndBitshift>
 8002874:	4603      	mov	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	223f      	movs	r2, #63	@ 0x3f
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	f010803f 	.word	0xf010803f

080028a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028ae:	f7fe ffc3 	bl	8001838 <HAL_GetTick>
 80028b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d008      	beq.n	80028d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e052      	b.n	8002978 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0216 	bic.w	r2, r2, #22
 80028e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <HAL_DMA_Abort+0x62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0208 	bic.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002922:	e013      	b.n	800294c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002924:	f7fe ff88 	bl	8001838 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b05      	cmp	r3, #5
 8002930:	d90c      	bls.n	800294c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2203      	movs	r2, #3
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e015      	b.n	8002978 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e4      	bne.n	8002924 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	223f      	movs	r2, #63	@ 0x3f
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d004      	beq.n	800299e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2280      	movs	r2, #128	@ 0x80
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e00c      	b.n	80029b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2205      	movs	r2, #5
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029d0:	4b8e      	ldr	r3, [pc, #568]	@ (8002c0c <HAL_DMA_IRQHandler+0x248>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002c10 <HAL_DMA_IRQHandler+0x24c>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	2208      	movs	r2, #8
 80029f0:	409a      	lsls	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01a      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0204 	bic.w	r2, r2, #4
 8002a16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	2201      	movs	r2, #1
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d012      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	2201      	movs	r2, #1
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	2204      	movs	r2, #4
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a94:	f043 0204 	orr.w	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d043      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03c      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	2210      	movs	r2, #16
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d018      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d024      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
 8002af2:	e01f      	b.n	8002b34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
 8002b04:	e016      	b.n	8002b34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0208 	bic.w	r2, r2, #8
 8002b22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b38:	2220      	movs	r2, #32
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 808f 	beq.w	8002c64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8087 	beq.w	8002c64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d136      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0216 	bic.w	r2, r2, #22
 8002b7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x1da>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0208 	bic.w	r2, r2, #8
 8002bac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	223f      	movs	r2, #63	@ 0x3f
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d07e      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
        }
        return;
 8002bda:	e079      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01d      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10d      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d031      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
 8002c08:	e02c      	b.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d023      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
 8002c24:	e01e      	b.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0210 	bic.w	r2, r2, #16
 8002c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d032      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d307      	bcc.n	8002cac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f2      	bne.n	8002c90 <HAL_DMA_IRQHandler+0x2cc>
 8002caa:	e000      	b.n	8002cae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
 8002cce:	e000      	b.n	8002cd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cd0:	bf00      	nop
    }
  }
}
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	3b10      	subs	r3, #16
 8002ce8:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <DMA_CalcBaseAndBitshift+0x60>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cf2:	4a12      	ldr	r2, [pc, #72]	@ (8002d3c <DMA_CalcBaseAndBitshift+0x64>)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d908      	bls.n	8002d18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <DMA_CalcBaseAndBitshift+0x68>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	1d1a      	adds	r2, r3, #4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d16:	e006      	b.n	8002d26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <DMA_CalcBaseAndBitshift+0x68>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	aaaaaaab 	.word	0xaaaaaaab
 8002d3c:	080174e8 	.word	0x080174e8
 8002d40:	fffffc00 	.word	0xfffffc00

08002d44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11f      	bne.n	8002d9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d856      	bhi.n	8002e12 <DMA_CheckFifoParam+0xce>
 8002d64:	a201      	add	r2, pc, #4	@ (adr r2, 8002d6c <DMA_CheckFifoParam+0x28>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d8f 	.word	0x08002d8f
 8002d74:	08002d7d 	.word	0x08002d7d
 8002d78:	08002e13 	.word	0x08002e13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d046      	beq.n	8002e16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e043      	b.n	8002e16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d96:	d140      	bne.n	8002e1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e03d      	b.n	8002e1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	d121      	bne.n	8002dec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d837      	bhi.n	8002e1e <DMA_CheckFifoParam+0xda>
 8002dae:	a201      	add	r2, pc, #4	@ (adr r2, 8002db4 <DMA_CheckFifoParam+0x70>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dcb 	.word	0x08002dcb
 8002dbc:	08002dc5 	.word	0x08002dc5
 8002dc0:	08002ddd 	.word	0x08002ddd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e030      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d025      	beq.n	8002e22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dda:	e022      	b.n	8002e22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002de4:	d11f      	bne.n	8002e26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dea:	e01c      	b.n	8002e26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d903      	bls.n	8002dfa <DMA_CheckFifoParam+0xb6>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d003      	beq.n	8002e00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002df8:	e018      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfe:	e015      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e00b      	b.n	8002e2a <DMA_CheckFifoParam+0xe6>
      break;
 8002e12:	bf00      	nop
 8002e14:	e00a      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e008      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e006      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e004      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop

08002e3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06a      	b.n	8002f24 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2223      	movs	r2, #35	@ 0x23
 8002e5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f005 fc35 	bl	80086d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_ETH_Init+0xf0>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	4a30      	ldr	r2, [pc, #192]	@ (8002f2c <HAL_ETH_Init+0xf0>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e72:	4b2e      	ldr	r3, [pc, #184]	@ (8002f2c <HAL_ETH_Init+0xf0>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f30 <HAL_ETH_Init+0xf4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a2b      	ldr	r2, [pc, #172]	@ (8002f30 <HAL_ETH_Init+0xf4>)
 8002e84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e8a:	4b29      	ldr	r3, [pc, #164]	@ (8002f30 <HAL_ETH_Init+0xf4>)
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4927      	ldr	r1, [pc, #156]	@ (8002f30 <HAL_ETH_Init+0xf4>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e98:	4b25      	ldr	r3, [pc, #148]	@ (8002f30 <HAL_ETH_Init+0xf4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb4:	f7fe fcc0 	bl	8001838 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002eba:	e011      	b.n	8002ee0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ebc:	f7fe fcbc 	bl	8001838 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002eca:	d909      	bls.n	8002ee0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	22e0      	movs	r2, #224	@ 0xe0
 8002ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e021      	b.n	8002f24 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e4      	bne.n	8002ebc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fee4 	bl	8003cc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 ff8b 	bl	8003e14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 ffe1 	bl	8003ec6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 ff49 	bl	8003da4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800

08002f34 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d150      	bne.n	8002fe8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2223      	movs	r2, #35	@ 0x23
 8002f4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2204      	movs	r2, #4
 8002f52:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f9fd 	bl	8003354 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0208 	orr.w	r2, r2, #8
 8002f68:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7fe fc6c 	bl	8001850 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0204 	orr.w	r2, r2, #4
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7fe fc59 	bl	8001850 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fd2a 	bl	8003a00 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fc2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	f043 0302 	orr.w	r3, r3, #2
 8002fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fda:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2223      	movs	r2, #35	@ 0x23
 8002fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003000:	2b23      	cmp	r3, #35	@ 0x23
 8003002:	d14a      	bne.n	800309a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2223      	movs	r2, #35	@ 0x23
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800301e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003022:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	f023 0302 	bic.w	r3, r3, #2
 8003036:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800303a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003054:	2001      	movs	r0, #1
 8003056:	f7fe fbfb 	bl	8001850 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fccc 	bl	8003a00 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0208 	bic.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003080:	2001      	movs	r0, #1
 8003082:	f7fe fbe5 	bl	8001850 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2210      	movs	r2, #16
 8003092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07c      	b.n	80031c4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d0:	2b23      	cmp	r3, #35	@ 0x23
 80030d2:	d176      	bne.n	80031c2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80030d4:	2200      	movs	r2, #0
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 ff61 	bl	8003fa0 <ETH_Prepare_Tx_Descriptors>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e065      	b.n	80031c4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030f8:	f3bf 8f4f 	dsb	sy
}
 80030fc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3206      	adds	r2, #6
 8003106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	629a      	str	r2, [r3, #40]	@ 0x28
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	2b03      	cmp	r3, #3
 800311c:	d904      	bls.n	8003128 <HAL_ETH_Transmit+0x84>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	1f1a      	subs	r2, r3, #4
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3106      	adds	r1, #6
 8003134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003138:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800313c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800313e:	f7fe fb7b 	bl	8001838 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003144:	e037      	b.n	80031b6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d011      	beq.n	800317c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f043 0208 	orr.w	r2, r3, #8
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e023      	b.n	80031c4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d018      	beq.n	80031b6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003184:	f7fe fb58 	bl	8001838 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	429a      	cmp	r2, r3
 8003192:	d302      	bcc.n	800319a <HAL_ETH_Transmit+0xf6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	f043 0204 	orr.w	r2, r3, #4
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80031b0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e006      	b.n	80031c4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	dbc3      	blt.n	8003146 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0a8      	b.n	800334a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031fe:	2b23      	cmp	r3, #35	@ 0x23
 8003200:	d001      	beq.n	8003206 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0a1      	b.n	800334a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	3212      	adds	r2, #18
 8003212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003216:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321c:	f1c3 0304 	rsb	r3, r3, #4
 8003220:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003222:	e06a      	b.n	80032fa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <HAL_ETH_ReadData+0x88>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d040      	beq.n	80032d6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003288:	3b04      	subs	r3, #4
 800328a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80032b0:	461a      	mov	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f005 fbdd 	bl	8008a74 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	441a      	add	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2200      	movs	r2, #0
 80032d4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3301      	adds	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d902      	bls.n	80032e8 <HAL_ETH_ReadData+0x11c>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b04      	subs	r3, #4
 80032e6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	3212      	adds	r2, #18
 80032ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3301      	adds	r3, #1
 80032f8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db06      	blt.n	8003310 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d202      	bcs.n	8003310 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d089      	beq.n	8003224 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f815 	bl	8003354 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003360:	2301      	movs	r3, #1
 8003362:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003368:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	3212      	adds	r2, #18
 8003370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003374:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800337c:	e040      	b.n	8003400 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d112      	bne.n	80033ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003386:	f107 030c 	add.w	r3, r7, #12
 800338a:	4618      	mov	r0, r3
 800338c:	f005 fb42 	bl	8008a14 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	74fb      	strb	r3, [r7, #19]
 800339a:	e007      	b.n	80033ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	461a      	mov	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d026      	beq.n	8003400 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003438 <ETH_UpdateDescriptor+0xe4>)
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	e003      	b.n	80033ca <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80033c8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033ca:	f3bf 8f5f 	dmb	sy
}
 80033ce:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3301      	adds	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d902      	bls.n	80033ee <ETH_UpdateDescriptor+0x9a>
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3b04      	subs	r3, #4
 80033ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	3212      	adds	r2, #18
 80033f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <ETH_UpdateDescriptor+0xb8>
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1b8      	bne.n	800337e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	429a      	cmp	r2, r3
 8003414:	d00c      	beq.n	8003430 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341e:	461a      	mov	r2, r3
 8003420:	2300      	movs	r3, #0
 8003422:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	80004600 	.word	0x80004600

0800343c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d112      	bne.n	800347c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b40      	cmp	r3, #64	@ 0x40
 8003466:	d109      	bne.n	800347c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003470:	461a      	mov	r2, r3
 8003472:	4b50      	ldr	r3, [pc, #320]	@ (80035b4 <HAL_ETH_IRQHandler+0x178>)
 8003474:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8ac 	bl	80035d4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d113      	bne.n	80034b6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10a      	bne.n	80034b6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a8:	461a      	mov	r2, r3
 80034aa:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80034ae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f885 	bl	80035c0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c8:	d14c      	bne.n	8003564 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034dc:	d142      	bne.n	8003564 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f043 0208 	orr.w	r2, r3, #8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003500:	d11a      	bne.n	8003538 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	4b2a      	ldr	r3, [pc, #168]	@ (80035b8 <HAL_ETH_IRQHandler+0x17c>)
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003528:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800352c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	22e0      	movs	r2, #224	@ 0xe0
 8003532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003536:	e012      	b.n	800355e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003556:	461a      	mov	r2, r3
 8003558:	f248 6380 	movw	r3, #34432	@ 0x8680
 800355c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f842 	bl	80035e8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b08      	cmp	r3, #8
 8003570:	d10e      	bne.n	8003590 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f83a 	bl	80035fc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003590:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <HAL_ETH_IRQHandler+0x180>)
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800359c:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <HAL_ETH_IRQHandler+0x180>)
 800359e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80035a2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f833 	bl	8003610 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	00010040 	.word	0x00010040
 80035b8:	007e2000 	.word	0x007e2000
 80035bc:	40013c00 	.word	0x40013c00

080035c0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 031c 	and.w	r3, r3, #28
 8003640:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	02db      	lsls	r3, r3, #11
 8003646:	b29b      	uxth	r3, r3
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0302 	bic.w	r3, r3, #2
 8003662:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003674:	f7fe f8e0 	bl	8001838 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800367a:	e00d      	b.n	8003698 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800367c:	f7fe f8dc 	bl	8001838 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368a:	d301      	bcc.n	8003690 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e010      	b.n	80036b2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1ec      	bne.n	800367c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 031c 	and.w	r3, r3, #28
 80036d6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	02db      	lsls	r3, r3, #11
 80036dc:	b29b      	uxth	r3, r3
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	019b      	lsls	r3, r3, #6
 80036e8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003714:	f7fe f890 	bl	8001838 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800371a:	e00d      	b.n	8003738 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800371c:	f7fe f88c 	bl	8001838 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372a:	d301      	bcc.n	8003730 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e009      	b.n	8003744 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ec      	bne.n	800371c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0d9      	b.n	8003914 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e00b      	b.n	800394c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800393a:	2b10      	cmp	r3, #16
 800393c:	d105      	bne.n	800394a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f883 	bl	8003a4c <ETH_SetMACConfig>

    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
  }
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 031c 	bic.w	r3, r3, #28
 800396a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800396c:	f001 fc00 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 8003970:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_ETH_SetMDIOClockRange+0x98>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d908      	bls.n	800398c <HAL_ETH_SetMDIOClockRange+0x38>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a1c      	ldr	r2, [pc, #112]	@ (80039f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d804      	bhi.n	800398c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e027      	b.n	80039dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d908      	bls.n	80039a6 <HAL_ETH_SetMDIOClockRange+0x52>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d204      	bcs.n	80039a6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f043 030c 	orr.w	r3, r3, #12
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e01a      	b.n	80039dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4a12      	ldr	r2, [pc, #72]	@ (80039f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d303      	bcc.n	80039b6 <HAL_ETH_SetMDIOClockRange+0x62>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4a11      	ldr	r2, [pc, #68]	@ (80039f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d911      	bls.n	80039da <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4a0f      	ldr	r2, [pc, #60]	@ (80039f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d908      	bls.n	80039d0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4a0e      	ldr	r2, [pc, #56]	@ (80039fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d804      	bhi.n	80039d0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f043 0304 	orr.w	r3, r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e005      	b.n	80039dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f043 0310 	orr.w	r3, r3, #16
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e000      	b.n	80039dc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80039da:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	611a      	str	r2, [r3, #16]
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	01312cff 	.word	0x01312cff
 80039f0:	02160ebf 	.word	0x02160ebf
 80039f4:	03938700 	.word	0x03938700
 80039f8:	05f5e0ff 	.word	0x05f5e0ff
 80039fc:	08f0d17f 	.word	0x08f0d17f

08003a00 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a22:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a30:	2001      	movs	r0, #1
 8003a32:	f7fd ff0d 	bl	8001850 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a40:	6193      	str	r3, [r2, #24]
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4b51      	ldr	r3, [pc, #324]	@ (8003ba8 <ETH_SetMACConfig+0x15c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	7c1b      	ldrb	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <ETH_SetMACConfig+0x28>
 8003a6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a72:	e000      	b.n	8003a76 <ETH_SetMACConfig+0x2a>
 8003a74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	7c5b      	ldrb	r3, [r3, #17]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <ETH_SetMACConfig+0x38>
 8003a7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a82:	e000      	b.n	8003a86 <ETH_SetMACConfig+0x3a>
 8003a84:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	7fdb      	ldrb	r3, [r3, #31]
 8003a92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003a94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	7f92      	ldrb	r2, [r2, #30]
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d102      	bne.n	8003aaa <ETH_SetMACConfig+0x5e>
 8003aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aa8:	e000      	b.n	8003aac <ETH_SetMACConfig+0x60>
 8003aaa:	2200      	movs	r2, #0
                        macconf->Speed |
 8003aac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	7f1b      	ldrb	r3, [r3, #28]
 8003ab2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ab4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003aba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	791b      	ldrb	r3, [r3, #4]
 8003ac0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ac2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003aca:	2a00      	cmp	r2, #0
 8003acc:	d102      	bne.n	8003ad4 <ETH_SetMACConfig+0x88>
 8003ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ad2:	e000      	b.n	8003ad6 <ETH_SetMACConfig+0x8a>
 8003ad4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ad6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	7bdb      	ldrb	r3, [r3, #15]
 8003adc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ade:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ae4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003aee:	4313      	orrs	r3, r2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f7fd fea2 	bl	8001850 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003b22:	4013      	ands	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d101      	bne.n	8003b3a <ETH_SetMACConfig+0xee>
 8003b36:	2280      	movs	r2, #128	@ 0x80
 8003b38:	e000      	b.n	8003b3c <ETH_SetMACConfig+0xf0>
 8003b3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003b4a:	2a01      	cmp	r2, #1
 8003b4c:	d101      	bne.n	8003b52 <ETH_SetMACConfig+0x106>
 8003b4e:	2208      	movs	r2, #8
 8003b50:	e000      	b.n	8003b54 <ETH_SetMACConfig+0x108>
 8003b52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003b5c:	2a01      	cmp	r2, #1
 8003b5e:	d101      	bne.n	8003b64 <ETH_SetMACConfig+0x118>
 8003b60:	2204      	movs	r2, #4
 8003b62:	e000      	b.n	8003b66 <ETH_SetMACConfig+0x11a>
 8003b64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003b6e:	2a01      	cmp	r2, #1
 8003b70:	d101      	bne.n	8003b76 <ETH_SetMACConfig+0x12a>
 8003b72:	2202      	movs	r2, #2
 8003b74:	e000      	b.n	8003b78 <ETH_SetMACConfig+0x12c>
 8003b76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b90:	2001      	movs	r0, #1
 8003b92:	f7fd fe5d 	bl	8001850 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	619a      	str	r2, [r3, #24]
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	ff20810f 	.word	0xff20810f

08003bac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8003cbc <ETH_SetDMAConfig+0x110>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	7b1b      	ldrb	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <ETH_SetDMAConfig+0x2c>
 8003bd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bd6:	e000      	b.n	8003bda <ETH_SetDMAConfig+0x2e>
 8003bd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	7b5b      	ldrb	r3, [r3, #13]
 8003bde:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003be0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	7f52      	ldrb	r2, [r2, #29]
 8003be6:	2a00      	cmp	r2, #0
 8003be8:	d102      	bne.n	8003bf0 <ETH_SetDMAConfig+0x44>
 8003bea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bee:	e000      	b.n	8003bf2 <ETH_SetDMAConfig+0x46>
 8003bf0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bf2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	7b9b      	ldrb	r3, [r3, #14]
 8003bf8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bfa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	7f1b      	ldrb	r3, [r3, #28]
 8003c06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003c08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	7f9b      	ldrb	r3, [r3, #30]
 8003c0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c20:	4313      	orrs	r3, r2
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c30:	461a      	mov	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f7fd fe04 	bl	8001850 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c50:	461a      	mov	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	791b      	ldrb	r3, [r3, #4]
 8003c5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003c66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003c76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7fd fdd5 	bl	8001850 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	f8de3f23 	.word	0xf8de3f23

08003cc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b0a6      	sub	sp, #152	@ 0x98
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fe86 	bl	8003a4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d74:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff08 	bl	8003bac <ETH_SetDMAConfig>
}
 8003d9c:	bf00      	nop
 8003d9e:	3798      	adds	r7, #152	@ 0x98
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3305      	adds	r3, #5
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	3204      	adds	r2, #4
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <ETH_MACAddressConfig+0x68>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3303      	adds	r3, #3
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	061a      	lsls	r2, r3, #24
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3302      	adds	r3, #2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3301      	adds	r3, #1
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	4313      	orrs	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <ETH_MACAddressConfig+0x6c>)
 8003df6:	4413      	add	r3, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	6013      	str	r3, [r2, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40028040 	.word	0x40028040
 8003e10:	40028044 	.word	0x40028044

08003e14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e03e      	b.n	8003ea0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68d9      	ldr	r1, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	3206      	adds	r2, #6
 8003e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d80c      	bhi.n	8003e84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68d9      	ldr	r1, [r3, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	440b      	add	r3, r1
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e004      	b.n	8003e8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d9bd      	bls.n	8003e22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb8:	611a      	str	r2, [r3, #16]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e046      	b.n	8003f62 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6919      	ldr	r1, [r3, #16]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	440b      	add	r3, r1
 8003ee4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2200      	movs	r2, #0
 8003f02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003f18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	3212      	adds	r2, #18
 8003f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d80c      	bhi.n	8003f52 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6919      	ldr	r1, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	60da      	str	r2, [r3, #12]
 8003f50:	e004      	b.n	8003f5c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	461a      	mov	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d9b5      	bls.n	8003ed4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f92:	60da      	str	r2, [r3, #12]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b08d      	sub	sp, #52	@ 0x34
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3318      	adds	r3, #24
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fe2:	d007      	beq.n	8003ff4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe8:	3304      	adds	r3, #4
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e0ff      	b.n	80041f8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4b7d      	ldr	r3, [pc, #500]	@ (8004204 <ETH_Prepare_Tx_Descriptors+0x264>)
 800400e:	4013      	ands	r3, r2
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	6852      	ldr	r2, [r2, #4]
 8004014:	431a      	orrs	r2, r3
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	431a      	orrs	r2, r3
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800407a:	f3bf 8f5f 	dmb	sy
}
 800407e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800408c:	e082      	b.n	8004194 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d006      	beq.n	80040ae <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e005      	b.n	80040ba <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80040ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040bc:	3301      	adds	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d902      	bls.n	80040cc <ETH_Prepare_Tx_Descriptors+0x12c>
 80040c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c8:	3b04      	subs	r3, #4
 80040ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040ee:	d007      	beq.n	8004100 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f4:	3304      	adds	r3, #4
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d029      	beq.n	8004154 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800410e:	2300      	movs	r3, #0
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004112:	e019      	b.n	8004148 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004114:	f3bf 8f5f 	dmb	sy
}
 8004118:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004128:	3301      	adds	r3, #1
 800412a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	2b03      	cmp	r3, #3
 8004130:	d902      	bls.n	8004138 <ETH_Prepare_Tx_Descriptors+0x198>
 8004132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004134:	3b04      	subs	r3, #4
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800413c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004140:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	3301      	adds	r3, #1
 8004146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	429a      	cmp	r2, r3
 800414e:	d3e1      	bcc.n	8004114 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004150:	2302      	movs	r3, #2
 8004152:	e051      	b.n	80041f8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	3301      	adds	r3, #1
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4b25      	ldr	r3, [pc, #148]	@ (8004204 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004170:	4013      	ands	r3, r2
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	6852      	ldr	r2, [r2, #4]
 8004176:	431a      	orrs	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	3301      	adds	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004182:	f3bf 8f5f 	dmb	sy
}
 8004186:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f47f af78 	bne.w	800408e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d006      	beq.n	80041b2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e005      	b.n	80041be <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ce:	6979      	ldr	r1, [r7, #20]
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	3304      	adds	r3, #4
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041de:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80041e0:	b672      	cpsid	i
}
 80041e2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	4413      	add	r3, r2
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80041f2:	b662      	cpsie	i
}
 80041f4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3734      	adds	r7, #52	@ 0x34
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	ffffe000 	.word	0xffffe000

08004208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	@ 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e175      	b.n	8004514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004228:	2201      	movs	r2, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	429a      	cmp	r2, r3
 8004242:	f040 8164 	bne.w	800450e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d005      	beq.n	800425e <HAL_GPIO_Init+0x56>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d130      	bne.n	80042c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	2203      	movs	r2, #3
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004294:	2201      	movs	r2, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 0201 	and.w	r2, r3, #1
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d017      	beq.n	80042fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	2203      	movs	r2, #3
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d123      	bne.n	8004350 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	08da      	lsrs	r2, r3, #3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3208      	adds	r2, #8
 8004310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	220f      	movs	r2, #15
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	08da      	lsrs	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3208      	adds	r2, #8
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2203      	movs	r2, #3
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0203 	and.w	r2, r3, #3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80be 	beq.w	800450e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004392:	4b66      	ldr	r3, [pc, #408]	@ (800452c <HAL_GPIO_Init+0x324>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	4a65      	ldr	r2, [pc, #404]	@ (800452c <HAL_GPIO_Init+0x324>)
 8004398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800439c:	6453      	str	r3, [r2, #68]	@ 0x44
 800439e:	4b63      	ldr	r3, [pc, #396]	@ (800452c <HAL_GPIO_Init+0x324>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043aa:	4a61      	ldr	r2, [pc, #388]	@ (8004530 <HAL_GPIO_Init+0x328>)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	3302      	adds	r3, #2
 80043b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	220f      	movs	r2, #15
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a58      	ldr	r2, [pc, #352]	@ (8004534 <HAL_GPIO_Init+0x32c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d037      	beq.n	8004446 <HAL_GPIO_Init+0x23e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a57      	ldr	r2, [pc, #348]	@ (8004538 <HAL_GPIO_Init+0x330>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d031      	beq.n	8004442 <HAL_GPIO_Init+0x23a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a56      	ldr	r2, [pc, #344]	@ (800453c <HAL_GPIO_Init+0x334>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02b      	beq.n	800443e <HAL_GPIO_Init+0x236>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a55      	ldr	r2, [pc, #340]	@ (8004540 <HAL_GPIO_Init+0x338>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d025      	beq.n	800443a <HAL_GPIO_Init+0x232>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a54      	ldr	r2, [pc, #336]	@ (8004544 <HAL_GPIO_Init+0x33c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01f      	beq.n	8004436 <HAL_GPIO_Init+0x22e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a53      	ldr	r2, [pc, #332]	@ (8004548 <HAL_GPIO_Init+0x340>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d019      	beq.n	8004432 <HAL_GPIO_Init+0x22a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a52      	ldr	r2, [pc, #328]	@ (800454c <HAL_GPIO_Init+0x344>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_GPIO_Init+0x226>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a51      	ldr	r2, [pc, #324]	@ (8004550 <HAL_GPIO_Init+0x348>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00d      	beq.n	800442a <HAL_GPIO_Init+0x222>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a50      	ldr	r2, [pc, #320]	@ (8004554 <HAL_GPIO_Init+0x34c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <HAL_GPIO_Init+0x21e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4f      	ldr	r2, [pc, #316]	@ (8004558 <HAL_GPIO_Init+0x350>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <HAL_GPIO_Init+0x21a>
 800441e:	2309      	movs	r3, #9
 8004420:	e012      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004422:	230a      	movs	r3, #10
 8004424:	e010      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004426:	2308      	movs	r3, #8
 8004428:	e00e      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800442a:	2307      	movs	r3, #7
 800442c:	e00c      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800442e:	2306      	movs	r3, #6
 8004430:	e00a      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004432:	2305      	movs	r3, #5
 8004434:	e008      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004436:	2304      	movs	r3, #4
 8004438:	e006      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800443a:	2303      	movs	r3, #3
 800443c:	e004      	b.n	8004448 <HAL_GPIO_Init+0x240>
 800443e:	2302      	movs	r3, #2
 8004440:	e002      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_GPIO_Init+0x240>
 8004446:	2300      	movs	r3, #0
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f002 0203 	and.w	r2, r2, #3
 800444e:	0092      	lsls	r2, r2, #2
 8004450:	4093      	lsls	r3, r2
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004458:	4935      	ldr	r1, [pc, #212]	@ (8004530 <HAL_GPIO_Init+0x328>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b3d      	ldr	r3, [pc, #244]	@ (800455c <HAL_GPIO_Init+0x354>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448a:	4a34      	ldr	r2, [pc, #208]	@ (800455c <HAL_GPIO_Init+0x354>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b32      	ldr	r3, [pc, #200]	@ (800455c <HAL_GPIO_Init+0x354>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b4:	4a29      	ldr	r2, [pc, #164]	@ (800455c <HAL_GPIO_Init+0x354>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ba:	4b28      	ldr	r3, [pc, #160]	@ (800455c <HAL_GPIO_Init+0x354>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044de:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <HAL_GPIO_Init+0x354>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <HAL_GPIO_Init+0x354>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004508:	4a14      	ldr	r2, [pc, #80]	@ (800455c <HAL_GPIO_Init+0x354>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	f67f ae86 	bls.w	8004228 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	@ 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40022000 	.word	0x40022000
 8004558:	40022400 	.word	0x40022400
 800455c:	40013c00 	.word	0x40013c00

08004560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
 800456c:	4613      	mov	r3, r2
 800456e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004570:	787b      	ldrb	r3, [r7, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004576:	887a      	ldrh	r2, [r7, #2]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800457c:	e003      	b.n	8004586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	041a      	lsls	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	619a      	str	r2, [r3, #24]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004594:	b08f      	sub	sp, #60	@ 0x3c
 8004596:	af0a      	add	r7, sp, #40	@ 0x28
 8004598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e116      	b.n	80047d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fdac 	bl	800111c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2203      	movs	r2, #3
 80045c8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 facc 	bl	8007b80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	687e      	ldr	r6, [r7, #4]
 80045f0:	466d      	mov	r5, sp
 80045f2:	f106 0410 	add.w	r4, r6, #16
 80045f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004602:	e885 0003 	stmia.w	r5, {r0, r1}
 8004606:	1d33      	adds	r3, r6, #4
 8004608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800460a:	6838      	ldr	r0, [r7, #0]
 800460c:	f003 fa60 	bl	8007ad0 <USB_CoreInit>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0d7      	b.n	80047d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f003 faba 	bl	8007ba2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e04a      	b.n	80046ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	333d      	adds	r3, #61	@ 0x3d
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	333c      	adds	r3, #60	@ 0x3c
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	b298      	uxth	r0, r3
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3344      	adds	r3, #68	@ 0x44
 8004670:	4602      	mov	r2, r0
 8004672:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3340      	adds	r3, #64	@ 0x40
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3348      	adds	r3, #72	@ 0x48
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3354      	adds	r3, #84	@ 0x54
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	3301      	adds	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d3af      	bcc.n	8004634 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e044      	b.n	8004764 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	3301      	adds	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d3b5      	bcc.n	80046da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	687e      	ldr	r6, [r7, #4]
 8004776:	466d      	mov	r5, sp
 8004778:	f106 0410 	add.w	r4, r6, #16
 800477c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004788:	e885 0003 	stmia.w	r5, {r0, r1}
 800478c:	1d33      	adds	r3, r6, #4
 800478e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004790:	6838      	ldr	r0, [r7, #0]
 8004792:	f003 fa53 	bl	8007c3c <USB_DevInit>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e014      	b.n	80047d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d102      	bne.n	80047c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f80b 	bl	80047dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fc11 	bl	8007ff2 <USB_DevDisconnect>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_PCDEx_ActivateLPM+0x44>)
 800480c:	4313      	orrs	r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	10000003 	.word	0x10000003

08004824 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a04      	ldr	r2, [pc, #16]	@ (8004840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004832:	6013      	str	r3, [r2, #0]
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40007000 	.word	0x40007000

08004844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800484c:	2300      	movs	r3, #0
 800484e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e291      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8087 	beq.w	8004976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004868:	4b96      	ldr	r3, [pc, #600]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b04      	cmp	r3, #4
 8004872:	d00c      	beq.n	800488e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004874:	4b93      	ldr	r3, [pc, #588]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d112      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62>
 8004880:	4b90      	ldr	r3, [pc, #576]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800488c:	d10b      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d06c      	beq.n	8004974 <HAL_RCC_OscConfig+0x130>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d168      	bne.n	8004974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e26b      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x7a>
 80048b0:	4b84      	ldr	r3, [pc, #528]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a83      	ldr	r2, [pc, #524]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e02e      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x9c>
 80048c6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a7e      	ldr	r2, [pc, #504]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7b      	ldr	r2, [pc, #492]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0xc0>
 80048ea:	4b76      	ldr	r3, [pc, #472]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a75      	ldr	r2, [pc, #468]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b73      	ldr	r3, [pc, #460]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a72      	ldr	r2, [pc, #456]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 8004904:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800490a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6b      	ldr	r2, [pc, #428]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fc ff88 	bl	8001838 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800492c:	f7fc ff84 	bl	8001838 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	@ 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e21f      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b61      	ldr	r3, [pc, #388]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0xe8>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fc ff74 	bl	8001838 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004954:	f7fc ff70 	bl	8001838 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	@ 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e20b      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	4b57      	ldr	r3, [pc, #348]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x110>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d069      	beq.n	8004a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004982:	4b50      	ldr	r3, [pc, #320]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b08      	cmp	r3, #8
 8004998:	d11c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x190>
 800499a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	4b47      	ldr	r3, [pc, #284]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_RCC_OscConfig+0x17a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1df      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	4b41      	ldr	r3, [pc, #260]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	493d      	ldr	r1, [pc, #244]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	e040      	b.n	8004a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d023      	beq.n	8004a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049dc:	4b39      	ldr	r3, [pc, #228]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a38      	ldr	r2, [pc, #224]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fc ff26 	bl	8001838 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fc ff22 	bl	8001838 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1bd      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b30      	ldr	r3, [pc, #192]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4929      	ldr	r1, [pc, #164]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
 8004a22:	e018      	b.n	8004a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a24:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a26      	ldr	r2, [pc, #152]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fc ff02 	bl	8001838 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fc fefe 	bl	8001838 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e199      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d038      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6e:	4a15      	ldr	r2, [pc, #84]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fc fedf 	bl	8001838 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fc fedb 	bl	8001838 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e176      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x23a>
 8004a9c:	e01a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa2:	4a08      	ldr	r2, [pc, #32]	@ (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fc fec5 	bl	8001838 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab2:	f7fc fec1 	bl	8001838 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d903      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e15c      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
 8004ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b91      	ldr	r3, [pc, #580]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ee      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a4 	beq.w	8004c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	4b88      	ldr	r3, [pc, #544]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	4a87      	ldr	r2, [pc, #540]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004afa:	4b85      	ldr	r3, [pc, #532]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b0a:	4b82      	ldr	r3, [pc, #520]	@ (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d118      	bne.n	8004b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b16:	4b7f      	ldr	r3, [pc, #508]	@ (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b22:	f7fc fe89 	bl	8001838 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fc fe85 	bl	8001838 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	@ 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e120      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	4b75      	ldr	r3, [pc, #468]	@ (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x31a>
 8004b50:	4b6f      	ldr	r3, [pc, #444]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b54:	4a6e      	ldr	r2, [pc, #440]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b5c:	e02d      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x33c>
 8004b66:	4b6a      	ldr	r3, [pc, #424]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	4a69      	ldr	r2, [pc, #420]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b72:	4b67      	ldr	r3, [pc, #412]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b76:	4a66      	ldr	r2, [pc, #408]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b7e:	e01c      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x35e>
 8004b88:	4b61      	ldr	r3, [pc, #388]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	4a60      	ldr	r2, [pc, #384]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b94:	4b5e      	ldr	r3, [pc, #376]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b98:	4a5d      	ldr	r2, [pc, #372]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bae:	4b58      	ldr	r3, [pc, #352]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	4a57      	ldr	r2, [pc, #348]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fc fe39 	bl	8001838 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fc fe35 	bl	8001838 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0ce      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	4b4b      	ldr	r3, [pc, #300]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCC_OscConfig+0x386>
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fc fe23 	bl	8001838 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fc fe1f 	bl	8001838 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0b8      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0c:	4b40      	ldr	r3, [pc, #256]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	4a3b      	ldr	r2, [pc, #236]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c28:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a4 	beq.w	8004d7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c34:	4b36      	ldr	r3, [pc, #216]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d06b      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d149      	bne.n	8004cdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b31      	ldr	r3, [pc, #196]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a30      	ldr	r2, [pc, #192]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fc fdf0 	bl	8001838 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fc fdec 	bl	8001838 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e087      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	4b28      	ldr	r3, [pc, #160]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	3b01      	subs	r3, #1
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ca2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ca6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca8:	4b19      	ldr	r3, [pc, #100]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fc fdc0 	bl	8001838 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fc fdbc 	bl	8001838 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e057      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	4b10      	ldr	r3, [pc, #64]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x478>
 8004cda:	e04f      	b.n	8004d7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fc fda6 	bl	8001838 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fc fda2 	bl	8001838 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e03d      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	4b03      	ldr	r3, [pc, #12]	@ (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x4ac>
 8004d0e:	e035      	b.n	8004d7c <HAL_RCC_OscConfig+0x538>
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <HAL_RCC_OscConfig+0x544>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d028      	beq.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d121      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d11a      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	3b01      	subs	r3, #1
 8004d62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0d0      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d910      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b67      	ldr	r3, [pc, #412]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 020f 	bic.w	r2, r3, #15
 8004dba:	4965      	ldr	r1, [pc, #404]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b63      	ldr	r3, [pc, #396]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0b8      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dec:	4b59      	ldr	r3, [pc, #356]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a58      	ldr	r2, [pc, #352]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e04:	4b53      	ldr	r3, [pc, #332]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a52      	ldr	r2, [pc, #328]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b50      	ldr	r3, [pc, #320]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	494d      	ldr	r1, [pc, #308]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d040      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b47      	ldr	r3, [pc, #284]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d115      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4e:	4b41      	ldr	r3, [pc, #260]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e073      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06b      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6e:	4b39      	ldr	r3, [pc, #228]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	4936      	ldr	r1, [pc, #216]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fc fcda 	bl	8001838 <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e88:	f7fc fcd6 	bl	8001838 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e053      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 020c 	and.w	r2, r3, #12
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1eb      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b27      	ldr	r3, [pc, #156]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d210      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 020f 	bic.w	r2, r3, #15
 8004ec6:	4922      	ldr	r1, [pc, #136]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b19      	ldr	r3, [pc, #100]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4916      	ldr	r1, [pc, #88]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f0a:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	490e      	ldr	r1, [pc, #56]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f1e:	f000 f821 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	490a      	ldr	r1, [pc, #40]	@ (8004f58 <HAL_RCC_ClockConfig+0x1cc>)
 8004f30:	5ccb      	ldrb	r3, [r1, r3]
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a09      	ldr	r2, [pc, #36]	@ (8004f5c <HAL_RCC_ClockConfig+0x1d0>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <HAL_RCC_ClockConfig+0x1d4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc fc36 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023c00 	.word	0x40023c00
 8004f54:	40023800 	.word	0x40023800
 8004f58:	080174d0 	.word	0x080174d0
 8004f5c:	20000000 	.word	0x20000000
 8004f60:	20000004 	.word	0x20000004

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b094      	sub	sp, #80	@ 0x50
 8004f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f70:	2300      	movs	r3, #0
 8004f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f74:	2300      	movs	r3, #0
 8004f76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f7c:	4b79      	ldr	r3, [pc, #484]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00d      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	f200 80e1 	bhi.w	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x34>
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f96:	e0db      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b73      	ldr	r3, [pc, #460]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f9c:	e0db      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9e:	4b73      	ldr	r3, [pc, #460]	@ (800516c <HAL_RCC_GetSysClockFreq+0x208>)
 8004fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fa2:	e0d8      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fae:	4b6d      	ldr	r3, [pc, #436]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fba:	4b6a      	ldr	r3, [pc, #424]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fce:	2300      	movs	r3, #0
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	f04f 0000 	mov.w	r0, #0
 8004fde:	f04f 0100 	mov.w	r1, #0
 8004fe2:	0159      	lsls	r1, r3, #5
 8004fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe8:	0150      	lsls	r0, r2, #5
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4621      	mov	r1, r4
 8004ff0:	1a51      	subs	r1, r2, r1
 8004ff2:	6139      	str	r1, [r7, #16]
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005008:	4659      	mov	r1, fp
 800500a:	018b      	lsls	r3, r1, #6
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005012:	4651      	mov	r1, sl
 8005014:	018a      	lsls	r2, r1, #6
 8005016:	4651      	mov	r1, sl
 8005018:	ebb2 0801 	subs.w	r8, r2, r1
 800501c:	4659      	mov	r1, fp
 800501e:	eb63 0901 	sbc.w	r9, r3, r1
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005036:	4690      	mov	r8, r2
 8005038:	4699      	mov	r9, r3
 800503a:	4623      	mov	r3, r4
 800503c:	eb18 0303 	adds.w	r3, r8, r3
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	462b      	mov	r3, r5
 8005044:	eb49 0303 	adc.w	r3, r9, r3
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005056:	4629      	mov	r1, r5
 8005058:	024b      	lsls	r3, r1, #9
 800505a:	4621      	mov	r1, r4
 800505c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005060:	4621      	mov	r1, r4
 8005062:	024a      	lsls	r2, r1, #9
 8005064:	4610      	mov	r0, r2
 8005066:	4619      	mov	r1, r3
 8005068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506a:	2200      	movs	r2, #0
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005074:	f7fb f924 	bl	80002c0 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4613      	mov	r3, r2
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005080:	e058      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b38      	ldr	r3, [pc, #224]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	4618      	mov	r0, r3
 800508c:	4611      	mov	r1, r2
 800508e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005092:	623b      	str	r3, [r7, #32]
 8005094:	2300      	movs	r3, #0
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
 8005098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	0159      	lsls	r1, r3, #5
 80050aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ae:	0150      	lsls	r0, r2, #5
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4641      	mov	r1, r8
 80050b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050d4:	ebb2 040a 	subs.w	r4, r2, sl
 80050d8:	eb63 050b 	sbc.w	r5, r3, fp
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	00eb      	lsls	r3, r5, #3
 80050e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ea:	00e2      	lsls	r2, r4, #3
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	4643      	mov	r3, r8
 80050f2:	18e3      	adds	r3, r4, r3
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	464b      	mov	r3, r9
 80050f8:	eb45 0303 	adc.w	r3, r5, r3
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800510a:	4629      	mov	r1, r5
 800510c:	028b      	lsls	r3, r1, #10
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005114:	4621      	mov	r1, r4
 8005116:	028a      	lsls	r2, r1, #10
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	61fa      	str	r2, [r7, #28]
 8005124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005128:	f7fb f8ca 	bl	80002c0 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4613      	mov	r3, r2
 8005132:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005134:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8005152:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005158:	4618      	mov	r0, r3
 800515a:	3750      	adds	r7, #80	@ 0x50
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800
 8005168:	00f42400 	.word	0x00f42400
 800516c:	007a1200 	.word	0x007a1200

08005170 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005174:	4b03      	ldr	r3, [pc, #12]	@ (8005184 <HAL_RCC_GetHCLKFreq+0x14>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000000 	.word	0x20000000

08005188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800518c:	f7ff fff0 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	4903      	ldr	r1, [pc, #12]	@ (80051ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40023800 	.word	0x40023800
 80051ac:	080174e0 	.word	0x080174e0

080051b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051b4:	f7ff ffdc 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0b5b      	lsrs	r3, r3, #13
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	@ (80051d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	080174e0 	.word	0x080174e0

080051d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d012      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005200:	4b69      	ldr	r3, [pc, #420]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a68      	ldr	r2, [pc, #416]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800520a:	6093      	str	r3, [r2, #8]
 800520c:	4b66      	ldr	r3, [pc, #408]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005214:	4964      	ldr	r1, [pc, #400]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005222:	2301      	movs	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005232:	4b5d      	ldr	r3, [pc, #372]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005238:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005240:	4959      	ldr	r1, [pc, #356]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005250:	d101      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800525e:	2301      	movs	r3, #1
 8005260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d017      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800526e:	4b4e      	ldr	r3, [pc, #312]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005274:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527c:	494a      	ldr	r1, [pc, #296]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800528c:	d101      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800528e:	2301      	movs	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 808b 	beq.w	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052bc:	4b3a      	ldr	r3, [pc, #232]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	4a39      	ldr	r2, [pc, #228]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80052c8:	4b37      	ldr	r3, [pc, #220]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052d4:	4b35      	ldr	r3, [pc, #212]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a34      	ldr	r2, [pc, #208]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fc faaa 	bl	8001838 <HAL_GetTick>
 80052e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e8:	f7fc faa6 	bl	8001838 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	@ 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e357      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052fa:	4b2c      	ldr	r3, [pc, #176]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005306:	4b28      	ldr	r3, [pc, #160]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d035      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	d02e      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005324:	4b20      	ldr	r3, [pc, #128]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800532c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800532e:	4b1e      	ldr	r3, [pc, #120]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	4a1d      	ldr	r2, [pc, #116]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005338:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800533a:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	4a1a      	ldr	r2, [pc, #104]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005344:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005346:	4a18      	ldr	r2, [pc, #96]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800534c:	4b16      	ldr	r3, [pc, #88]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d114      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fc fa6e 	bl	8001838 <HAL_GetTick>
 800535c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535e:	e00a      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7fc fa6a 	bl	8001838 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e319      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005376:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0ee      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800538a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800538e:	d111      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005390:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800539c:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800539e:	400b      	ands	r3, r1
 80053a0:	4901      	ldr	r1, [pc, #4]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
 80053a6:	e00b      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40007000 	.word	0x40007000
 80053b0:	0ffffcff 	.word	0x0ffffcff
 80053b4:	4baa      	ldr	r3, [pc, #680]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4aa9      	ldr	r2, [pc, #676]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80053be:	6093      	str	r3, [r2, #8]
 80053c0:	4ba7      	ldr	r3, [pc, #668]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	49a4      	ldr	r1, [pc, #656]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053de:	4ba0      	ldr	r3, [pc, #640]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053e4:	4a9e      	ldr	r2, [pc, #632]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80053ee:	4b9c      	ldr	r3, [pc, #624]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	4999      	ldr	r1, [pc, #612]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800540c:	4b94      	ldr	r3, [pc, #592]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005412:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800541a:	4991      	ldr	r1, [pc, #580]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800542e:	4b8c      	ldr	r3, [pc, #560]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005434:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800543c:	4988      	ldr	r1, [pc, #544]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005450:	4b83      	ldr	r3, [pc, #524]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800545e:	4980      	ldr	r1, [pc, #512]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005472:	4b7b      	ldr	r3, [pc, #492]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005480:	4977      	ldr	r1, [pc, #476]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005494:	4b72      	ldr	r3, [pc, #456]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	f023 0203 	bic.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	496f      	ldr	r1, [pc, #444]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054bc:	f023 020c 	bic.w	r2, r3, #12
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c4:	4966      	ldr	r1, [pc, #408]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054d8:	4b61      	ldr	r3, [pc, #388]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e6:	495e      	ldr	r1, [pc, #376]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054fa:	4b59      	ldr	r3, [pc, #356]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005500:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	4955      	ldr	r1, [pc, #340]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800551c:	4b50      	ldr	r3, [pc, #320]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005522:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	494d      	ldr	r1, [pc, #308]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800553e:	4b48      	ldr	r3, [pc, #288]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005544:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	4944      	ldr	r1, [pc, #272]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005560:	4b3f      	ldr	r3, [pc, #252]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005566:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556e:	493c      	ldr	r1, [pc, #240]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005582:	4b37      	ldr	r3, [pc, #220]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005588:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005590:	4933      	ldr	r1, [pc, #204]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055b2:	492b      	ldr	r1, [pc, #172]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d011      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055c6:	4b26      	ldr	r3, [pc, #152]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055cc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055d4:	4922      	ldr	r1, [pc, #136]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055e4:	d101      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005606:	4b16      	ldr	r3, [pc, #88]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005614:	4912      	ldr	r1, [pc, #72]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005628:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005638:	4909      	ldr	r1, [pc, #36]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d006      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80d9 	beq.w	8005806 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005654:	4b02      	ldr	r3, [pc, #8]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a01      	ldr	r2, [pc, #4]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800565a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800565e:	e001      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005660:	40023800 	.word	0x40023800
 8005664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005666:	f7fc f8e7 	bl	8001838 <HAL_GetTick>
 800566a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800566c:	e008      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800566e:	f7fc f8e3 	bl	8001838 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b64      	cmp	r3, #100	@ 0x64
 800567a:	d901      	bls.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e194      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005680:	4b6c      	ldr	r3, [pc, #432]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f0      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d021      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11d      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056a0:	4b64      	ldr	r3, [pc, #400]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056ae:	4b61      	ldr	r3, [pc, #388]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056b4:	0e1b      	lsrs	r3, r3, #24
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	019a      	lsls	r2, r3, #6
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	061b      	lsls	r3, r3, #24
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	4957      	ldr	r1, [pc, #348]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d02e      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005706:	d129      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005708:	4b4a      	ldr	r3, [pc, #296]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005716:	4b47      	ldr	r3, [pc, #284]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800571c:	0f1b      	lsrs	r3, r3, #28
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	019a      	lsls	r2, r3, #6
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	431a      	orrs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	071b      	lsls	r3, r3, #28
 800573c:	493d      	ldr	r1, [pc, #244]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005744:	4b3b      	ldr	r3, [pc, #236]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800574a:	f023 021f 	bic.w	r2, r3, #31
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	3b01      	subs	r3, #1
 8005754:	4937      	ldr	r1, [pc, #220]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01d      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005768:	4b32      	ldr	r3, [pc, #200]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800576a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800576e:	0e1b      	lsrs	r3, r3, #24
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005776:	4b2f      	ldr	r3, [pc, #188]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800577c:	0f1b      	lsrs	r3, r3, #28
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	019a      	lsls	r2, r3, #6
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	431a      	orrs	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	061b      	lsls	r3, r3, #24
 8005796:	431a      	orrs	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	071b      	lsls	r3, r3, #28
 800579c:	4925      	ldr	r1, [pc, #148]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	019a      	lsls	r2, r3, #6
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	061b      	lsls	r3, r3, #24
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	071b      	lsls	r3, r3, #28
 80057cc:	4919      	ldr	r1, [pc, #100]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057d4:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a16      	ldr	r2, [pc, #88]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e0:	f7fc f82a 	bl	8001838 <HAL_GetTick>
 80057e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057e8:	f7fc f826 	bl	8001838 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	@ 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e0d7      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 80cd 	bne.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800580e:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a08      	ldr	r2, [pc, #32]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581a:	f7fc f80d 	bl	8001838 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005820:	e00a      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005822:	f7fc f809 	bl	8001838 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b64      	cmp	r3, #100	@ 0x64
 800582e:	d903      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0ba      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005834:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005838:	4b5e      	ldr	r3, [pc, #376]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005844:	d0ed      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02e      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d12a      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800586e:	4b51      	ldr	r3, [pc, #324]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800587c:	4b4d      	ldr	r3, [pc, #308]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005882:	0f1b      	lsrs	r3, r3, #28
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	019a      	lsls	r2, r3, #6
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	061b      	lsls	r3, r3, #24
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	071b      	lsls	r3, r3, #28
 80058a2:	4944      	ldr	r1, [pc, #272]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058aa:	4b42      	ldr	r3, [pc, #264]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	3b01      	subs	r3, #1
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	493d      	ldr	r1, [pc, #244]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d022      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058d8:	d11d      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058da:	4b36      	ldr	r3, [pc, #216]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e0:	0e1b      	lsrs	r3, r3, #24
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058e8:	4b32      	ldr	r3, [pc, #200]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ee:	0f1b      	lsrs	r3, r3, #28
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	019a      	lsls	r2, r3, #6
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	431a      	orrs	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	061b      	lsls	r3, r3, #24
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	071b      	lsls	r3, r3, #28
 800590e:	4929      	ldr	r1, [pc, #164]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d028      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005922:	4b24      	ldr	r3, [pc, #144]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	0e1b      	lsrs	r3, r3, #24
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005930:	4b20      	ldr	r3, [pc, #128]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	019a      	lsls	r2, r3, #6
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	431a      	orrs	r2, r3
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	061b      	lsls	r3, r3, #24
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	071b      	lsls	r3, r3, #28
 8005956:	4917      	ldr	r1, [pc, #92]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800595e:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005964:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	4911      	ldr	r1, [pc, #68]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005974:	4b0f      	ldr	r3, [pc, #60]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a0e      	ldr	r2, [pc, #56]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800597e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005980:	f7fb ff5a 	bl	8001838 <HAL_GetTick>
 8005984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005988:	f7fb ff56 	bl	8001838 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	@ 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e007      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800599a:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a6:	d1ef      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40023800 	.word	0x40023800

080059b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e049      	b.n	8005a5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb f9d8 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f000 faee 	bl	8005fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d001      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e054      	b.n	8005b2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a26      	ldr	r2, [pc, #152]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a22      	ldr	r2, [pc, #136]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a21      	ldr	r2, [pc, #132]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1e      	ldr	r2, [pc, #120]	@ (8005b48 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b4c <HAL_TIM_Base_Start_IT+0xe4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0x80>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b50 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d115      	bne.n	8005b14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	4b19      	ldr	r3, [pc, #100]	@ (8005b54 <HAL_TIM_Base_Start_IT+0xec>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b06      	cmp	r3, #6
 8005af8:	d015      	beq.n	8005b26 <HAL_TIM_Base_Start_IT+0xbe>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b00:	d011      	beq.n	8005b26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	e008      	b.n	8005b26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e000      	b.n	8005b28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40001800 	.word	0x40001800
 8005b54:	00010007 	.word	0x00010007

08005b58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10f      	bne.n	8005ba0 <HAL_TIM_Base_Stop_IT+0x48>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_Base_Stop_IT+0x48>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d122      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d11b      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f06f 0202 	mvn.w	r2, #2
 8005be2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f9cf 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005bfe:	e005      	b.n	8005c0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9c1 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f9d2 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d122      	bne.n	8005c66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d11b      	bne.n	8005c66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f06f 0204 	mvn.w	r2, #4
 8005c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f9a5 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005c52:	e005      	b.n	8005c60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f997 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9a8 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d122      	bne.n	8005cba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d11b      	bne.n	8005cba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f06f 0208 	mvn.w	r2, #8
 8005c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2204      	movs	r2, #4
 8005c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f97b 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005ca6:	e005      	b.n	8005cb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f96d 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f97e 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d122      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f06f 0210 	mvn.w	r2, #16
 8005cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2208      	movs	r2, #8
 8005ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f951 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005cfa:	e005      	b.n	8005d08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f943 	bl	8005f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f954 	bl	8005fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10e      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d107      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0201 	mvn.w	r2, #1
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f00d f991 	bl	801305c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d44:	2b80      	cmp	r3, #128	@ 0x80
 8005d46:	d10e      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d52:	2b80      	cmp	r3, #128	@ 0x80
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb0b 	bl	800637c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d80:	2b80      	cmp	r3, #128	@ 0x80
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fafe 	bl	8006390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b40      	cmp	r3, #64	@ 0x40
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f902 	bl	8005fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0220 	mvn.w	r2, #32
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fabe 	bl	8006368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIM_ConfigClockSource+0x1c>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e0b4      	b.n	8005f7a <HAL_TIM_ConfigClockSource+0x186>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	4b56      	ldr	r3, [pc, #344]	@ (8005f84 <HAL_TIM_ConfigClockSource+0x190>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e48:	d03e      	beq.n	8005ec8 <HAL_TIM_ConfigClockSource+0xd4>
 8005e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e4e:	f200 8087 	bhi.w	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e56:	f000 8086 	beq.w	8005f66 <HAL_TIM_ConfigClockSource+0x172>
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5e:	d87f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e60:	2b70      	cmp	r3, #112	@ 0x70
 8005e62:	d01a      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0xa6>
 8005e64:	2b70      	cmp	r3, #112	@ 0x70
 8005e66:	d87b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e68:	2b60      	cmp	r3, #96	@ 0x60
 8005e6a:	d050      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x11a>
 8005e6c:	2b60      	cmp	r3, #96	@ 0x60
 8005e6e:	d877      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e70:	2b50      	cmp	r3, #80	@ 0x50
 8005e72:	d03c      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0xfa>
 8005e74:	2b50      	cmp	r3, #80	@ 0x50
 8005e76:	d873      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e78:	2b40      	cmp	r3, #64	@ 0x40
 8005e7a:	d058      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x13a>
 8005e7c:	2b40      	cmp	r3, #64	@ 0x40
 8005e7e:	d86f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e80:	2b30      	cmp	r3, #48	@ 0x30
 8005e82:	d064      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e84:	2b30      	cmp	r3, #48	@ 0x30
 8005e86:	d86b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d060      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d867      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05c      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e94:	2b10      	cmp	r3, #16
 8005e96:	d05a      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15a>
 8005e98:	e062      	b.n	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eaa:	f000 f9af 	bl	800620c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	609a      	str	r2, [r3, #8]
      break;
 8005ec6:	e04f      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed8:	f000 f998 	bl	800620c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eea:	609a      	str	r2, [r3, #8]
      break;
 8005eec:	e03c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efa:	461a      	mov	r2, r3
 8005efc:	f000 f90c 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2150      	movs	r1, #80	@ 0x50
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f965 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f0c:	e02c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f000 f92b 	bl	8006176 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2160      	movs	r1, #96	@ 0x60
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f955 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f2c:	e01c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 f8ec 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2140      	movs	r1, #64	@ 0x40
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f945 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e00c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 f93c 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e003      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	fffeff88 	.word	0xfffeff88

08005f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <TIM_Base_SetConfig+0x114>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff6:	d00f      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80060f0 <TIM_Base_SetConfig+0x118>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3c      	ldr	r2, [pc, #240]	@ (80060f4 <TIM_Base_SetConfig+0x11c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3b      	ldr	r2, [pc, #236]	@ (80060f8 <TIM_Base_SetConfig+0x120>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3a      	ldr	r2, [pc, #232]	@ (80060fc <TIM_Base_SetConfig+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2f      	ldr	r2, [pc, #188]	@ (80060ec <TIM_Base_SetConfig+0x114>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02b      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d027      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2c      	ldr	r2, [pc, #176]	@ (80060f0 <TIM_Base_SetConfig+0x118>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d023      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2b      	ldr	r2, [pc, #172]	@ (80060f4 <TIM_Base_SetConfig+0x11c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01f      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2a      	ldr	r2, [pc, #168]	@ (80060f8 <TIM_Base_SetConfig+0x120>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01b      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a29      	ldr	r2, [pc, #164]	@ (80060fc <TIM_Base_SetConfig+0x124>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d017      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a28      	ldr	r2, [pc, #160]	@ (8006100 <TIM_Base_SetConfig+0x128>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a27      	ldr	r2, [pc, #156]	@ (8006104 <TIM_Base_SetConfig+0x12c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00f      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a26      	ldr	r2, [pc, #152]	@ (8006108 <TIM_Base_SetConfig+0x130>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00b      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a25      	ldr	r2, [pc, #148]	@ (800610c <TIM_Base_SetConfig+0x134>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a24      	ldr	r2, [pc, #144]	@ (8006110 <TIM_Base_SetConfig+0x138>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a23      	ldr	r2, [pc, #140]	@ (8006114 <TIM_Base_SetConfig+0x13c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d108      	bne.n	800609c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0a      	ldr	r2, [pc, #40]	@ (80060ec <TIM_Base_SetConfig+0x114>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_Base_SetConfig+0xf8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a0c      	ldr	r2, [pc, #48]	@ (80060fc <TIM_Base_SetConfig+0x124>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d103      	bne.n	80060d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	615a      	str	r2, [r3, #20]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40010400 	.word	0x40010400
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800
 800610c:	40001800 	.word	0x40001800
 8006110:	40001c00 	.word	0x40001c00
 8006114:	40002000 	.word	0x40002000

08006118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 030a 	bic.w	r3, r3, #10
 8006154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f023 0210 	bic.w	r2, r3, #16
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	031b      	lsls	r3, r3, #12
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f043 0307 	orr.w	r3, r3, #7
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	609a      	str	r2, [r3, #8]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	431a      	orrs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e06d      	b.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a30      	ldr	r2, [pc, #192]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2f      	ldr	r2, [pc, #188]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d108      	bne.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800629e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a20      	ldr	r2, [pc, #128]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d022      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d6:	d01d      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d018      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a15      	ldr	r2, [pc, #84]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a15      	ldr	r2, [pc, #84]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10c      	bne.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40014000 	.word	0x40014000
 8006364:	40001800 	.word	0x40001800

08006368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e040      	b.n	8006438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fa fd24 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	@ 0x24
 80063d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fca0 	bl	8006d28 <UART_SetConfig>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e022      	b.n	8006438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fef8 	bl	80071f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800640e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800641e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 ff7f 	bl	8007334 <UART_CheckIdleState>
 8006436:	4603      	mov	r3, r0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	@ 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006454:	2b20      	cmp	r3, #32
 8006456:	d171      	bne.n	800653c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Transmit+0x24>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e06a      	b.n	800653e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2221      	movs	r2, #33	@ 0x21
 8006474:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006476:	f7fb f9df 	bl	8001838 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x68>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b0:	e02c      	b.n	800650c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	@ 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 ff70 	bl	80073a2 <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e038      	b.n	800653e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3302      	adds	r3, #2
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e007      	b.n	80064fa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1cc      	bne.n	80064b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	2140      	movs	r1, #64	@ 0x40
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 ff3d 	bl	80073a2 <UART_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e005      	b.n	800653e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b08a      	sub	sp, #40	@ 0x28
 800654a:	af02      	add	r7, sp, #8
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655c:	2b20      	cmp	r3, #32
 800655e:	f040 80b1 	bne.w	80066c4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_UART_Receive+0x28>
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e0a9      	b.n	80066c6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2222      	movs	r2, #34	@ 0x22
 800657e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006588:	f7fb f956 	bl	8001838 <HAL_GetTick>
 800658c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a6:	d10e      	bne.n	80065c6 <HAL_UART_Receive+0x80>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <HAL_UART_Receive+0x76>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80065b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065ba:	e02d      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	22ff      	movs	r2, #255	@ 0xff
 80065c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065c4:	e028      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_UART_Receive+0xa4>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <HAL_UART_Receive+0x9a>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	@ 0xff
 80065da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065de:	e01b      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	227f      	movs	r2, #127	@ 0x7f
 80065e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065e8:	e016      	b.n	8006618 <HAL_UART_Receive+0xd2>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f2:	d10d      	bne.n	8006610 <HAL_UART_Receive+0xca>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_UART_Receive+0xc0>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	227f      	movs	r2, #127	@ 0x7f
 8006600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006604:	e008      	b.n	8006618 <HAL_UART_Receive+0xd2>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	223f      	movs	r2, #63	@ 0x3f
 800660a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800660e:	e003      	b.n	8006618 <HAL_UART_Receive+0xd2>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800661e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006628:	d108      	bne.n	800663c <HAL_UART_Receive+0xf6>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e003      	b.n	8006644 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006644:	e032      	b.n	80066ac <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	2120      	movs	r1, #32
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fea6 	bl	80073a2 <UART_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e032      	b.n	80066c6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	b29a      	uxth	r2, r3
 800666e:	8a7b      	ldrh	r3, [r7, #18]
 8006670:	4013      	ands	r3, r2
 8006672:	b29a      	uxth	r2, r3
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	3302      	adds	r3, #2
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	e00c      	b.n	800669a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	b2da      	uxtb	r2, r3
 8006688:	8a7b      	ldrh	r3, [r7, #18]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	4013      	ands	r3, r2
 800668e:	b2da      	uxtb	r2, r3
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1c6      	bne.n	8006646 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b08a      	sub	sp, #40	@ 0x28
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	4613      	mov	r3, r2
 80066da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d132      	bne.n	800674c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_UART_Receive_IT+0x24>
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e02b      	b.n	800674e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d018      	beq.n	800673c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	613b      	str	r3, [r7, #16]
   return(result);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	69f9      	ldr	r1, [r7, #28]
 800672e:	6a3a      	ldr	r2, [r7, #32]
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	61bb      	str	r3, [r7, #24]
   return(result);
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	461a      	mov	r2, r3
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fef4 	bl	8007530 <UART_Start_Receive_IT>
 8006748:	4603      	mov	r3, r0
 800674a:	e000      	b.n	800674e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3728      	adds	r7, #40	@ 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b0ba      	sub	sp, #232	@ 0xe8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800677e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006782:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006786:	4013      	ands	r3, r2
 8006788:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800678c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d115      	bne.n	80067c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00f      	beq.n	80067c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8297 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
      }
      return;
 80067be:	e291      	b.n	8006ce4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8117 	beq.w	80069f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80067da:	4b85      	ldr	r3, [pc, #532]	@ (80069f0 <HAL_UART_IRQHandler+0x298>)
 80067dc:	4013      	ands	r3, r2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 810a 	beq.w	80069f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d011      	beq.n	8006814 <HAL_UART_IRQHandler+0xbc>
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00b      	beq.n	8006814 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800680a:	f043 0201 	orr.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d011      	beq.n	8006844 <HAL_UART_IRQHandler+0xec>
 8006820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2202      	movs	r2, #2
 8006832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800683a:	f043 0204 	orr.w	r2, r3, #4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d011      	beq.n	8006874 <HAL_UART_IRQHandler+0x11c>
 8006850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2204      	movs	r2, #4
 8006862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800686a:	f043 0202 	orr.w	r2, r3, #2
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d017      	beq.n	80068b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800688c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006890:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2208      	movs	r2, #8
 800689e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a6:	f043 0208 	orr.w	r2, r3, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d012      	beq.n	80068e2 <HAL_UART_IRQHandler+0x18a>
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00c      	beq.n	80068e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 81fd 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00d      	beq.n	8006916 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800691c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b40      	cmp	r3, #64	@ 0x40
 800692c:	d005      	beq.n	800693a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800692e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006932:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006936:	2b00      	cmp	r3, #0
 8006938:	d04f      	beq.n	80069da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 febe 	bl	80076bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694a:	2b40      	cmp	r3, #64	@ 0x40
 800694c:	d141      	bne.n	80069d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800696c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800697a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800697e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1d9      	bne.n	800694e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d013      	beq.n	80069ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069a6:	4a13      	ldr	r2, [pc, #76]	@ (80069f4 <HAL_UART_IRQHandler+0x29c>)
 80069a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fb ffe6 	bl	8002980 <HAL_DMA_Abort_IT>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	e00f      	b.n	80069ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f00c fd38 	bl	8013440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d0:	e00b      	b.n	80069ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f00c fd34 	bl	8013440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	e007      	b.n	80069ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f00c fd30 	bl	8013440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80069e8:	e17e      	b.n	8006ce8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ea:	bf00      	nop
    return;
 80069ec:	e17c      	b.n	8006ce8 <HAL_UART_IRQHandler+0x590>
 80069ee:	bf00      	nop
 80069f0:	04000120 	.word	0x04000120
 80069f4:	08007785 	.word	0x08007785

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	f040 814c 	bne.w	8006c9a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8145 	beq.w	8006c9a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 813e 	beq.w	8006c9a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2210      	movs	r2, #16
 8006a24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	f040 80b6 	bne.w	8006ba2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8150 	beq.w	8006cec <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a56:	429a      	cmp	r2, r3
 8006a58:	f080 8148 	bcs.w	8006cec <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a70:	f000 8086 	beq.w	8006b80 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006aa2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1da      	bne.n	8006a74 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ace:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ae2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e1      	bne.n	8006abe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e3      	bne.n	8006afa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b50:	f023 0310 	bic.w	r3, r3, #16
 8006b54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e4      	bne.n	8006b40 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fb fe90 	bl	80028a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8b8 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ba0:	e0a4      	b.n	8006cec <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8096 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8091 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e4      	bne.n	8006bce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	623b      	str	r3, [r7, #32]
   return(result);
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3308      	adds	r3, #8
 8006c24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c28:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e3      	bne.n	8006c04 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f023 0310 	bic.w	r3, r3, #16
 8006c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c72:	61fb      	str	r3, [r7, #28]
 8006c74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	69b9      	ldr	r1, [r7, #24]
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e4      	bne.n	8006c50 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f83c 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c98:	e02a      	b.n	8006cf0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01c      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
    }
    return;
 8006cc2:	e017      	b.n	8006cf4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d012      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x59e>
 8006cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00c      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fd67 	bl	80077b0 <UART_EndTransmit_IT>
    return;
 8006ce2:	e008      	b.n	8006cf6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006ce4:	bf00      	nop
 8006ce6:	e006      	b.n	8006cf6 <HAL_UART_IRQHandler+0x59e>
    return;
 8006ce8:	bf00      	nop
 8006cea:	e004      	b.n	8006cf6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006cec:	bf00      	nop
 8006cee:	e002      	b.n	8006cf6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006cf0:	bf00      	nop
 8006cf2:	e000      	b.n	8006cf6 <HAL_UART_IRQHandler+0x59e>
    return;
 8006cf4:	bf00      	nop
  }

}
 8006cf6:	37e8      	adds	r7, #232	@ 0xe8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4ba6      	ldr	r3, [pc, #664]	@ (8006fec <UART_SetConfig+0x2c4>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	6979      	ldr	r1, [r7, #20]
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a94      	ldr	r2, [pc, #592]	@ (8006ff0 <UART_SetConfig+0x2c8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d120      	bne.n	8006de6 <UART_SetConfig+0xbe>
 8006da4:	4b93      	ldr	r3, [pc, #588]	@ (8006ff4 <UART_SetConfig+0x2cc>)
 8006da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d816      	bhi.n	8006de0 <UART_SetConfig+0xb8>
 8006db2:	a201      	add	r2, pc, #4	@ (adr r2, 8006db8 <UART_SetConfig+0x90>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006dd5 	.word	0x08006dd5
 8006dc0:	08006dcf 	.word	0x08006dcf
 8006dc4:	08006ddb 	.word	0x08006ddb
 8006dc8:	2301      	movs	r3, #1
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e150      	b.n	8007070 <UART_SetConfig+0x348>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e14d      	b.n	8007070 <UART_SetConfig+0x348>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e14a      	b.n	8007070 <UART_SetConfig+0x348>
 8006dda:	2308      	movs	r3, #8
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e147      	b.n	8007070 <UART_SetConfig+0x348>
 8006de0:	2310      	movs	r3, #16
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e144      	b.n	8007070 <UART_SetConfig+0x348>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a83      	ldr	r2, [pc, #524]	@ (8006ff8 <UART_SetConfig+0x2d0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d132      	bne.n	8006e56 <UART_SetConfig+0x12e>
 8006df0:	4b80      	ldr	r3, [pc, #512]	@ (8006ff4 <UART_SetConfig+0x2cc>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b0c      	cmp	r3, #12
 8006dfc:	d828      	bhi.n	8006e50 <UART_SetConfig+0x128>
 8006dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <UART_SetConfig+0xdc>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e39 	.word	0x08006e39
 8006e08:	08006e51 	.word	0x08006e51
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e51 	.word	0x08006e51
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e51 	.word	0x08006e51
 8006e1c:	08006e51 	.word	0x08006e51
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e3f 	.word	0x08006e3f
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e51 	.word	0x08006e51
 8006e34:	08006e4b 	.word	0x08006e4b
 8006e38:	2300      	movs	r3, #0
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e118      	b.n	8007070 <UART_SetConfig+0x348>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	77fb      	strb	r3, [r7, #31]
 8006e42:	e115      	b.n	8007070 <UART_SetConfig+0x348>
 8006e44:	2304      	movs	r3, #4
 8006e46:	77fb      	strb	r3, [r7, #31]
 8006e48:	e112      	b.n	8007070 <UART_SetConfig+0x348>
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	77fb      	strb	r3, [r7, #31]
 8006e4e:	e10f      	b.n	8007070 <UART_SetConfig+0x348>
 8006e50:	2310      	movs	r3, #16
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e10c      	b.n	8007070 <UART_SetConfig+0x348>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a68      	ldr	r2, [pc, #416]	@ (8006ffc <UART_SetConfig+0x2d4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d120      	bne.n	8006ea2 <UART_SetConfig+0x17a>
 8006e60:	4b64      	ldr	r3, [pc, #400]	@ (8006ff4 <UART_SetConfig+0x2cc>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e6a:	2b30      	cmp	r3, #48	@ 0x30
 8006e6c:	d013      	beq.n	8006e96 <UART_SetConfig+0x16e>
 8006e6e:	2b30      	cmp	r3, #48	@ 0x30
 8006e70:	d814      	bhi.n	8006e9c <UART_SetConfig+0x174>
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d009      	beq.n	8006e8a <UART_SetConfig+0x162>
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	d810      	bhi.n	8006e9c <UART_SetConfig+0x174>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <UART_SetConfig+0x15c>
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d006      	beq.n	8006e90 <UART_SetConfig+0x168>
 8006e82:	e00b      	b.n	8006e9c <UART_SetConfig+0x174>
 8006e84:	2300      	movs	r3, #0
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e0f2      	b.n	8007070 <UART_SetConfig+0x348>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e0ef      	b.n	8007070 <UART_SetConfig+0x348>
 8006e90:	2304      	movs	r3, #4
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e0ec      	b.n	8007070 <UART_SetConfig+0x348>
 8006e96:	2308      	movs	r3, #8
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e0e9      	b.n	8007070 <UART_SetConfig+0x348>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e0e6      	b.n	8007070 <UART_SetConfig+0x348>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a56      	ldr	r2, [pc, #344]	@ (8007000 <UART_SetConfig+0x2d8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d120      	bne.n	8006eee <UART_SetConfig+0x1c6>
 8006eac:	4b51      	ldr	r3, [pc, #324]	@ (8006ff4 <UART_SetConfig+0x2cc>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006eb8:	d013      	beq.n	8006ee2 <UART_SetConfig+0x1ba>
 8006eba:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ebc:	d814      	bhi.n	8006ee8 <UART_SetConfig+0x1c0>
 8006ebe:	2b80      	cmp	r3, #128	@ 0x80
 8006ec0:	d009      	beq.n	8006ed6 <UART_SetConfig+0x1ae>
 8006ec2:	2b80      	cmp	r3, #128	@ 0x80
 8006ec4:	d810      	bhi.n	8006ee8 <UART_SetConfig+0x1c0>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <UART_SetConfig+0x1a8>
 8006eca:	2b40      	cmp	r3, #64	@ 0x40
 8006ecc:	d006      	beq.n	8006edc <UART_SetConfig+0x1b4>
 8006ece:	e00b      	b.n	8006ee8 <UART_SetConfig+0x1c0>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e0cc      	b.n	8007070 <UART_SetConfig+0x348>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	77fb      	strb	r3, [r7, #31]
 8006eda:	e0c9      	b.n	8007070 <UART_SetConfig+0x348>
 8006edc:	2304      	movs	r3, #4
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e0c6      	b.n	8007070 <UART_SetConfig+0x348>
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	e0c3      	b.n	8007070 <UART_SetConfig+0x348>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	77fb      	strb	r3, [r7, #31]
 8006eec:	e0c0      	b.n	8007070 <UART_SetConfig+0x348>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a44      	ldr	r2, [pc, #272]	@ (8007004 <UART_SetConfig+0x2dc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d125      	bne.n	8006f44 <UART_SetConfig+0x21c>
 8006ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ff4 <UART_SetConfig+0x2cc>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f06:	d017      	beq.n	8006f38 <UART_SetConfig+0x210>
 8006f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f0c:	d817      	bhi.n	8006f3e <UART_SetConfig+0x216>
 8006f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f12:	d00b      	beq.n	8006f2c <UART_SetConfig+0x204>
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f18:	d811      	bhi.n	8006f3e <UART_SetConfig+0x216>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <UART_SetConfig+0x1fe>
 8006f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f22:	d006      	beq.n	8006f32 <UART_SetConfig+0x20a>
 8006f24:	e00b      	b.n	8006f3e <UART_SetConfig+0x216>
 8006f26:	2300      	movs	r3, #0
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e0a1      	b.n	8007070 <UART_SetConfig+0x348>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	e09e      	b.n	8007070 <UART_SetConfig+0x348>
 8006f32:	2304      	movs	r3, #4
 8006f34:	77fb      	strb	r3, [r7, #31]
 8006f36:	e09b      	b.n	8007070 <UART_SetConfig+0x348>
 8006f38:	2308      	movs	r3, #8
 8006f3a:	77fb      	strb	r3, [r7, #31]
 8006f3c:	e098      	b.n	8007070 <UART_SetConfig+0x348>
 8006f3e:	2310      	movs	r3, #16
 8006f40:	77fb      	strb	r3, [r7, #31]
 8006f42:	e095      	b.n	8007070 <UART_SetConfig+0x348>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a2f      	ldr	r2, [pc, #188]	@ (8007008 <UART_SetConfig+0x2e0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d125      	bne.n	8006f9a <UART_SetConfig+0x272>
 8006f4e:	4b29      	ldr	r3, [pc, #164]	@ (8006ff4 <UART_SetConfig+0x2cc>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f5c:	d017      	beq.n	8006f8e <UART_SetConfig+0x266>
 8006f5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f62:	d817      	bhi.n	8006f94 <UART_SetConfig+0x26c>
 8006f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f68:	d00b      	beq.n	8006f82 <UART_SetConfig+0x25a>
 8006f6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f6e:	d811      	bhi.n	8006f94 <UART_SetConfig+0x26c>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <UART_SetConfig+0x254>
 8006f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f78:	d006      	beq.n	8006f88 <UART_SetConfig+0x260>
 8006f7a:	e00b      	b.n	8006f94 <UART_SetConfig+0x26c>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e076      	b.n	8007070 <UART_SetConfig+0x348>
 8006f82:	2302      	movs	r3, #2
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e073      	b.n	8007070 <UART_SetConfig+0x348>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e070      	b.n	8007070 <UART_SetConfig+0x348>
 8006f8e:	2308      	movs	r3, #8
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	e06d      	b.n	8007070 <UART_SetConfig+0x348>
 8006f94:	2310      	movs	r3, #16
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e06a      	b.n	8007070 <UART_SetConfig+0x348>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800700c <UART_SetConfig+0x2e4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d138      	bne.n	8007016 <UART_SetConfig+0x2ee>
 8006fa4:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <UART_SetConfig+0x2cc>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006faa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006fae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fb2:	d017      	beq.n	8006fe4 <UART_SetConfig+0x2bc>
 8006fb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fb8:	d82a      	bhi.n	8007010 <UART_SetConfig+0x2e8>
 8006fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fbe:	d00b      	beq.n	8006fd8 <UART_SetConfig+0x2b0>
 8006fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc4:	d824      	bhi.n	8007010 <UART_SetConfig+0x2e8>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <UART_SetConfig+0x2aa>
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fce:	d006      	beq.n	8006fde <UART_SetConfig+0x2b6>
 8006fd0:	e01e      	b.n	8007010 <UART_SetConfig+0x2e8>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e04b      	b.n	8007070 <UART_SetConfig+0x348>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e048      	b.n	8007070 <UART_SetConfig+0x348>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	77fb      	strb	r3, [r7, #31]
 8006fe2:	e045      	b.n	8007070 <UART_SetConfig+0x348>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e042      	b.n	8007070 <UART_SetConfig+0x348>
 8006fea:	bf00      	nop
 8006fec:	efff69f3 	.word	0xefff69f3
 8006ff0:	40011000 	.word	0x40011000
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	40004400 	.word	0x40004400
 8006ffc:	40004800 	.word	0x40004800
 8007000:	40004c00 	.word	0x40004c00
 8007004:	40005000 	.word	0x40005000
 8007008:	40011400 	.word	0x40011400
 800700c:	40007800 	.word	0x40007800
 8007010:	2310      	movs	r3, #16
 8007012:	77fb      	strb	r3, [r7, #31]
 8007014:	e02c      	b.n	8007070 <UART_SetConfig+0x348>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a72      	ldr	r2, [pc, #456]	@ (80071e4 <UART_SetConfig+0x4bc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d125      	bne.n	800706c <UART_SetConfig+0x344>
 8007020:	4b71      	ldr	r3, [pc, #452]	@ (80071e8 <UART_SetConfig+0x4c0>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007026:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800702a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800702e:	d017      	beq.n	8007060 <UART_SetConfig+0x338>
 8007030:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007034:	d817      	bhi.n	8007066 <UART_SetConfig+0x33e>
 8007036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800703a:	d00b      	beq.n	8007054 <UART_SetConfig+0x32c>
 800703c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007040:	d811      	bhi.n	8007066 <UART_SetConfig+0x33e>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <UART_SetConfig+0x326>
 8007046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800704a:	d006      	beq.n	800705a <UART_SetConfig+0x332>
 800704c:	e00b      	b.n	8007066 <UART_SetConfig+0x33e>
 800704e:	2300      	movs	r3, #0
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e00d      	b.n	8007070 <UART_SetConfig+0x348>
 8007054:	2302      	movs	r3, #2
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e00a      	b.n	8007070 <UART_SetConfig+0x348>
 800705a:	2304      	movs	r3, #4
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e007      	b.n	8007070 <UART_SetConfig+0x348>
 8007060:	2308      	movs	r3, #8
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e004      	b.n	8007070 <UART_SetConfig+0x348>
 8007066:	2310      	movs	r3, #16
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e001      	b.n	8007070 <UART_SetConfig+0x348>
 800706c:	2310      	movs	r3, #16
 800706e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007078:	d15b      	bne.n	8007132 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800707a:	7ffb      	ldrb	r3, [r7, #31]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d828      	bhi.n	80070d2 <UART_SetConfig+0x3aa>
 8007080:	a201      	add	r2, pc, #4	@ (adr r2, 8007088 <UART_SetConfig+0x360>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070b5 	.word	0x080070b5
 8007090:	080070bd 	.word	0x080070bd
 8007094:	080070d3 	.word	0x080070d3
 8007098:	080070c3 	.word	0x080070c3
 800709c:	080070d3 	.word	0x080070d3
 80070a0:	080070d3 	.word	0x080070d3
 80070a4:	080070d3 	.word	0x080070d3
 80070a8:	080070cb 	.word	0x080070cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ac:	f7fe f86c 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 80070b0:	61b8      	str	r0, [r7, #24]
        break;
 80070b2:	e013      	b.n	80070dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b4:	f7fe f87c 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 80070b8:	61b8      	str	r0, [r7, #24]
        break;
 80070ba:	e00f      	b.n	80070dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070bc:	4b4b      	ldr	r3, [pc, #300]	@ (80071ec <UART_SetConfig+0x4c4>)
 80070be:	61bb      	str	r3, [r7, #24]
        break;
 80070c0:	e00c      	b.n	80070dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c2:	f7fd ff4f 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 80070c6:	61b8      	str	r0, [r7, #24]
        break;
 80070c8:	e008      	b.n	80070dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ce:	61bb      	str	r3, [r7, #24]
        break;
 80070d0:	e004      	b.n	80070dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	77bb      	strb	r3, [r7, #30]
        break;
 80070da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d074      	beq.n	80071cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	005a      	lsls	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	441a      	add	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b0f      	cmp	r3, #15
 80070fc:	d916      	bls.n	800712c <UART_SetConfig+0x404>
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007104:	d212      	bcs.n	800712c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	b29b      	uxth	r3, r3
 800710a:	f023 030f 	bic.w	r3, r3, #15
 800710e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	b29b      	uxth	r3, r3
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	b29a      	uxth	r2, r3
 800711c:	89fb      	ldrh	r3, [r7, #14]
 800711e:	4313      	orrs	r3, r2
 8007120:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	89fa      	ldrh	r2, [r7, #14]
 8007128:	60da      	str	r2, [r3, #12]
 800712a:	e04f      	b.n	80071cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	77bb      	strb	r3, [r7, #30]
 8007130:	e04c      	b.n	80071cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007132:	7ffb      	ldrb	r3, [r7, #31]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d828      	bhi.n	800718a <UART_SetConfig+0x462>
 8007138:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <UART_SetConfig+0x418>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007165 	.word	0x08007165
 8007144:	0800716d 	.word	0x0800716d
 8007148:	08007175 	.word	0x08007175
 800714c:	0800718b 	.word	0x0800718b
 8007150:	0800717b 	.word	0x0800717b
 8007154:	0800718b 	.word	0x0800718b
 8007158:	0800718b 	.word	0x0800718b
 800715c:	0800718b 	.word	0x0800718b
 8007160:	08007183 	.word	0x08007183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007164:	f7fe f810 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 8007168:	61b8      	str	r0, [r7, #24]
        break;
 800716a:	e013      	b.n	8007194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800716c:	f7fe f820 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 8007170:	61b8      	str	r0, [r7, #24]
        break;
 8007172:	e00f      	b.n	8007194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007174:	4b1d      	ldr	r3, [pc, #116]	@ (80071ec <UART_SetConfig+0x4c4>)
 8007176:	61bb      	str	r3, [r7, #24]
        break;
 8007178:	e00c      	b.n	8007194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717a:	f7fd fef3 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 800717e:	61b8      	str	r0, [r7, #24]
        break;
 8007180:	e008      	b.n	8007194 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007186:	61bb      	str	r3, [r7, #24]
        break;
 8007188:	e004      	b.n	8007194 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	77bb      	strb	r3, [r7, #30]
        break;
 8007192:	bf00      	nop
    }

    if (pclk != 0U)
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d018      	beq.n	80071cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	085a      	lsrs	r2, r3, #1
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	441a      	add	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b0f      	cmp	r3, #15
 80071b2:	d909      	bls.n	80071c8 <UART_SetConfig+0x4a0>
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ba:	d205      	bcs.n	80071c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	b29a      	uxth	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	e001      	b.n	80071cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80071d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3720      	adds	r7, #32
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40007c00 	.word	0x40007c00
 80071e8:	40023800 	.word	0x40023800
 80071ec:	00f42400 	.word	0x00f42400

080071f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01a      	beq.n	8007306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072ee:	d10a      	bne.n	8007306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007344:	f7fa fa78 	bl	8001838 <HAL_GetTick>
 8007348:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b08      	cmp	r3, #8
 8007356:	d10e      	bne.n	8007376 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f81b 	bl	80073a2 <UART_WaitOnFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e011      	b.n	800739a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2220      	movs	r2, #32
 800737a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b09c      	sub	sp, #112	@ 0x70
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	4613      	mov	r3, r2
 80073b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b2:	e0a7      	b.n	8007504 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	f000 80a3 	beq.w	8007504 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073be:	f7fa fa3b 	bl	8001838 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d302      	bcc.n	80073d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80073ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d13f      	bne.n	8007454 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80073e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073f4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e6      	bne.n	80073d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3308      	adds	r3, #8
 800740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	663b      	str	r3, [r7, #96]	@ 0x60
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007426:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007428:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800742c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e068      	b.n	8007526 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d050      	beq.n	8007504 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800746c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007470:	d148      	bne.n	8007504 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800747a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
 800749c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e6      	bne.n	800747c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3308      	adds	r3, #8
 80074b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	613b      	str	r3, [r7, #16]
   return(result);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3308      	adds	r3, #8
 80074cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80074ce:	623a      	str	r2, [r7, #32]
 80074d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	69f9      	ldr	r1, [r7, #28]
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	61bb      	str	r3, [r7, #24]
   return(result);
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e5      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e010      	b.n	8007526 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	4013      	ands	r3, r2
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	429a      	cmp	r2, r3
 8007512:	bf0c      	ite	eq
 8007514:	2301      	moveq	r3, #1
 8007516:	2300      	movne	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	429a      	cmp	r2, r3
 8007520:	f43f af48 	beq.w	80073b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3770      	adds	r7, #112	@ 0x70
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007530:	b480      	push	{r7}
 8007532:	b097      	sub	sp, #92	@ 0x5c
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	88fa      	ldrh	r2, [r7, #6]
 8007550:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007562:	d10e      	bne.n	8007582 <UART_Start_Receive_IT+0x52>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <UART_Start_Receive_IT+0x48>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007572:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007576:	e02d      	b.n	80075d4 <UART_Start_Receive_IT+0xa4>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	22ff      	movs	r2, #255	@ 0xff
 800757c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007580:	e028      	b.n	80075d4 <UART_Start_Receive_IT+0xa4>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10d      	bne.n	80075a6 <UART_Start_Receive_IT+0x76>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <UART_Start_Receive_IT+0x6c>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	22ff      	movs	r2, #255	@ 0xff
 8007596:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800759a:	e01b      	b.n	80075d4 <UART_Start_Receive_IT+0xa4>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	227f      	movs	r2, #127	@ 0x7f
 80075a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80075a4:	e016      	b.n	80075d4 <UART_Start_Receive_IT+0xa4>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075ae:	d10d      	bne.n	80075cc <UART_Start_Receive_IT+0x9c>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <UART_Start_Receive_IT+0x92>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	227f      	movs	r2, #127	@ 0x7f
 80075bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80075c0:	e008      	b.n	80075d4 <UART_Start_Receive_IT+0xa4>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	223f      	movs	r2, #63	@ 0x3f
 80075c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80075ca:	e003      	b.n	80075d4 <UART_Start_Receive_IT+0xa4>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2222      	movs	r2, #34	@ 0x22
 80075e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3308      	adds	r3, #8
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3308      	adds	r3, #8
 8007602:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007604:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007606:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800760a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e5      	bne.n	80075e4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007620:	d107      	bne.n	8007632 <UART_Start_Receive_IT+0x102>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4a21      	ldr	r2, [pc, #132]	@ (80076b4 <UART_Start_Receive_IT+0x184>)
 800762e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007630:	e002      	b.n	8007638 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4a20      	ldr	r2, [pc, #128]	@ (80076b8 <UART_Start_Receive_IT+0x188>)
 8007636:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d019      	beq.n	8007674 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007660:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007664:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e6      	bne.n	8007640 <UART_Start_Receive_IT+0x110>
 8007672:	e018      	b.n	80076a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	613b      	str	r3, [r7, #16]
   return(result);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f043 0320 	orr.w	r3, r3, #32
 8007688:	653b      	str	r3, [r7, #80]	@ 0x50
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007692:	623b      	str	r3, [r7, #32]
 8007694:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	69f9      	ldr	r1, [r7, #28]
 8007698:	6a3a      	ldr	r2, [r7, #32]
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e6      	bne.n	8007674 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	375c      	adds	r7, #92	@ 0x5c
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	0800796b 	.word	0x0800796b
 80076b8:	08007805 	.word	0x08007805

080076bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b095      	sub	sp, #84	@ 0x54
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e6      	bne.n	80076c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	61fb      	str	r3, [r7, #28]
   return(result);
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	f023 0301 	bic.w	r3, r3, #1
 800770c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3308      	adds	r3, #8
 8007714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800771c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e5      	bne.n	80076f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800772e:	2b01      	cmp	r3, #1
 8007730:	d118      	bne.n	8007764 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f023 0310 	bic.w	r3, r3, #16
 8007746:	647b      	str	r3, [r7, #68]	@ 0x44
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6979      	ldr	r1, [r7, #20]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	613b      	str	r3, [r7, #16]
   return(result);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e6      	bne.n	8007732 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007778:	bf00      	nop
 800777a:	3754      	adds	r7, #84	@ 0x54
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f00b fe4c 	bl	8013440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a8:	bf00      	nop
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	61bb      	str	r3, [r7, #24]
 80077d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6979      	ldr	r1, [r7, #20]
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	613b      	str	r3, [r7, #16]
   return(result);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e6      	bne.n	80077b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fa80 	bl	8006cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077fc:	bf00      	nop
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b096      	sub	sp, #88	@ 0x58
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007812:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800781c:	2b22      	cmp	r3, #34	@ 0x22
 800781e:	f040 8098 	bne.w	8007952 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800782c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007830:	b2d9      	uxtb	r1, r3
 8007832:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007836:	b2da      	uxtb	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783c:	400a      	ands	r2, r1
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d17b      	bne.n	8007962 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800787e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007888:	647b      	str	r3, [r7, #68]	@ 0x44
 800788a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800788e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e6      	bne.n	800786a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	623b      	str	r3, [r7, #32]
   return(result);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80078be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d12e      	bne.n	800794a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0310 	bic.w	r3, r3, #16
 8007906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	69b9      	ldr	r1, [r7, #24]
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	617b      	str	r3, [r7, #20]
   return(result);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e6      	bne.n	80078f2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f003 0310 	and.w	r3, r3, #16
 800792e:	2b10      	cmp	r3, #16
 8007930:	d103      	bne.n	800793a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2210      	movs	r2, #16
 8007938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff f9e4 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007948:	e00b      	b.n	8007962 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f00b fd54 	bl	80133f8 <HAL_UART_RxCpltCallback>
}
 8007950:	e007      	b.n	8007962 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0208 	orr.w	r2, r2, #8
 8007960:	619a      	str	r2, [r3, #24]
}
 8007962:	bf00      	nop
 8007964:	3758      	adds	r7, #88	@ 0x58
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b096      	sub	sp, #88	@ 0x58
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007978:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007982:	2b22      	cmp	r3, #34	@ 0x22
 8007984:	f040 8098 	bne.w	8007ab8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007998:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800799c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80079a0:	4013      	ands	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ac:	1c9a      	adds	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d17b      	bne.n	8007ac8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80079f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e6      	bne.n	80079d0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e5      	bne.n	8007a02 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d12e      	bne.n	8007ab0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6979      	ldr	r1, [r7, #20]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	613b      	str	r3, [r7, #16]
   return(result);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e6      	bne.n	8007a58 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d103      	bne.n	8007aa0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2210      	movs	r2, #16
 8007a9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff f931 	bl	8006d10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aae:	e00b      	b.n	8007ac8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f00b fca1 	bl	80133f8 <HAL_UART_RxCpltCallback>
}
 8007ab6:	e007      	b.n	8007ac8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699a      	ldr	r2, [r3, #24]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0208 	orr.w	r2, r2, #8
 8007ac6:	619a      	str	r2, [r3, #24]
}
 8007ac8:	bf00      	nop
 8007aca:	3758      	adds	r7, #88	@ 0x58
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	f107 001c 	add.w	r0, r7, #28
 8007ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d120      	bne.n	8007b2a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	4b20      	ldr	r3, [pc, #128]	@ (8007b7c <USB_CoreInit+0xac>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d105      	bne.n	8007b1e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa96 	bl	8008050 <USB_CoreReset>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
 8007b28:	e010      	b.n	8007b4c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa8a 	bl	8008050 <USB_CoreReset>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10b      	bne.n	8007b6a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f043 0206 	orr.w	r2, r3, #6
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b76:	b004      	add	sp, #16
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	ffbdffbf 	.word	0xffbdffbf

08007b80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f023 0201 	bic.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d115      	bne.n	8007bf0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	f7f9 fe3d 	bl	8001850 <HAL_Delay>
      ms++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fa29 	bl	8008034 <USB_GetMode>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d01e      	beq.n	8007c26 <USB_SetCurrentMode+0x84>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b31      	cmp	r3, #49	@ 0x31
 8007bec:	d9f0      	bls.n	8007bd0 <USB_SetCurrentMode+0x2e>
 8007bee:	e01a      	b.n	8007c26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d115      	bne.n	8007c22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c02:	2001      	movs	r0, #1
 8007c04:	f7f9 fe24 	bl	8001850 <HAL_Delay>
      ms++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa10 	bl	8008034 <USB_GetMode>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <USB_SetCurrentMode+0x84>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b31      	cmp	r3, #49	@ 0x31
 8007c1e:	d9f0      	bls.n	8007c02 <USB_SetCurrentMode+0x60>
 8007c20:	e001      	b.n	8007c26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e005      	b.n	8007c32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b32      	cmp	r3, #50	@ 0x32
 8007c2a:	d101      	bne.n	8007c30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b086      	sub	sp, #24
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	e009      	b.n	8007c70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	3340      	adds	r3, #64	@ 0x40
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2b0e      	cmp	r3, #14
 8007c74:	d9f2      	bls.n	8007c5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d11c      	bne.n	8007cb6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c8a:	f043 0302 	orr.w	r3, r3, #2
 8007c8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c94:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	e005      	b.n	8007cc2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cc8:	461a      	mov	r2, r3
 8007cca:	2300      	movs	r3, #0
 8007ccc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cdc:	461a      	mov	r2, r3
 8007cde:	680b      	ldr	r3, [r1, #0]
 8007ce0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d10c      	bne.n	8007d02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f965 	bl	8007fc0 <USB_SetDevSpeed>
 8007cf6:	e008      	b.n	8007d0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f960 	bl	8007fc0 <USB_SetDevSpeed>
 8007d00:	e003      	b.n	8007d0a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d02:	2103      	movs	r1, #3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f95b 	bl	8007fc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d0a:	2110      	movs	r1, #16
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8f3 	bl	8007ef8 <USB_FlushTxFifo>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f91f 	bl	8007f60 <USB_FlushRxFifo>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d32:	461a      	mov	r2, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d3e:	461a      	mov	r2, r3
 8007d40:	2300      	movs	r3, #0
 8007d42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
 8007d54:	e043      	b.n	8007dde <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d6c:	d118      	bne.n	8007da0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d80:	461a      	mov	r2, r3
 8007d82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	e013      	b.n	8007db2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d96:	461a      	mov	r2, r3
 8007d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	e008      	b.n	8007db2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dac:	461a      	mov	r2, r3
 8007dae:	2300      	movs	r3, #0
 8007db0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3b7      	bcc.n	8007d56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	e043      	b.n	8007e74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e02:	d118      	bne.n	8007e36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e16:	461a      	mov	r2, r3
 8007e18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	e013      	b.n	8007e48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	e008      	b.n	8007e48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e42:	461a      	mov	r2, r3
 8007e44:	2300      	movs	r3, #0
 8007e46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e54:	461a      	mov	r2, r3
 8007e56:	2300      	movs	r3, #0
 8007e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e66:	461a      	mov	r2, r3
 8007e68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	3301      	adds	r3, #1
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d3b7      	bcc.n	8007dec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007e9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f043 0210 	orr.w	r2, r3, #16
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef0 <USB_DevInit+0x2b4>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f043 0208 	orr.w	r2, r3, #8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d105      	bne.n	8007ee0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699a      	ldr	r2, [r3, #24]
 8007ed8:	4b06      	ldr	r3, [pc, #24]	@ (8007ef4 <USB_DevInit+0x2b8>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eec:	b004      	add	sp, #16
 8007eee:	4770      	bx	lr
 8007ef0:	803c3800 	.word	0x803c3800
 8007ef4:	40000004 	.word	0x40000004

08007ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4a13      	ldr	r2, [pc, #76]	@ (8007f5c <USB_FlushTxFifo+0x64>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d901      	bls.n	8007f18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e01b      	b.n	8007f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	daf2      	bge.n	8007f06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	019b      	lsls	r3, r3, #6
 8007f28:	f043 0220 	orr.w	r2, r3, #32
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a08      	ldr	r2, [pc, #32]	@ (8007f5c <USB_FlushTxFifo+0x64>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d901      	bls.n	8007f42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e006      	b.n	8007f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d0f0      	beq.n	8007f30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	00030d40 	.word	0x00030d40

08007f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a11      	ldr	r2, [pc, #68]	@ (8007fbc <USB_FlushRxFifo+0x5c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d901      	bls.n	8007f7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e018      	b.n	8007fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	daf2      	bge.n	8007f6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2210      	movs	r2, #16
 8007f8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4a08      	ldr	r2, [pc, #32]	@ (8007fbc <USB_FlushRxFifo+0x5c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e006      	b.n	8007fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0310 	and.w	r3, r3, #16
 8007faa:	2b10      	cmp	r3, #16
 8007fac:	d0f0      	beq.n	8007f90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	00030d40 	.word	0x00030d40

08007fc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800800c:	f023 0303 	bic.w	r3, r3, #3
 8008010:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008020:	f043 0302 	orr.w	r3, r3, #2
 8008024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	f003 0301 	and.w	r3, r3, #1
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4a13      	ldr	r2, [pc, #76]	@ (80080b4 <USB_CoreReset+0x64>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d901      	bls.n	800806e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e01b      	b.n	80080a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	daf2      	bge.n	800805c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f043 0201 	orr.w	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a09      	ldr	r2, [pc, #36]	@ (80080b4 <USB_CoreReset+0x64>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d901      	bls.n	8008098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e006      	b.n	80080a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d0f0      	beq.n	8008086 <USB_CoreReset+0x36>

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	00030d40 	.word	0x00030d40

080080b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80080be:	4b8d      	ldr	r3, [pc, #564]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 80080c0:	22c0      	movs	r2, #192	@ 0xc0
 80080c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80080c4:	4b8b      	ldr	r3, [pc, #556]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 80080c6:	22a8      	movs	r2, #168	@ 0xa8
 80080c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 80080ca:	4b8a      	ldr	r3, [pc, #552]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 80080cc:	2207      	movs	r2, #7
 80080ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 80080d0:	4b88      	ldr	r3, [pc, #544]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 80080d2:	2202      	movs	r2, #2
 80080d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80080d6:	4b88      	ldr	r3, [pc, #544]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80080d8:	22ff      	movs	r2, #255	@ 0xff
 80080da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80080dc:	4b86      	ldr	r3, [pc, #536]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80080de:	22ff      	movs	r2, #255	@ 0xff
 80080e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80080e2:	4b85      	ldr	r3, [pc, #532]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80080e4:	22ff      	movs	r2, #255	@ 0xff
 80080e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80080e8:	4b83      	ldr	r3, [pc, #524]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80080ee:	4b83      	ldr	r3, [pc, #524]	@ (80082fc <MX_LWIP_Init+0x244>)
 80080f0:	22c0      	movs	r2, #192	@ 0xc0
 80080f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80080f4:	4b81      	ldr	r3, [pc, #516]	@ (80082fc <MX_LWIP_Init+0x244>)
 80080f6:	22a8      	movs	r2, #168	@ 0xa8
 80080f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 7;
 80080fa:	4b80      	ldr	r3, [pc, #512]	@ (80082fc <MX_LWIP_Init+0x244>)
 80080fc:	2207      	movs	r2, #7
 80080fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008100:	4b7e      	ldr	r3, [pc, #504]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008102:	2201      	movs	r2, #1
 8008104:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008106:	f000 fd25 	bl	8008b54 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800810a:	4b7a      	ldr	r3, [pc, #488]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	061a      	lsls	r2, r3, #24
 8008110:	4b78      	ldr	r3, [pc, #480]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	041b      	lsls	r3, r3, #16
 8008116:	431a      	orrs	r2, r3
 8008118:	4b76      	ldr	r3, [pc, #472]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 800811a:	789b      	ldrb	r3, [r3, #2]
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	4313      	orrs	r3, r2
 8008120:	4a74      	ldr	r2, [pc, #464]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008122:	78d2      	ldrb	r2, [r2, #3]
 8008124:	4313      	orrs	r3, r2
 8008126:	061a      	lsls	r2, r3, #24
 8008128:	4b72      	ldr	r3, [pc, #456]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	0619      	lsls	r1, r3, #24
 800812e:	4b71      	ldr	r3, [pc, #452]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	4319      	orrs	r1, r3
 8008136:	4b6f      	ldr	r3, [pc, #444]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008138:	789b      	ldrb	r3, [r3, #2]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	430b      	orrs	r3, r1
 800813e:	496d      	ldr	r1, [pc, #436]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008140:	78c9      	ldrb	r1, [r1, #3]
 8008142:	430b      	orrs	r3, r1
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800814a:	431a      	orrs	r2, r3
 800814c:	4b69      	ldr	r3, [pc, #420]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	0619      	lsls	r1, r3, #24
 8008152:	4b68      	ldr	r3, [pc, #416]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	4319      	orrs	r1, r3
 800815a:	4b66      	ldr	r3, [pc, #408]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 800815c:	789b      	ldrb	r3, [r3, #2]
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	430b      	orrs	r3, r1
 8008162:	4964      	ldr	r1, [pc, #400]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008164:	78c9      	ldrb	r1, [r1, #3]
 8008166:	430b      	orrs	r3, r1
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800816e:	431a      	orrs	r2, r3
 8008170:	4b60      	ldr	r3, [pc, #384]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	0619      	lsls	r1, r3, #24
 8008176:	4b5f      	ldr	r3, [pc, #380]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	4319      	orrs	r1, r3
 800817e:	4b5d      	ldr	r3, [pc, #372]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008180:	789b      	ldrb	r3, [r3, #2]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	430b      	orrs	r3, r1
 8008186:	495b      	ldr	r1, [pc, #364]	@ (80082f4 <MX_LWIP_Init+0x23c>)
 8008188:	78c9      	ldrb	r1, [r1, #3]
 800818a:	430b      	orrs	r3, r1
 800818c:	0e1b      	lsrs	r3, r3, #24
 800818e:	4313      	orrs	r3, r2
 8008190:	4a5b      	ldr	r2, [pc, #364]	@ (8008300 <MX_LWIP_Init+0x248>)
 8008192:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008194:	4b58      	ldr	r3, [pc, #352]	@ (80082f8 <MX_LWIP_Init+0x240>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	061a      	lsls	r2, r3, #24
 800819a:	4b57      	ldr	r3, [pc, #348]	@ (80082f8 <MX_LWIP_Init+0x240>)
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	431a      	orrs	r2, r3
 80081a2:	4b55      	ldr	r3, [pc, #340]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081a4:	789b      	ldrb	r3, [r3, #2]
 80081a6:	021b      	lsls	r3, r3, #8
 80081a8:	4313      	orrs	r3, r2
 80081aa:	4a53      	ldr	r2, [pc, #332]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081ac:	78d2      	ldrb	r2, [r2, #3]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	061a      	lsls	r2, r3, #24
 80081b2:	4b51      	ldr	r3, [pc, #324]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	0619      	lsls	r1, r3, #24
 80081b8:	4b4f      	ldr	r3, [pc, #316]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	041b      	lsls	r3, r3, #16
 80081be:	4319      	orrs	r1, r3
 80081c0:	4b4d      	ldr	r3, [pc, #308]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	430b      	orrs	r3, r1
 80081c8:	494b      	ldr	r1, [pc, #300]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081ca:	78c9      	ldrb	r1, [r1, #3]
 80081cc:	430b      	orrs	r3, r1
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081d4:	431a      	orrs	r2, r3
 80081d6:	4b48      	ldr	r3, [pc, #288]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	0619      	lsls	r1, r3, #24
 80081dc:	4b46      	ldr	r3, [pc, #280]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	4319      	orrs	r1, r3
 80081e4:	4b44      	ldr	r3, [pc, #272]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081e6:	789b      	ldrb	r3, [r3, #2]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	430b      	orrs	r3, r1
 80081ec:	4942      	ldr	r1, [pc, #264]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081ee:	78c9      	ldrb	r1, [r1, #3]
 80081f0:	430b      	orrs	r3, r1
 80081f2:	0a1b      	lsrs	r3, r3, #8
 80081f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80081f8:	431a      	orrs	r2, r3
 80081fa:	4b3f      	ldr	r3, [pc, #252]	@ (80082f8 <MX_LWIP_Init+0x240>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	0619      	lsls	r1, r3, #24
 8008200:	4b3d      	ldr	r3, [pc, #244]	@ (80082f8 <MX_LWIP_Init+0x240>)
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	041b      	lsls	r3, r3, #16
 8008206:	4319      	orrs	r1, r3
 8008208:	4b3b      	ldr	r3, [pc, #236]	@ (80082f8 <MX_LWIP_Init+0x240>)
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	430b      	orrs	r3, r1
 8008210:	4939      	ldr	r1, [pc, #228]	@ (80082f8 <MX_LWIP_Init+0x240>)
 8008212:	78c9      	ldrb	r1, [r1, #3]
 8008214:	430b      	orrs	r3, r1
 8008216:	0e1b      	lsrs	r3, r3, #24
 8008218:	4313      	orrs	r3, r2
 800821a:	4a3a      	ldr	r2, [pc, #232]	@ (8008304 <MX_LWIP_Init+0x24c>)
 800821c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800821e:	4b37      	ldr	r3, [pc, #220]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	061a      	lsls	r2, r3, #24
 8008224:	4b35      	ldr	r3, [pc, #212]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	041b      	lsls	r3, r3, #16
 800822a:	431a      	orrs	r2, r3
 800822c:	4b33      	ldr	r3, [pc, #204]	@ (80082fc <MX_LWIP_Init+0x244>)
 800822e:	789b      	ldrb	r3, [r3, #2]
 8008230:	021b      	lsls	r3, r3, #8
 8008232:	4313      	orrs	r3, r2
 8008234:	4a31      	ldr	r2, [pc, #196]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008236:	78d2      	ldrb	r2, [r2, #3]
 8008238:	4313      	orrs	r3, r2
 800823a:	061a      	lsls	r2, r3, #24
 800823c:	4b2f      	ldr	r3, [pc, #188]	@ (80082fc <MX_LWIP_Init+0x244>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	0619      	lsls	r1, r3, #24
 8008242:	4b2e      	ldr	r3, [pc, #184]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	041b      	lsls	r3, r3, #16
 8008248:	4319      	orrs	r1, r3
 800824a:	4b2c      	ldr	r3, [pc, #176]	@ (80082fc <MX_LWIP_Init+0x244>)
 800824c:	789b      	ldrb	r3, [r3, #2]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	430b      	orrs	r3, r1
 8008252:	492a      	ldr	r1, [pc, #168]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008254:	78c9      	ldrb	r1, [r1, #3]
 8008256:	430b      	orrs	r3, r1
 8008258:	021b      	lsls	r3, r3, #8
 800825a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800825e:	431a      	orrs	r2, r3
 8008260:	4b26      	ldr	r3, [pc, #152]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	0619      	lsls	r1, r3, #24
 8008266:	4b25      	ldr	r3, [pc, #148]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	4319      	orrs	r1, r3
 800826e:	4b23      	ldr	r3, [pc, #140]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008270:	789b      	ldrb	r3, [r3, #2]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	430b      	orrs	r3, r1
 8008276:	4921      	ldr	r1, [pc, #132]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008278:	78c9      	ldrb	r1, [r1, #3]
 800827a:	430b      	orrs	r3, r1
 800827c:	0a1b      	lsrs	r3, r3, #8
 800827e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008282:	431a      	orrs	r2, r3
 8008284:	4b1d      	ldr	r3, [pc, #116]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	0619      	lsls	r1, r3, #24
 800828a:	4b1c      	ldr	r3, [pc, #112]	@ (80082fc <MX_LWIP_Init+0x244>)
 800828c:	785b      	ldrb	r3, [r3, #1]
 800828e:	041b      	lsls	r3, r3, #16
 8008290:	4319      	orrs	r1, r3
 8008292:	4b1a      	ldr	r3, [pc, #104]	@ (80082fc <MX_LWIP_Init+0x244>)
 8008294:	789b      	ldrb	r3, [r3, #2]
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	430b      	orrs	r3, r1
 800829a:	4918      	ldr	r1, [pc, #96]	@ (80082fc <MX_LWIP_Init+0x244>)
 800829c:	78c9      	ldrb	r1, [r1, #3]
 800829e:	430b      	orrs	r3, r1
 80082a0:	0e1b      	lsrs	r3, r3, #24
 80082a2:	4313      	orrs	r3, r2
 80082a4:	4a18      	ldr	r2, [pc, #96]	@ (8008308 <MX_LWIP_Init+0x250>)
 80082a6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80082a8:	4b18      	ldr	r3, [pc, #96]	@ (800830c <MX_LWIP_Init+0x254>)
 80082aa:	9302      	str	r3, [sp, #8]
 80082ac:	4b18      	ldr	r3, [pc, #96]	@ (8008310 <MX_LWIP_Init+0x258>)
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	2300      	movs	r3, #0
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	4b14      	ldr	r3, [pc, #80]	@ (8008308 <MX_LWIP_Init+0x250>)
 80082b6:	4a13      	ldr	r2, [pc, #76]	@ (8008304 <MX_LWIP_Init+0x24c>)
 80082b8:	4911      	ldr	r1, [pc, #68]	@ (8008300 <MX_LWIP_Init+0x248>)
 80082ba:	4816      	ldr	r0, [pc, #88]	@ (8008314 <MX_LWIP_Init+0x25c>)
 80082bc:	f001 f936 	bl	800952c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80082c0:	4814      	ldr	r0, [pc, #80]	@ (8008314 <MX_LWIP_Init+0x25c>)
 80082c2:	f001 fae5 	bl	8009890 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80082c6:	4b13      	ldr	r3, [pc, #76]	@ (8008314 <MX_LWIP_Init+0x25c>)
 80082c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80082cc:	089b      	lsrs	r3, r3, #2
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80082d8:	480e      	ldr	r0, [pc, #56]	@ (8008314 <MX_LWIP_Init+0x25c>)
 80082da:	f001 fae9 	bl	80098b0 <netif_set_up>
 80082de:	e002      	b.n	80082e6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80082e0:	480c      	ldr	r0, [pc, #48]	@ (8008314 <MX_LWIP_Init+0x25c>)
 80082e2:	f001 fb51 	bl	8009988 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80082e6:	490c      	ldr	r1, [pc, #48]	@ (8008318 <MX_LWIP_Init+0x260>)
 80082e8:	480a      	ldr	r0, [pc, #40]	@ (8008314 <MX_LWIP_Init+0x25c>)
 80082ea:	f001 fbe3 	bl	8009ab4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80082ee:	bf00      	nop
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000a80 	.word	0x20000a80
 80082f8:	20000a84 	.word	0x20000a84
 80082fc:	20000a88 	.word	0x20000a88
 8008300:	20000a74 	.word	0x20000a74
 8008304:	20000a78 	.word	0x20000a78
 8008308:	20000a7c 	.word	0x20000a7c
 800830c:	08012969 	.word	0x08012969
 8008310:	08008631 	.word	0x08008631
 8008314:	20000a40 	.word	0x20000a40
 8008318:	0800831d 	.word	0x0800831d

0800831c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <SCB_InvalidateDCache_by_Addr>:
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008342:	2320      	movs	r3, #32
 8008344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008346:	f3bf 8f4f 	dsb	sy
}
 800834a:	bf00      	nop
    while (op_size > 0) {
 800834c:	e00b      	b.n	8008366 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800834e:	4a0d      	ldr	r2, [pc, #52]	@ (8008384 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	4413      	add	r3, r2
 800835c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dcf0      	bgt.n	800834e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800836c:	f3bf 8f4f 	dsb	sy
}
 8008370:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008372:	f3bf 8f6f 	isb	sy
}
 8008376:	bf00      	nop
}
 8008378:	bf00      	nop
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	e000ed00 	.word	0xe000ed00

08008388 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008394:	4b40      	ldr	r3, [pc, #256]	@ (8008498 <low_level_init+0x110>)
 8008396:	4a41      	ldr	r2, [pc, #260]	@ (800849c <low_level_init+0x114>)
 8008398:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800839a:	2300      	movs	r3, #0
 800839c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800839e:	2380      	movs	r3, #128	@ 0x80
 80083a0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80083a2:	23e1      	movs	r3, #225	@ 0xe1
 80083a4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80083a6:	2300      	movs	r3, #0
 80083a8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80083aa:	2300      	movs	r3, #0
 80083ac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80083ae:	2300      	movs	r3, #0
 80083b0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80083b2:	4a39      	ldr	r2, [pc, #228]	@ (8008498 <low_level_init+0x110>)
 80083b4:	f107 0308 	add.w	r3, r7, #8
 80083b8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80083ba:	4b37      	ldr	r3, [pc, #220]	@ (8008498 <low_level_init+0x110>)
 80083bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80083c0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80083c2:	4b35      	ldr	r3, [pc, #212]	@ (8008498 <low_level_init+0x110>)
 80083c4:	4a36      	ldr	r2, [pc, #216]	@ (80084a0 <low_level_init+0x118>)
 80083c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80083c8:	4b33      	ldr	r3, [pc, #204]	@ (8008498 <low_level_init+0x110>)
 80083ca:	4a36      	ldr	r2, [pc, #216]	@ (80084a4 <low_level_init+0x11c>)
 80083cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80083ce:	4b32      	ldr	r3, [pc, #200]	@ (8008498 <low_level_init+0x110>)
 80083d0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80083d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80083d6:	4830      	ldr	r0, [pc, #192]	@ (8008498 <low_level_init+0x110>)
 80083d8:	f7fa fd30 	bl	8002e3c <HAL_ETH_Init>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80083e0:	2238      	movs	r2, #56	@ 0x38
 80083e2:	2100      	movs	r1, #0
 80083e4:	4830      	ldr	r0, [pc, #192]	@ (80084a8 <low_level_init+0x120>)
 80083e6:	f00b fad5 	bl	8013994 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80083ea:	4b2f      	ldr	r3, [pc, #188]	@ (80084a8 <low_level_init+0x120>)
 80083ec:	2221      	movs	r2, #33	@ 0x21
 80083ee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80083f0:	4b2d      	ldr	r3, [pc, #180]	@ (80084a8 <low_level_init+0x120>)
 80083f2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80083f6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80083f8:	4b2b      	ldr	r3, [pc, #172]	@ (80084a8 <low_level_init+0x120>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80083fe:	482b      	ldr	r0, [pc, #172]	@ (80084ac <low_level_init+0x124>)
 8008400:	f000 ff5c 	bl	80092bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2206      	movs	r2, #6
 8008408:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800840c:	4b22      	ldr	r3, [pc, #136]	@ (8008498 <low_level_init+0x110>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008418:	4b1f      	ldr	r3, [pc, #124]	@ (8008498 <low_level_init+0x110>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	785a      	ldrb	r2, [r3, #1]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008424:	4b1c      	ldr	r3, [pc, #112]	@ (8008498 <low_level_init+0x110>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	789a      	ldrb	r2, [r3, #2]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008430:	4b19      	ldr	r3, [pc, #100]	@ (8008498 <low_level_init+0x110>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	78da      	ldrb	r2, [r3, #3]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800843c:	4b16      	ldr	r3, [pc, #88]	@ (8008498 <low_level_init+0x110>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	791a      	ldrb	r2, [r3, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008448:	4b13      	ldr	r3, [pc, #76]	@ (8008498 <low_level_init+0x110>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	795a      	ldrb	r2, [r3, #5]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800845a:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008462:	f043 030a 	orr.w	r3, r3, #10
 8008466:	b2da      	uxtb	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800846e:	4910      	ldr	r1, [pc, #64]	@ (80084b0 <low_level_init+0x128>)
 8008470:	4810      	ldr	r0, [pc, #64]	@ (80084b4 <low_level_init+0x12c>)
 8008472:	f7f9 f82e 	bl	80014d2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008476:	480f      	ldr	r0, [pc, #60]	@ (80084b4 <low_level_init+0x12c>)
 8008478:	f7f9 f85d 	bl	8001536 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa3a 	bl	80088fc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008488:	e001      	b.n	800848e <low_level_init+0x106>
    Error_Handler();
 800848a:	f7f8 fbc9 	bl	8000c20 <Error_Handler>
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20005418 	.word	0x20005418
 800849c:	40028000 	.word	0x40028000
 80084a0:	20000128 	.word	0x20000128
 80084a4:	20000088 	.word	0x20000088
 80084a8:	200054c8 	.word	0x200054c8
 80084ac:	080174f0 	.word	0x080174f0
 80084b0:	2000000c 	.word	0x2000000c
 80084b4:	20005500 	.word	0x20005500

080084b8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b092      	sub	sp, #72	@ 0x48
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80084d0:	f107 030c 	add.w	r3, r7, #12
 80084d4:	2230      	movs	r2, #48	@ 0x30
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f00b fa5b 	bl	8013994 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80084de:	f107 030c 	add.w	r3, r7, #12
 80084e2:	2230      	movs	r2, #48	@ 0x30
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f00b fa54 	bl	8013994 <memset>

  for(q = p; q != NULL; q = q->next)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80084f0:	e045      	b.n	800857e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80084f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d902      	bls.n	80084fe <low_level_output+0x46>
      return ERR_IF;
 80084f8:	f06f 030b 	mvn.w	r3, #11
 80084fc:	e055      	b.n	80085aa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80084fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008500:	6859      	ldr	r1, [r3, #4]
 8008502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008504:	4613      	mov	r3, r2
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	3348      	adds	r3, #72	@ 0x48
 800850e:	443b      	add	r3, r7
 8008510:	3b3c      	subs	r3, #60	@ 0x3c
 8008512:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008516:	895b      	ldrh	r3, [r3, #10]
 8008518:	4619      	mov	r1, r3
 800851a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800851c:	4613      	mov	r3, r2
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	3348      	adds	r3, #72	@ 0x48
 8008526:	443b      	add	r3, r7
 8008528:	3b38      	subs	r3, #56	@ 0x38
 800852a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800852c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800852e:	2b00      	cmp	r3, #0
 8008530:	d011      	beq.n	8008556 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008534:	1e5a      	subs	r2, r3, #1
 8008536:	f107 000c 	add.w	r0, r7, #12
 800853a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800853c:	460b      	mov	r3, r1
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	440b      	add	r3, r1
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	18c1      	adds	r1, r0, r3
 8008546:	4613      	mov	r3, r2
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	3348      	adds	r3, #72	@ 0x48
 8008550:	443b      	add	r3, r7
 8008552:	3b34      	subs	r3, #52	@ 0x34
 8008554:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800855e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008560:	4613      	mov	r3, r2
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	3348      	adds	r3, #72	@ 0x48
 800856a:	443b      	add	r3, r7
 800856c:	3b34      	subs	r3, #52	@ 0x34
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008574:	3301      	adds	r3, #1
 8008576:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	643b      	str	r3, [r7, #64]	@ 0x40
 800857e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1b6      	bne.n	80084f2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	891b      	ldrh	r3, [r3, #8]
 8008588:	461a      	mov	r2, r3
 800858a:	4b0a      	ldr	r3, [pc, #40]	@ (80085b4 <low_level_output+0xfc>)
 800858c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800858e:	4a09      	ldr	r2, [pc, #36]	@ (80085b4 <low_level_output+0xfc>)
 8008590:	f107 030c 	add.w	r3, r7, #12
 8008594:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008596:	4a07      	ldr	r2, [pc, #28]	@ (80085b4 <low_level_output+0xfc>)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800859c:	2214      	movs	r2, #20
 800859e:	4905      	ldr	r1, [pc, #20]	@ (80085b4 <low_level_output+0xfc>)
 80085a0:	4805      	ldr	r0, [pc, #20]	@ (80085b8 <low_level_output+0x100>)
 80085a2:	f7fa fd7f 	bl	80030a4 <HAL_ETH_Transmit>

  return errval;
 80085a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3748      	adds	r7, #72	@ 0x48
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200054c8 	.word	0x200054c8
 80085b8:	20005418 	.word	0x20005418

080085bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80085c8:	4b07      	ldr	r3, [pc, #28]	@ (80085e8 <low_level_input+0x2c>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d105      	bne.n	80085dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80085d0:	f107 030c 	add.w	r3, r7, #12
 80085d4:	4619      	mov	r1, r3
 80085d6:	4805      	ldr	r0, [pc, #20]	@ (80085ec <low_level_input+0x30>)
 80085d8:	f7fa fdf8 	bl	80031cc <HAL_ETH_ReadData>
  }

  return p;
 80085dc:	68fb      	ldr	r3, [r7, #12]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20005414 	.word	0x20005414
 80085ec:	20005418 	.word	0x20005418

080085f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff ffdd 	bl	80085bc <low_level_input>
 8008602:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	4798      	blx	r3
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f001 fdca 	bl	800a1b4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1ea      	bne.n	80085fc <ethernetif_input+0xc>
}
 8008626:	bf00      	nop
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <ethernetif_init+0x1c>
 800863e:	4b0e      	ldr	r3, [pc, #56]	@ (8008678 <ethernetif_init+0x48>)
 8008640:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 8008644:	490d      	ldr	r1, [pc, #52]	@ (800867c <ethernetif_init+0x4c>)
 8008646:	480e      	ldr	r0, [pc, #56]	@ (8008680 <ethernetif_init+0x50>)
 8008648:	f00b f84c 	bl	80136e4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2273      	movs	r2, #115	@ 0x73
 8008650:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2274      	movs	r2, #116	@ 0x74
 8008658:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a09      	ldr	r2, [pc, #36]	@ (8008684 <ethernetif_init+0x54>)
 8008660:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a08      	ldr	r2, [pc, #32]	@ (8008688 <ethernetif_init+0x58>)
 8008666:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff fe8d 	bl	8008388 <low_level_init>

  return ERR_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	0801465c 	.word	0x0801465c
 800867c:	08014678 	.word	0x08014678
 8008680:	08014688 	.word	0x08014688
 8008684:	08010e21 	.word	0x08010e21
 8008688:	080084b9 	.word	0x080084b9

0800868c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	4807      	ldr	r0, [pc, #28]	@ (80086b8 <pbuf_free_custom+0x2c>)
 800869c:	f000 fef0 	bl	8009480 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80086a0:	4b06      	ldr	r3, [pc, #24]	@ (80086bc <pbuf_free_custom+0x30>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d102      	bne.n	80086ae <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80086a8:	4b04      	ldr	r3, [pc, #16]	@ (80086bc <pbuf_free_custom+0x30>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	701a      	strb	r2, [r3, #0]
  }
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	080174f0 	.word	0x080174f0
 80086bc:	20005414 	.word	0x20005414

080086c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80086c4:	f7f9 f8b8 	bl	8001838 <HAL_GetTick>
 80086c8:	4603      	mov	r3, r0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08e      	sub	sp, #56	@ 0x38
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a56      	ldr	r2, [pc, #344]	@ (8008848 <HAL_ETH_MspInit+0x178>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	f040 80a6 	bne.w	8008840 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80086f4:	4b55      	ldr	r3, [pc, #340]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 80086f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f8:	4a54      	ldr	r2, [pc, #336]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 80086fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80086fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8008700:	4b52      	ldr	r3, [pc, #328]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008708:	623b      	str	r3, [r7, #32]
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	4b4f      	ldr	r3, [pc, #316]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800870e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008710:	4a4e      	ldr	r2, [pc, #312]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008712:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008716:	6313      	str	r3, [r2, #48]	@ 0x30
 8008718:	4b4c      	ldr	r3, [pc, #304]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800871a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800871c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4b49      	ldr	r3, [pc, #292]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008728:	4a48      	ldr	r2, [pc, #288]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800872a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800872e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008730:	4b46      	ldr	r3, [pc, #280]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800873c:	4b43      	ldr	r3, [pc, #268]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800873e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008740:	4a42      	ldr	r2, [pc, #264]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008742:	f043 0304 	orr.w	r3, r3, #4
 8008746:	6313      	str	r3, [r2, #48]	@ 0x30
 8008748:	4b40      	ldr	r3, [pc, #256]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800874a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008754:	4b3d      	ldr	r3, [pc, #244]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008758:	4a3c      	ldr	r2, [pc, #240]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008760:	4b3a      	ldr	r3, [pc, #232]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800876c:	4b37      	ldr	r3, [pc, #220]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800876e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008770:	4a36      	ldr	r2, [pc, #216]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008772:	f043 0302 	orr.w	r3, r3, #2
 8008776:	6313      	str	r3, [r2, #48]	@ 0x30
 8008778:	4b34      	ldr	r3, [pc, #208]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800877a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008784:	4b31      	ldr	r3, [pc, #196]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008788:	4a30      	ldr	r2, [pc, #192]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 800878a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008790:	4b2e      	ldr	r3, [pc, #184]	@ (800884c <HAL_ETH_MspInit+0x17c>)
 8008792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008798:	60bb      	str	r3, [r7, #8]
 800879a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800879c:	2332      	movs	r3, #50	@ 0x32
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a0:	2302      	movs	r3, #2
 80087a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087a8:	2303      	movs	r3, #3
 80087aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087ac:	230b      	movs	r3, #11
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087b4:	4619      	mov	r1, r3
 80087b6:	4826      	ldr	r0, [pc, #152]	@ (8008850 <HAL_ETH_MspInit+0x180>)
 80087b8:	f7fb fd26 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80087bc:	2386      	movs	r3, #134	@ 0x86
 80087be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c0:	2302      	movs	r3, #2
 80087c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c8:	2303      	movs	r3, #3
 80087ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087cc:	230b      	movs	r3, #11
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087d4:	4619      	mov	r1, r3
 80087d6:	481f      	ldr	r0, [pc, #124]	@ (8008854 <HAL_ETH_MspInit+0x184>)
 80087d8:	f7fb fd16 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80087dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e2:	2302      	movs	r3, #2
 80087e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ea:	2303      	movs	r3, #3
 80087ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087ee:	230b      	movs	r3, #11
 80087f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80087f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087f6:	4619      	mov	r1, r3
 80087f8:	4817      	ldr	r0, [pc, #92]	@ (8008858 <HAL_ETH_MspInit+0x188>)
 80087fa:	f7fb fd05 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80087fe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8008802:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008804:	2302      	movs	r3, #2
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008808:	2300      	movs	r3, #0
 800880a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800880c:	2303      	movs	r3, #3
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008810:	230b      	movs	r3, #11
 8008812:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008818:	4619      	mov	r1, r3
 800881a:	4810      	ldr	r0, [pc, #64]	@ (800885c <HAL_ETH_MspInit+0x18c>)
 800881c:	f7fb fcf4 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008820:	2200      	movs	r2, #0
 8008822:	2100      	movs	r1, #0
 8008824:	203d      	movs	r0, #61	@ 0x3d
 8008826:	f7f9 fe78 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800882a:	203d      	movs	r0, #61	@ 0x3d
 800882c:	f7f9 fe91 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8008830:	2200      	movs	r2, #0
 8008832:	2100      	movs	r1, #0
 8008834:	203e      	movs	r0, #62	@ 0x3e
 8008836:	f7f9 fe70 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800883a:	203e      	movs	r0, #62	@ 0x3e
 800883c:	f7f9 fe89 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008840:	bf00      	nop
 8008842:	3738      	adds	r7, #56	@ 0x38
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	40028000 	.word	0x40028000
 800884c:	40023800 	.word	0x40023800
 8008850:	40020800 	.word	0x40020800
 8008854:	40020000 	.word	0x40020000
 8008858:	40020400 	.word	0x40020400
 800885c:	40021800 	.word	0x40021800

08008860 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008864:	4802      	ldr	r0, [pc, #8]	@ (8008870 <ETH_PHY_IO_Init+0x10>)
 8008866:	f7fb f875 	bl	8003954 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20005418 	.word	0x20005418

08008874 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  return 0;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	68f9      	ldr	r1, [r7, #12]
 8008896:	4807      	ldr	r0, [pc, #28]	@ (80088b4 <ETH_PHY_IO_ReadReg+0x30>)
 8008898:	f7fa fec4 	bl	8003624 <HAL_ETH_ReadPHYRegister>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80088a2:	f04f 33ff 	mov.w	r3, #4294967295
 80088a6:	e000      	b.n	80088aa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20005418 	.word	0x20005418

080088b8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	4807      	ldr	r0, [pc, #28]	@ (80088e8 <ETH_PHY_IO_WriteReg+0x30>)
 80088cc:	f7fa fef5 	bl	80036ba <HAL_ETH_WritePHYRegister>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80088d6:	f04f 33ff 	mov.w	r3, #4294967295
 80088da:	e000      	b.n	80088de <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20005418 	.word	0x20005418

080088ec <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80088f0:	f7f8 ffa2 	bl	8001838 <HAL_GetTick>
 80088f4:	4603      	mov	r3, r0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b0a0      	sub	sp, #128	@ 0x80
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	2264      	movs	r2, #100	@ 0x64
 800890a:	2100      	movs	r1, #0
 800890c:	4618      	mov	r0, r3
 800890e:	f00b f841 	bl	8013994 <memset>
  int32_t PHYLinkState = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800891a:	2300      	movs	r3, #0
 800891c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800891e:	2300      	movs	r3, #0
 8008920:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008922:	483a      	ldr	r0, [pc, #232]	@ (8008a0c <ethernet_link_check_state+0x110>)
 8008924:	f7f8 feaf 	bl	8001686 <LAN8742_GetLinkState>
 8008928:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008930:	089b      	lsrs	r3, r3, #2
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00c      	beq.n	8008956 <ethernet_link_check_state+0x5a>
 800893c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800893e:	2b01      	cmp	r3, #1
 8008940:	dc09      	bgt.n	8008956 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8008942:	4833      	ldr	r0, [pc, #204]	@ (8008a10 <ethernet_link_check_state+0x114>)
 8008944:	f7fa fb55 	bl	8002ff2 <HAL_ETH_Stop>
    netif_set_down(netif);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 f81d 	bl	8009988 <netif_set_down>
    netif_set_link_down(netif);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f880 	bl	8009a54 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008954:	e055      	b.n	8008a02 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d14e      	bne.n	8008a02 <ethernet_link_check_state+0x106>
 8008964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008966:	2b01      	cmp	r3, #1
 8008968:	dd4b      	ble.n	8008a02 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800896a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800896c:	3b02      	subs	r3, #2
 800896e:	2b03      	cmp	r3, #3
 8008970:	d82a      	bhi.n	80089c8 <ethernet_link_check_state+0xcc>
 8008972:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <ethernet_link_check_state+0x7c>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008989 	.word	0x08008989
 800897c:	0800899b 	.word	0x0800899b
 8008980:	080089ab 	.word	0x080089ab
 8008984:	080089bb 	.word	0x080089bb
      duplex = ETH_FULLDUPLEX_MODE;
 8008988:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800898c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800898e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008992:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008994:	2301      	movs	r3, #1
 8008996:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008998:	e017      	b.n	80089ca <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800899a:	2300      	movs	r3, #0
 800899c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800899e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80089a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80089a4:	2301      	movs	r3, #1
 80089a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80089a8:	e00f      	b.n	80089ca <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80089aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089ae:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80089b0:	2300      	movs	r3, #0
 80089b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80089b4:	2301      	movs	r3, #1
 80089b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80089b8:	e007      	b.n	80089ca <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80089be:	2300      	movs	r3, #0
 80089c0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80089c2:	2301      	movs	r3, #1
 80089c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80089c6:	e000      	b.n	80089ca <ethernet_link_check_state+0xce>
      break;
 80089c8:	bf00      	nop
    if(linkchanged)
 80089ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d018      	beq.n	8008a02 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80089d0:	f107 030c 	add.w	r3, r7, #12
 80089d4:	4619      	mov	r1, r3
 80089d6:	480e      	ldr	r0, [pc, #56]	@ (8008a10 <ethernet_link_check_state+0x114>)
 80089d8:	f7fa feb8 	bl	800374c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80089dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089de:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80089e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80089e4:	f107 030c 	add.w	r3, r7, #12
 80089e8:	4619      	mov	r1, r3
 80089ea:	4809      	ldr	r0, [pc, #36]	@ (8008a10 <ethernet_link_check_state+0x114>)
 80089ec:	f7fa ff98 	bl	8003920 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80089f0:	4807      	ldr	r0, [pc, #28]	@ (8008a10 <ethernet_link_check_state+0x114>)
 80089f2:	f7fa fa9f 	bl	8002f34 <HAL_ETH_Start>
      netif_set_up(netif);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 ff5a 	bl	80098b0 <netif_set_up>
      netif_set_link_up(netif);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fff5 	bl	80099ec <netif_set_link_up>
}
 8008a02:	bf00      	nop
 8008a04:	3780      	adds	r7, #128	@ 0x80
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20005500 	.word	0x20005500
 8008a10:	20005418 	.word	0x20005418

08008a14 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008a1c:	4812      	ldr	r0, [pc, #72]	@ (8008a68 <HAL_ETH_RxAllocateCallback+0x54>)
 8008a1e:	f000 fcc1 	bl	80093a4 <memp_malloc_pool>
 8008a22:	60f8      	str	r0, [r7, #12]
  if (p)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d014      	beq.n	8008a54 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f103 0220 	add.w	r2, r3, #32
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4a0d      	ldr	r2, [pc, #52]	@ (8008a6c <HAL_ETH_RxAllocateCallback+0x58>)
 8008a38:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008a42:	9201      	str	r2, [sp, #4]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2241      	movs	r2, #65	@ 0x41
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f001 f9f7 	bl	8009e40 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008a52:	e005      	b.n	8008a60 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008a54:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	080174f0 	.word	0x080174f0
 8008a6c:	0800868d 	.word	0x0800868d
 8008a70:	20005414 	.word	0x20005414

08008a74 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3b20      	subs	r3, #32
 8008a92:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	887a      	ldrh	r2, [r7, #2]
 8008aa4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d103      	bne.n	8008ab6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e003      	b.n	8008abe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	61fb      	str	r3, [r7, #28]
 8008aca:	e009      	b.n	8008ae0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	891a      	ldrh	r2, [r3, #8]
 8008ad0:	887b      	ldrh	r3, [r7, #2]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f2      	bne.n	8008acc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008ae6:	887b      	ldrh	r3, [r7, #2]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff fc20 	bl	8008330 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008af0:	bf00      	nop
 8008af2:	3720      	adds	r7, #32
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	b21a      	sxth	r2, r3
 8008b08:	88fb      	ldrh	r3, [r7, #6]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	b21b      	sxth	r3, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	b21b      	sxth	r3, r3
 8008b14:	b29b      	uxth	r3, r3
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b083      	sub	sp, #12
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	061a      	lsls	r2, r3, #24
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	021b      	lsls	r3, r3, #8
 8008b32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	0e1b      	lsrs	r3, r3, #24
 8008b46:	4313      	orrs	r3, r2
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008b5e:	f000 f8d5 	bl	8008d0c <mem_init>
  memp_init();
 8008b62:	f000 fbdb 	bl	800931c <memp_init>
  pbuf_init();
  netif_init();
 8008b66:	f000 fcd9 	bl	800951c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008b6a:	f007 f863 	bl	800fc34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008b6e:	f001 fdbf 	bl	800a6f0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008b72:	f006 ffd5 	bl	800fb20 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008b8a:	4b05      	ldr	r3, [pc, #20]	@ (8008ba0 <ptr_to_mem+0x20>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	4413      	add	r3, r2
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20005b8c 	.word	0x20005b8c

08008ba4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008bac:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <mem_to_ptr+0x20>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	b29b      	uxth	r3, r3
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20005b8c 	.word	0x20005b8c

08008bc8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008bd0:	4b45      	ldr	r3, [pc, #276]	@ (8008ce8 <plug_holes+0x120>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d206      	bcs.n	8008be8 <plug_holes+0x20>
 8008bda:	4b44      	ldr	r3, [pc, #272]	@ (8008cec <plug_holes+0x124>)
 8008bdc:	f240 12df 	movw	r2, #479	@ 0x1df
 8008be0:	4943      	ldr	r1, [pc, #268]	@ (8008cf0 <plug_holes+0x128>)
 8008be2:	4844      	ldr	r0, [pc, #272]	@ (8008cf4 <plug_holes+0x12c>)
 8008be4:	f00a fd7e 	bl	80136e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008be8:	4b43      	ldr	r3, [pc, #268]	@ (8008cf8 <plug_holes+0x130>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d306      	bcc.n	8008c00 <plug_holes+0x38>
 8008bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8008cec <plug_holes+0x124>)
 8008bf4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008bf8:	4940      	ldr	r1, [pc, #256]	@ (8008cfc <plug_holes+0x134>)
 8008bfa:	483e      	ldr	r0, [pc, #248]	@ (8008cf4 <plug_holes+0x12c>)
 8008bfc:	f00a fd72 	bl	80136e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	791b      	ldrb	r3, [r3, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d006      	beq.n	8008c16 <plug_holes+0x4e>
 8008c08:	4b38      	ldr	r3, [pc, #224]	@ (8008cec <plug_holes+0x124>)
 8008c0a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008c0e:	493c      	ldr	r1, [pc, #240]	@ (8008d00 <plug_holes+0x138>)
 8008c10:	4838      	ldr	r0, [pc, #224]	@ (8008cf4 <plug_holes+0x12c>)
 8008c12:	f00a fd67 	bl	80136e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008c1e:	d906      	bls.n	8008c2e <plug_holes+0x66>
 8008c20:	4b32      	ldr	r3, [pc, #200]	@ (8008cec <plug_holes+0x124>)
 8008c22:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8008c26:	4937      	ldr	r1, [pc, #220]	@ (8008d04 <plug_holes+0x13c>)
 8008c28:	4832      	ldr	r0, [pc, #200]	@ (8008cf4 <plug_holes+0x12c>)
 8008c2a:	f00a fd5b 	bl	80136e4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7ff ffa4 	bl	8008b80 <ptr_to_mem>
 8008c38:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d024      	beq.n	8008c8c <plug_holes+0xc4>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	791b      	ldrb	r3, [r3, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d120      	bne.n	8008c8c <plug_holes+0xc4>
 8008c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8008cf8 <plug_holes+0x130>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d01b      	beq.n	8008c8c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008c54:	4b2c      	ldr	r3, [pc, #176]	@ (8008d08 <plug_holes+0x140>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d102      	bne.n	8008c64 <plug_holes+0x9c>
      lfree = mem;
 8008c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d08 <plug_holes+0x140>)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	881a      	ldrh	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008c74:	d00a      	beq.n	8008c8c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff ff80 	bl	8008b80 <ptr_to_mem>
 8008c80:	4604      	mov	r4, r0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ff8e 	bl	8008ba4 <mem_to_ptr>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	885b      	ldrh	r3, [r3, #2]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff ff75 	bl	8008b80 <ptr_to_mem>
 8008c96:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d01f      	beq.n	8008ce0 <plug_holes+0x118>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	791b      	ldrb	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d11b      	bne.n	8008ce0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008ca8:	4b17      	ldr	r3, [pc, #92]	@ (8008d08 <plug_holes+0x140>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d102      	bne.n	8008cb8 <plug_holes+0xf0>
      lfree = pmem;
 8008cb2:	4a15      	ldr	r2, [pc, #84]	@ (8008d08 <plug_holes+0x140>)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	881a      	ldrh	r2, [r3, #0]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008cc8:	d00a      	beq.n	8008ce0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff ff56 	bl	8008b80 <ptr_to_mem>
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	68b8      	ldr	r0, [r7, #8]
 8008cd8:	f7ff ff64 	bl	8008ba4 <mem_to_ptr>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd90      	pop	{r4, r7, pc}
 8008ce8:	20005b8c 	.word	0x20005b8c
 8008cec:	080146b0 	.word	0x080146b0
 8008cf0:	080146e0 	.word	0x080146e0
 8008cf4:	080146f8 	.word	0x080146f8
 8008cf8:	20005b90 	.word	0x20005b90
 8008cfc:	08014720 	.word	0x08014720
 8008d00:	0801473c 	.word	0x0801473c
 8008d04:	08014758 	.word	0x08014758
 8008d08:	20005b94 	.word	0x20005b94

08008d0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008d12:	4b18      	ldr	r3, [pc, #96]	@ (8008d74 <mem_init+0x68>)
 8008d14:	3303      	adds	r3, #3
 8008d16:	f023 0303 	bic.w	r3, r3, #3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4b16      	ldr	r3, [pc, #88]	@ (8008d78 <mem_init+0x6c>)
 8008d1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008d20:	4b15      	ldr	r3, [pc, #84]	@ (8008d78 <mem_init+0x6c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8008d2c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008d3a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8008d3e:	f7ff ff1f 	bl	8008b80 <ptr_to_mem>
 8008d42:	4603      	mov	r3, r0
 8008d44:	4a0d      	ldr	r2, [pc, #52]	@ (8008d7c <mem_init+0x70>)
 8008d46:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008d48:	4b0c      	ldr	r3, [pc, #48]	@ (8008d7c <mem_init+0x70>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	@ (8008d7c <mem_init+0x70>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8008d58:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008d5a:	4b08      	ldr	r3, [pc, #32]	@ (8008d7c <mem_init+0x70>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8008d62:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008d64:	4b04      	ldr	r3, [pc, #16]	@ (8008d78 <mem_init+0x6c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a05      	ldr	r2, [pc, #20]	@ (8008d80 <mem_init+0x74>)
 8008d6a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20005538 	.word	0x20005538
 8008d78:	20005b8c 	.word	0x20005b8c
 8008d7c:	20005b90 	.word	0x20005b90
 8008d80:	20005b94 	.word	0x20005b94

08008d84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff ff09 	bl	8008ba4 <mem_to_ptr>
 8008d92:	4603      	mov	r3, r0
 8008d94:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fef0 	bl	8008b80 <ptr_to_mem>
 8008da0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	885b      	ldrh	r3, [r3, #2]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff feea 	bl	8008b80 <ptr_to_mem>
 8008dac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008db6:	d818      	bhi.n	8008dea <mem_link_valid+0x66>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	885b      	ldrh	r3, [r3, #2]
 8008dbc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008dc0:	d813      	bhi.n	8008dea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008dc6:	8afa      	ldrh	r2, [r7, #22]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d004      	beq.n	8008dd6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	8afa      	ldrh	r2, [r7, #22]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d109      	bne.n	8008dea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008dd6:	4b08      	ldr	r3, [pc, #32]	@ (8008df8 <mem_link_valid+0x74>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d006      	beq.n	8008dee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	885b      	ldrh	r3, [r3, #2]
 8008de4:	8afa      	ldrh	r2, [r7, #22]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d001      	beq.n	8008dee <mem_link_valid+0x6a>
    return 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e000      	b.n	8008df0 <mem_link_valid+0x6c>
  }
  return 1;
 8008dee:	2301      	movs	r3, #1
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20005b90 	.word	0x20005b90

08008dfc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d04c      	beq.n	8008ea4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f003 0303 	and.w	r3, r3, #3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d007      	beq.n	8008e24 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008e14:	4b25      	ldr	r3, [pc, #148]	@ (8008eac <mem_free+0xb0>)
 8008e16:	f240 2273 	movw	r2, #627	@ 0x273
 8008e1a:	4925      	ldr	r1, [pc, #148]	@ (8008eb0 <mem_free+0xb4>)
 8008e1c:	4825      	ldr	r0, [pc, #148]	@ (8008eb4 <mem_free+0xb8>)
 8008e1e:	f00a fc61 	bl	80136e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008e22:	e040      	b.n	8008ea6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3b08      	subs	r3, #8
 8008e28:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008e2a:	4b23      	ldr	r3, [pc, #140]	@ (8008eb8 <mem_free+0xbc>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d306      	bcc.n	8008e42 <mem_free+0x46>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f103 020c 	add.w	r2, r3, #12
 8008e3a:	4b20      	ldr	r3, [pc, #128]	@ (8008ebc <mem_free+0xc0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d907      	bls.n	8008e52 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008e42:	4b1a      	ldr	r3, [pc, #104]	@ (8008eac <mem_free+0xb0>)
 8008e44:	f240 227f 	movw	r2, #639	@ 0x27f
 8008e48:	491d      	ldr	r1, [pc, #116]	@ (8008ec0 <mem_free+0xc4>)
 8008e4a:	481a      	ldr	r0, [pc, #104]	@ (8008eb4 <mem_free+0xb8>)
 8008e4c:	f00a fc4a 	bl	80136e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008e50:	e029      	b.n	8008ea6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	791b      	ldrb	r3, [r3, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d107      	bne.n	8008e6a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008e5a:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <mem_free+0xb0>)
 8008e5c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8008e60:	4918      	ldr	r1, [pc, #96]	@ (8008ec4 <mem_free+0xc8>)
 8008e62:	4814      	ldr	r0, [pc, #80]	@ (8008eb4 <mem_free+0xb8>)
 8008e64:	f00a fc3e 	bl	80136e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008e68:	e01d      	b.n	8008ea6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7ff ff8a 	bl	8008d84 <mem_link_valid>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d107      	bne.n	8008e86 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008e76:	4b0d      	ldr	r3, [pc, #52]	@ (8008eac <mem_free+0xb0>)
 8008e78:	f240 2295 	movw	r2, #661	@ 0x295
 8008e7c:	4912      	ldr	r1, [pc, #72]	@ (8008ec8 <mem_free+0xcc>)
 8008e7e:	480d      	ldr	r0, [pc, #52]	@ (8008eb4 <mem_free+0xb8>)
 8008e80:	f00a fc30 	bl	80136e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008e84:	e00f      	b.n	8008ea6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008ecc <mem_free+0xd0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d202      	bcs.n	8008e9c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008e96:	4a0d      	ldr	r2, [pc, #52]	@ (8008ecc <mem_free+0xd0>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fe93 	bl	8008bc8 <plug_holes>
 8008ea2:	e000      	b.n	8008ea6 <mem_free+0xaa>
    return;
 8008ea4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	080146b0 	.word	0x080146b0
 8008eb0:	08014784 	.word	0x08014784
 8008eb4:	080146f8 	.word	0x080146f8
 8008eb8:	20005b8c 	.word	0x20005b8c
 8008ebc:	20005b90 	.word	0x20005b90
 8008ec0:	080147a8 	.word	0x080147a8
 8008ec4:	080147c4 	.word	0x080147c4
 8008ec8:	080147ec 	.word	0x080147ec
 8008ecc:	20005b94 	.word	0x20005b94

08008ed0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008edc:	887b      	ldrh	r3, [r7, #2]
 8008ede:	3303      	adds	r3, #3
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008ee8:	8bfb      	ldrh	r3, [r7, #30]
 8008eea:	2b0b      	cmp	r3, #11
 8008eec:	d801      	bhi.n	8008ef2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008eee:	230c      	movs	r3, #12
 8008ef0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008ef2:	8bfb      	ldrh	r3, [r7, #30]
 8008ef4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008ef8:	d803      	bhi.n	8008f02 <mem_trim+0x32>
 8008efa:	8bfa      	ldrh	r2, [r7, #30]
 8008efc:	887b      	ldrh	r3, [r7, #2]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d201      	bcs.n	8008f06 <mem_trim+0x36>
    return NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e0cc      	b.n	80090a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008f06:	4b68      	ldr	r3, [pc, #416]	@ (80090a8 <mem_trim+0x1d8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d304      	bcc.n	8008f1a <mem_trim+0x4a>
 8008f10:	4b66      	ldr	r3, [pc, #408]	@ (80090ac <mem_trim+0x1dc>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d306      	bcc.n	8008f28 <mem_trim+0x58>
 8008f1a:	4b65      	ldr	r3, [pc, #404]	@ (80090b0 <mem_trim+0x1e0>)
 8008f1c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008f20:	4964      	ldr	r1, [pc, #400]	@ (80090b4 <mem_trim+0x1e4>)
 8008f22:	4865      	ldr	r0, [pc, #404]	@ (80090b8 <mem_trim+0x1e8>)
 8008f24:	f00a fbde 	bl	80136e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008f28:	4b5f      	ldr	r3, [pc, #380]	@ (80090a8 <mem_trim+0x1d8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d304      	bcc.n	8008f3c <mem_trim+0x6c>
 8008f32:	4b5e      	ldr	r3, [pc, #376]	@ (80090ac <mem_trim+0x1dc>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d301      	bcc.n	8008f40 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	e0af      	b.n	80090a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3b08      	subs	r3, #8
 8008f44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008f46:	69b8      	ldr	r0, [r7, #24]
 8008f48:	f7ff fe2c 	bl	8008ba4 <mem_to_ptr>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	881a      	ldrh	r2, [r3, #0]
 8008f54:	8afb      	ldrh	r3, [r7, #22]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	3b08      	subs	r3, #8
 8008f5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008f5e:	8bfa      	ldrh	r2, [r7, #30]
 8008f60:	8abb      	ldrh	r3, [r7, #20]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d906      	bls.n	8008f74 <mem_trim+0xa4>
 8008f66:	4b52      	ldr	r3, [pc, #328]	@ (80090b0 <mem_trim+0x1e0>)
 8008f68:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008f6c:	4953      	ldr	r1, [pc, #332]	@ (80090bc <mem_trim+0x1ec>)
 8008f6e:	4852      	ldr	r0, [pc, #328]	@ (80090b8 <mem_trim+0x1e8>)
 8008f70:	f00a fbb8 	bl	80136e4 <iprintf>
  if (newsize > size) {
 8008f74:	8bfa      	ldrh	r2, [r7, #30]
 8008f76:	8abb      	ldrh	r3, [r7, #20]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d901      	bls.n	8008f80 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e08f      	b.n	80090a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008f80:	8bfa      	ldrh	r2, [r7, #30]
 8008f82:	8abb      	ldrh	r3, [r7, #20]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d101      	bne.n	8008f8c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	e089      	b.n	80090a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff fdf5 	bl	8008b80 <ptr_to_mem>
 8008f96:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	791b      	ldrb	r3, [r3, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d13f      	bne.n	8009020 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008fa8:	d106      	bne.n	8008fb8 <mem_trim+0xe8>
 8008faa:	4b41      	ldr	r3, [pc, #260]	@ (80090b0 <mem_trim+0x1e0>)
 8008fac:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008fb0:	4943      	ldr	r1, [pc, #268]	@ (80090c0 <mem_trim+0x1f0>)
 8008fb2:	4841      	ldr	r0, [pc, #260]	@ (80090b8 <mem_trim+0x1e8>)
 8008fb4:	f00a fb96 	bl	80136e4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008fbe:	8afa      	ldrh	r2, [r7, #22]
 8008fc0:	8bfb      	ldrh	r3, [r7, #30]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008fca:	4b3e      	ldr	r3, [pc, #248]	@ (80090c4 <mem_trim+0x1f4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d106      	bne.n	8008fe2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008fd4:	89fb      	ldrh	r3, [r7, #14]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff fdd2 	bl	8008b80 <ptr_to_mem>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	4a39      	ldr	r2, [pc, #228]	@ (80090c4 <mem_trim+0x1f4>)
 8008fe0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008fe2:	89fb      	ldrh	r3, [r7, #14]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff fdcb 	bl	8008b80 <ptr_to_mem>
 8008fea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	89ba      	ldrh	r2, [r7, #12]
 8008ff6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	8afa      	ldrh	r2, [r7, #22]
 8008ffc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	89fa      	ldrh	r2, [r7, #14]
 8009002:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800900c:	d047      	beq.n	800909e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff fdb4 	bl	8008b80 <ptr_to_mem>
 8009018:	4602      	mov	r2, r0
 800901a:	89fb      	ldrh	r3, [r7, #14]
 800901c:	8053      	strh	r3, [r2, #2]
 800901e:	e03e      	b.n	800909e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009020:	8bfb      	ldrh	r3, [r7, #30]
 8009022:	f103 0214 	add.w	r2, r3, #20
 8009026:	8abb      	ldrh	r3, [r7, #20]
 8009028:	429a      	cmp	r2, r3
 800902a:	d838      	bhi.n	800909e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800902c:	8afa      	ldrh	r2, [r7, #22]
 800902e:	8bfb      	ldrh	r3, [r7, #30]
 8009030:	4413      	add	r3, r2
 8009032:	b29b      	uxth	r3, r3
 8009034:	3308      	adds	r3, #8
 8009036:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009040:	d106      	bne.n	8009050 <mem_trim+0x180>
 8009042:	4b1b      	ldr	r3, [pc, #108]	@ (80090b0 <mem_trim+0x1e0>)
 8009044:	f240 3216 	movw	r2, #790	@ 0x316
 8009048:	491d      	ldr	r1, [pc, #116]	@ (80090c0 <mem_trim+0x1f0>)
 800904a:	481b      	ldr	r0, [pc, #108]	@ (80090b8 <mem_trim+0x1e8>)
 800904c:	f00a fb4a 	bl	80136e4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009050:	89fb      	ldrh	r3, [r7, #14]
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff fd94 	bl	8008b80 <ptr_to_mem>
 8009058:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800905a:	4b1a      	ldr	r3, [pc, #104]	@ (80090c4 <mem_trim+0x1f4>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	429a      	cmp	r2, r3
 8009062:	d202      	bcs.n	800906a <mem_trim+0x19a>
      lfree = mem2;
 8009064:	4a17      	ldr	r2, [pc, #92]	@ (80090c4 <mem_trim+0x1f4>)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2200      	movs	r2, #0
 800906e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	881a      	ldrh	r2, [r3, #0]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	8afa      	ldrh	r2, [r7, #22]
 800907c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	89fa      	ldrh	r2, [r7, #14]
 8009082:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800908c:	d007      	beq.n	800909e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff fd74 	bl	8008b80 <ptr_to_mem>
 8009098:	4602      	mov	r2, r0
 800909a:	89fb      	ldrh	r3, [r7, #14]
 800909c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800909e:	687b      	ldr	r3, [r7, #4]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3720      	adds	r7, #32
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20005b8c 	.word	0x20005b8c
 80090ac:	20005b90 	.word	0x20005b90
 80090b0:	080146b0 	.word	0x080146b0
 80090b4:	08014820 	.word	0x08014820
 80090b8:	080146f8 	.word	0x080146f8
 80090bc:	08014838 	.word	0x08014838
 80090c0:	08014858 	.word	0x08014858
 80090c4:	20005b94 	.word	0x20005b94

080090c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <mem_malloc+0x14>
    return NULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	e0d9      	b.n	8009290 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	3303      	adds	r3, #3
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80090e8:	8bbb      	ldrh	r3, [r7, #28]
 80090ea:	2b0b      	cmp	r3, #11
 80090ec:	d801      	bhi.n	80090f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80090ee:	230c      	movs	r3, #12
 80090f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80090f2:	8bbb      	ldrh	r3, [r7, #28]
 80090f4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80090f8:	d803      	bhi.n	8009102 <mem_malloc+0x3a>
 80090fa:	8bba      	ldrh	r2, [r7, #28]
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d201      	bcs.n	8009106 <mem_malloc+0x3e>
    return NULL;
 8009102:	2300      	movs	r3, #0
 8009104:	e0c4      	b.n	8009290 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009106:	4b64      	ldr	r3, [pc, #400]	@ (8009298 <mem_malloc+0x1d0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff fd4a 	bl	8008ba4 <mem_to_ptr>
 8009110:	4603      	mov	r3, r0
 8009112:	83fb      	strh	r3, [r7, #30]
 8009114:	e0b4      	b.n	8009280 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009116:	8bfb      	ldrh	r3, [r7, #30]
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fd31 	bl	8008b80 <ptr_to_mem>
 800911e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	791b      	ldrb	r3, [r3, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	f040 80a4 	bne.w	8009272 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	8bfb      	ldrh	r3, [r7, #30]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	f1a3 0208 	sub.w	r2, r3, #8
 8009138:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800913a:	429a      	cmp	r2, r3
 800913c:	f0c0 8099 	bcc.w	8009272 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	8bfb      	ldrh	r3, [r7, #30]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	f1a3 0208 	sub.w	r2, r3, #8
 800914e:	8bbb      	ldrh	r3, [r7, #28]
 8009150:	3314      	adds	r3, #20
 8009152:	429a      	cmp	r2, r3
 8009154:	d333      	bcc.n	80091be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009156:	8bfa      	ldrh	r2, [r7, #30]
 8009158:	8bbb      	ldrh	r3, [r7, #28]
 800915a:	4413      	add	r3, r2
 800915c:	b29b      	uxth	r3, r3
 800915e:	3308      	adds	r3, #8
 8009160:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009162:	8a7b      	ldrh	r3, [r7, #18]
 8009164:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009168:	d106      	bne.n	8009178 <mem_malloc+0xb0>
 800916a:	4b4c      	ldr	r3, [pc, #304]	@ (800929c <mem_malloc+0x1d4>)
 800916c:	f240 3287 	movw	r2, #903	@ 0x387
 8009170:	494b      	ldr	r1, [pc, #300]	@ (80092a0 <mem_malloc+0x1d8>)
 8009172:	484c      	ldr	r0, [pc, #304]	@ (80092a4 <mem_malloc+0x1dc>)
 8009174:	f00a fab6 	bl	80136e4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009178:	8a7b      	ldrh	r3, [r7, #18]
 800917a:	4618      	mov	r0, r3
 800917c:	f7ff fd00 	bl	8008b80 <ptr_to_mem>
 8009180:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	881a      	ldrh	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8bfa      	ldrh	r2, [r7, #30]
 8009194:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	8a7a      	ldrh	r2, [r7, #18]
 800919a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2201      	movs	r2, #1
 80091a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80091aa:	d00b      	beq.n	80091c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fce5 	bl	8008b80 <ptr_to_mem>
 80091b6:	4602      	mov	r2, r0
 80091b8:	8a7b      	ldrh	r3, [r7, #18]
 80091ba:	8053      	strh	r3, [r2, #2]
 80091bc:	e002      	b.n	80091c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2201      	movs	r2, #1
 80091c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80091c4:	4b34      	ldr	r3, [pc, #208]	@ (8009298 <mem_malloc+0x1d0>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d127      	bne.n	800921e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80091ce:	4b32      	ldr	r3, [pc, #200]	@ (8009298 <mem_malloc+0x1d0>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80091d4:	e005      	b.n	80091e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff fcd0 	bl	8008b80 <ptr_to_mem>
 80091e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <mem_malloc+0x12c>
 80091ea:	4b2f      	ldr	r3, [pc, #188]	@ (80092a8 <mem_malloc+0x1e0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d1f0      	bne.n	80091d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80091f4:	4a28      	ldr	r2, [pc, #160]	@ (8009298 <mem_malloc+0x1d0>)
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80091fa:	4b27      	ldr	r3, [pc, #156]	@ (8009298 <mem_malloc+0x1d0>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4b2a      	ldr	r3, [pc, #168]	@ (80092a8 <mem_malloc+0x1e0>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d00b      	beq.n	800921e <mem_malloc+0x156>
 8009206:	4b24      	ldr	r3, [pc, #144]	@ (8009298 <mem_malloc+0x1d0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	791b      	ldrb	r3, [r3, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d006      	beq.n	800921e <mem_malloc+0x156>
 8009210:	4b22      	ldr	r3, [pc, #136]	@ (800929c <mem_malloc+0x1d4>)
 8009212:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009216:	4925      	ldr	r1, [pc, #148]	@ (80092ac <mem_malloc+0x1e4>)
 8009218:	4822      	ldr	r0, [pc, #136]	@ (80092a4 <mem_malloc+0x1dc>)
 800921a:	f00a fa63 	bl	80136e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800921e:	8bba      	ldrh	r2, [r7, #28]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	4413      	add	r3, r2
 8009224:	3308      	adds	r3, #8
 8009226:	4a20      	ldr	r2, [pc, #128]	@ (80092a8 <mem_malloc+0x1e0>)
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	4293      	cmp	r3, r2
 800922c:	d906      	bls.n	800923c <mem_malloc+0x174>
 800922e:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <mem_malloc+0x1d4>)
 8009230:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009234:	491e      	ldr	r1, [pc, #120]	@ (80092b0 <mem_malloc+0x1e8>)
 8009236:	481b      	ldr	r0, [pc, #108]	@ (80092a4 <mem_malloc+0x1dc>)
 8009238:	f00a fa54 	bl	80136e4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d006      	beq.n	8009254 <mem_malloc+0x18c>
 8009246:	4b15      	ldr	r3, [pc, #84]	@ (800929c <mem_malloc+0x1d4>)
 8009248:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800924c:	4919      	ldr	r1, [pc, #100]	@ (80092b4 <mem_malloc+0x1ec>)
 800924e:	4815      	ldr	r0, [pc, #84]	@ (80092a4 <mem_malloc+0x1dc>)
 8009250:	f00a fa48 	bl	80136e4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d006      	beq.n	800926c <mem_malloc+0x1a4>
 800925e:	4b0f      	ldr	r3, [pc, #60]	@ (800929c <mem_malloc+0x1d4>)
 8009260:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009264:	4914      	ldr	r1, [pc, #80]	@ (80092b8 <mem_malloc+0x1f0>)
 8009266:	480f      	ldr	r0, [pc, #60]	@ (80092a4 <mem_malloc+0x1dc>)
 8009268:	f00a fa3c 	bl	80136e4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	3308      	adds	r3, #8
 8009270:	e00e      	b.n	8009290 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009272:	8bfb      	ldrh	r3, [r7, #30]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fc83 	bl	8008b80 <ptr_to_mem>
 800927a:	4603      	mov	r3, r0
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009280:	8bfa      	ldrh	r2, [r7, #30]
 8009282:	8bbb      	ldrh	r3, [r7, #28]
 8009284:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8009288:	429a      	cmp	r2, r3
 800928a:	f4ff af44 	bcc.w	8009116 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3720      	adds	r7, #32
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20005b94 	.word	0x20005b94
 800929c:	080146b0 	.word	0x080146b0
 80092a0:	08014858 	.word	0x08014858
 80092a4:	080146f8 	.word	0x080146f8
 80092a8:	20005b90 	.word	0x20005b90
 80092ac:	0801486c 	.word	0x0801486c
 80092b0:	08014888 	.word	0x08014888
 80092b4:	080148b8 	.word	0x080148b8
 80092b8:	080148e8 	.word	0x080148e8

080092bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	3303      	adds	r3, #3
 80092d2:	f023 0303 	bic.w	r3, r3, #3
 80092d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e011      	b.n	8009302 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	461a      	mov	r2, r3
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	4413      	add	r3, r2
 80092fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	885b      	ldrh	r3, [r3, #2]
 8009306:	461a      	mov	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4293      	cmp	r3, r2
 800930c:	dbe7      	blt.n	80092de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009322:	2300      	movs	r3, #0
 8009324:	80fb      	strh	r3, [r7, #6]
 8009326:	e009      	b.n	800933c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	4a08      	ldr	r2, [pc, #32]	@ (800934c <memp_init+0x30>)
 800932c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff ffc3 	bl	80092bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009336:	88fb      	ldrh	r3, [r7, #6]
 8009338:	3301      	adds	r3, #1
 800933a:	80fb      	strh	r3, [r7, #6]
 800933c:	88fb      	ldrh	r3, [r7, #6]
 800933e:	2b08      	cmp	r3, #8
 8009340:	d9f2      	bls.n	8009328 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	08017568 	.word	0x08017568

08009350 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d012      	beq.n	800938c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d006      	beq.n	8009388 <do_memp_malloc_pool+0x38>
 800937a:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <do_memp_malloc_pool+0x48>)
 800937c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009380:	4906      	ldr	r1, [pc, #24]	@ (800939c <do_memp_malloc_pool+0x4c>)
 8009382:	4807      	ldr	r0, [pc, #28]	@ (80093a0 <do_memp_malloc_pool+0x50>)
 8009384:	f00a f9ae 	bl	80136e4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	e000      	b.n	800938e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	0801490c 	.word	0x0801490c
 800939c:	0801493c 	.word	0x0801493c
 80093a0:	08014960 	.word	0x08014960

080093a4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <memp_malloc_pool+0x1c>
 80093b2:	4b0a      	ldr	r3, [pc, #40]	@ (80093dc <memp_malloc_pool+0x38>)
 80093b4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80093b8:	4909      	ldr	r1, [pc, #36]	@ (80093e0 <memp_malloc_pool+0x3c>)
 80093ba:	480a      	ldr	r0, [pc, #40]	@ (80093e4 <memp_malloc_pool+0x40>)
 80093bc:	f00a f992 	bl	80136e4 <iprintf>
  if (desc == NULL) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <memp_malloc_pool+0x26>
    return NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	e003      	b.n	80093d2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff ffc0 	bl	8009350 <do_memp_malloc_pool>
 80093d0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	0801490c 	.word	0x0801490c
 80093e0:	08014988 	.word	0x08014988
 80093e4:	08014960 	.word	0x08014960

080093e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d908      	bls.n	800940a <memp_malloc+0x22>
 80093f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009424 <memp_malloc+0x3c>)
 80093fa:	f240 1257 	movw	r2, #343	@ 0x157
 80093fe:	490a      	ldr	r1, [pc, #40]	@ (8009428 <memp_malloc+0x40>)
 8009400:	480a      	ldr	r0, [pc, #40]	@ (800942c <memp_malloc+0x44>)
 8009402:	f00a f96f 	bl	80136e4 <iprintf>
 8009406:	2300      	movs	r3, #0
 8009408:	e008      	b.n	800941c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	4a08      	ldr	r2, [pc, #32]	@ (8009430 <memp_malloc+0x48>)
 800940e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff ff9c 	bl	8009350 <do_memp_malloc_pool>
 8009418:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800941a:	68fb      	ldr	r3, [r7, #12]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	0801490c 	.word	0x0801490c
 8009428:	0801499c 	.word	0x0801499c
 800942c:	08014960 	.word	0x08014960
 8009430:	08017568 	.word	0x08017568

08009434 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	f003 0303 	and.w	r3, r3, #3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d006      	beq.n	8009456 <do_memp_free_pool+0x22>
 8009448:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <do_memp_free_pool+0x40>)
 800944a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800944e:	490a      	ldr	r1, [pc, #40]	@ (8009478 <do_memp_free_pool+0x44>)
 8009450:	480a      	ldr	r0, [pc, #40]	@ (800947c <do_memp_free_pool+0x48>)
 8009452:	f00a f947 	bl	80136e4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	0801490c 	.word	0x0801490c
 8009478:	080149bc 	.word	0x080149bc
 800947c:	08014960 	.word	0x08014960

08009480 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <memp_free_pool+0x1e>
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <memp_free_pool+0x3c>)
 8009492:	f240 1295 	movw	r2, #405	@ 0x195
 8009496:	490a      	ldr	r1, [pc, #40]	@ (80094c0 <memp_free_pool+0x40>)
 8009498:	480a      	ldr	r0, [pc, #40]	@ (80094c4 <memp_free_pool+0x44>)
 800949a:	f00a f923 	bl	80136e4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d007      	beq.n	80094b4 <memp_free_pool+0x34>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ffc1 	bl	8009434 <do_memp_free_pool>
 80094b2:	e000      	b.n	80094b6 <memp_free_pool+0x36>
    return;
 80094b4:	bf00      	nop
}
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	0801490c 	.word	0x0801490c
 80094c0:	08014988 	.word	0x08014988
 80094c4:	08014960 	.word	0x08014960

080094c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	6039      	str	r1, [r7, #0]
 80094d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	2b08      	cmp	r3, #8
 80094d8:	d907      	bls.n	80094ea <memp_free+0x22>
 80094da:	4b0c      	ldr	r3, [pc, #48]	@ (800950c <memp_free+0x44>)
 80094dc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80094e0:	490b      	ldr	r1, [pc, #44]	@ (8009510 <memp_free+0x48>)
 80094e2:	480c      	ldr	r0, [pc, #48]	@ (8009514 <memp_free+0x4c>)
 80094e4:	f00a f8fe 	bl	80136e4 <iprintf>
 80094e8:	e00c      	b.n	8009504 <memp_free+0x3c>

  if (mem == NULL) {
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d008      	beq.n	8009502 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	4a09      	ldr	r2, [pc, #36]	@ (8009518 <memp_free+0x50>)
 80094f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff ff9a 	bl	8009434 <do_memp_free_pool>
 8009500:	e000      	b.n	8009504 <memp_free+0x3c>
    return;
 8009502:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	0801490c 	.word	0x0801490c
 8009510:	080149dc 	.word	0x080149dc
 8009514:	08014960 	.word	0x08014960
 8009518:	08017568 	.word	0x08017568

0800951c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009520:	bf00      	nop
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
	...

0800952c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d108      	bne.n	8009552 <netif_add+0x26>
 8009540:	4b57      	ldr	r3, [pc, #348]	@ (80096a0 <netif_add+0x174>)
 8009542:	f240 1227 	movw	r2, #295	@ 0x127
 8009546:	4957      	ldr	r1, [pc, #348]	@ (80096a4 <netif_add+0x178>)
 8009548:	4857      	ldr	r0, [pc, #348]	@ (80096a8 <netif_add+0x17c>)
 800954a:	f00a f8cb 	bl	80136e4 <iprintf>
 800954e:	2300      	movs	r3, #0
 8009550:	e0a2      	b.n	8009698 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	2b00      	cmp	r3, #0
 8009556:	d108      	bne.n	800956a <netif_add+0x3e>
 8009558:	4b51      	ldr	r3, [pc, #324]	@ (80096a0 <netif_add+0x174>)
 800955a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800955e:	4953      	ldr	r1, [pc, #332]	@ (80096ac <netif_add+0x180>)
 8009560:	4851      	ldr	r0, [pc, #324]	@ (80096a8 <netif_add+0x17c>)
 8009562:	f00a f8bf 	bl	80136e4 <iprintf>
 8009566:	2300      	movs	r3, #0
 8009568:	e096      	b.n	8009698 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009570:	4b4f      	ldr	r3, [pc, #316]	@ (80096b0 <netif_add+0x184>)
 8009572:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800957a:	4b4d      	ldr	r3, [pc, #308]	@ (80096b0 <netif_add+0x184>)
 800957c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009584:	4b4a      	ldr	r3, [pc, #296]	@ (80096b0 <netif_add+0x184>)
 8009586:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4a45      	ldr	r2, [pc, #276]	@ (80096b4 <netif_add+0x188>)
 800959e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a3a      	ldr	r2, [r7, #32]
 80095b8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80095ba:	4b3f      	ldr	r3, [pc, #252]	@ (80096b8 <netif_add+0x18c>)
 80095bc:	781a      	ldrb	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095c8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 f913 	bl	80097fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	4798      	blx	r3
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <netif_add+0xba>
    return NULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e058      	b.n	8009698 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095ec:	2bff      	cmp	r3, #255	@ 0xff
 80095ee:	d103      	bne.n	80095f8 <netif_add+0xcc>
        netif->num = 0;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80095fc:	4b2f      	ldr	r3, [pc, #188]	@ (80096bc <netif_add+0x190>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	e02b      	b.n	800965c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	429a      	cmp	r2, r3
 800960a:	d106      	bne.n	800961a <netif_add+0xee>
 800960c:	4b24      	ldr	r3, [pc, #144]	@ (80096a0 <netif_add+0x174>)
 800960e:	f240 128b 	movw	r2, #395	@ 0x18b
 8009612:	492b      	ldr	r1, [pc, #172]	@ (80096c0 <netif_add+0x194>)
 8009614:	4824      	ldr	r0, [pc, #144]	@ (80096a8 <netif_add+0x17c>)
 8009616:	f00a f865 	bl	80136e4 <iprintf>
        num_netifs++;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3301      	adds	r3, #1
 800961e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2bff      	cmp	r3, #255	@ 0xff
 8009624:	dd06      	ble.n	8009634 <netif_add+0x108>
 8009626:	4b1e      	ldr	r3, [pc, #120]	@ (80096a0 <netif_add+0x174>)
 8009628:	f240 128d 	movw	r2, #397	@ 0x18d
 800962c:	4925      	ldr	r1, [pc, #148]	@ (80096c4 <netif_add+0x198>)
 800962e:	481e      	ldr	r0, [pc, #120]	@ (80096a8 <netif_add+0x17c>)
 8009630:	f00a f858 	bl	80136e4 <iprintf>
        if (netif2->num == netif->num) {
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009640:	429a      	cmp	r2, r3
 8009642:	d108      	bne.n	8009656 <netif_add+0x12a>
          netif->num++;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800964a:	3301      	adds	r3, #1
 800964c:	b2da      	uxtb	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8009654:	e005      	b.n	8009662 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1d0      	bne.n	8009604 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1be      	bne.n	80095e6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800966e:	2bfe      	cmp	r3, #254	@ 0xfe
 8009670:	d103      	bne.n	800967a <netif_add+0x14e>
    netif_num = 0;
 8009672:	4b11      	ldr	r3, [pc, #68]	@ (80096b8 <netif_add+0x18c>)
 8009674:	2200      	movs	r2, #0
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	e006      	b.n	8009688 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009680:	3301      	adds	r3, #1
 8009682:	b2da      	uxtb	r2, r3
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <netif_add+0x18c>)
 8009686:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009688:	4b0c      	ldr	r3, [pc, #48]	@ (80096bc <netif_add+0x190>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009690:	4a0a      	ldr	r2, [pc, #40]	@ (80096bc <netif_add+0x190>)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009696:	68fb      	ldr	r3, [r7, #12]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	080149f8 	.word	0x080149f8
 80096a4:	08014a8c 	.word	0x08014a8c
 80096a8:	08014a48 	.word	0x08014a48
 80096ac:	08014aa8 	.word	0x08014aa8
 80096b0:	080175cc 	.word	0x080175cc
 80096b4:	08009ad7 	.word	0x08009ad7
 80096b8:	20008a8c 	.word	0x20008a8c
 80096bc:	20008a84 	.word	0x20008a84
 80096c0:	08014acc 	.word	0x08014acc
 80096c4:	08014ae0 	.word	0x08014ae0

080096c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f002 fb55 	bl	800bd84 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f006 ff23 	bl	8010528 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d106      	bne.n	800970c <netif_do_set_ipaddr+0x20>
 80096fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009774 <netif_do_set_ipaddr+0x88>)
 8009700:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8009704:	491c      	ldr	r1, [pc, #112]	@ (8009778 <netif_do_set_ipaddr+0x8c>)
 8009706:	481d      	ldr	r0, [pc, #116]	@ (800977c <netif_do_set_ipaddr+0x90>)
 8009708:	f009 ffec 	bl	80136e4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <netif_do_set_ipaddr+0x34>
 8009712:	4b18      	ldr	r3, [pc, #96]	@ (8009774 <netif_do_set_ipaddr+0x88>)
 8009714:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8009718:	4917      	ldr	r1, [pc, #92]	@ (8009778 <netif_do_set_ipaddr+0x8c>)
 800971a:	4818      	ldr	r0, [pc, #96]	@ (800977c <netif_do_set_ipaddr+0x90>)
 800971c:	f009 ffe2 	bl	80136e4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3304      	adds	r3, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d01c      	beq.n	8009768 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3304      	adds	r3, #4
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800973e:	f107 0314 	add.w	r3, r7, #20
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff ffbf 	bl	80096c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <netif_do_set_ipaddr+0x6a>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	e000      	b.n	8009758 <netif_do_set_ipaddr+0x6c>
 8009756:	2300      	movs	r3, #0
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800975c:	2101      	movs	r1, #1
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 f8d2 	bl	8009908 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009764:	2301      	movs	r3, #1
 8009766:	e000      	b.n	800976a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	080149f8 	.word	0x080149f8
 8009778:	08014b10 	.word	0x08014b10
 800977c:	08014a48 	.word	0x08014a48

08009780 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3308      	adds	r3, #8
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d00a      	beq.n	80097b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <netif_do_set_netmask+0x26>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	e000      	b.n	80097a8 <netif_do_set_netmask+0x28>
 80097a6:	2300      	movs	r3, #0
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80097ac:	2301      	movs	r3, #1
 80097ae:	e000      	b.n	80097b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	330c      	adds	r3, #12
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d00a      	beq.n	80097ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <netif_do_set_gw+0x26>
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	e000      	b.n	80097e6 <netif_do_set_gw+0x28>
 80097e4:	2300      	movs	r3, #0
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80097ea:	2301      	movs	r3, #1
 80097ec:	e000      	b.n	80097f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800980a:	2300      	movs	r3, #0
 800980c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800980e:	2300      	movs	r3, #0
 8009810:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009818:	4b1c      	ldr	r3, [pc, #112]	@ (800988c <netif_set_addr+0x90>)
 800981a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009822:	4b1a      	ldr	r3, [pc, #104]	@ (800988c <netif_set_addr+0x90>)
 8009824:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800982c:	4b17      	ldr	r3, [pc, #92]	@ (800988c <netif_set_addr+0x90>)
 800982e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <netif_set_addr+0x42>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <netif_set_addr+0x46>
 800983e:	2301      	movs	r3, #1
 8009840:	e000      	b.n	8009844 <netif_set_addr+0x48>
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d006      	beq.n	800985a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800984c:	f107 0310 	add.w	r3, r7, #16
 8009850:	461a      	mov	r2, r3
 8009852:	68b9      	ldr	r1, [r7, #8]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff ff49 	bl	80096ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff ff8e 	bl	8009780 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7ff ffa8 	bl	80097be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009874:	f107 0310 	add.w	r3, r7, #16
 8009878:	461a      	mov	r2, r3
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff ff35 	bl	80096ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009882:	bf00      	nop
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	080175cc 	.word	0x080175cc

08009890 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009898:	4a04      	ldr	r2, [pc, #16]	@ (80098ac <netif_set_default+0x1c>)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	20008a88 	.word	0x20008a88

080098b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d107      	bne.n	80098ce <netif_set_up+0x1e>
 80098be:	4b0f      	ldr	r3, [pc, #60]	@ (80098fc <netif_set_up+0x4c>)
 80098c0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80098c4:	490e      	ldr	r1, [pc, #56]	@ (8009900 <netif_set_up+0x50>)
 80098c6:	480f      	ldr	r0, [pc, #60]	@ (8009904 <netif_set_up+0x54>)
 80098c8:	f009 ff0c 	bl	80136e4 <iprintf>
 80098cc:	e013      	b.n	80098f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10c      	bne.n	80098f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80098e2:	f043 0301 	orr.w	r3, r3, #1
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80098ee:	2103      	movs	r1, #3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f809 	bl	8009908 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	080149f8 	.word	0x080149f8
 8009900:	08014b80 	.word	0x08014b80
 8009904:	08014a48 	.word	0x08014a48

08009908 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <netif_issue_reports+0x20>
 800991a:	4b18      	ldr	r3, [pc, #96]	@ (800997c <netif_issue_reports+0x74>)
 800991c:	f240 326d 	movw	r2, #877	@ 0x36d
 8009920:	4917      	ldr	r1, [pc, #92]	@ (8009980 <netif_issue_reports+0x78>)
 8009922:	4818      	ldr	r0, [pc, #96]	@ (8009984 <netif_issue_reports+0x7c>)
 8009924:	f009 fede 	bl	80136e4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d01e      	beq.n	8009974 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800993c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009940:	2b00      	cmp	r3, #0
 8009942:	d017      	beq.n	8009974 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d013      	beq.n	8009976 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3304      	adds	r3, #4
 8009952:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00e      	beq.n	8009976 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d007      	beq.n	8009976 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3304      	adds	r3, #4
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f007 fd45 	bl	80113fc <etharp_request>
 8009972:	e000      	b.n	8009976 <netif_issue_reports+0x6e>
    return;
 8009974:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	080149f8 	.word	0x080149f8
 8009980:	08014b9c 	.word	0x08014b9c
 8009984:	08014a48 	.word	0x08014a48

08009988 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d107      	bne.n	80099a6 <netif_set_down+0x1e>
 8009996:	4b12      	ldr	r3, [pc, #72]	@ (80099e0 <netif_set_down+0x58>)
 8009998:	f240 329b 	movw	r2, #923	@ 0x39b
 800999c:	4911      	ldr	r1, [pc, #68]	@ (80099e4 <netif_set_down+0x5c>)
 800999e:	4812      	ldr	r0, [pc, #72]	@ (80099e8 <netif_set_down+0x60>)
 80099a0:	f009 fea0 	bl	80136e4 <iprintf>
 80099a4:	e019      	b.n	80099da <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d012      	beq.n	80099da <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80099ba:	f023 0301 	bic.w	r3, r3, #1
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f007 f8cf 	bl	8010b78 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	080149f8 	.word	0x080149f8
 80099e4:	08014bc0 	.word	0x08014bc0
 80099e8:	08014a48 	.word	0x08014a48

080099ec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d107      	bne.n	8009a0a <netif_set_link_up+0x1e>
 80099fa:	4b13      	ldr	r3, [pc, #76]	@ (8009a48 <netif_set_link_up+0x5c>)
 80099fc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8009a00:	4912      	ldr	r1, [pc, #72]	@ (8009a4c <netif_set_link_up+0x60>)
 8009a02:	4813      	ldr	r0, [pc, #76]	@ (8009a50 <netif_set_link_up+0x64>)
 8009a04:	f009 fe6e 	bl	80136e4 <iprintf>
 8009a08:	e01b      	b.n	8009a42 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d114      	bne.n	8009a42 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a1e:	f043 0304 	orr.w	r3, r3, #4
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009a2a:	2103      	movs	r1, #3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ff6b 	bl	8009908 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <netif_set_link_up+0x56>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	080149f8 	.word	0x080149f8
 8009a4c:	08014be0 	.word	0x08014be0
 8009a50:	08014a48 	.word	0x08014a48

08009a54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d107      	bne.n	8009a72 <netif_set_link_down+0x1e>
 8009a62:	4b11      	ldr	r3, [pc, #68]	@ (8009aa8 <netif_set_link_down+0x54>)
 8009a64:	f240 4206 	movw	r2, #1030	@ 0x406
 8009a68:	4910      	ldr	r1, [pc, #64]	@ (8009aac <netif_set_link_down+0x58>)
 8009a6a:	4811      	ldr	r0, [pc, #68]	@ (8009ab0 <netif_set_link_down+0x5c>)
 8009a6c:	f009 fe3a 	bl	80136e4 <iprintf>
 8009a70:	e017      	b.n	8009aa2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d010      	beq.n	8009aa2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009a86:	f023 0304 	bic.w	r3, r3, #4
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <netif_set_link_down+0x4e>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	080149f8 	.word	0x080149f8
 8009aac:	08014c04 	.word	0x08014c04
 8009ab0:	08014a48 	.word	0x08014a48

08009ab4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	61da      	str	r2, [r3, #28]
  }
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b085      	sub	sp, #20
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009ae2:	f06f 030b 	mvn.w	r3, #11
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d013      	beq.n	8009b2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009b04:	4b0d      	ldr	r3, [pc, #52]	@ (8009b3c <netif_get_by_index+0x48>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60fb      	str	r3, [r7, #12]
 8009b0a:	e00c      	b.n	8009b26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b12:	3301      	adds	r3, #1
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	79fa      	ldrb	r2, [r7, #7]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d101      	bne.n	8009b20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	e006      	b.n	8009b2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1ef      	bne.n	8009b0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	20008a84 	.word	0x20008a84

08009b40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009b46:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <pbuf_free_ooseq+0x38>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b7c <pbuf_free_ooseq+0x3c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	607b      	str	r3, [r7, #4]
 8009b52:	e00a      	b.n	8009b6a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f002 f94f 	bl	800be00 <tcp_free_ooseq>
      return;
 8009b62:	e005      	b.n	8009b70 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1f1      	bne.n	8009b54 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20008a8d 	.word	0x20008a8d
 8009b7c:	20008a9c 	.word	0x20008a9c

08009b80 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009b84:	4b03      	ldr	r3, [pc, #12]	@ (8009b94 <pbuf_pool_is_empty+0x14>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009b8a:	bf00      	nop
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	20008a8d 	.word	0x20008a8d

08009b98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	80fb      	strh	r3, [r7, #6]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	88fa      	ldrh	r2, [r7, #6]
 8009bbe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	88ba      	ldrh	r2, [r7, #4]
 8009bc4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009bc6:	8b3b      	ldrh	r3, [r7, #24]
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	7f3a      	ldrb	r2, [r7, #28]
 8009bd2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	73da      	strb	r2, [r3, #15]
}
 8009be0:	bf00      	nop
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08c      	sub	sp, #48	@ 0x30
 8009bf0:	af02      	add	r7, sp, #8
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	71fb      	strb	r3, [r7, #7]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	80bb      	strh	r3, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009bfe:	79fb      	ldrb	r3, [r7, #7]
 8009c00:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009c02:	887b      	ldrh	r3, [r7, #2]
 8009c04:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009c08:	d07f      	beq.n	8009d0a <pbuf_alloc+0x11e>
 8009c0a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009c0e:	f300 80c8 	bgt.w	8009da2 <pbuf_alloc+0x1b6>
 8009c12:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009c16:	d010      	beq.n	8009c3a <pbuf_alloc+0x4e>
 8009c18:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009c1c:	f300 80c1 	bgt.w	8009da2 <pbuf_alloc+0x1b6>
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d002      	beq.n	8009c2a <pbuf_alloc+0x3e>
 8009c24:	2b41      	cmp	r3, #65	@ 0x41
 8009c26:	f040 80bc 	bne.w	8009da2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009c2a:	887a      	ldrh	r2, [r7, #2]
 8009c2c:	88bb      	ldrh	r3, [r7, #4]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	2000      	movs	r0, #0
 8009c32:	f000 f8d1 	bl	8009dd8 <pbuf_alloc_reference>
 8009c36:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8009c38:	e0bd      	b.n	8009db6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009c42:	88bb      	ldrh	r3, [r7, #4]
 8009c44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009c46:	2008      	movs	r0, #8
 8009c48:	f7ff fbce 	bl	80093e8 <memp_malloc>
 8009c4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d109      	bne.n	8009c68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009c54:	f7ff ff94 	bl	8009b80 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009c5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c60:	f000 faa8 	bl	800a1b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	e0a7      	b.n	8009db8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009c68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c6a:	3303      	adds	r3, #3
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	f023 0303 	bic.w	r3, r3, #3
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	8b7a      	ldrh	r2, [r7, #26]
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	bf28      	it	cs
 8009c80:	4613      	movcs	r3, r2
 8009c82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009c84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c86:	3310      	adds	r3, #16
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	3303      	adds	r3, #3
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	4618      	mov	r0, r3
 8009c94:	89f9      	ldrh	r1, [r7, #14]
 8009c96:	8b7a      	ldrh	r2, [r7, #26]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	887b      	ldrh	r3, [r7, #2]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	6938      	ldr	r0, [r7, #16]
 8009ca6:	f7ff ff77 	bl	8009b98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d006      	beq.n	8009cc4 <pbuf_alloc+0xd8>
 8009cb6:	4b42      	ldr	r3, [pc, #264]	@ (8009dc0 <pbuf_alloc+0x1d4>)
 8009cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cbc:	4941      	ldr	r1, [pc, #260]	@ (8009dc4 <pbuf_alloc+0x1d8>)
 8009cbe:	4842      	ldr	r0, [pc, #264]	@ (8009dc8 <pbuf_alloc+0x1dc>)
 8009cc0:	f009 fd10 	bl	80136e4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009cc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009cc6:	3303      	adds	r3, #3
 8009cc8:	f023 0303 	bic.w	r3, r3, #3
 8009ccc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8009cd0:	d106      	bne.n	8009ce0 <pbuf_alloc+0xf4>
 8009cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc0 <pbuf_alloc+0x1d4>)
 8009cd4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8009cd8:	493c      	ldr	r1, [pc, #240]	@ (8009dcc <pbuf_alloc+0x1e0>)
 8009cda:	483b      	ldr	r0, [pc, #236]	@ (8009dc8 <pbuf_alloc+0x1dc>)
 8009cdc:	f009 fd02 	bl	80136e4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cea:	e002      	b.n	8009cf2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009cf6:	8b7a      	ldrh	r2, [r7, #26]
 8009cf8:	89fb      	ldrh	r3, [r7, #14]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8009d02:	8b7b      	ldrh	r3, [r7, #26]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d19e      	bne.n	8009c46 <pbuf_alloc+0x5a>
      break;
 8009d08:	e055      	b.n	8009db6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009d0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d0c:	3303      	adds	r3, #3
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	f023 0303 	bic.w	r3, r3, #3
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	88bb      	ldrh	r3, [r7, #4]
 8009d18:	3303      	adds	r3, #3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009d26:	8b3b      	ldrh	r3, [r7, #24]
 8009d28:	3310      	adds	r3, #16
 8009d2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009d2c:	8b3a      	ldrh	r2, [r7, #24]
 8009d2e:	88bb      	ldrh	r3, [r7, #4]
 8009d30:	3303      	adds	r3, #3
 8009d32:	f023 0303 	bic.w	r3, r3, #3
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d306      	bcc.n	8009d48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009d3a:	8afa      	ldrh	r2, [r7, #22]
 8009d3c:	88bb      	ldrh	r3, [r7, #4]
 8009d3e:	3303      	adds	r3, #3
 8009d40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d201      	bcs.n	8009d4c <pbuf_alloc+0x160>
        return NULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e035      	b.n	8009db8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009d4c:	8afb      	ldrh	r3, [r7, #22]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff f9ba 	bl	80090c8 <mem_malloc>
 8009d54:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8009d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <pbuf_alloc+0x174>
        return NULL;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e02b      	b.n	8009db8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009d60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d62:	3310      	adds	r3, #16
 8009d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d66:	4413      	add	r3, r2
 8009d68:	3303      	adds	r3, #3
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	4618      	mov	r0, r3
 8009d70:	88b9      	ldrh	r1, [r7, #4]
 8009d72:	88ba      	ldrh	r2, [r7, #4]
 8009d74:	2300      	movs	r3, #0
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	887b      	ldrh	r3, [r7, #2]
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4601      	mov	r1, r0
 8009d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d82:	f7ff ff09 	bl	8009b98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f003 0303 	and.w	r3, r3, #3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d010      	beq.n	8009db4 <pbuf_alloc+0x1c8>
 8009d92:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc0 <pbuf_alloc+0x1d4>)
 8009d94:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8009d98:	490d      	ldr	r1, [pc, #52]	@ (8009dd0 <pbuf_alloc+0x1e4>)
 8009d9a:	480b      	ldr	r0, [pc, #44]	@ (8009dc8 <pbuf_alloc+0x1dc>)
 8009d9c:	f009 fca2 	bl	80136e4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009da0:	e008      	b.n	8009db4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009da2:	4b07      	ldr	r3, [pc, #28]	@ (8009dc0 <pbuf_alloc+0x1d4>)
 8009da4:	f240 1227 	movw	r2, #295	@ 0x127
 8009da8:	490a      	ldr	r1, [pc, #40]	@ (8009dd4 <pbuf_alloc+0x1e8>)
 8009daa:	4807      	ldr	r0, [pc, #28]	@ (8009dc8 <pbuf_alloc+0x1dc>)
 8009dac:	f009 fc9a 	bl	80136e4 <iprintf>
      return NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	e001      	b.n	8009db8 <pbuf_alloc+0x1cc>
      break;
 8009db4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3728      	adds	r7, #40	@ 0x28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	08014c28 	.word	0x08014c28
 8009dc4:	08014c58 	.word	0x08014c58
 8009dc8:	08014c88 	.word	0x08014c88
 8009dcc:	08014cb0 	.word	0x08014cb0
 8009dd0:	08014ce4 	.word	0x08014ce4
 8009dd4:	08014d10 	.word	0x08014d10

08009dd8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	807b      	strh	r3, [r7, #2]
 8009de4:	4613      	mov	r3, r2
 8009de6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009de8:	883b      	ldrh	r3, [r7, #0]
 8009dea:	2b41      	cmp	r3, #65	@ 0x41
 8009dec:	d009      	beq.n	8009e02 <pbuf_alloc_reference+0x2a>
 8009dee:	883b      	ldrh	r3, [r7, #0]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d006      	beq.n	8009e02 <pbuf_alloc_reference+0x2a>
 8009df4:	4b0f      	ldr	r3, [pc, #60]	@ (8009e34 <pbuf_alloc_reference+0x5c>)
 8009df6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8009dfa:	490f      	ldr	r1, [pc, #60]	@ (8009e38 <pbuf_alloc_reference+0x60>)
 8009dfc:	480f      	ldr	r0, [pc, #60]	@ (8009e3c <pbuf_alloc_reference+0x64>)
 8009dfe:	f009 fc71 	bl	80136e4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009e02:	2007      	movs	r0, #7
 8009e04:	f7ff faf0 	bl	80093e8 <memp_malloc>
 8009e08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e00b      	b.n	8009e2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009e14:	8879      	ldrh	r1, [r7, #2]
 8009e16:	887a      	ldrh	r2, [r7, #2]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	883b      	ldrh	r3, [r7, #0]
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	460b      	mov	r3, r1
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff feb7 	bl	8009b98 <pbuf_init_alloced_pbuf>
  return p;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	08014c28 	.word	0x08014c28
 8009e38:	08014d2c 	.word	0x08014d2c
 8009e3c:	08014c88 	.word	0x08014c88

08009e40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af02      	add	r7, sp, #8
 8009e46:	607b      	str	r3, [r7, #4]
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	81bb      	strh	r3, [r7, #12]
 8009e50:	4613      	mov	r3, r2
 8009e52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009e58:	8a7b      	ldrh	r3, [r7, #18]
 8009e5a:	3303      	adds	r3, #3
 8009e5c:	f023 0203 	bic.w	r2, r3, #3
 8009e60:	89bb      	ldrh	r3, [r7, #12]
 8009e62:	441a      	add	r2, r3
 8009e64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d901      	bls.n	8009e6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e018      	b.n	8009ea0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009e74:	8a7b      	ldrh	r3, [r7, #18]
 8009e76:	3303      	adds	r3, #3
 8009e78:	f023 0303 	bic.w	r3, r3, #3
 8009e7c:	6a3a      	ldr	r2, [r7, #32]
 8009e7e:	4413      	add	r3, r2
 8009e80:	617b      	str	r3, [r7, #20]
 8009e82:	e001      	b.n	8009e88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009e84:	2300      	movs	r3, #0
 8009e86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	89b9      	ldrh	r1, [r7, #12]
 8009e8c:	89ba      	ldrh	r2, [r7, #12]
 8009e8e:	2302      	movs	r3, #2
 8009e90:	9301      	str	r3, [sp, #4]
 8009e92:	897b      	ldrh	r3, [r7, #10]
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	460b      	mov	r3, r1
 8009e98:	6979      	ldr	r1, [r7, #20]
 8009e9a:	f7ff fe7d 	bl	8009b98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009e9e:	687b      	ldr	r3, [r7, #4]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <pbuf_realloc+0x20>
 8009eba:	4b3a      	ldr	r3, [pc, #232]	@ (8009fa4 <pbuf_realloc+0xfc>)
 8009ebc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009ec0:	4939      	ldr	r1, [pc, #228]	@ (8009fa8 <pbuf_realloc+0x100>)
 8009ec2:	483a      	ldr	r0, [pc, #232]	@ (8009fac <pbuf_realloc+0x104>)
 8009ec4:	f009 fc0e 	bl	80136e4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	891b      	ldrh	r3, [r3, #8]
 8009ecc:	887a      	ldrh	r2, [r7, #2]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d263      	bcs.n	8009f9a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	891a      	ldrh	r2, [r3, #8]
 8009ed6:	887b      	ldrh	r3, [r7, #2]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009edc:	887b      	ldrh	r3, [r7, #2]
 8009ede:	817b      	strh	r3, [r7, #10]
  q = p;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009ee4:	e018      	b.n	8009f18 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	895b      	ldrh	r3, [r3, #10]
 8009eea:	897a      	ldrh	r2, [r7, #10]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	891a      	ldrh	r2, [r3, #8]
 8009ef4:	893b      	ldrh	r3, [r7, #8]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <pbuf_realloc+0x70>
 8009f0a:	4b26      	ldr	r3, [pc, #152]	@ (8009fa4 <pbuf_realloc+0xfc>)
 8009f0c:	f240 12af 	movw	r2, #431	@ 0x1af
 8009f10:	4927      	ldr	r1, [pc, #156]	@ (8009fb0 <pbuf_realloc+0x108>)
 8009f12:	4826      	ldr	r0, [pc, #152]	@ (8009fac <pbuf_realloc+0x104>)
 8009f14:	f009 fbe6 	bl	80136e4 <iprintf>
  while (rem_len > q->len) {
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	895b      	ldrh	r3, [r3, #10]
 8009f1c:	897a      	ldrh	r2, [r7, #10]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d8e1      	bhi.n	8009ee6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	7b1b      	ldrb	r3, [r3, #12]
 8009f26:	f003 030f 	and.w	r3, r3, #15
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d121      	bne.n	8009f72 <pbuf_realloc+0xca>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	895b      	ldrh	r3, [r3, #10]
 8009f32:	897a      	ldrh	r2, [r7, #10]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d01c      	beq.n	8009f72 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	7b5b      	ldrb	r3, [r3, #13]
 8009f3c:	f003 0302 	and.w	r3, r3, #2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d116      	bne.n	8009f72 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	897b      	ldrh	r3, [r7, #10]
 8009f50:	4413      	add	r3, r2
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4619      	mov	r1, r3
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7fe ffba 	bl	8008ed0 <mem_trim>
 8009f5c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <pbuf_realloc+0xca>
 8009f64:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa4 <pbuf_realloc+0xfc>)
 8009f66:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8009f6a:	4912      	ldr	r1, [pc, #72]	@ (8009fb4 <pbuf_realloc+0x10c>)
 8009f6c:	480f      	ldr	r0, [pc, #60]	@ (8009fac <pbuf_realloc+0x104>)
 8009f6e:	f009 fbb9 	bl	80136e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	897a      	ldrh	r2, [r7, #10]
 8009f76:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	895a      	ldrh	r2, [r3, #10]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 f911 	bl	800a1b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	e000      	b.n	8009f9c <pbuf_realloc+0xf4>
    return;
 8009f9a:	bf00      	nop

}
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	08014c28 	.word	0x08014c28
 8009fa8:	08014d40 	.word	0x08014d40
 8009fac:	08014c88 	.word	0x08014c88
 8009fb0:	08014d58 	.word	0x08014d58
 8009fb4:	08014d70 	.word	0x08014d70

08009fb8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d106      	bne.n	8009fda <pbuf_add_header_impl+0x22>
 8009fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800a07c <pbuf_add_header_impl+0xc4>)
 8009fce:	f240 12df 	movw	r2, #479	@ 0x1df
 8009fd2:	492b      	ldr	r1, [pc, #172]	@ (800a080 <pbuf_add_header_impl+0xc8>)
 8009fd4:	482b      	ldr	r0, [pc, #172]	@ (800a084 <pbuf_add_header_impl+0xcc>)
 8009fd6:	f009 fb85 	bl	80136e4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <pbuf_add_header_impl+0x30>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fe6:	d301      	bcc.n	8009fec <pbuf_add_header_impl+0x34>
    return 1;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e043      	b.n	800a074 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <pbuf_add_header_impl+0x3e>
    return 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e03e      	b.n	800a074 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	891a      	ldrh	r2, [r3, #8]
 8009ffe:	8a7b      	ldrh	r3, [r7, #18]
 800a000:	4413      	add	r3, r2
 800a002:	b29b      	uxth	r3, r3
 800a004:	8a7a      	ldrh	r2, [r7, #18]
 800a006:	429a      	cmp	r2, r3
 800a008:	d901      	bls.n	800a00e <pbuf_add_header_impl+0x56>
    return 1;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e032      	b.n	800a074 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	7b1b      	ldrb	r3, [r3, #12]
 800a012:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a014:	8a3b      	ldrh	r3, [r7, #16]
 800a016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00c      	beq.n	800a038 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	425b      	negs	r3, r3
 800a026:	4413      	add	r3, r2
 800a028:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3310      	adds	r3, #16
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	429a      	cmp	r2, r3
 800a032:	d20d      	bcs.n	800a050 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a034:	2301      	movs	r3, #1
 800a036:	e01d      	b.n	800a074 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d006      	beq.n	800a04c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	425b      	negs	r3, r3
 800a046:	4413      	add	r3, r2
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	e001      	b.n	800a050 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e011      	b.n	800a074 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	895a      	ldrh	r2, [r3, #10]
 800a05a:	8a7b      	ldrh	r3, [r7, #18]
 800a05c:	4413      	add	r3, r2
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	891a      	ldrh	r2, [r3, #8]
 800a068:	8a7b      	ldrh	r3, [r7, #18]
 800a06a:	4413      	add	r3, r2
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	811a      	strh	r2, [r3, #8]


  return 0;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	08014c28 	.word	0x08014c28
 800a080:	08014d8c 	.word	0x08014d8c
 800a084:	08014c88 	.word	0x08014c88

0800a088 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a092:	2200      	movs	r2, #0
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff ff8e 	bl	8009fb8 <pbuf_add_header_impl>
 800a09c:	4603      	mov	r3, r0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <pbuf_remove_header+0x1e>
 800a0b8:	4b20      	ldr	r3, [pc, #128]	@ (800a13c <pbuf_remove_header+0x94>)
 800a0ba:	f240 224b 	movw	r2, #587	@ 0x24b
 800a0be:	4920      	ldr	r1, [pc, #128]	@ (800a140 <pbuf_remove_header+0x98>)
 800a0c0:	4820      	ldr	r0, [pc, #128]	@ (800a144 <pbuf_remove_header+0x9c>)
 800a0c2:	f009 fb0f 	bl	80136e4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <pbuf_remove_header+0x2c>
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0d2:	d301      	bcc.n	800a0d8 <pbuf_remove_header+0x30>
    return 1;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e02c      	b.n	800a132 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <pbuf_remove_header+0x3a>
    return 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e027      	b.n	800a132 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	895b      	ldrh	r3, [r3, #10]
 800a0ea:	89fa      	ldrh	r2, [r7, #14]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d908      	bls.n	800a102 <pbuf_remove_header+0x5a>
 800a0f0:	4b12      	ldr	r3, [pc, #72]	@ (800a13c <pbuf_remove_header+0x94>)
 800a0f2:	f240 2255 	movw	r2, #597	@ 0x255
 800a0f6:	4914      	ldr	r1, [pc, #80]	@ (800a148 <pbuf_remove_header+0xa0>)
 800a0f8:	4812      	ldr	r0, [pc, #72]	@ (800a144 <pbuf_remove_header+0x9c>)
 800a0fa:	f009 faf3 	bl	80136e4 <iprintf>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e017      	b.n	800a132 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	441a      	add	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	895a      	ldrh	r2, [r3, #10]
 800a118:	89fb      	ldrh	r3, [r7, #14]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	891a      	ldrh	r2, [r3, #8]
 800a126:	89fb      	ldrh	r3, [r7, #14]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	08014c28 	.word	0x08014c28
 800a140:	08014d8c 	.word	0x08014d8c
 800a144:	08014c88 	.word	0x08014c88
 800a148:	08014d98 	.word	0x08014d98

0800a14c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	807b      	strh	r3, [r7, #2]
 800a158:	4613      	mov	r3, r2
 800a15a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a15c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a160:	2b00      	cmp	r3, #0
 800a162:	da08      	bge.n	800a176 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a164:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a168:	425b      	negs	r3, r3
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff ff9b 	bl	800a0a8 <pbuf_remove_header>
 800a172:	4603      	mov	r3, r0
 800a174:	e007      	b.n	800a186 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a17a:	787a      	ldrb	r2, [r7, #1]
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff ff1a 	bl	8009fb8 <pbuf_add_header_impl>
 800a184:	4603      	mov	r3, r0
  }
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a19a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff ffd2 	bl	800a14c <pbuf_header_impl>
 800a1a8:	4603      	mov	r3, r0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d106      	bne.n	800a1d6 <pbuf_free+0x22>
 800a1c8:	4b38      	ldr	r3, [pc, #224]	@ (800a2ac <pbuf_free+0xf8>)
 800a1ca:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800a1ce:	4938      	ldr	r1, [pc, #224]	@ (800a2b0 <pbuf_free+0xfc>)
 800a1d0:	4838      	ldr	r0, [pc, #224]	@ (800a2b4 <pbuf_free+0x100>)
 800a1d2:	f009 fa87 	bl	80136e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e063      	b.n	800a2a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a1de:	e05c      	b.n	800a29a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7b9b      	ldrb	r3, [r3, #14]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d106      	bne.n	800a1f6 <pbuf_free+0x42>
 800a1e8:	4b30      	ldr	r3, [pc, #192]	@ (800a2ac <pbuf_free+0xf8>)
 800a1ea:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800a1ee:	4932      	ldr	r1, [pc, #200]	@ (800a2b8 <pbuf_free+0x104>)
 800a1f0:	4830      	ldr	r0, [pc, #192]	@ (800a2b4 <pbuf_free+0x100>)
 800a1f2:	f009 fa77 	bl	80136e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7b9b      	ldrb	r3, [r3, #14]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	739a      	strb	r2, [r3, #14]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7b9b      	ldrb	r3, [r3, #14]
 800a206:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a208:	7dbb      	ldrb	r3, [r7, #22]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d143      	bne.n	800a296 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	7b1b      	ldrb	r3, [r3, #12]
 800a218:	f003 030f 	and.w	r3, r3, #15
 800a21c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7b5b      	ldrb	r3, [r3, #13]
 800a222:	f003 0302 	and.w	r3, r3, #2
 800a226:	2b00      	cmp	r3, #0
 800a228:	d011      	beq.n	800a24e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <pbuf_free+0x90>
 800a236:	4b1d      	ldr	r3, [pc, #116]	@ (800a2ac <pbuf_free+0xf8>)
 800a238:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800a23c:	491f      	ldr	r1, [pc, #124]	@ (800a2bc <pbuf_free+0x108>)
 800a23e:	481d      	ldr	r0, [pc, #116]	@ (800a2b4 <pbuf_free+0x100>)
 800a240:	f009 fa50 	bl	80136e4 <iprintf>
        pc->custom_free_function(p);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
 800a24c:	e01d      	b.n	800a28a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d104      	bne.n	800a25e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	2008      	movs	r0, #8
 800a258:	f7ff f936 	bl	80094c8 <memp_free>
 800a25c:	e015      	b.n	800a28a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d104      	bne.n	800a26e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a264:	6879      	ldr	r1, [r7, #4]
 800a266:	2007      	movs	r0, #7
 800a268:	f7ff f92e 	bl	80094c8 <memp_free>
 800a26c:	e00d      	b.n	800a28a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d103      	bne.n	800a27c <pbuf_free+0xc8>
          mem_free(p);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7fe fdc1 	bl	8008dfc <mem_free>
 800a27a:	e006      	b.n	800a28a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a27c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <pbuf_free+0xf8>)
 800a27e:	f240 320f 	movw	r2, #783	@ 0x30f
 800a282:	490f      	ldr	r1, [pc, #60]	@ (800a2c0 <pbuf_free+0x10c>)
 800a284:	480b      	ldr	r0, [pc, #44]	@ (800a2b4 <pbuf_free+0x100>)
 800a286:	f009 fa2d 	bl	80136e4 <iprintf>
        }
      }
      count++;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
 800a28c:	3301      	adds	r3, #1
 800a28e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	607b      	str	r3, [r7, #4]
 800a294:	e001      	b.n	800a29a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d19f      	bne.n	800a1e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	08014c28 	.word	0x08014c28
 800a2b0:	08014d8c 	.word	0x08014d8c
 800a2b4:	08014c88 	.word	0x08014c88
 800a2b8:	08014db8 	.word	0x08014db8
 800a2bc:	08014dd0 	.word	0x08014dd0
 800a2c0:	08014df4 	.word	0x08014df4

0800a2c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a2d0:	e005      	b.n	800a2de <pbuf_clen+0x1a>
    ++len;
 800a2d2:	89fb      	ldrh	r3, [r7, #14]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1f6      	bne.n	800a2d2 <pbuf_clen+0xe>
  }
  return len;
 800a2e4:	89fb      	ldrh	r3, [r7, #14]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d010      	beq.n	800a324 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	7b9b      	ldrb	r3, [r3, #14]
 800a306:	3301      	adds	r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7b9b      	ldrb	r3, [r3, #14]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <pbuf_ref+0x30>
 800a316:	4b05      	ldr	r3, [pc, #20]	@ (800a32c <pbuf_ref+0x38>)
 800a318:	f240 3242 	movw	r2, #834	@ 0x342
 800a31c:	4904      	ldr	r1, [pc, #16]	@ (800a330 <pbuf_ref+0x3c>)
 800a31e:	4805      	ldr	r0, [pc, #20]	@ (800a334 <pbuf_ref+0x40>)
 800a320:	f009 f9e0 	bl	80136e4 <iprintf>
  }
}
 800a324:	bf00      	nop
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	08014c28 	.word	0x08014c28
 800a330:	08014e08 	.word	0x08014e08
 800a334:	08014c88 	.word	0x08014c88

0800a338 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <pbuf_cat+0x16>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d107      	bne.n	800a35e <pbuf_cat+0x26>
 800a34e:	4b20      	ldr	r3, [pc, #128]	@ (800a3d0 <pbuf_cat+0x98>)
 800a350:	f240 3259 	movw	r2, #857	@ 0x359
 800a354:	491f      	ldr	r1, [pc, #124]	@ (800a3d4 <pbuf_cat+0x9c>)
 800a356:	4820      	ldr	r0, [pc, #128]	@ (800a3d8 <pbuf_cat+0xa0>)
 800a358:	f009 f9c4 	bl	80136e4 <iprintf>
 800a35c:	e034      	b.n	800a3c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	e00a      	b.n	800a37a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	891a      	ldrh	r2, [r3, #8]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	891b      	ldrh	r3, [r3, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	60fb      	str	r3, [r7, #12]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1f0      	bne.n	800a364 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	891a      	ldrh	r2, [r3, #8]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	895b      	ldrh	r3, [r3, #10]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d006      	beq.n	800a39c <pbuf_cat+0x64>
 800a38e:	4b10      	ldr	r3, [pc, #64]	@ (800a3d0 <pbuf_cat+0x98>)
 800a390:	f240 3262 	movw	r2, #866	@ 0x362
 800a394:	4911      	ldr	r1, [pc, #68]	@ (800a3dc <pbuf_cat+0xa4>)
 800a396:	4810      	ldr	r0, [pc, #64]	@ (800a3d8 <pbuf_cat+0xa0>)
 800a398:	f009 f9a4 	bl	80136e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d006      	beq.n	800a3b2 <pbuf_cat+0x7a>
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d0 <pbuf_cat+0x98>)
 800a3a6:	f240 3263 	movw	r2, #867	@ 0x363
 800a3aa:	490d      	ldr	r1, [pc, #52]	@ (800a3e0 <pbuf_cat+0xa8>)
 800a3ac:	480a      	ldr	r0, [pc, #40]	@ (800a3d8 <pbuf_cat+0xa0>)
 800a3ae:	f009 f999 	bl	80136e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	891a      	ldrh	r2, [r3, #8]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	891b      	ldrh	r3, [r3, #8]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	08014c28 	.word	0x08014c28
 800a3d4:	08014e1c 	.word	0x08014e1c
 800a3d8:	08014c88 	.word	0x08014c88
 800a3dc:	08014e54 	.word	0x08014e54
 800a3e0:	08014e84 	.word	0x08014e84

0800a3e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff ffa1 	bl	800a338 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a3f6:	6838      	ldr	r0, [r7, #0]
 800a3f8:	f7ff ff7c 	bl	800a2f4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d008      	beq.n	800a42e <pbuf_copy+0x2a>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <pbuf_copy+0x2a>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	891a      	ldrh	r2, [r3, #8]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	891b      	ldrh	r3, [r3, #8]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d209      	bcs.n	800a442 <pbuf_copy+0x3e>
 800a42e:	4b57      	ldr	r3, [pc, #348]	@ (800a58c <pbuf_copy+0x188>)
 800a430:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800a434:	4956      	ldr	r1, [pc, #344]	@ (800a590 <pbuf_copy+0x18c>)
 800a436:	4857      	ldr	r0, [pc, #348]	@ (800a594 <pbuf_copy+0x190>)
 800a438:	f009 f954 	bl	80136e4 <iprintf>
 800a43c:	f06f 030f 	mvn.w	r3, #15
 800a440:	e09f      	b.n	800a582 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	895b      	ldrh	r3, [r3, #10]
 800a446:	461a      	mov	r2, r3
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	1ad2      	subs	r2, r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	895b      	ldrh	r3, [r3, #10]
 800a450:	4619      	mov	r1, r3
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	1acb      	subs	r3, r1, r3
 800a456:	429a      	cmp	r2, r3
 800a458:	d306      	bcc.n	800a468 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	895b      	ldrh	r3, [r3, #10]
 800a45e:	461a      	mov	r2, r3
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	e005      	b.n	800a474 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	895b      	ldrh	r3, [r3, #10]
 800a46c:	461a      	mov	r2, r3
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	18d0      	adds	r0, r2, r3
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	4413      	add	r3, r2
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4619      	mov	r1, r3
 800a488:	f009 fb39 	bl	8013afe <memcpy>
    offset_to += len;
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	4413      	add	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	4413      	add	r3, r2
 800a49a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	895b      	ldrh	r3, [r3, #10]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d906      	bls.n	800a4b6 <pbuf_copy+0xb2>
 800a4a8:	4b38      	ldr	r3, [pc, #224]	@ (800a58c <pbuf_copy+0x188>)
 800a4aa:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800a4ae:	493a      	ldr	r1, [pc, #232]	@ (800a598 <pbuf_copy+0x194>)
 800a4b0:	4838      	ldr	r0, [pc, #224]	@ (800a594 <pbuf_copy+0x190>)
 800a4b2:	f009 f917 	bl	80136e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	895b      	ldrh	r3, [r3, #10]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d906      	bls.n	800a4d0 <pbuf_copy+0xcc>
 800a4c2:	4b32      	ldr	r3, [pc, #200]	@ (800a58c <pbuf_copy+0x188>)
 800a4c4:	f240 32da 	movw	r2, #986	@ 0x3da
 800a4c8:	4934      	ldr	r1, [pc, #208]	@ (800a59c <pbuf_copy+0x198>)
 800a4ca:	4832      	ldr	r0, [pc, #200]	@ (800a594 <pbuf_copy+0x190>)
 800a4cc:	f009 f90a 	bl	80136e4 <iprintf>
    if (offset_from >= p_from->len) {
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	895b      	ldrh	r3, [r3, #10]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d304      	bcc.n	800a4e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	895b      	ldrh	r3, [r3, #10]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d114      	bne.n	800a51c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10c      	bne.n	800a51c <pbuf_copy+0x118>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d009      	beq.n	800a51c <pbuf_copy+0x118>
 800a508:	4b20      	ldr	r3, [pc, #128]	@ (800a58c <pbuf_copy+0x188>)
 800a50a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800a50e:	4924      	ldr	r1, [pc, #144]	@ (800a5a0 <pbuf_copy+0x19c>)
 800a510:	4820      	ldr	r0, [pc, #128]	@ (800a594 <pbuf_copy+0x190>)
 800a512:	f009 f8e7 	bl	80136e4 <iprintf>
 800a516:	f06f 030f 	mvn.w	r3, #15
 800a51a:	e032      	b.n	800a582 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d013      	beq.n	800a54a <pbuf_copy+0x146>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	895a      	ldrh	r2, [r3, #10]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	891b      	ldrh	r3, [r3, #8]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d10d      	bne.n	800a54a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <pbuf_copy+0x146>
 800a536:	4b15      	ldr	r3, [pc, #84]	@ (800a58c <pbuf_copy+0x188>)
 800a538:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a53c:	4919      	ldr	r1, [pc, #100]	@ (800a5a4 <pbuf_copy+0x1a0>)
 800a53e:	4815      	ldr	r0, [pc, #84]	@ (800a594 <pbuf_copy+0x190>)
 800a540:	f009 f8d0 	bl	80136e4 <iprintf>
 800a544:	f06f 0305 	mvn.w	r3, #5
 800a548:	e01b      	b.n	800a582 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d013      	beq.n	800a578 <pbuf_copy+0x174>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	895a      	ldrh	r2, [r3, #10]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	891b      	ldrh	r3, [r3, #8]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d10d      	bne.n	800a578 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <pbuf_copy+0x174>
 800a564:	4b09      	ldr	r3, [pc, #36]	@ (800a58c <pbuf_copy+0x188>)
 800a566:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a56a:	490e      	ldr	r1, [pc, #56]	@ (800a5a4 <pbuf_copy+0x1a0>)
 800a56c:	4809      	ldr	r0, [pc, #36]	@ (800a594 <pbuf_copy+0x190>)
 800a56e:	f009 f8b9 	bl	80136e4 <iprintf>
 800a572:	f06f 0305 	mvn.w	r3, #5
 800a576:	e004      	b.n	800a582 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f47f af61 	bne.w	800a442 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	08014c28 	.word	0x08014c28
 800a590:	08014ed0 	.word	0x08014ed0
 800a594:	08014c88 	.word	0x08014c88
 800a598:	08014f00 	.word	0x08014f00
 800a59c:	08014f18 	.word	0x08014f18
 800a5a0:	08014f34 	.word	0x08014f34
 800a5a4:	08014f44 	.word	0x08014f44

0800a5a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	80fb      	strh	r3, [r7, #6]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d108      	bne.n	800a5de <pbuf_copy_partial+0x36>
 800a5cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a67c <pbuf_copy_partial+0xd4>)
 800a5ce:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a5d2:	492b      	ldr	r1, [pc, #172]	@ (800a680 <pbuf_copy_partial+0xd8>)
 800a5d4:	482b      	ldr	r0, [pc, #172]	@ (800a684 <pbuf_copy_partial+0xdc>)
 800a5d6:	f009 f885 	bl	80136e4 <iprintf>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e04a      	b.n	800a674 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d108      	bne.n	800a5f6 <pbuf_copy_partial+0x4e>
 800a5e4:	4b25      	ldr	r3, [pc, #148]	@ (800a67c <pbuf_copy_partial+0xd4>)
 800a5e6:	f240 420b 	movw	r2, #1035	@ 0x40b
 800a5ea:	4927      	ldr	r1, [pc, #156]	@ (800a688 <pbuf_copy_partial+0xe0>)
 800a5ec:	4825      	ldr	r0, [pc, #148]	@ (800a684 <pbuf_copy_partial+0xdc>)
 800a5ee:	f009 f879 	bl	80136e4 <iprintf>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e03e      	b.n	800a674 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	61fb      	str	r3, [r7, #28]
 800a5fa:	e034      	b.n	800a666 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a5fc:	88bb      	ldrh	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00a      	beq.n	800a618 <pbuf_copy_partial+0x70>
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	895b      	ldrh	r3, [r3, #10]
 800a606:	88ba      	ldrh	r2, [r7, #4]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d305      	bcc.n	800a618 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	895b      	ldrh	r3, [r3, #10]
 800a610:	88ba      	ldrh	r2, [r7, #4]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	80bb      	strh	r3, [r7, #4]
 800a616:	e023      	b.n	800a660 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	895a      	ldrh	r2, [r3, #10]
 800a61c:	88bb      	ldrh	r3, [r7, #4]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a622:	8b3a      	ldrh	r2, [r7, #24]
 800a624:	88fb      	ldrh	r3, [r7, #6]
 800a626:	429a      	cmp	r2, r3
 800a628:	d901      	bls.n	800a62e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a62a:	88fb      	ldrh	r3, [r7, #6]
 800a62c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a62e:	8b7b      	ldrh	r3, [r7, #26]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	18d0      	adds	r0, r2, r3
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	88bb      	ldrh	r3, [r7, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	8b3a      	ldrh	r2, [r7, #24]
 800a63e:	4619      	mov	r1, r3
 800a640:	f009 fa5d 	bl	8013afe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a644:	8afa      	ldrh	r2, [r7, #22]
 800a646:	8b3b      	ldrh	r3, [r7, #24]
 800a648:	4413      	add	r3, r2
 800a64a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a64c:	8b7a      	ldrh	r2, [r7, #26]
 800a64e:	8b3b      	ldrh	r3, [r7, #24]
 800a650:	4413      	add	r3, r2
 800a652:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a654:	88fa      	ldrh	r2, [r7, #6]
 800a656:	8b3b      	ldrh	r3, [r7, #24]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	61fb      	str	r3, [r7, #28]
 800a666:	88fb      	ldrh	r3, [r7, #6]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <pbuf_copy_partial+0xca>
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1c4      	bne.n	800a5fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a672:	8afb      	ldrh	r3, [r7, #22]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3720      	adds	r7, #32
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	08014c28 	.word	0x08014c28
 800a680:	08014f70 	.word	0x08014f70
 800a684:	08014c88 	.word	0x08014c88
 800a688:	08014f90 	.word	0x08014f90

0800a68c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	603a      	str	r2, [r7, #0]
 800a696:	71fb      	strb	r3, [r7, #7]
 800a698:	460b      	mov	r3, r1
 800a69a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	8919      	ldrh	r1, [r3, #8]
 800a6a0:	88ba      	ldrh	r2, [r7, #4]
 800a6a2:	79fb      	ldrb	r3, [r7, #7]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff faa1 	bl	8009bec <pbuf_alloc>
 800a6aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <pbuf_clone+0x2a>
    return NULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e011      	b.n	800a6da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7ff fea3 	bl	800a404 <pbuf_copy>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a6c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d006      	beq.n	800a6d8 <pbuf_clone+0x4c>
 800a6ca:	4b06      	ldr	r3, [pc, #24]	@ (800a6e4 <pbuf_clone+0x58>)
 800a6cc:	f240 5224 	movw	r2, #1316	@ 0x524
 800a6d0:	4905      	ldr	r1, [pc, #20]	@ (800a6e8 <pbuf_clone+0x5c>)
 800a6d2:	4806      	ldr	r0, [pc, #24]	@ (800a6ec <pbuf_clone+0x60>)
 800a6d4:	f009 f806 	bl	80136e4 <iprintf>
  return q;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	08014c28 	.word	0x08014c28
 800a6e8:	0801509c 	.word	0x0801509c
 800a6ec:	08014c88 	.word	0x08014c88

0800a6f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a6f4:	f008 fef6 	bl	80134e4 <rand>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a700:	b29b      	uxth	r3, r3
 800a702:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a706:	b29a      	uxth	r2, r3
 800a708:	4b01      	ldr	r3, [pc, #4]	@ (800a710 <tcp_init+0x20>)
 800a70a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a70c:	bf00      	nop
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	20000020 	.word	0x20000020

0800a714 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7d1b      	ldrb	r3, [r3, #20]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d105      	bne.n	800a730 <tcp_free+0x1c>
 800a724:	4b06      	ldr	r3, [pc, #24]	@ (800a740 <tcp_free+0x2c>)
 800a726:	22d4      	movs	r2, #212	@ 0xd4
 800a728:	4906      	ldr	r1, [pc, #24]	@ (800a744 <tcp_free+0x30>)
 800a72a:	4807      	ldr	r0, [pc, #28]	@ (800a748 <tcp_free+0x34>)
 800a72c:	f008 ffda 	bl	80136e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	2001      	movs	r0, #1
 800a734:	f7fe fec8 	bl	80094c8 <memp_free>
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	08015128 	.word	0x08015128
 800a744:	08015158 	.word	0x08015158
 800a748:	0801516c 	.word	0x0801516c

0800a74c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d105      	bne.n	800a768 <tcp_free_listen+0x1c>
 800a75c:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <tcp_free_listen+0x2c>)
 800a75e:	22df      	movs	r2, #223	@ 0xdf
 800a760:	4906      	ldr	r1, [pc, #24]	@ (800a77c <tcp_free_listen+0x30>)
 800a762:	4807      	ldr	r0, [pc, #28]	@ (800a780 <tcp_free_listen+0x34>)
 800a764:	f008 ffbe 	bl	80136e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	2002      	movs	r0, #2
 800a76c:	f7fe feac 	bl	80094c8 <memp_free>
}
 800a770:	bf00      	nop
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	08015128 	.word	0x08015128
 800a77c:	08015194 	.word	0x08015194
 800a780:	0801516c 	.word	0x0801516c

0800a784 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a788:	f000 fea4 	bl	800b4d4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a78c:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <tcp_tmr+0x28>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	b2da      	uxtb	r2, r3
 800a794:	4b05      	ldr	r3, [pc, #20]	@ (800a7ac <tcp_tmr+0x28>)
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	4b04      	ldr	r3, [pc, #16]	@ (800a7ac <tcp_tmr+0x28>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a7a4:	f000 fb54 	bl	800ae50 <tcp_slowtmr>
  }
}
 800a7a8:	bf00      	nop
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20008aa5 	.word	0x20008aa5

0800a7b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <tcp_remove_listener+0x1c>
 800a7c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <tcp_remove_listener+0x48>)
 800a7c2:	22ff      	movs	r2, #255	@ 0xff
 800a7c4:	490d      	ldr	r1, [pc, #52]	@ (800a7fc <tcp_remove_listener+0x4c>)
 800a7c6:	480e      	ldr	r0, [pc, #56]	@ (800a800 <tcp_remove_listener+0x50>)
 800a7c8:	f008 ff8c 	bl	80136e4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	e00a      	b.n	800a7e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d102      	bne.n	800a7e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1f1      	bne.n	800a7d2 <tcp_remove_listener+0x22>
    }
  }
}
 800a7ee:	bf00      	nop
 800a7f0:	bf00      	nop
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	08015128 	.word	0x08015128
 800a7fc:	080151b0 	.word	0x080151b0
 800a800:	0801516c 	.word	0x0801516c

0800a804 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <tcp_listen_closed+0x1c>
 800a812:	4b14      	ldr	r3, [pc, #80]	@ (800a864 <tcp_listen_closed+0x60>)
 800a814:	f240 1211 	movw	r2, #273	@ 0x111
 800a818:	4913      	ldr	r1, [pc, #76]	@ (800a868 <tcp_listen_closed+0x64>)
 800a81a:	4814      	ldr	r0, [pc, #80]	@ (800a86c <tcp_listen_closed+0x68>)
 800a81c:	f008 ff62 	bl	80136e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	7d1b      	ldrb	r3, [r3, #20]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d006      	beq.n	800a836 <tcp_listen_closed+0x32>
 800a828:	4b0e      	ldr	r3, [pc, #56]	@ (800a864 <tcp_listen_closed+0x60>)
 800a82a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a82e:	4910      	ldr	r1, [pc, #64]	@ (800a870 <tcp_listen_closed+0x6c>)
 800a830:	480e      	ldr	r0, [pc, #56]	@ (800a86c <tcp_listen_closed+0x68>)
 800a832:	f008 ff57 	bl	80136e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a836:	2301      	movs	r3, #1
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	e00b      	b.n	800a854 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a83c:	4a0d      	ldr	r2, [pc, #52]	@ (800a874 <tcp_listen_closed+0x70>)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff ffb1 	bl	800a7b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3301      	adds	r3, #1
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b03      	cmp	r3, #3
 800a858:	d9f0      	bls.n	800a83c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a85a:	bf00      	nop
 800a85c:	bf00      	nop
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	08015128 	.word	0x08015128
 800a868:	080151d8 	.word	0x080151d8
 800a86c:	0801516c 	.word	0x0801516c
 800a870:	080151e4 	.word	0x080151e4
 800a874:	080175a4 	.word	0x080175a4

0800a878 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a878:	b5b0      	push	{r4, r5, r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af04      	add	r7, sp, #16
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d106      	bne.n	800a898 <tcp_close_shutdown+0x20>
 800a88a:	4b63      	ldr	r3, [pc, #396]	@ (800aa18 <tcp_close_shutdown+0x1a0>)
 800a88c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a890:	4962      	ldr	r1, [pc, #392]	@ (800aa1c <tcp_close_shutdown+0x1a4>)
 800a892:	4863      	ldr	r0, [pc, #396]	@ (800aa20 <tcp_close_shutdown+0x1a8>)
 800a894:	f008 ff26 	bl	80136e4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d066      	beq.n	800a96c <tcp_close_shutdown+0xf4>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7d1b      	ldrb	r3, [r3, #20]
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d003      	beq.n	800a8ae <tcp_close_shutdown+0x36>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7d1b      	ldrb	r3, [r3, #20]
 800a8aa:	2b07      	cmp	r3, #7
 800a8ac:	d15e      	bne.n	800a96c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d104      	bne.n	800a8c0 <tcp_close_shutdown+0x48>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a8be:	d055      	beq.n	800a96c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	8b5b      	ldrh	r3, [r3, #26]
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <tcp_close_shutdown+0x62>
 800a8cc:	4b52      	ldr	r3, [pc, #328]	@ (800aa18 <tcp_close_shutdown+0x1a0>)
 800a8ce:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800a8d2:	4954      	ldr	r1, [pc, #336]	@ (800aa24 <tcp_close_shutdown+0x1ac>)
 800a8d4:	4852      	ldr	r0, [pc, #328]	@ (800aa20 <tcp_close_shutdown+0x1a8>)
 800a8d6:	f008 ff05 	bl	80136e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a8e2:	687d      	ldr	r5, [r7, #4]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	8ad2      	ldrh	r2, [r2, #22]
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	8b09      	ldrh	r1, [r1, #24]
 800a8f0:	9102      	str	r1, [sp, #8]
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	462b      	mov	r3, r5
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	4601      	mov	r1, r0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f004 fe8d 	bl	800f61c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 f8c8 	bl	800ba98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a908:	4b47      	ldr	r3, [pc, #284]	@ (800aa28 <tcp_close_shutdown+0x1b0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d105      	bne.n	800a91e <tcp_close_shutdown+0xa6>
 800a912:	4b45      	ldr	r3, [pc, #276]	@ (800aa28 <tcp_close_shutdown+0x1b0>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	4a43      	ldr	r2, [pc, #268]	@ (800aa28 <tcp_close_shutdown+0x1b0>)
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	e013      	b.n	800a946 <tcp_close_shutdown+0xce>
 800a91e:	4b42      	ldr	r3, [pc, #264]	@ (800aa28 <tcp_close_shutdown+0x1b0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	e00c      	b.n	800a940 <tcp_close_shutdown+0xc8>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d104      	bne.n	800a93a <tcp_close_shutdown+0xc2>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68da      	ldr	r2, [r3, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	60da      	str	r2, [r3, #12]
 800a938:	e005      	b.n	800a946 <tcp_close_shutdown+0xce>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	60fb      	str	r3, [r7, #12]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1ef      	bne.n	800a926 <tcp_close_shutdown+0xae>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	60da      	str	r2, [r3, #12]
 800a94c:	4b37      	ldr	r3, [pc, #220]	@ (800aa2c <tcp_close_shutdown+0x1b4>)
 800a94e:	2201      	movs	r2, #1
 800a950:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a952:	4b37      	ldr	r3, [pc, #220]	@ (800aa30 <tcp_close_shutdown+0x1b8>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d102      	bne.n	800a962 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a95c:	f003 fd5c 	bl	800e418 <tcp_trigger_input_pcb_close>
 800a960:	e002      	b.n	800a968 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fed6 	bl	800a714 <tcp_free>
      }
      return ERR_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	e050      	b.n	800aa0e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7d1b      	ldrb	r3, [r3, #20]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d03b      	beq.n	800a9ec <tcp_close_shutdown+0x174>
 800a974:	2b02      	cmp	r3, #2
 800a976:	dc44      	bgt.n	800aa02 <tcp_close_shutdown+0x18a>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <tcp_close_shutdown+0x10a>
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d02a      	beq.n	800a9d6 <tcp_close_shutdown+0x15e>
 800a980:	e03f      	b.n	800aa02 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	8adb      	ldrh	r3, [r3, #22]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d021      	beq.n	800a9ce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a98a:	4b2a      	ldr	r3, [pc, #168]	@ (800aa34 <tcp_close_shutdown+0x1bc>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	d105      	bne.n	800a9a0 <tcp_close_shutdown+0x128>
 800a994:	4b27      	ldr	r3, [pc, #156]	@ (800aa34 <tcp_close_shutdown+0x1bc>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	4a26      	ldr	r2, [pc, #152]	@ (800aa34 <tcp_close_shutdown+0x1bc>)
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	e013      	b.n	800a9c8 <tcp_close_shutdown+0x150>
 800a9a0:	4b24      	ldr	r3, [pc, #144]	@ (800aa34 <tcp_close_shutdown+0x1bc>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60bb      	str	r3, [r7, #8]
 800a9a6:	e00c      	b.n	800a9c2 <tcp_close_shutdown+0x14a>
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d104      	bne.n	800a9bc <tcp_close_shutdown+0x144>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	60da      	str	r2, [r3, #12]
 800a9ba:	e005      	b.n	800a9c8 <tcp_close_shutdown+0x150>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1ef      	bne.n	800a9a8 <tcp_close_shutdown+0x130>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff fea0 	bl	800a714 <tcp_free>
      break;
 800a9d4:	e01a      	b.n	800aa0c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ff14 	bl	800a804 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	4816      	ldr	r0, [pc, #88]	@ (800aa38 <tcp_close_shutdown+0x1c0>)
 800a9e0:	f001 f8aa 	bl	800bb38 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff feb1 	bl	800a74c <tcp_free_listen>
      break;
 800a9ea:	e00f      	b.n	800aa0c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	480e      	ldr	r0, [pc, #56]	@ (800aa28 <tcp_close_shutdown+0x1b0>)
 800a9f0:	f001 f8a2 	bl	800bb38 <tcp_pcb_remove>
 800a9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800aa2c <tcp_close_shutdown+0x1b4>)
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff fe8a 	bl	800a714 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800aa00:	e004      	b.n	800aa0c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f81a 	bl	800aa3c <tcp_close_shutdown_fin>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	e000      	b.n	800aa0e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bdb0      	pop	{r4, r5, r7, pc}
 800aa16:	bf00      	nop
 800aa18:	08015128 	.word	0x08015128
 800aa1c:	080151fc 	.word	0x080151fc
 800aa20:	0801516c 	.word	0x0801516c
 800aa24:	0801521c 	.word	0x0801521c
 800aa28:	20008a9c 	.word	0x20008a9c
 800aa2c:	20008aa4 	.word	0x20008aa4
 800aa30:	20008adc 	.word	0x20008adc
 800aa34:	20008a94 	.word	0x20008a94
 800aa38:	20008a98 	.word	0x20008a98

0800aa3c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <tcp_close_shutdown_fin+0x1c>
 800aa4a:	4b2e      	ldr	r3, [pc, #184]	@ (800ab04 <tcp_close_shutdown_fin+0xc8>)
 800aa4c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800aa50:	492d      	ldr	r1, [pc, #180]	@ (800ab08 <tcp_close_shutdown_fin+0xcc>)
 800aa52:	482e      	ldr	r0, [pc, #184]	@ (800ab0c <tcp_close_shutdown_fin+0xd0>)
 800aa54:	f008 fe46 	bl	80136e4 <iprintf>

  switch (pcb->state) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	7d1b      	ldrb	r3, [r3, #20]
 800aa5c:	2b07      	cmp	r3, #7
 800aa5e:	d020      	beq.n	800aaa2 <tcp_close_shutdown_fin+0x66>
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	dc2b      	bgt.n	800aabc <tcp_close_shutdown_fin+0x80>
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d002      	beq.n	800aa6e <tcp_close_shutdown_fin+0x32>
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d00d      	beq.n	800aa88 <tcp_close_shutdown_fin+0x4c>
 800aa6c:	e026      	b.n	800aabc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f003 fee2 	bl	800e838 <tcp_send_fin>
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800aa78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d11f      	bne.n	800aac0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2205      	movs	r2, #5
 800aa84:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aa86:	e01b      	b.n	800aac0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f003 fed5 	bl	800e838 <tcp_send_fin>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800aa92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d114      	bne.n	800aac4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2205      	movs	r2, #5
 800aa9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aaa0:	e010      	b.n	800aac4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f003 fec8 	bl	800e838 <tcp_send_fin>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800aaac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d109      	bne.n	800aac8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2209      	movs	r2, #9
 800aab8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aaba:	e005      	b.n	800aac8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	e01c      	b.n	800aafa <tcp_close_shutdown_fin+0xbe>
      break;
 800aac0:	bf00      	nop
 800aac2:	e002      	b.n	800aaca <tcp_close_shutdown_fin+0x8e>
      break;
 800aac4:	bf00      	nop
 800aac6:	e000      	b.n	800aaca <tcp_close_shutdown_fin+0x8e>
      break;
 800aac8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800aaca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d103      	bne.n	800aada <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f003 ffee 	bl	800eab4 <tcp_output>
 800aad8:	e00d      	b.n	800aaf6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800aada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d108      	bne.n	800aaf6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	8b5b      	ldrh	r3, [r3, #26]
 800aae8:	f043 0308 	orr.w	r3, r3, #8
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e001      	b.n	800aafa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800aaf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	08015128 	.word	0x08015128
 800ab08:	080151d8 	.word	0x080151d8
 800ab0c:	0801516c 	.word	0x0801516c

0800ab10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d109      	bne.n	800ab32 <tcp_close+0x22>
 800ab1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab5c <tcp_close+0x4c>)
 800ab20:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ab24:	490e      	ldr	r1, [pc, #56]	@ (800ab60 <tcp_close+0x50>)
 800ab26:	480f      	ldr	r0, [pc, #60]	@ (800ab64 <tcp_close+0x54>)
 800ab28:	f008 fddc 	bl	80136e4 <iprintf>
 800ab2c:	f06f 030f 	mvn.w	r3, #15
 800ab30:	e00f      	b.n	800ab52 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7d1b      	ldrb	r3, [r3, #20]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d006      	beq.n	800ab48 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8b5b      	ldrh	r3, [r3, #26]
 800ab3e:	f043 0310 	orr.w	r3, r3, #16
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ab48:	2101      	movs	r1, #1
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe94 	bl	800a878 <tcp_close_shutdown>
 800ab50:	4603      	mov	r3, r0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	08015128 	.word	0x08015128
 800ab60:	08015238 	.word	0x08015238
 800ab64:	0801516c 	.word	0x0801516c

0800ab68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08e      	sub	sp, #56	@ 0x38
 800ab6c:	af04      	add	r7, sp, #16
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d107      	bne.n	800ab88 <tcp_abandon+0x20>
 800ab78:	4b52      	ldr	r3, [pc, #328]	@ (800acc4 <tcp_abandon+0x15c>)
 800ab7a:	f240 223d 	movw	r2, #573	@ 0x23d
 800ab7e:	4952      	ldr	r1, [pc, #328]	@ (800acc8 <tcp_abandon+0x160>)
 800ab80:	4852      	ldr	r0, [pc, #328]	@ (800accc <tcp_abandon+0x164>)
 800ab82:	f008 fdaf 	bl	80136e4 <iprintf>
 800ab86:	e099      	b.n	800acbc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7d1b      	ldrb	r3, [r3, #20]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d106      	bne.n	800ab9e <tcp_abandon+0x36>
 800ab90:	4b4c      	ldr	r3, [pc, #304]	@ (800acc4 <tcp_abandon+0x15c>)
 800ab92:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ab96:	494e      	ldr	r1, [pc, #312]	@ (800acd0 <tcp_abandon+0x168>)
 800ab98:	484c      	ldr	r0, [pc, #304]	@ (800accc <tcp_abandon+0x164>)
 800ab9a:	f008 fda3 	bl	80136e4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	7d1b      	ldrb	r3, [r3, #20]
 800aba2:	2b0a      	cmp	r3, #10
 800aba4:	d107      	bne.n	800abb6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	484a      	ldr	r0, [pc, #296]	@ (800acd4 <tcp_abandon+0x16c>)
 800abaa:	f000 ffc5 	bl	800bb38 <tcp_pcb_remove>
    tcp_free(pcb);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff fdb0 	bl	800a714 <tcp_free>
 800abb4:	e082      	b.n	800acbc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abc2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	7d1b      	ldrb	r3, [r3, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d126      	bne.n	800ac2e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	8adb      	ldrh	r3, [r3, #22]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d02e      	beq.n	800ac46 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800abe8:	4b3b      	ldr	r3, [pc, #236]	@ (800acd8 <tcp_abandon+0x170>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d105      	bne.n	800abfe <tcp_abandon+0x96>
 800abf2:	4b39      	ldr	r3, [pc, #228]	@ (800acd8 <tcp_abandon+0x170>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	4a37      	ldr	r2, [pc, #220]	@ (800acd8 <tcp_abandon+0x170>)
 800abfa:	6013      	str	r3, [r2, #0]
 800abfc:	e013      	b.n	800ac26 <tcp_abandon+0xbe>
 800abfe:	4b36      	ldr	r3, [pc, #216]	@ (800acd8 <tcp_abandon+0x170>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	61fb      	str	r3, [r7, #28]
 800ac04:	e00c      	b.n	800ac20 <tcp_abandon+0xb8>
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d104      	bne.n	800ac1a <tcp_abandon+0xb2>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68da      	ldr	r2, [r3, #12]
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	60da      	str	r2, [r3, #12]
 800ac18:	e005      	b.n	800ac26 <tcp_abandon+0xbe>
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1ef      	bne.n	800ac06 <tcp_abandon+0x9e>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	60da      	str	r2, [r3, #12]
 800ac2c:	e00b      	b.n	800ac46 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	8adb      	ldrh	r3, [r3, #22]
 800ac36:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	4828      	ldr	r0, [pc, #160]	@ (800acdc <tcp_abandon+0x174>)
 800ac3c:	f000 ff7c 	bl	800bb38 <tcp_pcb_remove>
 800ac40:	4b27      	ldr	r3, [pc, #156]	@ (800ace0 <tcp_abandon+0x178>)
 800ac42:	2201      	movs	r2, #1
 800ac44:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d004      	beq.n	800ac58 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fd1e 	bl	800b694 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fd15 	bl	800b694 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d004      	beq.n	800ac7c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 fd0c 	bl	800b694 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00e      	beq.n	800aca0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3304      	adds	r3, #4
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	8b12      	ldrh	r2, [r2, #24]
 800ac8c:	9202      	str	r2, [sp, #8]
 800ac8e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ac90:	9201      	str	r2, [sp, #4]
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	460b      	mov	r3, r1
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	69b9      	ldr	r1, [r7, #24]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f004 fcbe 	bl	800f61c <tcp_rst>
    }
    last_state = pcb->state;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	7d1b      	ldrb	r3, [r3, #20]
 800aca4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fd34 	bl	800a714 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d004      	beq.n	800acbc <tcp_abandon+0x154>
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	f06f 010c 	mvn.w	r1, #12
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	4798      	blx	r3
  }
}
 800acbc:	3728      	adds	r7, #40	@ 0x28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	08015128 	.word	0x08015128
 800acc8:	0801526c 	.word	0x0801526c
 800accc:	0801516c 	.word	0x0801516c
 800acd0:	08015288 	.word	0x08015288
 800acd4:	20008aa0 	.word	0x20008aa0
 800acd8:	20008a94 	.word	0x20008a94
 800acdc:	20008a9c 	.word	0x20008a9c
 800ace0:	20008aa4 	.word	0x20008aa4

0800ace4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800acec:	2101      	movs	r1, #1
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff ff3a 	bl	800ab68 <tcp_abandon>
}
 800acf4:	bf00      	nop
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <tcp_update_rcv_ann_wnd+0x1c>
 800ad0a:	4b25      	ldr	r3, [pc, #148]	@ (800ada0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ad0c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ad10:	4924      	ldr	r1, [pc, #144]	@ (800ada4 <tcp_update_rcv_ann_wnd+0xa8>)
 800ad12:	4825      	ldr	r0, [pc, #148]	@ (800ada8 <tcp_update_rcv_ann_wnd+0xac>)
 800ad14:	f008 fce6 	bl	80136e4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ad20:	4413      	add	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ad2c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ad30:	bf28      	it	cs
 800ad32:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ad36:	b292      	uxth	r2, r2
 800ad38:	4413      	add	r3, r2
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	db08      	blt.n	800ad54 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	e020      	b.n	800ad96 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dd03      	ble.n	800ad6a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ad68:	e014      	b.n	800ad94 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad7c:	d306      	bcc.n	800ad8c <tcp_update_rcv_ann_wnd+0x90>
 800ad7e:	4b08      	ldr	r3, [pc, #32]	@ (800ada0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ad80:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ad84:	4909      	ldr	r1, [pc, #36]	@ (800adac <tcp_update_rcv_ann_wnd+0xb0>)
 800ad86:	4808      	ldr	r0, [pc, #32]	@ (800ada8 <tcp_update_rcv_ann_wnd+0xac>)
 800ad88:	f008 fcac 	bl	80136e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ad94:	2300      	movs	r3, #0
  }
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	08015128 	.word	0x08015128
 800ada4:	08015384 	.word	0x08015384
 800ada8:	0801516c 	.word	0x0801516c
 800adac:	080153a8 	.word	0x080153a8

0800adb0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d107      	bne.n	800add2 <tcp_recved+0x22>
 800adc2:	4b1f      	ldr	r3, [pc, #124]	@ (800ae40 <tcp_recved+0x90>)
 800adc4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800adc8:	491e      	ldr	r1, [pc, #120]	@ (800ae44 <tcp_recved+0x94>)
 800adca:	481f      	ldr	r0, [pc, #124]	@ (800ae48 <tcp_recved+0x98>)
 800adcc:	f008 fc8a 	bl	80136e4 <iprintf>
 800add0:	e032      	b.n	800ae38 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7d1b      	ldrb	r3, [r3, #20]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d106      	bne.n	800ade8 <tcp_recved+0x38>
 800adda:	4b19      	ldr	r3, [pc, #100]	@ (800ae40 <tcp_recved+0x90>)
 800addc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ade0:	491a      	ldr	r1, [pc, #104]	@ (800ae4c <tcp_recved+0x9c>)
 800ade2:	4819      	ldr	r0, [pc, #100]	@ (800ae48 <tcp_recved+0x98>)
 800ade4:	f008 fc7e 	bl	80136e4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800adec:	887b      	ldrh	r3, [r7, #2]
 800adee:	4413      	add	r3, r2
 800adf0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800adf2:	89fb      	ldrh	r3, [r7, #14]
 800adf4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800adf8:	d804      	bhi.n	800ae04 <tcp_recved+0x54>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adfe:	89fa      	ldrh	r2, [r7, #14]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d204      	bcs.n	800ae0e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ae0a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ae0c:	e002      	b.n	800ae14 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	89fa      	ldrh	r2, [r7, #14]
 800ae12:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff ff71 	bl	800acfc <tcp_update_rcv_ann_wnd>
 800ae1a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ae22:	d309      	bcc.n	800ae38 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	8b5b      	ldrh	r3, [r3, #26]
 800ae28:	f043 0302 	orr.w	r3, r3, #2
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f003 fe3e 	bl	800eab4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	08015128 	.word	0x08015128
 800ae44:	080153c4 	.word	0x080153c4
 800ae48:	0801516c 	.word	0x0801516c
 800ae4c:	080153dc 	.word	0x080153dc

0800ae50 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ae50:	b5b0      	push	{r4, r5, r7, lr}
 800ae52:	b090      	sub	sp, #64	@ 0x40
 800ae54:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ae5c:	4b95      	ldr	r3, [pc, #596]	@ (800b0b4 <tcp_slowtmr+0x264>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	4a94      	ldr	r2, [pc, #592]	@ (800b0b4 <tcp_slowtmr+0x264>)
 800ae64:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ae66:	4b94      	ldr	r3, [pc, #592]	@ (800b0b8 <tcp_slowtmr+0x268>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	4b92      	ldr	r3, [pc, #584]	@ (800b0b8 <tcp_slowtmr+0x268>)
 800ae70:	701a      	strb	r2, [r3, #0]
 800ae72:	e000      	b.n	800ae76 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ae74:	bf00      	nop
  prev = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ae7a:	4b90      	ldr	r3, [pc, #576]	@ (800b0bc <tcp_slowtmr+0x26c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ae80:	e29d      	b.n	800b3be <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	7d1b      	ldrb	r3, [r3, #20]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d106      	bne.n	800ae98 <tcp_slowtmr+0x48>
 800ae8a:	4b8d      	ldr	r3, [pc, #564]	@ (800b0c0 <tcp_slowtmr+0x270>)
 800ae8c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ae90:	498c      	ldr	r1, [pc, #560]	@ (800b0c4 <tcp_slowtmr+0x274>)
 800ae92:	488d      	ldr	r0, [pc, #564]	@ (800b0c8 <tcp_slowtmr+0x278>)
 800ae94:	f008 fc26 	bl	80136e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	7d1b      	ldrb	r3, [r3, #20]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d106      	bne.n	800aeae <tcp_slowtmr+0x5e>
 800aea0:	4b87      	ldr	r3, [pc, #540]	@ (800b0c0 <tcp_slowtmr+0x270>)
 800aea2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800aea6:	4989      	ldr	r1, [pc, #548]	@ (800b0cc <tcp_slowtmr+0x27c>)
 800aea8:	4887      	ldr	r0, [pc, #540]	@ (800b0c8 <tcp_slowtmr+0x278>)
 800aeaa:	f008 fc1b 	bl	80136e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800aeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb0:	7d1b      	ldrb	r3, [r3, #20]
 800aeb2:	2b0a      	cmp	r3, #10
 800aeb4:	d106      	bne.n	800aec4 <tcp_slowtmr+0x74>
 800aeb6:	4b82      	ldr	r3, [pc, #520]	@ (800b0c0 <tcp_slowtmr+0x270>)
 800aeb8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800aebc:	4984      	ldr	r1, [pc, #528]	@ (800b0d0 <tcp_slowtmr+0x280>)
 800aebe:	4882      	ldr	r0, [pc, #520]	@ (800b0c8 <tcp_slowtmr+0x278>)
 800aec0:	f008 fc10 	bl	80136e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800aec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec6:	7f9a      	ldrb	r2, [r3, #30]
 800aec8:	4b7b      	ldr	r3, [pc, #492]	@ (800b0b8 <tcp_slowtmr+0x268>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d105      	bne.n	800aedc <tcp_slowtmr+0x8c>
      prev = pcb;
 800aed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800aed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800aeda:	e270      	b.n	800b3be <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800aedc:	4b76      	ldr	r3, [pc, #472]	@ (800b0b8 <tcp_slowtmr+0x268>)
 800aede:	781a      	ldrb	r2, [r3, #0]
 800aee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800aef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef2:	7d1b      	ldrb	r3, [r3, #20]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d10a      	bne.n	800af0e <tcp_slowtmr+0xbe>
 800aef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aefe:	2b05      	cmp	r3, #5
 800af00:	d905      	bls.n	800af0e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800af02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af06:	3301      	adds	r3, #1
 800af08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af0c:	e11e      	b.n	800b14c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800af0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af14:	2b0b      	cmp	r3, #11
 800af16:	d905      	bls.n	800af24 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800af18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af1c:	3301      	adds	r3, #1
 800af1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af22:	e113      	b.n	800b14c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800af24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af26:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d075      	beq.n	800b01a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800af2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af32:	2b00      	cmp	r3, #0
 800af34:	d006      	beq.n	800af44 <tcp_slowtmr+0xf4>
 800af36:	4b62      	ldr	r3, [pc, #392]	@ (800b0c0 <tcp_slowtmr+0x270>)
 800af38:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800af3c:	4965      	ldr	r1, [pc, #404]	@ (800b0d4 <tcp_slowtmr+0x284>)
 800af3e:	4862      	ldr	r0, [pc, #392]	@ (800b0c8 <tcp_slowtmr+0x278>)
 800af40:	f008 fbd0 	bl	80136e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800af44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d106      	bne.n	800af5a <tcp_slowtmr+0x10a>
 800af4c:	4b5c      	ldr	r3, [pc, #368]	@ (800b0c0 <tcp_slowtmr+0x270>)
 800af4e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800af52:	4961      	ldr	r1, [pc, #388]	@ (800b0d8 <tcp_slowtmr+0x288>)
 800af54:	485c      	ldr	r0, [pc, #368]	@ (800b0c8 <tcp_slowtmr+0x278>)
 800af56:	f008 fbc5 	bl	80136e4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800af5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800af60:	2b0b      	cmp	r3, #11
 800af62:	d905      	bls.n	800af70 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800af64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af68:	3301      	adds	r3, #1
 800af6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af6e:	e0ed      	b.n	800b14c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800af70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af72:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800af76:	3b01      	subs	r3, #1
 800af78:	4a58      	ldr	r2, [pc, #352]	@ (800b0dc <tcp_slowtmr+0x28c>)
 800af7a:	5cd3      	ldrb	r3, [r2, r3]
 800af7c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800af7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800af84:	7c7a      	ldrb	r2, [r7, #17]
 800af86:	429a      	cmp	r2, r3
 800af88:	d907      	bls.n	800af9a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800af8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800af90:	3301      	adds	r3, #1
 800af92:	b2da      	uxtb	r2, r3
 800af94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af96:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800af9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800afa0:	7c7a      	ldrb	r2, [r7, #17]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	f200 80d2 	bhi.w	800b14c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800afa8:	2301      	movs	r3, #1
 800afaa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800afac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d108      	bne.n	800afc8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800afb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afb8:	f004 fc24 	bl	800f804 <tcp_zero_window_probe>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d014      	beq.n	800afec <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800afc2:	2300      	movs	r3, #0
 800afc4:	623b      	str	r3, [r7, #32]
 800afc6:	e011      	b.n	800afec <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800afc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800afce:	4619      	mov	r1, r3
 800afd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afd2:	f003 fae9 	bl	800e5a8 <tcp_split_unsent_seg>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d107      	bne.n	800afec <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800afdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afde:	f003 fd69 	bl	800eab4 <tcp_output>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 80ac 	beq.w	800b14c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800aff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800affc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b002:	2b06      	cmp	r3, #6
 800b004:	f200 80a2 	bhi.w	800b14c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800b008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b00e:	3301      	adds	r3, #1
 800b010:	b2da      	uxtb	r2, r3
 800b012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b014:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800b018:	e098      	b.n	800b14c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b020:	2b00      	cmp	r3, #0
 800b022:	db0f      	blt.n	800b044 <tcp_slowtmr+0x1f4>
 800b024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b026:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b02a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b02e:	4293      	cmp	r3, r2
 800b030:	d008      	beq.n	800b044 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800b032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b034:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3301      	adds	r3, #1
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	b21a      	sxth	r2, r3
 800b040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b042:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800b04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b050:	429a      	cmp	r2, r3
 800b052:	db7b      	blt.n	800b14c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b054:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b056:	f004 f821 	bl	800f09c <tcp_rexmit_rto_prepare>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <tcp_slowtmr+0x220>
 800b060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b064:	2b00      	cmp	r3, #0
 800b066:	d171      	bne.n	800b14c <tcp_slowtmr+0x2fc>
 800b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d06d      	beq.n	800b14c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800b070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b072:	7d1b      	ldrb	r3, [r3, #20]
 800b074:	2b02      	cmp	r3, #2
 800b076:	d03a      	beq.n	800b0ee <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b07e:	2b0c      	cmp	r3, #12
 800b080:	bf28      	it	cs
 800b082:	230c      	movcs	r3, #12
 800b084:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b088:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b08c:	10db      	asrs	r3, r3, #3
 800b08e:	b21b      	sxth	r3, r3
 800b090:	461a      	mov	r2, r3
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b098:	4413      	add	r3, r2
 800b09a:	7efa      	ldrb	r2, [r7, #27]
 800b09c:	4910      	ldr	r1, [pc, #64]	@ (800b0e0 <tcp_slowtmr+0x290>)
 800b09e:	5c8a      	ldrb	r2, [r1, r2]
 800b0a0:	4093      	lsls	r3, r2
 800b0a2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	dc1a      	bgt.n	800b0e4 <tcp_slowtmr+0x294>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	b21a      	sxth	r2, r3
 800b0b2:	e019      	b.n	800b0e8 <tcp_slowtmr+0x298>
 800b0b4:	20008a90 	.word	0x20008a90
 800b0b8:	20008aa6 	.word	0x20008aa6
 800b0bc:	20008a9c 	.word	0x20008a9c
 800b0c0:	08015128 	.word	0x08015128
 800b0c4:	0801546c 	.word	0x0801546c
 800b0c8:	0801516c 	.word	0x0801516c
 800b0cc:	08015498 	.word	0x08015498
 800b0d0:	080154c4 	.word	0x080154c4
 800b0d4:	080154f4 	.word	0x080154f4
 800b0d8:	08015528 	.word	0x08015528
 800b0dc:	0801759c 	.word	0x0801759c
 800b0e0:	0801758c 	.word	0x0801758c
 800b0e4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800b0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b100:	4293      	cmp	r3, r2
 800b102:	bf28      	it	cs
 800b104:	4613      	movcs	r3, r2
 800b106:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b108:	8a7b      	ldrh	r3, [r7, #18]
 800b10a:	085b      	lsrs	r3, r3, #1
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b110:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b116:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	b29b      	uxth	r3, r3
 800b122:	429a      	cmp	r2, r3
 800b124:	d206      	bcs.n	800b134 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b128:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b130:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800b134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b136:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800b138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b13a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b140:	2200      	movs	r2, #0
 800b142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b148:	f004 f818 	bl	800f17c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14e:	7d1b      	ldrb	r3, [r3, #20]
 800b150:	2b06      	cmp	r3, #6
 800b152:	d111      	bne.n	800b178 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800b154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b156:	8b5b      	ldrh	r3, [r3, #26]
 800b158:	f003 0310 	and.w	r3, r3, #16
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b160:	4b9c      	ldr	r3, [pc, #624]	@ (800b3d4 <tcp_slowtmr+0x584>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	2b28      	cmp	r3, #40	@ 0x28
 800b16c:	d904      	bls.n	800b178 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800b16e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b172:	3301      	adds	r3, #1
 800b174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	7a5b      	ldrb	r3, [r3, #9]
 800b17c:	f003 0308 	and.w	r3, r3, #8
 800b180:	2b00      	cmp	r3, #0
 800b182:	d04a      	beq.n	800b21a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d003      	beq.n	800b194 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b190:	2b07      	cmp	r3, #7
 800b192:	d142      	bne.n	800b21a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b194:	4b8f      	ldr	r3, [pc, #572]	@ (800b3d4 <tcp_slowtmr+0x584>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b1a4:	4b8c      	ldr	r3, [pc, #560]	@ (800b3d8 <tcp_slowtmr+0x588>)
 800b1a6:	440b      	add	r3, r1
 800b1a8:	498c      	ldr	r1, [pc, #560]	@ (800b3dc <tcp_slowtmr+0x58c>)
 800b1aa:	fba1 1303 	umull	r1, r3, r1, r3
 800b1ae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d90a      	bls.n	800b1ca <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800b1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800b1be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b1c8:	e027      	b.n	800b21a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b1ca:	4b82      	ldr	r3, [pc, #520]	@ (800b3d4 <tcp_slowtmr+0x584>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	4b7f      	ldr	r3, [pc, #508]	@ (800b3e0 <tcp_slowtmr+0x590>)
 800b1e4:	fb00 f303 	mul.w	r3, r0, r3
 800b1e8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b1ea:	497c      	ldr	r1, [pc, #496]	@ (800b3dc <tcp_slowtmr+0x58c>)
 800b1ec:	fba1 1303 	umull	r1, r3, r1, r3
 800b1f0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d911      	bls.n	800b21a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b1f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b1f8:	f004 fac4 	bl	800f784 <tcp_keepalive>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800b202:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b206:	2b00      	cmp	r3, #0
 800b208:	d107      	bne.n	800b21a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b210:	3301      	adds	r3, #1
 800b212:	b2da      	uxtb	r2, r3
 800b214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b216:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d011      	beq.n	800b246 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b222:	4b6c      	ldr	r3, [pc, #432]	@ (800b3d4 <tcp_slowtmr+0x584>)
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	1ad2      	subs	r2, r2, r3
 800b22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b232:	4619      	mov	r1, r3
 800b234:	460b      	mov	r3, r1
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	440b      	add	r3, r1
 800b23a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d302      	bcc.n	800b246 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800b240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b242:	f000 fddd 	bl	800be00 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800b246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b248:	7d1b      	ldrb	r3, [r3, #20]
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d10b      	bne.n	800b266 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b24e:	4b61      	ldr	r3, [pc, #388]	@ (800b3d4 <tcp_slowtmr+0x584>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	2b28      	cmp	r3, #40	@ 0x28
 800b25a:	d904      	bls.n	800b266 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800b25c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b260:	3301      	adds	r3, #1
 800b262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800b266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b268:	7d1b      	ldrb	r3, [r3, #20]
 800b26a:	2b09      	cmp	r3, #9
 800b26c:	d10b      	bne.n	800b286 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b26e:	4b59      	ldr	r3, [pc, #356]	@ (800b3d4 <tcp_slowtmr+0x584>)
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	2bf0      	cmp	r3, #240	@ 0xf0
 800b27a:	d904      	bls.n	800b286 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b27c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b280:	3301      	adds	r3, #1
 800b282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800b286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d060      	beq.n	800b350 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800b28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b294:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800b296:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b298:	f000 fbfe 	bl	800ba98 <tcp_pcb_purge>
      if (prev != NULL) {
 800b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d010      	beq.n	800b2c4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b2a2:	4b50      	ldr	r3, [pc, #320]	@ (800b3e4 <tcp_slowtmr+0x594>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d106      	bne.n	800b2ba <tcp_slowtmr+0x46a>
 800b2ac:	4b4e      	ldr	r3, [pc, #312]	@ (800b3e8 <tcp_slowtmr+0x598>)
 800b2ae:	f240 526d 	movw	r2, #1389	@ 0x56d
 800b2b2:	494e      	ldr	r1, [pc, #312]	@ (800b3ec <tcp_slowtmr+0x59c>)
 800b2b4:	484e      	ldr	r0, [pc, #312]	@ (800b3f0 <tcp_slowtmr+0x5a0>)
 800b2b6:	f008 fa15 	bl	80136e4 <iprintf>
        prev->next = pcb->next;
 800b2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c0:	60da      	str	r2, [r3, #12]
 800b2c2:	e00f      	b.n	800b2e4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b2c4:	4b47      	ldr	r3, [pc, #284]	@ (800b3e4 <tcp_slowtmr+0x594>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d006      	beq.n	800b2dc <tcp_slowtmr+0x48c>
 800b2ce:	4b46      	ldr	r3, [pc, #280]	@ (800b3e8 <tcp_slowtmr+0x598>)
 800b2d0:	f240 5271 	movw	r2, #1393	@ 0x571
 800b2d4:	4947      	ldr	r1, [pc, #284]	@ (800b3f4 <tcp_slowtmr+0x5a4>)
 800b2d6:	4846      	ldr	r0, [pc, #280]	@ (800b3f0 <tcp_slowtmr+0x5a0>)
 800b2d8:	f008 fa04 	bl	80136e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	4a40      	ldr	r2, [pc, #256]	@ (800b3e4 <tcp_slowtmr+0x594>)
 800b2e2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800b2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d013      	beq.n	800b314 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ee:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b2f4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800b2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2fc:	8ad2      	ldrh	r2, [r2, #22]
 800b2fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b300:	8b09      	ldrh	r1, [r1, #24]
 800b302:	9102      	str	r1, [sp, #8]
 800b304:	9201      	str	r2, [sp, #4]
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	462b      	mov	r3, r5
 800b30a:	4622      	mov	r2, r4
 800b30c:	4601      	mov	r1, r0
 800b30e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b310:	f004 f984 	bl	800f61c <tcp_rst>
      err_arg = pcb->callback_arg;
 800b314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31c:	7d1b      	ldrb	r3, [r3, #20]
 800b31e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b322:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b32a:	6838      	ldr	r0, [r7, #0]
 800b32c:	f7ff f9f2 	bl	800a714 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b330:	4b31      	ldr	r3, [pc, #196]	@ (800b3f8 <tcp_slowtmr+0x5a8>)
 800b332:	2200      	movs	r2, #0
 800b334:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d004      	beq.n	800b346 <tcp_slowtmr+0x4f6>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f06f 010c 	mvn.w	r1, #12
 800b342:	68b8      	ldr	r0, [r7, #8]
 800b344:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b346:	4b2c      	ldr	r3, [pc, #176]	@ (800b3f8 <tcp_slowtmr+0x5a8>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d037      	beq.n	800b3be <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b34e:	e592      	b.n	800ae76 <tcp_slowtmr+0x26>
      prev = pcb;
 800b350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b352:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800b35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35c:	7f1b      	ldrb	r3, [r3, #28]
 800b35e:	3301      	adds	r3, #1
 800b360:	b2da      	uxtb	r2, r3
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b368:	7f1a      	ldrb	r2, [r3, #28]
 800b36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36c:	7f5b      	ldrb	r3, [r3, #29]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d325      	bcc.n	800b3be <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	2200      	movs	r2, #0
 800b376:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800b378:	4b1f      	ldr	r3, [pc, #124]	@ (800b3f8 <tcp_slowtmr+0x5a8>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00b      	beq.n	800b3a0 <tcp_slowtmr+0x550>
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b38e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b390:	6912      	ldr	r2, [r2, #16]
 800b392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b39e:	e002      	b.n	800b3a6 <tcp_slowtmr+0x556>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800b3a6:	4b14      	ldr	r3, [pc, #80]	@ (800b3f8 <tcp_slowtmr+0x5a8>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f47f ad62 	bne.w	800ae74 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b3b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b3b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3ba:	f003 fb7b 	bl	800eab4 <tcp_output>
  while (pcb != NULL) {
 800b3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f47f ad5e 	bne.w	800ae82 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b3fc <tcp_slowtmr+0x5ac>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b3d0:	e069      	b.n	800b4a6 <tcp_slowtmr+0x656>
 800b3d2:	bf00      	nop
 800b3d4:	20008a90 	.word	0x20008a90
 800b3d8:	000a4cb8 	.word	0x000a4cb8
 800b3dc:	10624dd3 	.word	0x10624dd3
 800b3e0:	000124f8 	.word	0x000124f8
 800b3e4:	20008a9c 	.word	0x20008a9c
 800b3e8:	08015128 	.word	0x08015128
 800b3ec:	08015560 	.word	0x08015560
 800b3f0:	0801516c 	.word	0x0801516c
 800b3f4:	0801558c 	.word	0x0801558c
 800b3f8:	20008aa4 	.word	0x20008aa4
 800b3fc:	20008aa0 	.word	0x20008aa0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	7d1b      	ldrb	r3, [r3, #20]
 800b404:	2b0a      	cmp	r3, #10
 800b406:	d006      	beq.n	800b416 <tcp_slowtmr+0x5c6>
 800b408:	4b2b      	ldr	r3, [pc, #172]	@ (800b4b8 <tcp_slowtmr+0x668>)
 800b40a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800b40e:	492b      	ldr	r1, [pc, #172]	@ (800b4bc <tcp_slowtmr+0x66c>)
 800b410:	482b      	ldr	r0, [pc, #172]	@ (800b4c0 <tcp_slowtmr+0x670>)
 800b412:	f008 f967 	bl	80136e4 <iprintf>
    pcb_remove = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b41c:	4b29      	ldr	r3, [pc, #164]	@ (800b4c4 <tcp_slowtmr+0x674>)
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	2bf0      	cmp	r3, #240	@ 0xf0
 800b428:	d904      	bls.n	800b434 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800b42a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b42e:	3301      	adds	r3, #1
 800b430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d02f      	beq.n	800b49c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b43c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b43e:	f000 fb2b 	bl	800ba98 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b444:	2b00      	cmp	r3, #0
 800b446:	d010      	beq.n	800b46a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b448:	4b1f      	ldr	r3, [pc, #124]	@ (800b4c8 <tcp_slowtmr+0x678>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44e:	429a      	cmp	r2, r3
 800b450:	d106      	bne.n	800b460 <tcp_slowtmr+0x610>
 800b452:	4b19      	ldr	r3, [pc, #100]	@ (800b4b8 <tcp_slowtmr+0x668>)
 800b454:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b458:	491c      	ldr	r1, [pc, #112]	@ (800b4cc <tcp_slowtmr+0x67c>)
 800b45a:	4819      	ldr	r0, [pc, #100]	@ (800b4c0 <tcp_slowtmr+0x670>)
 800b45c:	f008 f942 	bl	80136e4 <iprintf>
        prev->next = pcb->next;
 800b460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b462:	68da      	ldr	r2, [r3, #12]
 800b464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b466:	60da      	str	r2, [r3, #12]
 800b468:	e00f      	b.n	800b48a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b46a:	4b17      	ldr	r3, [pc, #92]	@ (800b4c8 <tcp_slowtmr+0x678>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b470:	429a      	cmp	r2, r3
 800b472:	d006      	beq.n	800b482 <tcp_slowtmr+0x632>
 800b474:	4b10      	ldr	r3, [pc, #64]	@ (800b4b8 <tcp_slowtmr+0x668>)
 800b476:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b47a:	4915      	ldr	r1, [pc, #84]	@ (800b4d0 <tcp_slowtmr+0x680>)
 800b47c:	4810      	ldr	r0, [pc, #64]	@ (800b4c0 <tcp_slowtmr+0x670>)
 800b47e:	f008 f931 	bl	80136e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	4a10      	ldr	r2, [pc, #64]	@ (800b4c8 <tcp_slowtmr+0x678>)
 800b488:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b494:	69f8      	ldr	r0, [r7, #28]
 800b496:	f7ff f93d 	bl	800a714 <tcp_free>
 800b49a:	e004      	b.n	800b4a6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1a9      	bne.n	800b400 <tcp_slowtmr+0x5b0>
    }
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	3730      	adds	r7, #48	@ 0x30
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	08015128 	.word	0x08015128
 800b4bc:	080155b8 	.word	0x080155b8
 800b4c0:	0801516c 	.word	0x0801516c
 800b4c4:	20008a90 	.word	0x20008a90
 800b4c8:	20008aa0 	.word	0x20008aa0
 800b4cc:	080155e8 	.word	0x080155e8
 800b4d0:	08015610 	.word	0x08015610

0800b4d4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b4da:	4b2d      	ldr	r3, [pc, #180]	@ (800b590 <tcp_fasttmr+0xbc>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	4b2b      	ldr	r3, [pc, #172]	@ (800b590 <tcp_fasttmr+0xbc>)
 800b4e4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b4e6:	4b2b      	ldr	r3, [pc, #172]	@ (800b594 <tcp_fasttmr+0xc0>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b4ec:	e048      	b.n	800b580 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	7f9a      	ldrb	r2, [r3, #30]
 800b4f2:	4b27      	ldr	r3, [pc, #156]	@ (800b590 <tcp_fasttmr+0xbc>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d03f      	beq.n	800b57a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b4fa:	4b25      	ldr	r3, [pc, #148]	@ (800b590 <tcp_fasttmr+0xbc>)
 800b4fc:	781a      	ldrb	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	8b5b      	ldrh	r3, [r3, #26]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d010      	beq.n	800b530 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	8b5b      	ldrh	r3, [r3, #26]
 800b512:	f043 0302 	orr.w	r3, r3, #2
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f003 fac9 	bl	800eab4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	8b5b      	ldrh	r3, [r3, #26]
 800b526:	f023 0303 	bic.w	r3, r3, #3
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8b5b      	ldrh	r3, [r3, #26]
 800b534:	f003 0308 	and.w	r3, r3, #8
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d009      	beq.n	800b550 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	8b5b      	ldrh	r3, [r3, #26]
 800b540:	f023 0308 	bic.w	r3, r3, #8
 800b544:	b29a      	uxth	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff fa76 	bl	800aa3c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00a      	beq.n	800b574 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b55e:	4b0e      	ldr	r3, [pc, #56]	@ (800b598 <tcp_fasttmr+0xc4>)
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f819 	bl	800b59c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b56a:	4b0b      	ldr	r3, [pc, #44]	@ (800b598 <tcp_fasttmr+0xc4>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d000      	beq.n	800b574 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b572:	e7b8      	b.n	800b4e6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	607b      	str	r3, [r7, #4]
 800b578:	e002      	b.n	800b580 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1b3      	bne.n	800b4ee <tcp_fasttmr+0x1a>
    }
  }
}
 800b586:	bf00      	nop
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20008aa6 	.word	0x20008aa6
 800b594:	20008a9c 	.word	0x20008a9c
 800b598:	20008aa4 	.word	0x20008aa4

0800b59c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d109      	bne.n	800b5be <tcp_process_refused_data+0x22>
 800b5aa:	4b37      	ldr	r3, [pc, #220]	@ (800b688 <tcp_process_refused_data+0xec>)
 800b5ac:	f240 6209 	movw	r2, #1545	@ 0x609
 800b5b0:	4936      	ldr	r1, [pc, #216]	@ (800b68c <tcp_process_refused_data+0xf0>)
 800b5b2:	4837      	ldr	r0, [pc, #220]	@ (800b690 <tcp_process_refused_data+0xf4>)
 800b5b4:	f008 f896 	bl	80136e4 <iprintf>
 800b5b8:	f06f 030f 	mvn.w	r3, #15
 800b5bc:	e060      	b.n	800b680 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5c2:	7b5b      	ldrb	r3, [r3, #13]
 800b5c4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5ca:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00b      	beq.n	800b5f4 <tcp_process_refused_data+0x58>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6918      	ldr	r0, [r3, #16]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	47a0      	blx	r4
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]
 800b5f2:	e007      	b.n	800b604 <tcp_process_refused_data+0x68>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	f000 f8a4 	bl	800b748 <tcp_recv_null>
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d12a      	bne.n	800b662 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	f003 0320 	and.w	r3, r3, #32
 800b612:	2b00      	cmp	r3, #0
 800b614:	d033      	beq.n	800b67e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b61a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b61e:	d005      	beq.n	800b62c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b624:	3301      	adds	r3, #1
 800b626:	b29a      	uxth	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00b      	beq.n	800b64e <tcp_process_refused_data+0xb2>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6918      	ldr	r0, [r3, #16]
 800b640:	2300      	movs	r3, #0
 800b642:	2200      	movs	r2, #0
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	47a0      	blx	r4
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e001      	b.n	800b652 <tcp_process_refused_data+0xb6>
 800b64e:	2300      	movs	r3, #0
 800b650:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b656:	f113 0f0d 	cmn.w	r3, #13
 800b65a:	d110      	bne.n	800b67e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b65c:	f06f 030c 	mvn.w	r3, #12
 800b660:	e00e      	b.n	800b680 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b666:	f113 0f0d 	cmn.w	r3, #13
 800b66a:	d102      	bne.n	800b672 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b66c:	f06f 030c 	mvn.w	r3, #12
 800b670:	e006      	b.n	800b680 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800b678:	f06f 0304 	mvn.w	r3, #4
 800b67c:	e000      	b.n	800b680 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	bd90      	pop	{r4, r7, pc}
 800b688:	08015128 	.word	0x08015128
 800b68c:	08015638 	.word	0x08015638
 800b690:	0801516c 	.word	0x0801516c

0800b694 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b69c:	e007      	b.n	800b6ae <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f80a 	bl	800b6be <tcp_seg_free>
    seg = next;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f4      	bne.n	800b69e <tcp_segs_free+0xa>
  }
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00c      	beq.n	800b6e6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d004      	beq.n	800b6de <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe fd6b 	bl	800a1b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b6de:	6879      	ldr	r1, [r7, #4]
 800b6e0:	2003      	movs	r0, #3
 800b6e2:	f7fd fef1 	bl	80094c8 <memp_free>
  }
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d106      	bne.n	800b70c <tcp_seg_copy+0x1c>
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b73c <tcp_seg_copy+0x4c>)
 800b700:	f240 6282 	movw	r2, #1666	@ 0x682
 800b704:	490e      	ldr	r1, [pc, #56]	@ (800b740 <tcp_seg_copy+0x50>)
 800b706:	480f      	ldr	r0, [pc, #60]	@ (800b744 <tcp_seg_copy+0x54>)
 800b708:	f007 ffec 	bl	80136e4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b70c:	2003      	movs	r0, #3
 800b70e:	f7fd fe6b 	bl	80093e8 <memp_malloc>
 800b712:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <tcp_seg_copy+0x2e>
    return NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	e00a      	b.n	800b734 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b71e:	2210      	movs	r2, #16
 800b720:	6879      	ldr	r1, [r7, #4]
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f008 f9eb 	bl	8013afe <memcpy>
  pbuf_ref(cseg->p);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fde1 	bl	800a2f4 <pbuf_ref>
  return cseg;
 800b732:	68fb      	ldr	r3, [r7, #12]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	08015128 	.word	0x08015128
 800b740:	0801567c 	.word	0x0801567c
 800b744:	0801516c 	.word	0x0801516c

0800b748 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <tcp_recv_null+0x28>
 800b75c:	4b12      	ldr	r3, [pc, #72]	@ (800b7a8 <tcp_recv_null+0x60>)
 800b75e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b762:	4912      	ldr	r1, [pc, #72]	@ (800b7ac <tcp_recv_null+0x64>)
 800b764:	4812      	ldr	r0, [pc, #72]	@ (800b7b0 <tcp_recv_null+0x68>)
 800b766:	f007 ffbd 	bl	80136e4 <iprintf>
 800b76a:	f06f 030f 	mvn.w	r3, #15
 800b76e:	e016      	b.n	800b79e <tcp_recv_null+0x56>

  if (p != NULL) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d009      	beq.n	800b78a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	891b      	ldrh	r3, [r3, #8]
 800b77a:	4619      	mov	r1, r3
 800b77c:	68b8      	ldr	r0, [r7, #8]
 800b77e:	f7ff fb17 	bl	800adb0 <tcp_recved>
    pbuf_free(p);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7fe fd16 	bl	800a1b4 <pbuf_free>
 800b788:	e008      	b.n	800b79c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b78a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d104      	bne.n	800b79c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b792:	68b8      	ldr	r0, [r7, #8]
 800b794:	f7ff f9bc 	bl	800ab10 <tcp_close>
 800b798:	4603      	mov	r3, r0
 800b79a:	e000      	b.n	800b79e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	08015128 	.word	0x08015128
 800b7ac:	08015698 	.word	0x08015698
 800b7b0:	0801516c 	.word	0x0801516c

0800b7b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	db01      	blt.n	800b7ca <tcp_kill_prio+0x16>
 800b7c6:	79fb      	ldrb	r3, [r7, #7]
 800b7c8:	e000      	b.n	800b7cc <tcp_kill_prio+0x18>
 800b7ca:	237f      	movs	r3, #127	@ 0x7f
 800b7cc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b7ce:	7afb      	ldrb	r3, [r7, #11]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d034      	beq.n	800b83e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b7d4:	7afb      	ldrb	r3, [r7, #11]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7e2:	4b19      	ldr	r3, [pc, #100]	@ (800b848 <tcp_kill_prio+0x94>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	e01f      	b.n	800b82a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	7d5b      	ldrb	r3, [r3, #21]
 800b7ee:	7afa      	ldrb	r2, [r7, #11]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d80c      	bhi.n	800b80e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b7f8:	7afa      	ldrb	r2, [r7, #11]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d112      	bne.n	800b824 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b7fe:	4b13      	ldr	r3, [pc, #76]	@ (800b84c <tcp_kill_prio+0x98>)
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d80a      	bhi.n	800b824 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b80e:	4b0f      	ldr	r3, [pc, #60]	@ (800b84c <tcp_kill_prio+0x98>)
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	7d5b      	ldrb	r3, [r3, #21]
 800b822:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	617b      	str	r3, [r7, #20]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1dc      	bne.n	800b7ea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d004      	beq.n	800b840 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b836:	6938      	ldr	r0, [r7, #16]
 800b838:	f7ff fa54 	bl	800ace4 <tcp_abort>
 800b83c:	e000      	b.n	800b840 <tcp_kill_prio+0x8c>
    return;
 800b83e:	bf00      	nop
  }
}
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20008a9c 	.word	0x20008a9c
 800b84c:	20008a90 	.word	0x20008a90

0800b850 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b85a:	79fb      	ldrb	r3, [r7, #7]
 800b85c:	2b08      	cmp	r3, #8
 800b85e:	d009      	beq.n	800b874 <tcp_kill_state+0x24>
 800b860:	79fb      	ldrb	r3, [r7, #7]
 800b862:	2b09      	cmp	r3, #9
 800b864:	d006      	beq.n	800b874 <tcp_kill_state+0x24>
 800b866:	4b1a      	ldr	r3, [pc, #104]	@ (800b8d0 <tcp_kill_state+0x80>)
 800b868:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800b86c:	4919      	ldr	r1, [pc, #100]	@ (800b8d4 <tcp_kill_state+0x84>)
 800b86e:	481a      	ldr	r0, [pc, #104]	@ (800b8d8 <tcp_kill_state+0x88>)
 800b870:	f007 ff38 	bl	80136e4 <iprintf>

  inactivity = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b87c:	4b17      	ldr	r3, [pc, #92]	@ (800b8dc <tcp_kill_state+0x8c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e017      	b.n	800b8b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	7d1b      	ldrb	r3, [r3, #20]
 800b888:	79fa      	ldrb	r2, [r7, #7]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d10f      	bne.n	800b8ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b88e:	4b14      	ldr	r3, [pc, #80]	@ (800b8e0 <tcp_kill_state+0x90>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	6a1b      	ldr	r3, [r3, #32]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d807      	bhi.n	800b8ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b89e:	4b10      	ldr	r3, [pc, #64]	@ (800b8e0 <tcp_kill_state+0x90>)
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e4      	bne.n	800b884 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	6938      	ldr	r0, [r7, #16]
 800b8c4:	f7ff f950 	bl	800ab68 <tcp_abandon>
  }
}
 800b8c8:	bf00      	nop
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	08015128 	.word	0x08015128
 800b8d4:	080156b4 	.word	0x080156b4
 800b8d8:	0801516c 	.word	0x0801516c
 800b8dc:	20008a9c 	.word	0x20008a9c
 800b8e0:	20008a90 	.word	0x20008a90

0800b8e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8f2:	4b12      	ldr	r3, [pc, #72]	@ (800b93c <tcp_kill_timewait+0x58>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	e012      	b.n	800b920 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b8fa:	4b11      	ldr	r3, [pc, #68]	@ (800b940 <tcp_kill_timewait+0x5c>)
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	429a      	cmp	r2, r3
 800b908:	d807      	bhi.n	800b91a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b90a:	4b0d      	ldr	r3, [pc, #52]	@ (800b940 <tcp_kill_timewait+0x5c>)
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1e9      	bne.n	800b8fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b92c:	68b8      	ldr	r0, [r7, #8]
 800b92e:	f7ff f9d9 	bl	800ace4 <tcp_abort>
  }
}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20008aa0 	.word	0x20008aa0
 800b940:	20008a90 	.word	0x20008a90

0800b944 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b94a:	4b10      	ldr	r3, [pc, #64]	@ (800b98c <tcp_handle_closepend+0x48>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b950:	e014      	b.n	800b97c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8b5b      	ldrh	r3, [r3, #26]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d009      	beq.n	800b978 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8b5b      	ldrh	r3, [r3, #26]
 800b968:	f023 0308 	bic.w	r3, r3, #8
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff f862 	bl	800aa3c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1e7      	bne.n	800b952 <tcp_handle_closepend+0xe>
  }
}
 800b982:	bf00      	nop
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20008a9c 	.word	0x20008a9c

0800b990 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b99a:	2001      	movs	r0, #1
 800b99c:	f7fd fd24 	bl	80093e8 <memp_malloc>
 800b9a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d126      	bne.n	800b9f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b9a8:	f7ff ffcc 	bl	800b944 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b9ac:	f7ff ff9a 	bl	800b8e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	f7fd fd19 	bl	80093e8 <memp_malloc>
 800b9b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d11b      	bne.n	800b9f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b9be:	2009      	movs	r0, #9
 800b9c0:	f7ff ff46 	bl	800b850 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	f7fd fd0f 	bl	80093e8 <memp_malloc>
 800b9ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d111      	bne.n	800b9f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b9d2:	2008      	movs	r0, #8
 800b9d4:	f7ff ff3c 	bl	800b850 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9d8:	2001      	movs	r0, #1
 800b9da:	f7fd fd05 	bl	80093e8 <memp_malloc>
 800b9de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d107      	bne.n	800b9f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b9e6:	79fb      	ldrb	r3, [r7, #7]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff fee3 	bl	800b7b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	f7fd fcfa 	bl	80093e8 <memp_malloc>
 800b9f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d03f      	beq.n	800ba7c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b9fc:	229c      	movs	r2, #156	@ 0x9c
 800b9fe:	2100      	movs	r1, #0
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f007 ffc7 	bl	8013994 <memset>
    pcb->prio = prio;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	79fa      	ldrb	r2, [r7, #7]
 800ba0a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ba12:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ba1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	22ff      	movs	r2, #255	@ 0xff
 800ba2a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ba32:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2206      	movs	r2, #6
 800ba38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2206      	movs	r2, #6
 800ba40:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba48:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ba52:	4b0d      	ldr	r3, [pc, #52]	@ (800ba88 <tcp_alloc+0xf8>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ba5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba8c <tcp_alloc+0xfc>)
 800ba5c:	781a      	ldrb	r2, [r3, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ba68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4a08      	ldr	r2, [pc, #32]	@ (800ba90 <tcp_alloc+0x100>)
 800ba70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4a07      	ldr	r2, [pc, #28]	@ (800ba94 <tcp_alloc+0x104>)
 800ba78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20008a90 	.word	0x20008a90
 800ba8c:	20008aa6 	.word	0x20008aa6
 800ba90:	0800b749 	.word	0x0800b749
 800ba94:	006ddd00 	.word	0x006ddd00

0800ba98 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d107      	bne.n	800bab6 <tcp_pcb_purge+0x1e>
 800baa6:	4b21      	ldr	r3, [pc, #132]	@ (800bb2c <tcp_pcb_purge+0x94>)
 800baa8:	f640 0251 	movw	r2, #2129	@ 0x851
 800baac:	4920      	ldr	r1, [pc, #128]	@ (800bb30 <tcp_pcb_purge+0x98>)
 800baae:	4821      	ldr	r0, [pc, #132]	@ (800bb34 <tcp_pcb_purge+0x9c>)
 800bab0:	f007 fe18 	bl	80136e4 <iprintf>
 800bab4:	e037      	b.n	800bb26 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	7d1b      	ldrb	r3, [r3, #20]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d033      	beq.n	800bb26 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bac2:	2b0a      	cmp	r3, #10
 800bac4:	d02f      	beq.n	800bb26 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d02b      	beq.n	800bb26 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d007      	beq.n	800bae6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bada:	4618      	mov	r0, r3
 800badc:	f7fe fb6a 	bl	800a1b4 <pbuf_free>
      pcb->refused_data = NULL;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f986 	bl	800be00 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bafa:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff fdc7 	bl	800b694 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fdc2 	bl	800b694 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	08015128 	.word	0x08015128
 800bb30:	08015774 	.word	0x08015774
 800bb34:	0801516c 	.word	0x0801516c

0800bb38 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d106      	bne.n	800bb56 <tcp_pcb_remove+0x1e>
 800bb48:	4b3e      	ldr	r3, [pc, #248]	@ (800bc44 <tcp_pcb_remove+0x10c>)
 800bb4a:	f640 0283 	movw	r2, #2179	@ 0x883
 800bb4e:	493e      	ldr	r1, [pc, #248]	@ (800bc48 <tcp_pcb_remove+0x110>)
 800bb50:	483e      	ldr	r0, [pc, #248]	@ (800bc4c <tcp_pcb_remove+0x114>)
 800bb52:	f007 fdc7 	bl	80136e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d106      	bne.n	800bb6a <tcp_pcb_remove+0x32>
 800bb5c:	4b39      	ldr	r3, [pc, #228]	@ (800bc44 <tcp_pcb_remove+0x10c>)
 800bb5e:	f640 0284 	movw	r2, #2180	@ 0x884
 800bb62:	493b      	ldr	r1, [pc, #236]	@ (800bc50 <tcp_pcb_remove+0x118>)
 800bb64:	4839      	ldr	r0, [pc, #228]	@ (800bc4c <tcp_pcb_remove+0x114>)
 800bb66:	f007 fdbd 	bl	80136e4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d105      	bne.n	800bb80 <tcp_pcb_remove+0x48>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	e013      	b.n	800bba8 <tcp_pcb_remove+0x70>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]
 800bb86:	e00c      	b.n	800bba2 <tcp_pcb_remove+0x6a>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d104      	bne.n	800bb9c <tcp_pcb_remove+0x64>
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	68da      	ldr	r2, [r3, #12]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	60da      	str	r2, [r3, #12]
 800bb9a:	e005      	b.n	800bba8 <tcp_pcb_remove+0x70>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1ef      	bne.n	800bb88 <tcp_pcb_remove+0x50>
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bbae:	6838      	ldr	r0, [r7, #0]
 800bbb0:	f7ff ff72 	bl	800ba98 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	7d1b      	ldrb	r3, [r3, #20]
 800bbb8:	2b0a      	cmp	r3, #10
 800bbba:	d013      	beq.n	800bbe4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d00f      	beq.n	800bbe4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	8b5b      	ldrh	r3, [r3, #26]
 800bbc8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d009      	beq.n	800bbe4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	8b5b      	ldrh	r3, [r3, #26]
 800bbd4:	f043 0302 	orr.w	r3, r3, #2
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bbde:	6838      	ldr	r0, [r7, #0]
 800bbe0:	f002 ff68 	bl	800eab4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	7d1b      	ldrb	r3, [r3, #20]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d020      	beq.n	800bc2e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d006      	beq.n	800bc02 <tcp_pcb_remove+0xca>
 800bbf4:	4b13      	ldr	r3, [pc, #76]	@ (800bc44 <tcp_pcb_remove+0x10c>)
 800bbf6:	f640 0293 	movw	r2, #2195	@ 0x893
 800bbfa:	4916      	ldr	r1, [pc, #88]	@ (800bc54 <tcp_pcb_remove+0x11c>)
 800bbfc:	4813      	ldr	r0, [pc, #76]	@ (800bc4c <tcp_pcb_remove+0x114>)
 800bbfe:	f007 fd71 	bl	80136e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d006      	beq.n	800bc18 <tcp_pcb_remove+0xe0>
 800bc0a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc44 <tcp_pcb_remove+0x10c>)
 800bc0c:	f640 0294 	movw	r2, #2196	@ 0x894
 800bc10:	4911      	ldr	r1, [pc, #68]	@ (800bc58 <tcp_pcb_remove+0x120>)
 800bc12:	480e      	ldr	r0, [pc, #56]	@ (800bc4c <tcp_pcb_remove+0x114>)
 800bc14:	f007 fd66 	bl	80136e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d006      	beq.n	800bc2e <tcp_pcb_remove+0xf6>
 800bc20:	4b08      	ldr	r3, [pc, #32]	@ (800bc44 <tcp_pcb_remove+0x10c>)
 800bc22:	f640 0296 	movw	r2, #2198	@ 0x896
 800bc26:	490d      	ldr	r1, [pc, #52]	@ (800bc5c <tcp_pcb_remove+0x124>)
 800bc28:	4808      	ldr	r0, [pc, #32]	@ (800bc4c <tcp_pcb_remove+0x114>)
 800bc2a:	f007 fd5b 	bl	80136e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2200      	movs	r2, #0
 800bc32:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2200      	movs	r2, #0
 800bc38:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	08015128 	.word	0x08015128
 800bc48:	08015790 	.word	0x08015790
 800bc4c:	0801516c 	.word	0x0801516c
 800bc50:	080157ac 	.word	0x080157ac
 800bc54:	080157cc 	.word	0x080157cc
 800bc58:	080157e4 	.word	0x080157e4
 800bc5c:	08015800 	.word	0x08015800

0800bc60 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_next_iss+0x1c>
 800bc6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc98 <tcp_next_iss+0x38>)
 800bc70:	f640 02af 	movw	r2, #2223	@ 0x8af
 800bc74:	4909      	ldr	r1, [pc, #36]	@ (800bc9c <tcp_next_iss+0x3c>)
 800bc76:	480a      	ldr	r0, [pc, #40]	@ (800bca0 <tcp_next_iss+0x40>)
 800bc78:	f007 fd34 	bl	80136e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bc7c:	4b09      	ldr	r3, [pc, #36]	@ (800bca4 <tcp_next_iss+0x44>)
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	4b09      	ldr	r3, [pc, #36]	@ (800bca8 <tcp_next_iss+0x48>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4413      	add	r3, r2
 800bc86:	4a07      	ldr	r2, [pc, #28]	@ (800bca4 <tcp_next_iss+0x44>)
 800bc88:	6013      	str	r3, [r2, #0]
  return iss;
 800bc8a:	4b06      	ldr	r3, [pc, #24]	@ (800bca4 <tcp_next_iss+0x44>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	08015128 	.word	0x08015128
 800bc9c:	08015818 	.word	0x08015818
 800bca0:	0801516c 	.word	0x0801516c
 800bca4:	20000024 	.word	0x20000024
 800bca8:	20008a90 	.word	0x20008a90

0800bcac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b086      	sub	sp, #24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d106      	bne.n	800bcce <tcp_eff_send_mss_netif+0x22>
 800bcc0:	4b14      	ldr	r3, [pc, #80]	@ (800bd14 <tcp_eff_send_mss_netif+0x68>)
 800bcc2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800bcc6:	4914      	ldr	r1, [pc, #80]	@ (800bd18 <tcp_eff_send_mss_netif+0x6c>)
 800bcc8:	4814      	ldr	r0, [pc, #80]	@ (800bd1c <tcp_eff_send_mss_netif+0x70>)
 800bcca:	f007 fd0b 	bl	80136e4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bcd4:	89fb      	ldrh	r3, [r7, #14]
 800bcd6:	e019      	b.n	800bd0c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bcdc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bcde:	8afb      	ldrh	r3, [r7, #22]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d012      	beq.n	800bd0a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bce4:	2328      	movs	r3, #40	@ 0x28
 800bce6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bce8:	8afa      	ldrh	r2, [r7, #22]
 800bcea:	8abb      	ldrh	r3, [r7, #20]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d904      	bls.n	800bcfa <tcp_eff_send_mss_netif+0x4e>
 800bcf0:	8afa      	ldrh	r2, [r7, #22]
 800bcf2:	8abb      	ldrh	r3, [r7, #20]
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	e000      	b.n	800bcfc <tcp_eff_send_mss_netif+0x50>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bcfe:	8a7a      	ldrh	r2, [r7, #18]
 800bd00:	89fb      	ldrh	r3, [r7, #14]
 800bd02:	4293      	cmp	r3, r2
 800bd04:	bf28      	it	cs
 800bd06:	4613      	movcs	r3, r2
 800bd08:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bd0a:	89fb      	ldrh	r3, [r7, #14]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	08015128 	.word	0x08015128
 800bd18:	08015834 	.word	0x08015834
 800bd1c:	0801516c 	.word	0x0801516c

0800bd20 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d119      	bne.n	800bd68 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bd34:	4b10      	ldr	r3, [pc, #64]	@ (800bd78 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bd36:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800bd3a:	4910      	ldr	r1, [pc, #64]	@ (800bd7c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bd3c:	4810      	ldr	r0, [pc, #64]	@ (800bd80 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bd3e:	f007 fcd1 	bl	80136e4 <iprintf>

  while (pcb != NULL) {
 800bd42:	e011      	b.n	800bd68 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d108      	bne.n	800bd62 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f7fe ffc4 	bl	800ace4 <tcp_abort>
      pcb = next;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	e002      	b.n	800bd68 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1ea      	bne.n	800bd44 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bd6e:	bf00      	nop
 800bd70:	bf00      	nop
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	08015128 	.word	0x08015128
 800bd7c:	0801585c 	.word	0x0801585c
 800bd80:	0801516c 	.word	0x0801516c

0800bd84 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d02a      	beq.n	800bdea <tcp_netif_ip_addr_changed+0x66>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d026      	beq.n	800bdea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bd9c:	4b15      	ldr	r3, [pc, #84]	@ (800bdf4 <tcp_netif_ip_addr_changed+0x70>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4619      	mov	r1, r3
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff ffbc 	bl	800bd20 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bda8:	4b13      	ldr	r3, [pc, #76]	@ (800bdf8 <tcp_netif_ip_addr_changed+0x74>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7ff ffb6 	bl	800bd20 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d017      	beq.n	800bdea <tcp_netif_ip_addr_changed+0x66>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d013      	beq.n	800bdea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bdc2:	4b0e      	ldr	r3, [pc, #56]	@ (800bdfc <tcp_netif_ip_addr_changed+0x78>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
 800bdc8:	e00c      	b.n	800bde4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d103      	bne.n	800bdde <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1ef      	bne.n	800bdca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bdea:	bf00      	nop
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20008a9c 	.word	0x20008a9c
 800bdf8:	20008a94 	.word	0x20008a94
 800bdfc:	20008a98 	.word	0x20008a98

0800be00 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d007      	beq.n	800be20 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fc3d 	bl	800b694 <tcp_segs_free>
    pcb->ooseq = NULL;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800be20:	bf00      	nop
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800be28:	b590      	push	{r4, r7, lr}
 800be2a:	b08d      	sub	sp, #52	@ 0x34
 800be2c:	af04      	add	r7, sp, #16
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d105      	bne.n	800be44 <tcp_input+0x1c>
 800be38:	4b9b      	ldr	r3, [pc, #620]	@ (800c0a8 <tcp_input+0x280>)
 800be3a:	2283      	movs	r2, #131	@ 0x83
 800be3c:	499b      	ldr	r1, [pc, #620]	@ (800c0ac <tcp_input+0x284>)
 800be3e:	489c      	ldr	r0, [pc, #624]	@ (800c0b0 <tcp_input+0x288>)
 800be40:	f007 fc50 	bl	80136e4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	4a9a      	ldr	r2, [pc, #616]	@ (800c0b4 <tcp_input+0x28c>)
 800be4a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	895b      	ldrh	r3, [r3, #10]
 800be50:	2b13      	cmp	r3, #19
 800be52:	f240 83d1 	bls.w	800c5f8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800be56:	4b98      	ldr	r3, [pc, #608]	@ (800c0b8 <tcp_input+0x290>)
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	4a97      	ldr	r2, [pc, #604]	@ (800c0b8 <tcp_input+0x290>)
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	4611      	mov	r1, r2
 800be60:	4618      	mov	r0, r3
 800be62:	f005 ff01 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f040 83c7 	bne.w	800c5fc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800be6e:	4b92      	ldr	r3, [pc, #584]	@ (800c0b8 <tcp_input+0x290>)
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800be76:	2be0      	cmp	r3, #224	@ 0xe0
 800be78:	f000 83c0 	beq.w	800c5fc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800be7c:	4b8d      	ldr	r3, [pc, #564]	@ (800c0b4 <tcp_input+0x28c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	899b      	ldrh	r3, [r3, #12]
 800be82:	b29b      	uxth	r3, r3
 800be84:	4618      	mov	r0, r3
 800be86:	f7fc fe37 	bl	8008af8 <lwip_htons>
 800be8a:	4603      	mov	r3, r0
 800be8c:	0b1b      	lsrs	r3, r3, #12
 800be8e:	b29b      	uxth	r3, r3
 800be90:	b2db      	uxtb	r3, r3
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800be96:	7cbb      	ldrb	r3, [r7, #18]
 800be98:	2b13      	cmp	r3, #19
 800be9a:	f240 83b1 	bls.w	800c600 <tcp_input+0x7d8>
 800be9e:	7cbb      	ldrb	r3, [r7, #18]
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	891b      	ldrh	r3, [r3, #8]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	f200 83aa 	bhi.w	800c600 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800beac:	7cbb      	ldrb	r3, [r7, #18]
 800beae:	b29b      	uxth	r3, r3
 800beb0:	3b14      	subs	r3, #20
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	4b81      	ldr	r3, [pc, #516]	@ (800c0bc <tcp_input+0x294>)
 800beb6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800beb8:	4b81      	ldr	r3, [pc, #516]	@ (800c0c0 <tcp_input+0x298>)
 800beba:	2200      	movs	r2, #0
 800bebc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	895a      	ldrh	r2, [r3, #10]
 800bec2:	7cbb      	ldrb	r3, [r7, #18]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d309      	bcc.n	800bede <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800beca:	4b7c      	ldr	r3, [pc, #496]	@ (800c0bc <tcp_input+0x294>)
 800becc:	881a      	ldrh	r2, [r3, #0]
 800bece:	4b7d      	ldr	r3, [pc, #500]	@ (800c0c4 <tcp_input+0x29c>)
 800bed0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bed2:	7cbb      	ldrb	r3, [r7, #18]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7fe f8e6 	bl	800a0a8 <pbuf_remove_header>
 800bedc:	e04e      	b.n	800bf7c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d105      	bne.n	800bef2 <tcp_input+0xca>
 800bee6:	4b70      	ldr	r3, [pc, #448]	@ (800c0a8 <tcp_input+0x280>)
 800bee8:	22c2      	movs	r2, #194	@ 0xc2
 800beea:	4977      	ldr	r1, [pc, #476]	@ (800c0c8 <tcp_input+0x2a0>)
 800beec:	4870      	ldr	r0, [pc, #448]	@ (800c0b0 <tcp_input+0x288>)
 800beee:	f007 fbf9 	bl	80136e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800bef2:	2114      	movs	r1, #20
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7fe f8d7 	bl	800a0a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	895a      	ldrh	r2, [r3, #10]
 800befe:	4b71      	ldr	r3, [pc, #452]	@ (800c0c4 <tcp_input+0x29c>)
 800bf00:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bf02:	4b6e      	ldr	r3, [pc, #440]	@ (800c0bc <tcp_input+0x294>)
 800bf04:	881a      	ldrh	r2, [r3, #0]
 800bf06:	4b6f      	ldr	r3, [pc, #444]	@ (800c0c4 <tcp_input+0x29c>)
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800bf0e:	4b6d      	ldr	r3, [pc, #436]	@ (800c0c4 <tcp_input+0x29c>)
 800bf10:	881b      	ldrh	r3, [r3, #0]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7fe f8c7 	bl	800a0a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	895b      	ldrh	r3, [r3, #10]
 800bf20:	8a3a      	ldrh	r2, [r7, #16]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	f200 836e 	bhi.w	800c604 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	4a64      	ldr	r2, [pc, #400]	@ (800c0c0 <tcp_input+0x298>)
 800bf30:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	8a3a      	ldrh	r2, [r7, #16]
 800bf38:	4611      	mov	r1, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe f8b4 	bl	800a0a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	891a      	ldrh	r2, [r3, #8]
 800bf44:	8a3b      	ldrh	r3, [r7, #16]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	895b      	ldrh	r3, [r3, #10]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d005      	beq.n	800bf62 <tcp_input+0x13a>
 800bf56:	4b54      	ldr	r3, [pc, #336]	@ (800c0a8 <tcp_input+0x280>)
 800bf58:	22df      	movs	r2, #223	@ 0xdf
 800bf5a:	495c      	ldr	r1, [pc, #368]	@ (800c0cc <tcp_input+0x2a4>)
 800bf5c:	4854      	ldr	r0, [pc, #336]	@ (800c0b0 <tcp_input+0x288>)
 800bf5e:	f007 fbc1 	bl	80136e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	891a      	ldrh	r2, [r3, #8]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	891b      	ldrh	r3, [r3, #8]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d005      	beq.n	800bf7c <tcp_input+0x154>
 800bf70:	4b4d      	ldr	r3, [pc, #308]	@ (800c0a8 <tcp_input+0x280>)
 800bf72:	22e0      	movs	r2, #224	@ 0xe0
 800bf74:	4956      	ldr	r1, [pc, #344]	@ (800c0d0 <tcp_input+0x2a8>)
 800bf76:	484e      	ldr	r0, [pc, #312]	@ (800c0b0 <tcp_input+0x288>)
 800bf78:	f007 fbb4 	bl	80136e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bf7c:	4b4d      	ldr	r3, [pc, #308]	@ (800c0b4 <tcp_input+0x28c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	4a4b      	ldr	r2, [pc, #300]	@ (800c0b4 <tcp_input+0x28c>)
 800bf86:	6814      	ldr	r4, [r2, #0]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fc fdb5 	bl	8008af8 <lwip_htons>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bf92:	4b48      	ldr	r3, [pc, #288]	@ (800c0b4 <tcp_input+0x28c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	885b      	ldrh	r3, [r3, #2]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	4a46      	ldr	r2, [pc, #280]	@ (800c0b4 <tcp_input+0x28c>)
 800bf9c:	6814      	ldr	r4, [r2, #0]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fc fdaa 	bl	8008af8 <lwip_htons>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bfa8:	4b42      	ldr	r3, [pc, #264]	@ (800c0b4 <tcp_input+0x28c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	4a41      	ldr	r2, [pc, #260]	@ (800c0b4 <tcp_input+0x28c>)
 800bfb0:	6814      	ldr	r4, [r2, #0]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fc fdb5 	bl	8008b22 <lwip_htonl>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	6063      	str	r3, [r4, #4]
 800bfbc:	6863      	ldr	r3, [r4, #4]
 800bfbe:	4a45      	ldr	r2, [pc, #276]	@ (800c0d4 <tcp_input+0x2ac>)
 800bfc0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bfc2:	4b3c      	ldr	r3, [pc, #240]	@ (800c0b4 <tcp_input+0x28c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	4a3a      	ldr	r2, [pc, #232]	@ (800c0b4 <tcp_input+0x28c>)
 800bfca:	6814      	ldr	r4, [r2, #0]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7fc fda8 	bl	8008b22 <lwip_htonl>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	60a3      	str	r3, [r4, #8]
 800bfd6:	68a3      	ldr	r3, [r4, #8]
 800bfd8:	4a3f      	ldr	r2, [pc, #252]	@ (800c0d8 <tcp_input+0x2b0>)
 800bfda:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bfdc:	4b35      	ldr	r3, [pc, #212]	@ (800c0b4 <tcp_input+0x28c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	89db      	ldrh	r3, [r3, #14]
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	4a33      	ldr	r2, [pc, #204]	@ (800c0b4 <tcp_input+0x28c>)
 800bfe6:	6814      	ldr	r4, [r2, #0]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fc fd85 	bl	8008af8 <lwip_htons>
 800bfee:	4603      	mov	r3, r0
 800bff0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bff2:	4b30      	ldr	r3, [pc, #192]	@ (800c0b4 <tcp_input+0x28c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	899b      	ldrh	r3, [r3, #12]
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fc fd7c 	bl	8008af8 <lwip_htons>
 800c000:	4603      	mov	r3, r0
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	4b34      	ldr	r3, [pc, #208]	@ (800c0dc <tcp_input+0x2b4>)
 800c00c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	891a      	ldrh	r2, [r3, #8]
 800c012:	4b33      	ldr	r3, [pc, #204]	@ (800c0e0 <tcp_input+0x2b8>)
 800c014:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c016:	4b31      	ldr	r3, [pc, #196]	@ (800c0dc <tcp_input+0x2b4>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f003 0303 	and.w	r3, r3, #3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00c      	beq.n	800c03c <tcp_input+0x214>
    tcplen++;
 800c022:	4b2f      	ldr	r3, [pc, #188]	@ (800c0e0 <tcp_input+0x2b8>)
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	3301      	adds	r3, #1
 800c028:	b29a      	uxth	r2, r3
 800c02a:	4b2d      	ldr	r3, [pc, #180]	@ (800c0e0 <tcp_input+0x2b8>)
 800c02c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	891a      	ldrh	r2, [r3, #8]
 800c032:	4b2b      	ldr	r3, [pc, #172]	@ (800c0e0 <tcp_input+0x2b8>)
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	429a      	cmp	r2, r3
 800c038:	f200 82e6 	bhi.w	800c608 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c040:	4b28      	ldr	r3, [pc, #160]	@ (800c0e4 <tcp_input+0x2bc>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	61fb      	str	r3, [r7, #28]
 800c046:	e09d      	b.n	800c184 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	7d1b      	ldrb	r3, [r3, #20]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d105      	bne.n	800c05c <tcp_input+0x234>
 800c050:	4b15      	ldr	r3, [pc, #84]	@ (800c0a8 <tcp_input+0x280>)
 800c052:	22fb      	movs	r2, #251	@ 0xfb
 800c054:	4924      	ldr	r1, [pc, #144]	@ (800c0e8 <tcp_input+0x2c0>)
 800c056:	4816      	ldr	r0, [pc, #88]	@ (800c0b0 <tcp_input+0x288>)
 800c058:	f007 fb44 	bl	80136e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	7d1b      	ldrb	r3, [r3, #20]
 800c060:	2b0a      	cmp	r3, #10
 800c062:	d105      	bne.n	800c070 <tcp_input+0x248>
 800c064:	4b10      	ldr	r3, [pc, #64]	@ (800c0a8 <tcp_input+0x280>)
 800c066:	22fc      	movs	r2, #252	@ 0xfc
 800c068:	4920      	ldr	r1, [pc, #128]	@ (800c0ec <tcp_input+0x2c4>)
 800c06a:	4811      	ldr	r0, [pc, #68]	@ (800c0b0 <tcp_input+0x288>)
 800c06c:	f007 fb3a 	bl	80136e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	7d1b      	ldrb	r3, [r3, #20]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d105      	bne.n	800c084 <tcp_input+0x25c>
 800c078:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a8 <tcp_input+0x280>)
 800c07a:	22fd      	movs	r2, #253	@ 0xfd
 800c07c:	491c      	ldr	r1, [pc, #112]	@ (800c0f0 <tcp_input+0x2c8>)
 800c07e:	480c      	ldr	r0, [pc, #48]	@ (800c0b0 <tcp_input+0x288>)
 800c080:	f007 fb30 	bl	80136e4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	7a1b      	ldrb	r3, [r3, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d033      	beq.n	800c0f4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	7a1a      	ldrb	r2, [r3, #8]
 800c090:	4b09      	ldr	r3, [pc, #36]	@ (800c0b8 <tcp_input+0x290>)
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c098:	3301      	adds	r3, #1
 800c09a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d029      	beq.n	800c0f4 <tcp_input+0x2cc>
      prev = pcb;
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	61bb      	str	r3, [r7, #24]
      continue;
 800c0a4:	e06b      	b.n	800c17e <tcp_input+0x356>
 800c0a6:	bf00      	nop
 800c0a8:	08015890 	.word	0x08015890
 800c0ac:	080158c4 	.word	0x080158c4
 800c0b0:	080158dc 	.word	0x080158dc
 800c0b4:	20008ab8 	.word	0x20008ab8
 800c0b8:	20005520 	.word	0x20005520
 800c0bc:	20008abc 	.word	0x20008abc
 800c0c0:	20008ac0 	.word	0x20008ac0
 800c0c4:	20008abe 	.word	0x20008abe
 800c0c8:	08015904 	.word	0x08015904
 800c0cc:	08015914 	.word	0x08015914
 800c0d0:	08015920 	.word	0x08015920
 800c0d4:	20008ac8 	.word	0x20008ac8
 800c0d8:	20008acc 	.word	0x20008acc
 800c0dc:	20008ad4 	.word	0x20008ad4
 800c0e0:	20008ad2 	.word	0x20008ad2
 800c0e4:	20008a9c 	.word	0x20008a9c
 800c0e8:	08015940 	.word	0x08015940
 800c0ec:	08015968 	.word	0x08015968
 800c0f0:	08015994 	.word	0x08015994
    }

    if (pcb->remote_port == tcphdr->src &&
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	8b1a      	ldrh	r2, [r3, #24]
 800c0f8:	4b72      	ldr	r3, [pc, #456]	@ (800c2c4 <tcp_input+0x49c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	429a      	cmp	r2, r3
 800c102:	d13a      	bne.n	800c17a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	8ada      	ldrh	r2, [r3, #22]
 800c108:	4b6e      	ldr	r3, [pc, #440]	@ (800c2c4 <tcp_input+0x49c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	885b      	ldrh	r3, [r3, #2]
 800c10e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c110:	429a      	cmp	r2, r3
 800c112:	d132      	bne.n	800c17a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	4b6b      	ldr	r3, [pc, #428]	@ (800c2c8 <tcp_input+0x4a0>)
 800c11a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d12c      	bne.n	800c17a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	4b68      	ldr	r3, [pc, #416]	@ (800c2c8 <tcp_input+0x4a0>)
 800c126:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c128:	429a      	cmp	r2, r3
 800c12a:	d126      	bne.n	800c17a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	69fa      	ldr	r2, [r7, #28]
 800c132:	429a      	cmp	r2, r3
 800c134:	d106      	bne.n	800c144 <tcp_input+0x31c>
 800c136:	4b65      	ldr	r3, [pc, #404]	@ (800c2cc <tcp_input+0x4a4>)
 800c138:	f240 120d 	movw	r2, #269	@ 0x10d
 800c13c:	4964      	ldr	r1, [pc, #400]	@ (800c2d0 <tcp_input+0x4a8>)
 800c13e:	4865      	ldr	r0, [pc, #404]	@ (800c2d4 <tcp_input+0x4ac>)
 800c140:	f007 fad0 	bl	80136e4 <iprintf>
      if (prev != NULL) {
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <tcp_input+0x338>
        prev->next = pcb->next;
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	68da      	ldr	r2, [r3, #12]
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c152:	4b61      	ldr	r3, [pc, #388]	@ (800c2d8 <tcp_input+0x4b0>)
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c15a:	4a5f      	ldr	r2, [pc, #380]	@ (800c2d8 <tcp_input+0x4b0>)
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	69fa      	ldr	r2, [r7, #28]
 800c166:	429a      	cmp	r2, r3
 800c168:	d111      	bne.n	800c18e <tcp_input+0x366>
 800c16a:	4b58      	ldr	r3, [pc, #352]	@ (800c2cc <tcp_input+0x4a4>)
 800c16c:	f240 1215 	movw	r2, #277	@ 0x115
 800c170:	495a      	ldr	r1, [pc, #360]	@ (800c2dc <tcp_input+0x4b4>)
 800c172:	4858      	ldr	r0, [pc, #352]	@ (800c2d4 <tcp_input+0x4ac>)
 800c174:	f007 fab6 	bl	80136e4 <iprintf>
      break;
 800c178:	e009      	b.n	800c18e <tcp_input+0x366>
    }
    prev = pcb;
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f47f af5e 	bne.w	800c048 <tcp_input+0x220>
 800c18c:	e000      	b.n	800c190 <tcp_input+0x368>
      break;
 800c18e:	bf00      	nop
  }

  if (pcb == NULL) {
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f040 80aa 	bne.w	800c2ec <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c198:	4b51      	ldr	r3, [pc, #324]	@ (800c2e0 <tcp_input+0x4b8>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	61fb      	str	r3, [r7, #28]
 800c19e:	e03f      	b.n	800c220 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	7d1b      	ldrb	r3, [r3, #20]
 800c1a4:	2b0a      	cmp	r3, #10
 800c1a6:	d006      	beq.n	800c1b6 <tcp_input+0x38e>
 800c1a8:	4b48      	ldr	r3, [pc, #288]	@ (800c2cc <tcp_input+0x4a4>)
 800c1aa:	f240 121f 	movw	r2, #287	@ 0x11f
 800c1ae:	494d      	ldr	r1, [pc, #308]	@ (800c2e4 <tcp_input+0x4bc>)
 800c1b0:	4848      	ldr	r0, [pc, #288]	@ (800c2d4 <tcp_input+0x4ac>)
 800c1b2:	f007 fa97 	bl	80136e4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	7a1b      	ldrb	r3, [r3, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d009      	beq.n	800c1d2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	7a1a      	ldrb	r2, [r3, #8]
 800c1c2:	4b41      	ldr	r3, [pc, #260]	@ (800c2c8 <tcp_input+0x4a0>)
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d122      	bne.n	800c218 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	8b1a      	ldrh	r2, [r3, #24]
 800c1d6:	4b3b      	ldr	r3, [pc, #236]	@ (800c2c4 <tcp_input+0x49c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d11b      	bne.n	800c21a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	8ada      	ldrh	r2, [r3, #22]
 800c1e6:	4b37      	ldr	r3, [pc, #220]	@ (800c2c4 <tcp_input+0x49c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	885b      	ldrh	r3, [r3, #2]
 800c1ec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d113      	bne.n	800c21a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	4b34      	ldr	r3, [pc, #208]	@ (800c2c8 <tcp_input+0x4a0>)
 800c1f8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d10d      	bne.n	800c21a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	4b31      	ldr	r3, [pc, #196]	@ (800c2c8 <tcp_input+0x4a0>)
 800c204:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c206:	429a      	cmp	r2, r3
 800c208:	d107      	bne.n	800c21a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c20a:	69f8      	ldr	r0, [r7, #28]
 800c20c:	f000 fb56 	bl	800c8bc <tcp_timewait_input>
        }
        pbuf_free(p);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7fd ffcf 	bl	800a1b4 <pbuf_free>
        return;
 800c216:	e1fd      	b.n	800c614 <tcp_input+0x7ec>
        continue;
 800c218:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	61fb      	str	r3, [r7, #28]
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1bc      	bne.n	800c1a0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c22a:	4b2f      	ldr	r3, [pc, #188]	@ (800c2e8 <tcp_input+0x4c0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	617b      	str	r3, [r7, #20]
 800c230:	e02a      	b.n	800c288 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	7a1b      	ldrb	r3, [r3, #8]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00c      	beq.n	800c254 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	7a1a      	ldrb	r2, [r3, #8]
 800c23e:	4b22      	ldr	r3, [pc, #136]	@ (800c2c8 <tcp_input+0x4a0>)
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c246:	3301      	adds	r3, #1
 800c248:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d002      	beq.n	800c254 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	61bb      	str	r3, [r7, #24]
        continue;
 800c252:	e016      	b.n	800c282 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	8ada      	ldrh	r2, [r3, #22]
 800c258:	4b1a      	ldr	r3, [pc, #104]	@ (800c2c4 <tcp_input+0x49c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	885b      	ldrh	r3, [r3, #2]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	429a      	cmp	r2, r3
 800c262:	d10c      	bne.n	800c27e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	4b17      	ldr	r3, [pc, #92]	@ (800c2c8 <tcp_input+0x4a0>)
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d00f      	beq.n	800c290 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00d      	beq.n	800c292 <tcp_input+0x46a>
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d009      	beq.n	800c292 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1d1      	bne.n	800c232 <tcp_input+0x40a>
 800c28e:	e000      	b.n	800c292 <tcp_input+0x46a>
            break;
 800c290:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d029      	beq.n	800c2ec <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	68da      	ldr	r2, [r3, #12]
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c2a6:	4b10      	ldr	r3, [pc, #64]	@ (800c2e8 <tcp_input+0x4c0>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c2ae:	4a0e      	ldr	r2, [pc, #56]	@ (800c2e8 <tcp_input+0x4c0>)
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c2b4:	6978      	ldr	r0, [r7, #20]
 800c2b6:	f000 fa03 	bl	800c6c0 <tcp_listen_input>
      }
      pbuf_free(p);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7fd ff7a 	bl	800a1b4 <pbuf_free>
      return;
 800c2c0:	e1a8      	b.n	800c614 <tcp_input+0x7ec>
 800c2c2:	bf00      	nop
 800c2c4:	20008ab8 	.word	0x20008ab8
 800c2c8:	20005520 	.word	0x20005520
 800c2cc:	08015890 	.word	0x08015890
 800c2d0:	080159bc 	.word	0x080159bc
 800c2d4:	080158dc 	.word	0x080158dc
 800c2d8:	20008a9c 	.word	0x20008a9c
 800c2dc:	080159e8 	.word	0x080159e8
 800c2e0:	20008aa0 	.word	0x20008aa0
 800c2e4:	08015a14 	.word	0x08015a14
 800c2e8:	20008a98 	.word	0x20008a98
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f000 8158 	beq.w	800c5a4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c2f4:	4b95      	ldr	r3, [pc, #596]	@ (800c54c <tcp_input+0x724>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	891a      	ldrh	r2, [r3, #8]
 800c2fe:	4b93      	ldr	r3, [pc, #588]	@ (800c54c <tcp_input+0x724>)
 800c300:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c302:	4a92      	ldr	r2, [pc, #584]	@ (800c54c <tcp_input+0x724>)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c308:	4b91      	ldr	r3, [pc, #580]	@ (800c550 <tcp_input+0x728>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a8f      	ldr	r2, [pc, #572]	@ (800c54c <tcp_input+0x724>)
 800c30e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c310:	4b90      	ldr	r3, [pc, #576]	@ (800c554 <tcp_input+0x72c>)
 800c312:	2200      	movs	r2, #0
 800c314:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c316:	4b90      	ldr	r3, [pc, #576]	@ (800c558 <tcp_input+0x730>)
 800c318:	2200      	movs	r2, #0
 800c31a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c31c:	4b8f      	ldr	r3, [pc, #572]	@ (800c55c <tcp_input+0x734>)
 800c31e:	2200      	movs	r2, #0
 800c320:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c322:	4b8f      	ldr	r3, [pc, #572]	@ (800c560 <tcp_input+0x738>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d006      	beq.n	800c33c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	7b5b      	ldrb	r3, [r3, #13]
 800c332:	f043 0301 	orr.w	r3, r3, #1
 800c336:	b2da      	uxtb	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c340:	2b00      	cmp	r3, #0
 800c342:	d017      	beq.n	800c374 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c344:	69f8      	ldr	r0, [r7, #28]
 800c346:	f7ff f929 	bl	800b59c <tcp_process_refused_data>
 800c34a:	4603      	mov	r3, r0
 800c34c:	f113 0f0d 	cmn.w	r3, #13
 800c350:	d007      	beq.n	800c362 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00c      	beq.n	800c374 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c35a:	4b82      	ldr	r3, [pc, #520]	@ (800c564 <tcp_input+0x73c>)
 800c35c:	881b      	ldrh	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d008      	beq.n	800c374 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c366:	2b00      	cmp	r3, #0
 800c368:	f040 80e3 	bne.w	800c532 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c36c:	69f8      	ldr	r0, [r7, #28]
 800c36e:	f003 f9a7 	bl	800f6c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c372:	e0de      	b.n	800c532 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c374:	4a7c      	ldr	r2, [pc, #496]	@ (800c568 <tcp_input+0x740>)
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c37a:	69f8      	ldr	r0, [r7, #28]
 800c37c:	f000 fb18 	bl	800c9b0 <tcp_process>
 800c380:	4603      	mov	r3, r0
 800c382:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c388:	f113 0f0d 	cmn.w	r3, #13
 800c38c:	f000 80d3 	beq.w	800c536 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c390:	4b71      	ldr	r3, [pc, #452]	@ (800c558 <tcp_input+0x730>)
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	f003 0308 	and.w	r3, r3, #8
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d015      	beq.n	800c3c8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d008      	beq.n	800c3b8 <tcp_input+0x590>
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3ac:	69fa      	ldr	r2, [r7, #28]
 800c3ae:	6912      	ldr	r2, [r2, #16]
 800c3b0:	f06f 010d 	mvn.w	r1, #13
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c3b8:	69f9      	ldr	r1, [r7, #28]
 800c3ba:	486c      	ldr	r0, [pc, #432]	@ (800c56c <tcp_input+0x744>)
 800c3bc:	f7ff fbbc 	bl	800bb38 <tcp_pcb_remove>
        tcp_free(pcb);
 800c3c0:	69f8      	ldr	r0, [r7, #28]
 800c3c2:	f7fe f9a7 	bl	800a714 <tcp_free>
 800c3c6:	e0da      	b.n	800c57e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c3cc:	4b63      	ldr	r3, [pc, #396]	@ (800c55c <tcp_input+0x734>)
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d01d      	beq.n	800c410 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c3d4:	4b61      	ldr	r3, [pc, #388]	@ (800c55c <tcp_input+0x734>)
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00a      	beq.n	800c3fa <tcp_input+0x5d2>
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ea:	69fa      	ldr	r2, [r7, #28]
 800c3ec:	6910      	ldr	r0, [r2, #16]
 800c3ee:	89fa      	ldrh	r2, [r7, #14]
 800c3f0:	69f9      	ldr	r1, [r7, #28]
 800c3f2:	4798      	blx	r3
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	74fb      	strb	r3, [r7, #19]
 800c3f8:	e001      	b.n	800c3fe <tcp_input+0x5d6>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c3fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c402:	f113 0f0d 	cmn.w	r3, #13
 800c406:	f000 8098 	beq.w	800c53a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c40a:	4b54      	ldr	r3, [pc, #336]	@ (800c55c <tcp_input+0x734>)
 800c40c:	2200      	movs	r2, #0
 800c40e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c410:	69f8      	ldr	r0, [r7, #28]
 800c412:	f000 f915 	bl	800c640 <tcp_input_delayed_close>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f040 8090 	bne.w	800c53e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c41e:	4b4d      	ldr	r3, [pc, #308]	@ (800c554 <tcp_input+0x72c>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d041      	beq.n	800c4aa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d006      	beq.n	800c43c <tcp_input+0x614>
 800c42e:	4b50      	ldr	r3, [pc, #320]	@ (800c570 <tcp_input+0x748>)
 800c430:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c434:	494f      	ldr	r1, [pc, #316]	@ (800c574 <tcp_input+0x74c>)
 800c436:	4850      	ldr	r0, [pc, #320]	@ (800c578 <tcp_input+0x750>)
 800c438:	f007 f954 	bl	80136e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	8b5b      	ldrh	r3, [r3, #26]
 800c440:	f003 0310 	and.w	r3, r3, #16
 800c444:	2b00      	cmp	r3, #0
 800c446:	d008      	beq.n	800c45a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c448:	4b42      	ldr	r3, [pc, #264]	@ (800c554 <tcp_input+0x72c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fd feb1 	bl	800a1b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c452:	69f8      	ldr	r0, [r7, #28]
 800c454:	f7fe fc46 	bl	800ace4 <tcp_abort>
            goto aborted;
 800c458:	e091      	b.n	800c57e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00c      	beq.n	800c47e <tcp_input+0x656>
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	6918      	ldr	r0, [r3, #16]
 800c46e:	4b39      	ldr	r3, [pc, #228]	@ (800c554 <tcp_input+0x72c>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	2300      	movs	r3, #0
 800c474:	69f9      	ldr	r1, [r7, #28]
 800c476:	47a0      	blx	r4
 800c478:	4603      	mov	r3, r0
 800c47a:	74fb      	strb	r3, [r7, #19]
 800c47c:	e008      	b.n	800c490 <tcp_input+0x668>
 800c47e:	4b35      	ldr	r3, [pc, #212]	@ (800c554 <tcp_input+0x72c>)
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	2300      	movs	r3, #0
 800c484:	69f9      	ldr	r1, [r7, #28]
 800c486:	2000      	movs	r0, #0
 800c488:	f7ff f95e 	bl	800b748 <tcp_recv_null>
 800c48c:	4603      	mov	r3, r0
 800c48e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c490:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c494:	f113 0f0d 	cmn.w	r3, #13
 800c498:	d053      	beq.n	800c542 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c49a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d003      	beq.n	800c4aa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c4a2:	4b2c      	ldr	r3, [pc, #176]	@ (800c554 <tcp_input+0x72c>)
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c4aa:	4b2b      	ldr	r3, [pc, #172]	@ (800c558 <tcp_input+0x730>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d030      	beq.n	800c518 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d009      	beq.n	800c4d2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4c2:	7b5a      	ldrb	r2, [r3, #13]
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4c8:	f042 0220 	orr.w	r2, r2, #32
 800c4cc:	b2d2      	uxtb	r2, r2
 800c4ce:	735a      	strb	r2, [r3, #13]
 800c4d0:	e022      	b.n	800c518 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c4da:	d005      	beq.n	800c4e8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <tcp_input+0x6e2>
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	6918      	ldr	r0, [r3, #16]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	2200      	movs	r2, #0
 800c500:	69f9      	ldr	r1, [r7, #28]
 800c502:	47a0      	blx	r4
 800c504:	4603      	mov	r3, r0
 800c506:	74fb      	strb	r3, [r7, #19]
 800c508:	e001      	b.n	800c50e <tcp_input+0x6e6>
 800c50a:	2300      	movs	r3, #0
 800c50c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c50e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c512:	f113 0f0d 	cmn.w	r3, #13
 800c516:	d016      	beq.n	800c546 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c518:	4b13      	ldr	r3, [pc, #76]	@ (800c568 <tcp_input+0x740>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c51e:	69f8      	ldr	r0, [r7, #28]
 800c520:	f000 f88e 	bl	800c640 <tcp_input_delayed_close>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d128      	bne.n	800c57c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c52a:	69f8      	ldr	r0, [r7, #28]
 800c52c:	f002 fac2 	bl	800eab4 <tcp_output>
 800c530:	e025      	b.n	800c57e <tcp_input+0x756>
        goto aborted;
 800c532:	bf00      	nop
 800c534:	e023      	b.n	800c57e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c536:	bf00      	nop
 800c538:	e021      	b.n	800c57e <tcp_input+0x756>
              goto aborted;
 800c53a:	bf00      	nop
 800c53c:	e01f      	b.n	800c57e <tcp_input+0x756>
          goto aborted;
 800c53e:	bf00      	nop
 800c540:	e01d      	b.n	800c57e <tcp_input+0x756>
            goto aborted;
 800c542:	bf00      	nop
 800c544:	e01b      	b.n	800c57e <tcp_input+0x756>
              goto aborted;
 800c546:	bf00      	nop
 800c548:	e019      	b.n	800c57e <tcp_input+0x756>
 800c54a:	bf00      	nop
 800c54c:	20008aa8 	.word	0x20008aa8
 800c550:	20008ab8 	.word	0x20008ab8
 800c554:	20008ad8 	.word	0x20008ad8
 800c558:	20008ad5 	.word	0x20008ad5
 800c55c:	20008ad0 	.word	0x20008ad0
 800c560:	20008ad4 	.word	0x20008ad4
 800c564:	20008ad2 	.word	0x20008ad2
 800c568:	20008adc 	.word	0x20008adc
 800c56c:	20008a9c 	.word	0x20008a9c
 800c570:	08015890 	.word	0x08015890
 800c574:	08015a44 	.word	0x08015a44
 800c578:	080158dc 	.word	0x080158dc
          goto aborted;
 800c57c:	bf00      	nop
    tcp_input_pcb = NULL;
 800c57e:	4b27      	ldr	r3, [pc, #156]	@ (800c61c <tcp_input+0x7f4>)
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c584:	4b26      	ldr	r3, [pc, #152]	@ (800c620 <tcp_input+0x7f8>)
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c58a:	4b26      	ldr	r3, [pc, #152]	@ (800c624 <tcp_input+0x7fc>)
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d03f      	beq.n	800c612 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c592:	4b24      	ldr	r3, [pc, #144]	@ (800c624 <tcp_input+0x7fc>)
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	4618      	mov	r0, r3
 800c598:	f7fd fe0c 	bl	800a1b4 <pbuf_free>
      inseg.p = NULL;
 800c59c:	4b21      	ldr	r3, [pc, #132]	@ (800c624 <tcp_input+0x7fc>)
 800c59e:	2200      	movs	r2, #0
 800c5a0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c5a2:	e036      	b.n	800c612 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c5a4:	4b20      	ldr	r3, [pc, #128]	@ (800c628 <tcp_input+0x800>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	899b      	ldrh	r3, [r3, #12]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fc faa3 	bl	8008af8 <lwip_htons>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d118      	bne.n	800c5f0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5be:	4b1b      	ldr	r3, [pc, #108]	@ (800c62c <tcp_input+0x804>)
 800c5c0:	6819      	ldr	r1, [r3, #0]
 800c5c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c630 <tcp_input+0x808>)
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c634 <tcp_input+0x80c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5ce:	4b16      	ldr	r3, [pc, #88]	@ (800c628 <tcp_input+0x800>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5d2:	885b      	ldrh	r3, [r3, #2]
 800c5d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5d6:	4a14      	ldr	r2, [pc, #80]	@ (800c628 <tcp_input+0x800>)
 800c5d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5da:	8812      	ldrh	r2, [r2, #0]
 800c5dc:	b292      	uxth	r2, r2
 800c5de:	9202      	str	r2, [sp, #8]
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	4b15      	ldr	r3, [pc, #84]	@ (800c638 <tcp_input+0x810>)
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	4b15      	ldr	r3, [pc, #84]	@ (800c63c <tcp_input+0x814>)
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	f003 f816 	bl	800f61c <tcp_rst>
    pbuf_free(p);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7fd fddf 	bl	800a1b4 <pbuf_free>
  return;
 800c5f6:	e00c      	b.n	800c612 <tcp_input+0x7ea>
    goto dropped;
 800c5f8:	bf00      	nop
 800c5fa:	e006      	b.n	800c60a <tcp_input+0x7e2>
    goto dropped;
 800c5fc:	bf00      	nop
 800c5fe:	e004      	b.n	800c60a <tcp_input+0x7e2>
    goto dropped;
 800c600:	bf00      	nop
 800c602:	e002      	b.n	800c60a <tcp_input+0x7e2>
      goto dropped;
 800c604:	bf00      	nop
 800c606:	e000      	b.n	800c60a <tcp_input+0x7e2>
      goto dropped;
 800c608:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7fd fdd2 	bl	800a1b4 <pbuf_free>
 800c610:	e000      	b.n	800c614 <tcp_input+0x7ec>
  return;
 800c612:	bf00      	nop
}
 800c614:	3724      	adds	r7, #36	@ 0x24
 800c616:	46bd      	mov	sp, r7
 800c618:	bd90      	pop	{r4, r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20008adc 	.word	0x20008adc
 800c620:	20008ad8 	.word	0x20008ad8
 800c624:	20008aa8 	.word	0x20008aa8
 800c628:	20008ab8 	.word	0x20008ab8
 800c62c:	20008acc 	.word	0x20008acc
 800c630:	20008ad2 	.word	0x20008ad2
 800c634:	20008ac8 	.word	0x20008ac8
 800c638:	20005530 	.word	0x20005530
 800c63c:	20005534 	.word	0x20005534

0800c640 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <tcp_input_delayed_close+0x1c>
 800c64e:	4b17      	ldr	r3, [pc, #92]	@ (800c6ac <tcp_input_delayed_close+0x6c>)
 800c650:	f240 225a 	movw	r2, #602	@ 0x25a
 800c654:	4916      	ldr	r1, [pc, #88]	@ (800c6b0 <tcp_input_delayed_close+0x70>)
 800c656:	4817      	ldr	r0, [pc, #92]	@ (800c6b4 <tcp_input_delayed_close+0x74>)
 800c658:	f007 f844 	bl	80136e4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c65c:	4b16      	ldr	r3, [pc, #88]	@ (800c6b8 <tcp_input_delayed_close+0x78>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 0310 	and.w	r3, r3, #16
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01c      	beq.n	800c6a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8b5b      	ldrh	r3, [r3, #26]
 800c66c:	f003 0310 	and.w	r3, r3, #16
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10d      	bne.n	800c690 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d008      	beq.n	800c690 <tcp_input_delayed_close+0x50>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6912      	ldr	r2, [r2, #16]
 800c688:	f06f 010e 	mvn.w	r1, #14
 800c68c:	4610      	mov	r0, r2
 800c68e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c690:	6879      	ldr	r1, [r7, #4]
 800c692:	480a      	ldr	r0, [pc, #40]	@ (800c6bc <tcp_input_delayed_close+0x7c>)
 800c694:	f7ff fa50 	bl	800bb38 <tcp_pcb_remove>
    tcp_free(pcb);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7fe f83b 	bl	800a714 <tcp_free>
    return 1;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e000      	b.n	800c6a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	08015890 	.word	0x08015890
 800c6b0:	08015a60 	.word	0x08015a60
 800c6b4:	080158dc 	.word	0x080158dc
 800c6b8:	20008ad5 	.word	0x20008ad5
 800c6bc:	20008a9c 	.word	0x20008a9c

0800c6c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c6c0:	b590      	push	{r4, r7, lr}
 800c6c2:	b08b      	sub	sp, #44	@ 0x2c
 800c6c4:	af04      	add	r7, sp, #16
 800c6c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c6c8:	4b6f      	ldr	r3, [pc, #444]	@ (800c888 <tcp_listen_input+0x1c8>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f040 80d2 	bne.w	800c87a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <tcp_listen_input+0x2a>
 800c6dc:	4b6b      	ldr	r3, [pc, #428]	@ (800c88c <tcp_listen_input+0x1cc>)
 800c6de:	f240 2281 	movw	r2, #641	@ 0x281
 800c6e2:	496b      	ldr	r1, [pc, #428]	@ (800c890 <tcp_listen_input+0x1d0>)
 800c6e4:	486b      	ldr	r0, [pc, #428]	@ (800c894 <tcp_listen_input+0x1d4>)
 800c6e6:	f006 fffd 	bl	80136e4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c6ea:	4b67      	ldr	r3, [pc, #412]	@ (800c888 <tcp_listen_input+0x1c8>)
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	f003 0310 	and.w	r3, r3, #16
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d019      	beq.n	800c72a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6f6:	4b68      	ldr	r3, [pc, #416]	@ (800c898 <tcp_listen_input+0x1d8>)
 800c6f8:	6819      	ldr	r1, [r3, #0]
 800c6fa:	4b68      	ldr	r3, [pc, #416]	@ (800c89c <tcp_listen_input+0x1dc>)
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	4b67      	ldr	r3, [pc, #412]	@ (800c8a0 <tcp_listen_input+0x1e0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c706:	4b67      	ldr	r3, [pc, #412]	@ (800c8a4 <tcp_listen_input+0x1e4>)
 800c708:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c70a:	885b      	ldrh	r3, [r3, #2]
 800c70c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c70e:	4a65      	ldr	r2, [pc, #404]	@ (800c8a4 <tcp_listen_input+0x1e4>)
 800c710:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c712:	8812      	ldrh	r2, [r2, #0]
 800c714:	b292      	uxth	r2, r2
 800c716:	9202      	str	r2, [sp, #8]
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	4b63      	ldr	r3, [pc, #396]	@ (800c8a8 <tcp_listen_input+0x1e8>)
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	4b63      	ldr	r3, [pc, #396]	@ (800c8ac <tcp_listen_input+0x1ec>)
 800c720:	4602      	mov	r2, r0
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f002 ff7a 	bl	800f61c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c728:	e0a9      	b.n	800c87e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c72a:	4b57      	ldr	r3, [pc, #348]	@ (800c888 <tcp_listen_input+0x1c8>)
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	f003 0302 	and.w	r3, r3, #2
 800c732:	2b00      	cmp	r3, #0
 800c734:	f000 80a3 	beq.w	800c87e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7d5b      	ldrb	r3, [r3, #21]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff f927 	bl	800b990 <tcp_alloc>
 800c742:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d111      	bne.n	800c76e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <tcp_listen_input+0xa8>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	6910      	ldr	r0, [r2, #16]
 800c75a:	f04f 32ff 	mov.w	r2, #4294967295
 800c75e:	2100      	movs	r1, #0
 800c760:	4798      	blx	r3
 800c762:	4603      	mov	r3, r0
 800c764:	73bb      	strb	r3, [r7, #14]
      return;
 800c766:	e08b      	b.n	800c880 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c768:	23f0      	movs	r3, #240	@ 0xf0
 800c76a:	73bb      	strb	r3, [r7, #14]
      return;
 800c76c:	e088      	b.n	800c880 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c76e:	4b50      	ldr	r3, [pc, #320]	@ (800c8b0 <tcp_listen_input+0x1f0>)
 800c770:	695a      	ldr	r2, [r3, #20]
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c776:	4b4e      	ldr	r3, [pc, #312]	@ (800c8b0 <tcp_listen_input+0x1f0>)
 800c778:	691a      	ldr	r2, [r3, #16]
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	8ada      	ldrh	r2, [r3, #22]
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c786:	4b47      	ldr	r3, [pc, #284]	@ (800c8a4 <tcp_listen_input+0x1e4>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2203      	movs	r2, #3
 800c796:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c798:	4b41      	ldr	r3, [pc, #260]	@ (800c8a0 <tcp_listen_input+0x1e0>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	1c5a      	adds	r2, r3, #1
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800c7aa:	6978      	ldr	r0, [r7, #20]
 800c7ac:	f7ff fa58 	bl	800bc60 <tcp_next_iss>
 800c7b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c7ca:	4b35      	ldr	r3, [pc, #212]	@ (800c8a0 <tcp_listen_input+0x1e0>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	1e5a      	subs	r2, r3, #1
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691a      	ldr	r2, [r3, #16]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	7a5b      	ldrb	r3, [r3, #9]
 800c7e6:	f003 030c 	and.w	r3, r3, #12
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	7a1a      	ldrb	r2, [r3, #8]
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c7f8:	4b2e      	ldr	r3, [pc, #184]	@ (800c8b4 <tcp_listen_input+0x1f4>)
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	60da      	str	r2, [r3, #12]
 800c800:	4a2c      	ldr	r2, [pc, #176]	@ (800c8b4 <tcp_listen_input+0x1f4>)
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	6013      	str	r3, [r2, #0]
 800c806:	f003 f8cb 	bl	800f9a0 <tcp_timer_needed>
 800c80a:	4b2b      	ldr	r3, [pc, #172]	@ (800c8b8 <tcp_listen_input+0x1f8>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c810:	6978      	ldr	r0, [r7, #20]
 800c812:	f001 fd8b 	bl	800e32c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c816:	4b23      	ldr	r3, [pc, #140]	@ (800c8a4 <tcp_listen_input+0x1e4>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	89db      	ldrh	r3, [r3, #14]
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	3304      	adds	r3, #4
 800c838:	4618      	mov	r0, r3
 800c83a:	f004 ff7f 	bl	801173c <ip4_route>
 800c83e:	4601      	mov	r1, r0
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	3304      	adds	r3, #4
 800c844:	461a      	mov	r2, r3
 800c846:	4620      	mov	r0, r4
 800c848:	f7ff fa30 	bl	800bcac <tcp_eff_send_mss_netif>
 800c84c:	4603      	mov	r3, r0
 800c84e:	461a      	mov	r2, r3
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c854:	2112      	movs	r1, #18
 800c856:	6978      	ldr	r0, [r7, #20]
 800c858:	f002 f83e 	bl	800e8d8 <tcp_enqueue_flags>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d004      	beq.n	800c872 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c868:	2100      	movs	r1, #0
 800c86a:	6978      	ldr	r0, [r7, #20]
 800c86c:	f7fe f97c 	bl	800ab68 <tcp_abandon>
      return;
 800c870:	e006      	b.n	800c880 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c872:	6978      	ldr	r0, [r7, #20]
 800c874:	f002 f91e 	bl	800eab4 <tcp_output>
  return;
 800c878:	e001      	b.n	800c87e <tcp_listen_input+0x1be>
    return;
 800c87a:	bf00      	nop
 800c87c:	e000      	b.n	800c880 <tcp_listen_input+0x1c0>
  return;
 800c87e:	bf00      	nop
}
 800c880:	371c      	adds	r7, #28
 800c882:	46bd      	mov	sp, r7
 800c884:	bd90      	pop	{r4, r7, pc}
 800c886:	bf00      	nop
 800c888:	20008ad4 	.word	0x20008ad4
 800c88c:	08015890 	.word	0x08015890
 800c890:	08015a88 	.word	0x08015a88
 800c894:	080158dc 	.word	0x080158dc
 800c898:	20008acc 	.word	0x20008acc
 800c89c:	20008ad2 	.word	0x20008ad2
 800c8a0:	20008ac8 	.word	0x20008ac8
 800c8a4:	20008ab8 	.word	0x20008ab8
 800c8a8:	20005530 	.word	0x20005530
 800c8ac:	20005534 	.word	0x20005534
 800c8b0:	20005520 	.word	0x20005520
 800c8b4:	20008a9c 	.word	0x20008a9c
 800c8b8:	20008aa4 	.word	0x20008aa4

0800c8bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af04      	add	r7, sp, #16
 800c8c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c8c4:	4b2f      	ldr	r3, [pc, #188]	@ (800c984 <tcp_timewait_input+0xc8>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d153      	bne.n	800c978 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <tcp_timewait_input+0x28>
 800c8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c988 <tcp_timewait_input+0xcc>)
 800c8d8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c8dc:	492b      	ldr	r1, [pc, #172]	@ (800c98c <tcp_timewait_input+0xd0>)
 800c8de:	482c      	ldr	r0, [pc, #176]	@ (800c990 <tcp_timewait_input+0xd4>)
 800c8e0:	f006 ff00 	bl	80136e4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c8e4:	4b27      	ldr	r3, [pc, #156]	@ (800c984 <tcp_timewait_input+0xc8>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	f003 0302 	and.w	r3, r3, #2
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d02a      	beq.n	800c946 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c8f0:	4b28      	ldr	r3, [pc, #160]	@ (800c994 <tcp_timewait_input+0xd8>)
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	db2d      	blt.n	800c95a <tcp_timewait_input+0x9e>
 800c8fe:	4b25      	ldr	r3, [pc, #148]	@ (800c994 <tcp_timewait_input+0xd8>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c90a:	440b      	add	r3, r1
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	dc23      	bgt.n	800c95a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c912:	4b21      	ldr	r3, [pc, #132]	@ (800c998 <tcp_timewait_input+0xdc>)
 800c914:	6819      	ldr	r1, [r3, #0]
 800c916:	4b21      	ldr	r3, [pc, #132]	@ (800c99c <tcp_timewait_input+0xe0>)
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	4b1d      	ldr	r3, [pc, #116]	@ (800c994 <tcp_timewait_input+0xd8>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c922:	4b1f      	ldr	r3, [pc, #124]	@ (800c9a0 <tcp_timewait_input+0xe4>)
 800c924:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c926:	885b      	ldrh	r3, [r3, #2]
 800c928:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c92a:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a0 <tcp_timewait_input+0xe4>)
 800c92c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c92e:	8812      	ldrh	r2, [r2, #0]
 800c930:	b292      	uxth	r2, r2
 800c932:	9202      	str	r2, [sp, #8]
 800c934:	9301      	str	r3, [sp, #4]
 800c936:	4b1b      	ldr	r3, [pc, #108]	@ (800c9a4 <tcp_timewait_input+0xe8>)
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	4b1b      	ldr	r3, [pc, #108]	@ (800c9a8 <tcp_timewait_input+0xec>)
 800c93c:	4602      	mov	r2, r0
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f002 fe6c 	bl	800f61c <tcp_rst>
      return;
 800c944:	e01b      	b.n	800c97e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c946:	4b0f      	ldr	r3, [pc, #60]	@ (800c984 <tcp_timewait_input+0xc8>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c952:	4b16      	ldr	r3, [pc, #88]	@ (800c9ac <tcp_timewait_input+0xf0>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c95a:	4b10      	ldr	r3, [pc, #64]	@ (800c99c <tcp_timewait_input+0xe0>)
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00c      	beq.n	800c97c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8b5b      	ldrh	r3, [r3, #26]
 800c966:	f043 0302 	orr.w	r3, r3, #2
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f002 f89f 	bl	800eab4 <tcp_output>
  }
  return;
 800c976:	e001      	b.n	800c97c <tcp_timewait_input+0xc0>
    return;
 800c978:	bf00      	nop
 800c97a:	e000      	b.n	800c97e <tcp_timewait_input+0xc2>
  return;
 800c97c:	bf00      	nop
}
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	20008ad4 	.word	0x20008ad4
 800c988:	08015890 	.word	0x08015890
 800c98c:	08015aa8 	.word	0x08015aa8
 800c990:	080158dc 	.word	0x080158dc
 800c994:	20008ac8 	.word	0x20008ac8
 800c998:	20008acc 	.word	0x20008acc
 800c99c:	20008ad2 	.word	0x20008ad2
 800c9a0:	20008ab8 	.word	0x20008ab8
 800c9a4:	20005530 	.word	0x20005530
 800c9a8:	20005534 	.word	0x20005534
 800c9ac:	20008a90 	.word	0x20008a90

0800c9b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c9b0:	b590      	push	{r4, r7, lr}
 800c9b2:	b08d      	sub	sp, #52	@ 0x34
 800c9b4:	af04      	add	r7, sp, #16
 800c9b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <tcp_process+0x24>
 800c9c6:	4b9d      	ldr	r3, [pc, #628]	@ (800cc3c <tcp_process+0x28c>)
 800c9c8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c9cc:	499c      	ldr	r1, [pc, #624]	@ (800cc40 <tcp_process+0x290>)
 800c9ce:	489d      	ldr	r0, [pc, #628]	@ (800cc44 <tcp_process+0x294>)
 800c9d0:	f006 fe88 	bl	80136e4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c9d4:	4b9c      	ldr	r3, [pc, #624]	@ (800cc48 <tcp_process+0x298>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d04e      	beq.n	800ca7e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	7d1b      	ldrb	r3, [r3, #20]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d108      	bne.n	800c9fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c9ec:	4b97      	ldr	r3, [pc, #604]	@ (800cc4c <tcp_process+0x29c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d123      	bne.n	800ca3c <tcp_process+0x8c>
        acceptable = 1;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	76fb      	strb	r3, [r7, #27]
 800c9f8:	e020      	b.n	800ca3c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9fe:	4b94      	ldr	r3, [pc, #592]	@ (800cc50 <tcp_process+0x2a0>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d102      	bne.n	800ca0c <tcp_process+0x5c>
        acceptable = 1;
 800ca06:	2301      	movs	r3, #1
 800ca08:	76fb      	strb	r3, [r7, #27]
 800ca0a:	e017      	b.n	800ca3c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca0c:	4b90      	ldr	r3, [pc, #576]	@ (800cc50 <tcp_process+0x2a0>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	db10      	blt.n	800ca3c <tcp_process+0x8c>
 800ca1a:	4b8d      	ldr	r3, [pc, #564]	@ (800cc50 <tcp_process+0x2a0>)
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca22:	6879      	ldr	r1, [r7, #4]
 800ca24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca26:	440b      	add	r3, r1
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dc06      	bgt.n	800ca3c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	8b5b      	ldrh	r3, [r3, #26]
 800ca32:	f043 0302 	orr.w	r3, r3, #2
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ca3c:	7efb      	ldrb	r3, [r7, #27]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d01b      	beq.n	800ca7a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	7d1b      	ldrb	r3, [r3, #20]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <tcp_process+0xa8>
 800ca4a:	4b7c      	ldr	r3, [pc, #496]	@ (800cc3c <tcp_process+0x28c>)
 800ca4c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ca50:	4980      	ldr	r1, [pc, #512]	@ (800cc54 <tcp_process+0x2a4>)
 800ca52:	487c      	ldr	r0, [pc, #496]	@ (800cc44 <tcp_process+0x294>)
 800ca54:	f006 fe46 	bl	80136e4 <iprintf>
      recv_flags |= TF_RESET;
 800ca58:	4b7f      	ldr	r3, [pc, #508]	@ (800cc58 <tcp_process+0x2a8>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	f043 0308 	orr.w	r3, r3, #8
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	4b7d      	ldr	r3, [pc, #500]	@ (800cc58 <tcp_process+0x2a8>)
 800ca64:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	8b5b      	ldrh	r3, [r3, #26]
 800ca6a:	f023 0301 	bic.w	r3, r3, #1
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ca74:	f06f 030d 	mvn.w	r3, #13
 800ca78:	e37a      	b.n	800d170 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e378      	b.n	800d170 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ca7e:	4b72      	ldr	r3, [pc, #456]	@ (800cc48 <tcp_process+0x298>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	f003 0302 	and.w	r3, r3, #2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d010      	beq.n	800caac <tcp_process+0xfc>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	7d1b      	ldrb	r3, [r3, #20]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d00c      	beq.n	800caac <tcp_process+0xfc>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	7d1b      	ldrb	r3, [r3, #20]
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d008      	beq.n	800caac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	8b5b      	ldrh	r3, [r3, #26]
 800ca9e:	f043 0302 	orr.w	r3, r3, #2
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	e361      	b.n	800d170 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	8b5b      	ldrh	r3, [r3, #26]
 800cab0:	f003 0310 	and.w	r3, r3, #16
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d103      	bne.n	800cac0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cab8:	4b68      	ldr	r3, [pc, #416]	@ (800cc5c <tcp_process+0x2ac>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f001 fc2b 	bl	800e32c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7d1b      	ldrb	r3, [r3, #20]
 800cada:	3b02      	subs	r3, #2
 800cadc:	2b07      	cmp	r3, #7
 800cade:	f200 8337 	bhi.w	800d150 <tcp_process+0x7a0>
 800cae2:	a201      	add	r2, pc, #4	@ (adr r2, 800cae8 <tcp_process+0x138>)
 800cae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae8:	0800cb09 	.word	0x0800cb09
 800caec:	0800cd39 	.word	0x0800cd39
 800caf0:	0800ceb1 	.word	0x0800ceb1
 800caf4:	0800cedb 	.word	0x0800cedb
 800caf8:	0800cfff 	.word	0x0800cfff
 800cafc:	0800ceb1 	.word	0x0800ceb1
 800cb00:	0800d08b 	.word	0x0800d08b
 800cb04:	0800d11b 	.word	0x0800d11b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cb08:	4b4f      	ldr	r3, [pc, #316]	@ (800cc48 <tcp_process+0x298>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	f003 0310 	and.w	r3, r3, #16
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 80e4 	beq.w	800ccde <tcp_process+0x32e>
 800cb16:	4b4c      	ldr	r3, [pc, #304]	@ (800cc48 <tcp_process+0x298>)
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	f003 0302 	and.w	r3, r3, #2
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 80dd 	beq.w	800ccde <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	4b48      	ldr	r3, [pc, #288]	@ (800cc4c <tcp_process+0x29c>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	f040 80d5 	bne.w	800ccde <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cb34:	4b46      	ldr	r3, [pc, #280]	@ (800cc50 <tcp_process+0x2a0>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800cb46:	4b41      	ldr	r3, [pc, #260]	@ (800cc4c <tcp_process+0x29c>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cb4e:	4b44      	ldr	r3, [pc, #272]	@ (800cc60 <tcp_process+0x2b0>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	89db      	ldrh	r3, [r3, #14]
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cb68:	4b39      	ldr	r3, [pc, #228]	@ (800cc50 <tcp_process+0x2a0>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	1e5a      	subs	r2, r3, #1
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2204      	movs	r2, #4
 800cb76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	3304      	adds	r3, #4
 800cb80:	4618      	mov	r0, r3
 800cb82:	f004 fddb 	bl	801173c <ip4_route>
 800cb86:	4601      	mov	r1, r0
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f7ff f88c 	bl	800bcac <tcp_eff_send_mss_netif>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cba0:	009a      	lsls	r2, r3, #2
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800cbac:	428b      	cmp	r3, r1
 800cbae:	bf38      	it	cc
 800cbb0:	460b      	movcc	r3, r1
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d204      	bcs.n	800cbc0 <tcp_process+0x210>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	e00d      	b.n	800cbdc <tcp_process+0x22c>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d904      	bls.n	800cbd8 <tcp_process+0x228>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	e001      	b.n	800cbdc <tcp_process+0x22c>
 800cbd8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d106      	bne.n	800cbfa <tcp_process+0x24a>
 800cbec:	4b13      	ldr	r3, [pc, #76]	@ (800cc3c <tcp_process+0x28c>)
 800cbee:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800cbf2:	491c      	ldr	r1, [pc, #112]	@ (800cc64 <tcp_process+0x2b4>)
 800cbf4:	4813      	ldr	r0, [pc, #76]	@ (800cc44 <tcp_process+0x294>)
 800cbf6:	f006 fd75 	bl	80136e4 <iprintf>
        --pcb->snd_queuelen;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc00:	3b01      	subs	r3, #1
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc0e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d12a      	bne.n	800cc6c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc1a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <tcp_process+0x280>
 800cc22:	4b06      	ldr	r3, [pc, #24]	@ (800cc3c <tcp_process+0x28c>)
 800cc24:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800cc28:	490f      	ldr	r1, [pc, #60]	@ (800cc68 <tcp_process+0x2b8>)
 800cc2a:	4806      	ldr	r0, [pc, #24]	@ (800cc44 <tcp_process+0x294>)
 800cc2c:	f006 fd5a 	bl	80136e4 <iprintf>
          pcb->unsent = rseg->next;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cc38:	e01c      	b.n	800cc74 <tcp_process+0x2c4>
 800cc3a:	bf00      	nop
 800cc3c:	08015890 	.word	0x08015890
 800cc40:	08015ac8 	.word	0x08015ac8
 800cc44:	080158dc 	.word	0x080158dc
 800cc48:	20008ad4 	.word	0x20008ad4
 800cc4c:	20008acc 	.word	0x20008acc
 800cc50:	20008ac8 	.word	0x20008ac8
 800cc54:	08015ae4 	.word	0x08015ae4
 800cc58:	20008ad5 	.word	0x20008ad5
 800cc5c:	20008a90 	.word	0x20008a90
 800cc60:	20008ab8 	.word	0x20008ab8
 800cc64:	08015b04 	.word	0x08015b04
 800cc68:	08015b1c 	.word	0x08015b1c
        } else {
          pcb->unacked = rseg->next;
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800cc74:	69f8      	ldr	r0, [r7, #28]
 800cc76:	f7fe fd22 	bl	800b6be <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d104      	bne.n	800cc8c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cc88:	861a      	strh	r2, [r3, #48]	@ 0x30
 800cc8a:	e006      	b.n	800cc9a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00a      	beq.n	800ccba <tcp_process+0x30a>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	6910      	ldr	r0, [r2, #16]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	4798      	blx	r3
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	76bb      	strb	r3, [r7, #26]
 800ccb8:	e001      	b.n	800ccbe <tcp_process+0x30e>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ccbe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ccc2:	f113 0f0d 	cmn.w	r3, #13
 800ccc6:	d102      	bne.n	800ccce <tcp_process+0x31e>
          return ERR_ABRT;
 800ccc8:	f06f 030c 	mvn.w	r3, #12
 800cccc:	e250      	b.n	800d170 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8b5b      	ldrh	r3, [r3, #26]
 800ccd2:	f043 0302 	orr.w	r3, r3, #2
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ccdc:	e23a      	b.n	800d154 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ccde:	4b98      	ldr	r3, [pc, #608]	@ (800cf40 <tcp_process+0x590>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	f003 0310 	and.w	r3, r3, #16
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f000 8234 	beq.w	800d154 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccec:	4b95      	ldr	r3, [pc, #596]	@ (800cf44 <tcp_process+0x594>)
 800ccee:	6819      	ldr	r1, [r3, #0]
 800ccf0:	4b95      	ldr	r3, [pc, #596]	@ (800cf48 <tcp_process+0x598>)
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	4b95      	ldr	r3, [pc, #596]	@ (800cf4c <tcp_process+0x59c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccfc:	4b94      	ldr	r3, [pc, #592]	@ (800cf50 <tcp_process+0x5a0>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd00:	885b      	ldrh	r3, [r3, #2]
 800cd02:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd04:	4a92      	ldr	r2, [pc, #584]	@ (800cf50 <tcp_process+0x5a0>)
 800cd06:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd08:	8812      	ldrh	r2, [r2, #0]
 800cd0a:	b292      	uxth	r2, r2
 800cd0c:	9202      	str	r2, [sp, #8]
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	4b90      	ldr	r3, [pc, #576]	@ (800cf54 <tcp_process+0x5a4>)
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	4b90      	ldr	r3, [pc, #576]	@ (800cf58 <tcp_process+0x5a8>)
 800cd16:	4602      	mov	r2, r0
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f002 fc7f 	bl	800f61c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd24:	2b05      	cmp	r3, #5
 800cd26:	f200 8215 	bhi.w	800d154 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f002 fa4b 	bl	800f1cc <tcp_rexmit_rto>
      break;
 800cd36:	e20d      	b.n	800d154 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cd38:	4b81      	ldr	r3, [pc, #516]	@ (800cf40 <tcp_process+0x590>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	f003 0310 	and.w	r3, r3, #16
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 80a1 	beq.w	800ce88 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd46:	4b7f      	ldr	r3, [pc, #508]	@ (800cf44 <tcp_process+0x594>)
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	3b01      	subs	r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	db7e      	blt.n	800ce54 <tcp_process+0x4a4>
 800cd56:	4b7b      	ldr	r3, [pc, #492]	@ (800cf44 <tcp_process+0x594>)
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	dc77      	bgt.n	800ce54 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2204      	movs	r2, #4
 800cd68:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d102      	bne.n	800cd78 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cd72:	23fa      	movs	r3, #250	@ 0xfa
 800cd74:	76bb      	strb	r3, [r7, #26]
 800cd76:	e01d      	b.n	800cdb4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <tcp_process+0x3e0>
 800cd82:	4b76      	ldr	r3, [pc, #472]	@ (800cf5c <tcp_process+0x5ac>)
 800cd84:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800cd88:	4975      	ldr	r1, [pc, #468]	@ (800cf60 <tcp_process+0x5b0>)
 800cd8a:	4876      	ldr	r0, [pc, #472]	@ (800cf64 <tcp_process+0x5b4>)
 800cd8c:	f006 fcaa 	bl	80136e4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <tcp_process+0x400>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6910      	ldr	r0, [r2, #16]
 800cda4:	2200      	movs	r2, #0
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	4798      	blx	r3
 800cdaa:	4603      	mov	r3, r0
 800cdac:	76bb      	strb	r3, [r7, #26]
 800cdae:	e001      	b.n	800cdb4 <tcp_process+0x404>
 800cdb0:	23f0      	movs	r3, #240	@ 0xf0
 800cdb2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800cdb4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00a      	beq.n	800cdd2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cdbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cdc0:	f113 0f0d 	cmn.w	r3, #13
 800cdc4:	d002      	beq.n	800cdcc <tcp_process+0x41c>
              tcp_abort(pcb);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7fd ff8c 	bl	800ace4 <tcp_abort>
            }
            return ERR_ABRT;
 800cdcc:	f06f 030c 	mvn.w	r3, #12
 800cdd0:	e1ce      	b.n	800d170 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fae0 	bl	800d398 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cdd8:	4b63      	ldr	r3, [pc, #396]	@ (800cf68 <tcp_process+0x5b8>)
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d005      	beq.n	800cdec <tcp_process+0x43c>
            recv_acked--;
 800cde0:	4b61      	ldr	r3, [pc, #388]	@ (800cf68 <tcp_process+0x5b8>)
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	4b5f      	ldr	r3, [pc, #380]	@ (800cf68 <tcp_process+0x5b8>)
 800cdea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cdf0:	009a      	lsls	r2, r3, #2
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800cdfc:	428b      	cmp	r3, r1
 800cdfe:	bf38      	it	cc
 800ce00:	460b      	movcc	r3, r1
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d204      	bcs.n	800ce10 <tcp_process+0x460>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	e00d      	b.n	800ce2c <tcp_process+0x47c>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d904      	bls.n	800ce28 <tcp_process+0x478>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	e001      	b.n	800ce2c <tcp_process+0x47c>
 800ce28:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ce32:	4b4e      	ldr	r3, [pc, #312]	@ (800cf6c <tcp_process+0x5bc>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	f003 0320 	and.w	r3, r3, #32
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d037      	beq.n	800ceae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	8b5b      	ldrh	r3, [r3, #26]
 800ce42:	f043 0302 	orr.w	r3, r3, #2
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2207      	movs	r2, #7
 800ce50:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ce52:	e02c      	b.n	800ceae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce54:	4b3b      	ldr	r3, [pc, #236]	@ (800cf44 <tcp_process+0x594>)
 800ce56:	6819      	ldr	r1, [r3, #0]
 800ce58:	4b3b      	ldr	r3, [pc, #236]	@ (800cf48 <tcp_process+0x598>)
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	4b3b      	ldr	r3, [pc, #236]	@ (800cf4c <tcp_process+0x59c>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce64:	4b3a      	ldr	r3, [pc, #232]	@ (800cf50 <tcp_process+0x5a0>)
 800ce66:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce68:	885b      	ldrh	r3, [r3, #2]
 800ce6a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce6c:	4a38      	ldr	r2, [pc, #224]	@ (800cf50 <tcp_process+0x5a0>)
 800ce6e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce70:	8812      	ldrh	r2, [r2, #0]
 800ce72:	b292      	uxth	r2, r2
 800ce74:	9202      	str	r2, [sp, #8]
 800ce76:	9301      	str	r3, [sp, #4]
 800ce78:	4b36      	ldr	r3, [pc, #216]	@ (800cf54 <tcp_process+0x5a4>)
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4b36      	ldr	r3, [pc, #216]	@ (800cf58 <tcp_process+0x5a8>)
 800ce7e:	4602      	mov	r2, r0
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f002 fbcb 	bl	800f61c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ce86:	e167      	b.n	800d158 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ce88:	4b2d      	ldr	r3, [pc, #180]	@ (800cf40 <tcp_process+0x590>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	f003 0302 	and.w	r3, r3, #2
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f000 8161 	beq.w	800d158 <tcp_process+0x7a8>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9a:	1e5a      	subs	r2, r3, #1
 800ce9c:	4b2b      	ldr	r3, [pc, #172]	@ (800cf4c <tcp_process+0x59c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	f040 8159 	bne.w	800d158 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f002 f9b2 	bl	800f210 <tcp_rexmit>
      break;
 800ceac:	e154      	b.n	800d158 <tcp_process+0x7a8>
 800ceae:	e153      	b.n	800d158 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fa71 	bl	800d398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ceb6:	4b2d      	ldr	r3, [pc, #180]	@ (800cf6c <tcp_process+0x5bc>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 814c 	beq.w	800d15c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	8b5b      	ldrh	r3, [r3, #26]
 800cec8:	f043 0302 	orr.w	r3, r3, #2
 800cecc:	b29a      	uxth	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2207      	movs	r2, #7
 800ced6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ced8:	e140      	b.n	800d15c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fa5c 	bl	800d398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cee0:	4b22      	ldr	r3, [pc, #136]	@ (800cf6c <tcp_process+0x5bc>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	f003 0320 	and.w	r3, r3, #32
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d071      	beq.n	800cfd0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ceec:	4b14      	ldr	r3, [pc, #80]	@ (800cf40 <tcp_process+0x590>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	f003 0310 	and.w	r3, r3, #16
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d060      	beq.n	800cfba <tcp_process+0x60a>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cefc:	4b11      	ldr	r3, [pc, #68]	@ (800cf44 <tcp_process+0x594>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d15a      	bne.n	800cfba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d156      	bne.n	800cfba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	8b5b      	ldrh	r3, [r3, #26]
 800cf10:	f043 0302 	orr.w	r3, r3, #2
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7fe fdbc 	bl	800ba98 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cf20:	4b13      	ldr	r3, [pc, #76]	@ (800cf70 <tcp_process+0x5c0>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d105      	bne.n	800cf36 <tcp_process+0x586>
 800cf2a:	4b11      	ldr	r3, [pc, #68]	@ (800cf70 <tcp_process+0x5c0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	4a0f      	ldr	r2, [pc, #60]	@ (800cf70 <tcp_process+0x5c0>)
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	e02e      	b.n	800cf94 <tcp_process+0x5e4>
 800cf36:	4b0e      	ldr	r3, [pc, #56]	@ (800cf70 <tcp_process+0x5c0>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	617b      	str	r3, [r7, #20]
 800cf3c:	e027      	b.n	800cf8e <tcp_process+0x5de>
 800cf3e:	bf00      	nop
 800cf40:	20008ad4 	.word	0x20008ad4
 800cf44:	20008acc 	.word	0x20008acc
 800cf48:	20008ad2 	.word	0x20008ad2
 800cf4c:	20008ac8 	.word	0x20008ac8
 800cf50:	20008ab8 	.word	0x20008ab8
 800cf54:	20005530 	.word	0x20005530
 800cf58:	20005534 	.word	0x20005534
 800cf5c:	08015890 	.word	0x08015890
 800cf60:	08015b30 	.word	0x08015b30
 800cf64:	080158dc 	.word	0x080158dc
 800cf68:	20008ad0 	.word	0x20008ad0
 800cf6c:	20008ad5 	.word	0x20008ad5
 800cf70:	20008a9c 	.word	0x20008a9c
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d104      	bne.n	800cf88 <tcp_process+0x5d8>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68da      	ldr	r2, [r3, #12]
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	60da      	str	r2, [r3, #12]
 800cf86:	e005      	b.n	800cf94 <tcp_process+0x5e4>
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	617b      	str	r3, [r7, #20]
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1ef      	bne.n	800cf74 <tcp_process+0x5c4>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	60da      	str	r2, [r3, #12]
 800cf9a:	4b77      	ldr	r3, [pc, #476]	@ (800d178 <tcp_process+0x7c8>)
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	220a      	movs	r2, #10
 800cfa4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cfa6:	4b75      	ldr	r3, [pc, #468]	@ (800d17c <tcp_process+0x7cc>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	60da      	str	r2, [r3, #12]
 800cfae:	4a73      	ldr	r2, [pc, #460]	@ (800d17c <tcp_process+0x7cc>)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6013      	str	r3, [r2, #0]
 800cfb4:	f002 fcf4 	bl	800f9a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800cfb8:	e0d2      	b.n	800d160 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	8b5b      	ldrh	r3, [r3, #26]
 800cfbe:	f043 0302 	orr.w	r3, r3, #2
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2208      	movs	r2, #8
 800cfcc:	751a      	strb	r2, [r3, #20]
      break;
 800cfce:	e0c7      	b.n	800d160 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cfd0:	4b6b      	ldr	r3, [pc, #428]	@ (800d180 <tcp_process+0x7d0>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	f003 0310 	and.w	r3, r3, #16
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80c1 	beq.w	800d160 <tcp_process+0x7b0>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfe2:	4b68      	ldr	r3, [pc, #416]	@ (800d184 <tcp_process+0x7d4>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	f040 80ba 	bne.w	800d160 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f040 80b5 	bne.w	800d160 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2206      	movs	r2, #6
 800cffa:	751a      	strb	r2, [r3, #20]
      break;
 800cffc:	e0b0      	b.n	800d160 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f9ca 	bl	800d398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d004:	4b60      	ldr	r3, [pc, #384]	@ (800d188 <tcp_process+0x7d8>)
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	f003 0320 	and.w	r3, r3, #32
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80a9 	beq.w	800d164 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	8b5b      	ldrh	r3, [r3, #26]
 800d016:	f043 0302 	orr.w	r3, r3, #2
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7fe fd39 	bl	800ba98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d026:	4b59      	ldr	r3, [pc, #356]	@ (800d18c <tcp_process+0x7dc>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d105      	bne.n	800d03c <tcp_process+0x68c>
 800d030:	4b56      	ldr	r3, [pc, #344]	@ (800d18c <tcp_process+0x7dc>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	4a55      	ldr	r2, [pc, #340]	@ (800d18c <tcp_process+0x7dc>)
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	e013      	b.n	800d064 <tcp_process+0x6b4>
 800d03c:	4b53      	ldr	r3, [pc, #332]	@ (800d18c <tcp_process+0x7dc>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	613b      	str	r3, [r7, #16]
 800d042:	e00c      	b.n	800d05e <tcp_process+0x6ae>
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d104      	bne.n	800d058 <tcp_process+0x6a8>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68da      	ldr	r2, [r3, #12]
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	60da      	str	r2, [r3, #12]
 800d056:	e005      	b.n	800d064 <tcp_process+0x6b4>
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	613b      	str	r3, [r7, #16]
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1ef      	bne.n	800d044 <tcp_process+0x694>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	60da      	str	r2, [r3, #12]
 800d06a:	4b43      	ldr	r3, [pc, #268]	@ (800d178 <tcp_process+0x7c8>)
 800d06c:	2201      	movs	r2, #1
 800d06e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	220a      	movs	r2, #10
 800d074:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d076:	4b41      	ldr	r3, [pc, #260]	@ (800d17c <tcp_process+0x7cc>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60da      	str	r2, [r3, #12]
 800d07e:	4a3f      	ldr	r2, [pc, #252]	@ (800d17c <tcp_process+0x7cc>)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6013      	str	r3, [r2, #0]
 800d084:	f002 fc8c 	bl	800f9a0 <tcp_timer_needed>
      }
      break;
 800d088:	e06c      	b.n	800d164 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f984 	bl	800d398 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d090:	4b3b      	ldr	r3, [pc, #236]	@ (800d180 <tcp_process+0x7d0>)
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	f003 0310 	and.w	r3, r3, #16
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d065      	beq.n	800d168 <tcp_process+0x7b8>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0a0:	4b38      	ldr	r3, [pc, #224]	@ (800d184 <tcp_process+0x7d4>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d15f      	bne.n	800d168 <tcp_process+0x7b8>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d15b      	bne.n	800d168 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7fe fcf1 	bl	800ba98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d0b6:	4b35      	ldr	r3, [pc, #212]	@ (800d18c <tcp_process+0x7dc>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d105      	bne.n	800d0cc <tcp_process+0x71c>
 800d0c0:	4b32      	ldr	r3, [pc, #200]	@ (800d18c <tcp_process+0x7dc>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	4a31      	ldr	r2, [pc, #196]	@ (800d18c <tcp_process+0x7dc>)
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	e013      	b.n	800d0f4 <tcp_process+0x744>
 800d0cc:	4b2f      	ldr	r3, [pc, #188]	@ (800d18c <tcp_process+0x7dc>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	e00c      	b.n	800d0ee <tcp_process+0x73e>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d104      	bne.n	800d0e8 <tcp_process+0x738>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68da      	ldr	r2, [r3, #12]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	60da      	str	r2, [r3, #12]
 800d0e6:	e005      	b.n	800d0f4 <tcp_process+0x744>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1ef      	bne.n	800d0d4 <tcp_process+0x724>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	60da      	str	r2, [r3, #12]
 800d0fa:	4b1f      	ldr	r3, [pc, #124]	@ (800d178 <tcp_process+0x7c8>)
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	220a      	movs	r2, #10
 800d104:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d106:	4b1d      	ldr	r3, [pc, #116]	@ (800d17c <tcp_process+0x7cc>)
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	60da      	str	r2, [r3, #12]
 800d10e:	4a1b      	ldr	r2, [pc, #108]	@ (800d17c <tcp_process+0x7cc>)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	f002 fc44 	bl	800f9a0 <tcp_timer_needed>
      }
      break;
 800d118:	e026      	b.n	800d168 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f93c 	bl	800d398 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d120:	4b17      	ldr	r3, [pc, #92]	@ (800d180 <tcp_process+0x7d0>)
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	f003 0310 	and.w	r3, r3, #16
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d01f      	beq.n	800d16c <tcp_process+0x7bc>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d130:	4b14      	ldr	r3, [pc, #80]	@ (800d184 <tcp_process+0x7d4>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d119      	bne.n	800d16c <tcp_process+0x7bc>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d115      	bne.n	800d16c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d140:	4b11      	ldr	r3, [pc, #68]	@ (800d188 <tcp_process+0x7d8>)
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	f043 0310 	orr.w	r3, r3, #16
 800d148:	b2da      	uxtb	r2, r3
 800d14a:	4b0f      	ldr	r3, [pc, #60]	@ (800d188 <tcp_process+0x7d8>)
 800d14c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d14e:	e00d      	b.n	800d16c <tcp_process+0x7bc>
    default:
      break;
 800d150:	bf00      	nop
 800d152:	e00c      	b.n	800d16e <tcp_process+0x7be>
      break;
 800d154:	bf00      	nop
 800d156:	e00a      	b.n	800d16e <tcp_process+0x7be>
      break;
 800d158:	bf00      	nop
 800d15a:	e008      	b.n	800d16e <tcp_process+0x7be>
      break;
 800d15c:	bf00      	nop
 800d15e:	e006      	b.n	800d16e <tcp_process+0x7be>
      break;
 800d160:	bf00      	nop
 800d162:	e004      	b.n	800d16e <tcp_process+0x7be>
      break;
 800d164:	bf00      	nop
 800d166:	e002      	b.n	800d16e <tcp_process+0x7be>
      break;
 800d168:	bf00      	nop
 800d16a:	e000      	b.n	800d16e <tcp_process+0x7be>
      break;
 800d16c:	bf00      	nop
  }
  return ERR_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3724      	adds	r7, #36	@ 0x24
 800d174:	46bd      	mov	sp, r7
 800d176:	bd90      	pop	{r4, r7, pc}
 800d178:	20008aa4 	.word	0x20008aa4
 800d17c:	20008aa0 	.word	0x20008aa0
 800d180:	20008ad4 	.word	0x20008ad4
 800d184:	20008acc 	.word	0x20008acc
 800d188:	20008ad5 	.word	0x20008ad5
 800d18c:	20008a9c 	.word	0x20008a9c

0800d190 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d190:	b590      	push	{r4, r7, lr}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d106      	bne.n	800d1ae <tcp_oos_insert_segment+0x1e>
 800d1a0:	4b3b      	ldr	r3, [pc, #236]	@ (800d290 <tcp_oos_insert_segment+0x100>)
 800d1a2:	f240 421f 	movw	r2, #1055	@ 0x41f
 800d1a6:	493b      	ldr	r1, [pc, #236]	@ (800d294 <tcp_oos_insert_segment+0x104>)
 800d1a8:	483b      	ldr	r0, [pc, #236]	@ (800d298 <tcp_oos_insert_segment+0x108>)
 800d1aa:	f006 fa9b 	bl	80136e4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	899b      	ldrh	r3, [r3, #12]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fb fc9e 	bl	8008af8 <lwip_htons>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d028      	beq.n	800d21a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d1c8:	6838      	ldr	r0, [r7, #0]
 800d1ca:	f7fe fa63 	bl	800b694 <tcp_segs_free>
    next = NULL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	603b      	str	r3, [r7, #0]
 800d1d2:	e056      	b.n	800d282 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	899b      	ldrh	r3, [r3, #12]
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fb fc8b 	bl	8008af8 <lwip_htons>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00d      	beq.n	800d20a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	899b      	ldrh	r3, [r3, #12]
 800d1f4:	b29c      	uxth	r4, r3
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	f7fb fc7e 	bl	8008af8 <lwip_htons>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	461a      	mov	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	4322      	orrs	r2, r4
 800d206:	b292      	uxth	r2, r2
 800d208:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7fe fa52 	bl	800b6be <tcp_seg_free>
    while (next &&
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00e      	beq.n	800d23e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	891b      	ldrh	r3, [r3, #8]
 800d224:	461a      	mov	r2, r3
 800d226:	4b1d      	ldr	r3, [pc, #116]	@ (800d29c <tcp_oos_insert_segment+0x10c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	441a      	add	r2, r3
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	8909      	ldrh	r1, [r1, #8]
 800d236:	440b      	add	r3, r1
 800d238:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	daca      	bge.n	800d1d4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d01e      	beq.n	800d282 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	891b      	ldrh	r3, [r3, #8]
 800d248:	461a      	mov	r2, r3
 800d24a:	4b14      	ldr	r3, [pc, #80]	@ (800d29c <tcp_oos_insert_segment+0x10c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	441a      	add	r2, r3
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d258:	2b00      	cmp	r3, #0
 800d25a:	dd12      	ble.n	800d282 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	b29a      	uxth	r2, r3
 800d264:	4b0d      	ldr	r3, [pc, #52]	@ (800d29c <tcp_oos_insert_segment+0x10c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	891b      	ldrh	r3, [r3, #8]
 800d27a:	4619      	mov	r1, r3
 800d27c:	4610      	mov	r0, r2
 800d27e:	f7fc fe13 	bl	8009ea8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	601a      	str	r2, [r3, #0]
}
 800d288:	bf00      	nop
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd90      	pop	{r4, r7, pc}
 800d290:	08015890 	.word	0x08015890
 800d294:	08015b50 	.word	0x08015b50
 800d298:	080158dc 	.word	0x080158dc
 800d29c:	20008ac8 	.word	0x20008ac8

0800d2a0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d2a0:	b5b0      	push	{r4, r5, r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d2ae:	e03e      	b.n	800d32e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fd f800 	bl	800a2c4 <pbuf_clen>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d2ce:	8a7a      	ldrh	r2, [r7, #18]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d906      	bls.n	800d2e2 <tcp_free_acked_segments+0x42>
 800d2d4:	4b2a      	ldr	r3, [pc, #168]	@ (800d380 <tcp_free_acked_segments+0xe0>)
 800d2d6:	f240 4257 	movw	r2, #1111	@ 0x457
 800d2da:	492a      	ldr	r1, [pc, #168]	@ (800d384 <tcp_free_acked_segments+0xe4>)
 800d2dc:	482a      	ldr	r0, [pc, #168]	@ (800d388 <tcp_free_acked_segments+0xe8>)
 800d2de:	f006 fa01 	bl	80136e4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800d2e8:	8a7b      	ldrh	r3, [r7, #18]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	891a      	ldrh	r2, [r3, #8]
 800d2f8:	4b24      	ldr	r3, [pc, #144]	@ (800d38c <tcp_free_acked_segments+0xec>)
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	4b22      	ldr	r3, [pc, #136]	@ (800d38c <tcp_free_acked_segments+0xec>)
 800d302:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d304:	6978      	ldr	r0, [r7, #20]
 800d306:	f7fe f9da 	bl	800b6be <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00c      	beq.n	800d32e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d109      	bne.n	800d32e <tcp_free_acked_segments+0x8e>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d106      	bne.n	800d32e <tcp_free_acked_segments+0x8e>
 800d320:	4b17      	ldr	r3, [pc, #92]	@ (800d380 <tcp_free_acked_segments+0xe0>)
 800d322:	f240 4261 	movw	r2, #1121	@ 0x461
 800d326:	491a      	ldr	r1, [pc, #104]	@ (800d390 <tcp_free_acked_segments+0xf0>)
 800d328:	4817      	ldr	r0, [pc, #92]	@ (800d388 <tcp_free_acked_segments+0xe8>)
 800d32a:	f006 f9db 	bl	80136e4 <iprintf>
  while (seg_list != NULL &&
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d020      	beq.n	800d376 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fb fbf1 	bl	8008b22 <lwip_htonl>
 800d340:	4604      	mov	r4, r0
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	891b      	ldrh	r3, [r3, #8]
 800d346:	461d      	mov	r5, r3
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	899b      	ldrh	r3, [r3, #12]
 800d34e:	b29b      	uxth	r3, r3
 800d350:	4618      	mov	r0, r3
 800d352:	f7fb fbd1 	bl	8008af8 <lwip_htons>
 800d356:	4603      	mov	r3, r0
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <tcp_free_acked_segments+0xc6>
 800d362:	2301      	movs	r3, #1
 800d364:	e000      	b.n	800d368 <tcp_free_acked_segments+0xc8>
 800d366:	2300      	movs	r3, #0
 800d368:	442b      	add	r3, r5
 800d36a:	18e2      	adds	r2, r4, r3
 800d36c:	4b09      	ldr	r3, [pc, #36]	@ (800d394 <tcp_free_acked_segments+0xf4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d372:	2b00      	cmp	r3, #0
 800d374:	dd9c      	ble.n	800d2b0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d376:	68bb      	ldr	r3, [r7, #8]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bdb0      	pop	{r4, r5, r7, pc}
 800d380:	08015890 	.word	0x08015890
 800d384:	08015b78 	.word	0x08015b78
 800d388:	080158dc 	.word	0x080158dc
 800d38c:	20008ad0 	.word	0x20008ad0
 800d390:	08015ba0 	.word	0x08015ba0
 800d394:	20008acc 	.word	0x20008acc

0800d398 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d398:	b5b0      	push	{r4, r5, r7, lr}
 800d39a:	b094      	sub	sp, #80	@ 0x50
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <tcp_receive+0x20>
 800d3aa:	4b91      	ldr	r3, [pc, #580]	@ (800d5f0 <tcp_receive+0x258>)
 800d3ac:	f240 427b 	movw	r2, #1147	@ 0x47b
 800d3b0:	4990      	ldr	r1, [pc, #576]	@ (800d5f4 <tcp_receive+0x25c>)
 800d3b2:	4891      	ldr	r0, [pc, #580]	@ (800d5f8 <tcp_receive+0x260>)
 800d3b4:	f006 f996 	bl	80136e4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	7d1b      	ldrb	r3, [r3, #20]
 800d3bc:	2b03      	cmp	r3, #3
 800d3be:	d806      	bhi.n	800d3ce <tcp_receive+0x36>
 800d3c0:	4b8b      	ldr	r3, [pc, #556]	@ (800d5f0 <tcp_receive+0x258>)
 800d3c2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800d3c6:	498d      	ldr	r1, [pc, #564]	@ (800d5fc <tcp_receive+0x264>)
 800d3c8:	488b      	ldr	r0, [pc, #556]	@ (800d5f8 <tcp_receive+0x260>)
 800d3ca:	f006 f98b 	bl	80136e4 <iprintf>

  if (flags & TCP_ACK) {
 800d3ce:	4b8c      	ldr	r3, [pc, #560]	@ (800d600 <tcp_receive+0x268>)
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	f003 0310 	and.w	r3, r3, #16
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 8264 	beq.w	800d8a4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3e8:	4413      	add	r3, r2
 800d3ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3f0:	4b84      	ldr	r3, [pc, #528]	@ (800d604 <tcp_receive+0x26c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	db1b      	blt.n	800d432 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3fe:	4b81      	ldr	r3, [pc, #516]	@ (800d604 <tcp_receive+0x26c>)
 800d400:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d402:	429a      	cmp	r2, r3
 800d404:	d106      	bne.n	800d414 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d40a:	4b7f      	ldr	r3, [pc, #508]	@ (800d608 <tcp_receive+0x270>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	2b00      	cmp	r3, #0
 800d412:	db0e      	blt.n	800d432 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d418:	4b7b      	ldr	r3, [pc, #492]	@ (800d608 <tcp_receive+0x270>)
 800d41a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d125      	bne.n	800d46c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d420:	4b7a      	ldr	r3, [pc, #488]	@ (800d60c <tcp_receive+0x274>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	89db      	ldrh	r3, [r3, #14]
 800d426:	b29a      	uxth	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d42e:	429a      	cmp	r2, r3
 800d430:	d91c      	bls.n	800d46c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d432:	4b76      	ldr	r3, [pc, #472]	@ (800d60c <tcp_receive+0x274>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	89db      	ldrh	r3, [r3, #14]
 800d438:	b29a      	uxth	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d205      	bcs.n	800d45c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800d45c:	4b69      	ldr	r3, [pc, #420]	@ (800d604 <tcp_receive+0x26c>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800d464:	4b68      	ldr	r3, [pc, #416]	@ (800d608 <tcp_receive+0x270>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d46c:	4b66      	ldr	r3, [pc, #408]	@ (800d608 <tcp_receive+0x270>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	dc58      	bgt.n	800d52c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d47a:	4b65      	ldr	r3, [pc, #404]	@ (800d610 <tcp_receive+0x278>)
 800d47c:	881b      	ldrh	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d14b      	bne.n	800d51a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800d48c:	4413      	add	r3, r2
 800d48e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d490:	429a      	cmp	r2, r3
 800d492:	d142      	bne.n	800d51a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	db3d      	blt.n	800d51a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4a2:	4b59      	ldr	r3, [pc, #356]	@ (800d608 <tcp_receive+0x270>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d137      	bne.n	800d51a <tcp_receive+0x182>
              found_dupack = 1;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d4b4:	2bff      	cmp	r3, #255	@ 0xff
 800d4b6:	d007      	beq.n	800d4c8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d4be:	3301      	adds	r3, #1
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d91b      	bls.n	800d50a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d4dc:	4413      	add	r3, r2
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d30a      	bcc.n	800d500 <tcp_receive+0x168>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d4f4:	4413      	add	r3, r2
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d4fe:	e004      	b.n	800d50a <tcp_receive+0x172>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d506:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d510:	2b02      	cmp	r3, #2
 800d512:	d902      	bls.n	800d51a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f001 fee7 	bl	800f2e8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d51a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f040 8161 	bne.w	800d7e4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d52a:	e15b      	b.n	800d7e4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d52c:	4b36      	ldr	r3, [pc, #216]	@ (800d608 <tcp_receive+0x270>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	3b01      	subs	r3, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f2c0 814e 	blt.w	800d7da <tcp_receive+0x442>
 800d53e:	4b32      	ldr	r3, [pc, #200]	@ (800d608 <tcp_receive+0x270>)
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d546:	1ad3      	subs	r3, r2, r3
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f300 8146 	bgt.w	800d7da <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	8b5b      	ldrh	r3, [r3, #26]
 800d552:	f003 0304 	and.w	r3, r3, #4
 800d556:	2b00      	cmp	r3, #0
 800d558:	d010      	beq.n	800d57c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	8b5b      	ldrh	r3, [r3, #26]
 800d55e:	f023 0304 	bic.w	r3, r3, #4
 800d562:	b29a      	uxth	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d58a:	10db      	asrs	r3, r3, #3
 800d58c:	b21b      	sxth	r3, r3
 800d58e:	b29a      	uxth	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d596:	b29b      	uxth	r3, r3
 800d598:	4413      	add	r3, r2
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	b21a      	sxth	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d5a4:	4b18      	ldr	r3, [pc, #96]	@ (800d608 <tcp_receive+0x270>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d5bc:	4b12      	ldr	r3, [pc, #72]	@ (800d608 <tcp_receive+0x270>)
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	7d1b      	ldrb	r3, [r3, #20]
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	f240 8097 	bls.w	800d6fc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d245      	bcs.n	800d66a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	8b5b      	ldrh	r3, [r3, #26]
 800d5e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d014      	beq.n	800d614 <tcp_receive+0x27c>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e013      	b.n	800d616 <tcp_receive+0x27e>
 800d5ee:	bf00      	nop
 800d5f0:	08015890 	.word	0x08015890
 800d5f4:	08015bc0 	.word	0x08015bc0
 800d5f8:	080158dc 	.word	0x080158dc
 800d5fc:	08015bdc 	.word	0x08015bdc
 800d600:	20008ad4 	.word	0x20008ad4
 800d604:	20008ac8 	.word	0x20008ac8
 800d608:	20008acc 	.word	0x20008acc
 800d60c:	20008ab8 	.word	0x20008ab8
 800d610:	20008ad2 	.word	0x20008ad2
 800d614:	2302      	movs	r3, #2
 800d616:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d61a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d61e:	b29a      	uxth	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d624:	fb12 f303 	smulbb	r3, r2, r3
 800d628:	b29b      	uxth	r3, r3
 800d62a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d62c:	4293      	cmp	r3, r2
 800d62e:	bf28      	it	cs
 800d630:	4613      	movcs	r3, r2
 800d632:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d63a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d63c:	4413      	add	r3, r2
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d646:	429a      	cmp	r2, r3
 800d648:	d309      	bcc.n	800d65e <tcp_receive+0x2c6>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d650:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d652:	4413      	add	r3, r2
 800d654:	b29a      	uxth	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d65c:	e04e      	b.n	800d6fc <tcp_receive+0x364>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d664:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d668:	e048      	b.n	800d6fc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d670:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d672:	4413      	add	r3, r2
 800d674:	b29a      	uxth	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d309      	bcc.n	800d694 <tcp_receive+0x2fc>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d686:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d688:	4413      	add	r3, r2
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d692:	e004      	b.n	800d69e <tcp_receive+0x306>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d69a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d326      	bcc.n	800d6fc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d6ba:	1ad3      	subs	r3, r2, r3
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6ce:	4413      	add	r3, r2
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d30a      	bcc.n	800d6f2 <tcp_receive+0x35a>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6e6:	4413      	add	r3, r2
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d6f0:	e004      	b.n	800d6fc <tcp_receive+0x364>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d704:	4a98      	ldr	r2, [pc, #608]	@ (800d968 <tcp_receive+0x5d0>)
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff fdca 	bl	800d2a0 <tcp_free_acked_segments>
 800d70c:	4602      	mov	r2, r0
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d71a:	4a94      	ldr	r2, [pc, #592]	@ (800d96c <tcp_receive+0x5d4>)
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fdbf 	bl	800d2a0 <tcp_free_acked_segments>
 800d722:	4602      	mov	r2, r0
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d104      	bne.n	800d73a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d736:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d738:	e002      	b.n	800d740 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d103      	bne.n	800d756 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d75c:	4b84      	ldr	r3, [pc, #528]	@ (800d970 <tcp_receive+0x5d8>)
 800d75e:	881b      	ldrh	r3, [r3, #0]
 800d760:	4413      	add	r3, r2
 800d762:	b29a      	uxth	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	8b5b      	ldrh	r3, [r3, #26]
 800d76e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d772:	2b00      	cmp	r3, #0
 800d774:	d035      	beq.n	800d7e2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d118      	bne.n	800d7b0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00c      	beq.n	800d7a0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	4618      	mov	r0, r3
 800d794:	f7fb f9c5 	bl	8008b22 <lwip_htonl>
 800d798:	4603      	mov	r3, r0
 800d79a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	dc20      	bgt.n	800d7e2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	8b5b      	ldrh	r3, [r3, #26]
 800d7a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7ae:	e018      	b.n	800d7e2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fb f9b0 	bl	8008b22 <lwip_htonl>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	1ae3      	subs	r3, r4, r3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dc0b      	bgt.n	800d7e2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	8b5b      	ldrh	r3, [r3, #26]
 800d7ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7d8:	e003      	b.n	800d7e2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f001 ff70 	bl	800f6c0 <tcp_send_empty_ack>
 800d7e0:	e000      	b.n	800d7e4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7e2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d05b      	beq.n	800d8a4 <tcp_receive+0x50c>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7f0:	4b60      	ldr	r3, [pc, #384]	@ (800d974 <tcp_receive+0x5dc>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	da54      	bge.n	800d8a4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d7fa:	4b5f      	ldr	r3, [pc, #380]	@ (800d978 <tcp_receive+0x5e0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d804:	b29b      	uxth	r3, r3
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	b29b      	uxth	r3, r3
 800d80a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d80e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d818:	10db      	asrs	r3, r3, #3
 800d81a:	b21b      	sxth	r3, r3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	b29b      	uxth	r3, r3
 800d822:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d832:	4413      	add	r3, r2
 800d834:	b29b      	uxth	r3, r3
 800d836:	b21a      	sxth	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800d83c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800d840:	2b00      	cmp	r3, #0
 800d842:	da05      	bge.n	800d850 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d844:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d848:	425b      	negs	r3, r3
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d850:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d85a:	109b      	asrs	r3, r3, #2
 800d85c:	b21b      	sxth	r3, r3
 800d85e:	b29b      	uxth	r3, r3
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	b29b      	uxth	r3, r3
 800d864:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d86e:	b29a      	uxth	r2, r3
 800d870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d874:	4413      	add	r3, r2
 800d876:	b29b      	uxth	r3, r3
 800d878:	b21a      	sxth	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d884:	10db      	asrs	r3, r3, #3
 800d886:	b21b      	sxth	r3, r3
 800d888:	b29a      	uxth	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d890:	b29b      	uxth	r3, r3
 800d892:	4413      	add	r3, r2
 800d894:	b29b      	uxth	r3, r3
 800d896:	b21a      	sxth	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d8a4:	4b35      	ldr	r3, [pc, #212]	@ (800d97c <tcp_receive+0x5e4>)
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 84df 	beq.w	800e26c <tcp_receive+0xed4>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	7d1b      	ldrb	r3, [r3, #20]
 800d8b2:	2b06      	cmp	r3, #6
 800d8b4:	f200 84da 	bhi.w	800e26c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8bc:	4b30      	ldr	r3, [pc, #192]	@ (800d980 <tcp_receive+0x5e8>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	3b01      	subs	r3, #1
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f2c0 808f 	blt.w	800d9e8 <tcp_receive+0x650>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8ce:	4b2b      	ldr	r3, [pc, #172]	@ (800d97c <tcp_receive+0x5e4>)
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4b2a      	ldr	r3, [pc, #168]	@ (800d980 <tcp_receive+0x5e8>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	440b      	add	r3, r1
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	3301      	adds	r3, #1
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f300 8082 	bgt.w	800d9e8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d8e4:	4b27      	ldr	r3, [pc, #156]	@ (800d984 <tcp_receive+0x5ec>)
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8ee:	4b24      	ldr	r3, [pc, #144]	@ (800d980 <tcp_receive+0x5e8>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	1ad3      	subs	r3, r2, r3
 800d8f4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d8f6:	4b23      	ldr	r3, [pc, #140]	@ (800d984 <tcp_receive+0x5ec>)
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d106      	bne.n	800d90c <tcp_receive+0x574>
 800d8fe:	4b22      	ldr	r3, [pc, #136]	@ (800d988 <tcp_receive+0x5f0>)
 800d900:	f240 5294 	movw	r2, #1428	@ 0x594
 800d904:	4921      	ldr	r1, [pc, #132]	@ (800d98c <tcp_receive+0x5f4>)
 800d906:	4822      	ldr	r0, [pc, #136]	@ (800d990 <tcp_receive+0x5f8>)
 800d908:	f005 feec 	bl	80136e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d912:	4293      	cmp	r3, r2
 800d914:	d906      	bls.n	800d924 <tcp_receive+0x58c>
 800d916:	4b1c      	ldr	r3, [pc, #112]	@ (800d988 <tcp_receive+0x5f0>)
 800d918:	f240 5295 	movw	r2, #1429	@ 0x595
 800d91c:	491d      	ldr	r1, [pc, #116]	@ (800d994 <tcp_receive+0x5fc>)
 800d91e:	481c      	ldr	r0, [pc, #112]	@ (800d990 <tcp_receive+0x5f8>)
 800d920:	f005 fee0 	bl	80136e4 <iprintf>
      off = (u16_t)off32;
 800d924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d92a:	4b16      	ldr	r3, [pc, #88]	@ (800d984 <tcp_receive+0x5ec>)
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	891b      	ldrh	r3, [r3, #8]
 800d930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d934:	429a      	cmp	r2, r3
 800d936:	d906      	bls.n	800d946 <tcp_receive+0x5ae>
 800d938:	4b13      	ldr	r3, [pc, #76]	@ (800d988 <tcp_receive+0x5f0>)
 800d93a:	f240 5297 	movw	r2, #1431	@ 0x597
 800d93e:	4916      	ldr	r1, [pc, #88]	@ (800d998 <tcp_receive+0x600>)
 800d940:	4813      	ldr	r0, [pc, #76]	@ (800d990 <tcp_receive+0x5f8>)
 800d942:	f005 fecf 	bl	80136e4 <iprintf>
      inseg.len -= off;
 800d946:	4b0f      	ldr	r3, [pc, #60]	@ (800d984 <tcp_receive+0x5ec>)
 800d948:	891a      	ldrh	r2, [r3, #8]
 800d94a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	b29a      	uxth	r2, r3
 800d952:	4b0c      	ldr	r3, [pc, #48]	@ (800d984 <tcp_receive+0x5ec>)
 800d954:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d956:	4b0b      	ldr	r3, [pc, #44]	@ (800d984 <tcp_receive+0x5ec>)
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	891a      	ldrh	r2, [r3, #8]
 800d95c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800d964:	e02a      	b.n	800d9bc <tcp_receive+0x624>
 800d966:	bf00      	nop
 800d968:	08015bf8 	.word	0x08015bf8
 800d96c:	08015c00 	.word	0x08015c00
 800d970:	20008ad0 	.word	0x20008ad0
 800d974:	20008acc 	.word	0x20008acc
 800d978:	20008a90 	.word	0x20008a90
 800d97c:	20008ad2 	.word	0x20008ad2
 800d980:	20008ac8 	.word	0x20008ac8
 800d984:	20008aa8 	.word	0x20008aa8
 800d988:	08015890 	.word	0x08015890
 800d98c:	08015c08 	.word	0x08015c08
 800d990:	080158dc 	.word	0x080158dc
 800d994:	08015c18 	.word	0x08015c18
 800d998:	08015c28 	.word	0x08015c28
        off -= p->len;
 800d99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d99e:	895b      	ldrh	r3, [r3, #10]
 800d9a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d9ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d9b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d9b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800d9bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9be:	895b      	ldrh	r3, [r3, #10]
 800d9c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d8e9      	bhi.n	800d99c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d9c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d9d0:	f7fc fb6a 	bl	800a0a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9d8:	4a90      	ldr	r2, [pc, #576]	@ (800dc1c <tcp_receive+0x884>)
 800d9da:	6013      	str	r3, [r2, #0]
 800d9dc:	4b90      	ldr	r3, [pc, #576]	@ (800dc20 <tcp_receive+0x888>)
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	4a8e      	ldr	r2, [pc, #568]	@ (800dc1c <tcp_receive+0x884>)
 800d9e2:	6812      	ldr	r2, [r2, #0]
 800d9e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d9e6:	e00d      	b.n	800da04 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d9e8:	4b8c      	ldr	r3, [pc, #560]	@ (800dc1c <tcp_receive+0x884>)
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f0:	1ad3      	subs	r3, r2, r3
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	da06      	bge.n	800da04 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8b5b      	ldrh	r3, [r3, #26]
 800d9fa:	f043 0302 	orr.w	r3, r3, #2
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800da04:	4b85      	ldr	r3, [pc, #532]	@ (800dc1c <tcp_receive+0x884>)
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f2c0 8427 	blt.w	800e262 <tcp_receive+0xeca>
 800da14:	4b81      	ldr	r3, [pc, #516]	@ (800dc1c <tcp_receive+0x884>)
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800da20:	440b      	add	r3, r1
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	3301      	adds	r3, #1
 800da26:	2b00      	cmp	r3, #0
 800da28:	f300 841b 	bgt.w	800e262 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da30:	4b7a      	ldr	r3, [pc, #488]	@ (800dc1c <tcp_receive+0x884>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	429a      	cmp	r2, r3
 800da36:	f040 8298 	bne.w	800df6a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800da3a:	4b79      	ldr	r3, [pc, #484]	@ (800dc20 <tcp_receive+0x888>)
 800da3c:	891c      	ldrh	r4, [r3, #8]
 800da3e:	4b78      	ldr	r3, [pc, #480]	@ (800dc20 <tcp_receive+0x888>)
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	899b      	ldrh	r3, [r3, #12]
 800da44:	b29b      	uxth	r3, r3
 800da46:	4618      	mov	r0, r3
 800da48:	f7fb f856 	bl	8008af8 <lwip_htons>
 800da4c:	4603      	mov	r3, r0
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 0303 	and.w	r3, r3, #3
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <tcp_receive+0x6c4>
 800da58:	2301      	movs	r3, #1
 800da5a:	e000      	b.n	800da5e <tcp_receive+0x6c6>
 800da5c:	2300      	movs	r3, #0
 800da5e:	4423      	add	r3, r4
 800da60:	b29a      	uxth	r2, r3
 800da62:	4b70      	ldr	r3, [pc, #448]	@ (800dc24 <tcp_receive+0x88c>)
 800da64:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800da6a:	4b6e      	ldr	r3, [pc, #440]	@ (800dc24 <tcp_receive+0x88c>)
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d274      	bcs.n	800db5c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800da72:	4b6b      	ldr	r3, [pc, #428]	@ (800dc20 <tcp_receive+0x888>)
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	899b      	ldrh	r3, [r3, #12]
 800da78:	b29b      	uxth	r3, r3
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fb f83c 	bl	8008af8 <lwip_htons>
 800da80:	4603      	mov	r3, r0
 800da82:	b2db      	uxtb	r3, r3
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d01e      	beq.n	800daca <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800da8c:	4b64      	ldr	r3, [pc, #400]	@ (800dc20 <tcp_receive+0x888>)
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	899b      	ldrh	r3, [r3, #12]
 800da92:	b29b      	uxth	r3, r3
 800da94:	b21b      	sxth	r3, r3
 800da96:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800da9a:	b21c      	sxth	r4, r3
 800da9c:	4b60      	ldr	r3, [pc, #384]	@ (800dc20 <tcp_receive+0x888>)
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	899b      	ldrh	r3, [r3, #12]
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fb f827 	bl	8008af8 <lwip_htons>
 800daaa:	4603      	mov	r3, r0
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fb f81f 	bl	8008af8 <lwip_htons>
 800daba:	4603      	mov	r3, r0
 800dabc:	b21b      	sxth	r3, r3
 800dabe:	4323      	orrs	r3, r4
 800dac0:	b21a      	sxth	r2, r3
 800dac2:	4b57      	ldr	r3, [pc, #348]	@ (800dc20 <tcp_receive+0x888>)
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	b292      	uxth	r2, r2
 800dac8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dace:	4b54      	ldr	r3, [pc, #336]	@ (800dc20 <tcp_receive+0x888>)
 800dad0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dad2:	4b53      	ldr	r3, [pc, #332]	@ (800dc20 <tcp_receive+0x888>)
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	899b      	ldrh	r3, [r3, #12]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fb f80c 	bl	8008af8 <lwip_htons>
 800dae0:	4603      	mov	r3, r0
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f003 0302 	and.w	r3, r3, #2
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d005      	beq.n	800daf8 <tcp_receive+0x760>
            inseg.len -= 1;
 800daec:	4b4c      	ldr	r3, [pc, #304]	@ (800dc20 <tcp_receive+0x888>)
 800daee:	891b      	ldrh	r3, [r3, #8]
 800daf0:	3b01      	subs	r3, #1
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	4b4a      	ldr	r3, [pc, #296]	@ (800dc20 <tcp_receive+0x888>)
 800daf6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800daf8:	4b49      	ldr	r3, [pc, #292]	@ (800dc20 <tcp_receive+0x888>)
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	4a48      	ldr	r2, [pc, #288]	@ (800dc20 <tcp_receive+0x888>)
 800dafe:	8912      	ldrh	r2, [r2, #8]
 800db00:	4611      	mov	r1, r2
 800db02:	4618      	mov	r0, r3
 800db04:	f7fc f9d0 	bl	8009ea8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800db08:	4b45      	ldr	r3, [pc, #276]	@ (800dc20 <tcp_receive+0x888>)
 800db0a:	891c      	ldrh	r4, [r3, #8]
 800db0c:	4b44      	ldr	r3, [pc, #272]	@ (800dc20 <tcp_receive+0x888>)
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	899b      	ldrh	r3, [r3, #12]
 800db12:	b29b      	uxth	r3, r3
 800db14:	4618      	mov	r0, r3
 800db16:	f7fa ffef 	bl	8008af8 <lwip_htons>
 800db1a:	4603      	mov	r3, r0
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	f003 0303 	and.w	r3, r3, #3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <tcp_receive+0x792>
 800db26:	2301      	movs	r3, #1
 800db28:	e000      	b.n	800db2c <tcp_receive+0x794>
 800db2a:	2300      	movs	r3, #0
 800db2c:	4423      	add	r3, r4
 800db2e:	b29a      	uxth	r2, r3
 800db30:	4b3c      	ldr	r3, [pc, #240]	@ (800dc24 <tcp_receive+0x88c>)
 800db32:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800db34:	4b3b      	ldr	r3, [pc, #236]	@ (800dc24 <tcp_receive+0x88c>)
 800db36:	881b      	ldrh	r3, [r3, #0]
 800db38:	461a      	mov	r2, r3
 800db3a:	4b38      	ldr	r3, [pc, #224]	@ (800dc1c <tcp_receive+0x884>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	441a      	add	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800db48:	440b      	add	r3, r1
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d006      	beq.n	800db5c <tcp_receive+0x7c4>
 800db4e:	4b36      	ldr	r3, [pc, #216]	@ (800dc28 <tcp_receive+0x890>)
 800db50:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800db54:	4935      	ldr	r1, [pc, #212]	@ (800dc2c <tcp_receive+0x894>)
 800db56:	4836      	ldr	r0, [pc, #216]	@ (800dc30 <tcp_receive+0x898>)
 800db58:	f005 fdc4 	bl	80136e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db60:	2b00      	cmp	r3, #0
 800db62:	f000 80e6 	beq.w	800dd32 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800db66:	4b2e      	ldr	r3, [pc, #184]	@ (800dc20 <tcp_receive+0x888>)
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	899b      	ldrh	r3, [r3, #12]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fa ffc2 	bl	8008af8 <lwip_htons>
 800db74:	4603      	mov	r3, r0
 800db76:	b2db      	uxtb	r3, r3
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d010      	beq.n	800dba2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800db80:	e00a      	b.n	800db98 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db86:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f7fd fd93 	bl	800b6be <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1f0      	bne.n	800db82 <tcp_receive+0x7ea>
 800dba0:	e0c7      	b.n	800dd32 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800dba8:	e051      	b.n	800dc4e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dbaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	899b      	ldrh	r3, [r3, #12]
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fa ffa0 	bl	8008af8 <lwip_htons>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d03c      	beq.n	800dc3e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800dbc4:	4b16      	ldr	r3, [pc, #88]	@ (800dc20 <tcp_receive+0x888>)
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	899b      	ldrh	r3, [r3, #12]
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7fa ff93 	bl	8008af8 <lwip_htons>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d12f      	bne.n	800dc3e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800dbde:	4b10      	ldr	r3, [pc, #64]	@ (800dc20 <tcp_receive+0x888>)
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	899b      	ldrh	r3, [r3, #12]
 800dbe4:	b29c      	uxth	r4, r3
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	f7fa ff86 	bl	8008af8 <lwip_htons>
 800dbec:	4603      	mov	r3, r0
 800dbee:	461a      	mov	r2, r3
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800dc20 <tcp_receive+0x888>)
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	4322      	orrs	r2, r4
 800dbf6:	b292      	uxth	r2, r2
 800dbf8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800dbfa:	4b09      	ldr	r3, [pc, #36]	@ (800dc20 <tcp_receive+0x888>)
 800dbfc:	891c      	ldrh	r4, [r3, #8]
 800dbfe:	4b08      	ldr	r3, [pc, #32]	@ (800dc20 <tcp_receive+0x888>)
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	899b      	ldrh	r3, [r3, #12]
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fa ff76 	bl	8008af8 <lwip_htons>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	f003 0303 	and.w	r3, r3, #3
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00d      	beq.n	800dc34 <tcp_receive+0x89c>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e00c      	b.n	800dc36 <tcp_receive+0x89e>
 800dc1c:	20008ac8 	.word	0x20008ac8
 800dc20:	20008aa8 	.word	0x20008aa8
 800dc24:	20008ad2 	.word	0x20008ad2
 800dc28:	08015890 	.word	0x08015890
 800dc2c:	08015c38 	.word	0x08015c38
 800dc30:	080158dc 	.word	0x080158dc
 800dc34:	2300      	movs	r3, #0
 800dc36:	4423      	add	r3, r4
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	4b98      	ldr	r3, [pc, #608]	@ (800de9c <tcp_receive+0xb04>)
 800dc3c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800dc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc40:	613b      	str	r3, [r7, #16]
              next = next->next;
 800dc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800dc48:	6938      	ldr	r0, [r7, #16]
 800dc4a:	f7fd fd38 	bl	800b6be <tcp_seg_free>
            while (next &&
 800dc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00e      	beq.n	800dc72 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800dc54:	4b91      	ldr	r3, [pc, #580]	@ (800de9c <tcp_receive+0xb04>)
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	4b91      	ldr	r3, [pc, #580]	@ (800dea0 <tcp_receive+0xb08>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	441a      	add	r2, r3
 800dc60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc68:	8909      	ldrh	r1, [r1, #8]
 800dc6a:	440b      	add	r3, r1
 800dc6c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	da9b      	bge.n	800dbaa <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800dc72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d059      	beq.n	800dd2c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800dc78:	4b88      	ldr	r3, [pc, #544]	@ (800de9c <tcp_receive+0xb04>)
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	4b88      	ldr	r3, [pc, #544]	@ (800dea0 <tcp_receive+0xb08>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	441a      	add	r2, r3
 800dc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	dd4d      	ble.n	800dd2c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800dc90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	4b81      	ldr	r3, [pc, #516]	@ (800dea0 <tcp_receive+0xb08>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	4b80      	ldr	r3, [pc, #512]	@ (800dea4 <tcp_receive+0xb0c>)
 800dca4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dca6:	4b7f      	ldr	r3, [pc, #508]	@ (800dea4 <tcp_receive+0xb0c>)
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	899b      	ldrh	r3, [r3, #12]
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fa ff22 	bl	8008af8 <lwip_htons>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	f003 0302 	and.w	r3, r3, #2
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <tcp_receive+0x934>
                inseg.len -= 1;
 800dcc0:	4b78      	ldr	r3, [pc, #480]	@ (800dea4 <tcp_receive+0xb0c>)
 800dcc2:	891b      	ldrh	r3, [r3, #8]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	4b76      	ldr	r3, [pc, #472]	@ (800dea4 <tcp_receive+0xb0c>)
 800dcca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800dccc:	4b75      	ldr	r3, [pc, #468]	@ (800dea4 <tcp_receive+0xb0c>)
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	4a74      	ldr	r2, [pc, #464]	@ (800dea4 <tcp_receive+0xb0c>)
 800dcd2:	8912      	ldrh	r2, [r2, #8]
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fc f8e6 	bl	8009ea8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dcdc:	4b71      	ldr	r3, [pc, #452]	@ (800dea4 <tcp_receive+0xb0c>)
 800dcde:	891c      	ldrh	r4, [r3, #8]
 800dce0:	4b70      	ldr	r3, [pc, #448]	@ (800dea4 <tcp_receive+0xb0c>)
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	899b      	ldrh	r3, [r3, #12]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fa ff05 	bl	8008af8 <lwip_htons>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	f003 0303 	and.w	r3, r3, #3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <tcp_receive+0x966>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e000      	b.n	800dd00 <tcp_receive+0x968>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	4423      	add	r3, r4
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	4b65      	ldr	r3, [pc, #404]	@ (800de9c <tcp_receive+0xb04>)
 800dd06:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dd08:	4b64      	ldr	r3, [pc, #400]	@ (800de9c <tcp_receive+0xb04>)
 800dd0a:	881b      	ldrh	r3, [r3, #0]
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4b64      	ldr	r3, [pc, #400]	@ (800dea0 <tcp_receive+0xb08>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	441a      	add	r2, r3
 800dd14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d006      	beq.n	800dd2c <tcp_receive+0x994>
 800dd1e:	4b62      	ldr	r3, [pc, #392]	@ (800dea8 <tcp_receive+0xb10>)
 800dd20:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800dd24:	4961      	ldr	r1, [pc, #388]	@ (800deac <tcp_receive+0xb14>)
 800dd26:	4862      	ldr	r0, [pc, #392]	@ (800deb0 <tcp_receive+0xb18>)
 800dd28:	f005 fcdc 	bl	80136e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd30:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dd32:	4b5a      	ldr	r3, [pc, #360]	@ (800de9c <tcp_receive+0xb04>)
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	461a      	mov	r2, r3
 800dd38:	4b59      	ldr	r3, [pc, #356]	@ (800dea0 <tcp_receive+0xb08>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	441a      	add	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dd46:	4b55      	ldr	r3, [pc, #340]	@ (800de9c <tcp_receive+0xb04>)
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d206      	bcs.n	800dd5c <tcp_receive+0x9c4>
 800dd4e:	4b56      	ldr	r3, [pc, #344]	@ (800dea8 <tcp_receive+0xb10>)
 800dd50:	f240 6207 	movw	r2, #1543	@ 0x607
 800dd54:	4957      	ldr	r1, [pc, #348]	@ (800deb4 <tcp_receive+0xb1c>)
 800dd56:	4856      	ldr	r0, [pc, #344]	@ (800deb0 <tcp_receive+0xb18>)
 800dd58:	f005 fcc4 	bl	80136e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dd60:	4b4e      	ldr	r3, [pc, #312]	@ (800de9c <tcp_receive+0xb04>)
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7fc ffc5 	bl	800acfc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800dd72:	4b4c      	ldr	r3, [pc, #304]	@ (800dea4 <tcp_receive+0xb0c>)
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	891b      	ldrh	r3, [r3, #8]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d006      	beq.n	800dd8a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800dd7c:	4b49      	ldr	r3, [pc, #292]	@ (800dea4 <tcp_receive+0xb0c>)
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	4a4d      	ldr	r2, [pc, #308]	@ (800deb8 <tcp_receive+0xb20>)
 800dd82:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dd84:	4b47      	ldr	r3, [pc, #284]	@ (800dea4 <tcp_receive+0xb0c>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd8a:	4b46      	ldr	r3, [pc, #280]	@ (800dea4 <tcp_receive+0xb0c>)
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	899b      	ldrh	r3, [r3, #12]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fa feb0 	bl	8008af8 <lwip_htons>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	f003 0301 	and.w	r3, r3, #1
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 80b8 	beq.w	800df16 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dda6:	4b45      	ldr	r3, [pc, #276]	@ (800debc <tcp_receive+0xb24>)
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	f043 0320 	orr.w	r3, r3, #32
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	4b42      	ldr	r3, [pc, #264]	@ (800debc <tcp_receive+0xb24>)
 800ddb2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ddb4:	e0af      	b.n	800df16 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	4a36      	ldr	r2, [pc, #216]	@ (800dea0 <tcp_receive+0xb08>)
 800ddc6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	891b      	ldrh	r3, [r3, #8]
 800ddcc:	461c      	mov	r4, r3
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	899b      	ldrh	r3, [r3, #12]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fa fe8e 	bl	8008af8 <lwip_htons>
 800dddc:	4603      	mov	r3, r0
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	f003 0303 	and.w	r3, r3, #3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <tcp_receive+0xa54>
 800dde8:	2301      	movs	r3, #1
 800ddea:	e000      	b.n	800ddee <tcp_receive+0xa56>
 800ddec:	2300      	movs	r3, #0
 800ddee:	191a      	adds	r2, r3, r4
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf4:	441a      	add	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddfe:	461c      	mov	r4, r3
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	891b      	ldrh	r3, [r3, #8]
 800de04:	461d      	mov	r5, r3
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	899b      	ldrh	r3, [r3, #12]
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fa fe72 	bl	8008af8 <lwip_htons>
 800de14:	4603      	mov	r3, r0
 800de16:	b2db      	uxtb	r3, r3
 800de18:	f003 0303 	and.w	r3, r3, #3
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <tcp_receive+0xa8c>
 800de20:	2301      	movs	r3, #1
 800de22:	e000      	b.n	800de26 <tcp_receive+0xa8e>
 800de24:	2300      	movs	r3, #0
 800de26:	442b      	add	r3, r5
 800de28:	429c      	cmp	r4, r3
 800de2a:	d206      	bcs.n	800de3a <tcp_receive+0xaa2>
 800de2c:	4b1e      	ldr	r3, [pc, #120]	@ (800dea8 <tcp_receive+0xb10>)
 800de2e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800de32:	4923      	ldr	r1, [pc, #140]	@ (800dec0 <tcp_receive+0xb28>)
 800de34:	481e      	ldr	r0, [pc, #120]	@ (800deb0 <tcp_receive+0xb18>)
 800de36:	f005 fc55 	bl	80136e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	891b      	ldrh	r3, [r3, #8]
 800de3e:	461c      	mov	r4, r3
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	899b      	ldrh	r3, [r3, #12]
 800de46:	b29b      	uxth	r3, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fa fe55 	bl	8008af8 <lwip_htons>
 800de4e:	4603      	mov	r3, r0
 800de50:	b2db      	uxtb	r3, r3
 800de52:	f003 0303 	and.w	r3, r3, #3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <tcp_receive+0xac6>
 800de5a:	2301      	movs	r3, #1
 800de5c:	e000      	b.n	800de60 <tcp_receive+0xac8>
 800de5e:	2300      	movs	r3, #0
 800de60:	1919      	adds	r1, r3, r4
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800de66:	b28b      	uxth	r3, r1
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7fc ff43 	bl	800acfc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	891b      	ldrh	r3, [r3, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d028      	beq.n	800ded2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800de80:	4b0d      	ldr	r3, [pc, #52]	@ (800deb8 <tcp_receive+0xb20>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d01d      	beq.n	800dec4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800de88:	4b0b      	ldr	r3, [pc, #44]	@ (800deb8 <tcp_receive+0xb20>)
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4619      	mov	r1, r3
 800de92:	4610      	mov	r0, r2
 800de94:	f7fc fa50 	bl	800a338 <pbuf_cat>
 800de98:	e018      	b.n	800decc <tcp_receive+0xb34>
 800de9a:	bf00      	nop
 800de9c:	20008ad2 	.word	0x20008ad2
 800dea0:	20008ac8 	.word	0x20008ac8
 800dea4:	20008aa8 	.word	0x20008aa8
 800dea8:	08015890 	.word	0x08015890
 800deac:	08015c70 	.word	0x08015c70
 800deb0:	080158dc 	.word	0x080158dc
 800deb4:	08015cac 	.word	0x08015cac
 800deb8:	20008ad8 	.word	0x20008ad8
 800debc:	20008ad5 	.word	0x20008ad5
 800dec0:	08015ccc 	.word	0x08015ccc
            } else {
              recv_data = cseg->p;
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	4a70      	ldr	r2, [pc, #448]	@ (800e08c <tcp_receive+0xcf4>)
 800deca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2200      	movs	r2, #0
 800ded0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	899b      	ldrh	r3, [r3, #12]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fa fe0c 	bl	8008af8 <lwip_htons>
 800dee0:	4603      	mov	r3, r0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00d      	beq.n	800df08 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800deec:	4b68      	ldr	r3, [pc, #416]	@ (800e090 <tcp_receive+0xcf8>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	f043 0320 	orr.w	r3, r3, #32
 800def4:	b2da      	uxtb	r2, r3
 800def6:	4b66      	ldr	r3, [pc, #408]	@ (800e090 <tcp_receive+0xcf8>)
 800def8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7d1b      	ldrb	r3, [r3, #20]
 800defe:	2b04      	cmp	r3, #4
 800df00:	d102      	bne.n	800df08 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2207      	movs	r2, #7
 800df06:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800df10:	68b8      	ldr	r0, [r7, #8]
 800df12:	f7fd fbd4 	bl	800b6be <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d008      	beq.n	800df30 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	685a      	ldr	r2, [r3, #4]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800df2a:	429a      	cmp	r2, r3
 800df2c:	f43f af43 	beq.w	800ddb6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	8b5b      	ldrh	r3, [r3, #26]
 800df34:	f003 0301 	and.w	r3, r3, #1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00e      	beq.n	800df5a <tcp_receive+0xbc2>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	8b5b      	ldrh	r3, [r3, #26]
 800df40:	f023 0301 	bic.w	r3, r3, #1
 800df44:	b29a      	uxth	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	835a      	strh	r2, [r3, #26]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	8b5b      	ldrh	r3, [r3, #26]
 800df4e:	f043 0302 	orr.w	r3, r3, #2
 800df52:	b29a      	uxth	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800df58:	e187      	b.n	800e26a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	8b5b      	ldrh	r3, [r3, #26]
 800df5e:	f043 0301 	orr.w	r3, r3, #1
 800df62:	b29a      	uxth	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800df68:	e17f      	b.n	800e26a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d106      	bne.n	800df80 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800df72:	4848      	ldr	r0, [pc, #288]	@ (800e094 <tcp_receive+0xcfc>)
 800df74:	f7fd fbbc 	bl	800b6f0 <tcp_seg_copy>
 800df78:	4602      	mov	r2, r0
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	675a      	str	r2, [r3, #116]	@ 0x74
 800df7e:	e16c      	b.n	800e25a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800df80:	2300      	movs	r3, #0
 800df82:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df88:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df8a:	e156      	b.n	800e23a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	4b41      	ldr	r3, [pc, #260]	@ (800e098 <tcp_receive+0xd00>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	429a      	cmp	r2, r3
 800df98:	d11d      	bne.n	800dfd6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800df9a:	4b3e      	ldr	r3, [pc, #248]	@ (800e094 <tcp_receive+0xcfc>)
 800df9c:	891a      	ldrh	r2, [r3, #8]
 800df9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa0:	891b      	ldrh	r3, [r3, #8]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	f240 814e 	bls.w	800e244 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dfa8:	483a      	ldr	r0, [pc, #232]	@ (800e094 <tcp_receive+0xcfc>)
 800dfaa:	f7fd fba1 	bl	800b6f0 <tcp_seg_copy>
 800dfae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 8148 	beq.w	800e248 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800dfb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d003      	beq.n	800dfc6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800dfbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	e002      	b.n	800dfcc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800dfcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dfce:	6978      	ldr	r0, [r7, #20]
 800dfd0:	f7ff f8de 	bl	800d190 <tcp_oos_insert_segment>
                }
                break;
 800dfd4:	e138      	b.n	800e248 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800dfd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d117      	bne.n	800e00c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dfdc:	4b2e      	ldr	r3, [pc, #184]	@ (800e098 <tcp_receive+0xd00>)
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	da57      	bge.n	800e09c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dfec:	4829      	ldr	r0, [pc, #164]	@ (800e094 <tcp_receive+0xcfc>)
 800dfee:	f7fd fb7f 	bl	800b6f0 <tcp_seg_copy>
 800dff2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f000 8128 	beq.w	800e24c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	69ba      	ldr	r2, [r7, #24]
 800e000:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e002:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e004:	69b8      	ldr	r0, [r7, #24]
 800e006:	f7ff f8c3 	bl	800d190 <tcp_oos_insert_segment>
                  }
                  break;
 800e00a:	e11f      	b.n	800e24c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e00c:	4b22      	ldr	r3, [pc, #136]	@ (800e098 <tcp_receive+0xd00>)
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	3b01      	subs	r3, #1
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	db3e      	blt.n	800e09c <tcp_receive+0xd04>
 800e01e:	4b1e      	ldr	r3, [pc, #120]	@ (800e098 <tcp_receive+0xd00>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	3301      	adds	r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	dc35      	bgt.n	800e09c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e030:	4818      	ldr	r0, [pc, #96]	@ (800e094 <tcp_receive+0xcfc>)
 800e032:	f7fd fb5d 	bl	800b6f0 <tcp_seg_copy>
 800e036:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 8108 	beq.w	800e250 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e048:	8912      	ldrh	r2, [r2, #8]
 800e04a:	441a      	add	r2, r3
 800e04c:	4b12      	ldr	r3, [pc, #72]	@ (800e098 <tcp_receive+0xd00>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	dd12      	ble.n	800e07c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e056:	4b10      	ldr	r3, [pc, #64]	@ (800e098 <tcp_receive+0xd00>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	b29b      	uxth	r3, r3
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	b29a      	uxth	r2, r3
 800e068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06e:	685a      	ldr	r2, [r3, #4]
 800e070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e072:	891b      	ldrh	r3, [r3, #8]
 800e074:	4619      	mov	r1, r3
 800e076:	4610      	mov	r0, r2
 800e078:	f7fb ff16 	bl	8009ea8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e07e:	69fa      	ldr	r2, [r7, #28]
 800e080:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e082:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e084:	69f8      	ldr	r0, [r7, #28]
 800e086:	f7ff f883 	bl	800d190 <tcp_oos_insert_segment>
                  }
                  break;
 800e08a:	e0e1      	b.n	800e250 <tcp_receive+0xeb8>
 800e08c:	20008ad8 	.word	0x20008ad8
 800e090:	20008ad5 	.word	0x20008ad5
 800e094:	20008aa8 	.word	0x20008aa8
 800e098:	20008ac8 	.word	0x20008ac8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e09e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 80c5 	bne.w	800e234 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e0aa:	4b7f      	ldr	r3, [pc, #508]	@ (800e2a8 <tcp_receive+0xf10>)
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f340 80bc 	ble.w	800e234 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fa fd17 	bl	8008af8 <lwip_htons>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f040 80be 	bne.w	800e254 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e0d8:	4874      	ldr	r0, [pc, #464]	@ (800e2ac <tcp_receive+0xf14>)
 800e0da:	f7fd fb09 	bl	800b6f0 <tcp_seg_copy>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 80b5 	beq.w	800e258 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0f6:	8912      	ldrh	r2, [r2, #8]
 800e0f8:	441a      	add	r2, r3
 800e0fa:	4b6b      	ldr	r3, [pc, #428]	@ (800e2a8 <tcp_receive+0xf10>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	1ad3      	subs	r3, r2, r3
 800e100:	2b00      	cmp	r3, #0
 800e102:	dd12      	ble.n	800e12a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e104:	4b68      	ldr	r3, [pc, #416]	@ (800e2a8 <tcp_receive+0xf10>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	b29a      	uxth	r2, r3
 800e10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	b29b      	uxth	r3, r3
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	b29a      	uxth	r2, r3
 800e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e118:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11c:	685a      	ldr	r2, [r3, #4]
 800e11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e120:	891b      	ldrh	r3, [r3, #8]
 800e122:	4619      	mov	r1, r3
 800e124:	4610      	mov	r0, r2
 800e126:	f7fb febf 	bl	8009ea8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e12a:	4b61      	ldr	r3, [pc, #388]	@ (800e2b0 <tcp_receive+0xf18>)
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	4b5d      	ldr	r3, [pc, #372]	@ (800e2a8 <tcp_receive+0xf10>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	441a      	add	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13a:	6879      	ldr	r1, [r7, #4]
 800e13c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e13e:	440b      	add	r3, r1
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	2b00      	cmp	r3, #0
 800e144:	f340 8088 	ble.w	800e258 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	899b      	ldrh	r3, [r3, #12]
 800e150:	b29b      	uxth	r3, r3
 800e152:	4618      	mov	r0, r3
 800e154:	f7fa fcd0 	bl	8008af8 <lwip_htons>
 800e158:	4603      	mov	r3, r0
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	f003 0301 	and.w	r3, r3, #1
 800e160:	2b00      	cmp	r3, #0
 800e162:	d021      	beq.n	800e1a8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	899b      	ldrh	r3, [r3, #12]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	b21b      	sxth	r3, r3
 800e170:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e174:	b21c      	sxth	r4, r3
 800e176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	899b      	ldrh	r3, [r3, #12]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	4618      	mov	r0, r3
 800e182:	f7fa fcb9 	bl	8008af8 <lwip_htons>
 800e186:	4603      	mov	r3, r0
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e18e:	b29b      	uxth	r3, r3
 800e190:	4618      	mov	r0, r3
 800e192:	f7fa fcb1 	bl	8008af8 <lwip_htons>
 800e196:	4603      	mov	r3, r0
 800e198:	b21b      	sxth	r3, r3
 800e19a:	4323      	orrs	r3, r4
 800e19c:	b21a      	sxth	r2, r3
 800e19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	b292      	uxth	r2, r2
 800e1a6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1b2:	4413      	add	r3, r2
 800e1b4:	b299      	uxth	r1, r3
 800e1b6:	4b3c      	ldr	r3, [pc, #240]	@ (800e2a8 <tcp_receive+0xf10>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	1a8a      	subs	r2, r1, r2
 800e1c2:	b292      	uxth	r2, r2
 800e1c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	891b      	ldrh	r3, [r3, #8]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	f7fb fe67 	bl	8009ea8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	891c      	ldrh	r4, [r3, #8]
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	899b      	ldrh	r3, [r3, #12]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fa fc84 	bl	8008af8 <lwip_htons>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	f003 0303 	and.w	r3, r3, #3
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <tcp_receive+0xe68>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e000      	b.n	800e202 <tcp_receive+0xe6a>
 800e200:	2300      	movs	r3, #0
 800e202:	4423      	add	r3, r4
 800e204:	b29a      	uxth	r2, r3
 800e206:	4b2a      	ldr	r3, [pc, #168]	@ (800e2b0 <tcp_receive+0xf18>)
 800e208:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e20a:	4b29      	ldr	r3, [pc, #164]	@ (800e2b0 <tcp_receive+0xf18>)
 800e20c:	881b      	ldrh	r3, [r3, #0]
 800e20e:	461a      	mov	r2, r3
 800e210:	4b25      	ldr	r3, [pc, #148]	@ (800e2a8 <tcp_receive+0xf10>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	441a      	add	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e21a:	6879      	ldr	r1, [r7, #4]
 800e21c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e21e:	440b      	add	r3, r1
 800e220:	429a      	cmp	r2, r3
 800e222:	d019      	beq.n	800e258 <tcp_receive+0xec0>
 800e224:	4b23      	ldr	r3, [pc, #140]	@ (800e2b4 <tcp_receive+0xf1c>)
 800e226:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800e22a:	4923      	ldr	r1, [pc, #140]	@ (800e2b8 <tcp_receive+0xf20>)
 800e22c:	4823      	ldr	r0, [pc, #140]	@ (800e2bc <tcp_receive+0xf24>)
 800e22e:	f005 fa59 	bl	80136e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e232:	e011      	b.n	800e258 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f47f aea5 	bne.w	800df8c <tcp_receive+0xbf4>
 800e242:	e00a      	b.n	800e25a <tcp_receive+0xec2>
                break;
 800e244:	bf00      	nop
 800e246:	e008      	b.n	800e25a <tcp_receive+0xec2>
                break;
 800e248:	bf00      	nop
 800e24a:	e006      	b.n	800e25a <tcp_receive+0xec2>
                  break;
 800e24c:	bf00      	nop
 800e24e:	e004      	b.n	800e25a <tcp_receive+0xec2>
                  break;
 800e250:	bf00      	nop
 800e252:	e002      	b.n	800e25a <tcp_receive+0xec2>
                  break;
 800e254:	bf00      	nop
 800e256:	e000      	b.n	800e25a <tcp_receive+0xec2>
                break;
 800e258:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f001 fa30 	bl	800f6c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e260:	e003      	b.n	800e26a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f001 fa2c 	bl	800f6c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e268:	e01a      	b.n	800e2a0 <tcp_receive+0xf08>
 800e26a:	e019      	b.n	800e2a0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e26c:	4b0e      	ldr	r3, [pc, #56]	@ (800e2a8 <tcp_receive+0xf10>)
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	db0a      	blt.n	800e290 <tcp_receive+0xef8>
 800e27a:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a8 <tcp_receive+0xf10>)
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e286:	440b      	add	r3, r1
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	3301      	adds	r3, #1
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	dd07      	ble.n	800e2a0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	8b5b      	ldrh	r3, [r3, #26]
 800e294:	f043 0302 	orr.w	r3, r3, #2
 800e298:	b29a      	uxth	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e29e:	e7ff      	b.n	800e2a0 <tcp_receive+0xf08>
 800e2a0:	bf00      	nop
 800e2a2:	3750      	adds	r7, #80	@ 0x50
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e2a8:	20008ac8 	.word	0x20008ac8
 800e2ac:	20008aa8 	.word	0x20008aa8
 800e2b0:	20008ad2 	.word	0x20008ad2
 800e2b4:	08015890 	.word	0x08015890
 800e2b8:	08015c38 	.word	0x08015c38
 800e2bc:	080158dc 	.word	0x080158dc

0800e2c0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e2c6:	4b15      	ldr	r3, [pc, #84]	@ (800e31c <tcp_get_next_optbyte+0x5c>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	b291      	uxth	r1, r2
 800e2ce:	4a13      	ldr	r2, [pc, #76]	@ (800e31c <tcp_get_next_optbyte+0x5c>)
 800e2d0:	8011      	strh	r1, [r2, #0]
 800e2d2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e2d4:	4b12      	ldr	r3, [pc, #72]	@ (800e320 <tcp_get_next_optbyte+0x60>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d004      	beq.n	800e2e6 <tcp_get_next_optbyte+0x26>
 800e2dc:	4b11      	ldr	r3, [pc, #68]	@ (800e324 <tcp_get_next_optbyte+0x64>)
 800e2de:	881b      	ldrh	r3, [r3, #0]
 800e2e0:	88fa      	ldrh	r2, [r7, #6]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d208      	bcs.n	800e2f8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e2e6:	4b10      	ldr	r3, [pc, #64]	@ (800e328 <tcp_get_next_optbyte+0x68>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3314      	adds	r3, #20
 800e2ec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e2ee:	88fb      	ldrh	r3, [r7, #6]
 800e2f0:	683a      	ldr	r2, [r7, #0]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	e00b      	b.n	800e310 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e2f8:	88fb      	ldrh	r3, [r7, #6]
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	4b09      	ldr	r3, [pc, #36]	@ (800e324 <tcp_get_next_optbyte+0x64>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	b2db      	uxtb	r3, r3
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e306:	4b06      	ldr	r3, [pc, #24]	@ (800e320 <tcp_get_next_optbyte+0x60>)
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	797b      	ldrb	r3, [r7, #5]
 800e30c:	4413      	add	r3, r2
 800e30e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e310:	4618      	mov	r0, r3
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	20008ac4 	.word	0x20008ac4
 800e320:	20008ac0 	.word	0x20008ac0
 800e324:	20008abe 	.word	0x20008abe
 800e328:	20008ab8 	.word	0x20008ab8

0800e32c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <tcp_parseopt+0x1c>
 800e33a:	4b32      	ldr	r3, [pc, #200]	@ (800e404 <tcp_parseopt+0xd8>)
 800e33c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800e340:	4931      	ldr	r1, [pc, #196]	@ (800e408 <tcp_parseopt+0xdc>)
 800e342:	4832      	ldr	r0, [pc, #200]	@ (800e40c <tcp_parseopt+0xe0>)
 800e344:	f005 f9ce 	bl	80136e4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e348:	4b31      	ldr	r3, [pc, #196]	@ (800e410 <tcp_parseopt+0xe4>)
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d056      	beq.n	800e3fe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e350:	4b30      	ldr	r3, [pc, #192]	@ (800e414 <tcp_parseopt+0xe8>)
 800e352:	2200      	movs	r2, #0
 800e354:	801a      	strh	r2, [r3, #0]
 800e356:	e046      	b.n	800e3e6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800e358:	f7ff ffb2 	bl	800e2c0 <tcp_get_next_optbyte>
 800e35c:	4603      	mov	r3, r0
 800e35e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e360:	7bfb      	ldrb	r3, [r7, #15]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d006      	beq.n	800e374 <tcp_parseopt+0x48>
 800e366:	2b02      	cmp	r3, #2
 800e368:	dc2a      	bgt.n	800e3c0 <tcp_parseopt+0x94>
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d042      	beq.n	800e3f4 <tcp_parseopt+0xc8>
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d038      	beq.n	800e3e4 <tcp_parseopt+0xb8>
 800e372:	e025      	b.n	800e3c0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e374:	f7ff ffa4 	bl	800e2c0 <tcp_get_next_optbyte>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b04      	cmp	r3, #4
 800e37c:	d13c      	bne.n	800e3f8 <tcp_parseopt+0xcc>
 800e37e:	4b25      	ldr	r3, [pc, #148]	@ (800e414 <tcp_parseopt+0xe8>)
 800e380:	881b      	ldrh	r3, [r3, #0]
 800e382:	3301      	adds	r3, #1
 800e384:	4a22      	ldr	r2, [pc, #136]	@ (800e410 <tcp_parseopt+0xe4>)
 800e386:	8812      	ldrh	r2, [r2, #0]
 800e388:	4293      	cmp	r3, r2
 800e38a:	da35      	bge.n	800e3f8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e38c:	f7ff ff98 	bl	800e2c0 <tcp_get_next_optbyte>
 800e390:	4603      	mov	r3, r0
 800e392:	021b      	lsls	r3, r3, #8
 800e394:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e396:	f7ff ff93 	bl	800e2c0 <tcp_get_next_optbyte>
 800e39a:	4603      	mov	r3, r0
 800e39c:	461a      	mov	r2, r3
 800e39e:	89bb      	ldrh	r3, [r7, #12]
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e3a4:	89bb      	ldrh	r3, [r7, #12]
 800e3a6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e3aa:	d804      	bhi.n	800e3b6 <tcp_parseopt+0x8a>
 800e3ac:	89bb      	ldrh	r3, [r7, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <tcp_parseopt+0x8a>
 800e3b2:	89ba      	ldrh	r2, [r7, #12]
 800e3b4:	e001      	b.n	800e3ba <tcp_parseopt+0x8e>
 800e3b6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800e3be:	e012      	b.n	800e3e6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e3c0:	f7ff ff7e 	bl	800e2c0 <tcp_get_next_optbyte>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e3c8:	7afb      	ldrb	r3, [r7, #11]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d916      	bls.n	800e3fc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e3ce:	7afb      	ldrb	r3, [r7, #11]
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	4b10      	ldr	r3, [pc, #64]	@ (800e414 <tcp_parseopt+0xe8>)
 800e3d4:	881b      	ldrh	r3, [r3, #0]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	3b02      	subs	r3, #2
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	4b0d      	ldr	r3, [pc, #52]	@ (800e414 <tcp_parseopt+0xe8>)
 800e3e0:	801a      	strh	r2, [r3, #0]
 800e3e2:	e000      	b.n	800e3e6 <tcp_parseopt+0xba>
          break;
 800e3e4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e414 <tcp_parseopt+0xe8>)
 800e3e8:	881a      	ldrh	r2, [r3, #0]
 800e3ea:	4b09      	ldr	r3, [pc, #36]	@ (800e410 <tcp_parseopt+0xe4>)
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d3b2      	bcc.n	800e358 <tcp_parseopt+0x2c>
 800e3f2:	e004      	b.n	800e3fe <tcp_parseopt+0xd2>
          return;
 800e3f4:	bf00      	nop
 800e3f6:	e002      	b.n	800e3fe <tcp_parseopt+0xd2>
            return;
 800e3f8:	bf00      	nop
 800e3fa:	e000      	b.n	800e3fe <tcp_parseopt+0xd2>
            return;
 800e3fc:	bf00      	nop
      }
    }
  }
}
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	08015890 	.word	0x08015890
 800e408:	08015cf4 	.word	0x08015cf4
 800e40c:	080158dc 	.word	0x080158dc
 800e410:	20008abc 	.word	0x20008abc
 800e414:	20008ac4 	.word	0x20008ac4

0800e418 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e418:	b480      	push	{r7}
 800e41a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e41c:	4b05      	ldr	r3, [pc, #20]	@ (800e434 <tcp_trigger_input_pcb_close+0x1c>)
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	f043 0310 	orr.w	r3, r3, #16
 800e424:	b2da      	uxtb	r2, r3
 800e426:	4b03      	ldr	r3, [pc, #12]	@ (800e434 <tcp_trigger_input_pcb_close+0x1c>)
 800e428:	701a      	strb	r2, [r3, #0]
}
 800e42a:	bf00      	nop
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	20008ad5 	.word	0x20008ad5

0800e438 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00a      	beq.n	800e460 <tcp_route+0x28>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	7a1b      	ldrb	r3, [r3, #8]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d006      	beq.n	800e460 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	7a1b      	ldrb	r3, [r3, #8]
 800e456:	4618      	mov	r0, r3
 800e458:	f7fb fb4c 	bl	8009af4 <netif_get_by_index>
 800e45c:	4603      	mov	r3, r0
 800e45e:	e003      	b.n	800e468 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f003 f96b 	bl	801173c <ip4_route>
 800e466:	4603      	mov	r3, r0
  }
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b087      	sub	sp, #28
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	4613      	mov	r3, r2
 800e47e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d105      	bne.n	800e492 <tcp_create_segment+0x22>
 800e486:	4b43      	ldr	r3, [pc, #268]	@ (800e594 <tcp_create_segment+0x124>)
 800e488:	22a3      	movs	r2, #163	@ 0xa3
 800e48a:	4943      	ldr	r1, [pc, #268]	@ (800e598 <tcp_create_segment+0x128>)
 800e48c:	4843      	ldr	r0, [pc, #268]	@ (800e59c <tcp_create_segment+0x12c>)
 800e48e:	f005 f929 	bl	80136e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d105      	bne.n	800e4a4 <tcp_create_segment+0x34>
 800e498:	4b3e      	ldr	r3, [pc, #248]	@ (800e594 <tcp_create_segment+0x124>)
 800e49a:	22a4      	movs	r2, #164	@ 0xa4
 800e49c:	4940      	ldr	r1, [pc, #256]	@ (800e5a0 <tcp_create_segment+0x130>)
 800e49e:	483f      	ldr	r0, [pc, #252]	@ (800e59c <tcp_create_segment+0x12c>)
 800e4a0:	f005 f920 	bl	80136e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e4a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e4b2:	2003      	movs	r0, #3
 800e4b4:	f7fa ff98 	bl	80093e8 <memp_malloc>
 800e4b8:	6138      	str	r0, [r7, #16]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d104      	bne.n	800e4ca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e4c0:	68b8      	ldr	r0, [r7, #8]
 800e4c2:	f7fb fe77 	bl	800a1b4 <pbuf_free>
    return NULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	e060      	b.n	800e58c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e4d0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	891a      	ldrh	r2, [r3, #8]
 800e4e2:	7dfb      	ldrb	r3, [r7, #23]
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d205      	bcs.n	800e4f6 <tcp_create_segment+0x86>
 800e4ea:	4b2a      	ldr	r3, [pc, #168]	@ (800e594 <tcp_create_segment+0x124>)
 800e4ec:	22b0      	movs	r2, #176	@ 0xb0
 800e4ee:	492d      	ldr	r1, [pc, #180]	@ (800e5a4 <tcp_create_segment+0x134>)
 800e4f0:	482a      	ldr	r0, [pc, #168]	@ (800e59c <tcp_create_segment+0x12c>)
 800e4f2:	f005 f8f7 	bl	80136e4 <iprintf>
  seg->len = p->tot_len - optlen;
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	891a      	ldrh	r2, [r3, #8]
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	b29a      	uxth	r2, r3
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e506:	2114      	movs	r1, #20
 800e508:	68b8      	ldr	r0, [r7, #8]
 800e50a:	f7fb fdbd 	bl	800a088 <pbuf_add_header>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d004      	beq.n	800e51e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e514:	6938      	ldr	r0, [r7, #16]
 800e516:	f7fd f8d2 	bl	800b6be <tcp_seg_free>
    return NULL;
 800e51a:	2300      	movs	r3, #0
 800e51c:	e036      	b.n	800e58c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	685a      	ldr	r2, [r3, #4]
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	8ada      	ldrh	r2, [r3, #22]
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	68dc      	ldr	r4, [r3, #12]
 800e530:	4610      	mov	r0, r2
 800e532:	f7fa fae1 	bl	8008af8 <lwip_htons>
 800e536:	4603      	mov	r3, r0
 800e538:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	8b1a      	ldrh	r2, [r3, #24]
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	68dc      	ldr	r4, [r3, #12]
 800e542:	4610      	mov	r0, r2
 800e544:	f7fa fad8 	bl	8008af8 <lwip_htons>
 800e548:	4603      	mov	r3, r0
 800e54a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	68dc      	ldr	r4, [r3, #12]
 800e550:	6838      	ldr	r0, [r7, #0]
 800e552:	f7fa fae6 	bl	8008b22 <lwip_htonl>
 800e556:	4603      	mov	r3, r0
 800e558:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e55a:	7dfb      	ldrb	r3, [r7, #23]
 800e55c:	089b      	lsrs	r3, r3, #2
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	3305      	adds	r3, #5
 800e562:	b29b      	uxth	r3, r3
 800e564:	031b      	lsls	r3, r3, #12
 800e566:	b29a      	uxth	r2, r3
 800e568:	79fb      	ldrb	r3, [r7, #7]
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	4313      	orrs	r3, r2
 800e56e:	b29a      	uxth	r2, r3
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	68dc      	ldr	r4, [r3, #12]
 800e574:	4610      	mov	r0, r2
 800e576:	f7fa fabf 	bl	8008af8 <lwip_htons>
 800e57a:	4603      	mov	r3, r0
 800e57c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	749a      	strb	r2, [r3, #18]
 800e586:	2200      	movs	r2, #0
 800e588:	74da      	strb	r2, [r3, #19]
  return seg;
 800e58a:	693b      	ldr	r3, [r7, #16]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	371c      	adds	r7, #28
 800e590:	46bd      	mov	sp, r7
 800e592:	bd90      	pop	{r4, r7, pc}
 800e594:	08015d10 	.word	0x08015d10
 800e598:	08015d44 	.word	0x08015d44
 800e59c:	08015d64 	.word	0x08015d64
 800e5a0:	08015d8c 	.word	0x08015d8c
 800e5a4:	08015db0 	.word	0x08015db0

0800e5a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e5a8:	b590      	push	{r4, r7, lr}
 800e5aa:	b08b      	sub	sp, #44	@ 0x2c
 800e5ac:	af02      	add	r7, sp, #8
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	61fb      	str	r3, [r7, #28]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d106      	bne.n	800e5d4 <tcp_split_unsent_seg+0x2c>
 800e5c6:	4b95      	ldr	r3, [pc, #596]	@ (800e81c <tcp_split_unsent_seg+0x274>)
 800e5c8:	f240 324b 	movw	r2, #843	@ 0x34b
 800e5cc:	4994      	ldr	r1, [pc, #592]	@ (800e820 <tcp_split_unsent_seg+0x278>)
 800e5ce:	4895      	ldr	r0, [pc, #596]	@ (800e824 <tcp_split_unsent_seg+0x27c>)
 800e5d0:	f005 f888 	bl	80136e4 <iprintf>

  useg = pcb->unsent;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e4:	e116      	b.n	800e814 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e5e6:	887b      	ldrh	r3, [r7, #2]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d109      	bne.n	800e600 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e5ec:	4b8b      	ldr	r3, [pc, #556]	@ (800e81c <tcp_split_unsent_seg+0x274>)
 800e5ee:	f240 3253 	movw	r2, #851	@ 0x353
 800e5f2:	498d      	ldr	r1, [pc, #564]	@ (800e828 <tcp_split_unsent_seg+0x280>)
 800e5f4:	488b      	ldr	r0, [pc, #556]	@ (800e824 <tcp_split_unsent_seg+0x27c>)
 800e5f6:	f005 f875 	bl	80136e4 <iprintf>
    return ERR_VAL;
 800e5fa:	f06f 0305 	mvn.w	r3, #5
 800e5fe:	e109      	b.n	800e814 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	891b      	ldrh	r3, [r3, #8]
 800e604:	887a      	ldrh	r2, [r7, #2]
 800e606:	429a      	cmp	r2, r3
 800e608:	d301      	bcc.n	800e60e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e60a:	2300      	movs	r3, #0
 800e60c:	e102      	b.n	800e814 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e612:	887a      	ldrh	r2, [r7, #2]
 800e614:	429a      	cmp	r2, r3
 800e616:	d906      	bls.n	800e626 <tcp_split_unsent_seg+0x7e>
 800e618:	4b80      	ldr	r3, [pc, #512]	@ (800e81c <tcp_split_unsent_seg+0x274>)
 800e61a:	f240 325b 	movw	r2, #859	@ 0x35b
 800e61e:	4983      	ldr	r1, [pc, #524]	@ (800e82c <tcp_split_unsent_seg+0x284>)
 800e620:	4880      	ldr	r0, [pc, #512]	@ (800e824 <tcp_split_unsent_seg+0x27c>)
 800e622:	f005 f85f 	bl	80136e4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	891b      	ldrh	r3, [r3, #8]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d106      	bne.n	800e63c <tcp_split_unsent_seg+0x94>
 800e62e:	4b7b      	ldr	r3, [pc, #492]	@ (800e81c <tcp_split_unsent_seg+0x274>)
 800e630:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e634:	497e      	ldr	r1, [pc, #504]	@ (800e830 <tcp_split_unsent_seg+0x288>)
 800e636:	487b      	ldr	r0, [pc, #492]	@ (800e824 <tcp_split_unsent_seg+0x27c>)
 800e638:	f005 f854 	bl	80136e4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	7a9b      	ldrb	r3, [r3, #10]
 800e640:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e642:	7bfb      	ldrb	r3, [r7, #15]
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	b2db      	uxtb	r3, r3
 800e648:	f003 0304 	and.w	r3, r3, #4
 800e64c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	891a      	ldrh	r2, [r3, #8]
 800e652:	887b      	ldrh	r3, [r7, #2]
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e658:	7bbb      	ldrb	r3, [r7, #14]
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	89bb      	ldrh	r3, [r7, #12]
 800e65e:	4413      	add	r3, r2
 800e660:	b29b      	uxth	r3, r3
 800e662:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e666:	4619      	mov	r1, r3
 800e668:	2036      	movs	r0, #54	@ 0x36
 800e66a:	f7fb fabf 	bl	8009bec <pbuf_alloc>
 800e66e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	f000 80b7 	beq.w	800e7e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	891a      	ldrh	r2, [r3, #8]
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	891b      	ldrh	r3, [r3, #8]
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	b29a      	uxth	r2, r3
 800e686:	887b      	ldrh	r3, [r7, #2]
 800e688:	4413      	add	r3, r2
 800e68a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	6858      	ldr	r0, [r3, #4]
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	7bbb      	ldrb	r3, [r7, #14]
 800e696:	18d1      	adds	r1, r2, r3
 800e698:	897b      	ldrh	r3, [r7, #10]
 800e69a:	89ba      	ldrh	r2, [r7, #12]
 800e69c:	f7fb ff84 	bl	800a5a8 <pbuf_copy_partial>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	89bb      	ldrh	r3, [r7, #12]
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	f040 809f 	bne.w	800e7ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	899b      	ldrh	r3, [r3, #12]
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fa fa1f 	bl	8008af8 <lwip_htons>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e6c2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e6c8:	7efb      	ldrb	r3, [r7, #27]
 800e6ca:	f003 0308 	and.w	r3, r3, #8
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d007      	beq.n	800e6e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e6d2:	7efb      	ldrb	r3, [r7, #27]
 800e6d4:	f023 0308 	bic.w	r3, r3, #8
 800e6d8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e6da:	7ebb      	ldrb	r3, [r7, #26]
 800e6dc:	f043 0308 	orr.w	r3, r3, #8
 800e6e0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e6e2:	7efb      	ldrb	r3, [r7, #27]
 800e6e4:	f003 0301 	and.w	r3, r3, #1
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d007      	beq.n	800e6fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e6ec:	7efb      	ldrb	r3, [r7, #27]
 800e6ee:	f023 0301 	bic.w	r3, r3, #1
 800e6f2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e6f4:	7ebb      	ldrb	r3, [r7, #26]
 800e6f6:	f043 0301 	orr.w	r3, r3, #1
 800e6fa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	4618      	mov	r0, r3
 800e704:	f7fa fa0d 	bl	8008b22 <lwip_htonl>
 800e708:	4602      	mov	r2, r0
 800e70a:	887b      	ldrh	r3, [r7, #2]
 800e70c:	18d1      	adds	r1, r2, r3
 800e70e:	7eba      	ldrb	r2, [r7, #26]
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	460b      	mov	r3, r1
 800e716:	6939      	ldr	r1, [r7, #16]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff fea9 	bl	800e470 <tcp_create_segment>
 800e71e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d063      	beq.n	800e7ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fb fdca 	bl	800a2c4 <pbuf_clen>
 800e730:	4603      	mov	r3, r0
 800e732:	461a      	mov	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e73a:	1a9b      	subs	r3, r3, r2
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	6858      	ldr	r0, [r3, #4]
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	891a      	ldrh	r2, [r3, #8]
 800e74e:	89bb      	ldrh	r3, [r7, #12]
 800e750:	1ad3      	subs	r3, r2, r3
 800e752:	b29b      	uxth	r3, r3
 800e754:	4619      	mov	r1, r3
 800e756:	f7fb fba7 	bl	8009ea8 <pbuf_realloc>
  useg->len -= remainder;
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	891a      	ldrh	r2, [r3, #8]
 800e75e:	89bb      	ldrh	r3, [r7, #12]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	b29a      	uxth	r2, r3
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	899b      	ldrh	r3, [r3, #12]
 800e76e:	b29c      	uxth	r4, r3
 800e770:	7efb      	ldrb	r3, [r7, #27]
 800e772:	b29b      	uxth	r3, r3
 800e774:	4618      	mov	r0, r3
 800e776:	f7fa f9bf 	bl	8008af8 <lwip_htons>
 800e77a:	4603      	mov	r3, r0
 800e77c:	461a      	mov	r2, r3
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	4322      	orrs	r2, r4
 800e784:	b292      	uxth	r2, r2
 800e786:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fb fd99 	bl	800a2c4 <pbuf_clen>
 800e792:	4603      	mov	r3, r0
 800e794:	461a      	mov	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e79c:	4413      	add	r3, r2
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fb fd8a 	bl	800a2c4 <pbuf_clen>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e7ba:	4413      	add	r3, r2
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	69fa      	ldr	r2, [r7, #28]
 800e7d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d103      	bne.n	800e7e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	e016      	b.n	800e814 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e7e6:	bf00      	nop
 800e7e8:	e002      	b.n	800e7f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e7ea:	bf00      	nop
 800e7ec:	e000      	b.n	800e7f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e7ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d006      	beq.n	800e804 <tcp_split_unsent_seg+0x25c>
 800e7f6:	4b09      	ldr	r3, [pc, #36]	@ (800e81c <tcp_split_unsent_seg+0x274>)
 800e7f8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e7fc:	490d      	ldr	r1, [pc, #52]	@ (800e834 <tcp_split_unsent_seg+0x28c>)
 800e7fe:	4809      	ldr	r0, [pc, #36]	@ (800e824 <tcp_split_unsent_seg+0x27c>)
 800e800:	f004 ff70 	bl	80136e4 <iprintf>
  if (p != NULL) {
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e80a:	6938      	ldr	r0, [r7, #16]
 800e80c:	f7fb fcd2 	bl	800a1b4 <pbuf_free>
  }

  return ERR_MEM;
 800e810:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e814:	4618      	mov	r0, r3
 800e816:	3724      	adds	r7, #36	@ 0x24
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd90      	pop	{r4, r7, pc}
 800e81c:	08015d10 	.word	0x08015d10
 800e820:	080160a4 	.word	0x080160a4
 800e824:	08015d64 	.word	0x08015d64
 800e828:	080160c8 	.word	0x080160c8
 800e82c:	080160ec 	.word	0x080160ec
 800e830:	080160fc 	.word	0x080160fc
 800e834:	0801610c 	.word	0x0801610c

0800e838 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e838:	b590      	push	{r4, r7, lr}
 800e83a:	b085      	sub	sp, #20
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d106      	bne.n	800e854 <tcp_send_fin+0x1c>
 800e846:	4b21      	ldr	r3, [pc, #132]	@ (800e8cc <tcp_send_fin+0x94>)
 800e848:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e84c:	4920      	ldr	r1, [pc, #128]	@ (800e8d0 <tcp_send_fin+0x98>)
 800e84e:	4821      	ldr	r0, [pc, #132]	@ (800e8d4 <tcp_send_fin+0x9c>)
 800e850:	f004 ff48 	bl	80136e4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d02e      	beq.n	800e8ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e860:	60fb      	str	r3, [r7, #12]
 800e862:	e002      	b.n	800e86a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1f8      	bne.n	800e864 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	899b      	ldrh	r3, [r3, #12]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fa f93c 	bl	8008af8 <lwip_htons>
 800e880:	4603      	mov	r3, r0
 800e882:	b2db      	uxtb	r3, r3
 800e884:	f003 0307 	and.w	r3, r3, #7
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d116      	bne.n	800e8ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	899b      	ldrh	r3, [r3, #12]
 800e892:	b29c      	uxth	r4, r3
 800e894:	2001      	movs	r0, #1
 800e896:	f7fa f92f 	bl	8008af8 <lwip_htons>
 800e89a:	4603      	mov	r3, r0
 800e89c:	461a      	mov	r2, r3
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	4322      	orrs	r2, r4
 800e8a4:	b292      	uxth	r2, r2
 800e8a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	8b5b      	ldrh	r3, [r3, #26]
 800e8ac:	f043 0320 	orr.w	r3, r3, #32
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	e004      	b.n	800e8c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e8ba:	2101      	movs	r1, #1
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f80b 	bl	800e8d8 <tcp_enqueue_flags>
 800e8c2:	4603      	mov	r3, r0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3714      	adds	r7, #20
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd90      	pop	{r4, r7, pc}
 800e8cc:	08015d10 	.word	0x08015d10
 800e8d0:	08016118 	.word	0x08016118
 800e8d4:	08015d64 	.word	0x08015d64

0800e8d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08a      	sub	sp, #40	@ 0x28
 800e8dc:	af02      	add	r7, sp, #8
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e8ec:	78fb      	ldrb	r3, [r7, #3]
 800e8ee:	f003 0303 	and.w	r3, r3, #3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <tcp_enqueue_flags+0x2c>
 800e8f6:	4b67      	ldr	r3, [pc, #412]	@ (800ea94 <tcp_enqueue_flags+0x1bc>)
 800e8f8:	f240 4211 	movw	r2, #1041	@ 0x411
 800e8fc:	4966      	ldr	r1, [pc, #408]	@ (800ea98 <tcp_enqueue_flags+0x1c0>)
 800e8fe:	4867      	ldr	r0, [pc, #412]	@ (800ea9c <tcp_enqueue_flags+0x1c4>)
 800e900:	f004 fef0 	bl	80136e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <tcp_enqueue_flags+0x40>
 800e90a:	4b62      	ldr	r3, [pc, #392]	@ (800ea94 <tcp_enqueue_flags+0x1bc>)
 800e90c:	f240 4213 	movw	r2, #1043	@ 0x413
 800e910:	4963      	ldr	r1, [pc, #396]	@ (800eaa0 <tcp_enqueue_flags+0x1c8>)
 800e912:	4862      	ldr	r0, [pc, #392]	@ (800ea9c <tcp_enqueue_flags+0x1c4>)
 800e914:	f004 fee6 	bl	80136e4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e918:	78fb      	ldrb	r3, [r7, #3]
 800e91a:	f003 0302 	and.w	r3, r3, #2
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d001      	beq.n	800e926 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e922:	2301      	movs	r3, #1
 800e924:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e926:	7ffb      	ldrb	r3, [r7, #31]
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	f003 0304 	and.w	r3, r3, #4
 800e930:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e932:	7dfb      	ldrb	r3, [r7, #23]
 800e934:	b29b      	uxth	r3, r3
 800e936:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e93a:	4619      	mov	r1, r3
 800e93c:	2036      	movs	r0, #54	@ 0x36
 800e93e:	f7fb f955 	bl	8009bec <pbuf_alloc>
 800e942:	6138      	str	r0, [r7, #16]
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d109      	bne.n	800e95e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	8b5b      	ldrh	r3, [r3, #26]
 800e94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e952:	b29a      	uxth	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e958:	f04f 33ff 	mov.w	r3, #4294967295
 800e95c:	e095      	b.n	800ea8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	895a      	ldrh	r2, [r3, #10]
 800e962:	7dfb      	ldrb	r3, [r7, #23]
 800e964:	b29b      	uxth	r3, r3
 800e966:	429a      	cmp	r2, r3
 800e968:	d206      	bcs.n	800e978 <tcp_enqueue_flags+0xa0>
 800e96a:	4b4a      	ldr	r3, [pc, #296]	@ (800ea94 <tcp_enqueue_flags+0x1bc>)
 800e96c:	f240 4239 	movw	r2, #1081	@ 0x439
 800e970:	494c      	ldr	r1, [pc, #304]	@ (800eaa4 <tcp_enqueue_flags+0x1cc>)
 800e972:	484a      	ldr	r0, [pc, #296]	@ (800ea9c <tcp_enqueue_flags+0x1c4>)
 800e974:	f004 feb6 	bl	80136e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e97c:	78fa      	ldrb	r2, [r7, #3]
 800e97e:	7ffb      	ldrb	r3, [r7, #31]
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	460b      	mov	r3, r1
 800e984:	6939      	ldr	r1, [r7, #16]
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff fd72 	bl	800e470 <tcp_create_segment>
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d109      	bne.n	800e9a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	8b5b      	ldrh	r3, [r3, #26]
 800e998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a6:	e070      	b.n	800ea8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	f003 0303 	and.w	r3, r3, #3
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d006      	beq.n	800e9c2 <tcp_enqueue_flags+0xea>
 800e9b4:	4b37      	ldr	r3, [pc, #220]	@ (800ea94 <tcp_enqueue_flags+0x1bc>)
 800e9b6:	f240 4242 	movw	r2, #1090	@ 0x442
 800e9ba:	493b      	ldr	r1, [pc, #236]	@ (800eaa8 <tcp_enqueue_flags+0x1d0>)
 800e9bc:	4837      	ldr	r0, [pc, #220]	@ (800ea9c <tcp_enqueue_flags+0x1c4>)
 800e9be:	f004 fe91 	bl	80136e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	891b      	ldrh	r3, [r3, #8]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d006      	beq.n	800e9d8 <tcp_enqueue_flags+0x100>
 800e9ca:	4b32      	ldr	r3, [pc, #200]	@ (800ea94 <tcp_enqueue_flags+0x1bc>)
 800e9cc:	f240 4243 	movw	r2, #1091	@ 0x443
 800e9d0:	4936      	ldr	r1, [pc, #216]	@ (800eaac <tcp_enqueue_flags+0x1d4>)
 800e9d2:	4832      	ldr	r0, [pc, #200]	@ (800ea9c <tcp_enqueue_flags+0x1c4>)
 800e9d4:	f004 fe86 	bl	80136e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d103      	bne.n	800e9e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e9e6:	e00d      	b.n	800ea04 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9ec:	61bb      	str	r3, [r7, #24]
 800e9ee:	e002      	b.n	800e9f6 <tcp_enqueue_flags+0x11e>
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	61bb      	str	r3, [r7, #24]
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1f8      	bne.n	800e9f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ea0c:	78fb      	ldrb	r3, [r7, #3]
 800ea0e:	f003 0302 	and.w	r3, r3, #2
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d104      	bne.n	800ea20 <tcp_enqueue_flags+0x148>
 800ea16:	78fb      	ldrb	r3, [r7, #3]
 800ea18:	f003 0301 	and.w	r3, r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d004      	beq.n	800ea2a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea24:	1c5a      	adds	r2, r3, #1
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ea2a:	78fb      	ldrb	r3, [r7, #3]
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d006      	beq.n	800ea42 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	8b5b      	ldrh	r3, [r3, #26]
 800ea38:	f043 0320 	orr.w	r3, r3, #32
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fb fc3c 	bl	800a2c4 <pbuf_clen>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	461a      	mov	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ea56:	4413      	add	r3, r2
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00e      	beq.n	800ea88 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d10a      	bne.n	800ea88 <tcp_enqueue_flags+0x1b0>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d106      	bne.n	800ea88 <tcp_enqueue_flags+0x1b0>
 800ea7a:	4b06      	ldr	r3, [pc, #24]	@ (800ea94 <tcp_enqueue_flags+0x1bc>)
 800ea7c:	f240 4265 	movw	r2, #1125	@ 0x465
 800ea80:	490b      	ldr	r1, [pc, #44]	@ (800eab0 <tcp_enqueue_flags+0x1d8>)
 800ea82:	4806      	ldr	r0, [pc, #24]	@ (800ea9c <tcp_enqueue_flags+0x1c4>)
 800ea84:	f004 fe2e 	bl	80136e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3720      	adds	r7, #32
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	08015d10 	.word	0x08015d10
 800ea98:	08016134 	.word	0x08016134
 800ea9c:	08015d64 	.word	0x08015d64
 800eaa0:	0801618c 	.word	0x0801618c
 800eaa4:	080161ac 	.word	0x080161ac
 800eaa8:	080161e8 	.word	0x080161e8
 800eaac:	08016200 	.word	0x08016200
 800eab0:	0801622c 	.word	0x0801622c

0800eab4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800eab4:	b5b0      	push	{r4, r5, r7, lr}
 800eab6:	b08a      	sub	sp, #40	@ 0x28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <tcp_output+0x1c>
 800eac2:	4b8a      	ldr	r3, [pc, #552]	@ (800ecec <tcp_output+0x238>)
 800eac4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800eac8:	4989      	ldr	r1, [pc, #548]	@ (800ecf0 <tcp_output+0x23c>)
 800eaca:	488a      	ldr	r0, [pc, #552]	@ (800ecf4 <tcp_output+0x240>)
 800eacc:	f004 fe0a 	bl	80136e4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	7d1b      	ldrb	r3, [r3, #20]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d106      	bne.n	800eae6 <tcp_output+0x32>
 800ead8:	4b84      	ldr	r3, [pc, #528]	@ (800ecec <tcp_output+0x238>)
 800eada:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800eade:	4986      	ldr	r1, [pc, #536]	@ (800ecf8 <tcp_output+0x244>)
 800eae0:	4884      	ldr	r0, [pc, #528]	@ (800ecf4 <tcp_output+0x240>)
 800eae2:	f004 fdff 	bl	80136e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800eae6:	4b85      	ldr	r3, [pc, #532]	@ (800ecfc <tcp_output+0x248>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d101      	bne.n	800eaf4 <tcp_output+0x40>
    return ERR_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	e1ce      	b.n	800ee92 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb00:	4293      	cmp	r3, r2
 800eb02:	bf28      	it	cs
 800eb04:	4613      	movcs	r3, r2
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800eb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10b      	bne.n	800eb2e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	8b5b      	ldrh	r3, [r3, #26]
 800eb1a:	f003 0302 	and.w	r3, r3, #2
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 81aa 	beq.w	800ee78 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fdcb 	bl	800f6c0 <tcp_send_empty_ack>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	e1b1      	b.n	800ee92 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3304      	adds	r3, #4
 800eb34:	461a      	mov	r2, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7ff fc7e 	bl	800e438 <tcp_route>
 800eb3c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d102      	bne.n	800eb4a <tcp_output+0x96>
    return ERR_RTE;
 800eb44:	f06f 0303 	mvn.w	r3, #3
 800eb48:	e1a3      	b.n	800ee92 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d003      	beq.n	800eb58 <tcp_output+0xa4>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d111      	bne.n	800eb7c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d002      	beq.n	800eb64 <tcp_output+0xb0>
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	3304      	adds	r3, #4
 800eb62:	e000      	b.n	800eb66 <tcp_output+0xb2>
 800eb64:	2300      	movs	r3, #0
 800eb66:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <tcp_output+0xc0>
      return ERR_RTE;
 800eb6e:	f06f 0303 	mvn.w	r3, #3
 800eb72:	e18e      	b.n	800ee92 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7f9 ffcd 	bl	8008b22 <lwip_htonl>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb92:	8912      	ldrh	r2, [r2, #8]
 800eb94:	4413      	add	r3, r2
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d227      	bcs.n	800ebec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eba2:	461a      	mov	r2, r3
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d114      	bne.n	800ebd4 <tcp_output+0x120>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d110      	bne.n	800ebd4 <tcp_output+0x120>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10b      	bne.n	800ebd4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	8b5b      	ldrh	r3, [r3, #26]
 800ebd8:	f003 0302 	and.w	r3, r3, #2
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 814d 	beq.w	800ee7c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 fd6c 	bl	800f6c0 <tcp_send_empty_ack>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	e152      	b.n	800ee92 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebf8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ebfa:	6a3b      	ldr	r3, [r7, #32]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 811c 	beq.w	800ee3a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ec02:	e002      	b.n	800ec0a <tcp_output+0x156>
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	623b      	str	r3, [r7, #32]
 800ec0a:	6a3b      	ldr	r3, [r7, #32]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1f8      	bne.n	800ec04 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ec12:	e112      	b.n	800ee3a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ec14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	899b      	ldrh	r3, [r3, #12]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7f9 ff6b 	bl	8008af8 <lwip_htons>
 800ec22:	4603      	mov	r3, r0
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	f003 0304 	and.w	r3, r3, #4
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d006      	beq.n	800ec3c <tcp_output+0x188>
 800ec2e:	4b2f      	ldr	r3, [pc, #188]	@ (800ecec <tcp_output+0x238>)
 800ec30:	f240 5236 	movw	r2, #1334	@ 0x536
 800ec34:	4932      	ldr	r1, [pc, #200]	@ (800ed00 <tcp_output+0x24c>)
 800ec36:	482f      	ldr	r0, [pc, #188]	@ (800ecf4 <tcp_output+0x240>)
 800ec38:	f004 fd54 	bl	80136e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d01f      	beq.n	800ec84 <tcp_output+0x1d0>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	8b5b      	ldrh	r3, [r3, #26]
 800ec48:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d119      	bne.n	800ec84 <tcp_output+0x1d0>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00b      	beq.n	800ec70 <tcp_output+0x1bc>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d110      	bne.n	800ec84 <tcp_output+0x1d0>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec66:	891a      	ldrh	r2, [r3, #8]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d209      	bcs.n	800ec84 <tcp_output+0x1d0>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d004      	beq.n	800ec84 <tcp_output+0x1d0>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ec80:	2b08      	cmp	r3, #8
 800ec82:	d901      	bls.n	800ec88 <tcp_output+0x1d4>
 800ec84:	2301      	movs	r3, #1
 800ec86:	e000      	b.n	800ec8a <tcp_output+0x1d6>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d106      	bne.n	800ec9c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	8b5b      	ldrh	r3, [r3, #26]
 800ec92:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f000 80e4 	beq.w	800ee64 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	7d1b      	ldrb	r3, [r3, #20]
 800eca0:	2b02      	cmp	r3, #2
 800eca2:	d00d      	beq.n	800ecc0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800eca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	899b      	ldrh	r3, [r3, #12]
 800ecaa:	b29c      	uxth	r4, r3
 800ecac:	2010      	movs	r0, #16
 800ecae:	f7f9 ff23 	bl	8008af8 <lwip_htons>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	4322      	orrs	r2, r4
 800ecbc:	b292      	uxth	r2, r2
 800ecbe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ecc0:	697a      	ldr	r2, [r7, #20]
 800ecc2:	6879      	ldr	r1, [r7, #4]
 800ecc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecc6:	f000 f909 	bl	800eedc <tcp_output_segment>
 800ecca:	4603      	mov	r3, r0
 800eccc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ecce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d016      	beq.n	800ed04 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	8b5b      	ldrh	r3, [r3, #26]
 800ecda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	835a      	strh	r2, [r3, #26]
      return err;
 800ece4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ece8:	e0d3      	b.n	800ee92 <tcp_output+0x3de>
 800ecea:	bf00      	nop
 800ecec:	08015d10 	.word	0x08015d10
 800ecf0:	08016254 	.word	0x08016254
 800ecf4:	08015d64 	.word	0x08015d64
 800ecf8:	0801626c 	.word	0x0801626c
 800ecfc:	20008adc 	.word	0x20008adc
 800ed00:	08016294 	.word	0x08016294
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ed04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	7d1b      	ldrb	r3, [r3, #20]
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d006      	beq.n	800ed22 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	8b5b      	ldrh	r3, [r3, #26]
 800ed18:	f023 0303 	bic.w	r3, r3, #3
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ed22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7f9 fefa 	bl	8008b22 <lwip_htonl>
 800ed2e:	4604      	mov	r4, r0
 800ed30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed32:	891b      	ldrh	r3, [r3, #8]
 800ed34:	461d      	mov	r5, r3
 800ed36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	899b      	ldrh	r3, [r3, #12]
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7f9 feda 	bl	8008af8 <lwip_htons>
 800ed44:	4603      	mov	r3, r0
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	f003 0303 	and.w	r3, r3, #3
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <tcp_output+0x2a0>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e000      	b.n	800ed56 <tcp_output+0x2a2>
 800ed54:	2300      	movs	r3, #0
 800ed56:	442b      	add	r3, r5
 800ed58:	4423      	add	r3, r4
 800ed5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	da02      	bge.n	800ed6e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed70:	891b      	ldrh	r3, [r3, #8]
 800ed72:	461c      	mov	r4, r3
 800ed74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	899b      	ldrh	r3, [r3, #12]
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7f9 febb 	bl	8008af8 <lwip_htons>
 800ed82:	4603      	mov	r3, r0
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	f003 0303 	and.w	r3, r3, #3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <tcp_output+0x2de>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e000      	b.n	800ed94 <tcp_output+0x2e0>
 800ed92:	2300      	movs	r3, #0
 800ed94:	4423      	add	r3, r4
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d049      	beq.n	800ee2e <tcp_output+0x37a>
      seg->next = NULL;
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d105      	bne.n	800edb4 <tcp_output+0x300>
        pcb->unacked = seg;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edac:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800edae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb0:	623b      	str	r3, [r7, #32]
 800edb2:	e03f      	b.n	800ee34 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800edb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	4618      	mov	r0, r3
 800edbc:	f7f9 feb1 	bl	8008b22 <lwip_htonl>
 800edc0:	4604      	mov	r4, r0
 800edc2:	6a3b      	ldr	r3, [r7, #32]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7f9 feaa 	bl	8008b22 <lwip_htonl>
 800edce:	4603      	mov	r3, r0
 800edd0:	1ae3      	subs	r3, r4, r3
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	da24      	bge.n	800ee20 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	3370      	adds	r3, #112	@ 0x70
 800edda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eddc:	e002      	b.n	800ede4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d011      	beq.n	800ee10 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7f9 fe94 	bl	8008b22 <lwip_htonl>
 800edfa:	4604      	mov	r4, r0
 800edfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7f9 fe8d 	bl	8008b22 <lwip_htonl>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	dbe6      	blt.n	800edde <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee16:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	e009      	b.n	800ee34 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ee20:	6a3b      	ldr	r3, [r7, #32]
 800ee22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee24:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	623b      	str	r3, [r7, #32]
 800ee2c:	e002      	b.n	800ee34 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ee2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee30:	f7fc fc45 	bl	800b6be <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee38:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d012      	beq.n	800ee66 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7f9 fe6b 	bl	8008b22 <lwip_htonl>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee56:	8912      	ldrh	r2, [r2, #8]
 800ee58:	4413      	add	r3, r2
  while (seg != NULL &&
 800ee5a:	69ba      	ldr	r2, [r7, #24]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	f4bf aed9 	bcs.w	800ec14 <tcp_output+0x160>
 800ee62:	e000      	b.n	800ee66 <tcp_output+0x3b2>
      break;
 800ee64:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d108      	bne.n	800ee80 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800ee76:	e004      	b.n	800ee82 <tcp_output+0x3ce>
    goto output_done;
 800ee78:	bf00      	nop
 800ee7a:	e002      	b.n	800ee82 <tcp_output+0x3ce>
    goto output_done;
 800ee7c:	bf00      	nop
 800ee7e:	e000      	b.n	800ee82 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ee80:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	8b5b      	ldrh	r3, [r3, #26]
 800ee86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3728      	adds	r7, #40	@ 0x28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bdb0      	pop	{r4, r5, r7, pc}
 800ee9a:	bf00      	nop

0800ee9c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d106      	bne.n	800eeb8 <tcp_output_segment_busy+0x1c>
 800eeaa:	4b09      	ldr	r3, [pc, #36]	@ (800eed0 <tcp_output_segment_busy+0x34>)
 800eeac:	f240 529a 	movw	r2, #1434	@ 0x59a
 800eeb0:	4908      	ldr	r1, [pc, #32]	@ (800eed4 <tcp_output_segment_busy+0x38>)
 800eeb2:	4809      	ldr	r0, [pc, #36]	@ (800eed8 <tcp_output_segment_busy+0x3c>)
 800eeb4:	f004 fc16 	bl	80136e4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	7b9b      	ldrb	r3, [r3, #14]
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d001      	beq.n	800eec6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e000      	b.n	800eec8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800eec6:	2300      	movs	r3, #0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	08015d10 	.word	0x08015d10
 800eed4:	080162ac 	.word	0x080162ac
 800eed8:	08015d64 	.word	0x08015d64

0800eedc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800eedc:	b5b0      	push	{r4, r5, r7, lr}
 800eede:	b08c      	sub	sp, #48	@ 0x30
 800eee0:	af04      	add	r7, sp, #16
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <tcp_output_segment+0x20>
 800eeee:	4b64      	ldr	r3, [pc, #400]	@ (800f080 <tcp_output_segment+0x1a4>)
 800eef0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800eef4:	4963      	ldr	r1, [pc, #396]	@ (800f084 <tcp_output_segment+0x1a8>)
 800eef6:	4864      	ldr	r0, [pc, #400]	@ (800f088 <tcp_output_segment+0x1ac>)
 800eef8:	f004 fbf4 	bl	80136e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <tcp_output_segment+0x34>
 800ef02:	4b5f      	ldr	r3, [pc, #380]	@ (800f080 <tcp_output_segment+0x1a4>)
 800ef04:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800ef08:	4960      	ldr	r1, [pc, #384]	@ (800f08c <tcp_output_segment+0x1b0>)
 800ef0a:	485f      	ldr	r0, [pc, #380]	@ (800f088 <tcp_output_segment+0x1ac>)
 800ef0c:	f004 fbea 	bl	80136e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d106      	bne.n	800ef24 <tcp_output_segment+0x48>
 800ef16:	4b5a      	ldr	r3, [pc, #360]	@ (800f080 <tcp_output_segment+0x1a4>)
 800ef18:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800ef1c:	495c      	ldr	r1, [pc, #368]	@ (800f090 <tcp_output_segment+0x1b4>)
 800ef1e:	485a      	ldr	r0, [pc, #360]	@ (800f088 <tcp_output_segment+0x1ac>)
 800ef20:	f004 fbe0 	bl	80136e4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f7ff ffb9 	bl	800ee9c <tcp_output_segment_busy>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	e0a1      	b.n	800f078 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	68dc      	ldr	r4, [r3, #12]
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f7f9 fdf0 	bl	8008b22 <lwip_htonl>
 800ef42:	4603      	mov	r3, r0
 800ef44:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	68dc      	ldr	r4, [r3, #12]
 800ef4e:	4610      	mov	r0, r2
 800ef50:	f7f9 fdd2 	bl	8008af8 <lwip_htons>
 800ef54:	4603      	mov	r3, r0
 800ef56:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ef60:	441a      	add	r2, r3
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	3314      	adds	r3, #20
 800ef6c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	7a9b      	ldrb	r3, [r3, #10]
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d015      	beq.n	800efa6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	461a      	mov	r2, r3
 800ef80:	6879      	ldr	r1, [r7, #4]
 800ef82:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ef86:	f7fc fe91 	bl	800bcac <tcp_eff_send_mss_netif>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ef8e:	8b7b      	ldrh	r3, [r7, #26]
 800ef90:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7f9 fdc4 	bl	8008b22 <lwip_htonl>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	3304      	adds	r3, #4
 800efa4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800efac:	2b00      	cmp	r3, #0
 800efae:	da02      	bge.n	800efb6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	2200      	movs	r2, #0
 800efb4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10c      	bne.n	800efd8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800efbe:	4b35      	ldr	r3, [pc, #212]	@ (800f094 <tcp_output_segment+0x1b8>)
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	4618      	mov	r0, r3
 800efce:	f7f9 fda8 	bl	8008b22 <lwip_htonl>
 800efd2:	4602      	mov	r2, r0
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	68da      	ldr	r2, [r3, #12]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	8959      	ldrh	r1, [r3, #10]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	8b3a      	ldrh	r2, [r7, #24]
 800eff2:	1a8a      	subs	r2, r1, r2
 800eff4:	b292      	uxth	r2, r2
 800eff6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	8919      	ldrh	r1, [r3, #8]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	8b3a      	ldrh	r2, [r7, #24]
 800f004:	1a8a      	subs	r2, r1, r2
 800f006:	b292      	uxth	r2, r2
 800f008:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	68d2      	ldr	r2, [r2, #12]
 800f012:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	2200      	movs	r2, #0
 800f01a:	741a      	strb	r2, [r3, #16]
 800f01c:	2200      	movs	r2, #0
 800f01e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	68da      	ldr	r2, [r3, #12]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	7a9b      	ldrb	r3, [r3, #10]
 800f028:	f003 0301 	and.w	r3, r3, #1
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <tcp_output_segment+0x158>
 800f030:	2318      	movs	r3, #24
 800f032:	e000      	b.n	800f036 <tcp_output_segment+0x15a>
 800f034:	2314      	movs	r3, #20
 800f036:	4413      	add	r3, r2
 800f038:	69fa      	ldr	r2, [r7, #28]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d006      	beq.n	800f04c <tcp_output_segment+0x170>
 800f03e:	4b10      	ldr	r3, [pc, #64]	@ (800f080 <tcp_output_segment+0x1a4>)
 800f040:	f240 621c 	movw	r2, #1564	@ 0x61c
 800f044:	4914      	ldr	r1, [pc, #80]	@ (800f098 <tcp_output_segment+0x1bc>)
 800f046:	4810      	ldr	r0, [pc, #64]	@ (800f088 <tcp_output_segment+0x1ac>)
 800f048:	f004 fb4c 	bl	80136e4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6858      	ldr	r0, [r3, #4]
 800f050:	68b9      	ldr	r1, [r7, #8]
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	1d1c      	adds	r4, r3, #4
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	7add      	ldrb	r5, [r3, #11]
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	7a9b      	ldrb	r3, [r3, #10]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	9202      	str	r2, [sp, #8]
 800f062:	2206      	movs	r2, #6
 800f064:	9201      	str	r2, [sp, #4]
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	462b      	mov	r3, r5
 800f06a:	4622      	mov	r2, r4
 800f06c:	f002 fd24 	bl	8011ab8 <ip4_output_if>
 800f070:	4603      	mov	r3, r0
 800f072:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3720      	adds	r7, #32
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bdb0      	pop	{r4, r5, r7, pc}
 800f080:	08015d10 	.word	0x08015d10
 800f084:	080162d4 	.word	0x080162d4
 800f088:	08015d64 	.word	0x08015d64
 800f08c:	080162f4 	.word	0x080162f4
 800f090:	08016314 	.word	0x08016314
 800f094:	20008a90 	.word	0x20008a90
 800f098:	08016338 	.word	0x08016338

0800f09c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f09c:	b5b0      	push	{r4, r5, r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d106      	bne.n	800f0b8 <tcp_rexmit_rto_prepare+0x1c>
 800f0aa:	4b31      	ldr	r3, [pc, #196]	@ (800f170 <tcp_rexmit_rto_prepare+0xd4>)
 800f0ac:	f240 6263 	movw	r2, #1635	@ 0x663
 800f0b0:	4930      	ldr	r1, [pc, #192]	@ (800f174 <tcp_rexmit_rto_prepare+0xd8>)
 800f0b2:	4831      	ldr	r0, [pc, #196]	@ (800f178 <tcp_rexmit_rto_prepare+0xdc>)
 800f0b4:	f004 fb16 	bl	80136e4 <iprintf>

  if (pcb->unacked == NULL) {
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d102      	bne.n	800f0c6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f0c0:	f06f 0305 	mvn.w	r3, #5
 800f0c4:	e050      	b.n	800f168 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0ca:	60fb      	str	r3, [r7, #12]
 800f0cc:	e00b      	b.n	800f0e6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7ff fee4 	bl	800ee9c <tcp_output_segment_busy>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d002      	beq.n	800f0e0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f0da:	f06f 0305 	mvn.w	r3, #5
 800f0de:	e043      	b.n	800f168 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1ef      	bne.n	800f0ce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f7ff fed4 	bl	800ee9c <tcp_output_segment_busy>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d002      	beq.n	800f100 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f0fa:	f06f 0305 	mvn.w	r3, #5
 800f0fe:	e033      	b.n	800f168 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	8b5b      	ldrh	r3, [r3, #26]
 800f11a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f11e:	b29a      	uxth	r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7f9 fcf9 	bl	8008b22 <lwip_htonl>
 800f130:	4604      	mov	r4, r0
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	891b      	ldrh	r3, [r3, #8]
 800f136:	461d      	mov	r5, r3
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	899b      	ldrh	r3, [r3, #12]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	4618      	mov	r0, r3
 800f142:	f7f9 fcd9 	bl	8008af8 <lwip_htons>
 800f146:	4603      	mov	r3, r0
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	f003 0303 	and.w	r3, r3, #3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d001      	beq.n	800f156 <tcp_rexmit_rto_prepare+0xba>
 800f152:	2301      	movs	r3, #1
 800f154:	e000      	b.n	800f158 <tcp_rexmit_rto_prepare+0xbc>
 800f156:	2300      	movs	r3, #0
 800f158:	442b      	add	r3, r5
 800f15a:	18e2      	adds	r2, r4, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bdb0      	pop	{r4, r5, r7, pc}
 800f170:	08015d10 	.word	0x08015d10
 800f174:	0801634c 	.word	0x0801634c
 800f178:	08015d64 	.word	0x08015d64

0800f17c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d106      	bne.n	800f198 <tcp_rexmit_rto_commit+0x1c>
 800f18a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c0 <tcp_rexmit_rto_commit+0x44>)
 800f18c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f190:	490c      	ldr	r1, [pc, #48]	@ (800f1c4 <tcp_rexmit_rto_commit+0x48>)
 800f192:	480d      	ldr	r0, [pc, #52]	@ (800f1c8 <tcp_rexmit_rto_commit+0x4c>)
 800f194:	f004 faa6 	bl	80136e4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f19e:	2bff      	cmp	r3, #255	@ 0xff
 800f1a0:	d007      	beq.n	800f1b2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	b2da      	uxtb	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7ff fc7e 	bl	800eab4 <tcp_output>
}
 800f1b8:	bf00      	nop
 800f1ba:	3708      	adds	r7, #8
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	08015d10 	.word	0x08015d10
 800f1c4:	08016370 	.word	0x08016370
 800f1c8:	08015d64 	.word	0x08015d64

0800f1cc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <tcp_rexmit_rto+0x1c>
 800f1da:	4b0a      	ldr	r3, [pc, #40]	@ (800f204 <tcp_rexmit_rto+0x38>)
 800f1dc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800f1e0:	4909      	ldr	r1, [pc, #36]	@ (800f208 <tcp_rexmit_rto+0x3c>)
 800f1e2:	480a      	ldr	r0, [pc, #40]	@ (800f20c <tcp_rexmit_rto+0x40>)
 800f1e4:	f004 fa7e 	bl	80136e4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f7ff ff57 	bl	800f09c <tcp_rexmit_rto_prepare>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d102      	bne.n	800f1fa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7ff ffc1 	bl	800f17c <tcp_rexmit_rto_commit>
  }
}
 800f1fa:	bf00      	nop
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	08015d10 	.word	0x08015d10
 800f208:	08016394 	.word	0x08016394
 800f20c:	08015d64 	.word	0x08015d64

0800f210 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f210:	b590      	push	{r4, r7, lr}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d106      	bne.n	800f22c <tcp_rexmit+0x1c>
 800f21e:	4b2f      	ldr	r3, [pc, #188]	@ (800f2dc <tcp_rexmit+0xcc>)
 800f220:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800f224:	492e      	ldr	r1, [pc, #184]	@ (800f2e0 <tcp_rexmit+0xd0>)
 800f226:	482f      	ldr	r0, [pc, #188]	@ (800f2e4 <tcp_rexmit+0xd4>)
 800f228:	f004 fa5c 	bl	80136e4 <iprintf>

  if (pcb->unacked == NULL) {
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f230:	2b00      	cmp	r3, #0
 800f232:	d102      	bne.n	800f23a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f234:	f06f 0305 	mvn.w	r3, #5
 800f238:	e04c      	b.n	800f2d4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f23e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f240:	68b8      	ldr	r0, [r7, #8]
 800f242:	f7ff fe2b 	bl	800ee9c <tcp_output_segment_busy>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f24c:	f06f 0305 	mvn.w	r3, #5
 800f250:	e040      	b.n	800f2d4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	336c      	adds	r3, #108	@ 0x6c
 800f25e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f260:	e002      	b.n	800f268 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d011      	beq.n	800f294 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7f9 fc52 	bl	8008b22 <lwip_htonl>
 800f27e:	4604      	mov	r4, r0
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	4618      	mov	r0, r3
 800f288:	f7f9 fc4b 	bl	8008b22 <lwip_htonl>
 800f28c:	4603      	mov	r3, r0
 800f28e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f290:	2b00      	cmp	r3, #0
 800f292:	dbe6      	blt.n	800f262 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	68ba      	ldr	r2, [r7, #8]
 800f2a0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d103      	bne.n	800f2b2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f2b8:	2bff      	cmp	r3, #255	@ 0xff
 800f2ba:	d007      	beq.n	800f2cc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f2d2:	2300      	movs	r3, #0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3714      	adds	r7, #20
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd90      	pop	{r4, r7, pc}
 800f2dc:	08015d10 	.word	0x08015d10
 800f2e0:	080163b0 	.word	0x080163b0
 800f2e4:	08015d64 	.word	0x08015d64

0800f2e8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d106      	bne.n	800f304 <tcp_rexmit_fast+0x1c>
 800f2f6:	4b2a      	ldr	r3, [pc, #168]	@ (800f3a0 <tcp_rexmit_fast+0xb8>)
 800f2f8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800f2fc:	4929      	ldr	r1, [pc, #164]	@ (800f3a4 <tcp_rexmit_fast+0xbc>)
 800f2fe:	482a      	ldr	r0, [pc, #168]	@ (800f3a8 <tcp_rexmit_fast+0xc0>)
 800f300:	f004 f9f0 	bl	80136e4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d045      	beq.n	800f398 <tcp_rexmit_fast+0xb0>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	8b5b      	ldrh	r3, [r3, #26]
 800f310:	f003 0304 	and.w	r3, r3, #4
 800f314:	2b00      	cmp	r3, #0
 800f316:	d13f      	bne.n	800f398 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff ff79 	bl	800f210 <tcp_rexmit>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d139      	bne.n	800f398 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f330:	4293      	cmp	r3, r2
 800f332:	bf28      	it	cs
 800f334:	4613      	movcs	r3, r2
 800f336:	b29b      	uxth	r3, r3
 800f338:	2b00      	cmp	r3, #0
 800f33a:	da00      	bge.n	800f33e <tcp_rexmit_fast+0x56>
 800f33c:	3301      	adds	r3, #1
 800f33e:	105b      	asrs	r3, r3, #1
 800f340:	b29a      	uxth	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f34e:	461a      	mov	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f354:	005b      	lsls	r3, r3, #1
 800f356:	429a      	cmp	r2, r3
 800f358:	d206      	bcs.n	800f368 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	b29a      	uxth	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f372:	4619      	mov	r1, r3
 800f374:	0049      	lsls	r1, r1, #1
 800f376:	440b      	add	r3, r1
 800f378:	b29b      	uxth	r3, r3
 800f37a:	4413      	add	r3, r2
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	8b5b      	ldrh	r3, [r3, #26]
 800f388:	f043 0304 	orr.w	r3, r3, #4
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800f398:	bf00      	nop
 800f39a:	3708      	adds	r7, #8
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	08015d10 	.word	0x08015d10
 800f3a4:	080163c8 	.word	0x080163c8
 800f3a8:	08015d64 	.word	0x08015d64

0800f3ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	607b      	str	r3, [r7, #4]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	817b      	strh	r3, [r7, #10]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f3be:	897a      	ldrh	r2, [r7, #10]
 800f3c0:	893b      	ldrh	r3, [r7, #8]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	3314      	adds	r3, #20
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	2022      	movs	r0, #34	@ 0x22
 800f3d2:	f7fa fc0b 	bl	8009bec <pbuf_alloc>
 800f3d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d04d      	beq.n	800f47a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f3de:	897b      	ldrh	r3, [r7, #10]
 800f3e0:	3313      	adds	r3, #19
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	8952      	ldrh	r2, [r2, #10]
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	db06      	blt.n	800f3f8 <tcp_output_alloc_header_common+0x4c>
 800f3ea:	4b26      	ldr	r3, [pc, #152]	@ (800f484 <tcp_output_alloc_header_common+0xd8>)
 800f3ec:	f240 7223 	movw	r2, #1827	@ 0x723
 800f3f0:	4925      	ldr	r1, [pc, #148]	@ (800f488 <tcp_output_alloc_header_common+0xdc>)
 800f3f2:	4826      	ldr	r0, [pc, #152]	@ (800f48c <tcp_output_alloc_header_common+0xe0>)
 800f3f4:	f004 f976 	bl	80136e4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f3fe:	8c3b      	ldrh	r3, [r7, #32]
 800f400:	4618      	mov	r0, r3
 800f402:	f7f9 fb79 	bl	8008af8 <lwip_htons>
 800f406:	4603      	mov	r3, r0
 800f408:	461a      	mov	r2, r3
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f40e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f410:	4618      	mov	r0, r3
 800f412:	f7f9 fb71 	bl	8008af8 <lwip_htons>
 800f416:	4603      	mov	r3, r0
 800f418:	461a      	mov	r2, r3
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7f9 fb7c 	bl	8008b22 <lwip_htonl>
 800f42a:	4602      	mov	r2, r0
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f430:	897b      	ldrh	r3, [r7, #10]
 800f432:	089b      	lsrs	r3, r3, #2
 800f434:	b29b      	uxth	r3, r3
 800f436:	3305      	adds	r3, #5
 800f438:	b29b      	uxth	r3, r3
 800f43a:	031b      	lsls	r3, r3, #12
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f442:	b29b      	uxth	r3, r3
 800f444:	4313      	orrs	r3, r2
 800f446:	b29b      	uxth	r3, r3
 800f448:	4618      	mov	r0, r3
 800f44a:	f7f9 fb55 	bl	8008af8 <lwip_htons>
 800f44e:	4603      	mov	r3, r0
 800f450:	461a      	mov	r2, r3
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f456:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f458:	4618      	mov	r0, r3
 800f45a:	f7f9 fb4d 	bl	8008af8 <lwip_htons>
 800f45e:	4603      	mov	r3, r0
 800f460:	461a      	mov	r2, r3
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	2200      	movs	r2, #0
 800f46a:	741a      	strb	r2, [r3, #16]
 800f46c:	2200      	movs	r2, #0
 800f46e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	2200      	movs	r2, #0
 800f474:	749a      	strb	r2, [r3, #18]
 800f476:	2200      	movs	r2, #0
 800f478:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f47a:	697b      	ldr	r3, [r7, #20]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3718      	adds	r7, #24
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	08015d10 	.word	0x08015d10
 800f488:	080163e8 	.word	0x080163e8
 800f48c:	08015d64 	.word	0x08015d64

0800f490 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f490:	b5b0      	push	{r4, r5, r7, lr}
 800f492:	b08a      	sub	sp, #40	@ 0x28
 800f494:	af04      	add	r7, sp, #16
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	607b      	str	r3, [r7, #4]
 800f49a:	460b      	mov	r3, r1
 800f49c:	817b      	strh	r3, [r7, #10]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d106      	bne.n	800f4b6 <tcp_output_alloc_header+0x26>
 800f4a8:	4b15      	ldr	r3, [pc, #84]	@ (800f500 <tcp_output_alloc_header+0x70>)
 800f4aa:	f240 7242 	movw	r2, #1858	@ 0x742
 800f4ae:	4915      	ldr	r1, [pc, #84]	@ (800f504 <tcp_output_alloc_header+0x74>)
 800f4b0:	4815      	ldr	r0, [pc, #84]	@ (800f508 <tcp_output_alloc_header+0x78>)
 800f4b2:	f004 f917 	bl	80136e4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	8adb      	ldrh	r3, [r3, #22]
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	8b12      	ldrh	r2, [r2, #24]
 800f4c2:	68f9      	ldr	r1, [r7, #12]
 800f4c4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800f4c6:	893d      	ldrh	r5, [r7, #8]
 800f4c8:	897c      	ldrh	r4, [r7, #10]
 800f4ca:	9103      	str	r1, [sp, #12]
 800f4cc:	2110      	movs	r1, #16
 800f4ce:	9102      	str	r1, [sp, #8]
 800f4d0:	9201      	str	r2, [sp, #4]
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	462a      	mov	r2, r5
 800f4d8:	4621      	mov	r1, r4
 800f4da:	f7ff ff67 	bl	800f3ac <tcp_output_alloc_header_common>
 800f4de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d006      	beq.n	800f4f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f4ee:	441a      	add	r2, r3
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800f4f4:	697b      	ldr	r3, [r7, #20]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3718      	adds	r7, #24
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bdb0      	pop	{r4, r5, r7, pc}
 800f4fe:	bf00      	nop
 800f500:	08015d10 	.word	0x08015d10
 800f504:	08016418 	.word	0x08016418
 800f508:	08015d64 	.word	0x08015d64

0800f50c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b088      	sub	sp, #32
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	4611      	mov	r1, r2
 800f518:	461a      	mov	r2, r3
 800f51a:	460b      	mov	r3, r1
 800f51c:	71fb      	strb	r3, [r7, #7]
 800f51e:	4613      	mov	r3, r2
 800f520:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d106      	bne.n	800f53a <tcp_output_fill_options+0x2e>
 800f52c:	4b12      	ldr	r3, [pc, #72]	@ (800f578 <tcp_output_fill_options+0x6c>)
 800f52e:	f240 7256 	movw	r2, #1878	@ 0x756
 800f532:	4912      	ldr	r1, [pc, #72]	@ (800f57c <tcp_output_fill_options+0x70>)
 800f534:	4812      	ldr	r0, [pc, #72]	@ (800f580 <tcp_output_fill_options+0x74>)
 800f536:	f004 f8d5 	bl	80136e4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	3314      	adds	r3, #20
 800f544:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f546:	8bfb      	ldrh	r3, [r7, #30]
 800f548:	009b      	lsls	r3, r3, #2
 800f54a:	461a      	mov	r2, r3
 800f54c:	79fb      	ldrb	r3, [r7, #7]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	f003 0304 	and.w	r3, r3, #4
 800f554:	4413      	add	r3, r2
 800f556:	3314      	adds	r3, #20
 800f558:	69ba      	ldr	r2, [r7, #24]
 800f55a:	4413      	add	r3, r2
 800f55c:	697a      	ldr	r2, [r7, #20]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d006      	beq.n	800f570 <tcp_output_fill_options+0x64>
 800f562:	4b05      	ldr	r3, [pc, #20]	@ (800f578 <tcp_output_fill_options+0x6c>)
 800f564:	f240 7275 	movw	r2, #1909	@ 0x775
 800f568:	4906      	ldr	r1, [pc, #24]	@ (800f584 <tcp_output_fill_options+0x78>)
 800f56a:	4805      	ldr	r0, [pc, #20]	@ (800f580 <tcp_output_fill_options+0x74>)
 800f56c:	f004 f8ba 	bl	80136e4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f570:	bf00      	nop
 800f572:	3720      	adds	r7, #32
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	08015d10 	.word	0x08015d10
 800f57c:	08016440 	.word	0x08016440
 800f580:	08015d64 	.word	0x08015d64
 800f584:	08016338 	.word	0x08016338

0800f588 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b08a      	sub	sp, #40	@ 0x28
 800f58c:	af04      	add	r7, sp, #16
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d106      	bne.n	800f5aa <tcp_output_control_segment+0x22>
 800f59c:	4b1c      	ldr	r3, [pc, #112]	@ (800f610 <tcp_output_control_segment+0x88>)
 800f59e:	f240 7287 	movw	r2, #1927	@ 0x787
 800f5a2:	491c      	ldr	r1, [pc, #112]	@ (800f614 <tcp_output_control_segment+0x8c>)
 800f5a4:	481c      	ldr	r0, [pc, #112]	@ (800f618 <tcp_output_control_segment+0x90>)
 800f5a6:	f004 f89d 	bl	80136e4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	6879      	ldr	r1, [r7, #4]
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f7fe ff42 	bl	800e438 <tcp_route>
 800f5b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d102      	bne.n	800f5c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f5bc:	23fc      	movs	r3, #252	@ 0xfc
 800f5be:	75fb      	strb	r3, [r7, #23]
 800f5c0:	e01c      	b.n	800f5fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d006      	beq.n	800f5d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	7adb      	ldrb	r3, [r3, #11]
 800f5cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	7a9b      	ldrb	r3, [r3, #10]
 800f5d2:	757b      	strb	r3, [r7, #21]
 800f5d4:	e003      	b.n	800f5de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f5d6:	23ff      	movs	r3, #255	@ 0xff
 800f5d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f5de:	7dba      	ldrb	r2, [r7, #22]
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	9302      	str	r3, [sp, #8]
 800f5e4:	2306      	movs	r3, #6
 800f5e6:	9301      	str	r3, [sp, #4]
 800f5e8:	7d7b      	ldrb	r3, [r7, #21]
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	6879      	ldr	r1, [r7, #4]
 800f5f2:	68b8      	ldr	r0, [r7, #8]
 800f5f4:	f002 fa60 	bl	8011ab8 <ip4_output_if>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f5fc:	68b8      	ldr	r0, [r7, #8]
 800f5fe:	f7fa fdd9 	bl	800a1b4 <pbuf_free>
  return err;
 800f602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	08015d10 	.word	0x08015d10
 800f614:	08016468 	.word	0x08016468
 800f618:	08015d64 	.word	0x08015d64

0800f61c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f61c:	b590      	push	{r4, r7, lr}
 800f61e:	b08b      	sub	sp, #44	@ 0x2c
 800f620:	af04      	add	r7, sp, #16
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
 800f628:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d106      	bne.n	800f63e <tcp_rst+0x22>
 800f630:	4b1f      	ldr	r3, [pc, #124]	@ (800f6b0 <tcp_rst+0x94>)
 800f632:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f636:	491f      	ldr	r1, [pc, #124]	@ (800f6b4 <tcp_rst+0x98>)
 800f638:	481f      	ldr	r0, [pc, #124]	@ (800f6b8 <tcp_rst+0x9c>)
 800f63a:	f004 f853 	bl	80136e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f640:	2b00      	cmp	r3, #0
 800f642:	d106      	bne.n	800f652 <tcp_rst+0x36>
 800f644:	4b1a      	ldr	r3, [pc, #104]	@ (800f6b0 <tcp_rst+0x94>)
 800f646:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f64a:	491c      	ldr	r1, [pc, #112]	@ (800f6bc <tcp_rst+0xa0>)
 800f64c:	481a      	ldr	r0, [pc, #104]	@ (800f6b8 <tcp_rst+0x9c>)
 800f64e:	f004 f849 	bl	80136e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f652:	2300      	movs	r3, #0
 800f654:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f656:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f65a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f65c:	7dfb      	ldrb	r3, [r7, #23]
 800f65e:	b29c      	uxth	r4, r3
 800f660:	68b8      	ldr	r0, [r7, #8]
 800f662:	f7f9 fa5e 	bl	8008b22 <lwip_htonl>
 800f666:	4602      	mov	r2, r0
 800f668:	8abb      	ldrh	r3, [r7, #20]
 800f66a:	9303      	str	r3, [sp, #12]
 800f66c:	2314      	movs	r3, #20
 800f66e:	9302      	str	r3, [sp, #8]
 800f670:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f672:	9301      	str	r3, [sp, #4]
 800f674:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	4613      	mov	r3, r2
 800f67a:	2200      	movs	r2, #0
 800f67c:	4621      	mov	r1, r4
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7ff fe94 	bl	800f3ac <tcp_output_alloc_header_common>
 800f684:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00c      	beq.n	800f6a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f68c:	7dfb      	ldrb	r3, [r7, #23]
 800f68e:	2200      	movs	r2, #0
 800f690:	6939      	ldr	r1, [r7, #16]
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	f7ff ff3a 	bl	800f50c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69a:	683a      	ldr	r2, [r7, #0]
 800f69c:	6939      	ldr	r1, [r7, #16]
 800f69e:	68f8      	ldr	r0, [r7, #12]
 800f6a0:	f7ff ff72 	bl	800f588 <tcp_output_control_segment>
 800f6a4:	e000      	b.n	800f6a8 <tcp_rst+0x8c>
    return;
 800f6a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f6a8:	371c      	adds	r7, #28
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd90      	pop	{r4, r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	08015d10 	.word	0x08015d10
 800f6b4:	08016494 	.word	0x08016494
 800f6b8:	08015d64 	.word	0x08015d64
 800f6bc:	080164b0 	.word	0x080164b0

0800f6c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f6c0:	b590      	push	{r4, r7, lr}
 800f6c2:	b087      	sub	sp, #28
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d106      	bne.n	800f6e4 <tcp_send_empty_ack+0x24>
 800f6d6:	4b28      	ldr	r3, [pc, #160]	@ (800f778 <tcp_send_empty_ack+0xb8>)
 800f6d8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f6dc:	4927      	ldr	r1, [pc, #156]	@ (800f77c <tcp_send_empty_ack+0xbc>)
 800f6de:	4828      	ldr	r0, [pc, #160]	@ (800f780 <tcp_send_empty_ack+0xc0>)
 800f6e0:	f004 f800 	bl	80136e4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f6e4:	7dfb      	ldrb	r3, [r7, #23]
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	f003 0304 	and.w	r3, r3, #4
 800f6ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f6f0:	7d7b      	ldrb	r3, [r7, #21]
 800f6f2:	b29c      	uxth	r4, r3
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7f9 fa12 	bl	8008b22 <lwip_htonl>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2200      	movs	r2, #0
 800f702:	4621      	mov	r1, r4
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7ff fec3 	bl	800f490 <tcp_output_alloc_header>
 800f70a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d109      	bne.n	800f726 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	8b5b      	ldrh	r3, [r3, #26]
 800f716:	f043 0303 	orr.w	r3, r3, #3
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f720:	f06f 0301 	mvn.w	r3, #1
 800f724:	e023      	b.n	800f76e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f726:	7dbb      	ldrb	r3, [r7, #22]
 800f728:	7dfa      	ldrb	r2, [r7, #23]
 800f72a:	6939      	ldr	r1, [r7, #16]
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7ff feed 	bl	800f50c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	3304      	adds	r3, #4
 800f738:	6939      	ldr	r1, [r7, #16]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7ff ff24 	bl	800f588 <tcp_output_control_segment>
 800f740:	4603      	mov	r3, r0
 800f742:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d007      	beq.n	800f75c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	8b5b      	ldrh	r3, [r3, #26]
 800f750:	f043 0303 	orr.w	r3, r3, #3
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	835a      	strh	r2, [r3, #26]
 800f75a:	e006      	b.n	800f76a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	8b5b      	ldrh	r3, [r3, #26]
 800f760:	f023 0303 	bic.w	r3, r3, #3
 800f764:	b29a      	uxth	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f76e:	4618      	mov	r0, r3
 800f770:	371c      	adds	r7, #28
 800f772:	46bd      	mov	sp, r7
 800f774:	bd90      	pop	{r4, r7, pc}
 800f776:	bf00      	nop
 800f778:	08015d10 	.word	0x08015d10
 800f77c:	080164cc 	.word	0x080164cc
 800f780:	08015d64 	.word	0x08015d64

0800f784 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f784:	b590      	push	{r4, r7, lr}
 800f786:	b087      	sub	sp, #28
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f78c:	2300      	movs	r3, #0
 800f78e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d106      	bne.n	800f7a4 <tcp_keepalive+0x20>
 800f796:	4b18      	ldr	r3, [pc, #96]	@ (800f7f8 <tcp_keepalive+0x74>)
 800f798:	f640 0224 	movw	r2, #2084	@ 0x824
 800f79c:	4917      	ldr	r1, [pc, #92]	@ (800f7fc <tcp_keepalive+0x78>)
 800f79e:	4818      	ldr	r0, [pc, #96]	@ (800f800 <tcp_keepalive+0x7c>)
 800f7a0:	f003 ffa0 	bl	80136e4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
 800f7a6:	b29c      	uxth	r4, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7f9 f9b7 	bl	8008b22 <lwip_htonl>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	4621      	mov	r1, r4
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7ff fe68 	bl	800f490 <tcp_output_alloc_header>
 800f7c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d102      	bne.n	800f7ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7cc:	e010      	b.n	800f7f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	6939      	ldr	r1, [r7, #16]
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff fe99 	bl	800f50c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3304      	adds	r3, #4
 800f7e0:	6939      	ldr	r1, [r7, #16]
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7ff fed0 	bl	800f588 <tcp_output_control_segment>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f7ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	371c      	adds	r7, #28
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd90      	pop	{r4, r7, pc}
 800f7f8:	08015d10 	.word	0x08015d10
 800f7fc:	080164ec 	.word	0x080164ec
 800f800:	08015d64 	.word	0x08015d64

0800f804 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f804:	b590      	push	{r4, r7, lr}
 800f806:	b08b      	sub	sp, #44	@ 0x2c
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f80c:	2300      	movs	r3, #0
 800f80e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d106      	bne.n	800f826 <tcp_zero_window_probe+0x22>
 800f818:	4b4c      	ldr	r3, [pc, #304]	@ (800f94c <tcp_zero_window_probe+0x148>)
 800f81a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f81e:	494c      	ldr	r1, [pc, #304]	@ (800f950 <tcp_zero_window_probe+0x14c>)
 800f820:	484c      	ldr	r0, [pc, #304]	@ (800f954 <tcp_zero_window_probe+0x150>)
 800f822:	f003 ff5f 	bl	80136e4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f82a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d101      	bne.n	800f836 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f832:	2300      	movs	r3, #0
 800f834:	e086      	b.n	800f944 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f83c:	2bff      	cmp	r3, #255	@ 0xff
 800f83e:	d007      	beq.n	800f850 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f846:	3301      	adds	r3, #1
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f850:	6a3b      	ldr	r3, [r7, #32]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	899b      	ldrh	r3, [r3, #12]
 800f856:	b29b      	uxth	r3, r3
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f9 f94d 	bl	8008af8 <lwip_htons>
 800f85e:	4603      	mov	r3, r0
 800f860:	b2db      	uxtb	r3, r3
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	2b00      	cmp	r3, #0
 800f868:	d005      	beq.n	800f876 <tcp_zero_window_probe+0x72>
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	891b      	ldrh	r3, [r3, #8]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d101      	bne.n	800f876 <tcp_zero_window_probe+0x72>
 800f872:	2301      	movs	r3, #1
 800f874:	e000      	b.n	800f878 <tcp_zero_window_probe+0x74>
 800f876:	2300      	movs	r3, #0
 800f878:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f87a:	7ffb      	ldrb	r3, [r7, #31]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	bf0c      	ite	eq
 800f880:	2301      	moveq	r3, #1
 800f882:	2300      	movne	r3, #0
 800f884:	b2db      	uxtb	r3, r3
 800f886:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f88c:	b299      	uxth	r1, r3
 800f88e:	6a3b      	ldr	r3, [r7, #32]
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	8bba      	ldrh	r2, [r7, #28]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7ff fdfa 	bl	800f490 <tcp_output_alloc_header>
 800f89c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d102      	bne.n	800f8aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a8:	e04c      	b.n	800f944 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f8b0:	7ffb      	ldrb	r3, [r7, #31]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d011      	beq.n	800f8da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	899b      	ldrh	r3, [r3, #12]
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	b21b      	sxth	r3, r3
 800f8be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f8c2:	b21c      	sxth	r4, r3
 800f8c4:	2011      	movs	r0, #17
 800f8c6:	f7f9 f917 	bl	8008af8 <lwip_htons>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	b21b      	sxth	r3, r3
 800f8ce:	4323      	orrs	r3, r4
 800f8d0:	b21b      	sxth	r3, r3
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	819a      	strh	r2, [r3, #12]
 800f8d8:	e010      	b.n	800f8fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	3314      	adds	r3, #20
 800f8e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f8e2:	6a3b      	ldr	r3, [r7, #32]
 800f8e4:	6858      	ldr	r0, [r3, #4]
 800f8e6:	6a3b      	ldr	r3, [r7, #32]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	891a      	ldrh	r2, [r3, #8]
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	891b      	ldrh	r3, [r3, #8]
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	6939      	ldr	r1, [r7, #16]
 800f8f8:	f7fa fe56 	bl	800a5a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f8fc:	6a3b      	ldr	r3, [r7, #32]
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	4618      	mov	r0, r3
 800f904:	f7f9 f90d 	bl	8008b22 <lwip_htonl>
 800f908:	4603      	mov	r3, r0
 800f90a:	3301      	adds	r3, #1
 800f90c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	da02      	bge.n	800f920 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f924:	2200      	movs	r2, #0
 800f926:	69b9      	ldr	r1, [r7, #24]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff fdef 	bl	800f50c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	3304      	adds	r3, #4
 800f934:	69b9      	ldr	r1, [r7, #24]
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7ff fe26 	bl	800f588 <tcp_output_control_segment>
 800f93c:	4603      	mov	r3, r0
 800f93e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f940:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f944:	4618      	mov	r0, r3
 800f946:	372c      	adds	r7, #44	@ 0x2c
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd90      	pop	{r4, r7, pc}
 800f94c:	08015d10 	.word	0x08015d10
 800f950:	08016508 	.word	0x08016508
 800f954:	08015d64 	.word	0x08015d64

0800f958 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f960:	f7fa ff10 	bl	800a784 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f964:	4b0a      	ldr	r3, [pc, #40]	@ (800f990 <tcpip_tcp_timer+0x38>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d103      	bne.n	800f974 <tcpip_tcp_timer+0x1c>
 800f96c:	4b09      	ldr	r3, [pc, #36]	@ (800f994 <tcpip_tcp_timer+0x3c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d005      	beq.n	800f980 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f974:	2200      	movs	r2, #0
 800f976:	4908      	ldr	r1, [pc, #32]	@ (800f998 <tcpip_tcp_timer+0x40>)
 800f978:	20fa      	movs	r0, #250	@ 0xfa
 800f97a:	f000 f8f3 	bl	800fb64 <sys_timeout>
 800f97e:	e003      	b.n	800f988 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f980:	4b06      	ldr	r3, [pc, #24]	@ (800f99c <tcpip_tcp_timer+0x44>)
 800f982:	2200      	movs	r2, #0
 800f984:	601a      	str	r2, [r3, #0]
  }
}
 800f986:	bf00      	nop
 800f988:	bf00      	nop
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	20008a9c 	.word	0x20008a9c
 800f994:	20008aa0 	.word	0x20008aa0
 800f998:	0800f959 	.word	0x0800f959
 800f99c:	20008ae8 	.word	0x20008ae8

0800f9a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800f9d0 <tcp_timer_needed+0x30>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10f      	bne.n	800f9cc <tcp_timer_needed+0x2c>
 800f9ac:	4b09      	ldr	r3, [pc, #36]	@ (800f9d4 <tcp_timer_needed+0x34>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d103      	bne.n	800f9bc <tcp_timer_needed+0x1c>
 800f9b4:	4b08      	ldr	r3, [pc, #32]	@ (800f9d8 <tcp_timer_needed+0x38>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d007      	beq.n	800f9cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f9bc:	4b04      	ldr	r3, [pc, #16]	@ (800f9d0 <tcp_timer_needed+0x30>)
 800f9be:	2201      	movs	r2, #1
 800f9c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	4905      	ldr	r1, [pc, #20]	@ (800f9dc <tcp_timer_needed+0x3c>)
 800f9c6:	20fa      	movs	r0, #250	@ 0xfa
 800f9c8:	f000 f8cc 	bl	800fb64 <sys_timeout>
  }
}
 800f9cc:	bf00      	nop
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	20008ae8 	.word	0x20008ae8
 800f9d4:	20008a9c 	.word	0x20008a9c
 800f9d8:	20008aa0 	.word	0x20008aa0
 800f9dc:	0800f959 	.word	0x0800f959

0800f9e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b086      	sub	sp, #24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f9ec:	2006      	movs	r0, #6
 800f9ee:	f7f9 fcfb 	bl	80093e8 <memp_malloc>
 800f9f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d109      	bne.n	800fa0e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d151      	bne.n	800faa4 <sys_timeout_abs+0xc4>
 800fa00:	4b2a      	ldr	r3, [pc, #168]	@ (800faac <sys_timeout_abs+0xcc>)
 800fa02:	22be      	movs	r2, #190	@ 0xbe
 800fa04:	492a      	ldr	r1, [pc, #168]	@ (800fab0 <sys_timeout_abs+0xd0>)
 800fa06:	482b      	ldr	r0, [pc, #172]	@ (800fab4 <sys_timeout_abs+0xd4>)
 800fa08:	f003 fe6c 	bl	80136e4 <iprintf>
    return;
 800fa0c:	e04a      	b.n	800faa4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	2200      	movs	r2, #0
 800fa12:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	68ba      	ldr	r2, [r7, #8]
 800fa18:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fa26:	4b24      	ldr	r3, [pc, #144]	@ (800fab8 <sys_timeout_abs+0xd8>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d103      	bne.n	800fa36 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fa2e:	4a22      	ldr	r2, [pc, #136]	@ (800fab8 <sys_timeout_abs+0xd8>)
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	6013      	str	r3, [r2, #0]
    return;
 800fa34:	e037      	b.n	800faa6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	685a      	ldr	r2, [r3, #4]
 800fa3a:	4b1f      	ldr	r3, [pc, #124]	@ (800fab8 <sys_timeout_abs+0xd8>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	0fdb      	lsrs	r3, r3, #31
 800fa44:	f003 0301 	and.w	r3, r3, #1
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d007      	beq.n	800fa5e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fa4e:	4b1a      	ldr	r3, [pc, #104]	@ (800fab8 <sys_timeout_abs+0xd8>)
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fa56:	4a18      	ldr	r2, [pc, #96]	@ (800fab8 <sys_timeout_abs+0xd8>)
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	6013      	str	r3, [r2, #0]
 800fa5c:	e023      	b.n	800faa6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fa5e:	4b16      	ldr	r3, [pc, #88]	@ (800fab8 <sys_timeout_abs+0xd8>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	617b      	str	r3, [r7, #20]
 800fa64:	e01a      	b.n	800fa9c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00b      	beq.n	800fa86 <sys_timeout_abs+0xa6>
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	685a      	ldr	r2, [r3, #4]
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	1ad3      	subs	r3, r2, r3
 800fa7a:	0fdb      	lsrs	r3, r3, #31
 800fa7c:	f003 0301 	and.w	r3, r3, #1
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d007      	beq.n	800fa96 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	693a      	ldr	r2, [r7, #16]
 800fa92:	601a      	str	r2, [r3, #0]
        break;
 800fa94:	e007      	b.n	800faa6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	617b      	str	r3, [r7, #20]
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d1e1      	bne.n	800fa66 <sys_timeout_abs+0x86>
 800faa2:	e000      	b.n	800faa6 <sys_timeout_abs+0xc6>
    return;
 800faa4:	bf00      	nop
      }
    }
  }
}
 800faa6:	3718      	adds	r7, #24
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	0801652c 	.word	0x0801652c
 800fab0:	08016560 	.word	0x08016560
 800fab4:	080165a0 	.word	0x080165a0
 800fab8:	20008ae0 	.word	0x20008ae0

0800fabc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	4798      	blx	r3

  now = sys_now();
 800face:	f7f8 fdf7 	bl	80086c0 <sys_now>
 800fad2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	4b0f      	ldr	r3, [pc, #60]	@ (800fb18 <lwip_cyclic_timer+0x5c>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4413      	add	r3, r2
 800fade:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	1ad3      	subs	r3, r2, r3
 800fae6:	0fdb      	lsrs	r3, r3, #31
 800fae8:	f003 0301 	and.w	r3, r3, #1
 800faec:	b2db      	uxtb	r3, r3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d009      	beq.n	800fb06 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	4413      	add	r3, r2
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	4907      	ldr	r1, [pc, #28]	@ (800fb1c <lwip_cyclic_timer+0x60>)
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff ff6e 	bl	800f9e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fb04:	e004      	b.n	800fb10 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	4904      	ldr	r1, [pc, #16]	@ (800fb1c <lwip_cyclic_timer+0x60>)
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f7ff ff68 	bl	800f9e0 <sys_timeout_abs>
}
 800fb10:	bf00      	nop
 800fb12:	3718      	adds	r7, #24
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	20008ae4 	.word	0x20008ae4
 800fb1c:	0800fabd 	.word	0x0800fabd

0800fb20 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fb26:	2301      	movs	r3, #1
 800fb28:	607b      	str	r3, [r7, #4]
 800fb2a:	e00e      	b.n	800fb4a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fb2c:	4a0b      	ldr	r2, [pc, #44]	@ (800fb5c <sys_timeouts_init+0x3c>)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	00db      	lsls	r3, r3, #3
 800fb38:	4a08      	ldr	r2, [pc, #32]	@ (800fb5c <sys_timeouts_init+0x3c>)
 800fb3a:	4413      	add	r3, r2
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	4908      	ldr	r1, [pc, #32]	@ (800fb60 <sys_timeouts_init+0x40>)
 800fb40:	f000 f810 	bl	800fb64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	3301      	adds	r3, #1
 800fb48:	607b      	str	r3, [r7, #4]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	d9ed      	bls.n	800fb2c <sys_timeouts_init+0xc>
  }
}
 800fb50:	bf00      	nop
 800fb52:	bf00      	nop
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	080175b4 	.word	0x080175b4
 800fb60:	0800fabd 	.word	0x0800fabd

0800fb64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb76:	d306      	bcc.n	800fb86 <sys_timeout+0x22>
 800fb78:	4b0a      	ldr	r3, [pc, #40]	@ (800fba4 <sys_timeout+0x40>)
 800fb7a:	f240 1229 	movw	r2, #297	@ 0x129
 800fb7e:	490a      	ldr	r1, [pc, #40]	@ (800fba8 <sys_timeout+0x44>)
 800fb80:	480a      	ldr	r0, [pc, #40]	@ (800fbac <sys_timeout+0x48>)
 800fb82:	f003 fdaf 	bl	80136e4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fb86:	f7f8 fd9b 	bl	80086c0 <sys_now>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	4413      	add	r3, r2
 800fb90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	68b9      	ldr	r1, [r7, #8]
 800fb96:	6978      	ldr	r0, [r7, #20]
 800fb98:	f7ff ff22 	bl	800f9e0 <sys_timeout_abs>
#endif
}
 800fb9c:	bf00      	nop
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	0801652c 	.word	0x0801652c
 800fba8:	080165c8 	.word	0x080165c8
 800fbac:	080165a0 	.word	0x080165a0

0800fbb0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fbb6:	f7f8 fd83 	bl	80086c0 <sys_now>
 800fbba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800fbbc:	4b1a      	ldr	r3, [pc, #104]	@ (800fc28 <sys_check_timeouts+0x78>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <sys_check_timeouts+0x1a>
 800fbc6:	f7f9 ffbb 	bl	8009b40 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800fbca:	4b18      	ldr	r3, [pc, #96]	@ (800fc2c <sys_check_timeouts+0x7c>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d022      	beq.n	800fc1c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	0fdb      	lsrs	r3, r3, #31
 800fbe0:	f003 0301 	and.w	r3, r3, #1
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d11a      	bne.n	800fc20 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4a0f      	ldr	r2, [pc, #60]	@ (800fc2c <sys_check_timeouts+0x7c>)
 800fbf0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	4a0b      	ldr	r2, [pc, #44]	@ (800fc30 <sys_check_timeouts+0x80>)
 800fc04:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fc06:	68b9      	ldr	r1, [r7, #8]
 800fc08:	2006      	movs	r0, #6
 800fc0a:	f7f9 fc5d 	bl	80094c8 <memp_free>
    if (handler != NULL) {
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d0d3      	beq.n	800fbbc <sys_check_timeouts+0xc>
      handler(arg);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6838      	ldr	r0, [r7, #0]
 800fc18:	4798      	blx	r3
  do {
 800fc1a:	e7cf      	b.n	800fbbc <sys_check_timeouts+0xc>
      return;
 800fc1c:	bf00      	nop
 800fc1e:	e000      	b.n	800fc22 <sys_check_timeouts+0x72>
      return;
 800fc20:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fc22:	3710      	adds	r7, #16
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	20008a8d 	.word	0x20008a8d
 800fc2c:	20008ae0 	.word	0x20008ae0
 800fc30:	20008ae4 	.word	0x20008ae4

0800fc34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fc38:	f003 fc54 	bl	80134e4 <rand>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	4b01      	ldr	r3, [pc, #4]	@ (800fc54 <udp_init+0x20>)
 800fc4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fc50:	bf00      	nop
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	20000028 	.word	0x20000028

0800fc58 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fc62:	4b17      	ldr	r3, [pc, #92]	@ (800fcc0 <udp_new_port+0x68>)
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	1c5a      	adds	r2, r3, #1
 800fc68:	b291      	uxth	r1, r2
 800fc6a:	4a15      	ldr	r2, [pc, #84]	@ (800fcc0 <udp_new_port+0x68>)
 800fc6c:	8011      	strh	r1, [r2, #0]
 800fc6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d103      	bne.n	800fc7e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fc76:	4b12      	ldr	r3, [pc, #72]	@ (800fcc0 <udp_new_port+0x68>)
 800fc78:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800fc7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc7e:	4b11      	ldr	r3, [pc, #68]	@ (800fcc4 <udp_new_port+0x6c>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	603b      	str	r3, [r7, #0]
 800fc84:	e011      	b.n	800fcaa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	8a5a      	ldrh	r2, [r3, #18]
 800fc8a:	4b0d      	ldr	r3, [pc, #52]	@ (800fcc0 <udp_new_port+0x68>)
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d108      	bne.n	800fca4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fc92:	88fb      	ldrh	r3, [r7, #6]
 800fc94:	3301      	adds	r3, #1
 800fc96:	80fb      	strh	r3, [r7, #6]
 800fc98:	88fb      	ldrh	r3, [r7, #6]
 800fc9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fc9e:	d3e0      	bcc.n	800fc62 <udp_new_port+0xa>
        return 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	e007      	b.n	800fcb4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	603b      	str	r3, [r7, #0]
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1ea      	bne.n	800fc86 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fcb0:	4b03      	ldr	r3, [pc, #12]	@ (800fcc0 <udp_new_port+0x68>)
 800fcb2:	881b      	ldrh	r3, [r3, #0]
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr
 800fcc0:	20000028 	.word	0x20000028
 800fcc4:	20008aec 	.word	0x20008aec

0800fcc8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	60b9      	str	r1, [r7, #8]
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d105      	bne.n	800fce8 <udp_input_local_match+0x20>
 800fcdc:	4b27      	ldr	r3, [pc, #156]	@ (800fd7c <udp_input_local_match+0xb4>)
 800fcde:	2287      	movs	r2, #135	@ 0x87
 800fce0:	4927      	ldr	r1, [pc, #156]	@ (800fd80 <udp_input_local_match+0xb8>)
 800fce2:	4828      	ldr	r0, [pc, #160]	@ (800fd84 <udp_input_local_match+0xbc>)
 800fce4:	f003 fcfe 	bl	80136e4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d105      	bne.n	800fcfa <udp_input_local_match+0x32>
 800fcee:	4b23      	ldr	r3, [pc, #140]	@ (800fd7c <udp_input_local_match+0xb4>)
 800fcf0:	2288      	movs	r2, #136	@ 0x88
 800fcf2:	4925      	ldr	r1, [pc, #148]	@ (800fd88 <udp_input_local_match+0xc0>)
 800fcf4:	4823      	ldr	r0, [pc, #140]	@ (800fd84 <udp_input_local_match+0xbc>)
 800fcf6:	f003 fcf5 	bl	80136e4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	7a1b      	ldrb	r3, [r3, #8]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00b      	beq.n	800fd1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	7a1a      	ldrb	r2, [r3, #8]
 800fd06:	4b21      	ldr	r3, [pc, #132]	@ (800fd8c <udp_input_local_match+0xc4>)
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd0e:	3301      	adds	r3, #1
 800fd10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d001      	beq.n	800fd1a <udp_input_local_match+0x52>
    return 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e02b      	b.n	800fd72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d018      	beq.n	800fd52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d013      	beq.n	800fd4e <udp_input_local_match+0x86>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00f      	beq.n	800fd4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fd2e:	4b17      	ldr	r3, [pc, #92]	@ (800fd8c <udp_input_local_match+0xc4>)
 800fd30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd36:	d00a      	beq.n	800fd4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	4b13      	ldr	r3, [pc, #76]	@ (800fd8c <udp_input_local_match+0xc4>)
 800fd3e:	695b      	ldr	r3, [r3, #20]
 800fd40:	405a      	eors	r2, r3
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	3308      	adds	r3, #8
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d110      	bne.n	800fd70 <udp_input_local_match+0xa8>
          return 1;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e00f      	b.n	800fd72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d009      	beq.n	800fd6c <udp_input_local_match+0xa4>
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d005      	beq.n	800fd6c <udp_input_local_match+0xa4>
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	4b09      	ldr	r3, [pc, #36]	@ (800fd8c <udp_input_local_match+0xc4>)
 800fd66:	695b      	ldr	r3, [r3, #20]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d101      	bne.n	800fd70 <udp_input_local_match+0xa8>
        return 1;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e000      	b.n	800fd72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	08016614 	.word	0x08016614
 800fd80:	08016644 	.word	0x08016644
 800fd84:	08016668 	.word	0x08016668
 800fd88:	08016690 	.word	0x08016690
 800fd8c:	20005520 	.word	0x20005520

0800fd90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fd90:	b590      	push	{r4, r7, lr}
 800fd92:	b08d      	sub	sp, #52	@ 0x34
 800fd94:	af02      	add	r7, sp, #8
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d105      	bne.n	800fdb0 <udp_input+0x20>
 800fda4:	4b7c      	ldr	r3, [pc, #496]	@ (800ff98 <udp_input+0x208>)
 800fda6:	22cf      	movs	r2, #207	@ 0xcf
 800fda8:	497c      	ldr	r1, [pc, #496]	@ (800ff9c <udp_input+0x20c>)
 800fdaa:	487d      	ldr	r0, [pc, #500]	@ (800ffa0 <udp_input+0x210>)
 800fdac:	f003 fc9a 	bl	80136e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d105      	bne.n	800fdc2 <udp_input+0x32>
 800fdb6:	4b78      	ldr	r3, [pc, #480]	@ (800ff98 <udp_input+0x208>)
 800fdb8:	22d0      	movs	r2, #208	@ 0xd0
 800fdba:	497a      	ldr	r1, [pc, #488]	@ (800ffa4 <udp_input+0x214>)
 800fdbc:	4878      	ldr	r0, [pc, #480]	@ (800ffa0 <udp_input+0x210>)
 800fdbe:	f003 fc91 	bl	80136e4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	895b      	ldrh	r3, [r3, #10]
 800fdc6:	2b07      	cmp	r3, #7
 800fdc8:	d803      	bhi.n	800fdd2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7fa f9f2 	bl	800a1b4 <pbuf_free>
    goto end;
 800fdd0:	e0de      	b.n	800ff90 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fdd8:	4b73      	ldr	r3, [pc, #460]	@ (800ffa8 <udp_input+0x218>)
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	4a72      	ldr	r2, [pc, #456]	@ (800ffa8 <udp_input+0x218>)
 800fdde:	6812      	ldr	r2, [r2, #0]
 800fde0:	4611      	mov	r1, r2
 800fde2:	4618      	mov	r0, r3
 800fde4:	f001 ff40 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 800fde8:	4603      	mov	r3, r0
 800fdea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	881b      	ldrh	r3, [r3, #0]
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7f8 fe80 	bl	8008af8 <lwip_htons>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	885b      	ldrh	r3, [r3, #2]
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7f8 fe78 	bl	8008af8 <lwip_htons>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800fe10:	2300      	movs	r3, #0
 800fe12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fe14:	2300      	movs	r3, #0
 800fe16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe18:	4b64      	ldr	r3, [pc, #400]	@ (800ffac <udp_input+0x21c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe1e:	e054      	b.n	800feca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fe20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe22:	8a5b      	ldrh	r3, [r3, #18]
 800fe24:	89fa      	ldrh	r2, [r7, #14]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d14a      	bne.n	800fec0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fe2a:	7cfb      	ldrb	r3, [r7, #19]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	6839      	ldr	r1, [r7, #0]
 800fe30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fe32:	f7ff ff49 	bl	800fcc8 <udp_input_local_match>
 800fe36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d041      	beq.n	800fec0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3e:	7c1b      	ldrb	r3, [r3, #16]
 800fe40:	f003 0304 	and.w	r3, r3, #4
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d11d      	bne.n	800fe84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d102      	bne.n	800fe54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe50:	61fb      	str	r3, [r7, #28]
 800fe52:	e017      	b.n	800fe84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fe54:	7cfb      	ldrb	r3, [r7, #19]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d014      	beq.n	800fe84 <udp_input+0xf4>
 800fe5a:	4b53      	ldr	r3, [pc, #332]	@ (800ffa8 <udp_input+0x218>)
 800fe5c:	695b      	ldr	r3, [r3, #20]
 800fe5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe62:	d10f      	bne.n	800fe84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	3304      	adds	r3, #4
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d008      	beq.n	800fe84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fe72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	3304      	adds	r3, #4
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d101      	bne.n	800fe84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fe80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fe84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe86:	8a9b      	ldrh	r3, [r3, #20]
 800fe88:	8a3a      	ldrh	r2, [r7, #16]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d118      	bne.n	800fec0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fe8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d005      	beq.n	800fea2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fe96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	4b43      	ldr	r3, [pc, #268]	@ (800ffa8 <udp_input+0x218>)
 800fe9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d10e      	bne.n	800fec0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fea2:	6a3b      	ldr	r3, [r7, #32]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d014      	beq.n	800fed2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feaa:	68da      	ldr	r2, [r3, #12]
 800feac:	6a3b      	ldr	r3, [r7, #32]
 800feae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800feb0:	4b3e      	ldr	r3, [pc, #248]	@ (800ffac <udp_input+0x21c>)
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800feb8:	4a3c      	ldr	r2, [pc, #240]	@ (800ffac <udp_input+0x21c>)
 800feba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800febc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800febe:	e008      	b.n	800fed2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	627b      	str	r3, [r7, #36]	@ 0x24
 800feca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1a7      	bne.n	800fe20 <udp_input+0x90>
 800fed0:	e000      	b.n	800fed4 <udp_input+0x144>
        break;
 800fed2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <udp_input+0x14e>
    pcb = uncon_pcb;
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <udp_input+0x15a>
    for_us = 1;
 800fee4:	2301      	movs	r3, #1
 800fee6:	76fb      	strb	r3, [r7, #27]
 800fee8:	e00a      	b.n	800ff00 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	3304      	adds	r3, #4
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	4b2d      	ldr	r3, [pc, #180]	@ (800ffa8 <udp_input+0x218>)
 800fef2:	695b      	ldr	r3, [r3, #20]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	bf0c      	ite	eq
 800fef8:	2301      	moveq	r3, #1
 800fefa:	2300      	movne	r3, #0
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ff00:	7efb      	ldrb	r3, [r7, #27]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d041      	beq.n	800ff8a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ff06:	2108      	movs	r1, #8
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7fa f8cd 	bl	800a0a8 <pbuf_remove_header>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00a      	beq.n	800ff2a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ff14:	4b20      	ldr	r3, [pc, #128]	@ (800ff98 <udp_input+0x208>)
 800ff16:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ff1a:	4925      	ldr	r1, [pc, #148]	@ (800ffb0 <udp_input+0x220>)
 800ff1c:	4820      	ldr	r0, [pc, #128]	@ (800ffa0 <udp_input+0x210>)
 800ff1e:	f003 fbe1 	bl	80136e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7fa f946 	bl	800a1b4 <pbuf_free>
      goto end;
 800ff28:	e032      	b.n	800ff90 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d012      	beq.n	800ff56 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ff30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00a      	beq.n	800ff4e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ff38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff3a:	699c      	ldr	r4, [r3, #24]
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff3e:	69d8      	ldr	r0, [r3, #28]
 800ff40:	8a3b      	ldrh	r3, [r7, #16]
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	4b1b      	ldr	r3, [pc, #108]	@ (800ffb4 <udp_input+0x224>)
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff4a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ff4c:	e021      	b.n	800ff92 <udp_input+0x202>
        pbuf_free(p);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7fa f930 	bl	800a1b4 <pbuf_free>
        goto end;
 800ff54:	e01c      	b.n	800ff90 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ff56:	7cfb      	ldrb	r3, [r7, #19]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d112      	bne.n	800ff82 <udp_input+0x1f2>
 800ff5c:	4b12      	ldr	r3, [pc, #72]	@ (800ffa8 <udp_input+0x218>)
 800ff5e:	695b      	ldr	r3, [r3, #20]
 800ff60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ff64:	2be0      	cmp	r3, #224	@ 0xe0
 800ff66:	d00c      	beq.n	800ff82 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ff68:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa8 <udp_input+0x218>)
 800ff6a:	899b      	ldrh	r3, [r3, #12]
 800ff6c:	3308      	adds	r3, #8
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	b21b      	sxth	r3, r3
 800ff72:	4619      	mov	r1, r3
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7fa f90a 	bl	800a18e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ff7a:	2103      	movs	r1, #3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f001 fb53 	bl	8011628 <icmp_dest_unreach>
      pbuf_free(p);
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7fa f916 	bl	800a1b4 <pbuf_free>
  return;
 800ff88:	e003      	b.n	800ff92 <udp_input+0x202>
    pbuf_free(p);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7fa f912 	bl	800a1b4 <pbuf_free>
  return;
 800ff90:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ff92:	372c      	adds	r7, #44	@ 0x2c
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd90      	pop	{r4, r7, pc}
 800ff98:	08016614 	.word	0x08016614
 800ff9c:	080166b8 	.word	0x080166b8
 800ffa0:	08016668 	.word	0x08016668
 800ffa4:	080166d0 	.word	0x080166d0
 800ffa8:	20005520 	.word	0x20005520
 800ffac:	20008aec 	.word	0x20008aec
 800ffb0:	080166ec 	.word	0x080166ec
 800ffb4:	20005530 	.word	0x20005530

0800ffb8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b088      	sub	sp, #32
 800ffbc:	af02      	add	r7, sp, #8
 800ffbe:	60f8      	str	r0, [r7, #12]
 800ffc0:	60b9      	str	r1, [r7, #8]
 800ffc2:	607a      	str	r2, [r7, #4]
 800ffc4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d109      	bne.n	800ffe0 <udp_sendto+0x28>
 800ffcc:	4b23      	ldr	r3, [pc, #140]	@ (801005c <udp_sendto+0xa4>)
 800ffce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ffd2:	4923      	ldr	r1, [pc, #140]	@ (8010060 <udp_sendto+0xa8>)
 800ffd4:	4823      	ldr	r0, [pc, #140]	@ (8010064 <udp_sendto+0xac>)
 800ffd6:	f003 fb85 	bl	80136e4 <iprintf>
 800ffda:	f06f 030f 	mvn.w	r3, #15
 800ffde:	e038      	b.n	8010052 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d109      	bne.n	800fffa <udp_sendto+0x42>
 800ffe6:	4b1d      	ldr	r3, [pc, #116]	@ (801005c <udp_sendto+0xa4>)
 800ffe8:	f240 2219 	movw	r2, #537	@ 0x219
 800ffec:	491e      	ldr	r1, [pc, #120]	@ (8010068 <udp_sendto+0xb0>)
 800ffee:	481d      	ldr	r0, [pc, #116]	@ (8010064 <udp_sendto+0xac>)
 800fff0:	f003 fb78 	bl	80136e4 <iprintf>
 800fff4:	f06f 030f 	mvn.w	r3, #15
 800fff8:	e02b      	b.n	8010052 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d109      	bne.n	8010014 <udp_sendto+0x5c>
 8010000:	4b16      	ldr	r3, [pc, #88]	@ (801005c <udp_sendto+0xa4>)
 8010002:	f240 221a 	movw	r2, #538	@ 0x21a
 8010006:	4919      	ldr	r1, [pc, #100]	@ (801006c <udp_sendto+0xb4>)
 8010008:	4816      	ldr	r0, [pc, #88]	@ (8010064 <udp_sendto+0xac>)
 801000a:	f003 fb6b 	bl	80136e4 <iprintf>
 801000e:	f06f 030f 	mvn.w	r3, #15
 8010012:	e01e      	b.n	8010052 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	7a1b      	ldrb	r3, [r3, #8]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d006      	beq.n	801002a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	7a1b      	ldrb	r3, [r3, #8]
 8010020:	4618      	mov	r0, r3
 8010022:	f7f9 fd67 	bl	8009af4 <netif_get_by_index>
 8010026:	6178      	str	r0, [r7, #20]
 8010028:	e003      	b.n	8010032 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f001 fb86 	bl	801173c <ip4_route>
 8010030:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d102      	bne.n	801003e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010038:	f06f 0303 	mvn.w	r3, #3
 801003c:	e009      	b.n	8010052 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801003e:	887a      	ldrh	r2, [r7, #2]
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	4613      	mov	r3, r2
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	68b9      	ldr	r1, [r7, #8]
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f000 f810 	bl	8010070 <udp_sendto_if>
 8010050:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010052:	4618      	mov	r0, r3
 8010054:	3718      	adds	r7, #24
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	08016614 	.word	0x08016614
 8010060:	08016738 	.word	0x08016738
 8010064:	08016668 	.word	0x08016668
 8010068:	08016750 	.word	0x08016750
 801006c:	0801676c 	.word	0x0801676c

08010070 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b088      	sub	sp, #32
 8010074:	af02      	add	r7, sp, #8
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
 801007c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d109      	bne.n	8010098 <udp_sendto_if+0x28>
 8010084:	4b2e      	ldr	r3, [pc, #184]	@ (8010140 <udp_sendto_if+0xd0>)
 8010086:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801008a:	492e      	ldr	r1, [pc, #184]	@ (8010144 <udp_sendto_if+0xd4>)
 801008c:	482e      	ldr	r0, [pc, #184]	@ (8010148 <udp_sendto_if+0xd8>)
 801008e:	f003 fb29 	bl	80136e4 <iprintf>
 8010092:	f06f 030f 	mvn.w	r3, #15
 8010096:	e04f      	b.n	8010138 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d109      	bne.n	80100b2 <udp_sendto_if+0x42>
 801009e:	4b28      	ldr	r3, [pc, #160]	@ (8010140 <udp_sendto_if+0xd0>)
 80100a0:	f240 2281 	movw	r2, #641	@ 0x281
 80100a4:	4929      	ldr	r1, [pc, #164]	@ (801014c <udp_sendto_if+0xdc>)
 80100a6:	4828      	ldr	r0, [pc, #160]	@ (8010148 <udp_sendto_if+0xd8>)
 80100a8:	f003 fb1c 	bl	80136e4 <iprintf>
 80100ac:	f06f 030f 	mvn.w	r3, #15
 80100b0:	e042      	b.n	8010138 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d109      	bne.n	80100cc <udp_sendto_if+0x5c>
 80100b8:	4b21      	ldr	r3, [pc, #132]	@ (8010140 <udp_sendto_if+0xd0>)
 80100ba:	f240 2282 	movw	r2, #642	@ 0x282
 80100be:	4924      	ldr	r1, [pc, #144]	@ (8010150 <udp_sendto_if+0xe0>)
 80100c0:	4821      	ldr	r0, [pc, #132]	@ (8010148 <udp_sendto_if+0xd8>)
 80100c2:	f003 fb0f 	bl	80136e4 <iprintf>
 80100c6:	f06f 030f 	mvn.w	r3, #15
 80100ca:	e035      	b.n	8010138 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80100cc:	6a3b      	ldr	r3, [r7, #32]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d109      	bne.n	80100e6 <udp_sendto_if+0x76>
 80100d2:	4b1b      	ldr	r3, [pc, #108]	@ (8010140 <udp_sendto_if+0xd0>)
 80100d4:	f240 2283 	movw	r2, #643	@ 0x283
 80100d8:	491e      	ldr	r1, [pc, #120]	@ (8010154 <udp_sendto_if+0xe4>)
 80100da:	481b      	ldr	r0, [pc, #108]	@ (8010148 <udp_sendto_if+0xd8>)
 80100dc:	f003 fb02 	bl	80136e4 <iprintf>
 80100e0:	f06f 030f 	mvn.w	r3, #15
 80100e4:	e028      	b.n	8010138 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d009      	beq.n	8010100 <udp_sendto_if+0x90>
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d005      	beq.n	8010100 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80100fc:	2be0      	cmp	r3, #224	@ 0xe0
 80100fe:	d103      	bne.n	8010108 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010100:	6a3b      	ldr	r3, [r7, #32]
 8010102:	3304      	adds	r3, #4
 8010104:	617b      	str	r3, [r7, #20]
 8010106:	e00b      	b.n	8010120 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	6a3b      	ldr	r3, [r7, #32]
 801010e:	3304      	adds	r3, #4
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	d002      	beq.n	801011c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010116:	f06f 0303 	mvn.w	r3, #3
 801011a:	e00d      	b.n	8010138 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010120:	887a      	ldrh	r2, [r7, #2]
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	9301      	str	r3, [sp, #4]
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	4613      	mov	r3, r2
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	68b9      	ldr	r1, [r7, #8]
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f000 f811 	bl	8010158 <udp_sendto_if_src>
 8010136:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010138:	4618      	mov	r0, r3
 801013a:	3718      	adds	r7, #24
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	08016614 	.word	0x08016614
 8010144:	08016788 	.word	0x08016788
 8010148:	08016668 	.word	0x08016668
 801014c:	080167a4 	.word	0x080167a4
 8010150:	080167c0 	.word	0x080167c0
 8010154:	080167e0 	.word	0x080167e0

08010158 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b08c      	sub	sp, #48	@ 0x30
 801015c:	af04      	add	r7, sp, #16
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]
 8010164:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d109      	bne.n	8010180 <udp_sendto_if_src+0x28>
 801016c:	4b65      	ldr	r3, [pc, #404]	@ (8010304 <udp_sendto_if_src+0x1ac>)
 801016e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010172:	4965      	ldr	r1, [pc, #404]	@ (8010308 <udp_sendto_if_src+0x1b0>)
 8010174:	4865      	ldr	r0, [pc, #404]	@ (801030c <udp_sendto_if_src+0x1b4>)
 8010176:	f003 fab5 	bl	80136e4 <iprintf>
 801017a:	f06f 030f 	mvn.w	r3, #15
 801017e:	e0bc      	b.n	80102fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d109      	bne.n	801019a <udp_sendto_if_src+0x42>
 8010186:	4b5f      	ldr	r3, [pc, #380]	@ (8010304 <udp_sendto_if_src+0x1ac>)
 8010188:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801018c:	4960      	ldr	r1, [pc, #384]	@ (8010310 <udp_sendto_if_src+0x1b8>)
 801018e:	485f      	ldr	r0, [pc, #380]	@ (801030c <udp_sendto_if_src+0x1b4>)
 8010190:	f003 faa8 	bl	80136e4 <iprintf>
 8010194:	f06f 030f 	mvn.w	r3, #15
 8010198:	e0af      	b.n	80102fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d109      	bne.n	80101b4 <udp_sendto_if_src+0x5c>
 80101a0:	4b58      	ldr	r3, [pc, #352]	@ (8010304 <udp_sendto_if_src+0x1ac>)
 80101a2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80101a6:	495b      	ldr	r1, [pc, #364]	@ (8010314 <udp_sendto_if_src+0x1bc>)
 80101a8:	4858      	ldr	r0, [pc, #352]	@ (801030c <udp_sendto_if_src+0x1b4>)
 80101aa:	f003 fa9b 	bl	80136e4 <iprintf>
 80101ae:	f06f 030f 	mvn.w	r3, #15
 80101b2:	e0a2      	b.n	80102fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80101b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d109      	bne.n	80101ce <udp_sendto_if_src+0x76>
 80101ba:	4b52      	ldr	r3, [pc, #328]	@ (8010304 <udp_sendto_if_src+0x1ac>)
 80101bc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80101c0:	4955      	ldr	r1, [pc, #340]	@ (8010318 <udp_sendto_if_src+0x1c0>)
 80101c2:	4852      	ldr	r0, [pc, #328]	@ (801030c <udp_sendto_if_src+0x1b4>)
 80101c4:	f003 fa8e 	bl	80136e4 <iprintf>
 80101c8:	f06f 030f 	mvn.w	r3, #15
 80101cc:	e095      	b.n	80102fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80101ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d109      	bne.n	80101e8 <udp_sendto_if_src+0x90>
 80101d4:	4b4b      	ldr	r3, [pc, #300]	@ (8010304 <udp_sendto_if_src+0x1ac>)
 80101d6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80101da:	4950      	ldr	r1, [pc, #320]	@ (801031c <udp_sendto_if_src+0x1c4>)
 80101dc:	484b      	ldr	r0, [pc, #300]	@ (801030c <udp_sendto_if_src+0x1b4>)
 80101de:	f003 fa81 	bl	80136e4 <iprintf>
 80101e2:	f06f 030f 	mvn.w	r3, #15
 80101e6:	e088      	b.n	80102fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	8a5b      	ldrh	r3, [r3, #18]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d10f      	bne.n	8010210 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80101f0:	68f9      	ldr	r1, [r7, #12]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	8a5b      	ldrh	r3, [r3, #18]
 80101f6:	461a      	mov	r2, r3
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f000 f893 	bl	8010324 <udp_bind>
 80101fe:	4603      	mov	r3, r0
 8010200:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010202:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d002      	beq.n	8010210 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801020a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801020e:	e074      	b.n	80102fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	891b      	ldrh	r3, [r3, #8]
 8010214:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8010218:	4293      	cmp	r3, r2
 801021a:	d902      	bls.n	8010222 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801021c:	f04f 33ff 	mov.w	r3, #4294967295
 8010220:	e06b      	b.n	80102fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010222:	2108      	movs	r1, #8
 8010224:	68b8      	ldr	r0, [r7, #8]
 8010226:	f7f9 ff2f 	bl	800a088 <pbuf_add_header>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d015      	beq.n	801025c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010230:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010234:	2108      	movs	r1, #8
 8010236:	2022      	movs	r0, #34	@ 0x22
 8010238:	f7f9 fcd8 	bl	8009bec <pbuf_alloc>
 801023c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d102      	bne.n	801024a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010244:	f04f 33ff 	mov.w	r3, #4294967295
 8010248:	e057      	b.n	80102fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	891b      	ldrh	r3, [r3, #8]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d006      	beq.n	8010260 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010252:	68b9      	ldr	r1, [r7, #8]
 8010254:	69f8      	ldr	r0, [r7, #28]
 8010256:	f7fa f8c5 	bl	800a3e4 <pbuf_chain>
 801025a:	e001      	b.n	8010260 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	895b      	ldrh	r3, [r3, #10]
 8010264:	2b07      	cmp	r3, #7
 8010266:	d806      	bhi.n	8010276 <udp_sendto_if_src+0x11e>
 8010268:	4b26      	ldr	r3, [pc, #152]	@ (8010304 <udp_sendto_if_src+0x1ac>)
 801026a:	f240 320d 	movw	r2, #781	@ 0x30d
 801026e:	492c      	ldr	r1, [pc, #176]	@ (8010320 <udp_sendto_if_src+0x1c8>)
 8010270:	4826      	ldr	r0, [pc, #152]	@ (801030c <udp_sendto_if_src+0x1b4>)
 8010272:	f003 fa37 	bl	80136e4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	8a5b      	ldrh	r3, [r3, #18]
 8010280:	4618      	mov	r0, r3
 8010282:	f7f8 fc39 	bl	8008af8 <lwip_htons>
 8010286:	4603      	mov	r3, r0
 8010288:	461a      	mov	r2, r3
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801028e:	887b      	ldrh	r3, [r7, #2]
 8010290:	4618      	mov	r0, r3
 8010292:	f7f8 fc31 	bl	8008af8 <lwip_htons>
 8010296:	4603      	mov	r3, r0
 8010298:	461a      	mov	r2, r3
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2200      	movs	r2, #0
 80102a2:	719a      	strb	r2, [r3, #6]
 80102a4:	2200      	movs	r2, #0
 80102a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	891b      	ldrh	r3, [r3, #8]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7f8 fc23 	bl	8008af8 <lwip_htons>
 80102b2:	4603      	mov	r3, r0
 80102b4:	461a      	mov	r2, r3
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80102ba:	2311      	movs	r3, #17
 80102bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	7adb      	ldrb	r3, [r3, #11]
 80102c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	7a9b      	ldrb	r3, [r3, #10]
 80102c8:	7cb9      	ldrb	r1, [r7, #18]
 80102ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80102cc:	9202      	str	r2, [sp, #8]
 80102ce:	7cfa      	ldrb	r2, [r7, #19]
 80102d0:	9201      	str	r2, [sp, #4]
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	460b      	mov	r3, r1
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102da:	69f8      	ldr	r0, [r7, #28]
 80102dc:	f001 fc16 	bl	8011b0c <ip4_output_if_src>
 80102e0:	4603      	mov	r3, r0
 80102e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80102e4:	69fa      	ldr	r2, [r7, #28]
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d004      	beq.n	80102f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80102ec:	69f8      	ldr	r0, [r7, #28]
 80102ee:	f7f9 ff61 	bl	800a1b4 <pbuf_free>
    q = NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80102f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3720      	adds	r7, #32
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	08016614 	.word	0x08016614
 8010308:	08016800 	.word	0x08016800
 801030c:	08016668 	.word	0x08016668
 8010310:	08016820 	.word	0x08016820
 8010314:	08016840 	.word	0x08016840
 8010318:	08016864 	.word	0x08016864
 801031c:	08016888 	.word	0x08016888
 8010320:	080168ac 	.word	0x080168ac

08010324 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	4613      	mov	r3, r2
 8010330:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d101      	bne.n	801033c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010338:	4b39      	ldr	r3, [pc, #228]	@ (8010420 <udp_bind+0xfc>)
 801033a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d109      	bne.n	8010356 <udp_bind+0x32>
 8010342:	4b38      	ldr	r3, [pc, #224]	@ (8010424 <udp_bind+0x100>)
 8010344:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8010348:	4937      	ldr	r1, [pc, #220]	@ (8010428 <udp_bind+0x104>)
 801034a:	4838      	ldr	r0, [pc, #224]	@ (801042c <udp_bind+0x108>)
 801034c:	f003 f9ca 	bl	80136e4 <iprintf>
 8010350:	f06f 030f 	mvn.w	r3, #15
 8010354:	e060      	b.n	8010418 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010356:	2300      	movs	r3, #0
 8010358:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801035a:	4b35      	ldr	r3, [pc, #212]	@ (8010430 <udp_bind+0x10c>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	617b      	str	r3, [r7, #20]
 8010360:	e009      	b.n	8010376 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	429a      	cmp	r2, r3
 8010368:	d102      	bne.n	8010370 <udp_bind+0x4c>
      rebind = 1;
 801036a:	2301      	movs	r3, #1
 801036c:	74fb      	strb	r3, [r7, #19]
      break;
 801036e:	e005      	b.n	801037c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	617b      	str	r3, [r7, #20]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1f2      	bne.n	8010362 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801037c:	88fb      	ldrh	r3, [r7, #6]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d109      	bne.n	8010396 <udp_bind+0x72>
    port = udp_new_port();
 8010382:	f7ff fc69 	bl	800fc58 <udp_new_port>
 8010386:	4603      	mov	r3, r0
 8010388:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801038a:	88fb      	ldrh	r3, [r7, #6]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d12c      	bne.n	80103ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010390:	f06f 0307 	mvn.w	r3, #7
 8010394:	e040      	b.n	8010418 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010396:	4b26      	ldr	r3, [pc, #152]	@ (8010430 <udp_bind+0x10c>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	617b      	str	r3, [r7, #20]
 801039c:	e022      	b.n	80103e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801039e:	68fa      	ldr	r2, [r7, #12]
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d01b      	beq.n	80103de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	8a5b      	ldrh	r3, [r3, #18]
 80103aa:	88fa      	ldrh	r2, [r7, #6]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d116      	bne.n	80103de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d00d      	beq.n	80103d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00a      	beq.n	80103d8 <udp_bind+0xb4>
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d006      	beq.n	80103d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80103ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d003      	beq.n	80103d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80103d8:	f06f 0307 	mvn.w	r3, #7
 80103dc:	e01c      	b.n	8010418 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	617b      	str	r3, [r7, #20]
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1d9      	bne.n	801039e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d002      	beq.n	80103f6 <udp_bind+0xd2>
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	e000      	b.n	80103f8 <udp_bind+0xd4>
 80103f6:	2300      	movs	r3, #0
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	88fa      	ldrh	r2, [r7, #6]
 8010400:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010402:	7cfb      	ldrb	r3, [r7, #19]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d106      	bne.n	8010416 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010408:	4b09      	ldr	r3, [pc, #36]	@ (8010430 <udp_bind+0x10c>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010410:	4a07      	ldr	r2, [pc, #28]	@ (8010430 <udp_bind+0x10c>)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	080175cc 	.word	0x080175cc
 8010424:	08016614 	.word	0x08016614
 8010428:	080168dc 	.word	0x080168dc
 801042c:	08016668 	.word	0x08016668
 8010430:	20008aec 	.word	0x20008aec

08010434 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d107      	bne.n	8010456 <udp_recv+0x22>
 8010446:	4b08      	ldr	r3, [pc, #32]	@ (8010468 <udp_recv+0x34>)
 8010448:	f240 428a 	movw	r2, #1162	@ 0x48a
 801044c:	4907      	ldr	r1, [pc, #28]	@ (801046c <udp_recv+0x38>)
 801044e:	4808      	ldr	r0, [pc, #32]	@ (8010470 <udp_recv+0x3c>)
 8010450:	f003 f948 	bl	80136e4 <iprintf>
 8010454:	e005      	b.n	8010462 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	68ba      	ldr	r2, [r7, #8]
 801045a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	61da      	str	r2, [r3, #28]
}
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	08016614 	.word	0x08016614
 801046c:	08016948 	.word	0x08016948
 8010470:	08016668 	.word	0x08016668

08010474 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d107      	bne.n	8010492 <udp_remove+0x1e>
 8010482:	4b19      	ldr	r3, [pc, #100]	@ (80104e8 <udp_remove+0x74>)
 8010484:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8010488:	4918      	ldr	r1, [pc, #96]	@ (80104ec <udp_remove+0x78>)
 801048a:	4819      	ldr	r0, [pc, #100]	@ (80104f0 <udp_remove+0x7c>)
 801048c:	f003 f92a 	bl	80136e4 <iprintf>
 8010490:	e026      	b.n	80104e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010492:	4b18      	ldr	r3, [pc, #96]	@ (80104f4 <udp_remove+0x80>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	429a      	cmp	r2, r3
 801049a:	d105      	bne.n	80104a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801049c:	4b15      	ldr	r3, [pc, #84]	@ (80104f4 <udp_remove+0x80>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	4a14      	ldr	r2, [pc, #80]	@ (80104f4 <udp_remove+0x80>)
 80104a4:	6013      	str	r3, [r2, #0]
 80104a6:	e017      	b.n	80104d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80104a8:	4b12      	ldr	r3, [pc, #72]	@ (80104f4 <udp_remove+0x80>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	60fb      	str	r3, [r7, #12]
 80104ae:	e010      	b.n	80104d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d009      	beq.n	80104cc <udp_remove+0x58>
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d104      	bne.n	80104cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	68da      	ldr	r2, [r3, #12]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	60da      	str	r2, [r3, #12]
        break;
 80104ca:	e005      	b.n	80104d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	60fb      	str	r3, [r7, #12]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1eb      	bne.n	80104b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80104d8:	6879      	ldr	r1, [r7, #4]
 80104da:	2000      	movs	r0, #0
 80104dc:	f7f8 fff4 	bl	80094c8 <memp_free>
}
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	08016614 	.word	0x08016614
 80104ec:	08016960 	.word	0x08016960
 80104f0:	08016668 	.word	0x08016668
 80104f4:	20008aec 	.word	0x20008aec

080104f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80104fe:	2000      	movs	r0, #0
 8010500:	f7f8 ff72 	bl	80093e8 <memp_malloc>
 8010504:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d007      	beq.n	801051c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801050c:	2220      	movs	r2, #32
 801050e:	2100      	movs	r1, #0
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f003 fa3f 	bl	8013994 <memset>
    pcb->ttl = UDP_TTL;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	22ff      	movs	r2, #255	@ 0xff
 801051a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801051c:	687b      	ldr	r3, [r7, #4]
}
 801051e:	4618      	mov	r0, r3
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010528:	b480      	push	{r7}
 801052a:	b085      	sub	sp, #20
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d01e      	beq.n	8010576 <udp_netif_ip_addr_changed+0x4e>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d01a      	beq.n	8010576 <udp_netif_ip_addr_changed+0x4e>
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d017      	beq.n	8010576 <udp_netif_ip_addr_changed+0x4e>
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d013      	beq.n	8010576 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801054e:	4b0d      	ldr	r3, [pc, #52]	@ (8010584 <udp_netif_ip_addr_changed+0x5c>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	60fb      	str	r3, [r7, #12]
 8010554:	e00c      	b.n	8010570 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	429a      	cmp	r2, r3
 8010560:	d103      	bne.n	801056a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	60fb      	str	r3, [r7, #12]
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d1ef      	bne.n	8010556 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010576:	bf00      	nop
 8010578:	3714      	adds	r7, #20
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop
 8010584:	20008aec 	.word	0x20008aec

08010588 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010590:	4915      	ldr	r1, [pc, #84]	@ (80105e8 <etharp_free_entry+0x60>)
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	4613      	mov	r3, r2
 8010596:	005b      	lsls	r3, r3, #1
 8010598:	4413      	add	r3, r2
 801059a:	00db      	lsls	r3, r3, #3
 801059c:	440b      	add	r3, r1
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d013      	beq.n	80105cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80105a4:	4910      	ldr	r1, [pc, #64]	@ (80105e8 <etharp_free_entry+0x60>)
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	4613      	mov	r3, r2
 80105aa:	005b      	lsls	r3, r3, #1
 80105ac:	4413      	add	r3, r2
 80105ae:	00db      	lsls	r3, r3, #3
 80105b0:	440b      	add	r3, r1
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7f9 fdfd 	bl	800a1b4 <pbuf_free>
    arp_table[i].q = NULL;
 80105ba:	490b      	ldr	r1, [pc, #44]	@ (80105e8 <etharp_free_entry+0x60>)
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	4613      	mov	r3, r2
 80105c0:	005b      	lsls	r3, r3, #1
 80105c2:	4413      	add	r3, r2
 80105c4:	00db      	lsls	r3, r3, #3
 80105c6:	440b      	add	r3, r1
 80105c8:	2200      	movs	r2, #0
 80105ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80105cc:	4906      	ldr	r1, [pc, #24]	@ (80105e8 <etharp_free_entry+0x60>)
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	4613      	mov	r3, r2
 80105d2:	005b      	lsls	r3, r3, #1
 80105d4:	4413      	add	r3, r2
 80105d6:	00db      	lsls	r3, r3, #3
 80105d8:	440b      	add	r3, r1
 80105da:	3314      	adds	r3, #20
 80105dc:	2200      	movs	r2, #0
 80105de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80105e0:	bf00      	nop
 80105e2:	3708      	adds	r7, #8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	20008af0 	.word	0x20008af0

080105ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105f2:	2300      	movs	r3, #0
 80105f4:	607b      	str	r3, [r7, #4]
 80105f6:	e096      	b.n	8010726 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80105f8:	494f      	ldr	r1, [pc, #316]	@ (8010738 <etharp_tmr+0x14c>)
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	440b      	add	r3, r1
 8010606:	3314      	adds	r3, #20
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801060c:	78fb      	ldrb	r3, [r7, #3]
 801060e:	2b00      	cmp	r3, #0
 8010610:	f000 8086 	beq.w	8010720 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010614:	4948      	ldr	r1, [pc, #288]	@ (8010738 <etharp_tmr+0x14c>)
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	4613      	mov	r3, r2
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	4413      	add	r3, r2
 801061e:	00db      	lsls	r3, r3, #3
 8010620:	440b      	add	r3, r1
 8010622:	3312      	adds	r3, #18
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	3301      	adds	r3, #1
 8010628:	b298      	uxth	r0, r3
 801062a:	4943      	ldr	r1, [pc, #268]	@ (8010738 <etharp_tmr+0x14c>)
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	4613      	mov	r3, r2
 8010630:	005b      	lsls	r3, r3, #1
 8010632:	4413      	add	r3, r2
 8010634:	00db      	lsls	r3, r3, #3
 8010636:	440b      	add	r3, r1
 8010638:	3312      	adds	r3, #18
 801063a:	4602      	mov	r2, r0
 801063c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801063e:	493e      	ldr	r1, [pc, #248]	@ (8010738 <etharp_tmr+0x14c>)
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	4613      	mov	r3, r2
 8010644:	005b      	lsls	r3, r3, #1
 8010646:	4413      	add	r3, r2
 8010648:	00db      	lsls	r3, r3, #3
 801064a:	440b      	add	r3, r1
 801064c:	3312      	adds	r3, #18
 801064e:	881b      	ldrh	r3, [r3, #0]
 8010650:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010654:	d215      	bcs.n	8010682 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010656:	4938      	ldr	r1, [pc, #224]	@ (8010738 <etharp_tmr+0x14c>)
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	4613      	mov	r3, r2
 801065c:	005b      	lsls	r3, r3, #1
 801065e:	4413      	add	r3, r2
 8010660:	00db      	lsls	r3, r3, #3
 8010662:	440b      	add	r3, r1
 8010664:	3314      	adds	r3, #20
 8010666:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010668:	2b01      	cmp	r3, #1
 801066a:	d10e      	bne.n	801068a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801066c:	4932      	ldr	r1, [pc, #200]	@ (8010738 <etharp_tmr+0x14c>)
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	4613      	mov	r3, r2
 8010672:	005b      	lsls	r3, r3, #1
 8010674:	4413      	add	r3, r2
 8010676:	00db      	lsls	r3, r3, #3
 8010678:	440b      	add	r3, r1
 801067a:	3312      	adds	r3, #18
 801067c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801067e:	2b04      	cmp	r3, #4
 8010680:	d903      	bls.n	801068a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f7ff ff80 	bl	8010588 <etharp_free_entry>
 8010688:	e04a      	b.n	8010720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801068a:	492b      	ldr	r1, [pc, #172]	@ (8010738 <etharp_tmr+0x14c>)
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	4613      	mov	r3, r2
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	4413      	add	r3, r2
 8010694:	00db      	lsls	r3, r3, #3
 8010696:	440b      	add	r3, r1
 8010698:	3314      	adds	r3, #20
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	2b03      	cmp	r3, #3
 801069e:	d10a      	bne.n	80106b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80106a0:	4925      	ldr	r1, [pc, #148]	@ (8010738 <etharp_tmr+0x14c>)
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	4613      	mov	r3, r2
 80106a6:	005b      	lsls	r3, r3, #1
 80106a8:	4413      	add	r3, r2
 80106aa:	00db      	lsls	r3, r3, #3
 80106ac:	440b      	add	r3, r1
 80106ae:	3314      	adds	r3, #20
 80106b0:	2204      	movs	r2, #4
 80106b2:	701a      	strb	r2, [r3, #0]
 80106b4:	e034      	b.n	8010720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80106b6:	4920      	ldr	r1, [pc, #128]	@ (8010738 <etharp_tmr+0x14c>)
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	4613      	mov	r3, r2
 80106bc:	005b      	lsls	r3, r3, #1
 80106be:	4413      	add	r3, r2
 80106c0:	00db      	lsls	r3, r3, #3
 80106c2:	440b      	add	r3, r1
 80106c4:	3314      	adds	r3, #20
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	2b04      	cmp	r3, #4
 80106ca:	d10a      	bne.n	80106e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80106cc:	491a      	ldr	r1, [pc, #104]	@ (8010738 <etharp_tmr+0x14c>)
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	4613      	mov	r3, r2
 80106d2:	005b      	lsls	r3, r3, #1
 80106d4:	4413      	add	r3, r2
 80106d6:	00db      	lsls	r3, r3, #3
 80106d8:	440b      	add	r3, r1
 80106da:	3314      	adds	r3, #20
 80106dc:	2202      	movs	r2, #2
 80106de:	701a      	strb	r2, [r3, #0]
 80106e0:	e01e      	b.n	8010720 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80106e2:	4915      	ldr	r1, [pc, #84]	@ (8010738 <etharp_tmr+0x14c>)
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	4613      	mov	r3, r2
 80106e8:	005b      	lsls	r3, r3, #1
 80106ea:	4413      	add	r3, r2
 80106ec:	00db      	lsls	r3, r3, #3
 80106ee:	440b      	add	r3, r1
 80106f0:	3314      	adds	r3, #20
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d113      	bne.n	8010720 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80106f8:	490f      	ldr	r1, [pc, #60]	@ (8010738 <etharp_tmr+0x14c>)
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	4613      	mov	r3, r2
 80106fe:	005b      	lsls	r3, r3, #1
 8010700:	4413      	add	r3, r2
 8010702:	00db      	lsls	r3, r3, #3
 8010704:	440b      	add	r3, r1
 8010706:	3308      	adds	r3, #8
 8010708:	6818      	ldr	r0, [r3, #0]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	4613      	mov	r3, r2
 801070e:	005b      	lsls	r3, r3, #1
 8010710:	4413      	add	r3, r2
 8010712:	00db      	lsls	r3, r3, #3
 8010714:	4a08      	ldr	r2, [pc, #32]	@ (8010738 <etharp_tmr+0x14c>)
 8010716:	4413      	add	r3, r2
 8010718:	3304      	adds	r3, #4
 801071a:	4619      	mov	r1, r3
 801071c:	f000 fe6e 	bl	80113fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	3301      	adds	r3, #1
 8010724:	607b      	str	r3, [r7, #4]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b09      	cmp	r3, #9
 801072a:	f77f af65 	ble.w	80105f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801072e:	bf00      	nop
 8010730:	bf00      	nop
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20008af0 	.word	0x20008af0

0801073c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b08a      	sub	sp, #40	@ 0x28
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	460b      	mov	r3, r1
 8010746:	607a      	str	r2, [r7, #4]
 8010748:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801074a:	230a      	movs	r3, #10
 801074c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801074e:	230a      	movs	r3, #10
 8010750:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010752:	230a      	movs	r3, #10
 8010754:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8010756:	2300      	movs	r3, #0
 8010758:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801075a:	230a      	movs	r3, #10
 801075c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	83bb      	strh	r3, [r7, #28]
 8010762:	2300      	movs	r3, #0
 8010764:	837b      	strh	r3, [r7, #26]
 8010766:	2300      	movs	r3, #0
 8010768:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801076a:	2300      	movs	r3, #0
 801076c:	843b      	strh	r3, [r7, #32]
 801076e:	e0ae      	b.n	80108ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010770:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010774:	49a6      	ldr	r1, [pc, #664]	@ (8010a10 <etharp_find_entry+0x2d4>)
 8010776:	4613      	mov	r3, r2
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	4413      	add	r3, r2
 801077c:	00db      	lsls	r3, r3, #3
 801077e:	440b      	add	r3, r1
 8010780:	3314      	adds	r3, #20
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801078a:	2b0a      	cmp	r3, #10
 801078c:	d105      	bne.n	801079a <etharp_find_entry+0x5e>
 801078e:	7dfb      	ldrb	r3, [r7, #23]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d102      	bne.n	801079a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010794:	8c3b      	ldrh	r3, [r7, #32]
 8010796:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010798:	e095      	b.n	80108c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801079a:	7dfb      	ldrb	r3, [r7, #23]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f000 8092 	beq.w	80108c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80107a2:	7dfb      	ldrb	r3, [r7, #23]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d009      	beq.n	80107bc <etharp_find_entry+0x80>
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d806      	bhi.n	80107bc <etharp_find_entry+0x80>
 80107ae:	4b99      	ldr	r3, [pc, #612]	@ (8010a14 <etharp_find_entry+0x2d8>)
 80107b0:	f240 1223 	movw	r2, #291	@ 0x123
 80107b4:	4998      	ldr	r1, [pc, #608]	@ (8010a18 <etharp_find_entry+0x2dc>)
 80107b6:	4899      	ldr	r0, [pc, #612]	@ (8010a1c <etharp_find_entry+0x2e0>)
 80107b8:	f002 ff94 	bl	80136e4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d020      	beq.n	8010804 <etharp_find_entry+0xc8>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	6819      	ldr	r1, [r3, #0]
 80107c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107ca:	4891      	ldr	r0, [pc, #580]	@ (8010a10 <etharp_find_entry+0x2d4>)
 80107cc:	4613      	mov	r3, r2
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	4413      	add	r3, r2
 80107d2:	00db      	lsls	r3, r3, #3
 80107d4:	4403      	add	r3, r0
 80107d6:	3304      	adds	r3, #4
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	4299      	cmp	r1, r3
 80107dc:	d112      	bne.n	8010804 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00c      	beq.n	80107fe <etharp_find_entry+0xc2>
 80107e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107e8:	4989      	ldr	r1, [pc, #548]	@ (8010a10 <etharp_find_entry+0x2d4>)
 80107ea:	4613      	mov	r3, r2
 80107ec:	005b      	lsls	r3, r3, #1
 80107ee:	4413      	add	r3, r2
 80107f0:	00db      	lsls	r3, r3, #3
 80107f2:	440b      	add	r3, r1
 80107f4:	3308      	adds	r3, #8
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d102      	bne.n	8010804 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80107fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010802:	e100      	b.n	8010a06 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010804:	7dfb      	ldrb	r3, [r7, #23]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d140      	bne.n	801088c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801080a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801080e:	4980      	ldr	r1, [pc, #512]	@ (8010a10 <etharp_find_entry+0x2d4>)
 8010810:	4613      	mov	r3, r2
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	4413      	add	r3, r2
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	440b      	add	r3, r1
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d01a      	beq.n	8010856 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010820:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010824:	497a      	ldr	r1, [pc, #488]	@ (8010a10 <etharp_find_entry+0x2d4>)
 8010826:	4613      	mov	r3, r2
 8010828:	005b      	lsls	r3, r3, #1
 801082a:	4413      	add	r3, r2
 801082c:	00db      	lsls	r3, r3, #3
 801082e:	440b      	add	r3, r1
 8010830:	3312      	adds	r3, #18
 8010832:	881b      	ldrh	r3, [r3, #0]
 8010834:	8bba      	ldrh	r2, [r7, #28]
 8010836:	429a      	cmp	r2, r3
 8010838:	d845      	bhi.n	80108c6 <etharp_find_entry+0x18a>
            old_queue = i;
 801083a:	8c3b      	ldrh	r3, [r7, #32]
 801083c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801083e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010842:	4973      	ldr	r1, [pc, #460]	@ (8010a10 <etharp_find_entry+0x2d4>)
 8010844:	4613      	mov	r3, r2
 8010846:	005b      	lsls	r3, r3, #1
 8010848:	4413      	add	r3, r2
 801084a:	00db      	lsls	r3, r3, #3
 801084c:	440b      	add	r3, r1
 801084e:	3312      	adds	r3, #18
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	83bb      	strh	r3, [r7, #28]
 8010854:	e037      	b.n	80108c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010856:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801085a:	496d      	ldr	r1, [pc, #436]	@ (8010a10 <etharp_find_entry+0x2d4>)
 801085c:	4613      	mov	r3, r2
 801085e:	005b      	lsls	r3, r3, #1
 8010860:	4413      	add	r3, r2
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	440b      	add	r3, r1
 8010866:	3312      	adds	r3, #18
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	8b7a      	ldrh	r2, [r7, #26]
 801086c:	429a      	cmp	r2, r3
 801086e:	d82a      	bhi.n	80108c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8010870:	8c3b      	ldrh	r3, [r7, #32]
 8010872:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8010874:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010878:	4965      	ldr	r1, [pc, #404]	@ (8010a10 <etharp_find_entry+0x2d4>)
 801087a:	4613      	mov	r3, r2
 801087c:	005b      	lsls	r3, r3, #1
 801087e:	4413      	add	r3, r2
 8010880:	00db      	lsls	r3, r3, #3
 8010882:	440b      	add	r3, r1
 8010884:	3312      	adds	r3, #18
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	837b      	strh	r3, [r7, #26]
 801088a:	e01c      	b.n	80108c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801088c:	7dfb      	ldrb	r3, [r7, #23]
 801088e:	2b01      	cmp	r3, #1
 8010890:	d919      	bls.n	80108c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010896:	495e      	ldr	r1, [pc, #376]	@ (8010a10 <etharp_find_entry+0x2d4>)
 8010898:	4613      	mov	r3, r2
 801089a:	005b      	lsls	r3, r3, #1
 801089c:	4413      	add	r3, r2
 801089e:	00db      	lsls	r3, r3, #3
 80108a0:	440b      	add	r3, r1
 80108a2:	3312      	adds	r3, #18
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	8b3a      	ldrh	r2, [r7, #24]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d80c      	bhi.n	80108c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80108ac:	8c3b      	ldrh	r3, [r7, #32]
 80108ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80108b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108b4:	4956      	ldr	r1, [pc, #344]	@ (8010a10 <etharp_find_entry+0x2d4>)
 80108b6:	4613      	mov	r3, r2
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	4413      	add	r3, r2
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	440b      	add	r3, r1
 80108c0:	3312      	adds	r3, #18
 80108c2:	881b      	ldrh	r3, [r3, #0]
 80108c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80108c6:	8c3b      	ldrh	r3, [r7, #32]
 80108c8:	3301      	adds	r3, #1
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	843b      	strh	r3, [r7, #32]
 80108ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80108d2:	2b09      	cmp	r3, #9
 80108d4:	f77f af4c 	ble.w	8010770 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80108d8:	7afb      	ldrb	r3, [r7, #11]
 80108da:	f003 0302 	and.w	r3, r3, #2
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d108      	bne.n	80108f4 <etharp_find_entry+0x1b8>
 80108e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80108e6:	2b0a      	cmp	r3, #10
 80108e8:	d107      	bne.n	80108fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80108ea:	7afb      	ldrb	r3, [r7, #11]
 80108ec:	f003 0301 	and.w	r3, r3, #1
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d102      	bne.n	80108fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80108f4:	f04f 33ff 	mov.w	r3, #4294967295
 80108f8:	e085      	b.n	8010a06 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80108fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80108fe:	2b09      	cmp	r3, #9
 8010900:	dc02      	bgt.n	8010908 <etharp_find_entry+0x1cc>
    i = empty;
 8010902:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010904:	843b      	strh	r3, [r7, #32]
 8010906:	e039      	b.n	801097c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010908:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801090c:	2b09      	cmp	r3, #9
 801090e:	dc14      	bgt.n	801093a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010910:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010912:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010918:	493d      	ldr	r1, [pc, #244]	@ (8010a10 <etharp_find_entry+0x2d4>)
 801091a:	4613      	mov	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	440b      	add	r3, r1
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d018      	beq.n	801095c <etharp_find_entry+0x220>
 801092a:	4b3a      	ldr	r3, [pc, #232]	@ (8010a14 <etharp_find_entry+0x2d8>)
 801092c:	f240 126d 	movw	r2, #365	@ 0x16d
 8010930:	493b      	ldr	r1, [pc, #236]	@ (8010a20 <etharp_find_entry+0x2e4>)
 8010932:	483a      	ldr	r0, [pc, #232]	@ (8010a1c <etharp_find_entry+0x2e0>)
 8010934:	f002 fed6 	bl	80136e4 <iprintf>
 8010938:	e010      	b.n	801095c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801093a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801093e:	2b09      	cmp	r3, #9
 8010940:	dc02      	bgt.n	8010948 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010942:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010944:	843b      	strh	r3, [r7, #32]
 8010946:	e009      	b.n	801095c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010948:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801094c:	2b09      	cmp	r3, #9
 801094e:	dc02      	bgt.n	8010956 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010950:	8bfb      	ldrh	r3, [r7, #30]
 8010952:	843b      	strh	r3, [r7, #32]
 8010954:	e002      	b.n	801095c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010956:	f04f 33ff 	mov.w	r3, #4294967295
 801095a:	e054      	b.n	8010a06 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801095c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010960:	2b09      	cmp	r3, #9
 8010962:	dd06      	ble.n	8010972 <etharp_find_entry+0x236>
 8010964:	4b2b      	ldr	r3, [pc, #172]	@ (8010a14 <etharp_find_entry+0x2d8>)
 8010966:	f240 127f 	movw	r2, #383	@ 0x17f
 801096a:	492e      	ldr	r1, [pc, #184]	@ (8010a24 <etharp_find_entry+0x2e8>)
 801096c:	482b      	ldr	r0, [pc, #172]	@ (8010a1c <etharp_find_entry+0x2e0>)
 801096e:	f002 feb9 	bl	80136e4 <iprintf>
    etharp_free_entry(i);
 8010972:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010976:	4618      	mov	r0, r3
 8010978:	f7ff fe06 	bl	8010588 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801097c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010980:	2b09      	cmp	r3, #9
 8010982:	dd06      	ble.n	8010992 <etharp_find_entry+0x256>
 8010984:	4b23      	ldr	r3, [pc, #140]	@ (8010a14 <etharp_find_entry+0x2d8>)
 8010986:	f240 1283 	movw	r2, #387	@ 0x183
 801098a:	4926      	ldr	r1, [pc, #152]	@ (8010a24 <etharp_find_entry+0x2e8>)
 801098c:	4823      	ldr	r0, [pc, #140]	@ (8010a1c <etharp_find_entry+0x2e0>)
 801098e:	f002 fea9 	bl	80136e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010996:	491e      	ldr	r1, [pc, #120]	@ (8010a10 <etharp_find_entry+0x2d4>)
 8010998:	4613      	mov	r3, r2
 801099a:	005b      	lsls	r3, r3, #1
 801099c:	4413      	add	r3, r2
 801099e:	00db      	lsls	r3, r3, #3
 80109a0:	440b      	add	r3, r1
 80109a2:	3314      	adds	r3, #20
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d006      	beq.n	80109b8 <etharp_find_entry+0x27c>
 80109aa:	4b1a      	ldr	r3, [pc, #104]	@ (8010a14 <etharp_find_entry+0x2d8>)
 80109ac:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80109b0:	491d      	ldr	r1, [pc, #116]	@ (8010a28 <etharp_find_entry+0x2ec>)
 80109b2:	481a      	ldr	r0, [pc, #104]	@ (8010a1c <etharp_find_entry+0x2e0>)
 80109b4:	f002 fe96 	bl	80136e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00b      	beq.n	80109d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80109be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6819      	ldr	r1, [r3, #0]
 80109c6:	4812      	ldr	r0, [pc, #72]	@ (8010a10 <etharp_find_entry+0x2d4>)
 80109c8:	4613      	mov	r3, r2
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4413      	add	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4403      	add	r3, r0
 80109d2:	3304      	adds	r3, #4
 80109d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80109d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109da:	490d      	ldr	r1, [pc, #52]	@ (8010a10 <etharp_find_entry+0x2d4>)
 80109dc:	4613      	mov	r3, r2
 80109de:	005b      	lsls	r3, r3, #1
 80109e0:	4413      	add	r3, r2
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	440b      	add	r3, r1
 80109e6:	3312      	adds	r3, #18
 80109e8:	2200      	movs	r2, #0
 80109ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80109ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109f0:	4907      	ldr	r1, [pc, #28]	@ (8010a10 <etharp_find_entry+0x2d4>)
 80109f2:	4613      	mov	r3, r2
 80109f4:	005b      	lsls	r3, r3, #1
 80109f6:	4413      	add	r3, r2
 80109f8:	00db      	lsls	r3, r3, #3
 80109fa:	440b      	add	r3, r1
 80109fc:	3308      	adds	r3, #8
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010a02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3728      	adds	r7, #40	@ 0x28
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20008af0 	.word	0x20008af0
 8010a14:	08016978 	.word	0x08016978
 8010a18:	080169b0 	.word	0x080169b0
 8010a1c:	080169f0 	.word	0x080169f0
 8010a20:	08016a18 	.word	0x08016a18
 8010a24:	08016a30 	.word	0x08016a30
 8010a28:	08016a44 	.word	0x08016a44

08010a2c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b088      	sub	sp, #32
 8010a30:	af02      	add	r7, sp, #8
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
 8010a38:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010a40:	2b06      	cmp	r3, #6
 8010a42:	d006      	beq.n	8010a52 <etharp_update_arp_entry+0x26>
 8010a44:	4b48      	ldr	r3, [pc, #288]	@ (8010b68 <etharp_update_arp_entry+0x13c>)
 8010a46:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8010a4a:	4948      	ldr	r1, [pc, #288]	@ (8010b6c <etharp_update_arp_entry+0x140>)
 8010a4c:	4848      	ldr	r0, [pc, #288]	@ (8010b70 <etharp_update_arp_entry+0x144>)
 8010a4e:	f002 fe49 	bl	80136e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d012      	beq.n	8010a7e <etharp_update_arp_entry+0x52>
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00e      	beq.n	8010a7e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68f9      	ldr	r1, [r7, #12]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f001 f8fe 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 8010a6c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d105      	bne.n	8010a7e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a7a:	2be0      	cmp	r3, #224	@ 0xe0
 8010a7c:	d102      	bne.n	8010a84 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a7e:	f06f 030f 	mvn.w	r3, #15
 8010a82:	e06c      	b.n	8010b5e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010a84:	78fb      	ldrb	r3, [r7, #3]
 8010a86:	68fa      	ldr	r2, [r7, #12]
 8010a88:	4619      	mov	r1, r3
 8010a8a:	68b8      	ldr	r0, [r7, #8]
 8010a8c:	f7ff fe56 	bl	801073c <etharp_find_entry>
 8010a90:	4603      	mov	r3, r0
 8010a92:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010a94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	da02      	bge.n	8010aa2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010a9c:	8afb      	ldrh	r3, [r7, #22]
 8010a9e:	b25b      	sxtb	r3, r3
 8010aa0:	e05d      	b.n	8010b5e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010aa2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010aa6:	4933      	ldr	r1, [pc, #204]	@ (8010b74 <etharp_update_arp_entry+0x148>)
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	005b      	lsls	r3, r3, #1
 8010aac:	4413      	add	r3, r2
 8010aae:	00db      	lsls	r3, r3, #3
 8010ab0:	440b      	add	r3, r1
 8010ab2:	3314      	adds	r3, #20
 8010ab4:	2202      	movs	r2, #2
 8010ab6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010ab8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010abc:	492d      	ldr	r1, [pc, #180]	@ (8010b74 <etharp_update_arp_entry+0x148>)
 8010abe:	4613      	mov	r3, r2
 8010ac0:	005b      	lsls	r3, r3, #1
 8010ac2:	4413      	add	r3, r2
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	440b      	add	r3, r1
 8010ac8:	3308      	adds	r3, #8
 8010aca:	68fa      	ldr	r2, [r7, #12]
 8010acc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010ace:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	4413      	add	r3, r2
 8010ad8:	00db      	lsls	r3, r3, #3
 8010ada:	3308      	adds	r3, #8
 8010adc:	4a25      	ldr	r2, [pc, #148]	@ (8010b74 <etharp_update_arp_entry+0x148>)
 8010ade:	4413      	add	r3, r2
 8010ae0:	3304      	adds	r3, #4
 8010ae2:	2206      	movs	r2, #6
 8010ae4:	6879      	ldr	r1, [r7, #4]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f003 f809 	bl	8013afe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010aec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010af0:	4920      	ldr	r1, [pc, #128]	@ (8010b74 <etharp_update_arp_entry+0x148>)
 8010af2:	4613      	mov	r3, r2
 8010af4:	005b      	lsls	r3, r3, #1
 8010af6:	4413      	add	r3, r2
 8010af8:	00db      	lsls	r3, r3, #3
 8010afa:	440b      	add	r3, r1
 8010afc:	3312      	adds	r3, #18
 8010afe:	2200      	movs	r2, #0
 8010b00:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010b02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b06:	491b      	ldr	r1, [pc, #108]	@ (8010b74 <etharp_update_arp_entry+0x148>)
 8010b08:	4613      	mov	r3, r2
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	4413      	add	r3, r2
 8010b0e:	00db      	lsls	r3, r3, #3
 8010b10:	440b      	add	r3, r1
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d021      	beq.n	8010b5c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010b18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b1c:	4915      	ldr	r1, [pc, #84]	@ (8010b74 <etharp_update_arp_entry+0x148>)
 8010b1e:	4613      	mov	r3, r2
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4413      	add	r3, r2
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	440b      	add	r3, r1
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010b2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b30:	4910      	ldr	r1, [pc, #64]	@ (8010b74 <etharp_update_arp_entry+0x148>)
 8010b32:	4613      	mov	r3, r2
 8010b34:	005b      	lsls	r3, r3, #1
 8010b36:	4413      	add	r3, r2
 8010b38:	00db      	lsls	r3, r3, #3
 8010b3a:	440b      	add	r3, r1
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010b46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6939      	ldr	r1, [r7, #16]
 8010b50:	68f8      	ldr	r0, [r7, #12]
 8010b52:	f001 ff97 	bl	8012a84 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010b56:	6938      	ldr	r0, [r7, #16]
 8010b58:	f7f9 fb2c 	bl	800a1b4 <pbuf_free>
  }
  return ERR_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3718      	adds	r7, #24
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	08016978 	.word	0x08016978
 8010b6c:	08016a70 	.word	0x08016a70
 8010b70:	080169f0 	.word	0x080169f0
 8010b74:	20008af0 	.word	0x20008af0

08010b78 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b80:	2300      	movs	r3, #0
 8010b82:	60fb      	str	r3, [r7, #12]
 8010b84:	e01e      	b.n	8010bc4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010b86:	4913      	ldr	r1, [pc, #76]	@ (8010bd4 <etharp_cleanup_netif+0x5c>)
 8010b88:	68fa      	ldr	r2, [r7, #12]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	005b      	lsls	r3, r3, #1
 8010b8e:	4413      	add	r3, r2
 8010b90:	00db      	lsls	r3, r3, #3
 8010b92:	440b      	add	r3, r1
 8010b94:	3314      	adds	r3, #20
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010b9a:	7afb      	ldrb	r3, [r7, #11]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d00e      	beq.n	8010bbe <etharp_cleanup_netif+0x46>
 8010ba0:	490c      	ldr	r1, [pc, #48]	@ (8010bd4 <etharp_cleanup_netif+0x5c>)
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	005b      	lsls	r3, r3, #1
 8010ba8:	4413      	add	r3, r2
 8010baa:	00db      	lsls	r3, r3, #3
 8010bac:	440b      	add	r3, r1
 8010bae:	3308      	adds	r3, #8
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d102      	bne.n	8010bbe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f7ff fce5 	bl	8010588 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2b09      	cmp	r3, #9
 8010bc8:	dddd      	ble.n	8010b86 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010bca:	bf00      	nop
 8010bcc:	bf00      	nop
 8010bce:	3710      	adds	r7, #16
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	20008af0 	.word	0x20008af0

08010bd8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010bd8:	b5b0      	push	{r4, r5, r7, lr}
 8010bda:	b08a      	sub	sp, #40	@ 0x28
 8010bdc:	af04      	add	r7, sp, #16
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d107      	bne.n	8010bf8 <etharp_input+0x20>
 8010be8:	4b3d      	ldr	r3, [pc, #244]	@ (8010ce0 <etharp_input+0x108>)
 8010bea:	f240 228a 	movw	r2, #650	@ 0x28a
 8010bee:	493d      	ldr	r1, [pc, #244]	@ (8010ce4 <etharp_input+0x10c>)
 8010bf0:	483d      	ldr	r0, [pc, #244]	@ (8010ce8 <etharp_input+0x110>)
 8010bf2:	f002 fd77 	bl	80136e4 <iprintf>
 8010bf6:	e06f      	b.n	8010cd8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	881b      	ldrh	r3, [r3, #0]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c08:	d10c      	bne.n	8010c24 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010c0e:	2b06      	cmp	r3, #6
 8010c10:	d108      	bne.n	8010c24 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c16:	2b04      	cmp	r3, #4
 8010c18:	d104      	bne.n	8010c24 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	885b      	ldrh	r3, [r3, #2]
 8010c1e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010c20:	2b08      	cmp	r3, #8
 8010c22:	d003      	beq.n	8010c2c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f7f9 fac5 	bl	800a1b4 <pbuf_free>
    return;
 8010c2a:	e055      	b.n	8010cd8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	330e      	adds	r3, #14
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	3318      	adds	r3, #24
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	3304      	adds	r3, #4
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d102      	bne.n	8010c4c <etharp_input+0x74>
    for_us = 0;
 8010c46:	2300      	movs	r3, #0
 8010c48:	75fb      	strb	r3, [r7, #23]
 8010c4a:	e009      	b.n	8010c60 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010c4c:	68ba      	ldr	r2, [r7, #8]
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	3304      	adds	r3, #4
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	bf0c      	ite	eq
 8010c58:	2301      	moveq	r3, #1
 8010c5a:	2300      	movne	r3, #0
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	f103 0208 	add.w	r2, r3, #8
 8010c66:	7dfb      	ldrb	r3, [r7, #23]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d001      	beq.n	8010c70 <etharp_input+0x98>
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e000      	b.n	8010c72 <etharp_input+0x9a>
 8010c70:	2302      	movs	r3, #2
 8010c72:	f107 010c 	add.w	r1, r7, #12
 8010c76:	6838      	ldr	r0, [r7, #0]
 8010c78:	f7ff fed8 	bl	8010a2c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	88db      	ldrh	r3, [r3, #6]
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c86:	d003      	beq.n	8010c90 <etharp_input+0xb8>
 8010c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c8c:	d01e      	beq.n	8010ccc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010c8e:	e020      	b.n	8010cd2 <etharp_input+0xfa>
      if (for_us) {
 8010c90:	7dfb      	ldrb	r3, [r7, #23]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d01c      	beq.n	8010cd0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010cac:	693a      	ldr	r2, [r7, #16]
 8010cae:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010cb0:	2102      	movs	r1, #2
 8010cb2:	9103      	str	r1, [sp, #12]
 8010cb4:	f107 010c 	add.w	r1, r7, #12
 8010cb8:	9102      	str	r1, [sp, #8]
 8010cba:	9201      	str	r2, [sp, #4]
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	462b      	mov	r3, r5
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	4601      	mov	r1, r0
 8010cc4:	6838      	ldr	r0, [r7, #0]
 8010cc6:	f000 faeb 	bl	80112a0 <etharp_raw>
      break;
 8010cca:	e001      	b.n	8010cd0 <etharp_input+0xf8>
      break;
 8010ccc:	bf00      	nop
 8010cce:	e000      	b.n	8010cd2 <etharp_input+0xfa>
      break;
 8010cd0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7f9 fa6e 	bl	800a1b4 <pbuf_free>
}
 8010cd8:	3718      	adds	r7, #24
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	08016978 	.word	0x08016978
 8010ce4:	08016ac8 	.word	0x08016ac8
 8010ce8:	080169f0 	.word	0x080169f0

08010cec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af02      	add	r7, sp, #8
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010cfa:	79fa      	ldrb	r2, [r7, #7]
 8010cfc:	4944      	ldr	r1, [pc, #272]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010cfe:	4613      	mov	r3, r2
 8010d00:	005b      	lsls	r3, r3, #1
 8010d02:	4413      	add	r3, r2
 8010d04:	00db      	lsls	r3, r3, #3
 8010d06:	440b      	add	r3, r1
 8010d08:	3314      	adds	r3, #20
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d806      	bhi.n	8010d1e <etharp_output_to_arp_index+0x32>
 8010d10:	4b40      	ldr	r3, [pc, #256]	@ (8010e14 <etharp_output_to_arp_index+0x128>)
 8010d12:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010d16:	4940      	ldr	r1, [pc, #256]	@ (8010e18 <etharp_output_to_arp_index+0x12c>)
 8010d18:	4840      	ldr	r0, [pc, #256]	@ (8010e1c <etharp_output_to_arp_index+0x130>)
 8010d1a:	f002 fce3 	bl	80136e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010d1e:	79fa      	ldrb	r2, [r7, #7]
 8010d20:	493b      	ldr	r1, [pc, #236]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010d22:	4613      	mov	r3, r2
 8010d24:	005b      	lsls	r3, r3, #1
 8010d26:	4413      	add	r3, r2
 8010d28:	00db      	lsls	r3, r3, #3
 8010d2a:	440b      	add	r3, r1
 8010d2c:	3314      	adds	r3, #20
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	2b02      	cmp	r3, #2
 8010d32:	d153      	bne.n	8010ddc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010d34:	79fa      	ldrb	r2, [r7, #7]
 8010d36:	4936      	ldr	r1, [pc, #216]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010d38:	4613      	mov	r3, r2
 8010d3a:	005b      	lsls	r3, r3, #1
 8010d3c:	4413      	add	r3, r2
 8010d3e:	00db      	lsls	r3, r3, #3
 8010d40:	440b      	add	r3, r1
 8010d42:	3312      	adds	r3, #18
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010d4a:	d919      	bls.n	8010d80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010d4c:	79fa      	ldrb	r2, [r7, #7]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	005b      	lsls	r3, r3, #1
 8010d52:	4413      	add	r3, r2
 8010d54:	00db      	lsls	r3, r3, #3
 8010d56:	4a2e      	ldr	r2, [pc, #184]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010d58:	4413      	add	r3, r2
 8010d5a:	3304      	adds	r3, #4
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f000 fb4c 	bl	80113fc <etharp_request>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d138      	bne.n	8010ddc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010d6a:	79fa      	ldrb	r2, [r7, #7]
 8010d6c:	4928      	ldr	r1, [pc, #160]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	440b      	add	r3, r1
 8010d78:	3314      	adds	r3, #20
 8010d7a:	2203      	movs	r2, #3
 8010d7c:	701a      	strb	r2, [r3, #0]
 8010d7e:	e02d      	b.n	8010ddc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010d80:	79fa      	ldrb	r2, [r7, #7]
 8010d82:	4923      	ldr	r1, [pc, #140]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010d84:	4613      	mov	r3, r2
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	4413      	add	r3, r2
 8010d8a:	00db      	lsls	r3, r3, #3
 8010d8c:	440b      	add	r3, r1
 8010d8e:	3312      	adds	r3, #18
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8010d96:	d321      	bcc.n	8010ddc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010d98:	79fa      	ldrb	r2, [r7, #7]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	005b      	lsls	r3, r3, #1
 8010d9e:	4413      	add	r3, r2
 8010da0:	00db      	lsls	r3, r3, #3
 8010da2:	4a1b      	ldr	r2, [pc, #108]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010da4:	4413      	add	r3, r2
 8010da6:	1d19      	adds	r1, r3, #4
 8010da8:	79fa      	ldrb	r2, [r7, #7]
 8010daa:	4613      	mov	r3, r2
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	4413      	add	r3, r2
 8010db0:	00db      	lsls	r3, r3, #3
 8010db2:	3308      	adds	r3, #8
 8010db4:	4a16      	ldr	r2, [pc, #88]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010db6:	4413      	add	r3, r2
 8010db8:	3304      	adds	r3, #4
 8010dba:	461a      	mov	r2, r3
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f000 fafb 	bl	80113b8 <etharp_request_dst>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d109      	bne.n	8010ddc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010dc8:	79fa      	ldrb	r2, [r7, #7]
 8010dca:	4911      	ldr	r1, [pc, #68]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010dcc:	4613      	mov	r3, r2
 8010dce:	005b      	lsls	r3, r3, #1
 8010dd0:	4413      	add	r3, r2
 8010dd2:	00db      	lsls	r3, r3, #3
 8010dd4:	440b      	add	r3, r1
 8010dd6:	3314      	adds	r3, #20
 8010dd8:	2203      	movs	r2, #3
 8010dda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8010de2:	79fa      	ldrb	r2, [r7, #7]
 8010de4:	4613      	mov	r3, r2
 8010de6:	005b      	lsls	r3, r3, #1
 8010de8:	4413      	add	r3, r2
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	3308      	adds	r3, #8
 8010dee:	4a08      	ldr	r2, [pc, #32]	@ (8010e10 <etharp_output_to_arp_index+0x124>)
 8010df0:	4413      	add	r3, r2
 8010df2:	3304      	adds	r3, #4
 8010df4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010df8:	9200      	str	r2, [sp, #0]
 8010dfa:	460a      	mov	r2, r1
 8010dfc:	68b9      	ldr	r1, [r7, #8]
 8010dfe:	68f8      	ldr	r0, [r7, #12]
 8010e00:	f001 fe40 	bl	8012a84 <ethernet_output>
 8010e04:	4603      	mov	r3, r0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	20008af0 	.word	0x20008af0
 8010e14:	08016978 	.word	0x08016978
 8010e18:	08016ae8 	.word	0x08016ae8
 8010e1c:	080169f0 	.word	0x080169f0

08010e20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b08a      	sub	sp, #40	@ 0x28
 8010e24:	af02      	add	r7, sp, #8
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d106      	bne.n	8010e44 <etharp_output+0x24>
 8010e36:	4b73      	ldr	r3, [pc, #460]	@ (8011004 <etharp_output+0x1e4>)
 8010e38:	f240 321e 	movw	r2, #798	@ 0x31e
 8010e3c:	4972      	ldr	r1, [pc, #456]	@ (8011008 <etharp_output+0x1e8>)
 8010e3e:	4873      	ldr	r0, [pc, #460]	@ (801100c <etharp_output+0x1ec>)
 8010e40:	f002 fc50 	bl	80136e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <etharp_output+0x38>
 8010e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8011004 <etharp_output+0x1e4>)
 8010e4c:	f240 321f 	movw	r2, #799	@ 0x31f
 8010e50:	496f      	ldr	r1, [pc, #444]	@ (8011010 <etharp_output+0x1f0>)
 8010e52:	486e      	ldr	r0, [pc, #440]	@ (801100c <etharp_output+0x1ec>)
 8010e54:	f002 fc46 	bl	80136e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d106      	bne.n	8010e6c <etharp_output+0x4c>
 8010e5e:	4b69      	ldr	r3, [pc, #420]	@ (8011004 <etharp_output+0x1e4>)
 8010e60:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010e64:	496b      	ldr	r1, [pc, #428]	@ (8011014 <etharp_output+0x1f4>)
 8010e66:	4869      	ldr	r0, [pc, #420]	@ (801100c <etharp_output+0x1ec>)
 8010e68:	f002 fc3c 	bl	80136e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	68f9      	ldr	r1, [r7, #12]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f000 fef8 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d002      	beq.n	8010e84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010e7e:	4b66      	ldr	r3, [pc, #408]	@ (8011018 <etharp_output+0x1f8>)
 8010e80:	61fb      	str	r3, [r7, #28]
 8010e82:	e0af      	b.n	8010fe4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010e8c:	2be0      	cmp	r3, #224	@ 0xe0
 8010e8e:	d118      	bne.n	8010ec2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010e90:	2301      	movs	r3, #1
 8010e92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010e94:	2300      	movs	r3, #0
 8010e96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010e98:	235e      	movs	r3, #94	@ 0x5e
 8010e9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3302      	adds	r3, #2
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	3303      	adds	r3, #3
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010eba:	f107 0310 	add.w	r3, r7, #16
 8010ebe:	61fb      	str	r3, [r7, #28]
 8010ec0:	e090      	b.n	8010fe4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	3304      	adds	r3, #4
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	405a      	eors	r2, r3
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	3308      	adds	r3, #8
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d012      	beq.n	8010f00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ee0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d00b      	beq.n	8010f00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	330c      	adds	r3, #12
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d003      	beq.n	8010efa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	330c      	adds	r3, #12
 8010ef6:	61bb      	str	r3, [r7, #24]
 8010ef8:	e002      	b.n	8010f00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010efa:	f06f 0303 	mvn.w	r3, #3
 8010efe:	e07d      	b.n	8010ffc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010f00:	4b46      	ldr	r3, [pc, #280]	@ (801101c <etharp_output+0x1fc>)
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	4619      	mov	r1, r3
 8010f06:	4a46      	ldr	r2, [pc, #280]	@ (8011020 <etharp_output+0x200>)
 8010f08:	460b      	mov	r3, r1
 8010f0a:	005b      	lsls	r3, r3, #1
 8010f0c:	440b      	add	r3, r1
 8010f0e:	00db      	lsls	r3, r3, #3
 8010f10:	4413      	add	r3, r2
 8010f12:	3314      	adds	r3, #20
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d925      	bls.n	8010f66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010f1a:	4b40      	ldr	r3, [pc, #256]	@ (801101c <etharp_output+0x1fc>)
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	4a3f      	ldr	r2, [pc, #252]	@ (8011020 <etharp_output+0x200>)
 8010f22:	460b      	mov	r3, r1
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	440b      	add	r3, r1
 8010f28:	00db      	lsls	r3, r3, #3
 8010f2a:	4413      	add	r3, r2
 8010f2c:	3308      	adds	r3, #8
 8010f2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010f30:	68fa      	ldr	r2, [r7, #12]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d117      	bne.n	8010f66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	4b38      	ldr	r3, [pc, #224]	@ (801101c <etharp_output+0x1fc>)
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	4937      	ldr	r1, [pc, #220]	@ (8011020 <etharp_output+0x200>)
 8010f42:	4603      	mov	r3, r0
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	4403      	add	r3, r0
 8010f48:	00db      	lsls	r3, r3, #3
 8010f4a:	440b      	add	r3, r1
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d108      	bne.n	8010f66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010f54:	4b31      	ldr	r3, [pc, #196]	@ (801101c <etharp_output+0x1fc>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	68b9      	ldr	r1, [r7, #8]
 8010f5c:	68f8      	ldr	r0, [r7, #12]
 8010f5e:	f7ff fec5 	bl	8010cec <etharp_output_to_arp_index>
 8010f62:	4603      	mov	r3, r0
 8010f64:	e04a      	b.n	8010ffc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010f66:	2300      	movs	r3, #0
 8010f68:	75fb      	strb	r3, [r7, #23]
 8010f6a:	e031      	b.n	8010fd0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010f6c:	7dfa      	ldrb	r2, [r7, #23]
 8010f6e:	492c      	ldr	r1, [pc, #176]	@ (8011020 <etharp_output+0x200>)
 8010f70:	4613      	mov	r3, r2
 8010f72:	005b      	lsls	r3, r3, #1
 8010f74:	4413      	add	r3, r2
 8010f76:	00db      	lsls	r3, r3, #3
 8010f78:	440b      	add	r3, r1
 8010f7a:	3314      	adds	r3, #20
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d923      	bls.n	8010fca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010f82:	7dfa      	ldrb	r2, [r7, #23]
 8010f84:	4926      	ldr	r1, [pc, #152]	@ (8011020 <etharp_output+0x200>)
 8010f86:	4613      	mov	r3, r2
 8010f88:	005b      	lsls	r3, r3, #1
 8010f8a:	4413      	add	r3, r2
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	440b      	add	r3, r1
 8010f90:	3308      	adds	r3, #8
 8010f92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010f94:	68fa      	ldr	r2, [r7, #12]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d117      	bne.n	8010fca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	6819      	ldr	r1, [r3, #0]
 8010f9e:	7dfa      	ldrb	r2, [r7, #23]
 8010fa0:	481f      	ldr	r0, [pc, #124]	@ (8011020 <etharp_output+0x200>)
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	4413      	add	r3, r2
 8010fa8:	00db      	lsls	r3, r3, #3
 8010faa:	4403      	add	r3, r0
 8010fac:	3304      	adds	r3, #4
 8010fae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010fb0:	4299      	cmp	r1, r3
 8010fb2:	d10a      	bne.n	8010fca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010fb4:	4a19      	ldr	r2, [pc, #100]	@ (801101c <etharp_output+0x1fc>)
 8010fb6:	7dfb      	ldrb	r3, [r7, #23]
 8010fb8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010fba:	7dfb      	ldrb	r3, [r7, #23]
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	68b9      	ldr	r1, [r7, #8]
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7ff fe93 	bl	8010cec <etharp_output_to_arp_index>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	e018      	b.n	8010ffc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010fca:	7dfb      	ldrb	r3, [r7, #23]
 8010fcc:	3301      	adds	r3, #1
 8010fce:	75fb      	strb	r3, [r7, #23]
 8010fd0:	7dfb      	ldrb	r3, [r7, #23]
 8010fd2:	2b09      	cmp	r3, #9
 8010fd4:	d9ca      	bls.n	8010f6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010fd6:	68ba      	ldr	r2, [r7, #8]
 8010fd8:	69b9      	ldr	r1, [r7, #24]
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f000 f822 	bl	8011024 <etharp_query>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	e00b      	b.n	8010ffc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010fea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	68b9      	ldr	r1, [r7, #8]
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f001 fd45 	bl	8012a84 <ethernet_output>
 8010ffa:	4603      	mov	r3, r0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3720      	adds	r7, #32
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	08016978 	.word	0x08016978
 8011008:	08016ac8 	.word	0x08016ac8
 801100c:	080169f0 	.word	0x080169f0
 8011010:	08016b18 	.word	0x08016b18
 8011014:	08016ab8 	.word	0x08016ab8
 8011018:	080175d0 	.word	0x080175d0
 801101c:	20008be0 	.word	0x20008be0
 8011020:	20008af0 	.word	0x20008af0

08011024 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b08c      	sub	sp, #48	@ 0x30
 8011028:	af02      	add	r7, sp, #8
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	3326      	adds	r3, #38	@ 0x26
 8011034:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011036:	23ff      	movs	r3, #255	@ 0xff
 8011038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801103c:	2300      	movs	r3, #0
 801103e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68f9      	ldr	r1, [r7, #12]
 8011046:	4618      	mov	r0, r3
 8011048:	f000 fe0e 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d10c      	bne.n	801106c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801105a:	2be0      	cmp	r3, #224	@ 0xe0
 801105c:	d006      	beq.n	801106c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d003      	beq.n	801106c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d102      	bne.n	8011072 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801106c:	f06f 030f 	mvn.w	r3, #15
 8011070:	e101      	b.n	8011276 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011072:	68fa      	ldr	r2, [r7, #12]
 8011074:	2101      	movs	r1, #1
 8011076:	68b8      	ldr	r0, [r7, #8]
 8011078:	f7ff fb60 	bl	801073c <etharp_find_entry>
 801107c:	4603      	mov	r3, r0
 801107e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011080:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011084:	2b00      	cmp	r3, #0
 8011086:	da02      	bge.n	801108e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011088:	8a7b      	ldrh	r3, [r7, #18]
 801108a:	b25b      	sxtb	r3, r3
 801108c:	e0f3      	b.n	8011276 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801108e:	8a7b      	ldrh	r3, [r7, #18]
 8011090:	2b7e      	cmp	r3, #126	@ 0x7e
 8011092:	d906      	bls.n	80110a2 <etharp_query+0x7e>
 8011094:	4b7a      	ldr	r3, [pc, #488]	@ (8011280 <etharp_query+0x25c>)
 8011096:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801109a:	497a      	ldr	r1, [pc, #488]	@ (8011284 <etharp_query+0x260>)
 801109c:	487a      	ldr	r0, [pc, #488]	@ (8011288 <etharp_query+0x264>)
 801109e:	f002 fb21 	bl	80136e4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80110a2:	8a7b      	ldrh	r3, [r7, #18]
 80110a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80110a6:	7c7a      	ldrb	r2, [r7, #17]
 80110a8:	4978      	ldr	r1, [pc, #480]	@ (801128c <etharp_query+0x268>)
 80110aa:	4613      	mov	r3, r2
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	4413      	add	r3, r2
 80110b0:	00db      	lsls	r3, r3, #3
 80110b2:	440b      	add	r3, r1
 80110b4:	3314      	adds	r3, #20
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d115      	bne.n	80110e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80110bc:	2301      	movs	r3, #1
 80110be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80110c0:	7c7a      	ldrb	r2, [r7, #17]
 80110c2:	4972      	ldr	r1, [pc, #456]	@ (801128c <etharp_query+0x268>)
 80110c4:	4613      	mov	r3, r2
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	4413      	add	r3, r2
 80110ca:	00db      	lsls	r3, r3, #3
 80110cc:	440b      	add	r3, r1
 80110ce:	3314      	adds	r3, #20
 80110d0:	2201      	movs	r2, #1
 80110d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80110d4:	7c7a      	ldrb	r2, [r7, #17]
 80110d6:	496d      	ldr	r1, [pc, #436]	@ (801128c <etharp_query+0x268>)
 80110d8:	4613      	mov	r3, r2
 80110da:	005b      	lsls	r3, r3, #1
 80110dc:	4413      	add	r3, r2
 80110de:	00db      	lsls	r3, r3, #3
 80110e0:	440b      	add	r3, r1
 80110e2:	3308      	adds	r3, #8
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80110e8:	7c7a      	ldrb	r2, [r7, #17]
 80110ea:	4968      	ldr	r1, [pc, #416]	@ (801128c <etharp_query+0x268>)
 80110ec:	4613      	mov	r3, r2
 80110ee:	005b      	lsls	r3, r3, #1
 80110f0:	4413      	add	r3, r2
 80110f2:	00db      	lsls	r3, r3, #3
 80110f4:	440b      	add	r3, r1
 80110f6:	3314      	adds	r3, #20
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d011      	beq.n	8011122 <etharp_query+0xfe>
 80110fe:	7c7a      	ldrb	r2, [r7, #17]
 8011100:	4962      	ldr	r1, [pc, #392]	@ (801128c <etharp_query+0x268>)
 8011102:	4613      	mov	r3, r2
 8011104:	005b      	lsls	r3, r3, #1
 8011106:	4413      	add	r3, r2
 8011108:	00db      	lsls	r3, r3, #3
 801110a:	440b      	add	r3, r1
 801110c:	3314      	adds	r3, #20
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	2b01      	cmp	r3, #1
 8011112:	d806      	bhi.n	8011122 <etharp_query+0xfe>
 8011114:	4b5a      	ldr	r3, [pc, #360]	@ (8011280 <etharp_query+0x25c>)
 8011116:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801111a:	495d      	ldr	r1, [pc, #372]	@ (8011290 <etharp_query+0x26c>)
 801111c:	485a      	ldr	r0, [pc, #360]	@ (8011288 <etharp_query+0x264>)
 801111e:	f002 fae1 	bl	80136e4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011122:	6a3b      	ldr	r3, [r7, #32]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d102      	bne.n	801112e <etharp_query+0x10a>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d10c      	bne.n	8011148 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801112e:	68b9      	ldr	r1, [r7, #8]
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f000 f963 	bl	80113fc <etharp_request>
 8011136:	4603      	mov	r3, r0
 8011138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d102      	bne.n	8011148 <etharp_query+0x124>
      return result;
 8011142:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011146:	e096      	b.n	8011276 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <etharp_query+0x138>
 801114e:	4b4c      	ldr	r3, [pc, #304]	@ (8011280 <etharp_query+0x25c>)
 8011150:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8011154:	494f      	ldr	r1, [pc, #316]	@ (8011294 <etharp_query+0x270>)
 8011156:	484c      	ldr	r0, [pc, #304]	@ (8011288 <etharp_query+0x264>)
 8011158:	f002 fac4 	bl	80136e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801115c:	7c7a      	ldrb	r2, [r7, #17]
 801115e:	494b      	ldr	r1, [pc, #300]	@ (801128c <etharp_query+0x268>)
 8011160:	4613      	mov	r3, r2
 8011162:	005b      	lsls	r3, r3, #1
 8011164:	4413      	add	r3, r2
 8011166:	00db      	lsls	r3, r3, #3
 8011168:	440b      	add	r3, r1
 801116a:	3314      	adds	r3, #20
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d917      	bls.n	80111a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011172:	4a49      	ldr	r2, [pc, #292]	@ (8011298 <etharp_query+0x274>)
 8011174:	7c7b      	ldrb	r3, [r7, #17]
 8011176:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011178:	7c7a      	ldrb	r2, [r7, #17]
 801117a:	4613      	mov	r3, r2
 801117c:	005b      	lsls	r3, r3, #1
 801117e:	4413      	add	r3, r2
 8011180:	00db      	lsls	r3, r3, #3
 8011182:	3308      	adds	r3, #8
 8011184:	4a41      	ldr	r2, [pc, #260]	@ (801128c <etharp_query+0x268>)
 8011186:	4413      	add	r3, r2
 8011188:	3304      	adds	r3, #4
 801118a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801118e:	9200      	str	r2, [sp, #0]
 8011190:	697a      	ldr	r2, [r7, #20]
 8011192:	6879      	ldr	r1, [r7, #4]
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f001 fc75 	bl	8012a84 <ethernet_output>
 801119a:	4603      	mov	r3, r0
 801119c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80111a0:	e067      	b.n	8011272 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80111a2:	7c7a      	ldrb	r2, [r7, #17]
 80111a4:	4939      	ldr	r1, [pc, #228]	@ (801128c <etharp_query+0x268>)
 80111a6:	4613      	mov	r3, r2
 80111a8:	005b      	lsls	r3, r3, #1
 80111aa:	4413      	add	r3, r2
 80111ac:	00db      	lsls	r3, r3, #3
 80111ae:	440b      	add	r3, r1
 80111b0:	3314      	adds	r3, #20
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d15c      	bne.n	8011272 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80111b8:	2300      	movs	r3, #0
 80111ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80111c0:	e01c      	b.n	80111fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80111c2:	69fb      	ldr	r3, [r7, #28]
 80111c4:	895a      	ldrh	r2, [r3, #10]
 80111c6:	69fb      	ldr	r3, [r7, #28]
 80111c8:	891b      	ldrh	r3, [r3, #8]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d10a      	bne.n	80111e4 <etharp_query+0x1c0>
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d006      	beq.n	80111e4 <etharp_query+0x1c0>
 80111d6:	4b2a      	ldr	r3, [pc, #168]	@ (8011280 <etharp_query+0x25c>)
 80111d8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80111dc:	492f      	ldr	r1, [pc, #188]	@ (801129c <etharp_query+0x278>)
 80111de:	482a      	ldr	r0, [pc, #168]	@ (8011288 <etharp_query+0x264>)
 80111e0:	f002 fa80 	bl	80136e4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	7b1b      	ldrb	r3, [r3, #12]
 80111e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d002      	beq.n	80111f6 <etharp_query+0x1d2>
        copy_needed = 1;
 80111f0:	2301      	movs	r3, #1
 80111f2:	61bb      	str	r3, [r7, #24]
        break;
 80111f4:	e005      	b.n	8011202 <etharp_query+0x1de>
      }
      p = p->next;
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1df      	bne.n	80111c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d007      	beq.n	8011218 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801120e:	200e      	movs	r0, #14
 8011210:	f7f9 fa3c 	bl	800a68c <pbuf_clone>
 8011214:	61f8      	str	r0, [r7, #28]
 8011216:	e004      	b.n	8011222 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801121c:	69f8      	ldr	r0, [r7, #28]
 801121e:	f7f9 f869 	bl	800a2f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d021      	beq.n	801126c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011228:	7c7a      	ldrb	r2, [r7, #17]
 801122a:	4918      	ldr	r1, [pc, #96]	@ (801128c <etharp_query+0x268>)
 801122c:	4613      	mov	r3, r2
 801122e:	005b      	lsls	r3, r3, #1
 8011230:	4413      	add	r3, r2
 8011232:	00db      	lsls	r3, r3, #3
 8011234:	440b      	add	r3, r1
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d00a      	beq.n	8011252 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801123c:	7c7a      	ldrb	r2, [r7, #17]
 801123e:	4913      	ldr	r1, [pc, #76]	@ (801128c <etharp_query+0x268>)
 8011240:	4613      	mov	r3, r2
 8011242:	005b      	lsls	r3, r3, #1
 8011244:	4413      	add	r3, r2
 8011246:	00db      	lsls	r3, r3, #3
 8011248:	440b      	add	r3, r1
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4618      	mov	r0, r3
 801124e:	f7f8 ffb1 	bl	800a1b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8011252:	7c7a      	ldrb	r2, [r7, #17]
 8011254:	490d      	ldr	r1, [pc, #52]	@ (801128c <etharp_query+0x268>)
 8011256:	4613      	mov	r3, r2
 8011258:	005b      	lsls	r3, r3, #1
 801125a:	4413      	add	r3, r2
 801125c:	00db      	lsls	r3, r3, #3
 801125e:	440b      	add	r3, r1
 8011260:	69fa      	ldr	r2, [r7, #28]
 8011262:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011264:	2300      	movs	r3, #0
 8011266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801126a:	e002      	b.n	8011272 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801126c:	23ff      	movs	r3, #255	@ 0xff
 801126e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8011272:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8011276:	4618      	mov	r0, r3
 8011278:	3728      	adds	r7, #40	@ 0x28
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	08016978 	.word	0x08016978
 8011284:	08016b24 	.word	0x08016b24
 8011288:	080169f0 	.word	0x080169f0
 801128c:	20008af0 	.word	0x20008af0
 8011290:	08016b34 	.word	0x08016b34
 8011294:	08016b18 	.word	0x08016b18
 8011298:	20008be0 	.word	0x20008be0
 801129c:	08016b5c 	.word	0x08016b5c

080112a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b08a      	sub	sp, #40	@ 0x28
 80112a4:	af02      	add	r7, sp, #8
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d106      	bne.n	80112c6 <etharp_raw+0x26>
 80112b8:	4b3a      	ldr	r3, [pc, #232]	@ (80113a4 <etharp_raw+0x104>)
 80112ba:	f240 4257 	movw	r2, #1111	@ 0x457
 80112be:	493a      	ldr	r1, [pc, #232]	@ (80113a8 <etharp_raw+0x108>)
 80112c0:	483a      	ldr	r0, [pc, #232]	@ (80113ac <etharp_raw+0x10c>)
 80112c2:	f002 fa0f 	bl	80136e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80112c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80112ca:	211c      	movs	r1, #28
 80112cc:	200e      	movs	r0, #14
 80112ce:	f7f8 fc8d 	bl	8009bec <pbuf_alloc>
 80112d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d102      	bne.n	80112e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80112da:	f04f 33ff 	mov.w	r3, #4294967295
 80112de:	e05d      	b.n	801139c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	895b      	ldrh	r3, [r3, #10]
 80112e4:	2b1b      	cmp	r3, #27
 80112e6:	d806      	bhi.n	80112f6 <etharp_raw+0x56>
 80112e8:	4b2e      	ldr	r3, [pc, #184]	@ (80113a4 <etharp_raw+0x104>)
 80112ea:	f240 4262 	movw	r2, #1122	@ 0x462
 80112ee:	4930      	ldr	r1, [pc, #192]	@ (80113b0 <etharp_raw+0x110>)
 80112f0:	482e      	ldr	r0, [pc, #184]	@ (80113ac <etharp_raw+0x10c>)
 80112f2:	f002 f9f7 	bl	80136e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80112fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80112fe:	4618      	mov	r0, r3
 8011300:	f7f7 fbfa 	bl	8008af8 <lwip_htons>
 8011304:	4603      	mov	r3, r0
 8011306:	461a      	mov	r2, r3
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011312:	2b06      	cmp	r3, #6
 8011314:	d006      	beq.n	8011324 <etharp_raw+0x84>
 8011316:	4b23      	ldr	r3, [pc, #140]	@ (80113a4 <etharp_raw+0x104>)
 8011318:	f240 4269 	movw	r2, #1129	@ 0x469
 801131c:	4925      	ldr	r1, [pc, #148]	@ (80113b4 <etharp_raw+0x114>)
 801131e:	4823      	ldr	r0, [pc, #140]	@ (80113ac <etharp_raw+0x10c>)
 8011320:	f002 f9e0 	bl	80136e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	3308      	adds	r3, #8
 8011328:	2206      	movs	r2, #6
 801132a:	6839      	ldr	r1, [r7, #0]
 801132c:	4618      	mov	r0, r3
 801132e:	f002 fbe6 	bl	8013afe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	3312      	adds	r3, #18
 8011336:	2206      	movs	r2, #6
 8011338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801133a:	4618      	mov	r0, r3
 801133c:	f002 fbdf 	bl	8013afe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	330e      	adds	r3, #14
 8011344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011346:	6812      	ldr	r2, [r2, #0]
 8011348:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	3318      	adds	r3, #24
 801134e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011350:	6812      	ldr	r2, [r2, #0]
 8011352:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	2200      	movs	r2, #0
 8011358:	701a      	strb	r2, [r3, #0]
 801135a:	2200      	movs	r2, #0
 801135c:	f042 0201 	orr.w	r2, r2, #1
 8011360:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	2200      	movs	r2, #0
 8011366:	f042 0208 	orr.w	r2, r2, #8
 801136a:	709a      	strb	r2, [r3, #2]
 801136c:	2200      	movs	r2, #0
 801136e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	2206      	movs	r2, #6
 8011374:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	2204      	movs	r2, #4
 801137a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801137c:	f640 0306 	movw	r3, #2054	@ 0x806
 8011380:	9300      	str	r3, [sp, #0]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	69b9      	ldr	r1, [r7, #24]
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f001 fb7b 	bl	8012a84 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801138e:	69b8      	ldr	r0, [r7, #24]
 8011390:	f7f8 ff10 	bl	800a1b4 <pbuf_free>
  p = NULL;
 8011394:	2300      	movs	r3, #0
 8011396:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011398:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3720      	adds	r7, #32
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	08016978 	.word	0x08016978
 80113a8:	08016ac8 	.word	0x08016ac8
 80113ac:	080169f0 	.word	0x080169f0
 80113b0:	08016b78 	.word	0x08016b78
 80113b4:	08016bac 	.word	0x08016bac

080113b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b088      	sub	sp, #32
 80113bc:	af04      	add	r7, sp, #16
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80113d4:	2201      	movs	r2, #1
 80113d6:	9203      	str	r2, [sp, #12]
 80113d8:	68ba      	ldr	r2, [r7, #8]
 80113da:	9202      	str	r2, [sp, #8]
 80113dc:	4a06      	ldr	r2, [pc, #24]	@ (80113f8 <etharp_request_dst+0x40>)
 80113de:	9201      	str	r2, [sp, #4]
 80113e0:	9300      	str	r3, [sp, #0]
 80113e2:	4603      	mov	r3, r0
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	f7ff ff5a 	bl	80112a0 <etharp_raw>
 80113ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	080175d8 	.word	0x080175d8

080113fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011406:	4a05      	ldr	r2, [pc, #20]	@ (801141c <etharp_request+0x20>)
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7ff ffd4 	bl	80113b8 <etharp_request_dst>
 8011410:	4603      	mov	r3, r0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	080175d0 	.word	0x080175d0

08011420 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b08e      	sub	sp, #56	@ 0x38
 8011424:	af04      	add	r7, sp, #16
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801142a:	4b79      	ldr	r3, [pc, #484]	@ (8011610 <icmp_input+0x1f0>)
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 030f 	and.w	r3, r3, #15
 8011438:	b2db      	uxtb	r3, r3
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	b2db      	uxtb	r3, r3
 801143e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8011440:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011442:	2b13      	cmp	r3, #19
 8011444:	f240 80cd 	bls.w	80115e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	895b      	ldrh	r3, [r3, #10]
 801144c:	2b03      	cmp	r3, #3
 801144e:	f240 80ca 	bls.w	80115e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801145c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 80b7 	beq.w	80115d4 <icmp_input+0x1b4>
 8011466:	2b08      	cmp	r3, #8
 8011468:	f040 80b7 	bne.w	80115da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801146c:	4b69      	ldr	r3, [pc, #420]	@ (8011614 <icmp_input+0x1f4>)
 801146e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011470:	4b67      	ldr	r3, [pc, #412]	@ (8011610 <icmp_input+0x1f0>)
 8011472:	695b      	ldr	r3, [r3, #20]
 8011474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011478:	2be0      	cmp	r3, #224	@ 0xe0
 801147a:	f000 80bb 	beq.w	80115f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801147e:	4b64      	ldr	r3, [pc, #400]	@ (8011610 <icmp_input+0x1f0>)
 8011480:	695b      	ldr	r3, [r3, #20]
 8011482:	4a63      	ldr	r2, [pc, #396]	@ (8011610 <icmp_input+0x1f0>)
 8011484:	6812      	ldr	r2, [r2, #0]
 8011486:	4611      	mov	r1, r2
 8011488:	4618      	mov	r0, r3
 801148a:	f000 fbed 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 801148e:	4603      	mov	r3, r0
 8011490:	2b00      	cmp	r3, #0
 8011492:	f040 80b1 	bne.w	80115f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	891b      	ldrh	r3, [r3, #8]
 801149a:	2b07      	cmp	r3, #7
 801149c:	f240 80a5 	bls.w	80115ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80114a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114a2:	330e      	adds	r3, #14
 80114a4:	4619      	mov	r1, r3
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7f8 fdee 	bl	800a088 <pbuf_add_header>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d04b      	beq.n	801154a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	891a      	ldrh	r2, [r3, #8]
 80114b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114b8:	4413      	add	r3, r2
 80114ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	891b      	ldrh	r3, [r3, #8]
 80114c0:	8b7a      	ldrh	r2, [r7, #26]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	f0c0 809a 	bcc.w	80115fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80114c8:	8b7b      	ldrh	r3, [r7, #26]
 80114ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114ce:	4619      	mov	r1, r3
 80114d0:	200e      	movs	r0, #14
 80114d2:	f7f8 fb8b 	bl	8009bec <pbuf_alloc>
 80114d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f000 8090 	beq.w	8011600 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	895b      	ldrh	r3, [r3, #10]
 80114e4:	461a      	mov	r2, r3
 80114e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80114e8:	3308      	adds	r3, #8
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d203      	bcs.n	80114f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80114ee:	6978      	ldr	r0, [r7, #20]
 80114f0:	f7f8 fe60 	bl	800a1b4 <pbuf_free>
          goto icmperr;
 80114f4:	e085      	b.n	8011602 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80114fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114fe:	4618      	mov	r0, r3
 8011500:	f002 fafd 	bl	8013afe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011504:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011506:	4619      	mov	r1, r3
 8011508:	6978      	ldr	r0, [r7, #20]
 801150a:	f7f8 fdcd 	bl	800a0a8 <pbuf_remove_header>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d009      	beq.n	8011528 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011514:	4b40      	ldr	r3, [pc, #256]	@ (8011618 <icmp_input+0x1f8>)
 8011516:	22b6      	movs	r2, #182	@ 0xb6
 8011518:	4940      	ldr	r1, [pc, #256]	@ (801161c <icmp_input+0x1fc>)
 801151a:	4841      	ldr	r0, [pc, #260]	@ (8011620 <icmp_input+0x200>)
 801151c:	f002 f8e2 	bl	80136e4 <iprintf>
          pbuf_free(r);
 8011520:	6978      	ldr	r0, [r7, #20]
 8011522:	f7f8 fe47 	bl	800a1b4 <pbuf_free>
          goto icmperr;
 8011526:	e06c      	b.n	8011602 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	6978      	ldr	r0, [r7, #20]
 801152c:	f7f8 ff6a 	bl	800a404 <pbuf_copy>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d003      	beq.n	801153e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011536:	6978      	ldr	r0, [r7, #20]
 8011538:	f7f8 fe3c 	bl	800a1b4 <pbuf_free>
          goto icmperr;
 801153c:	e061      	b.n	8011602 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7f8 fe38 	bl	800a1b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	607b      	str	r3, [r7, #4]
 8011548:	e00f      	b.n	801156a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801154a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801154c:	330e      	adds	r3, #14
 801154e:	4619      	mov	r1, r3
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7f8 fda9 	bl	800a0a8 <pbuf_remove_header>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d006      	beq.n	801156a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801155c:	4b2e      	ldr	r3, [pc, #184]	@ (8011618 <icmp_input+0x1f8>)
 801155e:	22c7      	movs	r2, #199	@ 0xc7
 8011560:	4930      	ldr	r1, [pc, #192]	@ (8011624 <icmp_input+0x204>)
 8011562:	482f      	ldr	r0, [pc, #188]	@ (8011620 <icmp_input+0x200>)
 8011564:	f002 f8be 	bl	80136e4 <iprintf>
          goto icmperr;
 8011568:	e04b      	b.n	8011602 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011570:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011572:	4619      	mov	r1, r3
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7f8 fd87 	bl	800a088 <pbuf_add_header>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d12b      	bne.n	80115d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801158e:	4b20      	ldr	r3, [pc, #128]	@ (8011610 <icmp_input+0x1f0>)
 8011590:	691a      	ldr	r2, [r3, #16]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	2200      	movs	r2, #0
 801159a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	2200      	movs	r2, #0
 80115a0:	709a      	strb	r2, [r3, #2]
 80115a2:	2200      	movs	r2, #0
 80115a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	22ff      	movs	r2, #255	@ 0xff
 80115aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2200      	movs	r2, #0
 80115b0:	729a      	strb	r2, [r3, #10]
 80115b2:	2200      	movs	r2, #0
 80115b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	9302      	str	r3, [sp, #8]
 80115ba:	2301      	movs	r3, #1
 80115bc:	9301      	str	r3, [sp, #4]
 80115be:	2300      	movs	r3, #0
 80115c0:	9300      	str	r3, [sp, #0]
 80115c2:	23ff      	movs	r3, #255	@ 0xff
 80115c4:	2200      	movs	r2, #0
 80115c6:	69f9      	ldr	r1, [r7, #28]
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f000 fa75 	bl	8011ab8 <ip4_output_if>
 80115ce:	4603      	mov	r3, r0
 80115d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80115d2:	e001      	b.n	80115d8 <icmp_input+0x1b8>
      break;
 80115d4:	bf00      	nop
 80115d6:	e000      	b.n	80115da <icmp_input+0x1ba>
      break;
 80115d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7f8 fdea 	bl	800a1b4 <pbuf_free>
  return;
 80115e0:	e013      	b.n	801160a <icmp_input+0x1ea>
    goto lenerr;
 80115e2:	bf00      	nop
 80115e4:	e002      	b.n	80115ec <icmp_input+0x1cc>
    goto lenerr;
 80115e6:	bf00      	nop
 80115e8:	e000      	b.n	80115ec <icmp_input+0x1cc>
        goto lenerr;
 80115ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7f8 fde1 	bl	800a1b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80115f2:	e00a      	b.n	801160a <icmp_input+0x1ea>
        goto icmperr;
 80115f4:	bf00      	nop
 80115f6:	e004      	b.n	8011602 <icmp_input+0x1e2>
        goto icmperr;
 80115f8:	bf00      	nop
 80115fa:	e002      	b.n	8011602 <icmp_input+0x1e2>
          goto icmperr;
 80115fc:	bf00      	nop
 80115fe:	e000      	b.n	8011602 <icmp_input+0x1e2>
          goto icmperr;
 8011600:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f7f8 fdd6 	bl	800a1b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011608:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801160a:	3728      	adds	r7, #40	@ 0x28
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	20005520 	.word	0x20005520
 8011614:	20005534 	.word	0x20005534
 8011618:	08016bf0 	.word	0x08016bf0
 801161c:	08016c28 	.word	0x08016c28
 8011620:	08016c60 	.word	0x08016c60
 8011624:	08016c88 	.word	0x08016c88

08011628 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	460b      	mov	r3, r1
 8011632:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011634:	78fb      	ldrb	r3, [r7, #3]
 8011636:	461a      	mov	r2, r3
 8011638:	2103      	movs	r1, #3
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 f814 	bl	8011668 <icmp_send_response>
}
 8011640:	bf00      	nop
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	460b      	mov	r3, r1
 8011652:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011654:	78fb      	ldrb	r3, [r7, #3]
 8011656:	461a      	mov	r2, r3
 8011658:	210b      	movs	r1, #11
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 f804 	bl	8011668 <icmp_send_response>
}
 8011660:	bf00      	nop
 8011662:	3708      	adds	r7, #8
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b08c      	sub	sp, #48	@ 0x30
 801166c:	af04      	add	r7, sp, #16
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	460b      	mov	r3, r1
 8011672:	70fb      	strb	r3, [r7, #3]
 8011674:	4613      	mov	r3, r2
 8011676:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011678:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801167c:	2124      	movs	r1, #36	@ 0x24
 801167e:	2022      	movs	r0, #34	@ 0x22
 8011680:	f7f8 fab4 	bl	8009bec <pbuf_alloc>
 8011684:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d04c      	beq.n	8011726 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	895b      	ldrh	r3, [r3, #10]
 8011690:	2b23      	cmp	r3, #35	@ 0x23
 8011692:	d806      	bhi.n	80116a2 <icmp_send_response+0x3a>
 8011694:	4b26      	ldr	r3, [pc, #152]	@ (8011730 <icmp_send_response+0xc8>)
 8011696:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801169a:	4926      	ldr	r1, [pc, #152]	@ (8011734 <icmp_send_response+0xcc>)
 801169c:	4826      	ldr	r0, [pc, #152]	@ (8011738 <icmp_send_response+0xd0>)
 801169e:	f002 f821 	bl	80136e4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	78fa      	ldrb	r2, [r7, #3]
 80116b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	78ba      	ldrb	r2, [r7, #2]
 80116b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	2200      	movs	r2, #0
 80116be:	711a      	strb	r2, [r3, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	2200      	movs	r2, #0
 80116c8:	719a      	strb	r2, [r3, #6]
 80116ca:	2200      	movs	r2, #0
 80116cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	f103 0008 	add.w	r0, r3, #8
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	221c      	movs	r2, #28
 80116dc:	4619      	mov	r1, r3
 80116de:	f002 fa0e 	bl	8013afe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80116e8:	f107 030c 	add.w	r3, r7, #12
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 f825 	bl	801173c <ip4_route>
 80116f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d011      	beq.n	801171e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	2200      	movs	r2, #0
 80116fe:	709a      	strb	r2, [r3, #2]
 8011700:	2200      	movs	r2, #0
 8011702:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011704:	f107 020c 	add.w	r2, r7, #12
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	9302      	str	r3, [sp, #8]
 801170c:	2301      	movs	r3, #1
 801170e:	9301      	str	r3, [sp, #4]
 8011710:	2300      	movs	r3, #0
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	23ff      	movs	r3, #255	@ 0xff
 8011716:	2100      	movs	r1, #0
 8011718:	69f8      	ldr	r0, [r7, #28]
 801171a:	f000 f9cd 	bl	8011ab8 <ip4_output_if>
  }
  pbuf_free(q);
 801171e:	69f8      	ldr	r0, [r7, #28]
 8011720:	f7f8 fd48 	bl	800a1b4 <pbuf_free>
 8011724:	e000      	b.n	8011728 <icmp_send_response+0xc0>
    return;
 8011726:	bf00      	nop
}
 8011728:	3720      	adds	r7, #32
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	08016bf0 	.word	0x08016bf0
 8011734:	08016cbc 	.word	0x08016cbc
 8011738:	08016c60 	.word	0x08016c60

0801173c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801173c:	b480      	push	{r7}
 801173e:	b085      	sub	sp, #20
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011744:	4b33      	ldr	r3, [pc, #204]	@ (8011814 <ip4_route+0xd8>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	60fb      	str	r3, [r7, #12]
 801174a:	e036      	b.n	80117ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011752:	f003 0301 	and.w	r3, r3, #1
 8011756:	b2db      	uxtb	r3, r3
 8011758:	2b00      	cmp	r3, #0
 801175a:	d02b      	beq.n	80117b4 <ip4_route+0x78>
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011762:	089b      	lsrs	r3, r3, #2
 8011764:	f003 0301 	and.w	r3, r3, #1
 8011768:	b2db      	uxtb	r3, r3
 801176a:	2b00      	cmp	r3, #0
 801176c:	d022      	beq.n	80117b4 <ip4_route+0x78>
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	3304      	adds	r3, #4
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d01d      	beq.n	80117b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	3304      	adds	r3, #4
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	405a      	eors	r2, r3
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	3308      	adds	r3, #8
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	4013      	ands	r3, r2
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	e038      	b.n	8011806 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801179a:	f003 0302 	and.w	r3, r3, #2
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d108      	bne.n	80117b4 <ip4_route+0x78>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	330c      	adds	r3, #12
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d101      	bne.n	80117b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	e028      	b.n	8011806 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	60fb      	str	r3, [r7, #12]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d1c5      	bne.n	801174c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80117c0:	4b15      	ldr	r3, [pc, #84]	@ (8011818 <ip4_route+0xdc>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d01a      	beq.n	80117fe <ip4_route+0xc2>
 80117c8:	4b13      	ldr	r3, [pc, #76]	@ (8011818 <ip4_route+0xdc>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80117d0:	f003 0301 	and.w	r3, r3, #1
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d012      	beq.n	80117fe <ip4_route+0xc2>
 80117d8:	4b0f      	ldr	r3, [pc, #60]	@ (8011818 <ip4_route+0xdc>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80117e0:	f003 0304 	and.w	r3, r3, #4
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00a      	beq.n	80117fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80117e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011818 <ip4_route+0xdc>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3304      	adds	r3, #4
 80117ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d004      	beq.n	80117fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80117fc:	d101      	bne.n	8011802 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80117fe:	2300      	movs	r3, #0
 8011800:	e001      	b.n	8011806 <ip4_route+0xca>
  }

  return netif_default;
 8011802:	4b05      	ldr	r3, [pc, #20]	@ (8011818 <ip4_route+0xdc>)
 8011804:	681b      	ldr	r3, [r3, #0]
}
 8011806:	4618      	mov	r0, r3
 8011808:	3714      	adds	r7, #20
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop
 8011814:	20008a84 	.word	0x20008a84
 8011818:	20008a88 	.word	0x20008a88

0801181c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801182a:	f003 0301 	and.w	r3, r3, #1
 801182e:	b2db      	uxtb	r3, r3
 8011830:	2b00      	cmp	r3, #0
 8011832:	d016      	beq.n	8011862 <ip4_input_accept+0x46>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	3304      	adds	r3, #4
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d011      	beq.n	8011862 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801183e:	4b0b      	ldr	r3, [pc, #44]	@ (801186c <ip4_input_accept+0x50>)
 8011840:	695a      	ldr	r2, [r3, #20]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	3304      	adds	r3, #4
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	429a      	cmp	r2, r3
 801184a:	d008      	beq.n	801185e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801184c:	4b07      	ldr	r3, [pc, #28]	@ (801186c <ip4_input_accept+0x50>)
 801184e:	695b      	ldr	r3, [r3, #20]
 8011850:	6879      	ldr	r1, [r7, #4]
 8011852:	4618      	mov	r0, r3
 8011854:	f000 fa08 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 8011858:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801185a:	2b00      	cmp	r3, #0
 801185c:	d001      	beq.n	8011862 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801185e:	2301      	movs	r3, #1
 8011860:	e000      	b.n	8011864 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	3708      	adds	r7, #8
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	20005520 	.word	0x20005520

08011870 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b086      	sub	sp, #24
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	091b      	lsrs	r3, r3, #4
 8011886:	b2db      	uxtb	r3, r3
 8011888:	2b04      	cmp	r3, #4
 801188a:	d004      	beq.n	8011896 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7f8 fc91 	bl	800a1b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011892:	2300      	movs	r3, #0
 8011894:	e107      	b.n	8011aa6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	f003 030f 	and.w	r3, r3, #15
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	b2db      	uxtb	r3, r3
 80118a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	885b      	ldrh	r3, [r3, #2]
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7f7 f923 	bl	8008af8 <lwip_htons>
 80118b2:	4603      	mov	r3, r0
 80118b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	891b      	ldrh	r3, [r3, #8]
 80118ba:	89ba      	ldrh	r2, [r7, #12]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d204      	bcs.n	80118ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80118c0:	89bb      	ldrh	r3, [r7, #12]
 80118c2:	4619      	mov	r1, r3
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7f8 faef 	bl	8009ea8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	895b      	ldrh	r3, [r3, #10]
 80118ce:	89fa      	ldrh	r2, [r7, #14]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d807      	bhi.n	80118e4 <ip4_input+0x74>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	891b      	ldrh	r3, [r3, #8]
 80118d8:	89ba      	ldrh	r2, [r7, #12]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d802      	bhi.n	80118e4 <ip4_input+0x74>
 80118de:	89fb      	ldrh	r3, [r7, #14]
 80118e0:	2b13      	cmp	r3, #19
 80118e2:	d804      	bhi.n	80118ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7f8 fc65 	bl	800a1b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e0db      	b.n	8011aa6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	691b      	ldr	r3, [r3, #16]
 80118f2:	4a6f      	ldr	r2, [pc, #444]	@ (8011ab0 <ip4_input+0x240>)
 80118f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	4a6d      	ldr	r2, [pc, #436]	@ (8011ab0 <ip4_input+0x240>)
 80118fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80118fe:	4b6c      	ldr	r3, [pc, #432]	@ (8011ab0 <ip4_input+0x240>)
 8011900:	695b      	ldr	r3, [r3, #20]
 8011902:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011906:	2be0      	cmp	r3, #224	@ 0xe0
 8011908:	d112      	bne.n	8011930 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011910:	f003 0301 	and.w	r3, r3, #1
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	d007      	beq.n	801192a <ip4_input+0xba>
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	3304      	adds	r3, #4
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d002      	beq.n	801192a <ip4_input+0xba>
      netif = inp;
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	613b      	str	r3, [r7, #16]
 8011928:	e02a      	b.n	8011980 <ip4_input+0x110>
    } else {
      netif = NULL;
 801192a:	2300      	movs	r3, #0
 801192c:	613b      	str	r3, [r7, #16]
 801192e:	e027      	b.n	8011980 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011930:	6838      	ldr	r0, [r7, #0]
 8011932:	f7ff ff73 	bl	801181c <ip4_input_accept>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d002      	beq.n	8011942 <ip4_input+0xd2>
      netif = inp;
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	613b      	str	r3, [r7, #16]
 8011940:	e01e      	b.n	8011980 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011942:	2300      	movs	r3, #0
 8011944:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011946:	4b5a      	ldr	r3, [pc, #360]	@ (8011ab0 <ip4_input+0x240>)
 8011948:	695b      	ldr	r3, [r3, #20]
 801194a:	b2db      	uxtb	r3, r3
 801194c:	2b7f      	cmp	r3, #127	@ 0x7f
 801194e:	d017      	beq.n	8011980 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011950:	4b58      	ldr	r3, [pc, #352]	@ (8011ab4 <ip4_input+0x244>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	613b      	str	r3, [r7, #16]
 8011956:	e00e      	b.n	8011976 <ip4_input+0x106>
          if (netif == inp) {
 8011958:	693a      	ldr	r2, [r7, #16]
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	429a      	cmp	r2, r3
 801195e:	d006      	beq.n	801196e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011960:	6938      	ldr	r0, [r7, #16]
 8011962:	f7ff ff5b 	bl	801181c <ip4_input_accept>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d108      	bne.n	801197e <ip4_input+0x10e>
 801196c:	e000      	b.n	8011970 <ip4_input+0x100>
            continue;
 801196e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	613b      	str	r3, [r7, #16]
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d1ed      	bne.n	8011958 <ip4_input+0xe8>
 801197c:	e000      	b.n	8011980 <ip4_input+0x110>
            break;
 801197e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011980:	4b4b      	ldr	r3, [pc, #300]	@ (8011ab0 <ip4_input+0x240>)
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	6839      	ldr	r1, [r7, #0]
 8011986:	4618      	mov	r0, r3
 8011988:	f000 f96e 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d105      	bne.n	801199e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011992:	4b47      	ldr	r3, [pc, #284]	@ (8011ab0 <ip4_input+0x240>)
 8011994:	691b      	ldr	r3, [r3, #16]
 8011996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801199a:	2be0      	cmp	r3, #224	@ 0xe0
 801199c:	d104      	bne.n	80119a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f7f8 fc08 	bl	800a1b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80119a4:	2300      	movs	r3, #0
 80119a6:	e07e      	b.n	8011aa6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d104      	bne.n	80119b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7f8 fc00 	bl	800a1b4 <pbuf_free>
    return ERR_OK;
 80119b4:	2300      	movs	r3, #0
 80119b6:	e076      	b.n	8011aa6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	88db      	ldrh	r3, [r3, #6]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	461a      	mov	r2, r3
 80119c0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80119c4:	4013      	ands	r3, r2
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00b      	beq.n	80119e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 fc92 	bl	80122f4 <ip4_reass>
 80119d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d101      	bne.n	80119dc <ip4_input+0x16c>
      return ERR_OK;
 80119d8:	2300      	movs	r3, #0
 80119da:	e064      	b.n	8011aa6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80119e2:	4a33      	ldr	r2, [pc, #204]	@ (8011ab0 <ip4_input+0x240>)
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80119e8:	4a31      	ldr	r2, [pc, #196]	@ (8011ab0 <ip4_input+0x240>)
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80119ee:	4a30      	ldr	r2, [pc, #192]	@ (8011ab0 <ip4_input+0x240>)
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	f003 030f 	and.w	r3, r3, #15
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	461a      	mov	r2, r3
 8011a04:	4b2a      	ldr	r3, [pc, #168]	@ (8011ab0 <ip4_input+0x240>)
 8011a06:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011a08:	89fb      	ldrh	r3, [r7, #14]
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7f8 fb4b 	bl	800a0a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	7a5b      	ldrb	r3, [r3, #9]
 8011a16:	2b11      	cmp	r3, #17
 8011a18:	d006      	beq.n	8011a28 <ip4_input+0x1b8>
 8011a1a:	2b11      	cmp	r3, #17
 8011a1c:	dc13      	bgt.n	8011a46 <ip4_input+0x1d6>
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d00c      	beq.n	8011a3c <ip4_input+0x1cc>
 8011a22:	2b06      	cmp	r3, #6
 8011a24:	d005      	beq.n	8011a32 <ip4_input+0x1c2>
 8011a26:	e00e      	b.n	8011a46 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f7fe f9b0 	bl	800fd90 <udp_input>
        break;
 8011a30:	e026      	b.n	8011a80 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011a32:	6839      	ldr	r1, [r7, #0]
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f7fa f9f7 	bl	800be28 <tcp_input>
        break;
 8011a3a:	e021      	b.n	8011a80 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011a3c:	6839      	ldr	r1, [r7, #0]
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f7ff fcee 	bl	8011420 <icmp_input>
        break;
 8011a44:	e01c      	b.n	8011a80 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011a46:	4b1a      	ldr	r3, [pc, #104]	@ (8011ab0 <ip4_input+0x240>)
 8011a48:	695b      	ldr	r3, [r3, #20]
 8011a4a:	6939      	ldr	r1, [r7, #16]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 f90b 	bl	8011c68 <ip4_addr_isbroadcast_u32>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10f      	bne.n	8011a78 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a58:	4b15      	ldr	r3, [pc, #84]	@ (8011ab0 <ip4_input+0x240>)
 8011a5a:	695b      	ldr	r3, [r3, #20]
 8011a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011a60:	2be0      	cmp	r3, #224	@ 0xe0
 8011a62:	d009      	beq.n	8011a78 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011a64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011a68:	4619      	mov	r1, r3
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7f8 fb8f 	bl	800a18e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011a70:	2102      	movs	r1, #2
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f7ff fdd8 	bl	8011628 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7f8 fb9b 	bl	800a1b4 <pbuf_free>
        break;
 8011a7e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011a80:	4b0b      	ldr	r3, [pc, #44]	@ (8011ab0 <ip4_input+0x240>)
 8011a82:	2200      	movs	r2, #0
 8011a84:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011a86:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab0 <ip4_input+0x240>)
 8011a88:	2200      	movs	r2, #0
 8011a8a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011a8c:	4b08      	ldr	r3, [pc, #32]	@ (8011ab0 <ip4_input+0x240>)
 8011a8e:	2200      	movs	r2, #0
 8011a90:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011a92:	4b07      	ldr	r3, [pc, #28]	@ (8011ab0 <ip4_input+0x240>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011a98:	4b05      	ldr	r3, [pc, #20]	@ (8011ab0 <ip4_input+0x240>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011a9e:	4b04      	ldr	r3, [pc, #16]	@ (8011ab0 <ip4_input+0x240>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3718      	adds	r7, #24
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	20005520 	.word	0x20005520
 8011ab4:	20008a84 	.word	0x20008a84

08011ab8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b08a      	sub	sp, #40	@ 0x28
 8011abc:	af04      	add	r7, sp, #16
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	607a      	str	r2, [r7, #4]
 8011ac4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d009      	beq.n	8011ae4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d003      	beq.n	8011ade <ip4_output_if+0x26>
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d102      	bne.n	8011ae4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae0:	3304      	adds	r3, #4
 8011ae2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011ae4:	78fa      	ldrb	r2, [r7, #3]
 8011ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae8:	9302      	str	r3, [sp, #8]
 8011aea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011aee:	9301      	str	r3, [sp, #4]
 8011af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011af4:	9300      	str	r3, [sp, #0]
 8011af6:	4613      	mov	r3, r2
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	6979      	ldr	r1, [r7, #20]
 8011afc:	68f8      	ldr	r0, [r7, #12]
 8011afe:	f000 f805 	bl	8011b0c <ip4_output_if_src>
 8011b02:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3718      	adds	r7, #24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b088      	sub	sp, #32
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
 8011b18:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	7b9b      	ldrb	r3, [r3, #14]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d006      	beq.n	8011b30 <ip4_output_if_src+0x24>
 8011b22:	4b4b      	ldr	r3, [pc, #300]	@ (8011c50 <ip4_output_if_src+0x144>)
 8011b24:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8011b28:	494a      	ldr	r1, [pc, #296]	@ (8011c54 <ip4_output_if_src+0x148>)
 8011b2a:	484b      	ldr	r0, [pc, #300]	@ (8011c58 <ip4_output_if_src+0x14c>)
 8011b2c:	f001 fdda 	bl	80136e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d060      	beq.n	8011bf8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011b36:	2314      	movs	r3, #20
 8011b38:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011b3a:	2114      	movs	r1, #20
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f7f8 faa3 	bl	800a088 <pbuf_add_header>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d002      	beq.n	8011b4e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011b48:	f06f 0301 	mvn.w	r3, #1
 8011b4c:	e07c      	b.n	8011c48 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	895b      	ldrh	r3, [r3, #10]
 8011b58:	2b13      	cmp	r3, #19
 8011b5a:	d806      	bhi.n	8011b6a <ip4_output_if_src+0x5e>
 8011b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8011c50 <ip4_output_if_src+0x144>)
 8011b5e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8011b62:	493e      	ldr	r1, [pc, #248]	@ (8011c5c <ip4_output_if_src+0x150>)
 8011b64:	483c      	ldr	r0, [pc, #240]	@ (8011c58 <ip4_output_if_src+0x14c>)
 8011b66:	f001 fdbd 	bl	80136e4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	78fa      	ldrb	r2, [r7, #3]
 8011b6e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011b76:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011b80:	8b7b      	ldrh	r3, [r7, #26]
 8011b82:	089b      	lsrs	r3, r3, #2
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b8c:	b2da      	uxtb	r2, r3
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011b98:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	891b      	ldrh	r3, [r3, #8]
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7f6 ffaa 	bl	8008af8 <lwip_htons>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	719a      	strb	r2, [r3, #6]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8011c60 <ip4_output_if_src+0x154>)
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7f6 ff9c 	bl	8008af8 <lwip_htons>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011bc8:	4b25      	ldr	r3, [pc, #148]	@ (8011c60 <ip4_output_if_src+0x154>)
 8011bca:	881b      	ldrh	r3, [r3, #0]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	b29a      	uxth	r2, r3
 8011bd0:	4b23      	ldr	r3, [pc, #140]	@ (8011c60 <ip4_output_if_src+0x154>)
 8011bd2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d104      	bne.n	8011be4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011bda:	4b22      	ldr	r3, [pc, #136]	@ (8011c64 <ip4_output_if_src+0x158>)
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	60da      	str	r2, [r3, #12]
 8011be2:	e003      	b.n	8011bec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	729a      	strb	r2, [r3, #10]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	72da      	strb	r2, [r3, #11]
 8011bf6:	e00f      	b.n	8011c18 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	895b      	ldrh	r3, [r3, #10]
 8011bfc:	2b13      	cmp	r3, #19
 8011bfe:	d802      	bhi.n	8011c06 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011c00:	f06f 0301 	mvn.w	r3, #1
 8011c04:	e020      	b.n	8011c48 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	691b      	ldr	r3, [r3, #16]
 8011c10:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011c12:	f107 0314 	add.w	r3, r7, #20
 8011c16:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00c      	beq.n	8011c3a <ip4_output_if_src+0x12e>
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	891a      	ldrh	r2, [r3, #8]
 8011c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d906      	bls.n	8011c3a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f000 fd53 	bl	80126dc <ip4_frag>
 8011c36:	4603      	mov	r3, r0
 8011c38:	e006      	b.n	8011c48 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c3c:	695b      	ldr	r3, [r3, #20]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	68f9      	ldr	r1, [r7, #12]
 8011c42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c44:	4798      	blx	r3
 8011c46:	4603      	mov	r3, r0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3720      	adds	r7, #32
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	08016ce8 	.word	0x08016ce8
 8011c54:	08016d1c 	.word	0x08016d1c
 8011c58:	08016d28 	.word	0x08016d28
 8011c5c:	08016d50 	.word	0x08016d50
 8011c60:	20008be2 	.word	0x20008be2
 8011c64:	080175cc 	.word	0x080175cc

08011c68 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c7c:	d002      	beq.n	8011c84 <ip4_addr_isbroadcast_u32+0x1c>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011c84:	2301      	movs	r3, #1
 8011c86:	e02a      	b.n	8011cde <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011c8e:	f003 0302 	and.w	r3, r3, #2
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d101      	bne.n	8011c9a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011c96:	2300      	movs	r3, #0
 8011c98:	e021      	b.n	8011cde <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	3304      	adds	r3, #4
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d101      	bne.n	8011caa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	e019      	b.n	8011cde <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	3304      	adds	r3, #4
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	405a      	eors	r2, r3
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	3308      	adds	r3, #8
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4013      	ands	r3, r2
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d10d      	bne.n	8011cdc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	3308      	adds	r3, #8
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	43da      	mvns	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	3308      	adds	r3, #8
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d101      	bne.n	8011cdc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	e000      	b.n	8011cde <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011cdc:	2300      	movs	r3, #0
  }
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3714      	adds	r7, #20
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr
	...

08011cec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011cf6:	4b12      	ldr	r3, [pc, #72]	@ (8011d40 <ip_reass_tmr+0x54>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011cfc:	e018      	b.n	8011d30 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	7fdb      	ldrb	r3, [r3, #31]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00b      	beq.n	8011d1e <ip_reass_tmr+0x32>
      r->timer--;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	7fdb      	ldrb	r3, [r3, #31]
 8011d0a:	3b01      	subs	r3, #1
 8011d0c:	b2da      	uxtb	r2, r3
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	60fb      	str	r3, [r7, #12]
 8011d1c:	e008      	b.n	8011d30 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011d28:	68b9      	ldr	r1, [r7, #8]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 f80a 	bl	8011d44 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d1e3      	bne.n	8011cfe <ip_reass_tmr+0x12>
    }
  }
}
 8011d36:	bf00      	nop
 8011d38:	bf00      	nop
 8011d3a:	3710      	adds	r7, #16
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	20008be4 	.word	0x20008be4

08011d44 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b088      	sub	sp, #32
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011d52:	683a      	ldr	r2, [r7, #0]
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d105      	bne.n	8011d66 <ip_reass_free_complete_datagram+0x22>
 8011d5a:	4b45      	ldr	r3, [pc, #276]	@ (8011e70 <ip_reass_free_complete_datagram+0x12c>)
 8011d5c:	22ab      	movs	r2, #171	@ 0xab
 8011d5e:	4945      	ldr	r1, [pc, #276]	@ (8011e74 <ip_reass_free_complete_datagram+0x130>)
 8011d60:	4845      	ldr	r0, [pc, #276]	@ (8011e78 <ip_reass_free_complete_datagram+0x134>)
 8011d62:	f001 fcbf 	bl	80136e4 <iprintf>
  if (prev != NULL) {
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00a      	beq.n	8011d82 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d005      	beq.n	8011d82 <ip_reass_free_complete_datagram+0x3e>
 8011d76:	4b3e      	ldr	r3, [pc, #248]	@ (8011e70 <ip_reass_free_complete_datagram+0x12c>)
 8011d78:	22ad      	movs	r2, #173	@ 0xad
 8011d7a:	4940      	ldr	r1, [pc, #256]	@ (8011e7c <ip_reass_free_complete_datagram+0x138>)
 8011d7c:	483e      	ldr	r0, [pc, #248]	@ (8011e78 <ip_reass_free_complete_datagram+0x134>)
 8011d7e:	f001 fcb1 	bl	80136e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	889b      	ldrh	r3, [r3, #4]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d12a      	bne.n	8011dea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	6858      	ldr	r0, [r3, #4]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	3308      	adds	r3, #8
 8011daa:	2214      	movs	r2, #20
 8011dac:	4619      	mov	r1, r3
 8011dae:	f001 fea6 	bl	8013afe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011db2:	2101      	movs	r1, #1
 8011db4:	69b8      	ldr	r0, [r7, #24]
 8011db6:	f7ff fc47 	bl	8011648 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011dba:	69b8      	ldr	r0, [r7, #24]
 8011dbc:	f7f8 fa82 	bl	800a2c4 <pbuf_clen>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011dc4:	8bfa      	ldrh	r2, [r7, #30]
 8011dc6:	8a7b      	ldrh	r3, [r7, #18]
 8011dc8:	4413      	add	r3, r2
 8011dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011dce:	db05      	blt.n	8011ddc <ip_reass_free_complete_datagram+0x98>
 8011dd0:	4b27      	ldr	r3, [pc, #156]	@ (8011e70 <ip_reass_free_complete_datagram+0x12c>)
 8011dd2:	22bc      	movs	r2, #188	@ 0xbc
 8011dd4:	492a      	ldr	r1, [pc, #168]	@ (8011e80 <ip_reass_free_complete_datagram+0x13c>)
 8011dd6:	4828      	ldr	r0, [pc, #160]	@ (8011e78 <ip_reass_free_complete_datagram+0x134>)
 8011dd8:	f001 fc84 	bl	80136e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011ddc:	8bfa      	ldrh	r2, [r7, #30]
 8011dde:	8a7b      	ldrh	r3, [r7, #18]
 8011de0:	4413      	add	r3, r2
 8011de2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011de4:	69b8      	ldr	r0, [r7, #24]
 8011de6:	f7f8 f9e5 	bl	800a1b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011df0:	e01f      	b.n	8011e32 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f7f8 fa5e 	bl	800a2c4 <pbuf_clen>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e0c:	8bfa      	ldrh	r2, [r7, #30]
 8011e0e:	8a7b      	ldrh	r3, [r7, #18]
 8011e10:	4413      	add	r3, r2
 8011e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e16:	db05      	blt.n	8011e24 <ip_reass_free_complete_datagram+0xe0>
 8011e18:	4b15      	ldr	r3, [pc, #84]	@ (8011e70 <ip_reass_free_complete_datagram+0x12c>)
 8011e1a:	22cc      	movs	r2, #204	@ 0xcc
 8011e1c:	4918      	ldr	r1, [pc, #96]	@ (8011e80 <ip_reass_free_complete_datagram+0x13c>)
 8011e1e:	4816      	ldr	r0, [pc, #88]	@ (8011e78 <ip_reass_free_complete_datagram+0x134>)
 8011e20:	f001 fc60 	bl	80136e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e24:	8bfa      	ldrh	r2, [r7, #30]
 8011e26:	8a7b      	ldrh	r3, [r7, #18]
 8011e28:	4413      	add	r3, r2
 8011e2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011e2c:	68f8      	ldr	r0, [r7, #12]
 8011e2e:	f7f8 f9c1 	bl	800a1b4 <pbuf_free>
  while (p != NULL) {
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d1dc      	bne.n	8011df2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f8c2 	bl	8011fc4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011e40:	4b10      	ldr	r3, [pc, #64]	@ (8011e84 <ip_reass_free_complete_datagram+0x140>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	8bfa      	ldrh	r2, [r7, #30]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d905      	bls.n	8011e56 <ip_reass_free_complete_datagram+0x112>
 8011e4a:	4b09      	ldr	r3, [pc, #36]	@ (8011e70 <ip_reass_free_complete_datagram+0x12c>)
 8011e4c:	22d2      	movs	r2, #210	@ 0xd2
 8011e4e:	490e      	ldr	r1, [pc, #56]	@ (8011e88 <ip_reass_free_complete_datagram+0x144>)
 8011e50:	4809      	ldr	r0, [pc, #36]	@ (8011e78 <ip_reass_free_complete_datagram+0x134>)
 8011e52:	f001 fc47 	bl	80136e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011e56:	4b0b      	ldr	r3, [pc, #44]	@ (8011e84 <ip_reass_free_complete_datagram+0x140>)
 8011e58:	881a      	ldrh	r2, [r3, #0]
 8011e5a:	8bfb      	ldrh	r3, [r7, #30]
 8011e5c:	1ad3      	subs	r3, r2, r3
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	4b08      	ldr	r3, [pc, #32]	@ (8011e84 <ip_reass_free_complete_datagram+0x140>)
 8011e62:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011e64:	8bfb      	ldrh	r3, [r7, #30]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3720      	adds	r7, #32
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	08016d80 	.word	0x08016d80
 8011e74:	08016dbc 	.word	0x08016dbc
 8011e78:	08016dc8 	.word	0x08016dc8
 8011e7c:	08016df0 	.word	0x08016df0
 8011e80:	08016e04 	.word	0x08016e04
 8011e84:	20008be8 	.word	0x20008be8
 8011e88:	08016e24 	.word	0x08016e24

08011e8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b08a      	sub	sp, #40	@ 0x28
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011e96:	2300      	movs	r3, #0
 8011e98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011eaa:	4b28      	ldr	r3, [pc, #160]	@ (8011f4c <ip_reass_remove_oldest_datagram+0xc0>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011eb0:	e030      	b.n	8011f14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb4:	695a      	ldr	r2, [r3, #20]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d10c      	bne.n	8011ed8 <ip_reass_remove_oldest_datagram+0x4c>
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec0:	699a      	ldr	r2, [r3, #24]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	691b      	ldr	r3, [r3, #16]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d106      	bne.n	8011ed8 <ip_reass_remove_oldest_datagram+0x4c>
 8011eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ecc:	899a      	ldrh	r2, [r3, #12]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	889b      	ldrh	r3, [r3, #4]
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d014      	beq.n	8011f02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	3301      	adds	r3, #1
 8011edc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011ede:	6a3b      	ldr	r3, [r7, #32]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d104      	bne.n	8011eee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	61bb      	str	r3, [r7, #24]
 8011eec:	e009      	b.n	8011f02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef0:	7fda      	ldrb	r2, [r3, #31]
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	7fdb      	ldrb	r3, [r3, #31]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d803      	bhi.n	8011f02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d001      	beq.n	8011f0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d1cb      	bne.n	8011eb2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011f1a:	6a3b      	ldr	r3, [r7, #32]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d008      	beq.n	8011f32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011f20:	69b9      	ldr	r1, [r7, #24]
 8011f22:	6a38      	ldr	r0, [r7, #32]
 8011f24:	f7ff ff0e 	bl	8011d44 <ip_reass_free_complete_datagram>
 8011f28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011f2a:	697a      	ldr	r2, [r7, #20]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	4413      	add	r3, r2
 8011f30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011f32:	697a      	ldr	r2, [r7, #20]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	da02      	bge.n	8011f40 <ip_reass_remove_oldest_datagram+0xb4>
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	dcac      	bgt.n	8011e9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011f40:	697b      	ldr	r3, [r7, #20]
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3728      	adds	r7, #40	@ 0x28
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20008be4 	.word	0x20008be4

08011f50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f5a:	2004      	movs	r0, #4
 8011f5c:	f7f7 fa44 	bl	80093e8 <memp_malloc>
 8011f60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d110      	bne.n	8011f8a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011f68:	6839      	ldr	r1, [r7, #0]
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7ff ff8e 	bl	8011e8c <ip_reass_remove_oldest_datagram>
 8011f70:	4602      	mov	r2, r0
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	4293      	cmp	r3, r2
 8011f76:	dc03      	bgt.n	8011f80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011f78:	2004      	movs	r0, #4
 8011f7a:	f7f7 fa35 	bl	80093e8 <memp_malloc>
 8011f7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d101      	bne.n	8011f8a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011f86:	2300      	movs	r3, #0
 8011f88:	e016      	b.n	8011fb8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011f8a:	2220      	movs	r2, #32
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	68f8      	ldr	r0, [r7, #12]
 8011f90:	f001 fd00 	bl	8013994 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	220f      	movs	r2, #15
 8011f98:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011f9a:	4b09      	ldr	r3, [pc, #36]	@ (8011fc0 <ip_reass_enqueue_new_datagram+0x70>)
 8011f9c:	681a      	ldr	r2, [r3, #0]
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011fa2:	4a07      	ldr	r2, [pc, #28]	@ (8011fc0 <ip_reass_enqueue_new_datagram+0x70>)
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	3308      	adds	r3, #8
 8011fac:	2214      	movs	r2, #20
 8011fae:	6879      	ldr	r1, [r7, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f001 fda4 	bl	8013afe <memcpy>
  return ipr;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	20008be4 	.word	0x20008be4

08011fc4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011fce:	4b10      	ldr	r3, [pc, #64]	@ (8012010 <ip_reass_dequeue_datagram+0x4c>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d104      	bne.n	8011fe2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8012010 <ip_reass_dequeue_datagram+0x4c>)
 8011fde:	6013      	str	r3, [r2, #0]
 8011fe0:	e00d      	b.n	8011ffe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d106      	bne.n	8011ff6 <ip_reass_dequeue_datagram+0x32>
 8011fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8012014 <ip_reass_dequeue_datagram+0x50>)
 8011fea:	f240 1245 	movw	r2, #325	@ 0x145
 8011fee:	490a      	ldr	r1, [pc, #40]	@ (8012018 <ip_reass_dequeue_datagram+0x54>)
 8011ff0:	480a      	ldr	r0, [pc, #40]	@ (801201c <ip_reass_dequeue_datagram+0x58>)
 8011ff2:	f001 fb77 	bl	80136e4 <iprintf>
    prev->next = ipr->next;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011ffe:	6879      	ldr	r1, [r7, #4]
 8012000:	2004      	movs	r0, #4
 8012002:	f7f7 fa61 	bl	80094c8 <memp_free>
}
 8012006:	bf00      	nop
 8012008:	3708      	adds	r7, #8
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	20008be4 	.word	0x20008be4
 8012014:	08016d80 	.word	0x08016d80
 8012018:	08016e48 	.word	0x08016e48
 801201c:	08016dc8 	.word	0x08016dc8

08012020 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b08c      	sub	sp, #48	@ 0x30
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801202c:	2300      	movs	r3, #0
 801202e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012030:	2301      	movs	r3, #1
 8012032:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	885b      	ldrh	r3, [r3, #2]
 801203e:	b29b      	uxth	r3, r3
 8012040:	4618      	mov	r0, r3
 8012042:	f7f6 fd59 	bl	8008af8 <lwip_htons>
 8012046:	4603      	mov	r3, r0
 8012048:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	f003 030f 	and.w	r3, r3, #15
 8012052:	b2db      	uxtb	r3, r3
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012058:	7e7b      	ldrb	r3, [r7, #25]
 801205a:	b29b      	uxth	r3, r3
 801205c:	8b7a      	ldrh	r2, [r7, #26]
 801205e:	429a      	cmp	r2, r3
 8012060:	d202      	bcs.n	8012068 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012062:	f04f 33ff 	mov.w	r3, #4294967295
 8012066:	e135      	b.n	80122d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012068:	7e7b      	ldrb	r3, [r7, #25]
 801206a:	b29b      	uxth	r3, r3
 801206c:	8b7a      	ldrh	r2, [r7, #26]
 801206e:	1ad3      	subs	r3, r2, r3
 8012070:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	88db      	ldrh	r3, [r3, #6]
 8012076:	b29b      	uxth	r3, r3
 8012078:	4618      	mov	r0, r3
 801207a:	f7f6 fd3d 	bl	8008af8 <lwip_htons>
 801207e:	4603      	mov	r3, r0
 8012080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012084:	b29b      	uxth	r3, r3
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8012090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012092:	2200      	movs	r2, #0
 8012094:	701a      	strb	r2, [r3, #0]
 8012096:	2200      	movs	r2, #0
 8012098:	705a      	strb	r2, [r3, #1]
 801209a:	2200      	movs	r2, #0
 801209c:	709a      	strb	r2, [r3, #2]
 801209e:	2200      	movs	r2, #0
 80120a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80120a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120a4:	8afa      	ldrh	r2, [r7, #22]
 80120a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80120a8:	8afa      	ldrh	r2, [r7, #22]
 80120aa:	8b7b      	ldrh	r3, [r7, #26]
 80120ac:	4413      	add	r3, r2
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80120b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b6:	88db      	ldrh	r3, [r3, #6]
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	8afa      	ldrh	r2, [r7, #22]
 80120bc:	429a      	cmp	r2, r3
 80120be:	d902      	bls.n	80120c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80120c0:	f04f 33ff 	mov.w	r3, #4294967295
 80120c4:	e106      	b.n	80122d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80120cc:	e068      	b.n	80121a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80120ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80120d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120d6:	889b      	ldrh	r3, [r3, #4]
 80120d8:	b29a      	uxth	r2, r3
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	889b      	ldrh	r3, [r3, #4]
 80120de:	b29b      	uxth	r3, r3
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d235      	bcs.n	8012150 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80120e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80120ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d020      	beq.n	8012132 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80120f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f2:	889b      	ldrh	r3, [r3, #4]
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f8:	88db      	ldrh	r3, [r3, #6]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d307      	bcc.n	8012110 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012102:	88db      	ldrh	r3, [r3, #6]
 8012104:	b29a      	uxth	r2, r3
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	889b      	ldrh	r3, [r3, #4]
 801210a:	b29b      	uxth	r3, r3
 801210c:	429a      	cmp	r2, r3
 801210e:	d902      	bls.n	8012116 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012110:	f04f 33ff 	mov.w	r3, #4294967295
 8012114:	e0de      	b.n	80122d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012118:	68ba      	ldr	r2, [r7, #8]
 801211a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801211c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801211e:	88db      	ldrh	r3, [r3, #6]
 8012120:	b29a      	uxth	r2, r3
 8012122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012124:	889b      	ldrh	r3, [r3, #4]
 8012126:	b29b      	uxth	r3, r3
 8012128:	429a      	cmp	r2, r3
 801212a:	d03d      	beq.n	80121a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801212c:	2300      	movs	r3, #0
 801212e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012130:	e03a      	b.n	80121a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012134:	88db      	ldrh	r3, [r3, #6]
 8012136:	b29a      	uxth	r2, r3
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	889b      	ldrh	r3, [r3, #4]
 801213c:	b29b      	uxth	r3, r3
 801213e:	429a      	cmp	r2, r3
 8012140:	d902      	bls.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012142:	f04f 33ff 	mov.w	r3, #4294967295
 8012146:	e0c5      	b.n	80122d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	68ba      	ldr	r2, [r7, #8]
 801214c:	605a      	str	r2, [r3, #4]
      break;
 801214e:	e02b      	b.n	80121a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012152:	889b      	ldrh	r3, [r3, #4]
 8012154:	b29a      	uxth	r2, r3
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	889b      	ldrh	r3, [r3, #4]
 801215a:	b29b      	uxth	r3, r3
 801215c:	429a      	cmp	r2, r3
 801215e:	d102      	bne.n	8012166 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012160:	f04f 33ff 	mov.w	r3, #4294967295
 8012164:	e0b6      	b.n	80122d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012168:	889b      	ldrh	r3, [r3, #4]
 801216a:	b29a      	uxth	r2, r3
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	88db      	ldrh	r3, [r3, #6]
 8012170:	b29b      	uxth	r3, r3
 8012172:	429a      	cmp	r2, r3
 8012174:	d202      	bcs.n	801217c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012176:	f04f 33ff 	mov.w	r3, #4294967295
 801217a:	e0ab      	b.n	80122d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801217e:	2b00      	cmp	r3, #0
 8012180:	d009      	beq.n	8012196 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012184:	88db      	ldrh	r3, [r3, #6]
 8012186:	b29a      	uxth	r2, r3
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	889b      	ldrh	r3, [r3, #4]
 801218c:	b29b      	uxth	r3, r3
 801218e:	429a      	cmp	r2, r3
 8012190:	d001      	beq.n	8012196 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012192:	2300      	movs	r3, #0
 8012194:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80121a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d193      	bne.n	80120ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80121a6:	e000      	b.n	80121aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80121a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80121aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d12d      	bne.n	801220c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80121b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d01c      	beq.n	80121f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80121b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b8:	88db      	ldrh	r3, [r3, #6]
 80121ba:	b29a      	uxth	r2, r3
 80121bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121be:	889b      	ldrh	r3, [r3, #4]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d906      	bls.n	80121d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80121c6:	4b45      	ldr	r3, [pc, #276]	@ (80122dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121c8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80121cc:	4944      	ldr	r1, [pc, #272]	@ (80122e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80121ce:	4845      	ldr	r0, [pc, #276]	@ (80122e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121d0:	f001 fa88 	bl	80136e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80121d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121d6:	68ba      	ldr	r2, [r7, #8]
 80121d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80121da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121dc:	88db      	ldrh	r3, [r3, #6]
 80121de:	b29a      	uxth	r2, r3
 80121e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e2:	889b      	ldrh	r3, [r3, #4]
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d010      	beq.n	801220c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80121ea:	2300      	movs	r3, #0
 80121ec:	623b      	str	r3, [r7, #32]
 80121ee:	e00d      	b.n	801220c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d006      	beq.n	8012206 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80121f8:	4b38      	ldr	r3, [pc, #224]	@ (80122dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121fa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80121fe:	493a      	ldr	r1, [pc, #232]	@ (80122e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012200:	4838      	ldr	r0, [pc, #224]	@ (80122e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012202:	f001 fa6f 	bl	80136e4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	68ba      	ldr	r2, [r7, #8]
 801220a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d105      	bne.n	801221e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	7f9b      	ldrb	r3, [r3, #30]
 8012216:	f003 0301 	and.w	r3, r3, #1
 801221a:	2b00      	cmp	r3, #0
 801221c:	d059      	beq.n	80122d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801221e:	6a3b      	ldr	r3, [r7, #32]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d04f      	beq.n	80122c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d006      	beq.n	801223a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	889b      	ldrh	r3, [r3, #4]
 8012234:	b29b      	uxth	r3, r3
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801223a:	2300      	movs	r3, #0
 801223c:	623b      	str	r3, [r7, #32]
 801223e:	e041      	b.n	80122c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012242:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8012244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801224a:	e012      	b.n	8012272 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8012252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012254:	88db      	ldrh	r3, [r3, #6]
 8012256:	b29a      	uxth	r2, r3
 8012258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801225a:	889b      	ldrh	r3, [r3, #4]
 801225c:	b29b      	uxth	r3, r3
 801225e:	429a      	cmp	r2, r3
 8012260:	d002      	beq.n	8012268 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012262:	2300      	movs	r3, #0
 8012264:	623b      	str	r3, [r7, #32]
            break;
 8012266:	e007      	b.n	8012278 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801226a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8012272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1e9      	bne.n	801224c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012278:	6a3b      	ldr	r3, [r7, #32]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d022      	beq.n	80122c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d106      	bne.n	8012294 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012286:	4b15      	ldr	r3, [pc, #84]	@ (80122dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012288:	f240 12df 	movw	r2, #479	@ 0x1df
 801228c:	4917      	ldr	r1, [pc, #92]	@ (80122ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801228e:	4815      	ldr	r0, [pc, #84]	@ (80122e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012290:	f001 fa28 	bl	80136e4 <iprintf>
          LWIP_ASSERT("sanity check",
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801229c:	429a      	cmp	r2, r3
 801229e:	d106      	bne.n	80122ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80122a0:	4b0e      	ldr	r3, [pc, #56]	@ (80122dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80122a2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80122a6:	4911      	ldr	r1, [pc, #68]	@ (80122ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80122a8:	480e      	ldr	r0, [pc, #56]	@ (80122e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80122aa:	f001 fa1b 	bl	80136e4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80122ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d006      	beq.n	80122c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80122b6:	4b09      	ldr	r3, [pc, #36]	@ (80122dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80122b8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80122bc:	490c      	ldr	r1, [pc, #48]	@ (80122f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80122be:	4809      	ldr	r0, [pc, #36]	@ (80122e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80122c0:	f001 fa10 	bl	80136e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80122c4:	6a3b      	ldr	r3, [r7, #32]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	bf14      	ite	ne
 80122ca:	2301      	movne	r3, #1
 80122cc:	2300      	moveq	r3, #0
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	e000      	b.n	80122d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80122d2:	2300      	movs	r3, #0
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3730      	adds	r7, #48	@ 0x30
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	08016d80 	.word	0x08016d80
 80122e0:	08016e64 	.word	0x08016e64
 80122e4:	08016dc8 	.word	0x08016dc8
 80122e8:	08016e84 	.word	0x08016e84
 80122ec:	08016ebc 	.word	0x08016ebc
 80122f0:	08016ecc 	.word	0x08016ecc

080122f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b08e      	sub	sp, #56	@ 0x38
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	f003 030f 	and.w	r3, r3, #15
 801230a:	b2db      	uxtb	r3, r3
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	b2db      	uxtb	r3, r3
 8012310:	2b14      	cmp	r3, #20
 8012312:	f040 8171 	bne.w	80125f8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012318:	88db      	ldrh	r3, [r3, #6]
 801231a:	b29b      	uxth	r3, r3
 801231c:	4618      	mov	r0, r3
 801231e:	f7f6 fbeb 	bl	8008af8 <lwip_htons>
 8012322:	4603      	mov	r3, r0
 8012324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012328:	b29b      	uxth	r3, r3
 801232a:	00db      	lsls	r3, r3, #3
 801232c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801232e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012330:	885b      	ldrh	r3, [r3, #2]
 8012332:	b29b      	uxth	r3, r3
 8012334:	4618      	mov	r0, r3
 8012336:	f7f6 fbdf 	bl	8008af8 <lwip_htons>
 801233a:	4603      	mov	r3, r0
 801233c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	f003 030f 	and.w	r3, r3, #15
 8012346:	b2db      	uxtb	r3, r3
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801234e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012352:	b29b      	uxth	r3, r3
 8012354:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012356:	429a      	cmp	r2, r3
 8012358:	f0c0 8150 	bcc.w	80125fc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801235c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012360:	b29b      	uxth	r3, r3
 8012362:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012364:	1ad3      	subs	r3, r2, r3
 8012366:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f7f7 ffab 	bl	800a2c4 <pbuf_clen>
 801236e:	4603      	mov	r3, r0
 8012370:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012372:	4b8c      	ldr	r3, [pc, #560]	@ (80125a4 <ip4_reass+0x2b0>)
 8012374:	881b      	ldrh	r3, [r3, #0]
 8012376:	461a      	mov	r2, r3
 8012378:	8c3b      	ldrh	r3, [r7, #32]
 801237a:	4413      	add	r3, r2
 801237c:	2b0a      	cmp	r3, #10
 801237e:	dd10      	ble.n	80123a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012380:	8c3b      	ldrh	r3, [r7, #32]
 8012382:	4619      	mov	r1, r3
 8012384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012386:	f7ff fd81 	bl	8011e8c <ip_reass_remove_oldest_datagram>
 801238a:	4603      	mov	r3, r0
 801238c:	2b00      	cmp	r3, #0
 801238e:	f000 8137 	beq.w	8012600 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012392:	4b84      	ldr	r3, [pc, #528]	@ (80125a4 <ip4_reass+0x2b0>)
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	461a      	mov	r2, r3
 8012398:	8c3b      	ldrh	r3, [r7, #32]
 801239a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801239c:	2b0a      	cmp	r3, #10
 801239e:	f300 812f 	bgt.w	8012600 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80123a2:	4b81      	ldr	r3, [pc, #516]	@ (80125a8 <ip4_reass+0x2b4>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80123a8:	e015      	b.n	80123d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80123aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ac:	695a      	ldr	r2, [r3, #20]
 80123ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d10c      	bne.n	80123d0 <ip4_reass+0xdc>
 80123b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123b8:	699a      	ldr	r2, [r3, #24]
 80123ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123bc:	691b      	ldr	r3, [r3, #16]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d106      	bne.n	80123d0 <ip4_reass+0xdc>
 80123c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c4:	899a      	ldrh	r2, [r3, #12]
 80123c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c8:	889b      	ldrh	r3, [r3, #4]
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d006      	beq.n	80123de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80123d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80123d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d1e6      	bne.n	80123aa <ip4_reass+0xb6>
 80123dc:	e000      	b.n	80123e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80123de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80123e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d109      	bne.n	80123fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80123e6:	8c3b      	ldrh	r3, [r7, #32]
 80123e8:	4619      	mov	r1, r3
 80123ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123ec:	f7ff fdb0 	bl	8011f50 <ip_reass_enqueue_new_datagram>
 80123f0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80123f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d11c      	bne.n	8012432 <ip4_reass+0x13e>
      goto nullreturn;
 80123f8:	e105      	b.n	8012606 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123fc:	88db      	ldrh	r3, [r3, #6]
 80123fe:	b29b      	uxth	r3, r3
 8012400:	4618      	mov	r0, r3
 8012402:	f7f6 fb79 	bl	8008af8 <lwip_htons>
 8012406:	4603      	mov	r3, r0
 8012408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801240c:	2b00      	cmp	r3, #0
 801240e:	d110      	bne.n	8012432 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012412:	89db      	ldrh	r3, [r3, #14]
 8012414:	4618      	mov	r0, r3
 8012416:	f7f6 fb6f 	bl	8008af8 <lwip_htons>
 801241a:	4603      	mov	r3, r0
 801241c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012420:	2b00      	cmp	r3, #0
 8012422:	d006      	beq.n	8012432 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012426:	3308      	adds	r3, #8
 8012428:	2214      	movs	r2, #20
 801242a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801242c:	4618      	mov	r0, r3
 801242e:	f001 fb66 	bl	8013afe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012434:	88db      	ldrh	r3, [r3, #6]
 8012436:	b29b      	uxth	r3, r3
 8012438:	f003 0320 	and.w	r3, r3, #32
 801243c:	2b00      	cmp	r3, #0
 801243e:	bf0c      	ite	eq
 8012440:	2301      	moveq	r3, #1
 8012442:	2300      	movne	r3, #0
 8012444:	b2db      	uxtb	r3, r3
 8012446:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00e      	beq.n	801246c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801244e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012452:	4413      	add	r3, r2
 8012454:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012456:	8b7a      	ldrh	r2, [r7, #26]
 8012458:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801245a:	429a      	cmp	r2, r3
 801245c:	f0c0 80a0 	bcc.w	80125a0 <ip4_reass+0x2ac>
 8012460:	8b7b      	ldrh	r3, [r7, #26]
 8012462:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8012466:	4293      	cmp	r3, r2
 8012468:	f200 809a 	bhi.w	80125a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801246c:	69fa      	ldr	r2, [r7, #28]
 801246e:	6879      	ldr	r1, [r7, #4]
 8012470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012472:	f7ff fdd5 	bl	8012020 <ip_reass_chain_frag_into_datagram_and_validate>
 8012476:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801247e:	f000 809b 	beq.w	80125b8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012482:	4b48      	ldr	r3, [pc, #288]	@ (80125a4 <ip4_reass+0x2b0>)
 8012484:	881a      	ldrh	r2, [r3, #0]
 8012486:	8c3b      	ldrh	r3, [r7, #32]
 8012488:	4413      	add	r3, r2
 801248a:	b29a      	uxth	r2, r3
 801248c:	4b45      	ldr	r3, [pc, #276]	@ (80125a4 <ip4_reass+0x2b0>)
 801248e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00d      	beq.n	80124b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012496:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012498:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801249a:	4413      	add	r3, r2
 801249c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801249e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124a0:	8a7a      	ldrh	r2, [r7, #18]
 80124a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80124a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124a6:	7f9b      	ldrb	r3, [r3, #30]
 80124a8:	f043 0301 	orr.w	r3, r3, #1
 80124ac:	b2da      	uxtb	r2, r3
 80124ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d171      	bne.n	801259c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80124b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ba:	8b9b      	ldrh	r3, [r3, #28]
 80124bc:	3314      	adds	r3, #20
 80124be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80124c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80124ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80124d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124d4:	3308      	adds	r3, #8
 80124d6:	2214      	movs	r2, #20
 80124d8:	4619      	mov	r1, r3
 80124da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80124dc:	f001 fb0f 	bl	8013afe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80124e0:	8a3b      	ldrh	r3, [r7, #16]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7f6 fb08 	bl	8008af8 <lwip_htons>
 80124e8:	4603      	mov	r3, r0
 80124ea:	461a      	mov	r2, r3
 80124ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80124f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124f2:	2200      	movs	r2, #0
 80124f4:	719a      	strb	r2, [r3, #6]
 80124f6:	2200      	movs	r2, #0
 80124f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80124fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124fc:	2200      	movs	r2, #0
 80124fe:	729a      	strb	r2, [r3, #10]
 8012500:	2200      	movs	r2, #0
 8012502:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801250a:	e00d      	b.n	8012528 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801250c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012512:	2114      	movs	r1, #20
 8012514:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012516:	f7f7 fdc7 	bl	800a0a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801251a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7f7 ff0b 	bl	800a338 <pbuf_cat>
      r = iprh->next_pbuf;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8012528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801252a:	2b00      	cmp	r3, #0
 801252c:	d1ee      	bne.n	801250c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801252e:	4b1e      	ldr	r3, [pc, #120]	@ (80125a8 <ip4_reass+0x2b4>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012534:	429a      	cmp	r2, r3
 8012536:	d102      	bne.n	801253e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012538:	2300      	movs	r3, #0
 801253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801253c:	e010      	b.n	8012560 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801253e:	4b1a      	ldr	r3, [pc, #104]	@ (80125a8 <ip4_reass+0x2b4>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012544:	e007      	b.n	8012556 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801254c:	429a      	cmp	r2, r3
 801254e:	d006      	beq.n	801255e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012558:	2b00      	cmp	r3, #0
 801255a:	d1f4      	bne.n	8012546 <ip4_reass+0x252>
 801255c:	e000      	b.n	8012560 <ip4_reass+0x26c>
          break;
 801255e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012560:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012562:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012564:	f7ff fd2e 	bl	8011fc4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7f7 feab 	bl	800a2c4 <pbuf_clen>
 801256e:	4603      	mov	r3, r0
 8012570:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012572:	4b0c      	ldr	r3, [pc, #48]	@ (80125a4 <ip4_reass+0x2b0>)
 8012574:	881b      	ldrh	r3, [r3, #0]
 8012576:	8c3a      	ldrh	r2, [r7, #32]
 8012578:	429a      	cmp	r2, r3
 801257a:	d906      	bls.n	801258a <ip4_reass+0x296>
 801257c:	4b0b      	ldr	r3, [pc, #44]	@ (80125ac <ip4_reass+0x2b8>)
 801257e:	f240 229b 	movw	r2, #667	@ 0x29b
 8012582:	490b      	ldr	r1, [pc, #44]	@ (80125b0 <ip4_reass+0x2bc>)
 8012584:	480b      	ldr	r0, [pc, #44]	@ (80125b4 <ip4_reass+0x2c0>)
 8012586:	f001 f8ad 	bl	80136e4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801258a:	4b06      	ldr	r3, [pc, #24]	@ (80125a4 <ip4_reass+0x2b0>)
 801258c:	881a      	ldrh	r2, [r3, #0]
 801258e:	8c3b      	ldrh	r3, [r7, #32]
 8012590:	1ad3      	subs	r3, r2, r3
 8012592:	b29a      	uxth	r2, r3
 8012594:	4b03      	ldr	r3, [pc, #12]	@ (80125a4 <ip4_reass+0x2b0>)
 8012596:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	e038      	b.n	801260e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801259c:	2300      	movs	r3, #0
 801259e:	e036      	b.n	801260e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80125a0:	bf00      	nop
 80125a2:	e00a      	b.n	80125ba <ip4_reass+0x2c6>
 80125a4:	20008be8 	.word	0x20008be8
 80125a8:	20008be4 	.word	0x20008be4
 80125ac:	08016d80 	.word	0x08016d80
 80125b0:	08016ef0 	.word	0x08016ef0
 80125b4:	08016dc8 	.word	0x08016dc8
    goto nullreturn_ipr;
 80125b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80125ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d106      	bne.n	80125ce <ip4_reass+0x2da>
 80125c0:	4b15      	ldr	r3, [pc, #84]	@ (8012618 <ip4_reass+0x324>)
 80125c2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80125c6:	4915      	ldr	r1, [pc, #84]	@ (801261c <ip4_reass+0x328>)
 80125c8:	4815      	ldr	r0, [pc, #84]	@ (8012620 <ip4_reass+0x32c>)
 80125ca:	f001 f88b 	bl	80136e4 <iprintf>
  if (ipr->p == NULL) {
 80125ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d116      	bne.n	8012604 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80125d6:	4b13      	ldr	r3, [pc, #76]	@ (8012624 <ip4_reass+0x330>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125dc:	429a      	cmp	r2, r3
 80125de:	d006      	beq.n	80125ee <ip4_reass+0x2fa>
 80125e0:	4b0d      	ldr	r3, [pc, #52]	@ (8012618 <ip4_reass+0x324>)
 80125e2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80125e6:	4910      	ldr	r1, [pc, #64]	@ (8012628 <ip4_reass+0x334>)
 80125e8:	480d      	ldr	r0, [pc, #52]	@ (8012620 <ip4_reass+0x32c>)
 80125ea:	f001 f87b 	bl	80136e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80125ee:	2100      	movs	r1, #0
 80125f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80125f2:	f7ff fce7 	bl	8011fc4 <ip_reass_dequeue_datagram>
 80125f6:	e006      	b.n	8012606 <ip4_reass+0x312>
    goto nullreturn;
 80125f8:	bf00      	nop
 80125fa:	e004      	b.n	8012606 <ip4_reass+0x312>
    goto nullreturn;
 80125fc:	bf00      	nop
 80125fe:	e002      	b.n	8012606 <ip4_reass+0x312>
      goto nullreturn;
 8012600:	bf00      	nop
 8012602:	e000      	b.n	8012606 <ip4_reass+0x312>
  }

nullreturn:
 8012604:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7f7 fdd4 	bl	800a1b4 <pbuf_free>
  return NULL;
 801260c:	2300      	movs	r3, #0
}
 801260e:	4618      	mov	r0, r3
 8012610:	3738      	adds	r7, #56	@ 0x38
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	08016d80 	.word	0x08016d80
 801261c:	08016f0c 	.word	0x08016f0c
 8012620:	08016dc8 	.word	0x08016dc8
 8012624:	20008be4 	.word	0x20008be4
 8012628:	08016f18 	.word	0x08016f18

0801262c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012630:	2005      	movs	r0, #5
 8012632:	f7f6 fed9 	bl	80093e8 <memp_malloc>
 8012636:	4603      	mov	r3, r0
}
 8012638:	4618      	mov	r0, r3
 801263a:	bd80      	pop	{r7, pc}

0801263c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d106      	bne.n	8012658 <ip_frag_free_pbuf_custom_ref+0x1c>
 801264a:	4b07      	ldr	r3, [pc, #28]	@ (8012668 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801264c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012650:	4906      	ldr	r1, [pc, #24]	@ (801266c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012652:	4807      	ldr	r0, [pc, #28]	@ (8012670 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012654:	f001 f846 	bl	80136e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012658:	6879      	ldr	r1, [r7, #4]
 801265a:	2005      	movs	r0, #5
 801265c:	f7f6 ff34 	bl	80094c8 <memp_free>
}
 8012660:	bf00      	nop
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	08016d80 	.word	0x08016d80
 801266c:	08016f38 	.word	0x08016f38
 8012670:	08016dc8 	.word	0x08016dc8

08012674 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d106      	bne.n	8012694 <ipfrag_free_pbuf_custom+0x20>
 8012686:	4b11      	ldr	r3, [pc, #68]	@ (80126cc <ipfrag_free_pbuf_custom+0x58>)
 8012688:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801268c:	4910      	ldr	r1, [pc, #64]	@ (80126d0 <ipfrag_free_pbuf_custom+0x5c>)
 801268e:	4811      	ldr	r0, [pc, #68]	@ (80126d4 <ipfrag_free_pbuf_custom+0x60>)
 8012690:	f001 f828 	bl	80136e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	429a      	cmp	r2, r3
 801269a:	d006      	beq.n	80126aa <ipfrag_free_pbuf_custom+0x36>
 801269c:	4b0b      	ldr	r3, [pc, #44]	@ (80126cc <ipfrag_free_pbuf_custom+0x58>)
 801269e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80126a2:	490d      	ldr	r1, [pc, #52]	@ (80126d8 <ipfrag_free_pbuf_custom+0x64>)
 80126a4:	480b      	ldr	r0, [pc, #44]	@ (80126d4 <ipfrag_free_pbuf_custom+0x60>)
 80126a6:	f001 f81d 	bl	80136e4 <iprintf>
  if (pcr->original != NULL) {
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	695b      	ldr	r3, [r3, #20]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d004      	beq.n	80126bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	695b      	ldr	r3, [r3, #20]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7f7 fd7c 	bl	800a1b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f7ff ffbd 	bl	801263c <ip_frag_free_pbuf_custom_ref>
}
 80126c2:	bf00      	nop
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	08016d80 	.word	0x08016d80
 80126d0:	08016f44 	.word	0x08016f44
 80126d4:	08016dc8 	.word	0x08016dc8
 80126d8:	08016f50 	.word	0x08016f50

080126dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b094      	sub	sp, #80	@ 0x50
 80126e0:	af02      	add	r7, sp, #8
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80126f2:	3b14      	subs	r3, #20
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	da00      	bge.n	80126fa <ip4_frag+0x1e>
 80126f8:	3307      	adds	r3, #7
 80126fa:	10db      	asrs	r3, r3, #3
 80126fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80126fe:	2314      	movs	r3, #20
 8012700:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8012708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801270a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	f003 030f 	and.w	r3, r3, #15
 8012714:	b2db      	uxtb	r3, r3
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	b2db      	uxtb	r3, r3
 801271a:	2b14      	cmp	r3, #20
 801271c:	d002      	beq.n	8012724 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801271e:	f06f 0305 	mvn.w	r3, #5
 8012722:	e110      	b.n	8012946 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	895b      	ldrh	r3, [r3, #10]
 8012728:	2b13      	cmp	r3, #19
 801272a:	d809      	bhi.n	8012740 <ip4_frag+0x64>
 801272c:	4b88      	ldr	r3, [pc, #544]	@ (8012950 <ip4_frag+0x274>)
 801272e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012732:	4988      	ldr	r1, [pc, #544]	@ (8012954 <ip4_frag+0x278>)
 8012734:	4888      	ldr	r0, [pc, #544]	@ (8012958 <ip4_frag+0x27c>)
 8012736:	f000 ffd5 	bl	80136e4 <iprintf>
 801273a:	f06f 0305 	mvn.w	r3, #5
 801273e:	e102      	b.n	8012946 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012742:	88db      	ldrh	r3, [r3, #6]
 8012744:	b29b      	uxth	r3, r3
 8012746:	4618      	mov	r0, r3
 8012748:	f7f6 f9d6 	bl	8008af8 <lwip_htons>
 801274c:	4603      	mov	r3, r0
 801274e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012750:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012756:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801275a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801275c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012760:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	891b      	ldrh	r3, [r3, #8]
 8012766:	3b14      	subs	r3, #20
 8012768:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801276c:	e0e1      	b.n	8012932 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801276e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012770:	00db      	lsls	r3, r3, #3
 8012772:	b29b      	uxth	r3, r3
 8012774:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012778:	4293      	cmp	r3, r2
 801277a:	bf28      	it	cs
 801277c:	4613      	movcs	r3, r2
 801277e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012780:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012784:	2114      	movs	r1, #20
 8012786:	200e      	movs	r0, #14
 8012788:	f7f7 fa30 	bl	8009bec <pbuf_alloc>
 801278c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012790:	2b00      	cmp	r3, #0
 8012792:	f000 80d5 	beq.w	8012940 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012798:	895b      	ldrh	r3, [r3, #10]
 801279a:	2b13      	cmp	r3, #19
 801279c:	d806      	bhi.n	80127ac <ip4_frag+0xd0>
 801279e:	4b6c      	ldr	r3, [pc, #432]	@ (8012950 <ip4_frag+0x274>)
 80127a0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80127a4:	496d      	ldr	r1, [pc, #436]	@ (801295c <ip4_frag+0x280>)
 80127a6:	486c      	ldr	r0, [pc, #432]	@ (8012958 <ip4_frag+0x27c>)
 80127a8:	f000 ff9c 	bl	80136e4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80127ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	2214      	movs	r2, #20
 80127b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80127b4:	4618      	mov	r0, r3
 80127b6:	f001 f9a2 	bl	8013afe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80127ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80127c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80127c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80127c6:	e064      	b.n	8012892 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	895a      	ldrh	r2, [r3, #10]
 80127cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80127ce:	1ad3      	subs	r3, r2, r3
 80127d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	895b      	ldrh	r3, [r3, #10]
 80127d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80127d8:	429a      	cmp	r2, r3
 80127da:	d906      	bls.n	80127ea <ip4_frag+0x10e>
 80127dc:	4b5c      	ldr	r3, [pc, #368]	@ (8012950 <ip4_frag+0x274>)
 80127de:	f240 322d 	movw	r2, #813	@ 0x32d
 80127e2:	495f      	ldr	r1, [pc, #380]	@ (8012960 <ip4_frag+0x284>)
 80127e4:	485c      	ldr	r0, [pc, #368]	@ (8012958 <ip4_frag+0x27c>)
 80127e6:	f000 ff7d 	bl	80136e4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80127ea:	8bfa      	ldrh	r2, [r7, #30]
 80127ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80127f0:	4293      	cmp	r3, r2
 80127f2:	bf28      	it	cs
 80127f4:	4613      	movcs	r3, r2
 80127f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80127fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d105      	bne.n	801280e <ip4_frag+0x132>
        poff = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	60fb      	str	r3, [r7, #12]
        continue;
 801280c:	e041      	b.n	8012892 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801280e:	f7ff ff0d 	bl	801262c <ip_frag_alloc_pbuf_custom_ref>
 8012812:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d103      	bne.n	8012822 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801281a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801281c:	f7f7 fcca 	bl	800a1b4 <pbuf_free>
        goto memerr;
 8012820:	e08f      	b.n	8012942 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012822:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012828:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801282a:	4413      	add	r3, r2
 801282c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012830:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012834:	9201      	str	r2, [sp, #4]
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	4603      	mov	r3, r0
 801283a:	2241      	movs	r2, #65	@ 0x41
 801283c:	2000      	movs	r0, #0
 801283e:	f7f7 faff 	bl	8009e40 <pbuf_alloced_custom>
 8012842:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d106      	bne.n	8012858 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801284a:	69b8      	ldr	r0, [r7, #24]
 801284c:	f7ff fef6 	bl	801263c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012850:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012852:	f7f7 fcaf 	bl	800a1b4 <pbuf_free>
        goto memerr;
 8012856:	e074      	b.n	8012942 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f7f7 fd4b 	bl	800a2f4 <pbuf_ref>
      pcr->original = p;
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	4a3f      	ldr	r2, [pc, #252]	@ (8012964 <ip4_frag+0x288>)
 8012868:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801286a:	6979      	ldr	r1, [r7, #20]
 801286c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801286e:	f7f7 fd63 	bl	800a338 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012872:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8012876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012884:	2b00      	cmp	r3, #0
 8012886:	d004      	beq.n	8012892 <ip4_frag+0x1b6>
        poff = 0;
 8012888:	2300      	movs	r3, #0
 801288a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012896:	2b00      	cmp	r3, #0
 8012898:	d196      	bne.n	80127c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801289a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801289c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80128a0:	4413      	add	r3, r2
 80128a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80128a8:	f1a3 0213 	sub.w	r2, r3, #19
 80128ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80128b0:	429a      	cmp	r2, r3
 80128b2:	bfcc      	ite	gt
 80128b4:	2301      	movgt	r3, #1
 80128b6:	2300      	movle	r3, #0
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80128bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80128c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80128c6:	6a3b      	ldr	r3, [r7, #32]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d002      	beq.n	80128d2 <ip4_frag+0x1f6>
 80128cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d003      	beq.n	80128da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80128d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80128d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80128d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80128da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80128dc:	4618      	mov	r0, r3
 80128de:	f7f6 f90b 	bl	8008af8 <lwip_htons>
 80128e2:	4603      	mov	r3, r0
 80128e4:	461a      	mov	r2, r3
 80128e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80128ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80128ec:	3314      	adds	r3, #20
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7f6 f901 	bl	8008af8 <lwip_htons>
 80128f6:	4603      	mov	r3, r0
 80128f8:	461a      	mov	r2, r3
 80128fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80128fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012900:	2200      	movs	r2, #0
 8012902:	729a      	strb	r2, [r3, #10]
 8012904:	2200      	movs	r2, #0
 8012906:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	695b      	ldr	r3, [r3, #20]
 801290c:	687a      	ldr	r2, [r7, #4]
 801290e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012910:	68b8      	ldr	r0, [r7, #8]
 8012912:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012914:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012916:	f7f7 fc4d 	bl	800a1b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801291a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801291e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012926:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801292a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801292c:	4413      	add	r3, r2
 801292e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012936:	2b00      	cmp	r3, #0
 8012938:	f47f af19 	bne.w	801276e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801293c:	2300      	movs	r3, #0
 801293e:	e002      	b.n	8012946 <ip4_frag+0x26a>
      goto memerr;
 8012940:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012946:	4618      	mov	r0, r3
 8012948:	3748      	adds	r7, #72	@ 0x48
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}
 801294e:	bf00      	nop
 8012950:	08016d80 	.word	0x08016d80
 8012954:	08016f5c 	.word	0x08016f5c
 8012958:	08016dc8 	.word	0x08016dc8
 801295c:	08016f78 	.word	0x08016f78
 8012960:	08016f98 	.word	0x08016f98
 8012964:	08012675 	.word	0x08012675

08012968 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012972:	230e      	movs	r3, #14
 8012974:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	895b      	ldrh	r3, [r3, #10]
 801297a:	2b0e      	cmp	r3, #14
 801297c:	d96e      	bls.n	8012a5c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	7bdb      	ldrb	r3, [r3, #15]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d106      	bne.n	8012994 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801298c:	3301      	adds	r3, #1
 801298e:	b2da      	uxtb	r2, r3
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	7b1a      	ldrb	r2, [r3, #12]
 801299e:	7b5b      	ldrb	r3, [r3, #13]
 80129a0:	021b      	lsls	r3, r3, #8
 80129a2:	4313      	orrs	r3, r2
 80129a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d023      	beq.n	80129fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d10f      	bne.n	80129da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	785b      	ldrb	r3, [r3, #1]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d11b      	bne.n	80129fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80129c6:	2b5e      	cmp	r3, #94	@ 0x5e
 80129c8:	d117      	bne.n	80129fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	7b5b      	ldrb	r3, [r3, #13]
 80129ce:	f043 0310 	orr.w	r3, r3, #16
 80129d2:	b2da      	uxtb	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	735a      	strb	r2, [r3, #13]
 80129d8:	e00f      	b.n	80129fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	2206      	movs	r2, #6
 80129de:	4928      	ldr	r1, [pc, #160]	@ (8012a80 <ethernet_input+0x118>)
 80129e0:	4618      	mov	r0, r3
 80129e2:	f000 ffc7 	bl	8013974 <memcmp>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d106      	bne.n	80129fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	7b5b      	ldrb	r3, [r3, #13]
 80129f0:	f043 0308 	orr.w	r3, r3, #8
 80129f4:	b2da      	uxtb	r2, r3
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80129fa:	89fb      	ldrh	r3, [r7, #14]
 80129fc:	2b08      	cmp	r3, #8
 80129fe:	d003      	beq.n	8012a08 <ethernet_input+0xa0>
 8012a00:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012a04:	d014      	beq.n	8012a30 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012a06:	e032      	b.n	8012a6e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a0e:	f003 0308 	and.w	r3, r3, #8
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d024      	beq.n	8012a60 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a16:	8afb      	ldrh	r3, [r7, #22]
 8012a18:	4619      	mov	r1, r3
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f7f7 fb44 	bl	800a0a8 <pbuf_remove_header>
 8012a20:	4603      	mov	r3, r0
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d11e      	bne.n	8012a64 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012a26:	6839      	ldr	r1, [r7, #0]
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f7fe ff21 	bl	8011870 <ip4_input>
      break;
 8012a2e:	e013      	b.n	8012a58 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a36:	f003 0308 	and.w	r3, r3, #8
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d014      	beq.n	8012a68 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a3e:	8afb      	ldrh	r3, [r7, #22]
 8012a40:	4619      	mov	r1, r3
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f7f7 fb30 	bl	800a0a8 <pbuf_remove_header>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d10e      	bne.n	8012a6c <ethernet_input+0x104>
        etharp_input(p, netif);
 8012a4e:	6839      	ldr	r1, [r7, #0]
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f7fe f8c1 	bl	8010bd8 <etharp_input>
      break;
 8012a56:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	e00c      	b.n	8012a76 <ethernet_input+0x10e>
    goto free_and_return;
 8012a5c:	bf00      	nop
 8012a5e:	e006      	b.n	8012a6e <ethernet_input+0x106>
        goto free_and_return;
 8012a60:	bf00      	nop
 8012a62:	e004      	b.n	8012a6e <ethernet_input+0x106>
        goto free_and_return;
 8012a64:	bf00      	nop
 8012a66:	e002      	b.n	8012a6e <ethernet_input+0x106>
        goto free_and_return;
 8012a68:	bf00      	nop
 8012a6a:	e000      	b.n	8012a6e <ethernet_input+0x106>
        goto free_and_return;
 8012a6c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7f7 fba0 	bl	800a1b4 <pbuf_free>
  return ERR_OK;
 8012a74:	2300      	movs	r3, #0
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	3718      	adds	r7, #24
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	080175d0 	.word	0x080175d0

08012a84 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b086      	sub	sp, #24
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
 8012a90:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a92:	8c3b      	ldrh	r3, [r7, #32]
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7f6 f82f 	bl	8008af8 <lwip_htons>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012a9e:	210e      	movs	r1, #14
 8012aa0:	68b8      	ldr	r0, [r7, #8]
 8012aa2:	f7f7 faf1 	bl	800a088 <pbuf_add_header>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d125      	bne.n	8012af8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	8afa      	ldrh	r2, [r7, #22]
 8012ab6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	2206      	movs	r2, #6
 8012abc:	6839      	ldr	r1, [r7, #0]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f001 f81d 	bl	8013afe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	3306      	adds	r3, #6
 8012ac8:	2206      	movs	r2, #6
 8012aca:	6879      	ldr	r1, [r7, #4]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f001 f816 	bl	8013afe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012ad8:	2b06      	cmp	r3, #6
 8012ada:	d006      	beq.n	8012aea <ethernet_output+0x66>
 8012adc:	4b0a      	ldr	r3, [pc, #40]	@ (8012b08 <ethernet_output+0x84>)
 8012ade:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8012ae2:	490a      	ldr	r1, [pc, #40]	@ (8012b0c <ethernet_output+0x88>)
 8012ae4:	480a      	ldr	r0, [pc, #40]	@ (8012b10 <ethernet_output+0x8c>)
 8012ae6:	f000 fdfd 	bl	80136e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	699b      	ldr	r3, [r3, #24]
 8012aee:	68b9      	ldr	r1, [r7, #8]
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	4798      	blx	r3
 8012af4:	4603      	mov	r3, r0
 8012af6:	e002      	b.n	8012afe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012af8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012afa:	f06f 0301 	mvn.w	r3, #1
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3718      	adds	r7, #24
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	08016fa8 	.word	0x08016fa8
 8012b0c:	08016fe0 	.word	0x08016fe0
 8012b10:	08017014 	.word	0x08017014

08012b14 <rtg_main>:
u16_t dest_port = 0;
struct udp_pcb *upcb;
uint8_t incomming_buffer[MAX_BUF_LEN] = {0};
u16_t incomming_len = 0;

void rtg_main() {
 8012b14:	b580      	push	{r7, lr}
 8012b16:	af00      	add	r7, sp, #0
    printf("UDP Server is running...\r\n");
 8012b18:	480a      	ldr	r0, [pc, #40]	@ (8012b44 <rtg_main+0x30>)
 8012b1a:	f000 fe4b 	bl	80137b4 <puts>
    udpServer_init();
 8012b1e:	f000 f935 	bl	8012d8c <udpServer_init>

    while (1) {
        ethernetif_input(&gnetif);
 8012b22:	4809      	ldr	r0, [pc, #36]	@ (8012b48 <rtg_main+0x34>)
 8012b24:	f7f5 fd64 	bl	80085f0 <ethernetif_input>
        sys_check_timeouts();
 8012b28:	f7fd f842 	bl	800fbb0 <sys_check_timeouts>

        if (callback_flag == 1) {
 8012b2c:	4b07      	ldr	r3, [pc, #28]	@ (8012b4c <rtg_main+0x38>)
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	d1f6      	bne.n	8012b22 <rtg_main+0xe>
            printf("Received command for testing\r\n");
 8012b34:	4806      	ldr	r0, [pc, #24]	@ (8012b50 <rtg_main+0x3c>)
 8012b36:	f000 fe3d 	bl	80137b4 <puts>
            callback_flag = 0;
 8012b3a:	4b04      	ldr	r3, [pc, #16]	@ (8012b4c <rtg_main+0x38>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	701a      	strb	r2, [r3, #0]
        ethernetif_input(&gnetif);
 8012b40:	e7ef      	b.n	8012b22 <rtg_main+0xe>
 8012b42:	bf00      	nop
 8012b44:	0801703c 	.word	0x0801703c
 8012b48:	20000a40 	.word	0x20000a40
 8012b4c:	20008bea 	.word	0x20008bea
 8012b50:	08017058 	.word	0x08017058

08012b54 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012b68:	68b9      	ldr	r1, [r7, #8]
 8012b6a:	4804      	ldr	r0, [pc, #16]	@ (8012b7c <_write+0x28>)
 8012b6c:	f7f3 fc68 	bl	8006440 <HAL_UART_Transmit>
	return len;
 8012b70:	687b      	ldr	r3, [r7, #4]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	200003e8 	.word	0x200003e8

08012b80 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8012b86:	2300      	movs	r3, #0
 8012b88:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8012b8a:	1df9      	adds	r1, r7, #7
 8012b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b90:	2201      	movs	r2, #1
 8012b92:	4807      	ldr	r0, [pc, #28]	@ (8012bb0 <__io_getchar+0x30>)
 8012b94:	f7f3 fcd7 	bl	8006546 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8012b98:	1df9      	adds	r1, r7, #7
 8012b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	4803      	ldr	r0, [pc, #12]	@ (8012bb0 <__io_getchar+0x30>)
 8012ba2:	f7f3 fc4d 	bl	8006440 <HAL_UART_Transmit>
	return ch;
 8012ba6:	79fb      	ldrb	r3, [r7, #7]
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	200003e8 	.word	0x200003e8

08012bb4 <_read>:

int _read(int file, char *ptr, int len) {
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b086      	sub	sp, #24
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	617b      	str	r3, [r7, #20]
	char ch;

	for (; DataIdx < len; DataIdx++) {
 8012bc4:	e016      	b.n	8012bf4 <_read+0x40>
		ch = __io_getchar();
 8012bc6:	f7ff ffdb 	bl	8012b80 <__io_getchar>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	74fb      	strb	r3, [r7, #19]
		*ptr = ch;
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	7cfa      	ldrb	r2, [r7, #19]
 8012bd2:	701a      	strb	r2, [r3, #0]
		ptr++;
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8012bda:	7cfb      	ldrb	r3, [r7, #19]
 8012bdc:	2b0d      	cmp	r3, #13
 8012bde:	d002      	beq.n	8012be6 <_read+0x32>
 8012be0:	7cfb      	ldrb	r3, [r7, #19]
 8012be2:	2b0a      	cmp	r3, #10
 8012be4:	d103      	bne.n	8012bee <_read+0x3a>
			*(ptr) = 0;
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	2200      	movs	r2, #0
 8012bea:	701a      	strb	r2, [r3, #0]
			break;
 8012bec:	e006      	b.n	8012bfc <_read+0x48>
	for (; DataIdx < len; DataIdx++) {
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	617b      	str	r3, [r7, #20]
 8012bf4:	697a      	ldr	r2, [r7, #20]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	dbe4      	blt.n	8012bc6 <_read+0x12>
		}
	}
	return DataIdx + 1;
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	3301      	adds	r3, #1
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3718      	adds	r7, #24
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <execute_test>:
#include "Protocol.h"
#include "UART_test.h"
#include "ADC_test.h"
#include "Timer_test.h"

static uint8_t execute_test(TestCommand* command) {
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
	printf("Executing test for Peripheral: %u, Test-ID: %u\r\n", (unsigned int)command->peripheral, (unsigned int)command->test_id);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	791b      	ldrb	r3, [r3, #4]
 8012c14:	4619      	mov	r1, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	4818      	ldr	r0, [pc, #96]	@ (8012c80 <execute_test+0x78>)
 8012c1e:	f000 fd61 	bl	80136e4 <iprintf>
    switch (command->peripheral) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	791b      	ldrb	r3, [r3, #4]
 8012c26:	2b10      	cmp	r3, #16
 8012c28:	d010      	beq.n	8012c4c <execute_test+0x44>
 8012c2a:	2b10      	cmp	r3, #16
 8012c2c:	dc1c      	bgt.n	8012c68 <execute_test+0x60>
 8012c2e:	2b01      	cmp	r3, #1
 8012c30:	d013      	beq.n	8012c5a <execute_test+0x52>
 8012c32:	2b02      	cmp	r3, #2
 8012c34:	d118      	bne.n	8012c68 <execute_test+0x60>
        case TEST_PERIPHERAL_UART:
        	return test_uart(command->bit_pattern, command->pattern_length, command->iterations);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	1dd8      	adds	r0, r3, #7
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	7999      	ldrb	r1, [r3, #6]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	795b      	ldrb	r3, [r3, #5]
 8012c42:	461a      	mov	r2, r3
 8012c44:	f000 fa50 	bl	80130e8 <test_uart>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	e014      	b.n	8012c76 <execute_test+0x6e>
        case TEST_PERIPHERAL_ADC:
            return test_adc(command->iterations);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	795b      	ldrb	r3, [r3, #5]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f000 f8cd 	bl	8012df0 <test_adc>
 8012c56:	4603      	mov	r3, r0
 8012c58:	e00d      	b.n	8012c76 <execute_test+0x6e>
        case TEST_PERIPHERAL_TIMER:
        	return test_timer(command->iterations);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	795b      	ldrb	r3, [r3, #5]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f000 f95a 	bl	8012f18 <test_timer>
 8012c64:	4603      	mov	r3, r0
 8012c66:	e006      	b.n	8012c76 <execute_test+0x6e>
        default:
            printf("Invalid peripheral for testing: %d\r\n", command->peripheral);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	791b      	ldrb	r3, [r3, #4]
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4805      	ldr	r0, [pc, #20]	@ (8012c84 <execute_test+0x7c>)
 8012c70:	f000 fd38 	bl	80136e4 <iprintf>
            return 0xFF;
 8012c74:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3708      	adds	r7, #8
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	08017078 	.word	0x08017078
 8012c84:	080170ac 	.word	0x080170ac

08012c88 <udp_receive_callback>:

void udp_receive_callback(void* arg, struct udp_pcb* upcb, struct pbuf* p, const ip_addr_t* addr, u16_t port) {
 8012c88:	b590      	push	{r4, r7, lr}
 8012c8a:	b0a5      	sub	sp, #148	@ 0x94
 8012c8c:	af02      	add	r7, sp, #8
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	60b9      	str	r1, [r7, #8]
 8012c92:	607a      	str	r2, [r7, #4]
 8012c94:	603b      	str	r3, [r7, #0]
    TestCommand command;
    TestResult result;

    // Parse incoming command
    memcpy(&command, p->payload, sizeof(TestCommand));
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6859      	ldr	r1, [r3, #4]
 8012c9a:	f107 031c 	add.w	r3, r7, #28
 8012c9e:	226c      	movs	r2, #108	@ 0x6c
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f000 ff2c 	bl	8013afe <memcpy>
    pbuf_free(p);
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f7f7 fa84 	bl	800a1b4 <pbuf_free>

    // Validate pattern length
       if (command.pattern_length != strlen(command.bit_pattern)) {
 8012cac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012cb0:	461c      	mov	r4, r3
 8012cb2:	f107 031c 	add.w	r3, r7, #28
 8012cb6:	3307      	adds	r3, #7
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7ed faa9 	bl	8000210 <strlen>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	429c      	cmp	r4, r3
 8012cc2:	d01c      	beq.n	8012cfe <udp_receive_callback+0x76>
           printf("Pattern length mismatch. Expected: %d, Received: %d\r\n", (int)strlen(command.bit_pattern), command.pattern_length);
 8012cc4:	f107 031c 	add.w	r3, r7, #28
 8012cc8:	3307      	adds	r3, #7
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7ed faa0 	bl	8000210 <strlen>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012cd8:	461a      	mov	r2, r3
 8012cda:	4814      	ldr	r0, [pc, #80]	@ (8012d2c <udp_receive_callback+0xa4>)
 8012cdc:	f000 fd02 	bl	80136e4 <iprintf>
           result.result = 0xFF;  // Indicate error
 8012ce0:	23ff      	movs	r3, #255	@ 0xff
 8012ce2:	763b      	strb	r3, [r7, #24]
           result.test_id = command.test_id;
 8012ce4:	69fb      	ldr	r3, [r7, #28]
 8012ce6:	617b      	str	r3, [r7, #20]
           send_packet(upcb, &result, sizeof(TestResult), addr, port);
 8012ce8:	f107 0114 	add.w	r1, r7, #20
 8012cec:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8012cf0:	9300      	str	r3, [sp, #0]
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	2208      	movs	r2, #8
 8012cf6:	68b8      	ldr	r0, [r7, #8]
 8012cf8:	f000 f81a 	bl	8012d30 <send_packet>
 8012cfc:	e012      	b.n	8012d24 <udp_receive_callback+0x9c>
           return;
       }

    // Execute the test
    result.test_id = command.test_id;
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	617b      	str	r3, [r7, #20]
    result.result = execute_test(&command);
 8012d02:	f107 031c 	add.w	r3, r7, #28
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff ff7e 	bl	8012c08 <execute_test>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	763b      	strb	r3, [r7, #24]

    // Send the result back to the client
    send_packet(upcb, &result, sizeof(TestResult), addr, port);
 8012d10:	f107 0114 	add.w	r1, r7, #20
 8012d14:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8012d18:	9300      	str	r3, [sp, #0]
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	2208      	movs	r2, #8
 8012d1e:	68b8      	ldr	r0, [r7, #8]
 8012d20:	f000 f806 	bl	8012d30 <send_packet>
}
 8012d24:	378c      	adds	r7, #140	@ 0x8c
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd90      	pop	{r4, r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	080170d4 	.word	0x080170d4

08012d30 <send_packet>:



err_t send_packet(struct udp_pcb* pcb, const void* payload, u16_t payload_len, const ip_addr_t* ipaddr, u16_t port)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	60b9      	str	r1, [r7, #8]
 8012d3a:	603b      	str	r3, [r7, #0]
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	80fb      	strh	r3, [r7, #6]
    err_t err;
    struct pbuf* p;

    // allocate a pbuf for the payload
    p = pbuf_alloc(PBUF_TRANSPORT, payload_len, PBUF_RAM);
 8012d40:	88fb      	ldrh	r3, [r7, #6]
 8012d42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012d46:	4619      	mov	r1, r3
 8012d48:	2036      	movs	r0, #54	@ 0x36
 8012d4a:	f7f6 ff4f 	bl	8009bec <pbuf_alloc>
 8012d4e:	6178      	str	r0, [r7, #20]
    if (!p) {
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d102      	bne.n	8012d5c <send_packet+0x2c>
        // failed to allocate pbuf
        return ERR_MEM;
 8012d56:	f04f 33ff 	mov.w	r3, #4294967295
 8012d5a:	e013      	b.n	8012d84 <send_packet+0x54>
    }

    // copy the payload into the pbuf
    memcpy(p->payload, payload, payload_len);
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	88fa      	ldrh	r2, [r7, #6]
 8012d62:	68b9      	ldr	r1, [r7, #8]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f000 feca 	bl	8013afe <memcpy>

    // send the packet
    err = udp_sendto(pcb, p, ipaddr, port);
 8012d6a:	8c3b      	ldrh	r3, [r7, #32]
 8012d6c:	683a      	ldr	r2, [r7, #0]
 8012d6e:	6979      	ldr	r1, [r7, #20]
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f7fd f921 	bl	800ffb8 <udp_sendto>
 8012d76:	4603      	mov	r3, r0
 8012d78:	74fb      	strb	r3, [r7, #19]

    // free the pbuf
    pbuf_free(p);
 8012d7a:	6978      	ldr	r0, [r7, #20]
 8012d7c:	f7f7 fa1a 	bl	800a1b4 <pbuf_free>

    return err;
 8012d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3718      	adds	r7, #24
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <udpServer_init>:


void udpServer_init(void) {
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   upcb = udp_new();
 8012d92:	f7fd fbb1 	bl	80104f8 <udp_new>
 8012d96:	4603      	mov	r3, r0
 8012d98:	4a11      	ldr	r2, [pc, #68]	@ (8012de0 <udpServer_init+0x54>)
 8012d9a:	6013      	str	r3, [r2, #0]
   callback_flag = 0;
 8012d9c:	4b11      	ldr	r3, [pc, #68]	@ (8012de4 <udpServer_init+0x58>)
 8012d9e:	2200      	movs	r2, #0
 8012da0:	701a      	strb	r2, [r3, #0]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 50,007 is the server UDP port
 8012da2:	4b0f      	ldr	r3, [pc, #60]	@ (8012de0 <udpServer_init+0x54>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f24c 3257 	movw	r2, #50007	@ 0xc357
 8012daa:	490f      	ldr	r1, [pc, #60]	@ (8012de8 <udpServer_init+0x5c>)
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7fd fab9 	bl	8010324 <udp_bind>
 8012db2:	4603      	mov	r3, r0
 8012db4:	71fb      	strb	r3, [r7, #7]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 8012db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d107      	bne.n	8012dce <udpServer_init+0x42>
	   udp_recv(upcb, udp_receive_callback, NULL);
 8012dbe:	4b08      	ldr	r3, [pc, #32]	@ (8012de0 <udpServer_init+0x54>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	4909      	ldr	r1, [pc, #36]	@ (8012dec <udpServer_init+0x60>)
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7fd fb34 	bl	8010434 <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 8012dcc:	e004      	b.n	8012dd8 <udpServer_init+0x4c>
	   udp_remove(upcb);
 8012dce:	4b04      	ldr	r3, [pc, #16]	@ (8012de0 <udpServer_init+0x54>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fd fb4e 	bl	8010474 <udp_remove>
}
 8012dd8:	bf00      	nop
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	20008bec 	.word	0x20008bec
 8012de4:	20008bea 	.word	0x20008bea
 8012de8:	080175cc 	.word	0x080175cc
 8012dec:	08012c89 	.word	0x08012c89

08012df0 <test_adc>:
 * Perform ADC test.
 *
 * @param iterations Number of iterations to sample ADC.
 * @return 1 for success, 0 for failure.
 */
uint8_t test_adc(uint16_t iterations) {
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b088      	sub	sp, #32
 8012df4:	af02      	add	r7, sp, #8
 8012df6:	4603      	mov	r3, r0
 8012df8:	80fb      	strh	r3, [r7, #6]
    printf("Starting ADC Test with %u iterations...\r\n", iterations);
 8012dfa:	88fb      	ldrh	r3, [r7, #6]
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	483c      	ldr	r0, [pc, #240]	@ (8012ef0 <test_adc+0x100>)
 8012e00:	f000 fc70 	bl	80136e4 <iprintf>

    uint32_t adc_value = 0;
 8012e04:	2300      	movs	r3, #0
 8012e06:	60fb      	str	r3, [r7, #12]
    uint32_t success = 1;
 8012e08:	2301      	movs	r3, #1
 8012e0a:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < iterations; i++) {
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	827b      	strh	r3, [r7, #18]
 8012e10:	e055      	b.n	8012ebe <test_adc+0xce>
    	 printf("\nIteration %d:\r\n", i + 1);
 8012e12:	8a7b      	ldrh	r3, [r7, #18]
 8012e14:	3301      	adds	r3, #1
 8012e16:	4619      	mov	r1, r3
 8012e18:	4836      	ldr	r0, [pc, #216]	@ (8012ef4 <test_adc+0x104>)
 8012e1a:	f000 fc63 	bl	80136e4 <iprintf>
        // Start ADC conversion
        HAL_ADC_Start(&hadc1);
 8012e1e:	4836      	ldr	r0, [pc, #216]	@ (8012ef8 <test_adc+0x108>)
 8012e20:	f7ee fd7e 	bl	8001920 <HAL_ADC_Start>

        // Wait for ADC conversion to complete
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8012e24:	2164      	movs	r1, #100	@ 0x64
 8012e26:	4834      	ldr	r0, [pc, #208]	@ (8012ef8 <test_adc+0x108>)
 8012e28:	f7ee fe7c 	bl	8001b24 <HAL_ADC_PollForConversion>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d131      	bne.n	8012e96 <test_adc+0xa6>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8012e32:	4831      	ldr	r0, [pc, #196]	@ (8012ef8 <test_adc+0x108>)
 8012e34:	f7ef f811 	bl	8001e5a <HAL_ADC_GetValue>
 8012e38:	60f8      	str	r0, [r7, #12]

            printf("Iteration %u: ADC Value = %lu (Expected: %lu ± %lu)\r\n",
 8012e3a:	8a7b      	ldrh	r3, [r7, #18]
 8012e3c:	1c59      	adds	r1, r3, #1
 8012e3e:	8a7b      	ldrh	r3, [r7, #18]
                   i + 1, adc_value, known_adc_values[i], acceptable_offset);
 8012e40:	4a2e      	ldr	r2, [pc, #184]	@ (8012efc <test_adc+0x10c>)
 8012e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            printf("Iteration %u: ADC Value = %lu (Expected: %lu ± %lu)\r\n",
 8012e46:	2296      	movs	r2, #150	@ 0x96
 8012e48:	9200      	str	r2, [sp, #0]
 8012e4a:	68fa      	ldr	r2, [r7, #12]
 8012e4c:	482c      	ldr	r0, [pc, #176]	@ (8012f00 <test_adc+0x110>)
 8012e4e:	f000 fc49 	bl	80136e4 <iprintf>

            // Validate the ADC value within the acceptable range
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 8012e52:	8a7b      	ldrh	r3, [r7, #18]
 8012e54:	4a29      	ldr	r2, [pc, #164]	@ (8012efc <test_adc+0x10c>)
 8012e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e5a:	2296      	movs	r2, #150	@ 0x96
 8012e5c:	1a9b      	subs	r3, r3, r2
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d308      	bcc.n	8012e76 <test_adc+0x86>
                adc_value > known_adc_values[i] + acceptable_offset) {
 8012e64:	8a7b      	ldrh	r3, [r7, #18]
 8012e66:	4a25      	ldr	r2, [pc, #148]	@ (8012efc <test_adc+0x10c>)
 8012e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e6c:	2296      	movs	r2, #150	@ 0x96
 8012e6e:	4413      	add	r3, r2
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d91a      	bls.n	8012eac <test_adc+0xbc>
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 8012e76:	8a7b      	ldrh	r3, [r7, #18]
 8012e78:	1c59      	adds	r1, r3, #1
 8012e7a:	8a7b      	ldrh	r3, [r7, #18]
                       i + 1, known_adc_values[i], acceptable_offset, adc_value);
 8012e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8012efc <test_adc+0x10c>)
 8012e7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 8012e82:	2096      	movs	r0, #150	@ 0x96
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	9300      	str	r3, [sp, #0]
 8012e88:	4603      	mov	r3, r0
 8012e8a:	481e      	ldr	r0, [pc, #120]	@ (8012f04 <test_adc+0x114>)
 8012e8c:	f000 fc2a 	bl	80136e4 <iprintf>
                success = 0; // Mark as failure
 8012e90:	2300      	movs	r3, #0
 8012e92:	617b      	str	r3, [r7, #20]
 8012e94:	e00a      	b.n	8012eac <test_adc+0xbc>
            }
        } else {
            printf("ADC conversion timeout on iteration %u.\r\n", i + 1);
 8012e96:	8a7b      	ldrh	r3, [r7, #18]
 8012e98:	3301      	adds	r3, #1
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	481a      	ldr	r0, [pc, #104]	@ (8012f08 <test_adc+0x118>)
 8012e9e:	f000 fc21 	bl	80136e4 <iprintf>
            HAL_ADC_Stop(&hadc1);
 8012ea2:	4815      	ldr	r0, [pc, #84]	@ (8012ef8 <test_adc+0x108>)
 8012ea4:	f7ee fe0a 	bl	8001abc <HAL_ADC_Stop>
            return 0xFF; // Failure
 8012ea8:	23ff      	movs	r3, #255	@ 0xff
 8012eaa:	e01d      	b.n	8012ee8 <test_adc+0xf8>
        }

        // Stop ADC conversion
        HAL_ADC_Stop(&hadc1);
 8012eac:	4812      	ldr	r0, [pc, #72]	@ (8012ef8 <test_adc+0x108>)
 8012eae:	f7ee fe05 	bl	8001abc <HAL_ADC_Stop>

        // Add delay between iterations
        HAL_Delay(100);
 8012eb2:	2064      	movs	r0, #100	@ 0x64
 8012eb4:	f7ee fccc 	bl	8001850 <HAL_Delay>
    for (uint16_t i = 0; i < iterations; i++) {
 8012eb8:	8a7b      	ldrh	r3, [r7, #18]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	827b      	strh	r3, [r7, #18]
 8012ebe:	8a7a      	ldrh	r2, [r7, #18]
 8012ec0:	88fb      	ldrh	r3, [r7, #6]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d3a5      	bcc.n	8012e12 <test_adc+0x22>
    }

    if (success) {
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d009      	beq.n	8012ee0 <test_adc+0xf0>
        printf("ADC Test Passed for all %u iterations.\r\n", iterations);
 8012ecc:	88fb      	ldrh	r3, [r7, #6]
 8012ece:	4619      	mov	r1, r3
 8012ed0:	480e      	ldr	r0, [pc, #56]	@ (8012f0c <test_adc+0x11c>)
 8012ed2:	f000 fc07 	bl	80136e4 <iprintf>
    } else {
        printf("ADC Test Failed.\r\n");
        return 0xFF;
    }
    printf("ADC Test complete.\r\n");
 8012ed6:	480e      	ldr	r0, [pc, #56]	@ (8012f10 <test_adc+0x120>)
 8012ed8:	f000 fc6c 	bl	80137b4 <puts>
    return 1;
 8012edc:	2301      	movs	r3, #1
 8012ede:	e003      	b.n	8012ee8 <test_adc+0xf8>
        printf("ADC Test Failed.\r\n");
 8012ee0:	480c      	ldr	r0, [pc, #48]	@ (8012f14 <test_adc+0x124>)
 8012ee2:	f000 fc67 	bl	80137b4 <puts>
        return 0xFF;
 8012ee6:	23ff      	movs	r3, #255	@ 0xff
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3718      	adds	r7, #24
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	0801710c 	.word	0x0801710c
 8012ef4:	08017138 	.word	0x08017138
 8012ef8:	200001e4 	.word	0x200001e4
 8012efc:	080175e0 	.word	0x080175e0
 8012f00:	0801714c 	.word	0x0801714c
 8012f04:	08017184 	.word	0x08017184
 8012f08:	080171c0 	.word	0x080171c0
 8012f0c:	080171ec 	.word	0x080171ec
 8012f10:	0801722c 	.word	0x0801722c
 8012f14:	08017218 	.word	0x08017218

08012f18 <test_timer>:
volatile uint8_t tim3_done = 0;
volatile uint8_t tim2_done = 0;
volatile uint32_t random_duration = 0;


uint8_t test_timer(uint16_t iterations) {
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	4603      	mov	r3, r0
 8012f20:	80fb      	strh	r3, [r7, #6]
    printf("Starting Timer Test with %u iterations...\r\n", iterations);
 8012f22:	88fb      	ldrh	r3, [r7, #6]
 8012f24:	4619      	mov	r1, r3
 8012f26:	483e      	ldr	r0, [pc, #248]	@ (8013020 <test_timer+0x108>)
 8012f28:	f000 fbdc 	bl	80136e4 <iprintf>
    srand(time(NULL));
 8012f2c:	2000      	movs	r0, #0
 8012f2e:	f000 fd4b 	bl	80139c8 <time>
 8012f32:	4602      	mov	r2, r0
 8012f34:	460b      	mov	r3, r1
 8012f36:	4613      	mov	r3, r2
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f000 faa5 	bl	8013488 <srand>
    for (uint16_t i = 0; i < iterations; i++) {
 8012f3e:	2300      	movs	r3, #0
 8012f40:	81fb      	strh	r3, [r7, #14]
 8012f42:	e05c      	b.n	8012ffe <test_timer+0xe6>
    	printf("\nIteration %d:\r\n", i + 1);
 8012f44:	89fb      	ldrh	r3, [r7, #14]
 8012f46:	3301      	adds	r3, #1
 8012f48:	4619      	mov	r1, r3
 8012f4a:	4836      	ldr	r0, [pc, #216]	@ (8013024 <test_timer+0x10c>)
 8012f4c:	f000 fbca 	bl	80136e4 <iprintf>
    // Generate a random time duration between 1 and 10 seconds
    random_duration = (rand() % 10) + 1;
 8012f50:	f000 fac8 	bl	80134e4 <rand>
 8012f54:	4601      	mov	r1, r0
 8012f56:	4b34      	ldr	r3, [pc, #208]	@ (8013028 <test_timer+0x110>)
 8012f58:	fb83 2301 	smull	r2, r3, r3, r1
 8012f5c:	109a      	asrs	r2, r3, #2
 8012f5e:	17cb      	asrs	r3, r1, #31
 8012f60:	1ad2      	subs	r2, r2, r3
 8012f62:	4613      	mov	r3, r2
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	4413      	add	r3, r2
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	1aca      	subs	r2, r1, r3
 8012f6c:	1c53      	adds	r3, r2, #1
 8012f6e:	461a      	mov	r2, r3
 8012f70:	4b2e      	ldr	r3, [pc, #184]	@ (801302c <test_timer+0x114>)
 8012f72:	601a      	str	r2, [r3, #0]
    printf("Random duration: %lu seconds\r\n", random_duration);
 8012f74:	4b2d      	ldr	r3, [pc, #180]	@ (801302c <test_timer+0x114>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	482d      	ldr	r0, [pc, #180]	@ (8013030 <test_timer+0x118>)
 8012f7c:	f000 fbb2 	bl	80136e4 <iprintf>

    HAL_TIM_Base_Start_IT(TIM3A); //needs to be done by the developer
 8012f80:	482c      	ldr	r0, [pc, #176]	@ (8013034 <test_timer+0x11c>)
 8012f82:	f7f2 fd71 	bl	8005a68 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(TIM2A); //needs to be done by the developer
 8012f86:	482c      	ldr	r0, [pc, #176]	@ (8013038 <test_timer+0x120>)
 8012f88:	f7f2 fd6e 	bl	8005a68 <HAL_TIM_Base_Start_IT>

    // Reset flags and counters
    tim3_seconds = 0;
 8012f8c:	4b2b      	ldr	r3, [pc, #172]	@ (801303c <test_timer+0x124>)
 8012f8e:	2200      	movs	r2, #0
 8012f90:	601a      	str	r2, [r3, #0]
    tim2_seconds = 0;
 8012f92:	4b2b      	ldr	r3, [pc, #172]	@ (8013040 <test_timer+0x128>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	601a      	str	r2, [r3, #0]
    tim3_done = 0;
 8012f98:	4b2a      	ldr	r3, [pc, #168]	@ (8013044 <test_timer+0x12c>)
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	701a      	strb	r2, [r3, #0]
    tim2_done = 0;
 8012f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8013048 <test_timer+0x130>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	701a      	strb	r2, [r3, #0]

    // Wait for both timers to complete the random duration
    while (!tim3_done || !tim2_done) {
 8012fa4:	bf00      	nop
 8012fa6:	4b27      	ldr	r3, [pc, #156]	@ (8013044 <test_timer+0x12c>)
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d0fa      	beq.n	8012fa6 <test_timer+0x8e>
 8012fb0:	4b25      	ldr	r3, [pc, #148]	@ (8013048 <test_timer+0x130>)
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d0f5      	beq.n	8012fa6 <test_timer+0x8e>

    }
    // Compare the timers
    if (tim3_seconds == random_duration && tim2_seconds == random_duration) {
 8012fba:	4b20      	ldr	r3, [pc, #128]	@ (801303c <test_timer+0x124>)
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	4b1b      	ldr	r3, [pc, #108]	@ (801302c <test_timer+0x114>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d111      	bne.n	8012fea <test_timer+0xd2>
 8012fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8013040 <test_timer+0x128>)
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	4b18      	ldr	r3, [pc, #96]	@ (801302c <test_timer+0x114>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d10b      	bne.n	8012fea <test_timer+0xd2>
        printf("Timers are synchronized: TIM3 = %lu, TIM2 = %lu\r\n", tim3_seconds, tim2_seconds);
 8012fd2:	4b1a      	ldr	r3, [pc, #104]	@ (801303c <test_timer+0x124>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8013040 <test_timer+0x128>)
 8012fd8:	6812      	ldr	r2, [r2, #0]
 8012fda:	4619      	mov	r1, r3
 8012fdc:	481b      	ldr	r0, [pc, #108]	@ (801304c <test_timer+0x134>)
 8012fde:	f000 fb81 	bl	80136e4 <iprintf>
    for (uint16_t i = 0; i < iterations; i++) {
 8012fe2:	89fb      	ldrh	r3, [r7, #14]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	81fb      	strh	r3, [r7, #14]
 8012fe8:	e009      	b.n	8012ffe <test_timer+0xe6>

    } else {
        printf("Timers mismatch: TIM3 = %lu, TIM2 = %lu\r\n", tim3_seconds, tim2_seconds);
 8012fea:	4b14      	ldr	r3, [pc, #80]	@ (801303c <test_timer+0x124>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a14      	ldr	r2, [pc, #80]	@ (8013040 <test_timer+0x128>)
 8012ff0:	6812      	ldr	r2, [r2, #0]
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4816      	ldr	r0, [pc, #88]	@ (8013050 <test_timer+0x138>)
 8012ff6:	f000 fb75 	bl	80136e4 <iprintf>
        return 0xFF; // Failure
 8012ffa:	23ff      	movs	r3, #255	@ 0xff
 8012ffc:	e00c      	b.n	8013018 <test_timer+0x100>
    for (uint16_t i = 0; i < iterations; i++) {
 8012ffe:	89fa      	ldrh	r2, [r7, #14]
 8013000:	88fb      	ldrh	r3, [r7, #6]
 8013002:	429a      	cmp	r2, r3
 8013004:	d39e      	bcc.n	8012f44 <test_timer+0x2c>
    }
    }
    printf("Timers Test Passed for all %u iterations.\r\n", iterations);
 8013006:	88fb      	ldrh	r3, [r7, #6]
 8013008:	4619      	mov	r1, r3
 801300a:	4812      	ldr	r0, [pc, #72]	@ (8013054 <test_timer+0x13c>)
 801300c:	f000 fb6a 	bl	80136e4 <iprintf>
    printf("Timer Test complete.\r\n");
 8013010:	4811      	ldr	r0, [pc, #68]	@ (8013058 <test_timer+0x140>)
 8013012:	f000 fbcf 	bl	80137b4 <puts>
    return 1;
 8013016:	2301      	movs	r3, #1
}
 8013018:	4618      	mov	r0, r3
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	08017240 	.word	0x08017240
 8013024:	0801726c 	.word	0x0801726c
 8013028:	66666667 	.word	0x66666667
 801302c:	20008bfc 	.word	0x20008bfc
 8013030:	08017280 	.word	0x08017280
 8013034:	2000028c 	.word	0x2000028c
 8013038:	20000240 	.word	0x20000240
 801303c:	20008bf0 	.word	0x20008bf0
 8013040:	20008bf4 	.word	0x20008bf4
 8013044:	20008bf8 	.word	0x20008bf8
 8013048:	20008bf9 	.word	0x20008bf9
 801304c:	080172a0 	.word	0x080172a0
 8013050:	080172d4 	.word	0x080172d4
 8013054:	08017300 	.word	0x08017300
 8013058:	0801732c 	.word	0x0801732c

0801305c <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4a17      	ldr	r2, [pc, #92]	@ (80130c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 801306a:	4293      	cmp	r3, r2
 801306c:	d111      	bne.n	8013092 <HAL_TIM_PeriodElapsedCallback+0x36>
        tim3_seconds++;
 801306e:	4b17      	ldr	r3, [pc, #92]	@ (80130cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	3301      	adds	r3, #1
 8013074:	4a15      	ldr	r2, [pc, #84]	@ (80130cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8013076:	6013      	str	r3, [r2, #0]
        if (tim3_seconds >= random_duration) {
 8013078:	4b14      	ldr	r3, [pc, #80]	@ (80130cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	4b14      	ldr	r3, [pc, #80]	@ (80130d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	429a      	cmp	r2, r3
 8013082:	d31c      	bcc.n	80130be <HAL_TIM_PeriodElapsedCallback+0x62>
            tim3_done = 1;
 8013084:	4b13      	ldr	r3, [pc, #76]	@ (80130d4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8013086:	2201      	movs	r2, #1
 8013088:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(TIM3A); // Stop TIM1
 801308a:	4813      	ldr	r0, [pc, #76]	@ (80130d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 801308c:	f7f2 fd64 	bl	8005b58 <HAL_TIM_Base_Stop_IT>
        if (tim2_seconds >= random_duration) {
            tim2_done = 1;
            HAL_TIM_Base_Stop_IT(TIM2A); // Stop TIM2
        }
    }
}
 8013090:	e015      	b.n	80130be <HAL_TIM_PeriodElapsedCallback+0x62>
    } else if (htim->Instance == TIM2) {
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801309a:	d110      	bne.n	80130be <HAL_TIM_PeriodElapsedCallback+0x62>
        tim2_seconds++;
 801309c:	4b0f      	ldr	r3, [pc, #60]	@ (80130dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	3301      	adds	r3, #1
 80130a2:	4a0e      	ldr	r2, [pc, #56]	@ (80130dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80130a4:	6013      	str	r3, [r2, #0]
        if (tim2_seconds >= random_duration) {
 80130a6:	4b0d      	ldr	r3, [pc, #52]	@ (80130dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	4b09      	ldr	r3, [pc, #36]	@ (80130d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d305      	bcc.n	80130be <HAL_TIM_PeriodElapsedCallback+0x62>
            tim2_done = 1;
 80130b2:	4b0b      	ldr	r3, [pc, #44]	@ (80130e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80130b4:	2201      	movs	r2, #1
 80130b6:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(TIM2A); // Stop TIM2
 80130b8:	480a      	ldr	r0, [pc, #40]	@ (80130e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80130ba:	f7f2 fd4d 	bl	8005b58 <HAL_TIM_Base_Stop_IT>
}
 80130be:	bf00      	nop
 80130c0:	3708      	adds	r7, #8
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	40000400 	.word	0x40000400
 80130cc:	20008bf0 	.word	0x20008bf0
 80130d0:	20008bfc 	.word	0x20008bfc
 80130d4:	20008bf8 	.word	0x20008bf8
 80130d8:	2000028c 	.word	0x2000028c
 80130dc:	20008bf4 	.word	0x20008bf4
 80130e0:	20008bf9 	.word	0x20008bf9
 80130e4:	20000240 	.word	0x20000240

080130e8 <test_uart>:
volatile uint8_t Uart_5_ErrorCallback_Flag = 0;
volatile uint8_t Uart_2_ErrorCallback_Flag = 0;

volatile HAL_StatusTypeDef status2tx, status2rx, status5tx, status5rx;

uint8_t test_uart(const char* bit_pattern, uint8_t pattern_length, uint8_t iterations) {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b0c4      	sub	sp, #272	@ 0x110
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80130f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80130f6:	6018      	str	r0, [r3, #0]
 80130f8:	4608      	mov	r0, r1
 80130fa:	4611      	mov	r1, r2
 80130fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013100:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8013104:	4602      	mov	r2, r0
 8013106:	701a      	strb	r2, [r3, #0]
 8013108:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801310c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8013110:	460a      	mov	r2, r1
 8013112:	701a      	strb	r2, [r3, #0]
    uint8_t recv_msg5_rx[128] = {0};
 8013114:	2300      	movs	r3, #0
 8013116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801311a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801311e:	227c      	movs	r2, #124	@ 0x7c
 8013120:	2100      	movs	r1, #0
 8013122:	4618      	mov	r0, r3
 8013124:	f000 fc36 	bl	8013994 <memset>
    uint8_t recv_msg2_rx[128] = {0};
 8013128:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801312c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013130:	2200      	movs	r2, #0
 8013132:	601a      	str	r2, [r3, #0]
 8013134:	3304      	adds	r3, #4
 8013136:	227c      	movs	r2, #124	@ 0x7c
 8013138:	2100      	movs	r1, #0
 801313a:	4618      	mov	r0, r3
 801313c:	f000 fc2a 	bl	8013994 <memset>

    for (uint8_t i = 0; i < iterations; ++i) {
 8013140:	2300      	movs	r3, #0
 8013142:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8013146:	e117      	b.n	8013378 <test_uart+0x290>
        printf("\nIteration %d:\r\n", i + 1);
 8013148:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 801314c:	3301      	adds	r3, #1
 801314e:	4619      	mov	r1, r3
 8013150:	4893      	ldr	r0, [pc, #588]	@ (80133a0 <test_uart+0x2b8>)
 8013152:	f000 fac7 	bl	80136e4 <iprintf>

        uint32_t iteration_start_time = HAL_GetTick(); // Track total time for the iteration
 8013156:	f7ee fb6f 	bl	8001838 <HAL_GetTick>
 801315a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 801315e:	e0ea      	b.n	8013336 <test_uart+0x24e>
            // UART2 Transmission
            status2tx = HAL_UART_Transmit(UART_2, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 8013160:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013164:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	b29b      	uxth	r3, r3
 801316c:	3301      	adds	r3, #1
 801316e:	b29a      	uxth	r2, r3
 8013170:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013174:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8013178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801317c:	6809      	ldr	r1, [r1, #0]
 801317e:	4889      	ldr	r0, [pc, #548]	@ (80133a4 <test_uart+0x2bc>)
 8013180:	f7f3 f95e 	bl	8006440 <HAL_UART_Transmit>
 8013184:	4603      	mov	r3, r0
 8013186:	461a      	mov	r2, r3
 8013188:	4b87      	ldr	r3, [pc, #540]	@ (80133a8 <test_uart+0x2c0>)
 801318a:	701a      	strb	r2, [r3, #0]
            if (status2tx != HAL_OK) {
 801318c:	4b86      	ldr	r3, [pc, #536]	@ (80133a8 <test_uart+0x2c0>)
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	b2db      	uxtb	r3, r3
 8013192:	2b00      	cmp	r3, #0
 8013194:	d008      	beq.n	80131a8 <test_uart+0xc0>
                printf("UART2 TX failed with status: %d\r\n", status2tx);
 8013196:	4b84      	ldr	r3, [pc, #528]	@ (80133a8 <test_uart+0x2c0>)
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	b2db      	uxtb	r3, r3
 801319c:	4619      	mov	r1, r3
 801319e:	4883      	ldr	r0, [pc, #524]	@ (80133ac <test_uart+0x2c4>)
 80131a0:	f000 faa0 	bl	80136e4 <iprintf>
                return 0xFF;
 80131a4:	23ff      	movs	r3, #255	@ 0xff
 80131a6:	e0f5      	b.n	8013394 <test_uart+0x2ac>
            }
            HAL_Delay(100);
 80131a8:	2064      	movs	r0, #100	@ 0x64
 80131aa:	f7ee fb51 	bl	8001850 <HAL_Delay>

            // UART5 Transmission
            status5tx = HAL_UART_Transmit(UART_5, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 80131ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80131b2:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	3301      	adds	r3, #1
 80131bc:	b29a      	uxth	r2, r3
 80131be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80131c2:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 80131c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80131ca:	6809      	ldr	r1, [r1, #0]
 80131cc:	4878      	ldr	r0, [pc, #480]	@ (80133b0 <test_uart+0x2c8>)
 80131ce:	f7f3 f937 	bl	8006440 <HAL_UART_Transmit>
 80131d2:	4603      	mov	r3, r0
 80131d4:	461a      	mov	r2, r3
 80131d6:	4b77      	ldr	r3, [pc, #476]	@ (80133b4 <test_uart+0x2cc>)
 80131d8:	701a      	strb	r2, [r3, #0]
            if (status5tx != HAL_OK) {
 80131da:	4b76      	ldr	r3, [pc, #472]	@ (80133b4 <test_uart+0x2cc>)
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d008      	beq.n	80131f6 <test_uart+0x10e>
                printf("UART5 TX failed with status: %d\r\n", status5tx);
 80131e4:	4b73      	ldr	r3, [pc, #460]	@ (80133b4 <test_uart+0x2cc>)
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	4619      	mov	r1, r3
 80131ec:	4872      	ldr	r0, [pc, #456]	@ (80133b8 <test_uart+0x2d0>)
 80131ee:	f000 fa79 	bl	80136e4 <iprintf>
                return 0xFF;
 80131f2:	23ff      	movs	r3, #255	@ 0xff
 80131f4:	e0ce      	b.n	8013394 <test_uart+0x2ac>
            }
            HAL_Delay(100);
 80131f6:	2064      	movs	r0, #100	@ 0x64
 80131f8:	f7ee fb2a 	bl	8001850 <HAL_Delay>

            // UART5 Reception
            status5rx = HAL_UART_Receive_IT(UART_5, recv_msg5_rx, pattern_length + 1);
 80131fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013200:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	b29b      	uxth	r3, r3
 8013208:	3301      	adds	r3, #1
 801320a:	b29a      	uxth	r2, r3
 801320c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8013210:	4619      	mov	r1, r3
 8013212:	4867      	ldr	r0, [pc, #412]	@ (80133b0 <test_uart+0x2c8>)
 8013214:	f7f3 fa5b 	bl	80066ce <HAL_UART_Receive_IT>
 8013218:	4603      	mov	r3, r0
 801321a:	461a      	mov	r2, r3
 801321c:	4b67      	ldr	r3, [pc, #412]	@ (80133bc <test_uart+0x2d4>)
 801321e:	701a      	strb	r2, [r3, #0]
            if (status5rx != HAL_OK) {
 8013220:	4b66      	ldr	r3, [pc, #408]	@ (80133bc <test_uart+0x2d4>)
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	b2db      	uxtb	r3, r3
 8013226:	2b00      	cmp	r3, #0
 8013228:	d008      	beq.n	801323c <test_uart+0x154>
                printf("UART5 RX failed with status: %d\r\n", status5rx);
 801322a:	4b64      	ldr	r3, [pc, #400]	@ (80133bc <test_uart+0x2d4>)
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	b2db      	uxtb	r3, r3
 8013230:	4619      	mov	r1, r3
 8013232:	4863      	ldr	r0, [pc, #396]	@ (80133c0 <test_uart+0x2d8>)
 8013234:	f000 fa56 	bl	80136e4 <iprintf>
                return 0xFF;
 8013238:	23ff      	movs	r3, #255	@ 0xff
 801323a:	e0ab      	b.n	8013394 <test_uart+0x2ac>
            }

            // UART2 Reception
            status2rx = HAL_UART_Receive_IT(UART_2, recv_msg2_rx, pattern_length + 1);
 801323c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013240:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	b29b      	uxth	r3, r3
 8013248:	3301      	adds	r3, #1
 801324a:	b29a      	uxth	r2, r3
 801324c:	f107 0308 	add.w	r3, r7, #8
 8013250:	4619      	mov	r1, r3
 8013252:	4854      	ldr	r0, [pc, #336]	@ (80133a4 <test_uart+0x2bc>)
 8013254:	f7f3 fa3b 	bl	80066ce <HAL_UART_Receive_IT>
 8013258:	4603      	mov	r3, r0
 801325a:	461a      	mov	r2, r3
 801325c:	4b59      	ldr	r3, [pc, #356]	@ (80133c4 <test_uart+0x2dc>)
 801325e:	701a      	strb	r2, [r3, #0]
            if (status2rx != HAL_OK) {
 8013260:	4b58      	ldr	r3, [pc, #352]	@ (80133c4 <test_uart+0x2dc>)
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	b2db      	uxtb	r3, r3
 8013266:	2b00      	cmp	r3, #0
 8013268:	d008      	beq.n	801327c <test_uart+0x194>
                printf("UART2 RX failed with status: %d\r\n", status2rx);
 801326a:	4b56      	ldr	r3, [pc, #344]	@ (80133c4 <test_uart+0x2dc>)
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	b2db      	uxtb	r3, r3
 8013270:	4619      	mov	r1, r3
 8013272:	4855      	ldr	r0, [pc, #340]	@ (80133c8 <test_uart+0x2e0>)
 8013274:	f000 fa36 	bl	80136e4 <iprintf>
                return 0xFF;
 8013278:	23ff      	movs	r3, #255	@ 0xff
 801327a:	e08b      	b.n	8013394 <test_uart+0x2ac>
            }

            // Error Handling and Data Verification
            if (Uart_5_ErrorCallback_Flag == 1 || Uart_2_ErrorCallback_Flag == 1) {
 801327c:	4b53      	ldr	r3, [pc, #332]	@ (80133cc <test_uart+0x2e4>)
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	b2db      	uxtb	r3, r3
 8013282:	2b01      	cmp	r3, #1
 8013284:	d004      	beq.n	8013290 <test_uart+0x1a8>
 8013286:	4b52      	ldr	r3, [pc, #328]	@ (80133d0 <test_uart+0x2e8>)
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	b2db      	uxtb	r3, r3
 801328c:	2b01      	cmp	r3, #1
 801328e:	d109      	bne.n	80132a4 <test_uart+0x1bc>
                printf("Error detected in UART5 or UART2\r\n");
 8013290:	4850      	ldr	r0, [pc, #320]	@ (80133d4 <test_uart+0x2ec>)
 8013292:	f000 fa8f 	bl	80137b4 <puts>
                Uart_5_ErrorCallback_Flag = 0;
 8013296:	4b4d      	ldr	r3, [pc, #308]	@ (80133cc <test_uart+0x2e4>)
 8013298:	2200      	movs	r2, #0
 801329a:	701a      	strb	r2, [r3, #0]
                Uart_2_ErrorCallback_Flag = 0;
 801329c:	4b4c      	ldr	r3, [pc, #304]	@ (80133d0 <test_uart+0x2e8>)
 801329e:	2200      	movs	r2, #0
 80132a0:	701a      	strb	r2, [r3, #0]
 80132a2:	e048      	b.n	8013336 <test_uart+0x24e>
            } else {
                if (UART_5_RX_Complete_Callback_Flag == 1) {
 80132a4:	4b4c      	ldr	r3, [pc, #304]	@ (80133d8 <test_uart+0x2f0>)
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d108      	bne.n	80132c0 <test_uart+0x1d8>
                    printf("Received message by UART5 RX: %s\r\n", recv_msg5_rx);
 80132ae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80132b2:	4619      	mov	r1, r3
 80132b4:	4849      	ldr	r0, [pc, #292]	@ (80133dc <test_uart+0x2f4>)
 80132b6:	f000 fa15 	bl	80136e4 <iprintf>
                    UART_5_RX_Complete_Callback_Flag = 0;
 80132ba:	4b47      	ldr	r3, [pc, #284]	@ (80133d8 <test_uart+0x2f0>)
 80132bc:	2200      	movs	r2, #0
 80132be:	701a      	strb	r2, [r3, #0]
                }
                if (UART_2_RX_Complete_Callback_Flag == 1) {
 80132c0:	4b47      	ldr	r3, [pc, #284]	@ (80133e0 <test_uart+0x2f8>)
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d108      	bne.n	80132dc <test_uart+0x1f4>
                    printf("Received message by UART2 RX: %s\r\n", recv_msg2_rx);
 80132ca:	f107 0308 	add.w	r3, r7, #8
 80132ce:	4619      	mov	r1, r3
 80132d0:	4844      	ldr	r0, [pc, #272]	@ (80133e4 <test_uart+0x2fc>)
 80132d2:	f000 fa07 	bl	80136e4 <iprintf>
                    UART_2_RX_Complete_Callback_Flag = 0;
 80132d6:	4b42      	ldr	r3, [pc, #264]	@ (80133e0 <test_uart+0x2f8>)
 80132d8:	2200      	movs	r2, #0
 80132da:	701a      	strb	r2, [r3, #0]
                }

                // Compare received data
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 80132dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80132e0:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80132e4:	781a      	ldrb	r2, [r3, #0]
 80132e6:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80132ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80132ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80132f2:	6818      	ldr	r0, [r3, #0]
 80132f4:	f000 fb56 	bl	80139a4 <strncmp>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d118      	bne.n	8013330 <test_uart+0x248>
                    strncmp(bit_pattern, (char*)recv_msg2_rx, pattern_length) == 0) {
 80132fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013302:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8013306:	781a      	ldrb	r2, [r3, #0]
 8013308:	f107 0108 	add.w	r1, r7, #8
 801330c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013310:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013314:	6818      	ldr	r0, [r3, #0]
 8013316:	f000 fb45 	bl	80139a4 <strncmp>
 801331a:	4603      	mov	r3, r0
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 801331c:	2b00      	cmp	r3, #0
 801331e:	d107      	bne.n	8013330 <test_uart+0x248>
                    printf("Iteration %d passed\r\n", i + 1);
 8013320:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8013324:	3301      	adds	r3, #1
 8013326:	4619      	mov	r1, r3
 8013328:	482f      	ldr	r0, [pc, #188]	@ (80133e8 <test_uart+0x300>)
 801332a:	f000 f9db 	bl	80136e4 <iprintf>
                    break; // Exit while loop once successful
 801332e:	e00c      	b.n	801334a <test_uart+0x262>
                } else {
                    printf("Data mismatch detected. Retrying...\r\n");
 8013330:	482e      	ldr	r0, [pc, #184]	@ (80133ec <test_uart+0x304>)
 8013332:	f000 fa3f 	bl	80137b4 <puts>
        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 8013336:	f7ee fa7f 	bl	8001838 <HAL_GetTick>
 801333a:	4602      	mov	r2, r0
 801333c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013340:	1ad3      	subs	r3, r2, r3
 8013342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013346:	f4ff af0b 	bcc.w	8013160 <test_uart+0x78>
                }
            }
        }

        if (HAL_GetTick() - iteration_start_time >= SHORT_TIMEOUT) {
 801334a:	f7ee fa75 	bl	8001838 <HAL_GetTick>
 801334e:	4602      	mov	r2, r0
 8013350:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013354:	1ad3      	subs	r3, r2, r3
 8013356:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801335a:	d308      	bcc.n	801336e <test_uart+0x286>
            printf("Iteration %d failed due to timeout\r\n", i + 1);
 801335c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8013360:	3301      	adds	r3, #1
 8013362:	4619      	mov	r1, r3
 8013364:	4822      	ldr	r0, [pc, #136]	@ (80133f0 <test_uart+0x308>)
 8013366:	f000 f9bd 	bl	80136e4 <iprintf>
            return 0xFF;
 801336a:	23ff      	movs	r3, #255	@ 0xff
 801336c:	e012      	b.n	8013394 <test_uart+0x2ac>
    for (uint8_t i = 0; i < iterations; ++i) {
 801336e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8013372:	3301      	adds	r3, #1
 8013374:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8013378:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801337c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8013380:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	429a      	cmp	r2, r3
 8013388:	f4ff aede 	bcc.w	8013148 <test_uart+0x60>
        }
    }

    printf("UART test complete\r\n");
 801338c:	4819      	ldr	r0, [pc, #100]	@ (80133f4 <test_uart+0x30c>)
 801338e:	f000 fa11 	bl	80137b4 <puts>
    return 1;
 8013392:	2301      	movs	r3, #1
}
 8013394:	4618      	mov	r0, r3
 8013396:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	08017344 	.word	0x08017344
 80133a4:	20000360 	.word	0x20000360
 80133a8:	20008c04 	.word	0x20008c04
 80133ac:	08017358 	.word	0x08017358
 80133b0:	200002d8 	.word	0x200002d8
 80133b4:	20008c06 	.word	0x20008c06
 80133b8:	0801737c 	.word	0x0801737c
 80133bc:	20008c07 	.word	0x20008c07
 80133c0:	080173a0 	.word	0x080173a0
 80133c4:	20008c05 	.word	0x20008c05
 80133c8:	080173c4 	.word	0x080173c4
 80133cc:	20008c02 	.word	0x20008c02
 80133d0:	20008c03 	.word	0x20008c03
 80133d4:	080173e8 	.word	0x080173e8
 80133d8:	20008c00 	.word	0x20008c00
 80133dc:	0801740c 	.word	0x0801740c
 80133e0:	20008c01 	.word	0x20008c01
 80133e4:	08017430 	.word	0x08017430
 80133e8:	08017454 	.word	0x08017454
 80133ec:	0801746c 	.word	0x0801746c
 80133f0:	08017494 	.word	0x08017494
 80133f4:	080174bc 	.word	0x080174bc

080133f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80133f8:	b480      	push	{r7}
 80133fa:	b083      	sub	sp, #12
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a0a      	ldr	r2, [pc, #40]	@ (8013430 <HAL_UART_RxCpltCallback+0x38>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d103      	bne.n	8013412 <HAL_UART_RxCpltCallback+0x1a>
        UART_5_RX_Complete_Callback_Flag = 1;
 801340a:	4b0a      	ldr	r3, [pc, #40]	@ (8013434 <HAL_UART_RxCpltCallback+0x3c>)
 801340c:	2201      	movs	r2, #1
 801340e:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        UART_2_RX_Complete_Callback_Flag = 1;
    }
}
 8013410:	e007      	b.n	8013422 <HAL_UART_RxCpltCallback+0x2a>
    } else if (huart->Instance == USART2) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	4a08      	ldr	r2, [pc, #32]	@ (8013438 <HAL_UART_RxCpltCallback+0x40>)
 8013418:	4293      	cmp	r3, r2
 801341a:	d102      	bne.n	8013422 <HAL_UART_RxCpltCallback+0x2a>
        UART_2_RX_Complete_Callback_Flag = 1;
 801341c:	4b07      	ldr	r3, [pc, #28]	@ (801343c <HAL_UART_RxCpltCallback+0x44>)
 801341e:	2201      	movs	r2, #1
 8013420:	701a      	strb	r2, [r3, #0]
}
 8013422:	bf00      	nop
 8013424:	370c      	adds	r7, #12
 8013426:	46bd      	mov	sp, r7
 8013428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342c:	4770      	bx	lr
 801342e:	bf00      	nop
 8013430:	40005000 	.word	0x40005000
 8013434:	20008c00 	.word	0x20008c00
 8013438:	40004400 	.word	0x40004400
 801343c:	20008c01 	.word	0x20008c01

08013440 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8013440:	b480      	push	{r7}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4a0a      	ldr	r2, [pc, #40]	@ (8013478 <HAL_UART_ErrorCallback+0x38>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d103      	bne.n	801345a <HAL_UART_ErrorCallback+0x1a>
        Uart_5_ErrorCallback_Flag = 1;
 8013452:	4b0a      	ldr	r3, [pc, #40]	@ (801347c <HAL_UART_ErrorCallback+0x3c>)
 8013454:	2201      	movs	r2, #1
 8013456:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        Uart_2_ErrorCallback_Flag = 1;
    }
}
 8013458:	e007      	b.n	801346a <HAL_UART_ErrorCallback+0x2a>
    } else if (huart->Instance == USART2) {
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a08      	ldr	r2, [pc, #32]	@ (8013480 <HAL_UART_ErrorCallback+0x40>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d102      	bne.n	801346a <HAL_UART_ErrorCallback+0x2a>
        Uart_2_ErrorCallback_Flag = 1;
 8013464:	4b07      	ldr	r3, [pc, #28]	@ (8013484 <HAL_UART_ErrorCallback+0x44>)
 8013466:	2201      	movs	r2, #1
 8013468:	701a      	strb	r2, [r3, #0]
}
 801346a:	bf00      	nop
 801346c:	370c      	adds	r7, #12
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr
 8013476:	bf00      	nop
 8013478:	40005000 	.word	0x40005000
 801347c:	20008c02 	.word	0x20008c02
 8013480:	40004400 	.word	0x40004400
 8013484:	20008c03 	.word	0x20008c03

08013488 <srand>:
 8013488:	b538      	push	{r3, r4, r5, lr}
 801348a:	4b10      	ldr	r3, [pc, #64]	@ (80134cc <srand+0x44>)
 801348c:	681d      	ldr	r5, [r3, #0]
 801348e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013490:	4604      	mov	r4, r0
 8013492:	b9b3      	cbnz	r3, 80134c2 <srand+0x3a>
 8013494:	2018      	movs	r0, #24
 8013496:	f000 fba9 	bl	8013bec <malloc>
 801349a:	4602      	mov	r2, r0
 801349c:	6328      	str	r0, [r5, #48]	@ 0x30
 801349e:	b920      	cbnz	r0, 80134aa <srand+0x22>
 80134a0:	4b0b      	ldr	r3, [pc, #44]	@ (80134d0 <srand+0x48>)
 80134a2:	480c      	ldr	r0, [pc, #48]	@ (80134d4 <srand+0x4c>)
 80134a4:	2146      	movs	r1, #70	@ 0x46
 80134a6:	f000 fb39 	bl	8013b1c <__assert_func>
 80134aa:	490b      	ldr	r1, [pc, #44]	@ (80134d8 <srand+0x50>)
 80134ac:	4b0b      	ldr	r3, [pc, #44]	@ (80134dc <srand+0x54>)
 80134ae:	e9c0 1300 	strd	r1, r3, [r0]
 80134b2:	4b0b      	ldr	r3, [pc, #44]	@ (80134e0 <srand+0x58>)
 80134b4:	6083      	str	r3, [r0, #8]
 80134b6:	230b      	movs	r3, #11
 80134b8:	8183      	strh	r3, [r0, #12]
 80134ba:	2100      	movs	r1, #0
 80134bc:	2001      	movs	r0, #1
 80134be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80134c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80134c4:	2200      	movs	r2, #0
 80134c6:	611c      	str	r4, [r3, #16]
 80134c8:	615a      	str	r2, [r3, #20]
 80134ca:	bd38      	pop	{r3, r4, r5, pc}
 80134cc:	20000038 	.word	0x20000038
 80134d0:	080175f4 	.word	0x080175f4
 80134d4:	0801760b 	.word	0x0801760b
 80134d8:	abcd330e 	.word	0xabcd330e
 80134dc:	e66d1234 	.word	0xe66d1234
 80134e0:	0005deec 	.word	0x0005deec

080134e4 <rand>:
 80134e4:	4b16      	ldr	r3, [pc, #88]	@ (8013540 <rand+0x5c>)
 80134e6:	b510      	push	{r4, lr}
 80134e8:	681c      	ldr	r4, [r3, #0]
 80134ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134ec:	b9b3      	cbnz	r3, 801351c <rand+0x38>
 80134ee:	2018      	movs	r0, #24
 80134f0:	f000 fb7c 	bl	8013bec <malloc>
 80134f4:	4602      	mov	r2, r0
 80134f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80134f8:	b920      	cbnz	r0, 8013504 <rand+0x20>
 80134fa:	4b12      	ldr	r3, [pc, #72]	@ (8013544 <rand+0x60>)
 80134fc:	4812      	ldr	r0, [pc, #72]	@ (8013548 <rand+0x64>)
 80134fe:	2152      	movs	r1, #82	@ 0x52
 8013500:	f000 fb0c 	bl	8013b1c <__assert_func>
 8013504:	4911      	ldr	r1, [pc, #68]	@ (801354c <rand+0x68>)
 8013506:	4b12      	ldr	r3, [pc, #72]	@ (8013550 <rand+0x6c>)
 8013508:	e9c0 1300 	strd	r1, r3, [r0]
 801350c:	4b11      	ldr	r3, [pc, #68]	@ (8013554 <rand+0x70>)
 801350e:	6083      	str	r3, [r0, #8]
 8013510:	230b      	movs	r3, #11
 8013512:	8183      	strh	r3, [r0, #12]
 8013514:	2100      	movs	r1, #0
 8013516:	2001      	movs	r0, #1
 8013518:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801351c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801351e:	480e      	ldr	r0, [pc, #56]	@ (8013558 <rand+0x74>)
 8013520:	690b      	ldr	r3, [r1, #16]
 8013522:	694c      	ldr	r4, [r1, #20]
 8013524:	4a0d      	ldr	r2, [pc, #52]	@ (801355c <rand+0x78>)
 8013526:	4358      	muls	r0, r3
 8013528:	fb02 0004 	mla	r0, r2, r4, r0
 801352c:	fba3 3202 	umull	r3, r2, r3, r2
 8013530:	3301      	adds	r3, #1
 8013532:	eb40 0002 	adc.w	r0, r0, r2
 8013536:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801353a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801353e:	bd10      	pop	{r4, pc}
 8013540:	20000038 	.word	0x20000038
 8013544:	080175f4 	.word	0x080175f4
 8013548:	0801760b 	.word	0x0801760b
 801354c:	abcd330e 	.word	0xabcd330e
 8013550:	e66d1234 	.word	0xe66d1234
 8013554:	0005deec 	.word	0x0005deec
 8013558:	5851f42d 	.word	0x5851f42d
 801355c:	4c957f2d 	.word	0x4c957f2d

08013560 <std>:
 8013560:	2300      	movs	r3, #0
 8013562:	b510      	push	{r4, lr}
 8013564:	4604      	mov	r4, r0
 8013566:	e9c0 3300 	strd	r3, r3, [r0]
 801356a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801356e:	6083      	str	r3, [r0, #8]
 8013570:	8181      	strh	r1, [r0, #12]
 8013572:	6643      	str	r3, [r0, #100]	@ 0x64
 8013574:	81c2      	strh	r2, [r0, #14]
 8013576:	6183      	str	r3, [r0, #24]
 8013578:	4619      	mov	r1, r3
 801357a:	2208      	movs	r2, #8
 801357c:	305c      	adds	r0, #92	@ 0x5c
 801357e:	f000 fa09 	bl	8013994 <memset>
 8013582:	4b0d      	ldr	r3, [pc, #52]	@ (80135b8 <std+0x58>)
 8013584:	6263      	str	r3, [r4, #36]	@ 0x24
 8013586:	4b0d      	ldr	r3, [pc, #52]	@ (80135bc <std+0x5c>)
 8013588:	62a3      	str	r3, [r4, #40]	@ 0x28
 801358a:	4b0d      	ldr	r3, [pc, #52]	@ (80135c0 <std+0x60>)
 801358c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801358e:	4b0d      	ldr	r3, [pc, #52]	@ (80135c4 <std+0x64>)
 8013590:	6323      	str	r3, [r4, #48]	@ 0x30
 8013592:	4b0d      	ldr	r3, [pc, #52]	@ (80135c8 <std+0x68>)
 8013594:	6224      	str	r4, [r4, #32]
 8013596:	429c      	cmp	r4, r3
 8013598:	d006      	beq.n	80135a8 <std+0x48>
 801359a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801359e:	4294      	cmp	r4, r2
 80135a0:	d002      	beq.n	80135a8 <std+0x48>
 80135a2:	33d0      	adds	r3, #208	@ 0xd0
 80135a4:	429c      	cmp	r4, r3
 80135a6:	d105      	bne.n	80135b4 <std+0x54>
 80135a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80135ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135b0:	f000 baa2 	b.w	8013af8 <__retarget_lock_init_recursive>
 80135b4:	bd10      	pop	{r4, pc}
 80135b6:	bf00      	nop
 80135b8:	080137c5 	.word	0x080137c5
 80135bc:	080137e7 	.word	0x080137e7
 80135c0:	0801381f 	.word	0x0801381f
 80135c4:	08013843 	.word	0x08013843
 80135c8:	20008c08 	.word	0x20008c08

080135cc <stdio_exit_handler>:
 80135cc:	4a02      	ldr	r2, [pc, #8]	@ (80135d8 <stdio_exit_handler+0xc>)
 80135ce:	4903      	ldr	r1, [pc, #12]	@ (80135dc <stdio_exit_handler+0x10>)
 80135d0:	4803      	ldr	r0, [pc, #12]	@ (80135e0 <stdio_exit_handler+0x14>)
 80135d2:	f000 b869 	b.w	80136a8 <_fwalk_sglue>
 80135d6:	bf00      	nop
 80135d8:	2000002c 	.word	0x2000002c
 80135dc:	08014401 	.word	0x08014401
 80135e0:	2000003c 	.word	0x2000003c

080135e4 <cleanup_stdio>:
 80135e4:	6841      	ldr	r1, [r0, #4]
 80135e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013618 <cleanup_stdio+0x34>)
 80135e8:	4299      	cmp	r1, r3
 80135ea:	b510      	push	{r4, lr}
 80135ec:	4604      	mov	r4, r0
 80135ee:	d001      	beq.n	80135f4 <cleanup_stdio+0x10>
 80135f0:	f000 ff06 	bl	8014400 <_fflush_r>
 80135f4:	68a1      	ldr	r1, [r4, #8]
 80135f6:	4b09      	ldr	r3, [pc, #36]	@ (801361c <cleanup_stdio+0x38>)
 80135f8:	4299      	cmp	r1, r3
 80135fa:	d002      	beq.n	8013602 <cleanup_stdio+0x1e>
 80135fc:	4620      	mov	r0, r4
 80135fe:	f000 feff 	bl	8014400 <_fflush_r>
 8013602:	68e1      	ldr	r1, [r4, #12]
 8013604:	4b06      	ldr	r3, [pc, #24]	@ (8013620 <cleanup_stdio+0x3c>)
 8013606:	4299      	cmp	r1, r3
 8013608:	d004      	beq.n	8013614 <cleanup_stdio+0x30>
 801360a:	4620      	mov	r0, r4
 801360c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013610:	f000 bef6 	b.w	8014400 <_fflush_r>
 8013614:	bd10      	pop	{r4, pc}
 8013616:	bf00      	nop
 8013618:	20008c08 	.word	0x20008c08
 801361c:	20008c70 	.word	0x20008c70
 8013620:	20008cd8 	.word	0x20008cd8

08013624 <global_stdio_init.part.0>:
 8013624:	b510      	push	{r4, lr}
 8013626:	4b0b      	ldr	r3, [pc, #44]	@ (8013654 <global_stdio_init.part.0+0x30>)
 8013628:	4c0b      	ldr	r4, [pc, #44]	@ (8013658 <global_stdio_init.part.0+0x34>)
 801362a:	4a0c      	ldr	r2, [pc, #48]	@ (801365c <global_stdio_init.part.0+0x38>)
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	4620      	mov	r0, r4
 8013630:	2200      	movs	r2, #0
 8013632:	2104      	movs	r1, #4
 8013634:	f7ff ff94 	bl	8013560 <std>
 8013638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801363c:	2201      	movs	r2, #1
 801363e:	2109      	movs	r1, #9
 8013640:	f7ff ff8e 	bl	8013560 <std>
 8013644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013648:	2202      	movs	r2, #2
 801364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801364e:	2112      	movs	r1, #18
 8013650:	f7ff bf86 	b.w	8013560 <std>
 8013654:	20008d40 	.word	0x20008d40
 8013658:	20008c08 	.word	0x20008c08
 801365c:	080135cd 	.word	0x080135cd

08013660 <__sfp_lock_acquire>:
 8013660:	4801      	ldr	r0, [pc, #4]	@ (8013668 <__sfp_lock_acquire+0x8>)
 8013662:	f000 ba4a 	b.w	8013afa <__retarget_lock_acquire_recursive>
 8013666:	bf00      	nop
 8013668:	20008d49 	.word	0x20008d49

0801366c <__sfp_lock_release>:
 801366c:	4801      	ldr	r0, [pc, #4]	@ (8013674 <__sfp_lock_release+0x8>)
 801366e:	f000 ba45 	b.w	8013afc <__retarget_lock_release_recursive>
 8013672:	bf00      	nop
 8013674:	20008d49 	.word	0x20008d49

08013678 <__sinit>:
 8013678:	b510      	push	{r4, lr}
 801367a:	4604      	mov	r4, r0
 801367c:	f7ff fff0 	bl	8013660 <__sfp_lock_acquire>
 8013680:	6a23      	ldr	r3, [r4, #32]
 8013682:	b11b      	cbz	r3, 801368c <__sinit+0x14>
 8013684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013688:	f7ff bff0 	b.w	801366c <__sfp_lock_release>
 801368c:	4b04      	ldr	r3, [pc, #16]	@ (80136a0 <__sinit+0x28>)
 801368e:	6223      	str	r3, [r4, #32]
 8013690:	4b04      	ldr	r3, [pc, #16]	@ (80136a4 <__sinit+0x2c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d1f5      	bne.n	8013684 <__sinit+0xc>
 8013698:	f7ff ffc4 	bl	8013624 <global_stdio_init.part.0>
 801369c:	e7f2      	b.n	8013684 <__sinit+0xc>
 801369e:	bf00      	nop
 80136a0:	080135e5 	.word	0x080135e5
 80136a4:	20008d40 	.word	0x20008d40

080136a8 <_fwalk_sglue>:
 80136a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136ac:	4607      	mov	r7, r0
 80136ae:	4688      	mov	r8, r1
 80136b0:	4614      	mov	r4, r2
 80136b2:	2600      	movs	r6, #0
 80136b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136b8:	f1b9 0901 	subs.w	r9, r9, #1
 80136bc:	d505      	bpl.n	80136ca <_fwalk_sglue+0x22>
 80136be:	6824      	ldr	r4, [r4, #0]
 80136c0:	2c00      	cmp	r4, #0
 80136c2:	d1f7      	bne.n	80136b4 <_fwalk_sglue+0xc>
 80136c4:	4630      	mov	r0, r6
 80136c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136ca:	89ab      	ldrh	r3, [r5, #12]
 80136cc:	2b01      	cmp	r3, #1
 80136ce:	d907      	bls.n	80136e0 <_fwalk_sglue+0x38>
 80136d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136d4:	3301      	adds	r3, #1
 80136d6:	d003      	beq.n	80136e0 <_fwalk_sglue+0x38>
 80136d8:	4629      	mov	r1, r5
 80136da:	4638      	mov	r0, r7
 80136dc:	47c0      	blx	r8
 80136de:	4306      	orrs	r6, r0
 80136e0:	3568      	adds	r5, #104	@ 0x68
 80136e2:	e7e9      	b.n	80136b8 <_fwalk_sglue+0x10>

080136e4 <iprintf>:
 80136e4:	b40f      	push	{r0, r1, r2, r3}
 80136e6:	b507      	push	{r0, r1, r2, lr}
 80136e8:	4906      	ldr	r1, [pc, #24]	@ (8013704 <iprintf+0x20>)
 80136ea:	ab04      	add	r3, sp, #16
 80136ec:	6808      	ldr	r0, [r1, #0]
 80136ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80136f2:	6881      	ldr	r1, [r0, #8]
 80136f4:	9301      	str	r3, [sp, #4]
 80136f6:	f000 fb59 	bl	8013dac <_vfiprintf_r>
 80136fa:	b003      	add	sp, #12
 80136fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013700:	b004      	add	sp, #16
 8013702:	4770      	bx	lr
 8013704:	20000038 	.word	0x20000038

08013708 <_puts_r>:
 8013708:	6a03      	ldr	r3, [r0, #32]
 801370a:	b570      	push	{r4, r5, r6, lr}
 801370c:	6884      	ldr	r4, [r0, #8]
 801370e:	4605      	mov	r5, r0
 8013710:	460e      	mov	r6, r1
 8013712:	b90b      	cbnz	r3, 8013718 <_puts_r+0x10>
 8013714:	f7ff ffb0 	bl	8013678 <__sinit>
 8013718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801371a:	07db      	lsls	r3, r3, #31
 801371c:	d405      	bmi.n	801372a <_puts_r+0x22>
 801371e:	89a3      	ldrh	r3, [r4, #12]
 8013720:	0598      	lsls	r0, r3, #22
 8013722:	d402      	bmi.n	801372a <_puts_r+0x22>
 8013724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013726:	f000 f9e8 	bl	8013afa <__retarget_lock_acquire_recursive>
 801372a:	89a3      	ldrh	r3, [r4, #12]
 801372c:	0719      	lsls	r1, r3, #28
 801372e:	d502      	bpl.n	8013736 <_puts_r+0x2e>
 8013730:	6923      	ldr	r3, [r4, #16]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d135      	bne.n	80137a2 <_puts_r+0x9a>
 8013736:	4621      	mov	r1, r4
 8013738:	4628      	mov	r0, r5
 801373a:	f000 f8c5 	bl	80138c8 <__swsetup_r>
 801373e:	b380      	cbz	r0, 80137a2 <_puts_r+0x9a>
 8013740:	f04f 35ff 	mov.w	r5, #4294967295
 8013744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013746:	07da      	lsls	r2, r3, #31
 8013748:	d405      	bmi.n	8013756 <_puts_r+0x4e>
 801374a:	89a3      	ldrh	r3, [r4, #12]
 801374c:	059b      	lsls	r3, r3, #22
 801374e:	d402      	bmi.n	8013756 <_puts_r+0x4e>
 8013750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013752:	f000 f9d3 	bl	8013afc <__retarget_lock_release_recursive>
 8013756:	4628      	mov	r0, r5
 8013758:	bd70      	pop	{r4, r5, r6, pc}
 801375a:	2b00      	cmp	r3, #0
 801375c:	da04      	bge.n	8013768 <_puts_r+0x60>
 801375e:	69a2      	ldr	r2, [r4, #24]
 8013760:	429a      	cmp	r2, r3
 8013762:	dc17      	bgt.n	8013794 <_puts_r+0x8c>
 8013764:	290a      	cmp	r1, #10
 8013766:	d015      	beq.n	8013794 <_puts_r+0x8c>
 8013768:	6823      	ldr	r3, [r4, #0]
 801376a:	1c5a      	adds	r2, r3, #1
 801376c:	6022      	str	r2, [r4, #0]
 801376e:	7019      	strb	r1, [r3, #0]
 8013770:	68a3      	ldr	r3, [r4, #8]
 8013772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013776:	3b01      	subs	r3, #1
 8013778:	60a3      	str	r3, [r4, #8]
 801377a:	2900      	cmp	r1, #0
 801377c:	d1ed      	bne.n	801375a <_puts_r+0x52>
 801377e:	2b00      	cmp	r3, #0
 8013780:	da11      	bge.n	80137a6 <_puts_r+0x9e>
 8013782:	4622      	mov	r2, r4
 8013784:	210a      	movs	r1, #10
 8013786:	4628      	mov	r0, r5
 8013788:	f000 f85f 	bl	801384a <__swbuf_r>
 801378c:	3001      	adds	r0, #1
 801378e:	d0d7      	beq.n	8013740 <_puts_r+0x38>
 8013790:	250a      	movs	r5, #10
 8013792:	e7d7      	b.n	8013744 <_puts_r+0x3c>
 8013794:	4622      	mov	r2, r4
 8013796:	4628      	mov	r0, r5
 8013798:	f000 f857 	bl	801384a <__swbuf_r>
 801379c:	3001      	adds	r0, #1
 801379e:	d1e7      	bne.n	8013770 <_puts_r+0x68>
 80137a0:	e7ce      	b.n	8013740 <_puts_r+0x38>
 80137a2:	3e01      	subs	r6, #1
 80137a4:	e7e4      	b.n	8013770 <_puts_r+0x68>
 80137a6:	6823      	ldr	r3, [r4, #0]
 80137a8:	1c5a      	adds	r2, r3, #1
 80137aa:	6022      	str	r2, [r4, #0]
 80137ac:	220a      	movs	r2, #10
 80137ae:	701a      	strb	r2, [r3, #0]
 80137b0:	e7ee      	b.n	8013790 <_puts_r+0x88>
	...

080137b4 <puts>:
 80137b4:	4b02      	ldr	r3, [pc, #8]	@ (80137c0 <puts+0xc>)
 80137b6:	4601      	mov	r1, r0
 80137b8:	6818      	ldr	r0, [r3, #0]
 80137ba:	f7ff bfa5 	b.w	8013708 <_puts_r>
 80137be:	bf00      	nop
 80137c0:	20000038 	.word	0x20000038

080137c4 <__sread>:
 80137c4:	b510      	push	{r4, lr}
 80137c6:	460c      	mov	r4, r1
 80137c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137cc:	f000 f94c 	bl	8013a68 <_read_r>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	bfab      	itete	ge
 80137d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80137d6:	89a3      	ldrhlt	r3, [r4, #12]
 80137d8:	181b      	addge	r3, r3, r0
 80137da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80137de:	bfac      	ite	ge
 80137e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80137e2:	81a3      	strhlt	r3, [r4, #12]
 80137e4:	bd10      	pop	{r4, pc}

080137e6 <__swrite>:
 80137e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ea:	461f      	mov	r7, r3
 80137ec:	898b      	ldrh	r3, [r1, #12]
 80137ee:	05db      	lsls	r3, r3, #23
 80137f0:	4605      	mov	r5, r0
 80137f2:	460c      	mov	r4, r1
 80137f4:	4616      	mov	r6, r2
 80137f6:	d505      	bpl.n	8013804 <__swrite+0x1e>
 80137f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137fc:	2302      	movs	r3, #2
 80137fe:	2200      	movs	r2, #0
 8013800:	f000 f920 	bl	8013a44 <_lseek_r>
 8013804:	89a3      	ldrh	r3, [r4, #12]
 8013806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801380a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801380e:	81a3      	strh	r3, [r4, #12]
 8013810:	4632      	mov	r2, r6
 8013812:	463b      	mov	r3, r7
 8013814:	4628      	mov	r0, r5
 8013816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801381a:	f000 b937 	b.w	8013a8c <_write_r>

0801381e <__sseek>:
 801381e:	b510      	push	{r4, lr}
 8013820:	460c      	mov	r4, r1
 8013822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013826:	f000 f90d 	bl	8013a44 <_lseek_r>
 801382a:	1c43      	adds	r3, r0, #1
 801382c:	89a3      	ldrh	r3, [r4, #12]
 801382e:	bf15      	itete	ne
 8013830:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013832:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013836:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801383a:	81a3      	strheq	r3, [r4, #12]
 801383c:	bf18      	it	ne
 801383e:	81a3      	strhne	r3, [r4, #12]
 8013840:	bd10      	pop	{r4, pc}

08013842 <__sclose>:
 8013842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013846:	f000 b8db 	b.w	8013a00 <_close_r>

0801384a <__swbuf_r>:
 801384a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801384c:	460e      	mov	r6, r1
 801384e:	4614      	mov	r4, r2
 8013850:	4605      	mov	r5, r0
 8013852:	b118      	cbz	r0, 801385c <__swbuf_r+0x12>
 8013854:	6a03      	ldr	r3, [r0, #32]
 8013856:	b90b      	cbnz	r3, 801385c <__swbuf_r+0x12>
 8013858:	f7ff ff0e 	bl	8013678 <__sinit>
 801385c:	69a3      	ldr	r3, [r4, #24]
 801385e:	60a3      	str	r3, [r4, #8]
 8013860:	89a3      	ldrh	r3, [r4, #12]
 8013862:	071a      	lsls	r2, r3, #28
 8013864:	d501      	bpl.n	801386a <__swbuf_r+0x20>
 8013866:	6923      	ldr	r3, [r4, #16]
 8013868:	b943      	cbnz	r3, 801387c <__swbuf_r+0x32>
 801386a:	4621      	mov	r1, r4
 801386c:	4628      	mov	r0, r5
 801386e:	f000 f82b 	bl	80138c8 <__swsetup_r>
 8013872:	b118      	cbz	r0, 801387c <__swbuf_r+0x32>
 8013874:	f04f 37ff 	mov.w	r7, #4294967295
 8013878:	4638      	mov	r0, r7
 801387a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801387c:	6823      	ldr	r3, [r4, #0]
 801387e:	6922      	ldr	r2, [r4, #16]
 8013880:	1a98      	subs	r0, r3, r2
 8013882:	6963      	ldr	r3, [r4, #20]
 8013884:	b2f6      	uxtb	r6, r6
 8013886:	4283      	cmp	r3, r0
 8013888:	4637      	mov	r7, r6
 801388a:	dc05      	bgt.n	8013898 <__swbuf_r+0x4e>
 801388c:	4621      	mov	r1, r4
 801388e:	4628      	mov	r0, r5
 8013890:	f000 fdb6 	bl	8014400 <_fflush_r>
 8013894:	2800      	cmp	r0, #0
 8013896:	d1ed      	bne.n	8013874 <__swbuf_r+0x2a>
 8013898:	68a3      	ldr	r3, [r4, #8]
 801389a:	3b01      	subs	r3, #1
 801389c:	60a3      	str	r3, [r4, #8]
 801389e:	6823      	ldr	r3, [r4, #0]
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	6022      	str	r2, [r4, #0]
 80138a4:	701e      	strb	r6, [r3, #0]
 80138a6:	6962      	ldr	r2, [r4, #20]
 80138a8:	1c43      	adds	r3, r0, #1
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d004      	beq.n	80138b8 <__swbuf_r+0x6e>
 80138ae:	89a3      	ldrh	r3, [r4, #12]
 80138b0:	07db      	lsls	r3, r3, #31
 80138b2:	d5e1      	bpl.n	8013878 <__swbuf_r+0x2e>
 80138b4:	2e0a      	cmp	r6, #10
 80138b6:	d1df      	bne.n	8013878 <__swbuf_r+0x2e>
 80138b8:	4621      	mov	r1, r4
 80138ba:	4628      	mov	r0, r5
 80138bc:	f000 fda0 	bl	8014400 <_fflush_r>
 80138c0:	2800      	cmp	r0, #0
 80138c2:	d0d9      	beq.n	8013878 <__swbuf_r+0x2e>
 80138c4:	e7d6      	b.n	8013874 <__swbuf_r+0x2a>
	...

080138c8 <__swsetup_r>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	4b29      	ldr	r3, [pc, #164]	@ (8013970 <__swsetup_r+0xa8>)
 80138cc:	4605      	mov	r5, r0
 80138ce:	6818      	ldr	r0, [r3, #0]
 80138d0:	460c      	mov	r4, r1
 80138d2:	b118      	cbz	r0, 80138dc <__swsetup_r+0x14>
 80138d4:	6a03      	ldr	r3, [r0, #32]
 80138d6:	b90b      	cbnz	r3, 80138dc <__swsetup_r+0x14>
 80138d8:	f7ff fece 	bl	8013678 <__sinit>
 80138dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138e0:	0719      	lsls	r1, r3, #28
 80138e2:	d422      	bmi.n	801392a <__swsetup_r+0x62>
 80138e4:	06da      	lsls	r2, r3, #27
 80138e6:	d407      	bmi.n	80138f8 <__swsetup_r+0x30>
 80138e8:	2209      	movs	r2, #9
 80138ea:	602a      	str	r2, [r5, #0]
 80138ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138f0:	81a3      	strh	r3, [r4, #12]
 80138f2:	f04f 30ff 	mov.w	r0, #4294967295
 80138f6:	e033      	b.n	8013960 <__swsetup_r+0x98>
 80138f8:	0758      	lsls	r0, r3, #29
 80138fa:	d512      	bpl.n	8013922 <__swsetup_r+0x5a>
 80138fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80138fe:	b141      	cbz	r1, 8013912 <__swsetup_r+0x4a>
 8013900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013904:	4299      	cmp	r1, r3
 8013906:	d002      	beq.n	801390e <__swsetup_r+0x46>
 8013908:	4628      	mov	r0, r5
 801390a:	f000 f925 	bl	8013b58 <_free_r>
 801390e:	2300      	movs	r3, #0
 8013910:	6363      	str	r3, [r4, #52]	@ 0x34
 8013912:	89a3      	ldrh	r3, [r4, #12]
 8013914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013918:	81a3      	strh	r3, [r4, #12]
 801391a:	2300      	movs	r3, #0
 801391c:	6063      	str	r3, [r4, #4]
 801391e:	6923      	ldr	r3, [r4, #16]
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	89a3      	ldrh	r3, [r4, #12]
 8013924:	f043 0308 	orr.w	r3, r3, #8
 8013928:	81a3      	strh	r3, [r4, #12]
 801392a:	6923      	ldr	r3, [r4, #16]
 801392c:	b94b      	cbnz	r3, 8013942 <__swsetup_r+0x7a>
 801392e:	89a3      	ldrh	r3, [r4, #12]
 8013930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013938:	d003      	beq.n	8013942 <__swsetup_r+0x7a>
 801393a:	4621      	mov	r1, r4
 801393c:	4628      	mov	r0, r5
 801393e:	f000 fdbf 	bl	80144c0 <__smakebuf_r>
 8013942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013946:	f013 0201 	ands.w	r2, r3, #1
 801394a:	d00a      	beq.n	8013962 <__swsetup_r+0x9a>
 801394c:	2200      	movs	r2, #0
 801394e:	60a2      	str	r2, [r4, #8]
 8013950:	6962      	ldr	r2, [r4, #20]
 8013952:	4252      	negs	r2, r2
 8013954:	61a2      	str	r2, [r4, #24]
 8013956:	6922      	ldr	r2, [r4, #16]
 8013958:	b942      	cbnz	r2, 801396c <__swsetup_r+0xa4>
 801395a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801395e:	d1c5      	bne.n	80138ec <__swsetup_r+0x24>
 8013960:	bd38      	pop	{r3, r4, r5, pc}
 8013962:	0799      	lsls	r1, r3, #30
 8013964:	bf58      	it	pl
 8013966:	6962      	ldrpl	r2, [r4, #20]
 8013968:	60a2      	str	r2, [r4, #8]
 801396a:	e7f4      	b.n	8013956 <__swsetup_r+0x8e>
 801396c:	2000      	movs	r0, #0
 801396e:	e7f7      	b.n	8013960 <__swsetup_r+0x98>
 8013970:	20000038 	.word	0x20000038

08013974 <memcmp>:
 8013974:	b510      	push	{r4, lr}
 8013976:	3901      	subs	r1, #1
 8013978:	4402      	add	r2, r0
 801397a:	4290      	cmp	r0, r2
 801397c:	d101      	bne.n	8013982 <memcmp+0xe>
 801397e:	2000      	movs	r0, #0
 8013980:	e005      	b.n	801398e <memcmp+0x1a>
 8013982:	7803      	ldrb	r3, [r0, #0]
 8013984:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013988:	42a3      	cmp	r3, r4
 801398a:	d001      	beq.n	8013990 <memcmp+0x1c>
 801398c:	1b18      	subs	r0, r3, r4
 801398e:	bd10      	pop	{r4, pc}
 8013990:	3001      	adds	r0, #1
 8013992:	e7f2      	b.n	801397a <memcmp+0x6>

08013994 <memset>:
 8013994:	4402      	add	r2, r0
 8013996:	4603      	mov	r3, r0
 8013998:	4293      	cmp	r3, r2
 801399a:	d100      	bne.n	801399e <memset+0xa>
 801399c:	4770      	bx	lr
 801399e:	f803 1b01 	strb.w	r1, [r3], #1
 80139a2:	e7f9      	b.n	8013998 <memset+0x4>

080139a4 <strncmp>:
 80139a4:	b510      	push	{r4, lr}
 80139a6:	b16a      	cbz	r2, 80139c4 <strncmp+0x20>
 80139a8:	3901      	subs	r1, #1
 80139aa:	1884      	adds	r4, r0, r2
 80139ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d103      	bne.n	80139c0 <strncmp+0x1c>
 80139b8:	42a0      	cmp	r0, r4
 80139ba:	d001      	beq.n	80139c0 <strncmp+0x1c>
 80139bc:	2a00      	cmp	r2, #0
 80139be:	d1f5      	bne.n	80139ac <strncmp+0x8>
 80139c0:	1ad0      	subs	r0, r2, r3
 80139c2:	bd10      	pop	{r4, pc}
 80139c4:	4610      	mov	r0, r2
 80139c6:	e7fc      	b.n	80139c2 <strncmp+0x1e>

080139c8 <time>:
 80139c8:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80139ca:	4b0c      	ldr	r3, [pc, #48]	@ (80139fc <time+0x34>)
 80139cc:	f04f 36ff 	mov.w	r6, #4294967295
 80139d0:	f04f 37ff 	mov.w	r7, #4294967295
 80139d4:	4669      	mov	r1, sp
 80139d6:	4604      	mov	r4, r0
 80139d8:	2200      	movs	r2, #0
 80139da:	6818      	ldr	r0, [r3, #0]
 80139dc:	e9cd 6700 	strd	r6, r7, [sp]
 80139e0:	f000 f81e 	bl	8013a20 <_gettimeofday_r>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	bfb8      	it	lt
 80139e8:	e9cd 6700 	strdlt	r6, r7, [sp]
 80139ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139f0:	b10c      	cbz	r4, 80139f6 <time+0x2e>
 80139f2:	e9c4 0100 	strd	r0, r1, [r4]
 80139f6:	b004      	add	sp, #16
 80139f8:	bdd0      	pop	{r4, r6, r7, pc}
 80139fa:	bf00      	nop
 80139fc:	20000038 	.word	0x20000038

08013a00 <_close_r>:
 8013a00:	b538      	push	{r3, r4, r5, lr}
 8013a02:	4d06      	ldr	r5, [pc, #24]	@ (8013a1c <_close_r+0x1c>)
 8013a04:	2300      	movs	r3, #0
 8013a06:	4604      	mov	r4, r0
 8013a08:	4608      	mov	r0, r1
 8013a0a:	602b      	str	r3, [r5, #0]
 8013a0c:	f7ed fcb9 	bl	8001382 <_close>
 8013a10:	1c43      	adds	r3, r0, #1
 8013a12:	d102      	bne.n	8013a1a <_close_r+0x1a>
 8013a14:	682b      	ldr	r3, [r5, #0]
 8013a16:	b103      	cbz	r3, 8013a1a <_close_r+0x1a>
 8013a18:	6023      	str	r3, [r4, #0]
 8013a1a:	bd38      	pop	{r3, r4, r5, pc}
 8013a1c:	20008d44 	.word	0x20008d44

08013a20 <_gettimeofday_r>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	4d07      	ldr	r5, [pc, #28]	@ (8013a40 <_gettimeofday_r+0x20>)
 8013a24:	2300      	movs	r3, #0
 8013a26:	4604      	mov	r4, r0
 8013a28:	4608      	mov	r0, r1
 8013a2a:	4611      	mov	r1, r2
 8013a2c:	602b      	str	r3, [r5, #0]
 8013a2e:	f000 fe01 	bl	8014634 <_gettimeofday>
 8013a32:	1c43      	adds	r3, r0, #1
 8013a34:	d102      	bne.n	8013a3c <_gettimeofday_r+0x1c>
 8013a36:	682b      	ldr	r3, [r5, #0]
 8013a38:	b103      	cbz	r3, 8013a3c <_gettimeofday_r+0x1c>
 8013a3a:	6023      	str	r3, [r4, #0]
 8013a3c:	bd38      	pop	{r3, r4, r5, pc}
 8013a3e:	bf00      	nop
 8013a40:	20008d44 	.word	0x20008d44

08013a44 <_lseek_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	4d07      	ldr	r5, [pc, #28]	@ (8013a64 <_lseek_r+0x20>)
 8013a48:	4604      	mov	r4, r0
 8013a4a:	4608      	mov	r0, r1
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	2200      	movs	r2, #0
 8013a50:	602a      	str	r2, [r5, #0]
 8013a52:	461a      	mov	r2, r3
 8013a54:	f7ed fcbc 	bl	80013d0 <_lseek>
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d102      	bne.n	8013a62 <_lseek_r+0x1e>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	b103      	cbz	r3, 8013a62 <_lseek_r+0x1e>
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	20008d44 	.word	0x20008d44

08013a68 <_read_r>:
 8013a68:	b538      	push	{r3, r4, r5, lr}
 8013a6a:	4d07      	ldr	r5, [pc, #28]	@ (8013a88 <_read_r+0x20>)
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	4608      	mov	r0, r1
 8013a70:	4611      	mov	r1, r2
 8013a72:	2200      	movs	r2, #0
 8013a74:	602a      	str	r2, [r5, #0]
 8013a76:	461a      	mov	r2, r3
 8013a78:	f7ff f89c 	bl	8012bb4 <_read>
 8013a7c:	1c43      	adds	r3, r0, #1
 8013a7e:	d102      	bne.n	8013a86 <_read_r+0x1e>
 8013a80:	682b      	ldr	r3, [r5, #0]
 8013a82:	b103      	cbz	r3, 8013a86 <_read_r+0x1e>
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	bd38      	pop	{r3, r4, r5, pc}
 8013a88:	20008d44 	.word	0x20008d44

08013a8c <_write_r>:
 8013a8c:	b538      	push	{r3, r4, r5, lr}
 8013a8e:	4d07      	ldr	r5, [pc, #28]	@ (8013aac <_write_r+0x20>)
 8013a90:	4604      	mov	r4, r0
 8013a92:	4608      	mov	r0, r1
 8013a94:	4611      	mov	r1, r2
 8013a96:	2200      	movs	r2, #0
 8013a98:	602a      	str	r2, [r5, #0]
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	f7ff f85a 	bl	8012b54 <_write>
 8013aa0:	1c43      	adds	r3, r0, #1
 8013aa2:	d102      	bne.n	8013aaa <_write_r+0x1e>
 8013aa4:	682b      	ldr	r3, [r5, #0]
 8013aa6:	b103      	cbz	r3, 8013aaa <_write_r+0x1e>
 8013aa8:	6023      	str	r3, [r4, #0]
 8013aaa:	bd38      	pop	{r3, r4, r5, pc}
 8013aac:	20008d44 	.word	0x20008d44

08013ab0 <__libc_init_array>:
 8013ab0:	b570      	push	{r4, r5, r6, lr}
 8013ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8013ae8 <__libc_init_array+0x38>)
 8013ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8013aec <__libc_init_array+0x3c>)
 8013ab6:	1b64      	subs	r4, r4, r5
 8013ab8:	10a4      	asrs	r4, r4, #2
 8013aba:	2600      	movs	r6, #0
 8013abc:	42a6      	cmp	r6, r4
 8013abe:	d109      	bne.n	8013ad4 <__libc_init_array+0x24>
 8013ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8013af0 <__libc_init_array+0x40>)
 8013ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8013af4 <__libc_init_array+0x44>)
 8013ac4:	f000 fdbe 	bl	8014644 <_init>
 8013ac8:	1b64      	subs	r4, r4, r5
 8013aca:	10a4      	asrs	r4, r4, #2
 8013acc:	2600      	movs	r6, #0
 8013ace:	42a6      	cmp	r6, r4
 8013ad0:	d105      	bne.n	8013ade <__libc_init_array+0x2e>
 8013ad2:	bd70      	pop	{r4, r5, r6, pc}
 8013ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ad8:	4798      	blx	r3
 8013ada:	3601      	adds	r6, #1
 8013adc:	e7ee      	b.n	8013abc <__libc_init_array+0xc>
 8013ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ae2:	4798      	blx	r3
 8013ae4:	3601      	adds	r6, #1
 8013ae6:	e7f2      	b.n	8013ace <__libc_init_array+0x1e>
 8013ae8:	080176dc 	.word	0x080176dc
 8013aec:	080176dc 	.word	0x080176dc
 8013af0:	080176dc 	.word	0x080176dc
 8013af4:	080176e0 	.word	0x080176e0

08013af8 <__retarget_lock_init_recursive>:
 8013af8:	4770      	bx	lr

08013afa <__retarget_lock_acquire_recursive>:
 8013afa:	4770      	bx	lr

08013afc <__retarget_lock_release_recursive>:
 8013afc:	4770      	bx	lr

08013afe <memcpy>:
 8013afe:	440a      	add	r2, r1
 8013b00:	4291      	cmp	r1, r2
 8013b02:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b06:	d100      	bne.n	8013b0a <memcpy+0xc>
 8013b08:	4770      	bx	lr
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b14:	4291      	cmp	r1, r2
 8013b16:	d1f9      	bne.n	8013b0c <memcpy+0xe>
 8013b18:	bd10      	pop	{r4, pc}
	...

08013b1c <__assert_func>:
 8013b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b1e:	4614      	mov	r4, r2
 8013b20:	461a      	mov	r2, r3
 8013b22:	4b09      	ldr	r3, [pc, #36]	@ (8013b48 <__assert_func+0x2c>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	4605      	mov	r5, r0
 8013b28:	68d8      	ldr	r0, [r3, #12]
 8013b2a:	b954      	cbnz	r4, 8013b42 <__assert_func+0x26>
 8013b2c:	4b07      	ldr	r3, [pc, #28]	@ (8013b4c <__assert_func+0x30>)
 8013b2e:	461c      	mov	r4, r3
 8013b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b34:	9100      	str	r1, [sp, #0]
 8013b36:	462b      	mov	r3, r5
 8013b38:	4905      	ldr	r1, [pc, #20]	@ (8013b50 <__assert_func+0x34>)
 8013b3a:	f000 fc89 	bl	8014450 <fiprintf>
 8013b3e:	f000 fd2d 	bl	801459c <abort>
 8013b42:	4b04      	ldr	r3, [pc, #16]	@ (8013b54 <__assert_func+0x38>)
 8013b44:	e7f4      	b.n	8013b30 <__assert_func+0x14>
 8013b46:	bf00      	nop
 8013b48:	20000038 	.word	0x20000038
 8013b4c:	0801769e 	.word	0x0801769e
 8013b50:	08017670 	.word	0x08017670
 8013b54:	08017663 	.word	0x08017663

08013b58 <_free_r>:
 8013b58:	b538      	push	{r3, r4, r5, lr}
 8013b5a:	4605      	mov	r5, r0
 8013b5c:	2900      	cmp	r1, #0
 8013b5e:	d041      	beq.n	8013be4 <_free_r+0x8c>
 8013b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b64:	1f0c      	subs	r4, r1, #4
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	bfb8      	it	lt
 8013b6a:	18e4      	addlt	r4, r4, r3
 8013b6c:	f000 f8e8 	bl	8013d40 <__malloc_lock>
 8013b70:	4a1d      	ldr	r2, [pc, #116]	@ (8013be8 <_free_r+0x90>)
 8013b72:	6813      	ldr	r3, [r2, #0]
 8013b74:	b933      	cbnz	r3, 8013b84 <_free_r+0x2c>
 8013b76:	6063      	str	r3, [r4, #4]
 8013b78:	6014      	str	r4, [r2, #0]
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b80:	f000 b8e4 	b.w	8013d4c <__malloc_unlock>
 8013b84:	42a3      	cmp	r3, r4
 8013b86:	d908      	bls.n	8013b9a <_free_r+0x42>
 8013b88:	6820      	ldr	r0, [r4, #0]
 8013b8a:	1821      	adds	r1, r4, r0
 8013b8c:	428b      	cmp	r3, r1
 8013b8e:	bf01      	itttt	eq
 8013b90:	6819      	ldreq	r1, [r3, #0]
 8013b92:	685b      	ldreq	r3, [r3, #4]
 8013b94:	1809      	addeq	r1, r1, r0
 8013b96:	6021      	streq	r1, [r4, #0]
 8013b98:	e7ed      	b.n	8013b76 <_free_r+0x1e>
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	b10b      	cbz	r3, 8013ba4 <_free_r+0x4c>
 8013ba0:	42a3      	cmp	r3, r4
 8013ba2:	d9fa      	bls.n	8013b9a <_free_r+0x42>
 8013ba4:	6811      	ldr	r1, [r2, #0]
 8013ba6:	1850      	adds	r0, r2, r1
 8013ba8:	42a0      	cmp	r0, r4
 8013baa:	d10b      	bne.n	8013bc4 <_free_r+0x6c>
 8013bac:	6820      	ldr	r0, [r4, #0]
 8013bae:	4401      	add	r1, r0
 8013bb0:	1850      	adds	r0, r2, r1
 8013bb2:	4283      	cmp	r3, r0
 8013bb4:	6011      	str	r1, [r2, #0]
 8013bb6:	d1e0      	bne.n	8013b7a <_free_r+0x22>
 8013bb8:	6818      	ldr	r0, [r3, #0]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	6053      	str	r3, [r2, #4]
 8013bbe:	4408      	add	r0, r1
 8013bc0:	6010      	str	r0, [r2, #0]
 8013bc2:	e7da      	b.n	8013b7a <_free_r+0x22>
 8013bc4:	d902      	bls.n	8013bcc <_free_r+0x74>
 8013bc6:	230c      	movs	r3, #12
 8013bc8:	602b      	str	r3, [r5, #0]
 8013bca:	e7d6      	b.n	8013b7a <_free_r+0x22>
 8013bcc:	6820      	ldr	r0, [r4, #0]
 8013bce:	1821      	adds	r1, r4, r0
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	bf04      	itt	eq
 8013bd4:	6819      	ldreq	r1, [r3, #0]
 8013bd6:	685b      	ldreq	r3, [r3, #4]
 8013bd8:	6063      	str	r3, [r4, #4]
 8013bda:	bf04      	itt	eq
 8013bdc:	1809      	addeq	r1, r1, r0
 8013bde:	6021      	streq	r1, [r4, #0]
 8013be0:	6054      	str	r4, [r2, #4]
 8013be2:	e7ca      	b.n	8013b7a <_free_r+0x22>
 8013be4:	bd38      	pop	{r3, r4, r5, pc}
 8013be6:	bf00      	nop
 8013be8:	20008d50 	.word	0x20008d50

08013bec <malloc>:
 8013bec:	4b02      	ldr	r3, [pc, #8]	@ (8013bf8 <malloc+0xc>)
 8013bee:	4601      	mov	r1, r0
 8013bf0:	6818      	ldr	r0, [r3, #0]
 8013bf2:	f000 b825 	b.w	8013c40 <_malloc_r>
 8013bf6:	bf00      	nop
 8013bf8:	20000038 	.word	0x20000038

08013bfc <sbrk_aligned>:
 8013bfc:	b570      	push	{r4, r5, r6, lr}
 8013bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8013c3c <sbrk_aligned+0x40>)
 8013c00:	460c      	mov	r4, r1
 8013c02:	6831      	ldr	r1, [r6, #0]
 8013c04:	4605      	mov	r5, r0
 8013c06:	b911      	cbnz	r1, 8013c0e <sbrk_aligned+0x12>
 8013c08:	f000 fcb8 	bl	801457c <_sbrk_r>
 8013c0c:	6030      	str	r0, [r6, #0]
 8013c0e:	4621      	mov	r1, r4
 8013c10:	4628      	mov	r0, r5
 8013c12:	f000 fcb3 	bl	801457c <_sbrk_r>
 8013c16:	1c43      	adds	r3, r0, #1
 8013c18:	d103      	bne.n	8013c22 <sbrk_aligned+0x26>
 8013c1a:	f04f 34ff 	mov.w	r4, #4294967295
 8013c1e:	4620      	mov	r0, r4
 8013c20:	bd70      	pop	{r4, r5, r6, pc}
 8013c22:	1cc4      	adds	r4, r0, #3
 8013c24:	f024 0403 	bic.w	r4, r4, #3
 8013c28:	42a0      	cmp	r0, r4
 8013c2a:	d0f8      	beq.n	8013c1e <sbrk_aligned+0x22>
 8013c2c:	1a21      	subs	r1, r4, r0
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f000 fca4 	bl	801457c <_sbrk_r>
 8013c34:	3001      	adds	r0, #1
 8013c36:	d1f2      	bne.n	8013c1e <sbrk_aligned+0x22>
 8013c38:	e7ef      	b.n	8013c1a <sbrk_aligned+0x1e>
 8013c3a:	bf00      	nop
 8013c3c:	20008d4c 	.word	0x20008d4c

08013c40 <_malloc_r>:
 8013c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c44:	1ccd      	adds	r5, r1, #3
 8013c46:	f025 0503 	bic.w	r5, r5, #3
 8013c4a:	3508      	adds	r5, #8
 8013c4c:	2d0c      	cmp	r5, #12
 8013c4e:	bf38      	it	cc
 8013c50:	250c      	movcc	r5, #12
 8013c52:	2d00      	cmp	r5, #0
 8013c54:	4606      	mov	r6, r0
 8013c56:	db01      	blt.n	8013c5c <_malloc_r+0x1c>
 8013c58:	42a9      	cmp	r1, r5
 8013c5a:	d904      	bls.n	8013c66 <_malloc_r+0x26>
 8013c5c:	230c      	movs	r3, #12
 8013c5e:	6033      	str	r3, [r6, #0]
 8013c60:	2000      	movs	r0, #0
 8013c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013d3c <_malloc_r+0xfc>
 8013c6a:	f000 f869 	bl	8013d40 <__malloc_lock>
 8013c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8013c72:	461c      	mov	r4, r3
 8013c74:	bb44      	cbnz	r4, 8013cc8 <_malloc_r+0x88>
 8013c76:	4629      	mov	r1, r5
 8013c78:	4630      	mov	r0, r6
 8013c7a:	f7ff ffbf 	bl	8013bfc <sbrk_aligned>
 8013c7e:	1c43      	adds	r3, r0, #1
 8013c80:	4604      	mov	r4, r0
 8013c82:	d158      	bne.n	8013d36 <_malloc_r+0xf6>
 8013c84:	f8d8 4000 	ldr.w	r4, [r8]
 8013c88:	4627      	mov	r7, r4
 8013c8a:	2f00      	cmp	r7, #0
 8013c8c:	d143      	bne.n	8013d16 <_malloc_r+0xd6>
 8013c8e:	2c00      	cmp	r4, #0
 8013c90:	d04b      	beq.n	8013d2a <_malloc_r+0xea>
 8013c92:	6823      	ldr	r3, [r4, #0]
 8013c94:	4639      	mov	r1, r7
 8013c96:	4630      	mov	r0, r6
 8013c98:	eb04 0903 	add.w	r9, r4, r3
 8013c9c:	f000 fc6e 	bl	801457c <_sbrk_r>
 8013ca0:	4581      	cmp	r9, r0
 8013ca2:	d142      	bne.n	8013d2a <_malloc_r+0xea>
 8013ca4:	6821      	ldr	r1, [r4, #0]
 8013ca6:	1a6d      	subs	r5, r5, r1
 8013ca8:	4629      	mov	r1, r5
 8013caa:	4630      	mov	r0, r6
 8013cac:	f7ff ffa6 	bl	8013bfc <sbrk_aligned>
 8013cb0:	3001      	adds	r0, #1
 8013cb2:	d03a      	beq.n	8013d2a <_malloc_r+0xea>
 8013cb4:	6823      	ldr	r3, [r4, #0]
 8013cb6:	442b      	add	r3, r5
 8013cb8:	6023      	str	r3, [r4, #0]
 8013cba:	f8d8 3000 	ldr.w	r3, [r8]
 8013cbe:	685a      	ldr	r2, [r3, #4]
 8013cc0:	bb62      	cbnz	r2, 8013d1c <_malloc_r+0xdc>
 8013cc2:	f8c8 7000 	str.w	r7, [r8]
 8013cc6:	e00f      	b.n	8013ce8 <_malloc_r+0xa8>
 8013cc8:	6822      	ldr	r2, [r4, #0]
 8013cca:	1b52      	subs	r2, r2, r5
 8013ccc:	d420      	bmi.n	8013d10 <_malloc_r+0xd0>
 8013cce:	2a0b      	cmp	r2, #11
 8013cd0:	d917      	bls.n	8013d02 <_malloc_r+0xc2>
 8013cd2:	1961      	adds	r1, r4, r5
 8013cd4:	42a3      	cmp	r3, r4
 8013cd6:	6025      	str	r5, [r4, #0]
 8013cd8:	bf18      	it	ne
 8013cda:	6059      	strne	r1, [r3, #4]
 8013cdc:	6863      	ldr	r3, [r4, #4]
 8013cde:	bf08      	it	eq
 8013ce0:	f8c8 1000 	streq.w	r1, [r8]
 8013ce4:	5162      	str	r2, [r4, r5]
 8013ce6:	604b      	str	r3, [r1, #4]
 8013ce8:	4630      	mov	r0, r6
 8013cea:	f000 f82f 	bl	8013d4c <__malloc_unlock>
 8013cee:	f104 000b 	add.w	r0, r4, #11
 8013cf2:	1d23      	adds	r3, r4, #4
 8013cf4:	f020 0007 	bic.w	r0, r0, #7
 8013cf8:	1ac2      	subs	r2, r0, r3
 8013cfa:	bf1c      	itt	ne
 8013cfc:	1a1b      	subne	r3, r3, r0
 8013cfe:	50a3      	strne	r3, [r4, r2]
 8013d00:	e7af      	b.n	8013c62 <_malloc_r+0x22>
 8013d02:	6862      	ldr	r2, [r4, #4]
 8013d04:	42a3      	cmp	r3, r4
 8013d06:	bf0c      	ite	eq
 8013d08:	f8c8 2000 	streq.w	r2, [r8]
 8013d0c:	605a      	strne	r2, [r3, #4]
 8013d0e:	e7eb      	b.n	8013ce8 <_malloc_r+0xa8>
 8013d10:	4623      	mov	r3, r4
 8013d12:	6864      	ldr	r4, [r4, #4]
 8013d14:	e7ae      	b.n	8013c74 <_malloc_r+0x34>
 8013d16:	463c      	mov	r4, r7
 8013d18:	687f      	ldr	r7, [r7, #4]
 8013d1a:	e7b6      	b.n	8013c8a <_malloc_r+0x4a>
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	42a3      	cmp	r3, r4
 8013d22:	d1fb      	bne.n	8013d1c <_malloc_r+0xdc>
 8013d24:	2300      	movs	r3, #0
 8013d26:	6053      	str	r3, [r2, #4]
 8013d28:	e7de      	b.n	8013ce8 <_malloc_r+0xa8>
 8013d2a:	230c      	movs	r3, #12
 8013d2c:	6033      	str	r3, [r6, #0]
 8013d2e:	4630      	mov	r0, r6
 8013d30:	f000 f80c 	bl	8013d4c <__malloc_unlock>
 8013d34:	e794      	b.n	8013c60 <_malloc_r+0x20>
 8013d36:	6005      	str	r5, [r0, #0]
 8013d38:	e7d6      	b.n	8013ce8 <_malloc_r+0xa8>
 8013d3a:	bf00      	nop
 8013d3c:	20008d50 	.word	0x20008d50

08013d40 <__malloc_lock>:
 8013d40:	4801      	ldr	r0, [pc, #4]	@ (8013d48 <__malloc_lock+0x8>)
 8013d42:	f7ff beda 	b.w	8013afa <__retarget_lock_acquire_recursive>
 8013d46:	bf00      	nop
 8013d48:	20008d48 	.word	0x20008d48

08013d4c <__malloc_unlock>:
 8013d4c:	4801      	ldr	r0, [pc, #4]	@ (8013d54 <__malloc_unlock+0x8>)
 8013d4e:	f7ff bed5 	b.w	8013afc <__retarget_lock_release_recursive>
 8013d52:	bf00      	nop
 8013d54:	20008d48 	.word	0x20008d48

08013d58 <__sfputc_r>:
 8013d58:	6893      	ldr	r3, [r2, #8]
 8013d5a:	3b01      	subs	r3, #1
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	b410      	push	{r4}
 8013d60:	6093      	str	r3, [r2, #8]
 8013d62:	da08      	bge.n	8013d76 <__sfputc_r+0x1e>
 8013d64:	6994      	ldr	r4, [r2, #24]
 8013d66:	42a3      	cmp	r3, r4
 8013d68:	db01      	blt.n	8013d6e <__sfputc_r+0x16>
 8013d6a:	290a      	cmp	r1, #10
 8013d6c:	d103      	bne.n	8013d76 <__sfputc_r+0x1e>
 8013d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d72:	f7ff bd6a 	b.w	801384a <__swbuf_r>
 8013d76:	6813      	ldr	r3, [r2, #0]
 8013d78:	1c58      	adds	r0, r3, #1
 8013d7a:	6010      	str	r0, [r2, #0]
 8013d7c:	7019      	strb	r1, [r3, #0]
 8013d7e:	4608      	mov	r0, r1
 8013d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d84:	4770      	bx	lr

08013d86 <__sfputs_r>:
 8013d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d88:	4606      	mov	r6, r0
 8013d8a:	460f      	mov	r7, r1
 8013d8c:	4614      	mov	r4, r2
 8013d8e:	18d5      	adds	r5, r2, r3
 8013d90:	42ac      	cmp	r4, r5
 8013d92:	d101      	bne.n	8013d98 <__sfputs_r+0x12>
 8013d94:	2000      	movs	r0, #0
 8013d96:	e007      	b.n	8013da8 <__sfputs_r+0x22>
 8013d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d9c:	463a      	mov	r2, r7
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f7ff ffda 	bl	8013d58 <__sfputc_r>
 8013da4:	1c43      	adds	r3, r0, #1
 8013da6:	d1f3      	bne.n	8013d90 <__sfputs_r+0xa>
 8013da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013dac <_vfiprintf_r>:
 8013dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db0:	460d      	mov	r5, r1
 8013db2:	b09d      	sub	sp, #116	@ 0x74
 8013db4:	4614      	mov	r4, r2
 8013db6:	4698      	mov	r8, r3
 8013db8:	4606      	mov	r6, r0
 8013dba:	b118      	cbz	r0, 8013dc4 <_vfiprintf_r+0x18>
 8013dbc:	6a03      	ldr	r3, [r0, #32]
 8013dbe:	b90b      	cbnz	r3, 8013dc4 <_vfiprintf_r+0x18>
 8013dc0:	f7ff fc5a 	bl	8013678 <__sinit>
 8013dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013dc6:	07d9      	lsls	r1, r3, #31
 8013dc8:	d405      	bmi.n	8013dd6 <_vfiprintf_r+0x2a>
 8013dca:	89ab      	ldrh	r3, [r5, #12]
 8013dcc:	059a      	lsls	r2, r3, #22
 8013dce:	d402      	bmi.n	8013dd6 <_vfiprintf_r+0x2a>
 8013dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013dd2:	f7ff fe92 	bl	8013afa <__retarget_lock_acquire_recursive>
 8013dd6:	89ab      	ldrh	r3, [r5, #12]
 8013dd8:	071b      	lsls	r3, r3, #28
 8013dda:	d501      	bpl.n	8013de0 <_vfiprintf_r+0x34>
 8013ddc:	692b      	ldr	r3, [r5, #16]
 8013dde:	b99b      	cbnz	r3, 8013e08 <_vfiprintf_r+0x5c>
 8013de0:	4629      	mov	r1, r5
 8013de2:	4630      	mov	r0, r6
 8013de4:	f7ff fd70 	bl	80138c8 <__swsetup_r>
 8013de8:	b170      	cbz	r0, 8013e08 <_vfiprintf_r+0x5c>
 8013dea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013dec:	07dc      	lsls	r4, r3, #31
 8013dee:	d504      	bpl.n	8013dfa <_vfiprintf_r+0x4e>
 8013df0:	f04f 30ff 	mov.w	r0, #4294967295
 8013df4:	b01d      	add	sp, #116	@ 0x74
 8013df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dfa:	89ab      	ldrh	r3, [r5, #12]
 8013dfc:	0598      	lsls	r0, r3, #22
 8013dfe:	d4f7      	bmi.n	8013df0 <_vfiprintf_r+0x44>
 8013e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e02:	f7ff fe7b 	bl	8013afc <__retarget_lock_release_recursive>
 8013e06:	e7f3      	b.n	8013df0 <_vfiprintf_r+0x44>
 8013e08:	2300      	movs	r3, #0
 8013e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e0c:	2320      	movs	r3, #32
 8013e0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e16:	2330      	movs	r3, #48	@ 0x30
 8013e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013fc8 <_vfiprintf_r+0x21c>
 8013e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e20:	f04f 0901 	mov.w	r9, #1
 8013e24:	4623      	mov	r3, r4
 8013e26:	469a      	mov	sl, r3
 8013e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e2c:	b10a      	cbz	r2, 8013e32 <_vfiprintf_r+0x86>
 8013e2e:	2a25      	cmp	r2, #37	@ 0x25
 8013e30:	d1f9      	bne.n	8013e26 <_vfiprintf_r+0x7a>
 8013e32:	ebba 0b04 	subs.w	fp, sl, r4
 8013e36:	d00b      	beq.n	8013e50 <_vfiprintf_r+0xa4>
 8013e38:	465b      	mov	r3, fp
 8013e3a:	4622      	mov	r2, r4
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f7ff ffa1 	bl	8013d86 <__sfputs_r>
 8013e44:	3001      	adds	r0, #1
 8013e46:	f000 80a7 	beq.w	8013f98 <_vfiprintf_r+0x1ec>
 8013e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e4c:	445a      	add	r2, fp
 8013e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e50:	f89a 3000 	ldrb.w	r3, [sl]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f000 809f 	beq.w	8013f98 <_vfiprintf_r+0x1ec>
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e64:	f10a 0a01 	add.w	sl, sl, #1
 8013e68:	9304      	str	r3, [sp, #16]
 8013e6a:	9307      	str	r3, [sp, #28]
 8013e6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e70:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e72:	4654      	mov	r4, sl
 8013e74:	2205      	movs	r2, #5
 8013e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e7a:	4853      	ldr	r0, [pc, #332]	@ (8013fc8 <_vfiprintf_r+0x21c>)
 8013e7c:	f7ec f9d0 	bl	8000220 <memchr>
 8013e80:	9a04      	ldr	r2, [sp, #16]
 8013e82:	b9d8      	cbnz	r0, 8013ebc <_vfiprintf_r+0x110>
 8013e84:	06d1      	lsls	r1, r2, #27
 8013e86:	bf44      	itt	mi
 8013e88:	2320      	movmi	r3, #32
 8013e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e8e:	0713      	lsls	r3, r2, #28
 8013e90:	bf44      	itt	mi
 8013e92:	232b      	movmi	r3, #43	@ 0x2b
 8013e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e98:	f89a 3000 	ldrb.w	r3, [sl]
 8013e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e9e:	d015      	beq.n	8013ecc <_vfiprintf_r+0x120>
 8013ea0:	9a07      	ldr	r2, [sp, #28]
 8013ea2:	4654      	mov	r4, sl
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	f04f 0c0a 	mov.w	ip, #10
 8013eaa:	4621      	mov	r1, r4
 8013eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013eb0:	3b30      	subs	r3, #48	@ 0x30
 8013eb2:	2b09      	cmp	r3, #9
 8013eb4:	d94b      	bls.n	8013f4e <_vfiprintf_r+0x1a2>
 8013eb6:	b1b0      	cbz	r0, 8013ee6 <_vfiprintf_r+0x13a>
 8013eb8:	9207      	str	r2, [sp, #28]
 8013eba:	e014      	b.n	8013ee6 <_vfiprintf_r+0x13a>
 8013ebc:	eba0 0308 	sub.w	r3, r0, r8
 8013ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8013ec4:	4313      	orrs	r3, r2
 8013ec6:	9304      	str	r3, [sp, #16]
 8013ec8:	46a2      	mov	sl, r4
 8013eca:	e7d2      	b.n	8013e72 <_vfiprintf_r+0xc6>
 8013ecc:	9b03      	ldr	r3, [sp, #12]
 8013ece:	1d19      	adds	r1, r3, #4
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	9103      	str	r1, [sp, #12]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	bfbb      	ittet	lt
 8013ed8:	425b      	neglt	r3, r3
 8013eda:	f042 0202 	orrlt.w	r2, r2, #2
 8013ede:	9307      	strge	r3, [sp, #28]
 8013ee0:	9307      	strlt	r3, [sp, #28]
 8013ee2:	bfb8      	it	lt
 8013ee4:	9204      	strlt	r2, [sp, #16]
 8013ee6:	7823      	ldrb	r3, [r4, #0]
 8013ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8013eea:	d10a      	bne.n	8013f02 <_vfiprintf_r+0x156>
 8013eec:	7863      	ldrb	r3, [r4, #1]
 8013eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ef0:	d132      	bne.n	8013f58 <_vfiprintf_r+0x1ac>
 8013ef2:	9b03      	ldr	r3, [sp, #12]
 8013ef4:	1d1a      	adds	r2, r3, #4
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	9203      	str	r2, [sp, #12]
 8013efa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013efe:	3402      	adds	r4, #2
 8013f00:	9305      	str	r3, [sp, #20]
 8013f02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013fd8 <_vfiprintf_r+0x22c>
 8013f06:	7821      	ldrb	r1, [r4, #0]
 8013f08:	2203      	movs	r2, #3
 8013f0a:	4650      	mov	r0, sl
 8013f0c:	f7ec f988 	bl	8000220 <memchr>
 8013f10:	b138      	cbz	r0, 8013f22 <_vfiprintf_r+0x176>
 8013f12:	9b04      	ldr	r3, [sp, #16]
 8013f14:	eba0 000a 	sub.w	r0, r0, sl
 8013f18:	2240      	movs	r2, #64	@ 0x40
 8013f1a:	4082      	lsls	r2, r0
 8013f1c:	4313      	orrs	r3, r2
 8013f1e:	3401      	adds	r4, #1
 8013f20:	9304      	str	r3, [sp, #16]
 8013f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f26:	4829      	ldr	r0, [pc, #164]	@ (8013fcc <_vfiprintf_r+0x220>)
 8013f28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f2c:	2206      	movs	r2, #6
 8013f2e:	f7ec f977 	bl	8000220 <memchr>
 8013f32:	2800      	cmp	r0, #0
 8013f34:	d03f      	beq.n	8013fb6 <_vfiprintf_r+0x20a>
 8013f36:	4b26      	ldr	r3, [pc, #152]	@ (8013fd0 <_vfiprintf_r+0x224>)
 8013f38:	bb1b      	cbnz	r3, 8013f82 <_vfiprintf_r+0x1d6>
 8013f3a:	9b03      	ldr	r3, [sp, #12]
 8013f3c:	3307      	adds	r3, #7
 8013f3e:	f023 0307 	bic.w	r3, r3, #7
 8013f42:	3308      	adds	r3, #8
 8013f44:	9303      	str	r3, [sp, #12]
 8013f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f48:	443b      	add	r3, r7
 8013f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f4c:	e76a      	b.n	8013e24 <_vfiprintf_r+0x78>
 8013f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f52:	460c      	mov	r4, r1
 8013f54:	2001      	movs	r0, #1
 8013f56:	e7a8      	b.n	8013eaa <_vfiprintf_r+0xfe>
 8013f58:	2300      	movs	r3, #0
 8013f5a:	3401      	adds	r4, #1
 8013f5c:	9305      	str	r3, [sp, #20]
 8013f5e:	4619      	mov	r1, r3
 8013f60:	f04f 0c0a 	mov.w	ip, #10
 8013f64:	4620      	mov	r0, r4
 8013f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f6a:	3a30      	subs	r2, #48	@ 0x30
 8013f6c:	2a09      	cmp	r2, #9
 8013f6e:	d903      	bls.n	8013f78 <_vfiprintf_r+0x1cc>
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d0c6      	beq.n	8013f02 <_vfiprintf_r+0x156>
 8013f74:	9105      	str	r1, [sp, #20]
 8013f76:	e7c4      	b.n	8013f02 <_vfiprintf_r+0x156>
 8013f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f7c:	4604      	mov	r4, r0
 8013f7e:	2301      	movs	r3, #1
 8013f80:	e7f0      	b.n	8013f64 <_vfiprintf_r+0x1b8>
 8013f82:	ab03      	add	r3, sp, #12
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	462a      	mov	r2, r5
 8013f88:	4b12      	ldr	r3, [pc, #72]	@ (8013fd4 <_vfiprintf_r+0x228>)
 8013f8a:	a904      	add	r1, sp, #16
 8013f8c:	4630      	mov	r0, r6
 8013f8e:	f3af 8000 	nop.w
 8013f92:	4607      	mov	r7, r0
 8013f94:	1c78      	adds	r0, r7, #1
 8013f96:	d1d6      	bne.n	8013f46 <_vfiprintf_r+0x19a>
 8013f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f9a:	07d9      	lsls	r1, r3, #31
 8013f9c:	d405      	bmi.n	8013faa <_vfiprintf_r+0x1fe>
 8013f9e:	89ab      	ldrh	r3, [r5, #12]
 8013fa0:	059a      	lsls	r2, r3, #22
 8013fa2:	d402      	bmi.n	8013faa <_vfiprintf_r+0x1fe>
 8013fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013fa6:	f7ff fda9 	bl	8013afc <__retarget_lock_release_recursive>
 8013faa:	89ab      	ldrh	r3, [r5, #12]
 8013fac:	065b      	lsls	r3, r3, #25
 8013fae:	f53f af1f 	bmi.w	8013df0 <_vfiprintf_r+0x44>
 8013fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fb4:	e71e      	b.n	8013df4 <_vfiprintf_r+0x48>
 8013fb6:	ab03      	add	r3, sp, #12
 8013fb8:	9300      	str	r3, [sp, #0]
 8013fba:	462a      	mov	r2, r5
 8013fbc:	4b05      	ldr	r3, [pc, #20]	@ (8013fd4 <_vfiprintf_r+0x228>)
 8013fbe:	a904      	add	r1, sp, #16
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	f000 f879 	bl	80140b8 <_printf_i>
 8013fc6:	e7e4      	b.n	8013f92 <_vfiprintf_r+0x1e6>
 8013fc8:	0801769f 	.word	0x0801769f
 8013fcc:	080176a9 	.word	0x080176a9
 8013fd0:	00000000 	.word	0x00000000
 8013fd4:	08013d87 	.word	0x08013d87
 8013fd8:	080176a5 	.word	0x080176a5

08013fdc <_printf_common>:
 8013fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fe0:	4616      	mov	r6, r2
 8013fe2:	4698      	mov	r8, r3
 8013fe4:	688a      	ldr	r2, [r1, #8]
 8013fe6:	690b      	ldr	r3, [r1, #16]
 8013fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013fec:	4293      	cmp	r3, r2
 8013fee:	bfb8      	it	lt
 8013ff0:	4613      	movlt	r3, r2
 8013ff2:	6033      	str	r3, [r6, #0]
 8013ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013ff8:	4607      	mov	r7, r0
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	b10a      	cbz	r2, 8014002 <_printf_common+0x26>
 8013ffe:	3301      	adds	r3, #1
 8014000:	6033      	str	r3, [r6, #0]
 8014002:	6823      	ldr	r3, [r4, #0]
 8014004:	0699      	lsls	r1, r3, #26
 8014006:	bf42      	ittt	mi
 8014008:	6833      	ldrmi	r3, [r6, #0]
 801400a:	3302      	addmi	r3, #2
 801400c:	6033      	strmi	r3, [r6, #0]
 801400e:	6825      	ldr	r5, [r4, #0]
 8014010:	f015 0506 	ands.w	r5, r5, #6
 8014014:	d106      	bne.n	8014024 <_printf_common+0x48>
 8014016:	f104 0a19 	add.w	sl, r4, #25
 801401a:	68e3      	ldr	r3, [r4, #12]
 801401c:	6832      	ldr	r2, [r6, #0]
 801401e:	1a9b      	subs	r3, r3, r2
 8014020:	42ab      	cmp	r3, r5
 8014022:	dc26      	bgt.n	8014072 <_printf_common+0x96>
 8014024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014028:	6822      	ldr	r2, [r4, #0]
 801402a:	3b00      	subs	r3, #0
 801402c:	bf18      	it	ne
 801402e:	2301      	movne	r3, #1
 8014030:	0692      	lsls	r2, r2, #26
 8014032:	d42b      	bmi.n	801408c <_printf_common+0xb0>
 8014034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014038:	4641      	mov	r1, r8
 801403a:	4638      	mov	r0, r7
 801403c:	47c8      	blx	r9
 801403e:	3001      	adds	r0, #1
 8014040:	d01e      	beq.n	8014080 <_printf_common+0xa4>
 8014042:	6823      	ldr	r3, [r4, #0]
 8014044:	6922      	ldr	r2, [r4, #16]
 8014046:	f003 0306 	and.w	r3, r3, #6
 801404a:	2b04      	cmp	r3, #4
 801404c:	bf02      	ittt	eq
 801404e:	68e5      	ldreq	r5, [r4, #12]
 8014050:	6833      	ldreq	r3, [r6, #0]
 8014052:	1aed      	subeq	r5, r5, r3
 8014054:	68a3      	ldr	r3, [r4, #8]
 8014056:	bf0c      	ite	eq
 8014058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801405c:	2500      	movne	r5, #0
 801405e:	4293      	cmp	r3, r2
 8014060:	bfc4      	itt	gt
 8014062:	1a9b      	subgt	r3, r3, r2
 8014064:	18ed      	addgt	r5, r5, r3
 8014066:	2600      	movs	r6, #0
 8014068:	341a      	adds	r4, #26
 801406a:	42b5      	cmp	r5, r6
 801406c:	d11a      	bne.n	80140a4 <_printf_common+0xc8>
 801406e:	2000      	movs	r0, #0
 8014070:	e008      	b.n	8014084 <_printf_common+0xa8>
 8014072:	2301      	movs	r3, #1
 8014074:	4652      	mov	r2, sl
 8014076:	4641      	mov	r1, r8
 8014078:	4638      	mov	r0, r7
 801407a:	47c8      	blx	r9
 801407c:	3001      	adds	r0, #1
 801407e:	d103      	bne.n	8014088 <_printf_common+0xac>
 8014080:	f04f 30ff 	mov.w	r0, #4294967295
 8014084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014088:	3501      	adds	r5, #1
 801408a:	e7c6      	b.n	801401a <_printf_common+0x3e>
 801408c:	18e1      	adds	r1, r4, r3
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	2030      	movs	r0, #48	@ 0x30
 8014092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014096:	4422      	add	r2, r4
 8014098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801409c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80140a0:	3302      	adds	r3, #2
 80140a2:	e7c7      	b.n	8014034 <_printf_common+0x58>
 80140a4:	2301      	movs	r3, #1
 80140a6:	4622      	mov	r2, r4
 80140a8:	4641      	mov	r1, r8
 80140aa:	4638      	mov	r0, r7
 80140ac:	47c8      	blx	r9
 80140ae:	3001      	adds	r0, #1
 80140b0:	d0e6      	beq.n	8014080 <_printf_common+0xa4>
 80140b2:	3601      	adds	r6, #1
 80140b4:	e7d9      	b.n	801406a <_printf_common+0x8e>
	...

080140b8 <_printf_i>:
 80140b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140bc:	7e0f      	ldrb	r7, [r1, #24]
 80140be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80140c0:	2f78      	cmp	r7, #120	@ 0x78
 80140c2:	4691      	mov	r9, r2
 80140c4:	4680      	mov	r8, r0
 80140c6:	460c      	mov	r4, r1
 80140c8:	469a      	mov	sl, r3
 80140ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80140ce:	d807      	bhi.n	80140e0 <_printf_i+0x28>
 80140d0:	2f62      	cmp	r7, #98	@ 0x62
 80140d2:	d80a      	bhi.n	80140ea <_printf_i+0x32>
 80140d4:	2f00      	cmp	r7, #0
 80140d6:	f000 80d2 	beq.w	801427e <_printf_i+0x1c6>
 80140da:	2f58      	cmp	r7, #88	@ 0x58
 80140dc:	f000 80b9 	beq.w	8014252 <_printf_i+0x19a>
 80140e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80140e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80140e8:	e03a      	b.n	8014160 <_printf_i+0xa8>
 80140ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80140ee:	2b15      	cmp	r3, #21
 80140f0:	d8f6      	bhi.n	80140e0 <_printf_i+0x28>
 80140f2:	a101      	add	r1, pc, #4	@ (adr r1, 80140f8 <_printf_i+0x40>)
 80140f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80140f8:	08014151 	.word	0x08014151
 80140fc:	08014165 	.word	0x08014165
 8014100:	080140e1 	.word	0x080140e1
 8014104:	080140e1 	.word	0x080140e1
 8014108:	080140e1 	.word	0x080140e1
 801410c:	080140e1 	.word	0x080140e1
 8014110:	08014165 	.word	0x08014165
 8014114:	080140e1 	.word	0x080140e1
 8014118:	080140e1 	.word	0x080140e1
 801411c:	080140e1 	.word	0x080140e1
 8014120:	080140e1 	.word	0x080140e1
 8014124:	08014265 	.word	0x08014265
 8014128:	0801418f 	.word	0x0801418f
 801412c:	0801421f 	.word	0x0801421f
 8014130:	080140e1 	.word	0x080140e1
 8014134:	080140e1 	.word	0x080140e1
 8014138:	08014287 	.word	0x08014287
 801413c:	080140e1 	.word	0x080140e1
 8014140:	0801418f 	.word	0x0801418f
 8014144:	080140e1 	.word	0x080140e1
 8014148:	080140e1 	.word	0x080140e1
 801414c:	08014227 	.word	0x08014227
 8014150:	6833      	ldr	r3, [r6, #0]
 8014152:	1d1a      	adds	r2, r3, #4
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	6032      	str	r2, [r6, #0]
 8014158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801415c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014160:	2301      	movs	r3, #1
 8014162:	e09d      	b.n	80142a0 <_printf_i+0x1e8>
 8014164:	6833      	ldr	r3, [r6, #0]
 8014166:	6820      	ldr	r0, [r4, #0]
 8014168:	1d19      	adds	r1, r3, #4
 801416a:	6031      	str	r1, [r6, #0]
 801416c:	0606      	lsls	r6, r0, #24
 801416e:	d501      	bpl.n	8014174 <_printf_i+0xbc>
 8014170:	681d      	ldr	r5, [r3, #0]
 8014172:	e003      	b.n	801417c <_printf_i+0xc4>
 8014174:	0645      	lsls	r5, r0, #25
 8014176:	d5fb      	bpl.n	8014170 <_printf_i+0xb8>
 8014178:	f9b3 5000 	ldrsh.w	r5, [r3]
 801417c:	2d00      	cmp	r5, #0
 801417e:	da03      	bge.n	8014188 <_printf_i+0xd0>
 8014180:	232d      	movs	r3, #45	@ 0x2d
 8014182:	426d      	negs	r5, r5
 8014184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014188:	4859      	ldr	r0, [pc, #356]	@ (80142f0 <_printf_i+0x238>)
 801418a:	230a      	movs	r3, #10
 801418c:	e011      	b.n	80141b2 <_printf_i+0xfa>
 801418e:	6821      	ldr	r1, [r4, #0]
 8014190:	6833      	ldr	r3, [r6, #0]
 8014192:	0608      	lsls	r0, r1, #24
 8014194:	f853 5b04 	ldr.w	r5, [r3], #4
 8014198:	d402      	bmi.n	80141a0 <_printf_i+0xe8>
 801419a:	0649      	lsls	r1, r1, #25
 801419c:	bf48      	it	mi
 801419e:	b2ad      	uxthmi	r5, r5
 80141a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80141a2:	4853      	ldr	r0, [pc, #332]	@ (80142f0 <_printf_i+0x238>)
 80141a4:	6033      	str	r3, [r6, #0]
 80141a6:	bf14      	ite	ne
 80141a8:	230a      	movne	r3, #10
 80141aa:	2308      	moveq	r3, #8
 80141ac:	2100      	movs	r1, #0
 80141ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80141b2:	6866      	ldr	r6, [r4, #4]
 80141b4:	60a6      	str	r6, [r4, #8]
 80141b6:	2e00      	cmp	r6, #0
 80141b8:	bfa2      	ittt	ge
 80141ba:	6821      	ldrge	r1, [r4, #0]
 80141bc:	f021 0104 	bicge.w	r1, r1, #4
 80141c0:	6021      	strge	r1, [r4, #0]
 80141c2:	b90d      	cbnz	r5, 80141c8 <_printf_i+0x110>
 80141c4:	2e00      	cmp	r6, #0
 80141c6:	d04b      	beq.n	8014260 <_printf_i+0x1a8>
 80141c8:	4616      	mov	r6, r2
 80141ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80141ce:	fb03 5711 	mls	r7, r3, r1, r5
 80141d2:	5dc7      	ldrb	r7, [r0, r7]
 80141d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80141d8:	462f      	mov	r7, r5
 80141da:	42bb      	cmp	r3, r7
 80141dc:	460d      	mov	r5, r1
 80141de:	d9f4      	bls.n	80141ca <_printf_i+0x112>
 80141e0:	2b08      	cmp	r3, #8
 80141e2:	d10b      	bne.n	80141fc <_printf_i+0x144>
 80141e4:	6823      	ldr	r3, [r4, #0]
 80141e6:	07df      	lsls	r7, r3, #31
 80141e8:	d508      	bpl.n	80141fc <_printf_i+0x144>
 80141ea:	6923      	ldr	r3, [r4, #16]
 80141ec:	6861      	ldr	r1, [r4, #4]
 80141ee:	4299      	cmp	r1, r3
 80141f0:	bfde      	ittt	le
 80141f2:	2330      	movle	r3, #48	@ 0x30
 80141f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80141f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80141fc:	1b92      	subs	r2, r2, r6
 80141fe:	6122      	str	r2, [r4, #16]
 8014200:	f8cd a000 	str.w	sl, [sp]
 8014204:	464b      	mov	r3, r9
 8014206:	aa03      	add	r2, sp, #12
 8014208:	4621      	mov	r1, r4
 801420a:	4640      	mov	r0, r8
 801420c:	f7ff fee6 	bl	8013fdc <_printf_common>
 8014210:	3001      	adds	r0, #1
 8014212:	d14a      	bne.n	80142aa <_printf_i+0x1f2>
 8014214:	f04f 30ff 	mov.w	r0, #4294967295
 8014218:	b004      	add	sp, #16
 801421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801421e:	6823      	ldr	r3, [r4, #0]
 8014220:	f043 0320 	orr.w	r3, r3, #32
 8014224:	6023      	str	r3, [r4, #0]
 8014226:	4833      	ldr	r0, [pc, #204]	@ (80142f4 <_printf_i+0x23c>)
 8014228:	2778      	movs	r7, #120	@ 0x78
 801422a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	6831      	ldr	r1, [r6, #0]
 8014232:	061f      	lsls	r7, r3, #24
 8014234:	f851 5b04 	ldr.w	r5, [r1], #4
 8014238:	d402      	bmi.n	8014240 <_printf_i+0x188>
 801423a:	065f      	lsls	r7, r3, #25
 801423c:	bf48      	it	mi
 801423e:	b2ad      	uxthmi	r5, r5
 8014240:	6031      	str	r1, [r6, #0]
 8014242:	07d9      	lsls	r1, r3, #31
 8014244:	bf44      	itt	mi
 8014246:	f043 0320 	orrmi.w	r3, r3, #32
 801424a:	6023      	strmi	r3, [r4, #0]
 801424c:	b11d      	cbz	r5, 8014256 <_printf_i+0x19e>
 801424e:	2310      	movs	r3, #16
 8014250:	e7ac      	b.n	80141ac <_printf_i+0xf4>
 8014252:	4827      	ldr	r0, [pc, #156]	@ (80142f0 <_printf_i+0x238>)
 8014254:	e7e9      	b.n	801422a <_printf_i+0x172>
 8014256:	6823      	ldr	r3, [r4, #0]
 8014258:	f023 0320 	bic.w	r3, r3, #32
 801425c:	6023      	str	r3, [r4, #0]
 801425e:	e7f6      	b.n	801424e <_printf_i+0x196>
 8014260:	4616      	mov	r6, r2
 8014262:	e7bd      	b.n	80141e0 <_printf_i+0x128>
 8014264:	6833      	ldr	r3, [r6, #0]
 8014266:	6825      	ldr	r5, [r4, #0]
 8014268:	6961      	ldr	r1, [r4, #20]
 801426a:	1d18      	adds	r0, r3, #4
 801426c:	6030      	str	r0, [r6, #0]
 801426e:	062e      	lsls	r6, r5, #24
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	d501      	bpl.n	8014278 <_printf_i+0x1c0>
 8014274:	6019      	str	r1, [r3, #0]
 8014276:	e002      	b.n	801427e <_printf_i+0x1c6>
 8014278:	0668      	lsls	r0, r5, #25
 801427a:	d5fb      	bpl.n	8014274 <_printf_i+0x1bc>
 801427c:	8019      	strh	r1, [r3, #0]
 801427e:	2300      	movs	r3, #0
 8014280:	6123      	str	r3, [r4, #16]
 8014282:	4616      	mov	r6, r2
 8014284:	e7bc      	b.n	8014200 <_printf_i+0x148>
 8014286:	6833      	ldr	r3, [r6, #0]
 8014288:	1d1a      	adds	r2, r3, #4
 801428a:	6032      	str	r2, [r6, #0]
 801428c:	681e      	ldr	r6, [r3, #0]
 801428e:	6862      	ldr	r2, [r4, #4]
 8014290:	2100      	movs	r1, #0
 8014292:	4630      	mov	r0, r6
 8014294:	f7eb ffc4 	bl	8000220 <memchr>
 8014298:	b108      	cbz	r0, 801429e <_printf_i+0x1e6>
 801429a:	1b80      	subs	r0, r0, r6
 801429c:	6060      	str	r0, [r4, #4]
 801429e:	6863      	ldr	r3, [r4, #4]
 80142a0:	6123      	str	r3, [r4, #16]
 80142a2:	2300      	movs	r3, #0
 80142a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80142a8:	e7aa      	b.n	8014200 <_printf_i+0x148>
 80142aa:	6923      	ldr	r3, [r4, #16]
 80142ac:	4632      	mov	r2, r6
 80142ae:	4649      	mov	r1, r9
 80142b0:	4640      	mov	r0, r8
 80142b2:	47d0      	blx	sl
 80142b4:	3001      	adds	r0, #1
 80142b6:	d0ad      	beq.n	8014214 <_printf_i+0x15c>
 80142b8:	6823      	ldr	r3, [r4, #0]
 80142ba:	079b      	lsls	r3, r3, #30
 80142bc:	d413      	bmi.n	80142e6 <_printf_i+0x22e>
 80142be:	68e0      	ldr	r0, [r4, #12]
 80142c0:	9b03      	ldr	r3, [sp, #12]
 80142c2:	4298      	cmp	r0, r3
 80142c4:	bfb8      	it	lt
 80142c6:	4618      	movlt	r0, r3
 80142c8:	e7a6      	b.n	8014218 <_printf_i+0x160>
 80142ca:	2301      	movs	r3, #1
 80142cc:	4632      	mov	r2, r6
 80142ce:	4649      	mov	r1, r9
 80142d0:	4640      	mov	r0, r8
 80142d2:	47d0      	blx	sl
 80142d4:	3001      	adds	r0, #1
 80142d6:	d09d      	beq.n	8014214 <_printf_i+0x15c>
 80142d8:	3501      	adds	r5, #1
 80142da:	68e3      	ldr	r3, [r4, #12]
 80142dc:	9903      	ldr	r1, [sp, #12]
 80142de:	1a5b      	subs	r3, r3, r1
 80142e0:	42ab      	cmp	r3, r5
 80142e2:	dcf2      	bgt.n	80142ca <_printf_i+0x212>
 80142e4:	e7eb      	b.n	80142be <_printf_i+0x206>
 80142e6:	2500      	movs	r5, #0
 80142e8:	f104 0619 	add.w	r6, r4, #25
 80142ec:	e7f5      	b.n	80142da <_printf_i+0x222>
 80142ee:	bf00      	nop
 80142f0:	080176b0 	.word	0x080176b0
 80142f4:	080176c1 	.word	0x080176c1

080142f8 <__sflush_r>:
 80142f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80142fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014300:	0716      	lsls	r6, r2, #28
 8014302:	4605      	mov	r5, r0
 8014304:	460c      	mov	r4, r1
 8014306:	d454      	bmi.n	80143b2 <__sflush_r+0xba>
 8014308:	684b      	ldr	r3, [r1, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	dc02      	bgt.n	8014314 <__sflush_r+0x1c>
 801430e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014310:	2b00      	cmp	r3, #0
 8014312:	dd48      	ble.n	80143a6 <__sflush_r+0xae>
 8014314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014316:	2e00      	cmp	r6, #0
 8014318:	d045      	beq.n	80143a6 <__sflush_r+0xae>
 801431a:	2300      	movs	r3, #0
 801431c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014320:	682f      	ldr	r7, [r5, #0]
 8014322:	6a21      	ldr	r1, [r4, #32]
 8014324:	602b      	str	r3, [r5, #0]
 8014326:	d030      	beq.n	801438a <__sflush_r+0x92>
 8014328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801432a:	89a3      	ldrh	r3, [r4, #12]
 801432c:	0759      	lsls	r1, r3, #29
 801432e:	d505      	bpl.n	801433c <__sflush_r+0x44>
 8014330:	6863      	ldr	r3, [r4, #4]
 8014332:	1ad2      	subs	r2, r2, r3
 8014334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014336:	b10b      	cbz	r3, 801433c <__sflush_r+0x44>
 8014338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801433a:	1ad2      	subs	r2, r2, r3
 801433c:	2300      	movs	r3, #0
 801433e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014340:	6a21      	ldr	r1, [r4, #32]
 8014342:	4628      	mov	r0, r5
 8014344:	47b0      	blx	r6
 8014346:	1c43      	adds	r3, r0, #1
 8014348:	89a3      	ldrh	r3, [r4, #12]
 801434a:	d106      	bne.n	801435a <__sflush_r+0x62>
 801434c:	6829      	ldr	r1, [r5, #0]
 801434e:	291d      	cmp	r1, #29
 8014350:	d82b      	bhi.n	80143aa <__sflush_r+0xb2>
 8014352:	4a2a      	ldr	r2, [pc, #168]	@ (80143fc <__sflush_r+0x104>)
 8014354:	410a      	asrs	r2, r1
 8014356:	07d6      	lsls	r6, r2, #31
 8014358:	d427      	bmi.n	80143aa <__sflush_r+0xb2>
 801435a:	2200      	movs	r2, #0
 801435c:	6062      	str	r2, [r4, #4]
 801435e:	04d9      	lsls	r1, r3, #19
 8014360:	6922      	ldr	r2, [r4, #16]
 8014362:	6022      	str	r2, [r4, #0]
 8014364:	d504      	bpl.n	8014370 <__sflush_r+0x78>
 8014366:	1c42      	adds	r2, r0, #1
 8014368:	d101      	bne.n	801436e <__sflush_r+0x76>
 801436a:	682b      	ldr	r3, [r5, #0]
 801436c:	b903      	cbnz	r3, 8014370 <__sflush_r+0x78>
 801436e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014372:	602f      	str	r7, [r5, #0]
 8014374:	b1b9      	cbz	r1, 80143a6 <__sflush_r+0xae>
 8014376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801437a:	4299      	cmp	r1, r3
 801437c:	d002      	beq.n	8014384 <__sflush_r+0x8c>
 801437e:	4628      	mov	r0, r5
 8014380:	f7ff fbea 	bl	8013b58 <_free_r>
 8014384:	2300      	movs	r3, #0
 8014386:	6363      	str	r3, [r4, #52]	@ 0x34
 8014388:	e00d      	b.n	80143a6 <__sflush_r+0xae>
 801438a:	2301      	movs	r3, #1
 801438c:	4628      	mov	r0, r5
 801438e:	47b0      	blx	r6
 8014390:	4602      	mov	r2, r0
 8014392:	1c50      	adds	r0, r2, #1
 8014394:	d1c9      	bne.n	801432a <__sflush_r+0x32>
 8014396:	682b      	ldr	r3, [r5, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d0c6      	beq.n	801432a <__sflush_r+0x32>
 801439c:	2b1d      	cmp	r3, #29
 801439e:	d001      	beq.n	80143a4 <__sflush_r+0xac>
 80143a0:	2b16      	cmp	r3, #22
 80143a2:	d11e      	bne.n	80143e2 <__sflush_r+0xea>
 80143a4:	602f      	str	r7, [r5, #0]
 80143a6:	2000      	movs	r0, #0
 80143a8:	e022      	b.n	80143f0 <__sflush_r+0xf8>
 80143aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143ae:	b21b      	sxth	r3, r3
 80143b0:	e01b      	b.n	80143ea <__sflush_r+0xf2>
 80143b2:	690f      	ldr	r7, [r1, #16]
 80143b4:	2f00      	cmp	r7, #0
 80143b6:	d0f6      	beq.n	80143a6 <__sflush_r+0xae>
 80143b8:	0793      	lsls	r3, r2, #30
 80143ba:	680e      	ldr	r6, [r1, #0]
 80143bc:	bf08      	it	eq
 80143be:	694b      	ldreq	r3, [r1, #20]
 80143c0:	600f      	str	r7, [r1, #0]
 80143c2:	bf18      	it	ne
 80143c4:	2300      	movne	r3, #0
 80143c6:	eba6 0807 	sub.w	r8, r6, r7
 80143ca:	608b      	str	r3, [r1, #8]
 80143cc:	f1b8 0f00 	cmp.w	r8, #0
 80143d0:	dde9      	ble.n	80143a6 <__sflush_r+0xae>
 80143d2:	6a21      	ldr	r1, [r4, #32]
 80143d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80143d6:	4643      	mov	r3, r8
 80143d8:	463a      	mov	r2, r7
 80143da:	4628      	mov	r0, r5
 80143dc:	47b0      	blx	r6
 80143de:	2800      	cmp	r0, #0
 80143e0:	dc08      	bgt.n	80143f4 <__sflush_r+0xfc>
 80143e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143ea:	81a3      	strh	r3, [r4, #12]
 80143ec:	f04f 30ff 	mov.w	r0, #4294967295
 80143f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143f4:	4407      	add	r7, r0
 80143f6:	eba8 0800 	sub.w	r8, r8, r0
 80143fa:	e7e7      	b.n	80143cc <__sflush_r+0xd4>
 80143fc:	dfbffffe 	.word	0xdfbffffe

08014400 <_fflush_r>:
 8014400:	b538      	push	{r3, r4, r5, lr}
 8014402:	690b      	ldr	r3, [r1, #16]
 8014404:	4605      	mov	r5, r0
 8014406:	460c      	mov	r4, r1
 8014408:	b913      	cbnz	r3, 8014410 <_fflush_r+0x10>
 801440a:	2500      	movs	r5, #0
 801440c:	4628      	mov	r0, r5
 801440e:	bd38      	pop	{r3, r4, r5, pc}
 8014410:	b118      	cbz	r0, 801441a <_fflush_r+0x1a>
 8014412:	6a03      	ldr	r3, [r0, #32]
 8014414:	b90b      	cbnz	r3, 801441a <_fflush_r+0x1a>
 8014416:	f7ff f92f 	bl	8013678 <__sinit>
 801441a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d0f3      	beq.n	801440a <_fflush_r+0xa>
 8014422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014424:	07d0      	lsls	r0, r2, #31
 8014426:	d404      	bmi.n	8014432 <_fflush_r+0x32>
 8014428:	0599      	lsls	r1, r3, #22
 801442a:	d402      	bmi.n	8014432 <_fflush_r+0x32>
 801442c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801442e:	f7ff fb64 	bl	8013afa <__retarget_lock_acquire_recursive>
 8014432:	4628      	mov	r0, r5
 8014434:	4621      	mov	r1, r4
 8014436:	f7ff ff5f 	bl	80142f8 <__sflush_r>
 801443a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801443c:	07da      	lsls	r2, r3, #31
 801443e:	4605      	mov	r5, r0
 8014440:	d4e4      	bmi.n	801440c <_fflush_r+0xc>
 8014442:	89a3      	ldrh	r3, [r4, #12]
 8014444:	059b      	lsls	r3, r3, #22
 8014446:	d4e1      	bmi.n	801440c <_fflush_r+0xc>
 8014448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801444a:	f7ff fb57 	bl	8013afc <__retarget_lock_release_recursive>
 801444e:	e7dd      	b.n	801440c <_fflush_r+0xc>

08014450 <fiprintf>:
 8014450:	b40e      	push	{r1, r2, r3}
 8014452:	b503      	push	{r0, r1, lr}
 8014454:	4601      	mov	r1, r0
 8014456:	ab03      	add	r3, sp, #12
 8014458:	4805      	ldr	r0, [pc, #20]	@ (8014470 <fiprintf+0x20>)
 801445a:	f853 2b04 	ldr.w	r2, [r3], #4
 801445e:	6800      	ldr	r0, [r0, #0]
 8014460:	9301      	str	r3, [sp, #4]
 8014462:	f7ff fca3 	bl	8013dac <_vfiprintf_r>
 8014466:	b002      	add	sp, #8
 8014468:	f85d eb04 	ldr.w	lr, [sp], #4
 801446c:	b003      	add	sp, #12
 801446e:	4770      	bx	lr
 8014470:	20000038 	.word	0x20000038

08014474 <__swhatbuf_r>:
 8014474:	b570      	push	{r4, r5, r6, lr}
 8014476:	460c      	mov	r4, r1
 8014478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801447c:	2900      	cmp	r1, #0
 801447e:	b096      	sub	sp, #88	@ 0x58
 8014480:	4615      	mov	r5, r2
 8014482:	461e      	mov	r6, r3
 8014484:	da0d      	bge.n	80144a2 <__swhatbuf_r+0x2e>
 8014486:	89a3      	ldrh	r3, [r4, #12]
 8014488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801448c:	f04f 0100 	mov.w	r1, #0
 8014490:	bf14      	ite	ne
 8014492:	2340      	movne	r3, #64	@ 0x40
 8014494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014498:	2000      	movs	r0, #0
 801449a:	6031      	str	r1, [r6, #0]
 801449c:	602b      	str	r3, [r5, #0]
 801449e:	b016      	add	sp, #88	@ 0x58
 80144a0:	bd70      	pop	{r4, r5, r6, pc}
 80144a2:	466a      	mov	r2, sp
 80144a4:	f000 f848 	bl	8014538 <_fstat_r>
 80144a8:	2800      	cmp	r0, #0
 80144aa:	dbec      	blt.n	8014486 <__swhatbuf_r+0x12>
 80144ac:	9901      	ldr	r1, [sp, #4]
 80144ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80144b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80144b6:	4259      	negs	r1, r3
 80144b8:	4159      	adcs	r1, r3
 80144ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80144be:	e7eb      	b.n	8014498 <__swhatbuf_r+0x24>

080144c0 <__smakebuf_r>:
 80144c0:	898b      	ldrh	r3, [r1, #12]
 80144c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80144c4:	079d      	lsls	r5, r3, #30
 80144c6:	4606      	mov	r6, r0
 80144c8:	460c      	mov	r4, r1
 80144ca:	d507      	bpl.n	80144dc <__smakebuf_r+0x1c>
 80144cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80144d0:	6023      	str	r3, [r4, #0]
 80144d2:	6123      	str	r3, [r4, #16]
 80144d4:	2301      	movs	r3, #1
 80144d6:	6163      	str	r3, [r4, #20]
 80144d8:	b003      	add	sp, #12
 80144da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144dc:	ab01      	add	r3, sp, #4
 80144de:	466a      	mov	r2, sp
 80144e0:	f7ff ffc8 	bl	8014474 <__swhatbuf_r>
 80144e4:	9f00      	ldr	r7, [sp, #0]
 80144e6:	4605      	mov	r5, r0
 80144e8:	4639      	mov	r1, r7
 80144ea:	4630      	mov	r0, r6
 80144ec:	f7ff fba8 	bl	8013c40 <_malloc_r>
 80144f0:	b948      	cbnz	r0, 8014506 <__smakebuf_r+0x46>
 80144f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144f6:	059a      	lsls	r2, r3, #22
 80144f8:	d4ee      	bmi.n	80144d8 <__smakebuf_r+0x18>
 80144fa:	f023 0303 	bic.w	r3, r3, #3
 80144fe:	f043 0302 	orr.w	r3, r3, #2
 8014502:	81a3      	strh	r3, [r4, #12]
 8014504:	e7e2      	b.n	80144cc <__smakebuf_r+0xc>
 8014506:	89a3      	ldrh	r3, [r4, #12]
 8014508:	6020      	str	r0, [r4, #0]
 801450a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801450e:	81a3      	strh	r3, [r4, #12]
 8014510:	9b01      	ldr	r3, [sp, #4]
 8014512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014516:	b15b      	cbz	r3, 8014530 <__smakebuf_r+0x70>
 8014518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801451c:	4630      	mov	r0, r6
 801451e:	f000 f81d 	bl	801455c <_isatty_r>
 8014522:	b128      	cbz	r0, 8014530 <__smakebuf_r+0x70>
 8014524:	89a3      	ldrh	r3, [r4, #12]
 8014526:	f023 0303 	bic.w	r3, r3, #3
 801452a:	f043 0301 	orr.w	r3, r3, #1
 801452e:	81a3      	strh	r3, [r4, #12]
 8014530:	89a3      	ldrh	r3, [r4, #12]
 8014532:	431d      	orrs	r5, r3
 8014534:	81a5      	strh	r5, [r4, #12]
 8014536:	e7cf      	b.n	80144d8 <__smakebuf_r+0x18>

08014538 <_fstat_r>:
 8014538:	b538      	push	{r3, r4, r5, lr}
 801453a:	4d07      	ldr	r5, [pc, #28]	@ (8014558 <_fstat_r+0x20>)
 801453c:	2300      	movs	r3, #0
 801453e:	4604      	mov	r4, r0
 8014540:	4608      	mov	r0, r1
 8014542:	4611      	mov	r1, r2
 8014544:	602b      	str	r3, [r5, #0]
 8014546:	f7ec ff28 	bl	800139a <_fstat>
 801454a:	1c43      	adds	r3, r0, #1
 801454c:	d102      	bne.n	8014554 <_fstat_r+0x1c>
 801454e:	682b      	ldr	r3, [r5, #0]
 8014550:	b103      	cbz	r3, 8014554 <_fstat_r+0x1c>
 8014552:	6023      	str	r3, [r4, #0]
 8014554:	bd38      	pop	{r3, r4, r5, pc}
 8014556:	bf00      	nop
 8014558:	20008d44 	.word	0x20008d44

0801455c <_isatty_r>:
 801455c:	b538      	push	{r3, r4, r5, lr}
 801455e:	4d06      	ldr	r5, [pc, #24]	@ (8014578 <_isatty_r+0x1c>)
 8014560:	2300      	movs	r3, #0
 8014562:	4604      	mov	r4, r0
 8014564:	4608      	mov	r0, r1
 8014566:	602b      	str	r3, [r5, #0]
 8014568:	f7ec ff27 	bl	80013ba <_isatty>
 801456c:	1c43      	adds	r3, r0, #1
 801456e:	d102      	bne.n	8014576 <_isatty_r+0x1a>
 8014570:	682b      	ldr	r3, [r5, #0]
 8014572:	b103      	cbz	r3, 8014576 <_isatty_r+0x1a>
 8014574:	6023      	str	r3, [r4, #0]
 8014576:	bd38      	pop	{r3, r4, r5, pc}
 8014578:	20008d44 	.word	0x20008d44

0801457c <_sbrk_r>:
 801457c:	b538      	push	{r3, r4, r5, lr}
 801457e:	4d06      	ldr	r5, [pc, #24]	@ (8014598 <_sbrk_r+0x1c>)
 8014580:	2300      	movs	r3, #0
 8014582:	4604      	mov	r4, r0
 8014584:	4608      	mov	r0, r1
 8014586:	602b      	str	r3, [r5, #0]
 8014588:	f7ec ff30 	bl	80013ec <_sbrk>
 801458c:	1c43      	adds	r3, r0, #1
 801458e:	d102      	bne.n	8014596 <_sbrk_r+0x1a>
 8014590:	682b      	ldr	r3, [r5, #0]
 8014592:	b103      	cbz	r3, 8014596 <_sbrk_r+0x1a>
 8014594:	6023      	str	r3, [r4, #0]
 8014596:	bd38      	pop	{r3, r4, r5, pc}
 8014598:	20008d44 	.word	0x20008d44

0801459c <abort>:
 801459c:	b508      	push	{r3, lr}
 801459e:	2006      	movs	r0, #6
 80145a0:	f000 f82c 	bl	80145fc <raise>
 80145a4:	2001      	movs	r0, #1
 80145a6:	f7ec fee1 	bl	800136c <_exit>

080145aa <_raise_r>:
 80145aa:	291f      	cmp	r1, #31
 80145ac:	b538      	push	{r3, r4, r5, lr}
 80145ae:	4605      	mov	r5, r0
 80145b0:	460c      	mov	r4, r1
 80145b2:	d904      	bls.n	80145be <_raise_r+0x14>
 80145b4:	2316      	movs	r3, #22
 80145b6:	6003      	str	r3, [r0, #0]
 80145b8:	f04f 30ff 	mov.w	r0, #4294967295
 80145bc:	bd38      	pop	{r3, r4, r5, pc}
 80145be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80145c0:	b112      	cbz	r2, 80145c8 <_raise_r+0x1e>
 80145c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80145c6:	b94b      	cbnz	r3, 80145dc <_raise_r+0x32>
 80145c8:	4628      	mov	r0, r5
 80145ca:	f000 f831 	bl	8014630 <_getpid_r>
 80145ce:	4622      	mov	r2, r4
 80145d0:	4601      	mov	r1, r0
 80145d2:	4628      	mov	r0, r5
 80145d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145d8:	f000 b818 	b.w	801460c <_kill_r>
 80145dc:	2b01      	cmp	r3, #1
 80145de:	d00a      	beq.n	80145f6 <_raise_r+0x4c>
 80145e0:	1c59      	adds	r1, r3, #1
 80145e2:	d103      	bne.n	80145ec <_raise_r+0x42>
 80145e4:	2316      	movs	r3, #22
 80145e6:	6003      	str	r3, [r0, #0]
 80145e8:	2001      	movs	r0, #1
 80145ea:	e7e7      	b.n	80145bc <_raise_r+0x12>
 80145ec:	2100      	movs	r1, #0
 80145ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80145f2:	4620      	mov	r0, r4
 80145f4:	4798      	blx	r3
 80145f6:	2000      	movs	r0, #0
 80145f8:	e7e0      	b.n	80145bc <_raise_r+0x12>
	...

080145fc <raise>:
 80145fc:	4b02      	ldr	r3, [pc, #8]	@ (8014608 <raise+0xc>)
 80145fe:	4601      	mov	r1, r0
 8014600:	6818      	ldr	r0, [r3, #0]
 8014602:	f7ff bfd2 	b.w	80145aa <_raise_r>
 8014606:	bf00      	nop
 8014608:	20000038 	.word	0x20000038

0801460c <_kill_r>:
 801460c:	b538      	push	{r3, r4, r5, lr}
 801460e:	4d07      	ldr	r5, [pc, #28]	@ (801462c <_kill_r+0x20>)
 8014610:	2300      	movs	r3, #0
 8014612:	4604      	mov	r4, r0
 8014614:	4608      	mov	r0, r1
 8014616:	4611      	mov	r1, r2
 8014618:	602b      	str	r3, [r5, #0]
 801461a:	f7ec fe95 	bl	8001348 <_kill>
 801461e:	1c43      	adds	r3, r0, #1
 8014620:	d102      	bne.n	8014628 <_kill_r+0x1c>
 8014622:	682b      	ldr	r3, [r5, #0]
 8014624:	b103      	cbz	r3, 8014628 <_kill_r+0x1c>
 8014626:	6023      	str	r3, [r4, #0]
 8014628:	bd38      	pop	{r3, r4, r5, pc}
 801462a:	bf00      	nop
 801462c:	20008d44 	.word	0x20008d44

08014630 <_getpid_r>:
 8014630:	f7ec be82 	b.w	8001338 <_getpid>

08014634 <_gettimeofday>:
 8014634:	4b02      	ldr	r3, [pc, #8]	@ (8014640 <_gettimeofday+0xc>)
 8014636:	2258      	movs	r2, #88	@ 0x58
 8014638:	601a      	str	r2, [r3, #0]
 801463a:	f04f 30ff 	mov.w	r0, #4294967295
 801463e:	4770      	bx	lr
 8014640:	20008d44 	.word	0x20008d44

08014644 <_init>:
 8014644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014646:	bf00      	nop
 8014648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801464a:	bc08      	pop	{r3}
 801464c:	469e      	mov	lr, r3
 801464e:	4770      	bx	lr

08014650 <_fini>:
 8014650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014652:	bf00      	nop
 8014654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014656:	bc08      	pop	{r3}
 8014658:	469e      	mov	lr, r3
 801465a:	4770      	bx	lr
