
LWIP_UDP_FProj_HaimOzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cc8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f90  08013e98  08013e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016e28  08016e28  000181c8  2**0
                  CONTENTS
  4 .ARM          00000008  08016e28  08016e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016e30  08016e30  000181c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016e30  08016e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016e34  08016e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08016e38  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08016ec0  00018088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08016f60  00018128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008b30  200001c8  08017000  000181c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008cf8  08017000  00018cf8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000181c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002cee2  00000000  00000000  000181f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000073a8  00000000  00000000  000450da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021f8  00000000  00000000  0004c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ae3  00000000  00000000  0004e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037869  00000000  00000000  00050163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a56c  00000000  00000000  000879cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011384b  00000000  00000000  000c1f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d5783  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000095c8  00000000  00000000  001d57c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  001ded90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013e80 	.word	0x08013e80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08013e80 	.word	0x08013e80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 f86e 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f818 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fa32 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 fa0a 	bl	80009d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f9aa 	bl	800091c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f9d8 	bl	800097c <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005cc:	f007 fae8 	bl	8007ba0 <MX_LWIP_Init>
  MX_UART5_Init();
 80005d0:	f000 f944 	bl	800085c <MX_UART5_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f972 	bl	80008bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d8:	f000 f870 	bl	80006bc <MX_ADC1_Init>
  MX_DAC_Init();
 80005dc:	f000 f8c0 	bl	8000760 <MX_DAC_Init>
  MX_TIM1_Init();
 80005e0:	f000 f8e8 	bl	80007b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rtg_main();
 80005e4:	f012 f80a 	bl	80125fc <rtg_main>
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x38>

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 fe1e 	bl	801323c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000610:	f004 f888 	bl	8004724 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a26      	ldr	r2, [pc, #152]	@ (80006b4 <SystemClock_Config+0xc8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000660:	2348      	movs	r3, #72	@ 0x48
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000668:	2303      	movs	r3, #3
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f004 f867 	bl	8004744 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 fa84 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f004 faf5 	bl	8004c8c <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a8:	f000 fa6e 	bl	8000b88 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	@ 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <MX_ADC1_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006fc:	4a17      	ldr	r2, [pc, #92]	@ (800075c <MX_ADC1_Init+0xa0>)
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000708:	2201      	movs	r2, #1
 800070a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000716:	2201      	movs	r2, #1
 8000718:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071a:	480e      	ldr	r0, [pc, #56]	@ (8000754 <MX_ADC1_Init+0x98>)
 800071c:	f001 f83c 	bl	8001798 <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fa2f 	bl	8000b88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072e:	2301      	movs	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_ADC1_Init+0x98>)
 800073c:	f001 fb38 	bl	8001db0 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000746:	f000 fa1f 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200001e4 	.word	0x200001e4
 8000758:	40012000 	.word	0x40012000
 800075c:	0f000001 	.word	0x0f000001

08000760 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_DAC_Init+0x4c>)
 8000770:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <MX_DAC_Init+0x50>)
 8000772:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_DAC_Init+0x4c>)
 8000776:	f001 fe86 	bl	8002486 <HAL_DAC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000780:	f000 fa02 	bl	8000b88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	@ (80007ac <MX_DAC_Init+0x4c>)
 8000794:	f001 fefd 	bl	8002592 <HAL_DAC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800079e:	f000 f9f3 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000022c 	.word	0x2000022c
 80007b0:	40007400 	.word	0x40007400

080007b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_TIM1_Init+0xa0>)
 80007d4:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <MX_TIM1_Init+0xa4>)
 80007d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <MX_TIM1_Init+0xa0>)
 80007da:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80007de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_TIM1_Init+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_TIM1_Init+0xa0>)
 80007e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_TIM1_Init+0xa0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_TIM1_Init+0xa0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_TIM1_Init+0xa0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000800:	4814      	ldr	r0, [pc, #80]	@ (8000854 <MX_TIM1_Init+0xa0>)
 8000802:	f005 f859 	bl	80058b8 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 f9bc 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_TIM1_Init+0xa0>)
 800081e:	f005 f8a3 	bl	8005968 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000828:	f000 f9ae 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_TIM1_Init+0xa0>)
 800083e:	f005 fa97 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000848:	f000 f99e 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000240 	.word	0x20000240
 8000858:	40010000 	.word	0x40010000

0800085c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_UART5_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	@ (80008b8 <MX_UART5_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_UART5_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_UART5_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_UART5_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_UART5_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_UART5_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_UART5_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_UART5_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_UART5_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_UART5_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_UART5_Init+0x58>)
 80008a0:	f005 faf4 	bl	8005e8c <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f96d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000028c 	.word	0x2000028c
 80008b8:	40005000 	.word	0x40005000

080008bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_USART2_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_USART2_UART_Init+0x58>)
 8000900:	f005 fac4 	bl	8005e8c <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f93d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000314 	.word	0x20000314
 8000918:	40004400 	.word	0x40004400

0800091c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <MX_USART3_UART_Init+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_USART3_UART_Init+0x58>)
 8000960:	f005 fa94 	bl	8005e8c <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f90d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000039c 	.word	0x2000039c
 8000978:	40004800 	.word	0x40004800

0800097c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000986:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2206      	movs	r2, #6
 800098c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2202      	movs	r2, #2
 8000992:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	2202      	movs	r2, #2
 800099e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	f003 fd67 	bl	8004492 <HAL_PCD_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f8dd 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200004e4 	.word	0x200004e4

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_DMA_Init+0x48>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <MX_DMA_Init+0x48>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <MX_DMA_Init+0x48>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	200b      	movs	r0, #11
 80009fc:	f001 fd0d 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f001 fd26 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2010      	movs	r0, #16
 8000a0c:	f001 fd05 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a10:	2010      	movs	r0, #16
 8000a12:	f001 fd1e 	bl	8002452 <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b4c      	ldr	r3, [pc, #304]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b49      	ldr	r3, [pc, #292]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a48      	ldr	r2, [pc, #288]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b46      	ldr	r3, [pc, #280]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b43      	ldr	r3, [pc, #268]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a42      	ldr	r2, [pc, #264]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b40      	ldr	r3, [pc, #256]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b3d      	ldr	r3, [pc, #244]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a3c      	ldr	r2, [pc, #240]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a36      	ldr	r2, [pc, #216]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a30      	ldr	r2, [pc, #192]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ad0:	482a      	ldr	r0, [pc, #168]	@ (8000b7c <MX_GPIO_Init+0x158>)
 8000ad2:	f003 fcc5 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2140      	movs	r1, #64	@ 0x40
 8000ada:	4829      	ldr	r0, [pc, #164]	@ (8000b80 <MX_GPIO_Init+0x15c>)
 8000adc:	f003 fcc0 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <MX_GPIO_Init+0x160>)
 8000af8:	f003 fb06 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000afc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4819      	ldr	r0, [pc, #100]	@ (8000b7c <MX_GPIO_Init+0x158>)
 8000b16:	f003 faf7 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b1a:	2340      	movs	r3, #64	@ 0x40
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <MX_GPIO_Init+0x15c>)
 8000b32:	f003 fae9 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_GPIO_Init+0x15c>)
 8000b4a:	f003 fadd 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b60:	2308      	movs	r3, #8
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <MX_GPIO_Init+0x160>)
 8000b6c:	f003 facc 	bl	8004108 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	bf00      	nop
 8000b72:	3730      	adds	r7, #48	@ 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40020800 	.word	0x40020800

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <HAL_ADC_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_ADC_MspInit+0x88>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <HAL_ADC_MspInit+0x88>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <HAL_ADC_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <HAL_ADC_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <HAL_ADC_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <HAL_ADC_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c32:	2303      	movs	r3, #3
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <HAL_ADC_MspInit+0x8c>)
 8000c42:	f003 fa61 	bl	8004108 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2012      	movs	r0, #18
 8000c4c:	f001 fbe5 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c50:	2012      	movs	r0, #18
 8000c52:	f001 fbfe 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40012000 	.word	0x40012000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	@ (8000cf0 <HAL_DAC_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12b      	bne.n	8000ce6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <HAL_DAC_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a18      	ldr	r2, [pc, #96]	@ (8000cf4 <HAL_DAC_MspInit+0x88>)
 8000c94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <HAL_DAC_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <HAL_DAC_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <HAL_DAC_MspInit+0x88>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <HAL_DAC_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <HAL_DAC_MspInit+0x8c>)
 8000cd2:	f003 fa19 	bl	8004108 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2036      	movs	r0, #54	@ 0x36
 8000cdc:	f001 fb9d 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce0:	2036      	movs	r0, #54	@ 0x36
 8000ce2:	f001 fbb6 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40007400 	.word	0x40007400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_TIM_Base_MspInit+0x38>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10b      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_TIM_Base_MspInit+0x3c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a09      	ldr	r2, [pc, #36]	@ (8000d38 <HAL_TIM_Base_MspInit+0x3c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <HAL_TIM_Base_MspInit+0x3c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0b0      	sub	sp, #192	@ 0xc0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d58:	2284      	movs	r2, #132	@ 0x84
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f012 fa6d 	bl	801323c <memset>
  if(huart->Instance==UART5)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4aad      	ldr	r2, [pc, #692]	@ (800101c <HAL_UART_MspInit+0x2e0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	f040 8097 	bne.w	8000e9c <HAL_UART_MspInit+0x160>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 f9ab 	bl	80050d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000d88:	f7ff fefe 	bl	8000b88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d8c:	4ba4      	ldr	r3, [pc, #656]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d90:	4aa3      	ldr	r2, [pc, #652]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d98:	4ba1      	ldr	r3, [pc, #644]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b9e      	ldr	r3, [pc, #632]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a9d      	ldr	r2, [pc, #628]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b9b      	ldr	r3, [pc, #620]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbc:	4b98      	ldr	r3, [pc, #608]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	4a97      	ldr	r2, [pc, #604]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc8:	4b95      	ldr	r3, [pc, #596]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dee:	2308      	movs	r3, #8
 8000df0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000df8:	4619      	mov	r1, r3
 8000dfa:	488a      	ldr	r0, [pc, #552]	@ (8001024 <HAL_UART_MspInit+0x2e8>)
 8000dfc:	f003 f984 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e00:	2304      	movs	r3, #4
 8000e02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e22:	4619      	mov	r1, r3
 8000e24:	4880      	ldr	r0, [pc, #512]	@ (8001028 <HAL_UART_MspInit+0x2ec>)
 8000e26:	f003 f96f 	bl	8004108 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000e2a:	4b80      	ldr	r3, [pc, #512]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e2c:	4a80      	ldr	r2, [pc, #512]	@ (8001030 <HAL_UART_MspInit+0x2f4>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000e30:	4b7e      	ldr	r3, [pc, #504]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e38:	4b7c      	ldr	r3, [pc, #496]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b79      	ldr	r3, [pc, #484]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4c:	4b77      	ldr	r3, [pc, #476]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e52:	4b76      	ldr	r3, [pc, #472]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000e58:	4b74      	ldr	r3, [pc, #464]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e5e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e60:	4b72      	ldr	r3, [pc, #456]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e66:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e68:	4b70      	ldr	r3, [pc, #448]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000e6e:	486f      	ldr	r0, [pc, #444]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e70:	f001 fbe8 	bl	8002644 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000e7a:	f7ff fe85 	bl	8000b88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a6a      	ldr	r2, [pc, #424]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e82:	675a      	str	r2, [r3, #116]	@ 0x74
 8000e84:	4a69      	ldr	r2, [pc, #420]	@ (800102c <HAL_UART_MspInit+0x2f0>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2035      	movs	r0, #53	@ 0x35
 8000e90:	f001 fac3 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e94:	2035      	movs	r0, #53	@ 0x35
 8000e96:	f001 fadc 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e9a:	e0ba      	b.n	8001012 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a64      	ldr	r2, [pc, #400]	@ (8001034 <HAL_UART_MspInit+0x2f8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d173      	bne.n	8000f8e <HAL_UART_MspInit+0x252>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 f910 	bl	80050d8 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x186>
      Error_Handler();
 8000ebe:	f7ff fe63 	bl	8000b88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	4b57      	ldr	r3, [pc, #348]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a56      	ldr	r2, [pc, #344]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b54      	ldr	r3, [pc, #336]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	4b51      	ldr	r3, [pc, #324]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a50      	ldr	r2, [pc, #320]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ef2:	2360      	movs	r3, #96	@ 0x60
 8000ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f14:	4619      	mov	r1, r3
 8000f16:	4844      	ldr	r0, [pc, #272]	@ (8001028 <HAL_UART_MspInit+0x2ec>)
 8000f18:	f003 f8f6 	bl	8004108 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f1c:	4b46      	ldr	r3, [pc, #280]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f1e:	4a47      	ldr	r2, [pc, #284]	@ (800103c <HAL_UART_MspInit+0x300>)
 8000f20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f2a:	4b43      	ldr	r3, [pc, #268]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b41      	ldr	r3, [pc, #260]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b40      	ldr	r3, [pc, #256]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f44:	4b3c      	ldr	r3, [pc, #240]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f52:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f60:	4835      	ldr	r0, [pc, #212]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f62:	f001 fb6f 	bl	8002644 <HAL_DMA_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8000f6c:	f7ff fe0c 	bl	8000b88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a31      	ldr	r2, [pc, #196]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f74:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f76:	4a30      	ldr	r2, [pc, #192]	@ (8001038 <HAL_UART_MspInit+0x2fc>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2026      	movs	r0, #38	@ 0x26
 8000f82:	f001 fa4a 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f86:	2026      	movs	r0, #38	@ 0x26
 8000f88:	f001 fa63 	bl	8002452 <HAL_NVIC_EnableIRQ>
}
 8000f8c:	e041      	b.n	8001012 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a2b      	ldr	r2, [pc, #172]	@ (8001040 <HAL_UART_MspInit+0x304>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d13c      	bne.n	8001012 <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 f896 	bl	80050d8 <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8000fb2:	f7ff fde9 	bl	8000b88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a13      	ldr	r2, [pc, #76]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <HAL_UART_MspInit+0x2e4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fe6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001000:	2307      	movs	r3, #7
 8001002:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001006:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <HAL_UART_MspInit+0x2ec>)
 800100e:	f003 f87b 	bl	8004108 <HAL_GPIO_Init>
}
 8001012:	bf00      	nop
 8001014:	37c0      	adds	r7, #192	@ 0xc0
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40005000 	.word	0x40005000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	20000424 	.word	0x20000424
 8001030:	40026010 	.word	0x40026010
 8001034:	40004400 	.word	0x40004400
 8001038:	20000484 	.word	0x20000484
 800103c:	40026088 	.word	0x40026088
 8001040:	40004800 	.word	0x40004800

08001044 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0ac      	sub	sp, #176	@ 0xb0
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	2284      	movs	r2, #132	@ 0x84
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f012 f8e9 	bl	801323c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001072:	d159      	bne.n	8001128 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001074:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001078:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	4618      	mov	r0, r3
 8001086:	f004 f827 	bl	80050d8 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001090:	f7ff fd7a 	bl	8000b88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	4a25      	ldr	r2, [pc, #148]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ac:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010c6:	230a      	movs	r3, #10
 80010c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4818      	ldr	r0, [pc, #96]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 80010d4:	f003 f818 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4810      	ldr	r0, [pc, #64]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 80010f4:	f003 f808 	bl	8004108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 80010fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 80010fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001102:	6353      	str	r3, [r2, #52]	@ 0x34
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 8001106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111a:	6453      	str	r3, [r2, #68]	@ 0x44
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	37b0      	adds	r7, #176	@ 0xb0
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f000 fabf 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <DMA1_Stream0_IRQHandler+0x10>)
 800119e:	f001 fb91 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000424 	.word	0x20000424

080011ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <DMA1_Stream5_IRQHandler+0x10>)
 80011b2:	f001 fb87 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000484 	.word	0x20000484

080011c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <ADC_IRQHandler+0x10>)
 80011c6:	f000 fcb8 	bl	8001b3a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001e4 	.word	0x200001e4

080011d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <USART2_IRQHandler+0x10>)
 80011da:	f005 f831 	bl	8006240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000314 	.word	0x20000314

080011e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <UART5_IRQHandler+0x10>)
 80011ee:	f005 f827 	bl	8006240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000028c 	.word	0x2000028c

080011fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <TIM6_DAC_IRQHandler+0x10>)
 8001202:	f001 f962 	bl	80024ca <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000022c 	.word	0x2000022c

08001210 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <ETH_IRQHandler+0x10>)
 8001216:	f002 f891 	bl	800333c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200053cc 	.word	0x200053cc

08001224 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <ETH_WKUP_IRQHandler+0x10>)
 800122a:	f002 f887 	bl	800333c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200053cc 	.word	0x200053cc

08001238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return 1;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <_kill>:

int _kill(int pid, int sig)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001252:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <_kill+0x20>)
 8001254:	2216      	movs	r2, #22
 8001256:	601a      	str	r2, [r3, #0]
  return -1;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	20008ce8 	.word	0x20008ce8

0800126c <_exit>:

void _exit (int status)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffe5 	bl	8001248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800127e:	bf00      	nop
 8001280:	e7fd      	b.n	800127e <_exit+0x12>

08001282 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012aa:	605a      	str	r2, [r3, #4]
  return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <_isatty>:

int _isatty(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d205      	bcs.n	8001328 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <_sbrk+0x6c>)
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	20050000 	.word	0x20050000
 800134c:	00000400 	.word	0x00000400
 8001350:	200009ec 	.word	0x200009ec
 8001354:	20008cf8 	.word	0x20008cf8
 8001358:	20008ce8 	.word	0x20008ce8

0800135c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <SystemInit+0x20>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <SystemInit+0x20>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001386:	490e      	ldr	r1, [pc, #56]	@ (80013c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001388:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800139c:	4c0b      	ldr	r4, [pc, #44]	@ (80013cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013aa:	f7ff ffd7 	bl	800135c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ae:	f011 ffa5 	bl	80132fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff f8fd 	bl	80005b0 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80013c4:	08016e38 	.word	0x08016e38
  ldr r2, =_sbss
 80013c8:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80013cc:	20008cf8 	.word	0x20008cf8

080013d0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <CAN1_RX0_IRQHandler>

080013d2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <LAN8742_RegisterBusIO+0x28>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <LAN8742_RegisterBusIO+0x28>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <LAN8742_RegisterBusIO+0x28>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e014      	b.n	800142a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d17c      	bne.n	8001550 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e01c      	b.n	80014aa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f107 0208 	add.w	r2, r7, #8
 8001478:	2112      	movs	r1, #18
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	4798      	blx	r3
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	da03      	bge.n	800148c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001484:	f06f 0304 	mvn.w	r3, #4
 8001488:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800148a:	e00b      	b.n	80014a4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d105      	bne.n	80014a4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
         break;
 80014a2:	e005      	b.n	80014b0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b1f      	cmp	r3, #31
 80014ae:	d9df      	bls.n	8001470 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b1f      	cmp	r3, #31
 80014b6:	d902      	bls.n	80014be <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80014b8:	f06f 0302 	mvn.w	r3, #2
 80014bc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d145      	bne.n	8001550 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6810      	ldr	r0, [r2, #0]
 80014cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014d0:	2100      	movs	r1, #0
 80014d2:	4798      	blx	r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db37      	blt.n	800154a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6810      	ldr	r0, [r2, #0]
 80014e2:	f107 0208 	add.w	r2, r7, #8
 80014e6:	2100      	movs	r1, #0
 80014e8:	4798      	blx	r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db28      	blt.n	8001542 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4798      	blx	r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014fa:	e01c      	b.n	8001536 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4798      	blx	r3
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800150e:	d80e      	bhi.n	800152e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6810      	ldr	r0, [r2, #0]
 8001518:	f107 0208 	add.w	r2, r7, #8
 800151c:	2100      	movs	r1, #0
 800151e:	4798      	blx	r3
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	da07      	bge.n	8001536 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001526:	f06f 0304 	mvn.w	r3, #4
 800152a:	613b      	str	r3, [r7, #16]
                 break;
 800152c:	e010      	b.n	8001550 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800152e:	f06f 0301 	mvn.w	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
               break;
 8001534:	e00c      	b.n	8001550 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1dd      	bne.n	80014fc <LAN8742_Init+0xc6>
 8001540:	e006      	b.n	8001550 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001542:	f06f 0304 	mvn.w	r3, #4
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	e002      	b.n	8001550 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800154a:	f06f 0303 	mvn.w	r3, #3
 800154e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d112      	bne.n	800157c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4798      	blx	r3
 800155c:	4603      	mov	r3, r0
 800155e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001560:	bf00      	nop
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4798      	blx	r3
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001574:	d9f5      	bls.n	8001562 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800157c:	693b      	ldr	r3, [r7, #16]
 }
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6810      	ldr	r0, [r2, #0]
 800159a:	f107 020c 	add.w	r2, r7, #12
 800159e:	2101      	movs	r1, #1
 80015a0:	4798      	blx	r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da02      	bge.n	80015ae <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015a8:	f06f 0304 	mvn.w	r3, #4
 80015ac:	e06e      	b.n	800168c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6810      	ldr	r0, [r2, #0]
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	2101      	movs	r1, #1
 80015bc:	4798      	blx	r3
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da02      	bge.n	80015ca <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015c4:	f06f 0304 	mvn.w	r3, #4
 80015c8:	e060      	b.n	800168c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80015d4:	2301      	movs	r3, #1
 80015d6:	e059      	b.n	800168c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6810      	ldr	r0, [r2, #0]
 80015e0:	f107 020c 	add.w	r2, r7, #12
 80015e4:	2100      	movs	r1, #0
 80015e6:	4798      	blx	r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da02      	bge.n	80015f4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015ee:	f06f 0304 	mvn.w	r3, #4
 80015f2:	e04b      	b.n	800168c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11b      	bne.n	8001636 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <LAN8742_GetLinkState+0x90>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001612:	2302      	movs	r3, #2
 8001614:	e03a      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001620:	2303      	movs	r3, #3
 8001622:	e033      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800162e:	2304      	movs	r3, #4
 8001630:	e02c      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001632:	2305      	movs	r3, #5
 8001634:	e02a      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6810      	ldr	r0, [r2, #0]
 800163e:	f107 020c 	add.w	r2, r7, #12
 8001642:	211f      	movs	r1, #31
 8001644:	4798      	blx	r3
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	da02      	bge.n	8001652 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800164c:	f06f 0304 	mvn.w	r3, #4
 8001650:	e01c      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800165c:	2306      	movs	r3, #6
 800165e:	e015      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 031c 	and.w	r3, r3, #28
 8001666:	2b18      	cmp	r3, #24
 8001668:	d101      	bne.n	800166e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800166a:	2302      	movs	r3, #2
 800166c:	e00e      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 031c 	and.w	r3, r3, #28
 8001674:	2b08      	cmp	r3, #8
 8001676:	d101      	bne.n	800167c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001678:	2303      	movs	r3, #3
 800167a:	e007      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 031c 	and.w	r3, r3, #28
 8001682:	2b14      	cmp	r3, #20
 8001684:	d101      	bne.n	800168a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001686:	2304      	movs	r3, #4
 8001688:	e000      	b.n	800168c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800168a:	2305      	movs	r3, #5
    }				
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 feb3 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f806 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fa76 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fecd 	bl	800246e <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 fe95 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	@ (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	200009f0 	.word	0x200009f0

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	@ (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200009f0 	.word	0x200009f0

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e031      	b.n	8001812 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fa10 	bl	8000bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d116      	bne.n	8001804 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_ADC_Init+0x84>)
 80017dc:	4013      	ands	r3, r2
 80017de:	f043 0202 	orr.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fc38 	bl	800205c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	@ 0x40
 8001802:	e001      	b.n	8001808 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	ffffeefd 	.word	0xffffeefd

08001820 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADC_Start+0x1a>
 8001836:	2302      	movs	r3, #2
 8001838:	e0ad      	b.n	8001996 <HAL_ADC_Start+0x176>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d018      	beq.n	8001882 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001860:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <HAL_ADC_Start+0x184>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a50      	ldr	r2, [pc, #320]	@ (80019a8 <HAL_ADC_Start+0x188>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9a      	lsrs	r2, r3, #18
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001874:	e002      	b.n	800187c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3b01      	subs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d175      	bne.n	800197c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001894:	4b45      	ldr	r3, [pc, #276]	@ (80019ac <HAL_ADC_Start+0x18c>)
 8001896:	4013      	ands	r3, r2
 8001898:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018ca:	d106      	bne.n	80018da <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	f023 0206 	bic.w	r2, r3, #6
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80018f2:	4b2f      	ldr	r3, [pc, #188]	@ (80019b0 <HAL_ADC_Start+0x190>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10f      	bne.n	800191e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d143      	bne.n	8001994 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	e03a      	b.n	8001994 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a24      	ldr	r2, [pc, #144]	@ (80019b4 <HAL_ADC_Start+0x194>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d10e      	bne.n	8001946 <HAL_ADC_Start+0x126>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d107      	bne.n	8001946 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001944:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001946:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <HAL_ADC_Start+0x190>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d120      	bne.n	8001994 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <HAL_ADC_Start+0x198>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d11b      	bne.n	8001994 <HAL_ADC_Start+0x174>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d114      	bne.n	8001994 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	e00b      	b.n	8001994 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f043 0210 	orr.w	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000000 	.word	0x20000000
 80019a8:	431bde83 	.word	0x431bde83
 80019ac:	fffff8fe 	.word	0xfffff8fe
 80019b0:	40012300 	.word	0x40012300
 80019b4:	40012000 	.word	0x40012000
 80019b8:	40012200 	.word	0x40012200

080019bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Stop+0x16>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e01f      	b.n	8001a12 <HAL_ADC_Stop+0x56>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <HAL_ADC_Stop+0x64>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	ffffeefe 	.word	0xffffeefe

08001a24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a40:	d113      	bne.n	8001a6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a50:	d10b      	bne.n	8001a6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f043 0220 	orr.w	r2, r3, #32
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e063      	b.n	8001b32 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a6a:	f7ff fe65 	bl	8001738 <HAL_GetTick>
 8001a6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a70:	e021      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d01d      	beq.n	8001ab6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x6c>
 8001a80:	f7ff fe5a 	bl	8001738 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d212      	bcs.n	8001ab6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f043 0204 	orr.w	r2, r3, #4
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e03d      	b.n	8001b32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d1d6      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0212 	mvn.w	r2, #18
 8001acc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d123      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d11f      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d111      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d049      	beq.n	8001c04 <HAL_ADC_IRQHandler+0xca>
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d046      	beq.n	8001c04 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d105      	bne.n	8001b8e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d12b      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d127      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001baa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d119      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0220 	bic.w	r2, r2, #32
 8001bce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8bd 	bl	8001d74 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0212 	mvn.w	r2, #18
 8001c02:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c12:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d057      	beq.n	8001cca <HAL_ADC_IRQHandler+0x190>
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d054      	beq.n	8001cca <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d139      	bne.n	8001cba <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d12b      	bne.n	8001cba <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d124      	bne.n	8001cba <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11d      	bne.n	8001cba <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d119      	bne.n	8001cba <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c94:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fac8 	bl	8002250 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 020c 	mvn.w	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d017      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x1d6>
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d014      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10d      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f841 	bl	8001d88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f06f 0201 	mvn.w	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d1e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d015      	beq.n	8001d52 <HAL_ADC_IRQHandler+0x218>
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d012      	beq.n	8001d52 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	f043 0202 	orr.w	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0220 	mvn.w	r2, #32
 8001d40:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f82a 	bl	8001d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0220 	mvn.w	r2, #32
 8001d50:	601a      	str	r2, [r3, #0]
  }
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1c>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e136      	b.n	800203a <HAL_ADC_ConfigChannel+0x28a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b09      	cmp	r3, #9
 8001dda:	d93a      	bls.n	8001e52 <HAL_ADC_ConfigChannel+0xa2>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001de4:	d035      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68d9      	ldr	r1, [r3, #12]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a8d      	ldr	r2, [pc, #564]	@ (8002048 <HAL_ADC_ConfigChannel+0x298>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68d9      	ldr	r1, [r3, #12]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	061a      	lsls	r2, r3, #24
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2a:	e035      	b.n	8001e98 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68d9      	ldr	r1, [r3, #12]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4403      	add	r3, r0
 8001e44:	3b1e      	subs	r3, #30
 8001e46:	409a      	lsls	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e50:	e022      	b.n	8001e98 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6919      	ldr	r1, [r3, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	2207      	movs	r2, #7
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	400a      	ands	r2, r1
 8001e74:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6919      	ldr	r1, [r3, #16]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4403      	add	r3, r0
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b06      	cmp	r3, #6
 8001e9e:	d824      	bhi.n	8001eea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b05      	subs	r3, #5
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b05      	subs	r3, #5
 8001edc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee8:	e04c      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d824      	bhi.n	8001f3c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b23      	subs	r3, #35	@ 0x23
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b23      	subs	r3, #35	@ 0x23
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f3a:	e023      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b41      	subs	r3, #65	@ 0x41
 8001f4e:	221f      	movs	r2, #31
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43da      	mvns	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b41      	subs	r3, #65	@ 0x41
 8001f78:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a30      	ldr	r2, [pc, #192]	@ (800204c <HAL_ADC_ConfigChannel+0x29c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1f4>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f96:	d105      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f98:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f9e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001fa2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	@ (800204c <HAL_ADC_ConfigChannel+0x29c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d10f      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x21e>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d10b      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a25      	ldr	r2, [pc, #148]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fbc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001fc0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fcc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <HAL_ADC_ConfigChannel+0x29c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d12b      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x280>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <HAL_ADC_ConfigChannel+0x298>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d003      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x23a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b11      	cmp	r3, #17
 8001fe8:	d122      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ff4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a15      	ldr	r2, [pc, #84]	@ (8002050 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ffc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002000:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <HAL_ADC_ConfigChannel+0x298>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d111      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <HAL_ADC_ConfigChannel+0x2a8>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0c9a      	lsrs	r2, r3, #18
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002022:	e002      	b.n	800202a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3b01      	subs	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f9      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	10000012 	.word	0x10000012
 800204c:	40012000 	.word	0x40012000
 8002050:	40012300 	.word	0x40012300
 8002054:	20000000 	.word	0x20000000
 8002058:	431bde83 	.word	0x431bde83

0800205c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002064:	4b78      	ldr	r3, [pc, #480]	@ (8002248 <ADC_Init+0x1ec>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a77      	ldr	r2, [pc, #476]	@ (8002248 <ADC_Init+0x1ec>)
 800206a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800206e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002070:	4b75      	ldr	r3, [pc, #468]	@ (8002248 <ADC_Init+0x1ec>)
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4973      	ldr	r1, [pc, #460]	@ (8002248 <ADC_Init+0x1ec>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800208c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	021a      	lsls	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	4a58      	ldr	r2, [pc, #352]	@ (800224c <ADC_Init+0x1f0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d022      	beq.n	8002136 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6899      	ldr	r1, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e00f      	b.n	8002156 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002154:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0202 	bic.w	r2, r2, #2
 8002164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	005a      	lsls	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002192:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	3b01      	subs	r3, #1
 80021b0:	035a      	lsls	r2, r3, #13
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	e007      	b.n	80021cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	051a      	lsls	r2, r3, #20
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800220e:	025a      	lsls	r2, r3, #9
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	029a      	lsls	r2, r3, #10
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40012300 	.word	0x40012300
 800224c:	0f000001 	.word	0x0f000001

08002250 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	4313      	orrs	r3, r2
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00
 80022a8:	05fa0000 	.word	0x05fa0000

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	@ (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	@ (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff3e 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff31 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e014      	b.n	80024c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	791b      	ldrb	r3, [r3, #4]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fe fbdf 	bl	8000c6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024e0:	d120      	bne.n	8002524 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f0:	d118      	bne.n	8002524 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800251c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f82d 	bl	800257e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800252e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002532:	d120      	bne.n	8002576 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800253e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002542:	d118      	bne.n	8002576 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2204      	movs	r2, #4
 8002548:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800256e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f85d 	bl	8002630 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002592:	b480      	push	{r7}
 8002594:	b087      	sub	sp, #28
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	795b      	ldrb	r3, [r3, #5]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_DAC_ConfigChannel+0x18>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e03c      	b.n	8002624 <HAL_DAC_ConfigChannel+0x92>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2202      	movs	r2, #2
 80025b4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4013      	ands	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	22c0      	movs	r2, #192	@ 0xc0
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43da      	mvns	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	400a      	ands	r2, r1
 8002614:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff f872 	bl	8001738 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e099      	b.n	8002794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002680:	e00f      	b.n	80026a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002682:	f7ff f859 	bl	8001738 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b05      	cmp	r3, #5
 800268e:	d908      	bls.n	80026a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2203      	movs	r2, #3
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e078      	b.n	8002794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e8      	bne.n	8002682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4b38      	ldr	r3, [pc, #224]	@ (800279c <HAL_DMA_Init+0x158>)
 80026bc:	4013      	ands	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d107      	bne.n	800270c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	4313      	orrs	r3, r2
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	2b04      	cmp	r3, #4
 8002734:	d117      	bne.n	8002766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fa7b 	bl	8002c44 <DMA_CheckFifoParam>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2240      	movs	r2, #64	@ 0x40
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002762:	2301      	movs	r3, #1
 8002764:	e016      	b.n	8002794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa32 	bl	8002bd8 <DMA_CalcBaseAndBitshift>
 8002774:	4603      	mov	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	223f      	movs	r2, #63	@ 0x3f
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	f010803f 	.word	0xf010803f

080027a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027ae:	f7fe ffc3 	bl	8001738 <HAL_GetTick>
 80027b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2280      	movs	r2, #128	@ 0x80
 80027c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e052      	b.n	8002878 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0216 	bic.w	r2, r2, #22
 80027e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <HAL_DMA_Abort+0x62>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0208 	bic.w	r2, r2, #8
 8002810:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002822:	e013      	b.n	800284c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002824:	f7fe ff88 	bl	8001738 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b05      	cmp	r3, #5
 8002830:	d90c      	bls.n	800284c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e015      	b.n	8002878 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e4      	bne.n	8002824 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	223f      	movs	r2, #63	@ 0x3f
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d004      	beq.n	800289e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	@ 0x80
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00c      	b.n	80028b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2205      	movs	r2, #5
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028d0:	4b8e      	ldr	r3, [pc, #568]	@ (8002b0c <HAL_DMA_IRQHandler+0x248>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002b10 <HAL_DMA_IRQHandler+0x24c>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ee:	2208      	movs	r2, #8
 80028f0:	409a      	lsls	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01a      	beq.n	8002930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	2208      	movs	r2, #8
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	2201      	movs	r2, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	2201      	movs	r2, #1
 8002954:	409a      	lsls	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295e:	f043 0202 	orr.w	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296a:	2204      	movs	r2, #4
 800296c:	409a      	lsls	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d012      	beq.n	800299c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	2204      	movs	r2, #4
 800298a:	409a      	lsls	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	f043 0204 	orr.w	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	2210      	movs	r2, #16
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d043      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03c      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	2210      	movs	r2, #16
 80029c0:	409a      	lsls	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d018      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d024      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
 80029f2:	e01f      	b.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e016      	b.n	8002a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0208 	bic.w	r2, r2, #8
 8002a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	2220      	movs	r2, #32
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 808f 	beq.w	8002b64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8087 	beq.w	8002b64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d136      	bne.n	8002adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0216 	bic.w	r2, r2, #22
 8002a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x1da>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0208 	bic.w	r2, r2, #8
 8002aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab2:	223f      	movs	r2, #63	@ 0x3f
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d07e      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
        }
        return;
 8002ada:	e079      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01d      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10d      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d031      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
 8002b08:	e02c      	b.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
 8002b0a:	bf00      	nop
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d023      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
 8002b24:	e01e      	b.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10f      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0210 	bic.w	r2, r2, #16
 8002b42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d032      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d022      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2205      	movs	r2, #5
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3301      	adds	r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d307      	bcc.n	8002bac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f2      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x2cc>
 8002baa:	e000      	b.n	8002bae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
 8002bce:	e000      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bd0:	bf00      	nop
    }
  }
}
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3b10      	subs	r3, #16
 8002be8:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <DMA_CalcBaseAndBitshift+0x60>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf2:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x64>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d908      	bls.n	8002c18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	1d1a      	adds	r2, r3, #4
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c16:	e006      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	08016c3c 	.word	0x08016c3c
 8002c40:	fffffc00 	.word	0xfffffc00

08002c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d856      	bhi.n	8002d12 <DMA_CheckFifoParam+0xce>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <DMA_CheckFifoParam+0x28>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002d13 	.word	0x08002d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8c:	e043      	b.n	8002d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c96:	d140      	bne.n	8002d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e03d      	b.n	8002d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca6:	d121      	bne.n	8002cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d837      	bhi.n	8002d1e <DMA_CheckFifoParam+0xda>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <DMA_CheckFifoParam+0x70>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccb 	.word	0x08002ccb
 8002cbc:	08002cc5 	.word	0x08002cc5
 8002cc0:	08002cdd 	.word	0x08002cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e030      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d025      	beq.n	8002d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e022      	b.n	8002d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce4:	d11f      	bne.n	8002d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cea:	e01c      	b.n	8002d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d903      	bls.n	8002cfa <DMA_CheckFifoParam+0xb6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf8:	e018      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e015      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e00b      	b.n	8002d2a <DMA_CheckFifoParam+0xe6>
      break;
 8002d12:	bf00      	nop
 8002d14:	e00a      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e008      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e006      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e004      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06a      	b.n	8002e24 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d106      	bne.n	8002d66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2223      	movs	r2, #35	@ 0x23
 8002d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 fa29 	bl	80081b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <HAL_ETH_Init+0xf0>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a30      	ldr	r2, [pc, #192]	@ (8002e2c <HAL_ETH_Init+0xf0>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b2e      	ldr	r3, [pc, #184]	@ (8002e2c <HAL_ETH_Init+0xf0>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e30 <HAL_ETH_Init+0xf4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a2b      	ldr	r2, [pc, #172]	@ (8002e30 <HAL_ETH_Init+0xf4>)
 8002d84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d8a:	4b29      	ldr	r3, [pc, #164]	@ (8002e30 <HAL_ETH_Init+0xf4>)
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4927      	ldr	r1, [pc, #156]	@ (8002e30 <HAL_ETH_Init+0xf4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d98:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <HAL_ETH_Init+0xf4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002db2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db4:	f7fe fcc0 	bl	8001738 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002dba:	e011      	b.n	8002de0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002dbc:	f7fe fcbc 	bl	8001738 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002dca:	d909      	bls.n	8002de0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	22e0      	movs	r2, #224	@ 0xe0
 8002dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e021      	b.n	8002e24 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e4      	bne.n	8002dbc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fee4 	bl	8003bc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 ff8b 	bl	8003d14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 ffe1 	bl	8003dc6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 ff49 	bl	8003ca4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40013800 	.word	0x40013800

08002e34 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d150      	bne.n	8002ee8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2223      	movs	r2, #35	@ 0x23
 8002e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9fd 	bl	8003254 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0208 	orr.w	r2, r2, #8
 8002e68:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7fe fc6c 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0204 	orr.w	r2, r2, #4
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f7fe fc59 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fd2a 	bl	8003900 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ebe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ec2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eda:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2223      	movs	r2, #35	@ 0x23
 8002ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f00:	2b23      	cmp	r3, #35	@ 0x23
 8002f02:	d14a      	bne.n	8002f9a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2223      	movs	r2, #35	@ 0x23
 8002f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f22:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	f023 0302 	bic.w	r3, r3, #2
 8002f36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f3a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f54:	2001      	movs	r0, #1
 8002f56:	f7fe fbfb 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fccc 	bl	8003900 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0208 	bic.w	r2, r2, #8
 8002f76:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7fe fbe5 	bl	8001750 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2210      	movs	r2, #16
 8002f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07c      	b.n	80030c4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd0:	2b23      	cmp	r3, #35	@ 0x23
 8002fd2:	d176      	bne.n	80030c2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 ff61 	bl	8003ea0 <ETH_Prepare_Tx_Descriptors>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fea:	f043 0202 	orr.w	r2, r3, #2
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e065      	b.n	80030c4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ff8:	f3bf 8f4f 	dsb	sy
}
 8002ffc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3206      	adds	r2, #6
 8003006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	2b03      	cmp	r3, #3
 800301c:	d904      	bls.n	8003028 <HAL_ETH_Transmit+0x84>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	1f1a      	subs	r2, r3, #4
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3106      	adds	r1, #6
 8003034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003038:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800303c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800303e:	f7fe fb7b 	bl	8001738 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003044:	e037      	b.n	80030b6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	f043 0208 	orr.w	r2, r3, #8
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e023      	b.n	80030c4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d018      	beq.n	80030b6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fe fb58 	bl	8001738 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <HAL_ETH_Transmit+0xf6>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f043 0204 	orr.w	r2, r3, #4
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80030b0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e006      	b.n	80030c4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	dbc3      	blt.n	8003046 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0a8      	b.n	800324a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fe:	2b23      	cmp	r3, #35	@ 0x23
 8003100:	d001      	beq.n	8003106 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0a1      	b.n	800324a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	3212      	adds	r2, #18
 8003112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003116:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800311c:	f1c3 0304 	rsb	r3, r3, #4
 8003120:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003122:	e06a      	b.n	80031fa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <HAL_ETH_ReadData+0x88>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d040      	beq.n	80031d6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003188:	3b04      	subs	r3, #4
 800318a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80031b0:	461a      	mov	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f005 f9d1 	bl	800855c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	441a      	add	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2200      	movs	r2, #0
 80031d4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3301      	adds	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d902      	bls.n	80031e8 <HAL_ETH_ReadData+0x11c>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b04      	subs	r3, #4
 80031e6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	3212      	adds	r2, #18
 80031ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3301      	adds	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db06      	blt.n	8003210 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d202      	bcs.n	8003210 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d089      	beq.n	8003124 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f815 	bl	8003254 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d108      	bne.n	8003248 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003260:	2301      	movs	r3, #1
 8003262:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003268:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	3212      	adds	r2, #18
 8003270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003274:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800327a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800327c:	e040      	b.n	8003300 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d112      	bne.n	80032ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	4618      	mov	r0, r3
 800328c:	f005 f936 	bl	80084fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	74fb      	strb	r3, [r7, #19]
 800329a:	e007      	b.n	80032ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	461a      	mov	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d026      	beq.n	8003300 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003338 <ETH_UpdateDescriptor+0xe4>)
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	e003      	b.n	80032ca <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80032c8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80032ca:	f3bf 8f5f 	dmb	sy
}
 80032ce:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3301      	adds	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d902      	bls.n	80032ee <ETH_UpdateDescriptor+0x9a>
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3b04      	subs	r3, #4
 80032ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	3212      	adds	r2, #18
 80032f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <ETH_UpdateDescriptor+0xb8>
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1b8      	bne.n	800327e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	429a      	cmp	r2, r3
 8003314:	d00c      	beq.n	8003330 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800331e:	461a      	mov	r2, r3
 8003320:	2300      	movs	r3, #0
 8003322:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003330:	bf00      	nop
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	80004600 	.word	0x80004600

0800333c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003352:	2b40      	cmp	r3, #64	@ 0x40
 8003354:	d112      	bne.n	800337c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d109      	bne.n	800337c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003370:	461a      	mov	r2, r3
 8003372:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <HAL_ETH_IRQHandler+0x178>)
 8003374:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8ac 	bl	80034d4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d113      	bne.n	80033b6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10a      	bne.n	80033b6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a8:	461a      	mov	r2, r3
 80033aa:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80033ae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f885 	bl	80034c0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033c8:	d14c      	bne.n	8003464 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033dc:	d142      	bne.n	8003464 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e4:	f043 0208 	orr.w	r2, r3, #8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003400:	d11a      	bne.n	8003438 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	4b2a      	ldr	r3, [pc, #168]	@ (80034b8 <HAL_ETH_IRQHandler+0x17c>)
 800340e:	4013      	ands	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003428:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800342c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	22e0      	movs	r2, #224	@ 0xe0
 8003432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003436:	e012      	b.n	800345e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003446:	4013      	ands	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003456:	461a      	mov	r2, r3
 8003458:	f248 6380 	movw	r3, #34432	@ 0x8680
 800345c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f842 	bl	80034e8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b08      	cmp	r3, #8
 8003470:	d10e      	bne.n	8003490 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003478:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f83a 	bl	80034fc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003490:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <HAL_ETH_IRQHandler+0x180>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d006      	beq.n	80034aa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800349c:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <HAL_ETH_IRQHandler+0x180>)
 800349e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80034a2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f833 	bl	8003510 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	00010040 	.word	0x00010040
 80034b8:	007e2000 	.word	0x007e2000
 80034bc:	40013c00 	.word	0x40013c00

080034c0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 031c 	and.w	r3, r3, #28
 8003540:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	02db      	lsls	r3, r3, #11
 8003546:	b29b      	uxth	r3, r3
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0302 	bic.w	r3, r3, #2
 8003562:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003574:	f7fe f8e0 	bl	8001738 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800357a:	e00d      	b.n	8003598 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800357c:	f7fe f8dc 	bl	8001738 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358a:	d301      	bcc.n	8003590 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e010      	b.n	80035b2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ec      	bne.n	800357c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 031c 	and.w	r3, r3, #28
 80035d6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	02db      	lsls	r3, r3, #11
 80035dc:	b29b      	uxth	r3, r3
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	019b      	lsls	r3, r3, #6
 80035e8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003614:	f7fe f890 	bl	8001738 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800361a:	e00d      	b.n	8003638 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800361c:	f7fe f88c 	bl	8001738 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362a:	d301      	bcc.n	8003630 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e009      	b.n	8003644 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ec      	bne.n	800361c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0d9      	b.n	8003814 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf14      	ite	ne
 800366e:	2301      	movne	r3, #1
 8003670:	2300      	moveq	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf14      	ite	ne
 8003804:	2301      	movne	r3, #1
 8003806:	2300      	moveq	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e00b      	b.n	800384c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383a:	2b10      	cmp	r3, #16
 800383c:	d105      	bne.n	800384a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f883 	bl	800394c <ETH_SetMACConfig>

    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 031c 	bic.w	r3, r3, #28
 800386a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800386c:	f001 fc00 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8003870:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <HAL_ETH_SetMDIOClockRange+0x98>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d908      	bls.n	800388c <HAL_ETH_SetMDIOClockRange+0x38>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d804      	bhi.n	800388c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e027      	b.n	80038dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d908      	bls.n	80038a6 <HAL_ETH_SetMDIOClockRange+0x52>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a17      	ldr	r2, [pc, #92]	@ (80038f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d204      	bcs.n	80038a6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f043 030c 	orr.w	r3, r3, #12
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e01a      	b.n	80038dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a12      	ldr	r2, [pc, #72]	@ (80038f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d303      	bcc.n	80038b6 <HAL_ETH_SetMDIOClockRange+0x62>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d911      	bls.n	80038da <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4a0f      	ldr	r2, [pc, #60]	@ (80038f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d908      	bls.n	80038d0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4a0e      	ldr	r2, [pc, #56]	@ (80038fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d804      	bhi.n	80038d0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e005      	b.n	80038dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f043 0310 	orr.w	r3, r3, #16
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e000      	b.n	80038dc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80038da:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	611a      	str	r2, [r3, #16]
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	01312cff 	.word	0x01312cff
 80038f0:	02160ebf 	.word	0x02160ebf
 80038f4:	03938700 	.word	0x03938700
 80038f8:	05f5e0ff 	.word	0x05f5e0ff
 80038fc:	08f0d17f 	.word	0x08f0d17f

08003900 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003922:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003930:	2001      	movs	r0, #1
 8003932:	f7fd ff0d 	bl	8001750 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003940:	6193      	str	r3, [r2, #24]
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4b51      	ldr	r3, [pc, #324]	@ (8003aa8 <ETH_SetMACConfig+0x15c>)
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	7c1b      	ldrb	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <ETH_SetMACConfig+0x28>
 800396e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003972:	e000      	b.n	8003976 <ETH_SetMACConfig+0x2a>
 8003974:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	7c5b      	ldrb	r3, [r3, #17]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <ETH_SetMACConfig+0x38>
 800397e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003982:	e000      	b.n	8003986 <ETH_SetMACConfig+0x3a>
 8003984:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003986:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800398c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	7fdb      	ldrb	r3, [r3, #31]
 8003992:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003994:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800399a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	7f92      	ldrb	r2, [r2, #30]
 80039a0:	2a00      	cmp	r2, #0
 80039a2:	d102      	bne.n	80039aa <ETH_SetMACConfig+0x5e>
 80039a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039a8:	e000      	b.n	80039ac <ETH_SetMACConfig+0x60>
 80039aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80039ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	7f1b      	ldrb	r3, [r3, #28]
 80039b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80039b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80039ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	791b      	ldrb	r3, [r3, #4]
 80039c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80039c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80039ca:	2a00      	cmp	r2, #0
 80039cc:	d102      	bne.n	80039d4 <ETH_SetMACConfig+0x88>
 80039ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d2:	e000      	b.n	80039d6 <ETH_SetMACConfig+0x8a>
 80039d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80039d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	7bdb      	ldrb	r3, [r3, #15]
 80039dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80039de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80039e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80039ee:	4313      	orrs	r3, r2
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7fd fea2 	bl	8001750 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003a22:	4013      	ands	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003a32:	2a00      	cmp	r2, #0
 8003a34:	d101      	bne.n	8003a3a <ETH_SetMACConfig+0xee>
 8003a36:	2280      	movs	r2, #128	@ 0x80
 8003a38:	e000      	b.n	8003a3c <ETH_SetMACConfig+0xf0>
 8003a3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003a4a:	2a01      	cmp	r2, #1
 8003a4c:	d101      	bne.n	8003a52 <ETH_SetMACConfig+0x106>
 8003a4e:	2208      	movs	r2, #8
 8003a50:	e000      	b.n	8003a54 <ETH_SetMACConfig+0x108>
 8003a52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003a54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003a5c:	2a01      	cmp	r2, #1
 8003a5e:	d101      	bne.n	8003a64 <ETH_SetMACConfig+0x118>
 8003a60:	2204      	movs	r2, #4
 8003a62:	e000      	b.n	8003a66 <ETH_SetMACConfig+0x11a>
 8003a64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003a6e:	2a01      	cmp	r2, #1
 8003a70:	d101      	bne.n	8003a76 <ETH_SetMACConfig+0x12a>
 8003a72:	2202      	movs	r2, #2
 8003a74:	e000      	b.n	8003a78 <ETH_SetMACConfig+0x12c>
 8003a76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a90:	2001      	movs	r0, #1
 8003a92:	f7fd fe5d 	bl	8001750 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	619a      	str	r2, [r3, #24]
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	ff20810f 	.word	0xff20810f

08003aac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8003bbc <ETH_SetDMAConfig+0x110>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	7b1b      	ldrb	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d102      	bne.n	8003ad8 <ETH_SetDMAConfig+0x2c>
 8003ad2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ad6:	e000      	b.n	8003ada <ETH_SetDMAConfig+0x2e>
 8003ad8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	7b5b      	ldrb	r3, [r3, #13]
 8003ade:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ae0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	7f52      	ldrb	r2, [r2, #29]
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	d102      	bne.n	8003af0 <ETH_SetDMAConfig+0x44>
 8003aea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003aee:	e000      	b.n	8003af2 <ETH_SetDMAConfig+0x46>
 8003af0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003af2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	7b9b      	ldrb	r3, [r3, #14]
 8003af8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003afa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003b00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	7f1b      	ldrb	r3, [r3, #28]
 8003b06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003b08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	7f9b      	ldrb	r3, [r3, #30]
 8003b0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b20:	4313      	orrs	r3, r2
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b30:	461a      	mov	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b42:	2001      	movs	r0, #1
 8003b44:	f7fd fe04 	bl	8001750 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	791b      	ldrb	r3, [r3, #4]
 8003b5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003b66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003b76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	f7fd fdd5 	bl	8001750 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	f8de3f23 	.word	0xf8de3f23

08003bc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b0a6      	sub	sp, #152	@ 0x98
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c26:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fe86 	bl	800394c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c74:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff08 	bl	8003aac <ETH_SetDMAConfig>
}
 8003c9c:	bf00      	nop
 8003c9e:	3798      	adds	r7, #152	@ 0x98
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3305      	adds	r3, #5
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	3204      	adds	r2, #4
 8003cbc:	7812      	ldrb	r2, [r2, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <ETH_MACAddressConfig+0x68>)
 8003cc6:	4413      	add	r3, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3303      	adds	r3, #3
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	061a      	lsls	r2, r3, #24
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	7812      	ldrb	r2, [r2, #0]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <ETH_MACAddressConfig+0x6c>)
 8003cf6:	4413      	add	r3, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6013      	str	r3, [r2, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40028040 	.word	0x40028040
 8003d10:	40028044 	.word	0x40028044

08003d14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e03e      	b.n	8003da0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68d9      	ldr	r1, [r3, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	440b      	add	r3, r1
 8003d32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	3206      	adds	r2, #6
 8003d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d80c      	bhi.n	8003d84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68d9      	ldr	r1, [r3, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	440b      	add	r3, r1
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e004      	b.n	8003d8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d9bd      	bls.n	8003d22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db8:	611a      	str	r2, [r3, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e046      	b.n	8003e62 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6919      	ldr	r1, [r3, #16]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	440b      	add	r3, r1
 8003de4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003e18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	3212      	adds	r2, #18
 8003e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d80c      	bhi.n	8003e52 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6919      	ldr	r1, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	440b      	add	r3, r1
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	e004      	b.n	8003e5c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d9b5      	bls.n	8003dd4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e92:	60da      	str	r2, [r3, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b08d      	sub	sp, #52	@ 0x34
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee2:	d007      	beq.n	8003ef4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee8:	3304      	adds	r3, #4
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e0ff      	b.n	80040f8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	3301      	adds	r3, #1
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4b7d      	ldr	r3, [pc, #500]	@ (8004104 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	6852      	ldr	r2, [r2, #4]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003f7a:	f3bf 8f5f 	dmb	sy
}
 8003f7e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003f8c:	e082      	b.n	8004094 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d006      	beq.n	8003fae <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e005      	b.n	8003fba <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d902      	bls.n	8003fcc <ETH_Prepare_Tx_Descriptors+0x12c>
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fee:	d007      	beq.n	8004000 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d029      	beq.n	8004054 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800400c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800400e:	2300      	movs	r3, #0
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004012:	e019      	b.n	8004048 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004014:	f3bf 8f5f 	dmb	sy
}
 8004018:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004028:	3301      	adds	r3, #1
 800402a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402e:	2b03      	cmp	r3, #3
 8004030:	d902      	bls.n	8004038 <ETH_Prepare_Tx_Descriptors+0x198>
 8004032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004034:	3b04      	subs	r3, #4
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800403c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004040:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	3301      	adds	r3, #1
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	429a      	cmp	r2, r3
 800404e:	d3e1      	bcc.n	8004014 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004050:	2302      	movs	r3, #2
 8004052:	e051      	b.n	80040f8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	3301      	adds	r3, #1
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004070:	4013      	ands	r3, r2
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	6852      	ldr	r2, [r2, #4]
 8004076:	431a      	orrs	r2, r3
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	3301      	adds	r3, #1
 8004080:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004082:	f3bf 8f5f 	dmb	sy
}
 8004086:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f47f af78 	bne.w	8003f8e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e005      	b.n	80040be <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	3304      	adds	r3, #4
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040de:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80040e0:	b672      	cpsid	i
}
 80040e2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	4413      	add	r3, r2
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80040f2:	b662      	cpsie	i
}
 80040f4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3734      	adds	r7, #52	@ 0x34
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	ffffe000 	.word	0xffffe000

08004108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	@ 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e175      	b.n	8004414 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004128:	2201      	movs	r2, #1
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	429a      	cmp	r2, r3
 8004142:	f040 8164 	bne.w	800440e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d005      	beq.n	800415e <HAL_GPIO_Init+0x56>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d130      	bne.n	80041c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	2203      	movs	r2, #3
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004194:	2201      	movs	r2, #1
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 0201 	and.w	r2, r3, #1
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d017      	beq.n	80041fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d123      	bne.n	8004250 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	08da      	lsrs	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3208      	adds	r2, #8
 8004210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	220f      	movs	r2, #15
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	08da      	lsrs	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3208      	adds	r2, #8
 800424a:	69b9      	ldr	r1, [r7, #24]
 800424c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 0203 	and.w	r2, r3, #3
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80be 	beq.w	800440e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004292:	4b66      	ldr	r3, [pc, #408]	@ (800442c <HAL_GPIO_Init+0x324>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	4a65      	ldr	r2, [pc, #404]	@ (800442c <HAL_GPIO_Init+0x324>)
 8004298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800429c:	6453      	str	r3, [r2, #68]	@ 0x44
 800429e:	4b63      	ldr	r3, [pc, #396]	@ (800442c <HAL_GPIO_Init+0x324>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80042aa:	4a61      	ldr	r2, [pc, #388]	@ (8004430 <HAL_GPIO_Init+0x328>)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	3302      	adds	r3, #2
 80042b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	220f      	movs	r2, #15
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a58      	ldr	r2, [pc, #352]	@ (8004434 <HAL_GPIO_Init+0x32c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d037      	beq.n	8004346 <HAL_GPIO_Init+0x23e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a57      	ldr	r2, [pc, #348]	@ (8004438 <HAL_GPIO_Init+0x330>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d031      	beq.n	8004342 <HAL_GPIO_Init+0x23a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a56      	ldr	r2, [pc, #344]	@ (800443c <HAL_GPIO_Init+0x334>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d02b      	beq.n	800433e <HAL_GPIO_Init+0x236>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a55      	ldr	r2, [pc, #340]	@ (8004440 <HAL_GPIO_Init+0x338>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d025      	beq.n	800433a <HAL_GPIO_Init+0x232>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a54      	ldr	r2, [pc, #336]	@ (8004444 <HAL_GPIO_Init+0x33c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01f      	beq.n	8004336 <HAL_GPIO_Init+0x22e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a53      	ldr	r2, [pc, #332]	@ (8004448 <HAL_GPIO_Init+0x340>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d019      	beq.n	8004332 <HAL_GPIO_Init+0x22a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a52      	ldr	r2, [pc, #328]	@ (800444c <HAL_GPIO_Init+0x344>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_GPIO_Init+0x226>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a51      	ldr	r2, [pc, #324]	@ (8004450 <HAL_GPIO_Init+0x348>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00d      	beq.n	800432a <HAL_GPIO_Init+0x222>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a50      	ldr	r2, [pc, #320]	@ (8004454 <HAL_GPIO_Init+0x34c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <HAL_GPIO_Init+0x21e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a4f      	ldr	r2, [pc, #316]	@ (8004458 <HAL_GPIO_Init+0x350>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d101      	bne.n	8004322 <HAL_GPIO_Init+0x21a>
 800431e:	2309      	movs	r3, #9
 8004320:	e012      	b.n	8004348 <HAL_GPIO_Init+0x240>
 8004322:	230a      	movs	r3, #10
 8004324:	e010      	b.n	8004348 <HAL_GPIO_Init+0x240>
 8004326:	2308      	movs	r3, #8
 8004328:	e00e      	b.n	8004348 <HAL_GPIO_Init+0x240>
 800432a:	2307      	movs	r3, #7
 800432c:	e00c      	b.n	8004348 <HAL_GPIO_Init+0x240>
 800432e:	2306      	movs	r3, #6
 8004330:	e00a      	b.n	8004348 <HAL_GPIO_Init+0x240>
 8004332:	2305      	movs	r3, #5
 8004334:	e008      	b.n	8004348 <HAL_GPIO_Init+0x240>
 8004336:	2304      	movs	r3, #4
 8004338:	e006      	b.n	8004348 <HAL_GPIO_Init+0x240>
 800433a:	2303      	movs	r3, #3
 800433c:	e004      	b.n	8004348 <HAL_GPIO_Init+0x240>
 800433e:	2302      	movs	r3, #2
 8004340:	e002      	b.n	8004348 <HAL_GPIO_Init+0x240>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <HAL_GPIO_Init+0x240>
 8004346:	2300      	movs	r3, #0
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	f002 0203 	and.w	r2, r2, #3
 800434e:	0092      	lsls	r2, r2, #2
 8004350:	4093      	lsls	r3, r2
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004358:	4935      	ldr	r1, [pc, #212]	@ (8004430 <HAL_GPIO_Init+0x328>)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	3302      	adds	r3, #2
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004366:	4b3d      	ldr	r3, [pc, #244]	@ (800445c <HAL_GPIO_Init+0x354>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800438a:	4a34      	ldr	r2, [pc, #208]	@ (800445c <HAL_GPIO_Init+0x354>)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004390:	4b32      	ldr	r3, [pc, #200]	@ (800445c <HAL_GPIO_Init+0x354>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b4:	4a29      	ldr	r2, [pc, #164]	@ (800445c <HAL_GPIO_Init+0x354>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ba:	4b28      	ldr	r3, [pc, #160]	@ (800445c <HAL_GPIO_Init+0x354>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043de:	4a1f      	ldr	r2, [pc, #124]	@ (800445c <HAL_GPIO_Init+0x354>)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <HAL_GPIO_Init+0x354>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004408:	4a14      	ldr	r2, [pc, #80]	@ (800445c <HAL_GPIO_Init+0x354>)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3301      	adds	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b0f      	cmp	r3, #15
 8004418:	f67f ae86 	bls.w	8004128 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	3724      	adds	r7, #36	@ 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800
 8004430:	40013800 	.word	0x40013800
 8004434:	40020000 	.word	0x40020000
 8004438:	40020400 	.word	0x40020400
 800443c:	40020800 	.word	0x40020800
 8004440:	40020c00 	.word	0x40020c00
 8004444:	40021000 	.word	0x40021000
 8004448:	40021400 	.word	0x40021400
 800444c:	40021800 	.word	0x40021800
 8004450:	40021c00 	.word	0x40021c00
 8004454:	40022000 	.word	0x40022000
 8004458:	40022400 	.word	0x40022400
 800445c:	40013c00 	.word	0x40013c00

08004460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	807b      	strh	r3, [r7, #2]
 800446c:	4613      	mov	r3, r2
 800446e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004470:	787b      	ldrb	r3, [r7, #1]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800447c:	e003      	b.n	8004486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	041a      	lsls	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	619a      	str	r2, [r3, #24]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004494:	b08f      	sub	sp, #60	@ 0x3c
 8004496:	af0a      	add	r7, sp, #40	@ 0x28
 8004498:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e116      	b.n	80046d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fdc0 	bl	8001044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2203      	movs	r2, #3
 80044c8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 f8c0 	bl	8007668 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	687e      	ldr	r6, [r7, #4]
 80044f0:	466d      	mov	r5, sp
 80044f2:	f106 0410 	add.w	r4, r6, #16
 80044f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004502:	e885 0003 	stmia.w	r5, {r0, r1}
 8004506:	1d33      	adds	r3, r6, #4
 8004508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f003 f854 	bl	80075b8 <USB_CoreInit>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0d7      	b.n	80046d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f003 f8ae 	bl	800768a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e04a      	b.n	80045ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	333d      	adds	r3, #61	@ 0x3d
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	333c      	adds	r3, #60	@ 0x3c
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	b298      	uxth	r0, r3
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	3344      	adds	r3, #68	@ 0x44
 8004570:	4602      	mov	r2, r0
 8004572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004574:	7bfa      	ldrb	r2, [r7, #15]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3340      	adds	r3, #64	@ 0x40
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3348      	adds	r3, #72	@ 0x48
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	334c      	adds	r3, #76	@ 0x4c
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3354      	adds	r3, #84	@ 0x54
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	3301      	adds	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3af      	bcc.n	8004534 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e044      	b.n	8004664 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	3301      	adds	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3b5      	bcc.n	80045da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	687e      	ldr	r6, [r7, #4]
 8004676:	466d      	mov	r5, sp
 8004678:	f106 0410 	add.w	r4, r6, #16
 800467c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004688:	e885 0003 	stmia.w	r5, {r0, r1}
 800468c:	1d33      	adds	r3, r6, #4
 800468e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004690:	6838      	ldr	r0, [r7, #0]
 8004692:	f003 f847 	bl	8007724 <USB_DevInit>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e014      	b.n	80046d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f80b 	bl	80046dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 fa05 	bl	8007ada <USB_DevDisconnect>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800470a:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_PCDEx_ActivateLPM+0x44>)
 800470c:	4313      	orrs	r3, r2
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	10000003 	.word	0x10000003

08004724 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800472e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004732:	6013      	str	r3, [r2, #0]
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40007000 	.word	0x40007000

08004744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800474c:	2300      	movs	r3, #0
 800474e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e291      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8087 	beq.w	8004876 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004768:	4b96      	ldr	r3, [pc, #600]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b04      	cmp	r3, #4
 8004772:	d00c      	beq.n	800478e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004774:	4b93      	ldr	r3, [pc, #588]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d112      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62>
 8004780:	4b90      	ldr	r3, [pc, #576]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800478c:	d10b      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478e:	4b8d      	ldr	r3, [pc, #564]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d06c      	beq.n	8004874 <HAL_RCC_OscConfig+0x130>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d168      	bne.n	8004874 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e26b      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x7a>
 80047b0:	4b84      	ldr	r3, [pc, #528]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a83      	ldr	r2, [pc, #524]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e02e      	b.n	800481c <HAL_RCC_OscConfig+0xd8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x9c>
 80047c6:	4b7f      	ldr	r3, [pc, #508]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7e      	ldr	r2, [pc, #504]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b7c      	ldr	r3, [pc, #496]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7b      	ldr	r2, [pc, #492]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e01d      	b.n	800481c <HAL_RCC_OscConfig+0xd8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0xc0>
 80047ea:	4b76      	ldr	r3, [pc, #472]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a75      	ldr	r2, [pc, #468]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b73      	ldr	r3, [pc, #460]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a72      	ldr	r2, [pc, #456]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0xd8>
 8004804:	4b6f      	ldr	r3, [pc, #444]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a6e      	ldr	r2, [pc, #440]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 800480a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	4b6c      	ldr	r3, [pc, #432]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6b      	ldr	r2, [pc, #428]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800481a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d013      	beq.n	800484c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fc ff88 	bl	8001738 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800482c:	f7fc ff84 	bl	8001738 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	@ 0x64
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e21f      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b61      	ldr	r3, [pc, #388]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0xe8>
 800484a:	e014      	b.n	8004876 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fc ff74 	bl	8001738 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004854:	f7fc ff70 	bl	8001738 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	@ 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e20b      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	4b57      	ldr	r3, [pc, #348]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x110>
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d069      	beq.n	8004956 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004882:	4b50      	ldr	r3, [pc, #320]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488e:	4b4d      	ldr	r3, [pc, #308]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b08      	cmp	r3, #8
 8004898:	d11c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x190>
 800489a:	4b4a      	ldr	r3, [pc, #296]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d116      	bne.n	80048d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a6:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_RCC_OscConfig+0x17a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d001      	beq.n	80048be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e1df      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048be:	4b41      	ldr	r3, [pc, #260]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	493d      	ldr	r1, [pc, #244]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d2:	e040      	b.n	8004956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d023      	beq.n	8004924 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048dc:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a38      	ldr	r2, [pc, #224]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fc ff26 	bl	8001738 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f0:	f7fc ff22 	bl	8001738 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1bd      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	4b30      	ldr	r3, [pc, #192]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b2d      	ldr	r3, [pc, #180]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4929      	ldr	r1, [pc, #164]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
 8004922:	e018      	b.n	8004956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004924:	4b27      	ldr	r3, [pc, #156]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a26      	ldr	r2, [pc, #152]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fc ff02 	bl	8001738 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004938:	f7fc fefe 	bl	8001738 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e199      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b1e      	ldr	r3, [pc, #120]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d038      	beq.n	80049d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d019      	beq.n	800499e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b16      	ldr	r3, [pc, #88]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496e:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fc fedf 	bl	8001738 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497e:	f7fc fedb 	bl	8001738 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e176      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x23a>
 800499c:	e01a      	b.n	80049d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80049a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a2:	4a08      	ldr	r2, [pc, #32]	@ (80049c4 <HAL_RCC_OscConfig+0x280>)
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fc fec5 	bl	8001738 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fc fec1 	bl	8001738 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d903      	bls.n	80049c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e15c      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
 80049c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	4b91      	ldr	r3, [pc, #580]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a4 	beq.w	8004b2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10d      	bne.n	8004a0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	4b88      	ldr	r3, [pc, #544]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	4a87      	ldr	r2, [pc, #540]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fa:	4b85      	ldr	r3, [pc, #532]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a0a:	4b82      	ldr	r3, [pc, #520]	@ (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d118      	bne.n	8004a48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a16:	4b7f      	ldr	r3, [pc, #508]	@ (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a22:	f7fc fe89 	bl	8001738 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2a:	f7fc fe85 	bl	8001738 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	@ 0x64
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e120      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3c:	4b75      	ldr	r3, [pc, #468]	@ (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_OscConfig+0x31a>
 8004a50:	4b6f      	ldr	r3, [pc, #444]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a54:	4a6e      	ldr	r2, [pc, #440]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5c:	e02d      	b.n	8004aba <HAL_RCC_OscConfig+0x376>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x33c>
 8004a66:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	4a69      	ldr	r2, [pc, #420]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a72:	4b67      	ldr	r3, [pc, #412]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	4a66      	ldr	r2, [pc, #408]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a78:	f023 0304 	bic.w	r3, r3, #4
 8004a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a7e:	e01c      	b.n	8004aba <HAL_RCC_OscConfig+0x376>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x35e>
 8004a88:	4b61      	ldr	r3, [pc, #388]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8c:	4a60      	ldr	r2, [pc, #384]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a8e:	f043 0304 	orr.w	r3, r3, #4
 8004a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a94:	4b5e      	ldr	r3, [pc, #376]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a98:	4a5d      	ldr	r2, [pc, #372]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa0:	e00b      	b.n	8004aba <HAL_RCC_OscConfig+0x376>
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aae:	4b58      	ldr	r3, [pc, #352]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	4a57      	ldr	r2, [pc, #348]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d015      	beq.n	8004aee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fc fe39 	bl	8001738 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fc fe35 	bl	8001738 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0ce      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ee      	beq.n	8004aca <HAL_RCC_OscConfig+0x386>
 8004aec:	e014      	b.n	8004b18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fc fe23 	bl	8001738 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fc fe1f 	bl	8001738 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0b8      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0c:	4b40      	ldr	r3, [pc, #256]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ee      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	4a3b      	ldr	r2, [pc, #236]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80a4 	beq.w	8004c7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b34:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d06b      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d149      	bne.n	8004bdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b48:	4b31      	ldr	r3, [pc, #196]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a30      	ldr	r2, [pc, #192]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fc fdf0 	bl	8001738 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fc fdec 	bl	8001738 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e087      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b28      	ldr	r3, [pc, #160]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ba6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba8:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a18      	ldr	r2, [pc, #96]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fc fdc0 	bl	8001738 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fc fdbc 	bl	8001738 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e057      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x478>
 8004bda:	e04f      	b.n	8004c7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0b      	ldr	r2, [pc, #44]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fc fda6 	bl	8001738 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fc fda2 	bl	8001738 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e03d      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4ac>
 8004c0e:	e035      	b.n	8004c7c <HAL_RCC_OscConfig+0x538>
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_RCC_OscConfig+0x544>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d028      	beq.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d121      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d111      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0d0      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d910      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b67      	ldr	r3, [pc, #412]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 020f 	bic.w	r2, r3, #15
 8004cba:	4965      	ldr	r1, [pc, #404]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b63      	ldr	r3, [pc, #396]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b8      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a52      	ldr	r2, [pc, #328]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b50      	ldr	r3, [pc, #320]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	494d      	ldr	r1, [pc, #308]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d040      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b47      	ldr	r3, [pc, #284]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d115      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e073      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e06b      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6e:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 0203 	bic.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4936      	ldr	r1, [pc, #216]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d80:	f7fc fcda 	bl	8001738 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fc fcd6 	bl	8001738 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e053      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 020c 	and.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d1eb      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db0:	4b27      	ldr	r3, [pc, #156]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d210      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b24      	ldr	r3, [pc, #144]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 020f 	bic.w	r2, r3, #15
 8004dc6:	4922      	ldr	r1, [pc, #136]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b20      	ldr	r3, [pc, #128]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dec:	4b19      	ldr	r3, [pc, #100]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4916      	ldr	r1, [pc, #88]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e0a:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	490e      	ldr	r1, [pc, #56]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e1e:	f000 f821 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	490a      	ldr	r1, [pc, #40]	@ (8004e58 <HAL_RCC_ClockConfig+0x1cc>)
 8004e30:	5ccb      	ldrb	r3, [r1, r3]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	@ (8004e5c <HAL_RCC_ClockConfig+0x1d0>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e3a:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <HAL_RCC_ClockConfig+0x1d4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc fc36 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00
 8004e54:	40023800 	.word	0x40023800
 8004e58:	08016c24 	.word	0x08016c24
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	20000004 	.word	0x20000004

08004e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b094      	sub	sp, #80	@ 0x50
 8004e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e70:	2300      	movs	r3, #0
 8004e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e74:	2300      	movs	r3, #0
 8004e76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e7c:	4b79      	ldr	r3, [pc, #484]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	f200 80e1 	bhi.w	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x34>
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e96:	e0db      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b73      	ldr	r3, [pc, #460]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e9c:	e0db      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e9e:	4b73      	ldr	r3, [pc, #460]	@ (800506c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ea2:	e0d8      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004eae:	4b6d      	ldr	r3, [pc, #436]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d063      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b6a      	ldr	r3, [pc, #424]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ec4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	462b      	mov	r3, r5
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	0159      	lsls	r1, r3, #5
 8004ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee8:	0150      	lsls	r0, r2, #5
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4621      	mov	r1, r4
 8004ef0:	1a51      	subs	r1, r2, r1
 8004ef2:	6139      	str	r1, [r7, #16]
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f08:	4659      	mov	r1, fp
 8004f0a:	018b      	lsls	r3, r1, #6
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f12:	4651      	mov	r1, sl
 8004f14:	018a      	lsls	r2, r1, #6
 8004f16:	4651      	mov	r1, sl
 8004f18:	ebb2 0801 	subs.w	r8, r2, r1
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f36:	4690      	mov	r8, r2
 8004f38:	4699      	mov	r9, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	eb18 0303 	adds.w	r3, r8, r3
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	462b      	mov	r3, r5
 8004f44:	eb49 0303 	adc.w	r3, r9, r3
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f56:	4629      	mov	r1, r5
 8004f58:	024b      	lsls	r3, r1, #9
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f60:	4621      	mov	r1, r4
 8004f62:	024a      	lsls	r2, r1, #9
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f74:	f7fb f9a4 	bl	80002c0 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f80:	e058      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f82:	4b38      	ldr	r3, [pc, #224]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	f04f 0000 	mov.w	r0, #0
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	0159      	lsls	r1, r3, #5
 8004faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fae:	0150      	lsls	r0, r2, #5
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	00eb      	lsls	r3, r5, #3
 8004fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fea:	00e2      	lsls	r2, r4, #3
 8004fec:	4614      	mov	r4, r2
 8004fee:	461d      	mov	r5, r3
 8004ff0:	4643      	mov	r3, r8
 8004ff2:	18e3      	adds	r3, r4, r3
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	eb45 0303 	adc.w	r3, r5, r3
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800500a:	4629      	mov	r1, r5
 800500c:	028b      	lsls	r3, r1, #10
 800500e:	4621      	mov	r1, r4
 8005010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005014:	4621      	mov	r1, r4
 8005016:	028a      	lsls	r2, r1, #10
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501e:	2200      	movs	r2, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005028:	f7fb f94a 	bl	80002c0 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800504e:	e002      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8005052:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005058:	4618      	mov	r0, r3
 800505a:	3750      	adds	r7, #80	@ 0x50
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	00f42400 	.word	0x00f42400
 800506c:	007a1200 	.word	0x007a1200

08005070 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b03      	ldr	r3, [pc, #12]	@ (8005084 <HAL_RCC_GetHCLKFreq+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000000 	.word	0x20000000

08005088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800508c:	f7ff fff0 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0a9b      	lsrs	r3, r3, #10
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4903      	ldr	r1, [pc, #12]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40023800 	.word	0x40023800
 80050ac:	08016c34 	.word	0x08016c34

080050b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050b4:	f7ff ffdc 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	0b5b      	lsrs	r3, r3, #13
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	4903      	ldr	r1, [pc, #12]	@ (80050d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050c6:	5ccb      	ldrb	r3, [r1, r3]
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40023800 	.word	0x40023800
 80050d4:	08016c34 	.word	0x08016c34

080050d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005100:	4b69      	ldr	r3, [pc, #420]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a68      	ldr	r2, [pc, #416]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800510a:	6093      	str	r3, [r2, #8]
 800510c:	4b66      	ldr	r3, [pc, #408]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005114:	4964      	ldr	r1, [pc, #400]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005122:	2301      	movs	r3, #1
 8005124:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005132:	4b5d      	ldr	r3, [pc, #372]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005138:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	4959      	ldr	r1, [pc, #356]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005150:	d101      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800515e:	2301      	movs	r3, #1
 8005160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d017      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800516e:	4b4e      	ldr	r3, [pc, #312]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005174:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	494a      	ldr	r1, [pc, #296]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800518c:	d101      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800518e:	2301      	movs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800519a:	2301      	movs	r3, #1
 800519c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 808b 	beq.w	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051bc:	4b3a      	ldr	r3, [pc, #232]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	4a39      	ldr	r2, [pc, #228]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80051c8:	4b37      	ldr	r3, [pc, #220]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051d4:	4b35      	ldr	r3, [pc, #212]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a34      	ldr	r2, [pc, #208]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e0:	f7fc faaa 	bl	8001738 <HAL_GetTick>
 80051e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e8:	f7fc faa6 	bl	8001738 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e357      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051fa:	4b2c      	ldr	r3, [pc, #176]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005206:	4b28      	ldr	r3, [pc, #160]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d035      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	429a      	cmp	r2, r3
 8005222:	d02e      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005224:	4b20      	ldr	r3, [pc, #128]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800522c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800522e:	4b1e      	ldr	r3, [pc, #120]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005232:	4a1d      	ldr	r2, [pc, #116]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005238:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800523a:	4b1b      	ldr	r3, [pc, #108]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	4a1a      	ldr	r2, [pc, #104]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005244:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005246:	4a18      	ldr	r2, [pc, #96]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800524c:	4b16      	ldr	r3, [pc, #88]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b01      	cmp	r3, #1
 8005256:	d114      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fc fa6e 	bl	8001738 <HAL_GetTick>
 800525c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525e:	e00a      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005260:	f7fc fa6a 	bl	8001738 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e319      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ee      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800528a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800528e:	d111      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005290:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800529c:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800529e:	400b      	ands	r3, r1
 80052a0:	4901      	ldr	r1, [pc, #4]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
 80052a6:	e00b      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40007000 	.word	0x40007000
 80052b0:	0ffffcff 	.word	0x0ffffcff
 80052b4:	4baa      	ldr	r3, [pc, #680]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4aa9      	ldr	r2, [pc, #676]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052be:	6093      	str	r3, [r2, #8]
 80052c0:	4ba7      	ldr	r3, [pc, #668]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052cc:	49a4      	ldr	r1, [pc, #656]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052de:	4ba0      	ldr	r3, [pc, #640]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052e4:	4a9e      	ldr	r2, [pc, #632]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80052ee:	4b9c      	ldr	r3, [pc, #624]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	4999      	ldr	r1, [pc, #612]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800530c:	4b94      	ldr	r3, [pc, #592]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005312:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800531a:	4991      	ldr	r1, [pc, #580]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800532e:	4b8c      	ldr	r3, [pc, #560]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005334:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800533c:	4988      	ldr	r1, [pc, #544]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005350:	4b83      	ldr	r3, [pc, #524]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005356:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800535e:	4980      	ldr	r1, [pc, #512]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005372:	4b7b      	ldr	r3, [pc, #492]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005378:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005380:	4977      	ldr	r1, [pc, #476]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005394:	4b72      	ldr	r3, [pc, #456]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539a:	f023 0203 	bic.w	r2, r3, #3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	496f      	ldr	r1, [pc, #444]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	f023 020c 	bic.w	r2, r3, #12
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c4:	4966      	ldr	r1, [pc, #408]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d8:	4b61      	ldr	r3, [pc, #388]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e6:	495e      	ldr	r1, [pc, #376]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053fa:	4b59      	ldr	r3, [pc, #356]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005400:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005408:	4955      	ldr	r1, [pc, #340]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800541c:	4b50      	ldr	r3, [pc, #320]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542a:	494d      	ldr	r1, [pc, #308]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800543e:	4b48      	ldr	r3, [pc, #288]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005444:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544c:	4944      	ldr	r1, [pc, #272]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005460:	4b3f      	ldr	r3, [pc, #252]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005466:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546e:	493c      	ldr	r1, [pc, #240]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005482:	4b37      	ldr	r3, [pc, #220]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005490:	4933      	ldr	r1, [pc, #204]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054b2:	492b      	ldr	r1, [pc, #172]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d011      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054c6:	4b26      	ldr	r3, [pc, #152]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054cc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054d4:	4922      	ldr	r1, [pc, #136]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054e4:	d101      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005506:	4b16      	ldr	r3, [pc, #88]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005514:	4912      	ldr	r1, [pc, #72]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005528:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005538:	4909      	ldr	r1, [pc, #36]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d006      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80d9 	beq.w	8005706 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005554:	4b02      	ldr	r3, [pc, #8]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a01      	ldr	r2, [pc, #4]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800555a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800555e:	e001      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005560:	40023800 	.word	0x40023800
 8005564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005566:	f7fc f8e7 	bl	8001738 <HAL_GetTick>
 800556a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800556e:	f7fc f8e3 	bl	8001738 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b64      	cmp	r3, #100	@ 0x64
 800557a:	d901      	bls.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e194      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005580:	4b6c      	ldr	r3, [pc, #432]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f0      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d021      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559c:	2b00      	cmp	r3, #0
 800559e:	d11d      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055a0:	4b64      	ldr	r3, [pc, #400]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055ae:	4b61      	ldr	r3, [pc, #388]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b4:	0e1b      	lsrs	r3, r3, #24
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	019a      	lsls	r2, r3, #6
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	431a      	orrs	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	061b      	lsls	r3, r3, #24
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	071b      	lsls	r3, r3, #28
 80055d4:	4957      	ldr	r1, [pc, #348]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d02e      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005606:	d129      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005608:	4b4a      	ldr	r3, [pc, #296]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005616:	4b47      	ldr	r3, [pc, #284]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561c:	0f1b      	lsrs	r3, r3, #28
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	019a      	lsls	r2, r3, #6
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	071b      	lsls	r3, r3, #28
 800563c:	493d      	ldr	r1, [pc, #244]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005644:	4b3b      	ldr	r3, [pc, #236]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800564a:	f023 021f 	bic.w	r2, r3, #31
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	3b01      	subs	r3, #1
 8005654:	4937      	ldr	r1, [pc, #220]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01d      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005668:	4b32      	ldr	r3, [pc, #200]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566e:	0e1b      	lsrs	r3, r3, #24
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005676:	4b2f      	ldr	r3, [pc, #188]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800567c:	0f1b      	lsrs	r3, r3, #28
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	019a      	lsls	r2, r3, #6
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	431a      	orrs	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	061b      	lsls	r3, r3, #24
 8005696:	431a      	orrs	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	071b      	lsls	r3, r3, #28
 800569c:	4925      	ldr	r1, [pc, #148]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d011      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	019a      	lsls	r2, r3, #6
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	061b      	lsls	r3, r3, #24
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	071b      	lsls	r3, r3, #28
 80056cc:	4919      	ldr	r1, [pc, #100]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056d4:	4b17      	ldr	r3, [pc, #92]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a16      	ldr	r2, [pc, #88]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e0:	f7fc f82a 	bl	8001738 <HAL_GetTick>
 80056e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056e8:	f7fc f826 	bl	8001738 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	@ 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e0d7      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b01      	cmp	r3, #1
 800570a:	f040 80cd 	bne.w	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800570e:	4b09      	ldr	r3, [pc, #36]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571a:	f7fc f80d 	bl	8001738 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005720:	e00a      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005722:	f7fc f809 	bl	8001738 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b64      	cmp	r3, #100	@ 0x64
 800572e:	d903      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0ba      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005734:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005738:	4b5e      	ldr	r3, [pc, #376]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005744:	d0ed      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005762:	2b00      	cmp	r3, #0
 8005764:	d02e      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d12a      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800576e:	4b51      	ldr	r3, [pc, #324]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800577c:	4b4d      	ldr	r3, [pc, #308]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005782:	0f1b      	lsrs	r3, r3, #28
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	019a      	lsls	r2, r3, #6
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	061b      	lsls	r3, r3, #24
 800579c:	431a      	orrs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	071b      	lsls	r3, r3, #28
 80057a2:	4944      	ldr	r1, [pc, #272]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057aa:	4b42      	ldr	r3, [pc, #264]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	3b01      	subs	r3, #1
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	493d      	ldr	r1, [pc, #244]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d022      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057d8:	d11d      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057da:	4b36      	ldr	r3, [pc, #216]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e0:	0e1b      	lsrs	r3, r3, #24
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057e8:	4b32      	ldr	r3, [pc, #200]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ee:	0f1b      	lsrs	r3, r3, #28
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	019a      	lsls	r2, r3, #6
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	431a      	orrs	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	061b      	lsls	r3, r3, #24
 8005808:	431a      	orrs	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	071b      	lsls	r3, r3, #28
 800580e:	4929      	ldr	r1, [pc, #164]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d028      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005822:	4b24      	ldr	r3, [pc, #144]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005828:	0e1b      	lsrs	r3, r3, #24
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005830:	4b20      	ldr	r3, [pc, #128]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	019a      	lsls	r2, r3, #6
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	431a      	orrs	r2, r3
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	4917      	ldr	r1, [pc, #92]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800585e:	4b15      	ldr	r3, [pc, #84]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005864:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4911      	ldr	r1, [pc, #68]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005874:	4b0f      	ldr	r3, [pc, #60]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0e      	ldr	r2, [pc, #56]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800587e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005880:	f7fb ff5a 	bl	8001738 <HAL_GetTick>
 8005884:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005888:	f7fb ff56 	bl	8001738 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	@ 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e007      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800589a:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058a6:	d1ef      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800

080058b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e049      	b.n	800595e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb fa0c 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f000 f900 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIM_ConfigClockSource+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e0b4      	b.n	8005aee <HAL_TIM_ConfigClockSource+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	4b56      	ldr	r3, [pc, #344]	@ (8005af8 <HAL_TIM_ConfigClockSource+0x190>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059bc:	d03e      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0xd4>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c2:	f200 8087 	bhi.w	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ca:	f000 8086 	beq.w	8005ada <HAL_TIM_ConfigClockSource+0x172>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d87f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b70      	cmp	r3, #112	@ 0x70
 80059d6:	d01a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0xa6>
 80059d8:	2b70      	cmp	r3, #112	@ 0x70
 80059da:	d87b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b60      	cmp	r3, #96	@ 0x60
 80059de:	d050      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x11a>
 80059e0:	2b60      	cmp	r3, #96	@ 0x60
 80059e2:	d877      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b50      	cmp	r3, #80	@ 0x50
 80059e6:	d03c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0xfa>
 80059e8:	2b50      	cmp	r3, #80	@ 0x50
 80059ea:	d873      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d058      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d86f      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b30      	cmp	r3, #48	@ 0x30
 80059f6:	d064      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	2b30      	cmp	r3, #48	@ 0x30
 80059fa:	d86b      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d060      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d867      	bhi.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05c      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d05a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a0c:	e062      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a1e:	f000 f987 	bl	8005d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
      break;
 8005a3a:	e04f      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a4c:	f000 f970 	bl	8005d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a5e:	609a      	str	r2, [r3, #8]
      break;
 8005a60:	e03c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 f8e4 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2150      	movs	r1, #80	@ 0x50
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f93d 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a80:	e02c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 f903 	bl	8005c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2160      	movs	r1, #96	@ 0x60
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f92d 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e01c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f000 f8c4 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f91d 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e00c      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 f914 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e003      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad8:	e000      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	fffeff88 	.word	0xfffeff88

08005afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a40      	ldr	r2, [pc, #256]	@ (8005c10 <TIM_Base_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d013      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1a:	d00f      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005c14 <TIM_Base_SetConfig+0x118>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3c      	ldr	r2, [pc, #240]	@ (8005c18 <TIM_Base_SetConfig+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8005c1c <TIM_Base_SetConfig+0x120>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3a      	ldr	r2, [pc, #232]	@ (8005c20 <TIM_Base_SetConfig+0x124>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2f      	ldr	r2, [pc, #188]	@ (8005c10 <TIM_Base_SetConfig+0x114>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d02b      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5c:	d027      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2c      	ldr	r2, [pc, #176]	@ (8005c14 <TIM_Base_SetConfig+0x118>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d023      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2b      	ldr	r2, [pc, #172]	@ (8005c18 <TIM_Base_SetConfig+0x11c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01f      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2a      	ldr	r2, [pc, #168]	@ (8005c1c <TIM_Base_SetConfig+0x120>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01b      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a29      	ldr	r2, [pc, #164]	@ (8005c20 <TIM_Base_SetConfig+0x124>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d017      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a28      	ldr	r2, [pc, #160]	@ (8005c24 <TIM_Base_SetConfig+0x128>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a27      	ldr	r2, [pc, #156]	@ (8005c28 <TIM_Base_SetConfig+0x12c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00f      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a26      	ldr	r2, [pc, #152]	@ (8005c2c <TIM_Base_SetConfig+0x130>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00b      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a25      	ldr	r2, [pc, #148]	@ (8005c30 <TIM_Base_SetConfig+0x134>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a24      	ldr	r2, [pc, #144]	@ (8005c34 <TIM_Base_SetConfig+0x138>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a23      	ldr	r2, [pc, #140]	@ (8005c38 <TIM_Base_SetConfig+0x13c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d108      	bne.n	8005bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <TIM_Base_SetConfig+0x114>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_Base_SetConfig+0xf8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a0c      	ldr	r2, [pc, #48]	@ (8005c20 <TIM_Base_SetConfig+0x124>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d103      	bne.n	8005bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	615a      	str	r2, [r3, #20]
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40010000 	.word	0x40010000
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	40000c00 	.word	0x40000c00
 8005c20:	40010400 	.word	0x40010400
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800
 8005c30:	40001800 	.word	0x40001800
 8005c34:	40001c00 	.word	0x40001c00
 8005c38:	40002000 	.word	0x40002000

08005c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 030a 	bic.w	r3, r3, #10
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0210 	bic.w	r2, r3, #16
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f043 0307 	orr.w	r3, r3, #7
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e06d      	b.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a30      	ldr	r2, [pc, #192]	@ (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2f      	ldr	r2, [pc, #188]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d108      	bne.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a20      	ldr	r2, [pc, #128]	@ (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d022      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfa:	d01d      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d018      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00e      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a16      	ldr	r2, [pc, #88]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10c      	bne.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40010400 	.word	0x40010400
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40001800 	.word	0x40001800

08005e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e040      	b.n	8005f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fa ff44 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2224      	movs	r2, #36	@ 0x24
 8005eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fca0 	bl	8006810 <UART_SetConfig>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e022      	b.n	8005f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fef8 	bl	8006cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 ff7f 	bl	8006e1c <UART_CheckIdleState>
 8005f1e:	4603      	mov	r3, r0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	@ 0x28
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d171      	bne.n	8006024 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_UART_Transmit+0x24>
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e06a      	b.n	8006026 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2221      	movs	r2, #33	@ 0x21
 8005f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f5e:	f7fb fbeb 	bl	8001738 <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	88fa      	ldrh	r2, [r7, #6]
 8005f68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	88fa      	ldrh	r2, [r7, #6]
 8005f70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7c:	d108      	bne.n	8005f90 <HAL_UART_Transmit+0x68>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	e003      	b.n	8005f98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f98:	e02c      	b.n	8005ff4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2180      	movs	r1, #128	@ 0x80
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 ff70 	bl	8006e8a <UART_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e038      	b.n	8006026 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	e007      	b.n	8005fe2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1cc      	bne.n	8005f9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2200      	movs	r2, #0
 8006008:	2140      	movs	r1, #64	@ 0x40
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 ff3d 	bl	8006e8a <UART_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e005      	b.n	8006026 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	e000      	b.n	8006026 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
  }
}
 8006026:	4618      	mov	r0, r3
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b08a      	sub	sp, #40	@ 0x28
 8006032:	af02      	add	r7, sp, #8
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006044:	2b20      	cmp	r3, #32
 8006046:	f040 80b1 	bne.w	80061ac <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_UART_Receive+0x28>
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0a9      	b.n	80061ae <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2222      	movs	r2, #34	@ 0x22
 8006066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006070:	f7fb fb62 	bl	8001738 <HAL_GetTick>
 8006074:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608e:	d10e      	bne.n	80060ae <HAL_UART_Receive+0x80>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d105      	bne.n	80060a4 <HAL_UART_Receive+0x76>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800609e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060a2:	e02d      	b.n	8006100 <HAL_UART_Receive+0xd2>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	22ff      	movs	r2, #255	@ 0xff
 80060a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060ac:	e028      	b.n	8006100 <HAL_UART_Receive+0xd2>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10d      	bne.n	80060d2 <HAL_UART_Receive+0xa4>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <HAL_UART_Receive+0x9a>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	22ff      	movs	r2, #255	@ 0xff
 80060c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060c6:	e01b      	b.n	8006100 <HAL_UART_Receive+0xd2>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	227f      	movs	r2, #127	@ 0x7f
 80060cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060d0:	e016      	b.n	8006100 <HAL_UART_Receive+0xd2>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060da:	d10d      	bne.n	80060f8 <HAL_UART_Receive+0xca>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <HAL_UART_Receive+0xc0>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	227f      	movs	r2, #127	@ 0x7f
 80060e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060ec:	e008      	b.n	8006100 <HAL_UART_Receive+0xd2>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	223f      	movs	r2, #63	@ 0x3f
 80060f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060f6:	e003      	b.n	8006100 <HAL_UART_Receive+0xd2>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006106:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006110:	d108      	bne.n	8006124 <HAL_UART_Receive+0xf6>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e003      	b.n	800612c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800612c:	e032      	b.n	8006194 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2200      	movs	r2, #0
 8006136:	2120      	movs	r1, #32
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fea6 	bl	8006e8a <UART_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e032      	b.n	80061ae <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10c      	bne.n	8006168 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	b29a      	uxth	r2, r3
 8006156:	8a7b      	ldrh	r3, [r7, #18]
 8006158:	4013      	ands	r3, r2
 800615a:	b29a      	uxth	r2, r3
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	3302      	adds	r3, #2
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e00c      	b.n	8006182 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	b2da      	uxtb	r2, r3
 8006170:	8a7b      	ldrh	r3, [r7, #18]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	4013      	ands	r3, r2
 8006176:	b2da      	uxtb	r2, r3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	3301      	adds	r3, #1
 8006180:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1c6      	bne.n	800612e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e000      	b.n	80061ae <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b08a      	sub	sp, #40	@ 0x28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d132      	bne.n	8006234 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_UART_Receive_IT+0x24>
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e02b      	b.n	8006236 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d018      	beq.n	8006224 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	69f9      	ldr	r1, [r7, #28]
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	61bb      	str	r3, [r7, #24]
   return(result);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	461a      	mov	r2, r3
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fef4 	bl	8007018 <UART_Start_Receive_IT>
 8006230:	4603      	mov	r3, r0
 8006232:	e000      	b.n	8006236 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3728      	adds	r7, #40	@ 0x28
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b0ba      	sub	sp, #232	@ 0xe8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800626a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800626e:	4013      	ands	r3, r2
 8006270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d115      	bne.n	80062a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00f      	beq.n	80062a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d009      	beq.n	80062a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8297 	beq.w	80067cc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
      }
      return;
 80062a6:	e291      	b.n	80067cc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8117 	beq.w	80064e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062c2:	4b85      	ldr	r3, [pc, #532]	@ (80064d8 <HAL_UART_IRQHandler+0x298>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 810a 	beq.w	80064e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d011      	beq.n	80062fc <HAL_UART_IRQHandler+0xbc>
 80062d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2201      	movs	r2, #1
 80062ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f2:	f043 0201 	orr.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d011      	beq.n	800632c <HAL_UART_IRQHandler+0xec>
 8006308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2202      	movs	r2, #2
 800631a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006322:	f043 0204 	orr.w	r2, r3, #4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d011      	beq.n	800635c <HAL_UART_IRQHandler+0x11c>
 8006338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2204      	movs	r2, #4
 800634a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006352:	f043 0202 	orr.w	r2, r3, #2
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d017      	beq.n	8006398 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006378:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800638e:	f043 0208 	orr.w	r2, r3, #8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d012      	beq.n	80063ca <HAL_UART_IRQHandler+0x18a>
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c0:	f043 0220 	orr.w	r2, r3, #32
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 81fd 	beq.w	80067d0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006404:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	2b40      	cmp	r3, #64	@ 0x40
 8006414:	d005      	beq.n	8006422 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800641a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800641e:	2b00      	cmp	r3, #0
 8006420:	d04f      	beq.n	80064c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 febe 	bl	80071a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	d141      	bne.n	80064ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3308      	adds	r3, #8
 800643c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800644c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006462:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800646e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800647a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1d9      	bne.n	8006436 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006486:	2b00      	cmp	r3, #0
 8006488:	d013      	beq.n	80064b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800648e:	4a13      	ldr	r2, [pc, #76]	@ (80064dc <HAL_UART_IRQHandler+0x29c>)
 8006490:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006496:	4618      	mov	r0, r3
 8006498:	f7fc f9f2 	bl	8002880 <HAL_DMA_Abort_IT>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	e00f      	b.n	80064d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f00c fc46 	bl	8012d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	e00b      	b.n	80064d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f00c fc42 	bl	8012d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	e007      	b.n	80064d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f00c fc3e 	bl	8012d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80064d0:	e17e      	b.n	80067d0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d2:	bf00      	nop
    return;
 80064d4:	e17c      	b.n	80067d0 <HAL_UART_IRQHandler+0x590>
 80064d6:	bf00      	nop
 80064d8:	04000120 	.word	0x04000120
 80064dc:	0800726d 	.word	0x0800726d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f040 814c 	bne.w	8006782 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8145 	beq.w	8006782 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 813e 	beq.w	8006782 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2210      	movs	r2, #16
 800650c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	f040 80b6 	bne.w	800668a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800652a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8150 	beq.w	80067d4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800653a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800653e:	429a      	cmp	r2, r3
 8006540:	f080 8148 	bcs.w	80067d4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800654a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006558:	f000 8086 	beq.w	8006668 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800658a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006592:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800659e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1da      	bne.n	800655c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e1      	bne.n	80065a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006608:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800660c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e3      	bne.n	80065e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006638:	f023 0310 	bic.w	r3, r3, #16
 800663c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800664a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800664c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006650:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e4      	bne.n	8006628 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	4618      	mov	r0, r3
 8006664:	f7fc f89c 	bl	80027a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800667a:	b29b      	uxth	r3, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	b29b      	uxth	r3, r3
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8b8 	bl	80067f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006688:	e0a4      	b.n	80067d4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006696:	b29b      	uxth	r3, r3
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8096 	beq.w	80067d8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80066ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8091 	beq.w	80067d8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e4      	bne.n	80066b6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3308      	adds	r3, #8
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	623b      	str	r3, [r7, #32]
   return(result);
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006710:	633a      	str	r2, [r7, #48]	@ 0x30
 8006712:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e3      	bne.n	80066ec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	60fb      	str	r3, [r7, #12]
   return(result);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0310 	bic.w	r3, r3, #16
 800674c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	69b9      	ldr	r1, [r7, #24]
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	617b      	str	r3, [r7, #20]
   return(result);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e4      	bne.n	8006738 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f83c 	bl	80067f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006780:	e02a      	b.n	80067d8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00e      	beq.n	80067ac <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01c      	beq.n	80067dc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
    }
    return;
 80067aa:	e017      	b.n	80067dc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d012      	beq.n	80067de <HAL_UART_IRQHandler+0x59e>
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00c      	beq.n	80067de <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fd67 	bl	8007298 <UART_EndTransmit_IT>
    return;
 80067ca:	e008      	b.n	80067de <HAL_UART_IRQHandler+0x59e>
      return;
 80067cc:	bf00      	nop
 80067ce:	e006      	b.n	80067de <HAL_UART_IRQHandler+0x59e>
    return;
 80067d0:	bf00      	nop
 80067d2:	e004      	b.n	80067de <HAL_UART_IRQHandler+0x59e>
      return;
 80067d4:	bf00      	nop
 80067d6:	e002      	b.n	80067de <HAL_UART_IRQHandler+0x59e>
      return;
 80067d8:	bf00      	nop
 80067da:	e000      	b.n	80067de <HAL_UART_IRQHandler+0x59e>
    return;
 80067dc:	bf00      	nop
  }

}
 80067de:	37e8      	adds	r7, #232	@ 0xe8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4ba6      	ldr	r3, [pc, #664]	@ (8006ad4 <UART_SetConfig+0x2c4>)
 800683c:	4013      	ands	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	6979      	ldr	r1, [r7, #20]
 8006844:	430b      	orrs	r3, r1
 8006846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	430a      	orrs	r2, r1
 8006880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a94      	ldr	r2, [pc, #592]	@ (8006ad8 <UART_SetConfig+0x2c8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d120      	bne.n	80068ce <UART_SetConfig+0xbe>
 800688c:	4b93      	ldr	r3, [pc, #588]	@ (8006adc <UART_SetConfig+0x2cc>)
 800688e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	2b03      	cmp	r3, #3
 8006898:	d816      	bhi.n	80068c8 <UART_SetConfig+0xb8>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <UART_SetConfig+0x90>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068bd 	.word	0x080068bd
 80068a8:	080068b7 	.word	0x080068b7
 80068ac:	080068c3 	.word	0x080068c3
 80068b0:	2301      	movs	r3, #1
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e150      	b.n	8006b58 <UART_SetConfig+0x348>
 80068b6:	2302      	movs	r3, #2
 80068b8:	77fb      	strb	r3, [r7, #31]
 80068ba:	e14d      	b.n	8006b58 <UART_SetConfig+0x348>
 80068bc:	2304      	movs	r3, #4
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	e14a      	b.n	8006b58 <UART_SetConfig+0x348>
 80068c2:	2308      	movs	r3, #8
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e147      	b.n	8006b58 <UART_SetConfig+0x348>
 80068c8:	2310      	movs	r3, #16
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e144      	b.n	8006b58 <UART_SetConfig+0x348>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a83      	ldr	r2, [pc, #524]	@ (8006ae0 <UART_SetConfig+0x2d0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d132      	bne.n	800693e <UART_SetConfig+0x12e>
 80068d8:	4b80      	ldr	r3, [pc, #512]	@ (8006adc <UART_SetConfig+0x2cc>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	2b0c      	cmp	r3, #12
 80068e4:	d828      	bhi.n	8006938 <UART_SetConfig+0x128>
 80068e6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <UART_SetConfig+0xdc>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006921 	.word	0x08006921
 80068f0:	08006939 	.word	0x08006939
 80068f4:	08006939 	.word	0x08006939
 80068f8:	08006939 	.word	0x08006939
 80068fc:	0800692d 	.word	0x0800692d
 8006900:	08006939 	.word	0x08006939
 8006904:	08006939 	.word	0x08006939
 8006908:	08006939 	.word	0x08006939
 800690c:	08006927 	.word	0x08006927
 8006910:	08006939 	.word	0x08006939
 8006914:	08006939 	.word	0x08006939
 8006918:	08006939 	.word	0x08006939
 800691c:	08006933 	.word	0x08006933
 8006920:	2300      	movs	r3, #0
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e118      	b.n	8006b58 <UART_SetConfig+0x348>
 8006926:	2302      	movs	r3, #2
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e115      	b.n	8006b58 <UART_SetConfig+0x348>
 800692c:	2304      	movs	r3, #4
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e112      	b.n	8006b58 <UART_SetConfig+0x348>
 8006932:	2308      	movs	r3, #8
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e10f      	b.n	8006b58 <UART_SetConfig+0x348>
 8006938:	2310      	movs	r3, #16
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e10c      	b.n	8006b58 <UART_SetConfig+0x348>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a68      	ldr	r2, [pc, #416]	@ (8006ae4 <UART_SetConfig+0x2d4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d120      	bne.n	800698a <UART_SetConfig+0x17a>
 8006948:	4b64      	ldr	r3, [pc, #400]	@ (8006adc <UART_SetConfig+0x2cc>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006952:	2b30      	cmp	r3, #48	@ 0x30
 8006954:	d013      	beq.n	800697e <UART_SetConfig+0x16e>
 8006956:	2b30      	cmp	r3, #48	@ 0x30
 8006958:	d814      	bhi.n	8006984 <UART_SetConfig+0x174>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d009      	beq.n	8006972 <UART_SetConfig+0x162>
 800695e:	2b20      	cmp	r3, #32
 8006960:	d810      	bhi.n	8006984 <UART_SetConfig+0x174>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <UART_SetConfig+0x15c>
 8006966:	2b10      	cmp	r3, #16
 8006968:	d006      	beq.n	8006978 <UART_SetConfig+0x168>
 800696a:	e00b      	b.n	8006984 <UART_SetConfig+0x174>
 800696c:	2300      	movs	r3, #0
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e0f2      	b.n	8006b58 <UART_SetConfig+0x348>
 8006972:	2302      	movs	r3, #2
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e0ef      	b.n	8006b58 <UART_SetConfig+0x348>
 8006978:	2304      	movs	r3, #4
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e0ec      	b.n	8006b58 <UART_SetConfig+0x348>
 800697e:	2308      	movs	r3, #8
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e0e9      	b.n	8006b58 <UART_SetConfig+0x348>
 8006984:	2310      	movs	r3, #16
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e0e6      	b.n	8006b58 <UART_SetConfig+0x348>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a56      	ldr	r2, [pc, #344]	@ (8006ae8 <UART_SetConfig+0x2d8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d120      	bne.n	80069d6 <UART_SetConfig+0x1c6>
 8006994:	4b51      	ldr	r3, [pc, #324]	@ (8006adc <UART_SetConfig+0x2cc>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800699e:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a0:	d013      	beq.n	80069ca <UART_SetConfig+0x1ba>
 80069a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a4:	d814      	bhi.n	80069d0 <UART_SetConfig+0x1c0>
 80069a6:	2b80      	cmp	r3, #128	@ 0x80
 80069a8:	d009      	beq.n	80069be <UART_SetConfig+0x1ae>
 80069aa:	2b80      	cmp	r3, #128	@ 0x80
 80069ac:	d810      	bhi.n	80069d0 <UART_SetConfig+0x1c0>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <UART_SetConfig+0x1a8>
 80069b2:	2b40      	cmp	r3, #64	@ 0x40
 80069b4:	d006      	beq.n	80069c4 <UART_SetConfig+0x1b4>
 80069b6:	e00b      	b.n	80069d0 <UART_SetConfig+0x1c0>
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e0cc      	b.n	8006b58 <UART_SetConfig+0x348>
 80069be:	2302      	movs	r3, #2
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e0c9      	b.n	8006b58 <UART_SetConfig+0x348>
 80069c4:	2304      	movs	r3, #4
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e0c6      	b.n	8006b58 <UART_SetConfig+0x348>
 80069ca:	2308      	movs	r3, #8
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e0c3      	b.n	8006b58 <UART_SetConfig+0x348>
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e0c0      	b.n	8006b58 <UART_SetConfig+0x348>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a44      	ldr	r2, [pc, #272]	@ (8006aec <UART_SetConfig+0x2dc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d125      	bne.n	8006a2c <UART_SetConfig+0x21c>
 80069e0:	4b3e      	ldr	r3, [pc, #248]	@ (8006adc <UART_SetConfig+0x2cc>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ee:	d017      	beq.n	8006a20 <UART_SetConfig+0x210>
 80069f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069f4:	d817      	bhi.n	8006a26 <UART_SetConfig+0x216>
 80069f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069fa:	d00b      	beq.n	8006a14 <UART_SetConfig+0x204>
 80069fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a00:	d811      	bhi.n	8006a26 <UART_SetConfig+0x216>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <UART_SetConfig+0x1fe>
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a0a:	d006      	beq.n	8006a1a <UART_SetConfig+0x20a>
 8006a0c:	e00b      	b.n	8006a26 <UART_SetConfig+0x216>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e0a1      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a14:	2302      	movs	r3, #2
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e09e      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e09b      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a20:	2308      	movs	r3, #8
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e098      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a26:	2310      	movs	r3, #16
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e095      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a2f      	ldr	r2, [pc, #188]	@ (8006af0 <UART_SetConfig+0x2e0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d125      	bne.n	8006a82 <UART_SetConfig+0x272>
 8006a36:	4b29      	ldr	r3, [pc, #164]	@ (8006adc <UART_SetConfig+0x2cc>)
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a44:	d017      	beq.n	8006a76 <UART_SetConfig+0x266>
 8006a46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a4a:	d817      	bhi.n	8006a7c <UART_SetConfig+0x26c>
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a50:	d00b      	beq.n	8006a6a <UART_SetConfig+0x25a>
 8006a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a56:	d811      	bhi.n	8006a7c <UART_SetConfig+0x26c>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <UART_SetConfig+0x254>
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a60:	d006      	beq.n	8006a70 <UART_SetConfig+0x260>
 8006a62:	e00b      	b.n	8006a7c <UART_SetConfig+0x26c>
 8006a64:	2301      	movs	r3, #1
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e076      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	77fb      	strb	r3, [r7, #31]
 8006a6e:	e073      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a70:	2304      	movs	r3, #4
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e070      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a76:	2308      	movs	r3, #8
 8006a78:	77fb      	strb	r3, [r7, #31]
 8006a7a:	e06d      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e06a      	b.n	8006b58 <UART_SetConfig+0x348>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1b      	ldr	r2, [pc, #108]	@ (8006af4 <UART_SetConfig+0x2e4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d138      	bne.n	8006afe <UART_SetConfig+0x2ee>
 8006a8c:	4b13      	ldr	r3, [pc, #76]	@ (8006adc <UART_SetConfig+0x2cc>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a9a:	d017      	beq.n	8006acc <UART_SetConfig+0x2bc>
 8006a9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006aa0:	d82a      	bhi.n	8006af8 <UART_SetConfig+0x2e8>
 8006aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa6:	d00b      	beq.n	8006ac0 <UART_SetConfig+0x2b0>
 8006aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aac:	d824      	bhi.n	8006af8 <UART_SetConfig+0x2e8>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <UART_SetConfig+0x2aa>
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab6:	d006      	beq.n	8006ac6 <UART_SetConfig+0x2b6>
 8006ab8:	e01e      	b.n	8006af8 <UART_SetConfig+0x2e8>
 8006aba:	2300      	movs	r3, #0
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e04b      	b.n	8006b58 <UART_SetConfig+0x348>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e048      	b.n	8006b58 <UART_SetConfig+0x348>
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e045      	b.n	8006b58 <UART_SetConfig+0x348>
 8006acc:	2308      	movs	r3, #8
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e042      	b.n	8006b58 <UART_SetConfig+0x348>
 8006ad2:	bf00      	nop
 8006ad4:	efff69f3 	.word	0xefff69f3
 8006ad8:	40011000 	.word	0x40011000
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40004400 	.word	0x40004400
 8006ae4:	40004800 	.word	0x40004800
 8006ae8:	40004c00 	.word	0x40004c00
 8006aec:	40005000 	.word	0x40005000
 8006af0:	40011400 	.word	0x40011400
 8006af4:	40007800 	.word	0x40007800
 8006af8:	2310      	movs	r3, #16
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e02c      	b.n	8006b58 <UART_SetConfig+0x348>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a72      	ldr	r2, [pc, #456]	@ (8006ccc <UART_SetConfig+0x4bc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d125      	bne.n	8006b54 <UART_SetConfig+0x344>
 8006b08:	4b71      	ldr	r3, [pc, #452]	@ (8006cd0 <UART_SetConfig+0x4c0>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b16:	d017      	beq.n	8006b48 <UART_SetConfig+0x338>
 8006b18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b1c:	d817      	bhi.n	8006b4e <UART_SetConfig+0x33e>
 8006b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b22:	d00b      	beq.n	8006b3c <UART_SetConfig+0x32c>
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b28:	d811      	bhi.n	8006b4e <UART_SetConfig+0x33e>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <UART_SetConfig+0x326>
 8006b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b32:	d006      	beq.n	8006b42 <UART_SetConfig+0x332>
 8006b34:	e00b      	b.n	8006b4e <UART_SetConfig+0x33e>
 8006b36:	2300      	movs	r3, #0
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e00d      	b.n	8006b58 <UART_SetConfig+0x348>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e00a      	b.n	8006b58 <UART_SetConfig+0x348>
 8006b42:	2304      	movs	r3, #4
 8006b44:	77fb      	strb	r3, [r7, #31]
 8006b46:	e007      	b.n	8006b58 <UART_SetConfig+0x348>
 8006b48:	2308      	movs	r3, #8
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e004      	b.n	8006b58 <UART_SetConfig+0x348>
 8006b4e:	2310      	movs	r3, #16
 8006b50:	77fb      	strb	r3, [r7, #31]
 8006b52:	e001      	b.n	8006b58 <UART_SetConfig+0x348>
 8006b54:	2310      	movs	r3, #16
 8006b56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b60:	d15b      	bne.n	8006c1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b62:	7ffb      	ldrb	r3, [r7, #31]
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d828      	bhi.n	8006bba <UART_SetConfig+0x3aa>
 8006b68:	a201      	add	r2, pc, #4	@ (adr r2, 8006b70 <UART_SetConfig+0x360>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006ba5 	.word	0x08006ba5
 8006b7c:	08006bbb 	.word	0x08006bbb
 8006b80:	08006bab 	.word	0x08006bab
 8006b84:	08006bbb 	.word	0x08006bbb
 8006b88:	08006bbb 	.word	0x08006bbb
 8006b8c:	08006bbb 	.word	0x08006bbb
 8006b90:	08006bb3 	.word	0x08006bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b94:	f7fe fa78 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8006b98:	61b8      	str	r0, [r7, #24]
        break;
 8006b9a:	e013      	b.n	8006bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b9c:	f7fe fa88 	bl	80050b0 <HAL_RCC_GetPCLK2Freq>
 8006ba0:	61b8      	str	r0, [r7, #24]
        break;
 8006ba2:	e00f      	b.n	8006bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd4 <UART_SetConfig+0x4c4>)
 8006ba6:	61bb      	str	r3, [r7, #24]
        break;
 8006ba8:	e00c      	b.n	8006bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006baa:	f7fe f95b 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8006bae:	61b8      	str	r0, [r7, #24]
        break;
 8006bb0:	e008      	b.n	8006bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb6:	61bb      	str	r3, [r7, #24]
        break;
 8006bb8:	e004      	b.n	8006bc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d074      	beq.n	8006cb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	005a      	lsls	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	441a      	add	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d916      	bls.n	8006c14 <UART_SetConfig+0x404>
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bec:	d212      	bcs.n	8006c14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f023 030f 	bic.w	r3, r3, #15
 8006bf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	89fb      	ldrh	r3, [r7, #14]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	89fa      	ldrh	r2, [r7, #14]
 8006c10:	60da      	str	r2, [r3, #12]
 8006c12:	e04f      	b.n	8006cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	77bb      	strb	r3, [r7, #30]
 8006c18:	e04c      	b.n	8006cb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c1a:	7ffb      	ldrb	r3, [r7, #31]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d828      	bhi.n	8006c72 <UART_SetConfig+0x462>
 8006c20:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <UART_SetConfig+0x418>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c5d 	.word	0x08006c5d
 8006c34:	08006c73 	.word	0x08006c73
 8006c38:	08006c63 	.word	0x08006c63
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006c73 	.word	0x08006c73
 8006c44:	08006c73 	.word	0x08006c73
 8006c48:	08006c6b 	.word	0x08006c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fe fa1c 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8006c50:	61b8      	str	r0, [r7, #24]
        break;
 8006c52:	e013      	b.n	8006c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c54:	f7fe fa2c 	bl	80050b0 <HAL_RCC_GetPCLK2Freq>
 8006c58:	61b8      	str	r0, [r7, #24]
        break;
 8006c5a:	e00f      	b.n	8006c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd4 <UART_SetConfig+0x4c4>)
 8006c5e:	61bb      	str	r3, [r7, #24]
        break;
 8006c60:	e00c      	b.n	8006c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c62:	f7fe f8ff 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8006c66:	61b8      	str	r0, [r7, #24]
        break;
 8006c68:	e008      	b.n	8006c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c6e:	61bb      	str	r3, [r7, #24]
        break;
 8006c70:	e004      	b.n	8006c7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	77bb      	strb	r3, [r7, #30]
        break;
 8006c7a:	bf00      	nop
    }

    if (pclk != 0U)
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d018      	beq.n	8006cb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	085a      	lsrs	r2, r3, #1
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	441a      	add	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b0f      	cmp	r3, #15
 8006c9a:	d909      	bls.n	8006cb0 <UART_SetConfig+0x4a0>
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca2:	d205      	bcs.n	8006cb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e001      	b.n	8006cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40007c00 	.word	0x40007c00
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	00f42400 	.word	0x00f42400

08006cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01a      	beq.n	8006dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd6:	d10a      	bne.n	8006dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  }
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e2c:	f7fa fc84 	bl	8001738 <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d10e      	bne.n	8006e5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f81b 	bl	8006e8a <UART_WaitOnFlagUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e011      	b.n	8006e82 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b09c      	sub	sp, #112	@ 0x70
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	603b      	str	r3, [r7, #0]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9a:	e0a7      	b.n	8006fec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea2:	f000 80a3 	beq.w	8006fec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fa fc47 	bl	8001738 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x32>
 8006eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d13f      	bne.n	8006f3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ecc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006ed0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006edc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ee0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e6      	bne.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f0e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006f10:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e5      	bne.n	8006eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2220      	movs	r2, #32
 8006f26:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e068      	b.n	800700e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d050      	beq.n	8006fec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f58:	d148      	bne.n	8006fec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f84:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e6      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006fb6:	623a      	str	r2, [r7, #32]
 8006fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	69f9      	ldr	r1, [r7, #28]
 8006fbc:	6a3a      	ldr	r2, [r7, #32]
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e010      	b.n	800700e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69da      	ldr	r2, [r3, #28]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	429a      	cmp	r2, r3
 8007008:	f43f af48 	beq.w	8006e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3770      	adds	r7, #112	@ 0x70
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007018:	b480      	push	{r7}
 800701a:	b097      	sub	sp, #92	@ 0x5c
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	88fa      	ldrh	r2, [r7, #6]
 8007038:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704a:	d10e      	bne.n	800706a <UART_Start_Receive_IT+0x52>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <UART_Start_Receive_IT+0x48>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800705a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800705e:	e02d      	b.n	80070bc <UART_Start_Receive_IT+0xa4>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	22ff      	movs	r2, #255	@ 0xff
 8007064:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007068:	e028      	b.n	80070bc <UART_Start_Receive_IT+0xa4>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10d      	bne.n	800708e <UART_Start_Receive_IT+0x76>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <UART_Start_Receive_IT+0x6c>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	22ff      	movs	r2, #255	@ 0xff
 800707e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007082:	e01b      	b.n	80070bc <UART_Start_Receive_IT+0xa4>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	227f      	movs	r2, #127	@ 0x7f
 8007088:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800708c:	e016      	b.n	80070bc <UART_Start_Receive_IT+0xa4>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007096:	d10d      	bne.n	80070b4 <UART_Start_Receive_IT+0x9c>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <UART_Start_Receive_IT+0x92>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	227f      	movs	r2, #127	@ 0x7f
 80070a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070a8:	e008      	b.n	80070bc <UART_Start_Receive_IT+0xa4>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	223f      	movs	r2, #63	@ 0x3f
 80070ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070b2:	e003      	b.n	80070bc <UART_Start_Receive_IT+0xa4>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2222      	movs	r2, #34	@ 0x22
 80070c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3308      	adds	r3, #8
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80070ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80070fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007108:	d107      	bne.n	800711a <UART_Start_Receive_IT+0x102>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d103      	bne.n	800711a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4a21      	ldr	r2, [pc, #132]	@ (800719c <UART_Start_Receive_IT+0x184>)
 8007116:	669a      	str	r2, [r3, #104]	@ 0x68
 8007118:	e002      	b.n	8007120 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4a20      	ldr	r2, [pc, #128]	@ (80071a0 <UART_Start_Receive_IT+0x188>)
 800711e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d019      	beq.n	800715c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800713c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
 8007148:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800714c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e6      	bne.n	8007128 <UART_Start_Receive_IT+0x110>
 800715a:	e018      	b.n	800718e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	613b      	str	r3, [r7, #16]
   return(result);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f043 0320 	orr.w	r3, r3, #32
 8007170:	653b      	str	r3, [r7, #80]	@ 0x50
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800717a:	623b      	str	r3, [r7, #32]
 800717c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	69f9      	ldr	r1, [r7, #28]
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	61bb      	str	r3, [r7, #24]
   return(result);
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	375c      	adds	r7, #92	@ 0x5c
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	08007453 	.word	0x08007453
 80071a0:	080072ed 	.word	0x080072ed

080071a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b095      	sub	sp, #84	@ 0x54
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80071cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e6      	bne.n	80071ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e5      	bne.n	80071de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007216:	2b01      	cmp	r3, #1
 8007218:	d118      	bne.n	800724c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	60bb      	str	r3, [r7, #8]
   return(result);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f023 0310 	bic.w	r3, r3, #16
 800722e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6979      	ldr	r1, [r7, #20]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	613b      	str	r3, [r7, #16]
   return(result);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e6      	bne.n	800721a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007260:	bf00      	nop
 8007262:	3754      	adds	r7, #84	@ 0x54
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f00b fd5a 	bl	8012d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6979      	ldr	r1, [r7, #20]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	613b      	str	r3, [r7, #16]
   return(result);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e6      	bne.n	80072a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fa80 	bl	80067e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e4:	bf00      	nop
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b096      	sub	sp, #88	@ 0x58
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007304:	2b22      	cmp	r3, #34	@ 0x22
 8007306:	f040 8098 	bne.w	800743a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007314:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007318:	b2d9      	uxtb	r1, r3
 800731a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007324:	400a      	ands	r2, r1
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d17b      	bne.n	800744a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007366:	653b      	str	r3, [r7, #80]	@ 0x50
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007370:	647b      	str	r3, [r7, #68]	@ 0x44
 8007372:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800737e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3308      	adds	r3, #8
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	623b      	str	r3, [r7, #32]
   return(result);
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3308      	adds	r3, #8
 80073a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80073a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e5      	bne.n	8007384 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d12e      	bne.n	8007432 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0310 	bic.w	r3, r3, #16
 80073ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	69b9      	ldr	r1, [r7, #24]
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	617b      	str	r3, [r7, #20]
   return(result);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b10      	cmp	r3, #16
 8007418:	d103      	bne.n	8007422 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2210      	movs	r2, #16
 8007420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff f9e4 	bl	80067f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007430:	e00b      	b.n	800744a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f00b fc62 	bl	8012cfc <HAL_UART_RxCpltCallback>
}
 8007438:	e007      	b.n	800744a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0208 	orr.w	r2, r2, #8
 8007448:	619a      	str	r2, [r3, #24]
}
 800744a:	bf00      	nop
 800744c:	3758      	adds	r7, #88	@ 0x58
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b096      	sub	sp, #88	@ 0x58
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007460:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800746a:	2b22      	cmp	r3, #34	@ 0x22
 800746c:	f040 8098 	bne.w	80075a0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007476:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007480:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007484:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007488:	4013      	ands	r3, r2
 800748a:	b29a      	uxth	r2, r3
 800748c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800748e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007494:	1c9a      	adds	r2, r3, #2
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d17b      	bne.n	80075b0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80074d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e6      	bne.n	80074b8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800750a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800750c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e5      	bne.n	80074ea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007536:	2b01      	cmp	r3, #1
 8007538:	d12e      	bne.n	8007598 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	60bb      	str	r3, [r7, #8]
   return(result);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f023 0310 	bic.w	r3, r3, #16
 8007554:	647b      	str	r3, [r7, #68]	@ 0x44
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6979      	ldr	r1, [r7, #20]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	613b      	str	r3, [r7, #16]
   return(result);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e6      	bne.n	8007540 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b10      	cmp	r3, #16
 800757e:	d103      	bne.n	8007588 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2210      	movs	r2, #16
 8007586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff f931 	bl	80067f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007596:	e00b      	b.n	80075b0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f00b fbaf 	bl	8012cfc <HAL_UART_RxCpltCallback>
}
 800759e:	e007      	b.n	80075b0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0208 	orr.w	r2, r2, #8
 80075ae:	619a      	str	r2, [r3, #24]
}
 80075b0:	bf00      	nop
 80075b2:	3758      	adds	r7, #88	@ 0x58
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075b8:	b084      	sub	sp, #16
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	f107 001c 	add.w	r0, r7, #28
 80075c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d120      	bne.n	8007612 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	4b20      	ldr	r3, [pc, #128]	@ (8007664 <USB_CoreInit+0xac>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d105      	bne.n	8007606 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa96 	bl	8007b38 <USB_CoreReset>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]
 8007610:	e010      	b.n	8007634 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa8a 	bl	8007b38 <USB_CoreReset>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	2b01      	cmp	r3, #1
 8007638:	d10b      	bne.n	8007652 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f043 0206 	orr.w	r2, r3, #6
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f043 0220 	orr.w	r2, r3, #32
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800765e:	b004      	add	sp, #16
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	ffbdffbf 	.word	0xffbdffbf

08007668 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f023 0201 	bic.w	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d115      	bne.n	80076d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076b8:	2001      	movs	r0, #1
 80076ba:	f7fa f849 	bl	8001750 <HAL_Delay>
      ms++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fa29 	bl	8007b1c <USB_GetMode>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d01e      	beq.n	800770e <USB_SetCurrentMode+0x84>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b31      	cmp	r3, #49	@ 0x31
 80076d4:	d9f0      	bls.n	80076b8 <USB_SetCurrentMode+0x2e>
 80076d6:	e01a      	b.n	800770e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d115      	bne.n	800770a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076ea:	2001      	movs	r0, #1
 80076ec:	f7fa f830 	bl	8001750 <HAL_Delay>
      ms++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa10 	bl	8007b1c <USB_GetMode>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d005      	beq.n	800770e <USB_SetCurrentMode+0x84>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b31      	cmp	r3, #49	@ 0x31
 8007706:	d9f0      	bls.n	80076ea <USB_SetCurrentMode+0x60>
 8007708:	e001      	b.n	800770e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e005      	b.n	800771a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b32      	cmp	r3, #50	@ 0x32
 8007712:	d101      	bne.n	8007718 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007724:	b084      	sub	sp, #16
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	e009      	b.n	8007758 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3340      	adds	r3, #64	@ 0x40
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	2200      	movs	r2, #0
 8007750:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3301      	adds	r3, #1
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b0e      	cmp	r3, #14
 800775c:	d9f2      	bls.n	8007744 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800775e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11c      	bne.n	800779e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007772:	f043 0302 	orr.w	r3, r3, #2
 8007776:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e005      	b.n	80077aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077b0:	461a      	mov	r2, r3
 80077b2:	2300      	movs	r3, #0
 80077b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077bc:	4619      	mov	r1, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c4:	461a      	mov	r2, r3
 80077c6:	680b      	ldr	r3, [r1, #0]
 80077c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d10c      	bne.n	80077ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077d6:	2100      	movs	r1, #0
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f965 	bl	8007aa8 <USB_SetDevSpeed>
 80077de:	e008      	b.n	80077f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077e0:	2101      	movs	r1, #1
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f960 	bl	8007aa8 <USB_SetDevSpeed>
 80077e8:	e003      	b.n	80077f2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077ea:	2103      	movs	r1, #3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f95b 	bl	8007aa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077f2:	2110      	movs	r1, #16
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f8f3 	bl	80079e0 <USB_FlushTxFifo>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f91f 	bl	8007a48 <USB_FlushRxFifo>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781a:	461a      	mov	r2, r3
 800781c:	2300      	movs	r3, #0
 800781e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007826:	461a      	mov	r2, r3
 8007828:	2300      	movs	r3, #0
 800782a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007832:	461a      	mov	r2, r3
 8007834:	2300      	movs	r3, #0
 8007836:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007838:	2300      	movs	r3, #0
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	e043      	b.n	80078c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007854:	d118      	bne.n	8007888 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007868:	461a      	mov	r2, r3
 800786a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	e013      	b.n	800789a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787e:	461a      	mov	r2, r3
 8007880:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e008      	b.n	800789a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a6:	461a      	mov	r2, r3
 80078a8:	2300      	movs	r3, #0
 80078aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b8:	461a      	mov	r2, r3
 80078ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3301      	adds	r3, #1
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d3b7      	bcc.n	800783e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	e043      	b.n	800795c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078ea:	d118      	bne.n	800791e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078fe:	461a      	mov	r2, r3
 8007900:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e013      	b.n	8007930 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	e008      	b.n	8007930 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793c:	461a      	mov	r2, r3
 800793e:	2300      	movs	r3, #0
 8007940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794e:	461a      	mov	r2, r3
 8007950:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007954:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3301      	adds	r3, #1
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	429a      	cmp	r2, r3
 8007962:	d3b7      	bcc.n	80078d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007972:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007976:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007984:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	2b00      	cmp	r3, #0
 800798a:	d105      	bne.n	8007998 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f043 0210 	orr.w	r2, r3, #16
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	4b0e      	ldr	r3, [pc, #56]	@ (80079d8 <USB_DevInit+0x2b4>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f043 0208 	orr.w	r2, r3, #8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d105      	bne.n	80079c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699a      	ldr	r2, [r3, #24]
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <USB_DevInit+0x2b8>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079d4:	b004      	add	sp, #16
 80079d6:	4770      	bx	lr
 80079d8:	803c3800 	.word	0x803c3800
 80079dc:	40000004 	.word	0x40000004

080079e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3301      	adds	r3, #1
 80079f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4a13      	ldr	r2, [pc, #76]	@ (8007a44 <USB_FlushTxFifo+0x64>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d901      	bls.n	8007a00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e01b      	b.n	8007a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	daf2      	bge.n	80079ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	019b      	lsls	r3, r3, #6
 8007a10:	f043 0220 	orr.w	r2, r3, #32
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4a08      	ldr	r2, [pc, #32]	@ (8007a44 <USB_FlushTxFifo+0x64>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d901      	bls.n	8007a2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e006      	b.n	8007a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d0f0      	beq.n	8007a18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	00030d40 	.word	0x00030d40

08007a48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4a11      	ldr	r2, [pc, #68]	@ (8007aa4 <USB_FlushRxFifo+0x5c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e018      	b.n	8007a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	daf2      	bge.n	8007a54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2210      	movs	r2, #16
 8007a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4a08      	ldr	r2, [pc, #32]	@ (8007aa4 <USB_FlushRxFifo+0x5c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d901      	bls.n	8007a8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e006      	b.n	8007a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d0f0      	beq.n	8007a78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	00030d40 	.word	0x00030d40

08007aa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007af4:	f023 0303 	bic.w	r3, r3, #3
 8007af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b08:	f043 0302 	orr.w	r3, r3, #2
 8007b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	f003 0301 	and.w	r3, r3, #1
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4a13      	ldr	r2, [pc, #76]	@ (8007b9c <USB_CoreReset+0x64>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d901      	bls.n	8007b56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e01b      	b.n	8007b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	daf2      	bge.n	8007b44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f043 0201 	orr.w	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4a09      	ldr	r2, [pc, #36]	@ (8007b9c <USB_CoreReset+0x64>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d901      	bls.n	8007b80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e006      	b.n	8007b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d0f0      	beq.n	8007b6e <USB_CoreReset+0x36>

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	00030d40 	.word	0x00030d40

08007ba0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007ba8:	22c0      	movs	r2, #192	@ 0xc0
 8007baa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007bac:	4b8b      	ldr	r3, [pc, #556]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007bae:	22a8      	movs	r2, #168	@ 0xa8
 8007bb0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 8007bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8007bb8:	4b88      	ldr	r3, [pc, #544]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007bba:	2202      	movs	r2, #2
 8007bbc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007bbe:	4b88      	ldr	r3, [pc, #544]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007bc0:	22ff      	movs	r2, #255	@ 0xff
 8007bc2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007bc4:	4b86      	ldr	r3, [pc, #536]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007bc6:	22ff      	movs	r2, #255	@ 0xff
 8007bc8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007bca:	4b85      	ldr	r3, [pc, #532]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007bcc:	22ff      	movs	r2, #255	@ 0xff
 8007bce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007bd0:	4b83      	ldr	r3, [pc, #524]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007bd6:	4b83      	ldr	r3, [pc, #524]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007bd8:	22c0      	movs	r2, #192	@ 0xc0
 8007bda:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007bdc:	4b81      	ldr	r3, [pc, #516]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007bde:	22a8      	movs	r2, #168	@ 0xa8
 8007be0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 7;
 8007be2:	4b80      	ldr	r3, [pc, #512]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007be4:	2207      	movs	r2, #7
 8007be6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007be8:	4b7e      	ldr	r3, [pc, #504]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007bee:	f000 fd25 	bl	800863c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	061a      	lsls	r2, r3, #24
 8007bf8:	4b78      	ldr	r3, [pc, #480]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	041b      	lsls	r3, r3, #16
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	4b76      	ldr	r3, [pc, #472]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c02:	789b      	ldrb	r3, [r3, #2]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	4313      	orrs	r3, r2
 8007c08:	4a74      	ldr	r2, [pc, #464]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c0a:	78d2      	ldrb	r2, [r2, #3]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	061a      	lsls	r2, r3, #24
 8007c10:	4b72      	ldr	r3, [pc, #456]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	0619      	lsls	r1, r3, #24
 8007c16:	4b71      	ldr	r3, [pc, #452]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	041b      	lsls	r3, r3, #16
 8007c1c:	4319      	orrs	r1, r3
 8007c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c20:	789b      	ldrb	r3, [r3, #2]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	430b      	orrs	r3, r1
 8007c26:	496d      	ldr	r1, [pc, #436]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c28:	78c9      	ldrb	r1, [r1, #3]
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c32:	431a      	orrs	r2, r3
 8007c34:	4b69      	ldr	r3, [pc, #420]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	0619      	lsls	r1, r3, #24
 8007c3a:	4b68      	ldr	r3, [pc, #416]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	4319      	orrs	r1, r3
 8007c42:	4b66      	ldr	r3, [pc, #408]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c44:	789b      	ldrb	r3, [r3, #2]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	4964      	ldr	r1, [pc, #400]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c4c:	78c9      	ldrb	r1, [r1, #3]
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	0a1b      	lsrs	r3, r3, #8
 8007c52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c56:	431a      	orrs	r2, r3
 8007c58:	4b60      	ldr	r3, [pc, #384]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	0619      	lsls	r1, r3, #24
 8007c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	4319      	orrs	r1, r3
 8007c66:	4b5d      	ldr	r3, [pc, #372]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c68:	789b      	ldrb	r3, [r3, #2]
 8007c6a:	021b      	lsls	r3, r3, #8
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	495b      	ldr	r1, [pc, #364]	@ (8007ddc <MX_LWIP_Init+0x23c>)
 8007c70:	78c9      	ldrb	r1, [r1, #3]
 8007c72:	430b      	orrs	r3, r1
 8007c74:	0e1b      	lsrs	r3, r3, #24
 8007c76:	4313      	orrs	r3, r2
 8007c78:	4a5b      	ldr	r2, [pc, #364]	@ (8007de8 <MX_LWIP_Init+0x248>)
 8007c7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007c7c:	4b58      	ldr	r3, [pc, #352]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	061a      	lsls	r2, r3, #24
 8007c82:	4b57      	ldr	r3, [pc, #348]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	4b55      	ldr	r3, [pc, #340]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007c8c:	789b      	ldrb	r3, [r3, #2]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	4313      	orrs	r3, r2
 8007c92:	4a53      	ldr	r2, [pc, #332]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007c94:	78d2      	ldrb	r2, [r2, #3]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	061a      	lsls	r2, r3, #24
 8007c9a:	4b51      	ldr	r3, [pc, #324]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	0619      	lsls	r1, r3, #24
 8007ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	041b      	lsls	r3, r3, #16
 8007ca6:	4319      	orrs	r1, r3
 8007ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007caa:	789b      	ldrb	r3, [r3, #2]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	494b      	ldr	r1, [pc, #300]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cb2:	78c9      	ldrb	r1, [r1, #3]
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	4b48      	ldr	r3, [pc, #288]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	0619      	lsls	r1, r3, #24
 8007cc4:	4b46      	ldr	r3, [pc, #280]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	041b      	lsls	r3, r3, #16
 8007cca:	4319      	orrs	r1, r3
 8007ccc:	4b44      	ldr	r3, [pc, #272]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	4942      	ldr	r1, [pc, #264]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cd6:	78c9      	ldrb	r1, [r1, #3]
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	0619      	lsls	r1, r3, #24
 8007ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	041b      	lsls	r3, r3, #16
 8007cee:	4319      	orrs	r1, r3
 8007cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cf2:	789b      	ldrb	r3, [r3, #2]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	4939      	ldr	r1, [pc, #228]	@ (8007de0 <MX_LWIP_Init+0x240>)
 8007cfa:	78c9      	ldrb	r1, [r1, #3]
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	0e1b      	lsrs	r3, r3, #24
 8007d00:	4313      	orrs	r3, r2
 8007d02:	4a3a      	ldr	r2, [pc, #232]	@ (8007dec <MX_LWIP_Init+0x24c>)
 8007d04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007d06:	4b37      	ldr	r3, [pc, #220]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	061a      	lsls	r2, r3, #24
 8007d0c:	4b35      	ldr	r3, [pc, #212]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	041b      	lsls	r3, r3, #16
 8007d12:	431a      	orrs	r2, r3
 8007d14:	4b33      	ldr	r3, [pc, #204]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d16:	789b      	ldrb	r3, [r3, #2]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	4a31      	ldr	r2, [pc, #196]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d1e:	78d2      	ldrb	r2, [r2, #3]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	061a      	lsls	r2, r3, #24
 8007d24:	4b2f      	ldr	r3, [pc, #188]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	0619      	lsls	r1, r3, #24
 8007d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	041b      	lsls	r3, r3, #16
 8007d30:	4319      	orrs	r1, r3
 8007d32:	4b2c      	ldr	r3, [pc, #176]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d34:	789b      	ldrb	r3, [r3, #2]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	492a      	ldr	r1, [pc, #168]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d3c:	78c9      	ldrb	r1, [r1, #3]
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d46:	431a      	orrs	r2, r3
 8007d48:	4b26      	ldr	r3, [pc, #152]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	0619      	lsls	r1, r3, #24
 8007d4e:	4b25      	ldr	r3, [pc, #148]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	4319      	orrs	r1, r3
 8007d56:	4b23      	ldr	r3, [pc, #140]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d58:	789b      	ldrb	r3, [r3, #2]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	4921      	ldr	r1, [pc, #132]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d60:	78c9      	ldrb	r1, [r1, #3]
 8007d62:	430b      	orrs	r3, r1
 8007d64:	0a1b      	lsrs	r3, r3, #8
 8007d66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	0619      	lsls	r1, r3, #24
 8007d72:	4b1c      	ldr	r3, [pc, #112]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	4319      	orrs	r1, r3
 8007d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d7c:	789b      	ldrb	r3, [r3, #2]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	430b      	orrs	r3, r1
 8007d82:	4918      	ldr	r1, [pc, #96]	@ (8007de4 <MX_LWIP_Init+0x244>)
 8007d84:	78c9      	ldrb	r1, [r1, #3]
 8007d86:	430b      	orrs	r3, r1
 8007d88:	0e1b      	lsrs	r3, r3, #24
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	4a18      	ldr	r2, [pc, #96]	@ (8007df0 <MX_LWIP_Init+0x250>)
 8007d8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007d90:	4b18      	ldr	r3, [pc, #96]	@ (8007df4 <MX_LWIP_Init+0x254>)
 8007d92:	9302      	str	r3, [sp, #8]
 8007d94:	4b18      	ldr	r3, [pc, #96]	@ (8007df8 <MX_LWIP_Init+0x258>)
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	4b14      	ldr	r3, [pc, #80]	@ (8007df0 <MX_LWIP_Init+0x250>)
 8007d9e:	4a13      	ldr	r2, [pc, #76]	@ (8007dec <MX_LWIP_Init+0x24c>)
 8007da0:	4911      	ldr	r1, [pc, #68]	@ (8007de8 <MX_LWIP_Init+0x248>)
 8007da2:	4816      	ldr	r0, [pc, #88]	@ (8007dfc <MX_LWIP_Init+0x25c>)
 8007da4:	f001 f936 	bl	8009014 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007da8:	4814      	ldr	r0, [pc, #80]	@ (8007dfc <MX_LWIP_Init+0x25c>)
 8007daa:	f001 fae5 	bl	8009378 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007dae:	4b13      	ldr	r3, [pc, #76]	@ (8007dfc <MX_LWIP_Init+0x25c>)
 8007db0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007db4:	089b      	lsrs	r3, r3, #2
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007dc0:	480e      	ldr	r0, [pc, #56]	@ (8007dfc <MX_LWIP_Init+0x25c>)
 8007dc2:	f001 fae9 	bl	8009398 <netif_set_up>
 8007dc6:	e002      	b.n	8007dce <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007dc8:	480c      	ldr	r0, [pc, #48]	@ (8007dfc <MX_LWIP_Init+0x25c>)
 8007dca:	f001 fb51 	bl	8009470 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007dce:	490c      	ldr	r1, [pc, #48]	@ (8007e00 <MX_LWIP_Init+0x260>)
 8007dd0:	480a      	ldr	r0, [pc, #40]	@ (8007dfc <MX_LWIP_Init+0x25c>)
 8007dd2:	f001 fbe3 	bl	800959c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007dd6:	bf00      	nop
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000a34 	.word	0x20000a34
 8007de0:	20000a38 	.word	0x20000a38
 8007de4:	20000a3c 	.word	0x20000a3c
 8007de8:	20000a28 	.word	0x20000a28
 8007dec:	20000a2c 	.word	0x20000a2c
 8007df0:	20000a30 	.word	0x20000a30
 8007df4:	08012451 	.word	0x08012451
 8007df8:	08008119 	.word	0x08008119
 8007dfc:	200009f4 	.word	0x200009f4
 8007e00:	08007e05 	.word	0x08007e05

08007e04 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <SCB_InvalidateDCache_by_Addr>:
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007e2a:	2320      	movs	r3, #32
 8007e2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e2e:	f3bf 8f4f 	dsb	sy
}
 8007e32:	bf00      	nop
    while (op_size > 0) {
 8007e34:	e00b      	b.n	8007e4e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007e36:	4a0d      	ldr	r2, [pc, #52]	@ (8007e6c <SCB_InvalidateDCache_by_Addr+0x54>)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4413      	add	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dcf0      	bgt.n	8007e36 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007e54:	f3bf 8f4f 	dsb	sy
}
 8007e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e5a:	f3bf 8f6f 	isb	sy
}
 8007e5e:	bf00      	nop
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	e000ed00 	.word	0xe000ed00

08007e70 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007e7c:	4b40      	ldr	r3, [pc, #256]	@ (8007f80 <low_level_init+0x110>)
 8007e7e:	4a41      	ldr	r2, [pc, #260]	@ (8007f84 <low_level_init+0x114>)
 8007e80:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007e82:	2300      	movs	r3, #0
 8007e84:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007e86:	2380      	movs	r3, #128	@ 0x80
 8007e88:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007e8a:	23e1      	movs	r3, #225	@ 0xe1
 8007e8c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007e92:	2300      	movs	r3, #0
 8007e94:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007e96:	2300      	movs	r3, #0
 8007e98:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007e9a:	4a39      	ldr	r2, [pc, #228]	@ (8007f80 <low_level_init+0x110>)
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007ea2:	4b37      	ldr	r3, [pc, #220]	@ (8007f80 <low_level_init+0x110>)
 8007ea4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007ea8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007eaa:	4b35      	ldr	r3, [pc, #212]	@ (8007f80 <low_level_init+0x110>)
 8007eac:	4a36      	ldr	r2, [pc, #216]	@ (8007f88 <low_level_init+0x118>)
 8007eae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007eb0:	4b33      	ldr	r3, [pc, #204]	@ (8007f80 <low_level_init+0x110>)
 8007eb2:	4a36      	ldr	r2, [pc, #216]	@ (8007f8c <low_level_init+0x11c>)
 8007eb4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007eb6:	4b32      	ldr	r3, [pc, #200]	@ (8007f80 <low_level_init+0x110>)
 8007eb8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007ebc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007ebe:	4830      	ldr	r0, [pc, #192]	@ (8007f80 <low_level_init+0x110>)
 8007ec0:	f7fa ff3c 	bl	8002d3c <HAL_ETH_Init>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007ec8:	2238      	movs	r2, #56	@ 0x38
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4830      	ldr	r0, [pc, #192]	@ (8007f90 <low_level_init+0x120>)
 8007ece:	f00b f9b5 	bl	801323c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8007f90 <low_level_init+0x120>)
 8007ed4:	2221      	movs	r2, #33	@ 0x21
 8007ed6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8007f90 <low_level_init+0x120>)
 8007eda:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007ede:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8007f90 <low_level_init+0x120>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007ee6:	482b      	ldr	r0, [pc, #172]	@ (8007f94 <low_level_init+0x124>)
 8007ee8:	f000 ff5c 	bl	8008da4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2206      	movs	r2, #6
 8007ef0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007ef4:	4b22      	ldr	r3, [pc, #136]	@ (8007f80 <low_level_init+0x110>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f00:	4b1f      	ldr	r3, [pc, #124]	@ (8007f80 <low_level_init+0x110>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	785a      	ldrb	r2, [r3, #1]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f80 <low_level_init+0x110>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	789a      	ldrb	r2, [r3, #2]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f18:	4b19      	ldr	r3, [pc, #100]	@ (8007f80 <low_level_init+0x110>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	78da      	ldrb	r2, [r3, #3]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f24:	4b16      	ldr	r3, [pc, #88]	@ (8007f80 <low_level_init+0x110>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	791a      	ldrb	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f30:	4b13      	ldr	r3, [pc, #76]	@ (8007f80 <low_level_init+0x110>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	795a      	ldrb	r2, [r3, #5]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007f42:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f4a:	f043 030a 	orr.w	r3, r3, #10
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007f56:	4910      	ldr	r1, [pc, #64]	@ (8007f98 <low_level_init+0x128>)
 8007f58:	4810      	ldr	r0, [pc, #64]	@ (8007f9c <low_level_init+0x12c>)
 8007f5a:	f7f9 fa3a 	bl	80013d2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007f5e:	480f      	ldr	r0, [pc, #60]	@ (8007f9c <low_level_init+0x12c>)
 8007f60:	f7f9 fa69 	bl	8001436 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa3a 	bl	80083e4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007f70:	e001      	b.n	8007f76 <low_level_init+0x106>
    Error_Handler();
 8007f72:	f7f8 fe09 	bl	8000b88 <Error_Handler>
}
 8007f76:	bf00      	nop
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200053cc 	.word	0x200053cc
 8007f84:	40028000 	.word	0x40028000
 8007f88:	20000128 	.word	0x20000128
 8007f8c:	20000088 	.word	0x20000088
 8007f90:	2000547c 	.word	0x2000547c
 8007f94:	08016c44 	.word	0x08016c44
 8007f98:	2000000c 	.word	0x2000000c
 8007f9c:	200054b4 	.word	0x200054b4

08007fa0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b092      	sub	sp, #72	@ 0x48
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007fb8:	f107 030c 	add.w	r3, r7, #12
 8007fbc:	2230      	movs	r2, #48	@ 0x30
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f00b f93b 	bl	801323c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007fc6:	f107 030c 	add.w	r3, r7, #12
 8007fca:	2230      	movs	r2, #48	@ 0x30
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f00b f934 	bl	801323c <memset>

  for(q = p; q != NULL; q = q->next)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd8:	e045      	b.n	8008066 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d902      	bls.n	8007fe6 <low_level_output+0x46>
      return ERR_IF;
 8007fe0:	f06f 030b 	mvn.w	r3, #11
 8007fe4:	e055      	b.n	8008092 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fe8:	6859      	ldr	r1, [r3, #4]
 8007fea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fec:	4613      	mov	r3, r2
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	3348      	adds	r3, #72	@ 0x48
 8007ff6:	443b      	add	r3, r7
 8007ff8:	3b3c      	subs	r3, #60	@ 0x3c
 8007ffa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ffe:	895b      	ldrh	r3, [r3, #10]
 8008000:	4619      	mov	r1, r3
 8008002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008004:	4613      	mov	r3, r2
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	3348      	adds	r3, #72	@ 0x48
 800800e:	443b      	add	r3, r7
 8008010:	3b38      	subs	r3, #56	@ 0x38
 8008012:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008016:	2b00      	cmp	r3, #0
 8008018:	d011      	beq.n	800803e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800801a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801c:	1e5a      	subs	r2, r3, #1
 800801e:	f107 000c 	add.w	r0, r7, #12
 8008022:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008024:	460b      	mov	r3, r1
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	440b      	add	r3, r1
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	18c1      	adds	r1, r0, r3
 800802e:	4613      	mov	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	3348      	adds	r3, #72	@ 0x48
 8008038:	443b      	add	r3, r7
 800803a:	3b34      	subs	r3, #52	@ 0x34
 800803c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800803e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008048:	4613      	mov	r3, r2
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	3348      	adds	r3, #72	@ 0x48
 8008052:	443b      	add	r3, r7
 8008054:	3b34      	subs	r3, #52	@ 0x34
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]
    }

    i++;
 800805a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800805c:	3301      	adds	r3, #1
 800805e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	643b      	str	r3, [r7, #64]	@ 0x40
 8008066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1b6      	bne.n	8007fda <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	891b      	ldrh	r3, [r3, #8]
 8008070:	461a      	mov	r2, r3
 8008072:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <low_level_output+0xfc>)
 8008074:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008076:	4a09      	ldr	r2, [pc, #36]	@ (800809c <low_level_output+0xfc>)
 8008078:	f107 030c 	add.w	r3, r7, #12
 800807c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800807e:	4a07      	ldr	r2, [pc, #28]	@ (800809c <low_level_output+0xfc>)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008084:	2214      	movs	r2, #20
 8008086:	4905      	ldr	r1, [pc, #20]	@ (800809c <low_level_output+0xfc>)
 8008088:	4805      	ldr	r0, [pc, #20]	@ (80080a0 <low_level_output+0x100>)
 800808a:	f7fa ff8b 	bl	8002fa4 <HAL_ETH_Transmit>

  return errval;
 800808e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008092:	4618      	mov	r0, r3
 8008094:	3748      	adds	r7, #72	@ 0x48
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	2000547c 	.word	0x2000547c
 80080a0:	200053cc 	.word	0x200053cc

080080a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80080b0:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <low_level_input+0x2c>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	4619      	mov	r1, r3
 80080be:	4805      	ldr	r0, [pc, #20]	@ (80080d4 <low_level_input+0x30>)
 80080c0:	f7fb f804 	bl	80030cc <HAL_ETH_ReadData>
  }

  return p;
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200053c8 	.word	0x200053c8
 80080d4:	200053cc 	.word	0x200053cc

080080d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff ffdd 	bl	80080a4 <low_level_input>
 80080ea:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00a      	beq.n	8008108 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	4798      	blx	r3
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f001 fdca 	bl	8009c9c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1ea      	bne.n	80080e4 <ethernetif_input+0xc>
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <ethernetif_init+0x1c>
 8008126:	4b0e      	ldr	r3, [pc, #56]	@ (8008160 <ethernetif_init+0x48>)
 8008128:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 800812c:	490d      	ldr	r1, [pc, #52]	@ (8008164 <ethernetif_init+0x4c>)
 800812e:	480e      	ldr	r0, [pc, #56]	@ (8008168 <ethernetif_init+0x50>)
 8008130:	f00a ff2c 	bl	8012f8c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2273      	movs	r2, #115	@ 0x73
 8008138:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2274      	movs	r2, #116	@ 0x74
 8008140:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a09      	ldr	r2, [pc, #36]	@ (800816c <ethernetif_init+0x54>)
 8008148:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a08      	ldr	r2, [pc, #32]	@ (8008170 <ethernetif_init+0x58>)
 800814e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fe8d 	bl	8007e70 <low_level_init>

  return ERR_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	08013e98 	.word	0x08013e98
 8008164:	08013eb4 	.word	0x08013eb4
 8008168:	08013ec4 	.word	0x08013ec4
 800816c:	08010909 	.word	0x08010909
 8008170:	08007fa1 	.word	0x08007fa1

08008174 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008180:	68f9      	ldr	r1, [r7, #12]
 8008182:	4807      	ldr	r0, [pc, #28]	@ (80081a0 <pbuf_free_custom+0x2c>)
 8008184:	f000 fef0 	bl	8008f68 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <pbuf_free_custom+0x30>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d102      	bne.n	8008196 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <pbuf_free_custom+0x30>)
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
  }
}
 8008196:	bf00      	nop
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	08016c44 	.word	0x08016c44
 80081a4:	200053c8 	.word	0x200053c8

080081a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081ac:	f7f9 fac4 	bl	8001738 <HAL_GetTick>
 80081b0:	4603      	mov	r3, r0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08e      	sub	sp, #56	@ 0x38
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	605a      	str	r2, [r3, #4]
 80081ca:	609a      	str	r2, [r3, #8]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a56      	ldr	r2, [pc, #344]	@ (8008330 <HAL_ETH_MspInit+0x178>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	f040 80a6 	bne.w	8008328 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80081dc:	4b55      	ldr	r3, [pc, #340]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 80081de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e0:	4a54      	ldr	r2, [pc, #336]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 80081e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80081e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80081e8:	4b52      	ldr	r3, [pc, #328]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 80081ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f0:	623b      	str	r3, [r7, #32]
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	4b4f      	ldr	r3, [pc, #316]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 80081f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f8:	4a4e      	ldr	r2, [pc, #312]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 80081fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8008200:	4b4c      	ldr	r3, [pc, #304]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008204:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4b49      	ldr	r3, [pc, #292]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008210:	4a48      	ldr	r2, [pc, #288]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008212:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008216:	6313      	str	r3, [r2, #48]	@ 0x30
 8008218:	4b46      	ldr	r3, [pc, #280]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008224:	4b43      	ldr	r3, [pc, #268]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	4a42      	ldr	r2, [pc, #264]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800822a:	f043 0304 	orr.w	r3, r3, #4
 800822e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008230:	4b40      	ldr	r3, [pc, #256]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800823c:	4b3d      	ldr	r3, [pc, #244]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800823e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008240:	4a3c      	ldr	r2, [pc, #240]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6313      	str	r3, [r2, #48]	@ 0x30
 8008248:	4b3a      	ldr	r3, [pc, #232]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800824a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008254:	4b37      	ldr	r3, [pc, #220]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008258:	4a36      	ldr	r2, [pc, #216]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800825a:	f043 0302 	orr.w	r3, r3, #2
 800825e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008260:	4b34      	ldr	r3, [pc, #208]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800826c:	4b31      	ldr	r3, [pc, #196]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008270:	4a30      	ldr	r2, [pc, #192]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 8008272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008276:	6313      	str	r3, [r2, #48]	@ 0x30
 8008278:	4b2e      	ldr	r3, [pc, #184]	@ (8008334 <HAL_ETH_MspInit+0x17c>)
 800827a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008284:	2332      	movs	r3, #50	@ 0x32
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008288:	2302      	movs	r3, #2
 800828a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828c:	2300      	movs	r3, #0
 800828e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008290:	2303      	movs	r3, #3
 8008292:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008294:	230b      	movs	r3, #11
 8008296:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800829c:	4619      	mov	r1, r3
 800829e:	4826      	ldr	r0, [pc, #152]	@ (8008338 <HAL_ETH_MspInit+0x180>)
 80082a0:	f7fb ff32 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80082a4:	2386      	movs	r3, #134	@ 0x86
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082a8:	2302      	movs	r3, #2
 80082aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082b0:	2303      	movs	r3, #3
 80082b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082b4:	230b      	movs	r3, #11
 80082b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082bc:	4619      	mov	r1, r3
 80082be:	481f      	ldr	r0, [pc, #124]	@ (800833c <HAL_ETH_MspInit+0x184>)
 80082c0:	f7fb ff22 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80082c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ca:	2302      	movs	r3, #2
 80082cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082d2:	2303      	movs	r3, #3
 80082d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082d6:	230b      	movs	r3, #11
 80082d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80082da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082de:	4619      	mov	r1, r3
 80082e0:	4817      	ldr	r0, [pc, #92]	@ (8008340 <HAL_ETH_MspInit+0x188>)
 80082e2:	f7fb ff11 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80082e6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80082ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ec:	2302      	movs	r3, #2
 80082ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082f4:	2303      	movs	r3, #3
 80082f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082f8:	230b      	movs	r3, #11
 80082fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008300:	4619      	mov	r1, r3
 8008302:	4810      	ldr	r0, [pc, #64]	@ (8008344 <HAL_ETH_MspInit+0x18c>)
 8008304:	f7fb ff00 	bl	8004108 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008308:	2200      	movs	r2, #0
 800830a:	2100      	movs	r1, #0
 800830c:	203d      	movs	r0, #61	@ 0x3d
 800830e:	f7fa f884 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008312:	203d      	movs	r0, #61	@ 0x3d
 8008314:	f7fa f89d 	bl	8002452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8008318:	2200      	movs	r2, #0
 800831a:	2100      	movs	r1, #0
 800831c:	203e      	movs	r0, #62	@ 0x3e
 800831e:	f7fa f87c 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008322:	203e      	movs	r0, #62	@ 0x3e
 8008324:	f7fa f895 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008328:	bf00      	nop
 800832a:	3738      	adds	r7, #56	@ 0x38
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40028000 	.word	0x40028000
 8008334:	40023800 	.word	0x40023800
 8008338:	40020800 	.word	0x40020800
 800833c:	40020000 	.word	0x40020000
 8008340:	40020400 	.word	0x40020400
 8008344:	40021800 	.word	0x40021800

08008348 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800834c:	4802      	ldr	r0, [pc, #8]	@ (8008358 <ETH_PHY_IO_Init+0x10>)
 800834e:	f7fb fa81 	bl	8003854 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200053cc 	.word	0x200053cc

0800835c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
  return 0;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	68f9      	ldr	r1, [r7, #12]
 800837e:	4807      	ldr	r0, [pc, #28]	@ (800839c <ETH_PHY_IO_ReadReg+0x30>)
 8008380:	f7fb f8d0 	bl	8003524 <HAL_ETH_ReadPHYRegister>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	e000      	b.n	8008392 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200053cc 	.word	0x200053cc

080083a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	68f9      	ldr	r1, [r7, #12]
 80083b2:	4807      	ldr	r0, [pc, #28]	@ (80083d0 <ETH_PHY_IO_WriteReg+0x30>)
 80083b4:	f7fb f901 	bl	80035ba <HAL_ETH_WritePHYRegister>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80083be:	f04f 33ff 	mov.w	r3, #4294967295
 80083c2:	e000      	b.n	80083c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200053cc 	.word	0x200053cc

080083d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80083d8:	f7f9 f9ae 	bl	8001738 <HAL_GetTick>
 80083dc:	4603      	mov	r3, r0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b0a0      	sub	sp, #128	@ 0x80
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80083ec:	f107 030c 	add.w	r3, r7, #12
 80083f0:	2264      	movs	r2, #100	@ 0x64
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f00a ff21 	bl	801323c <memset>
  int32_t PHYLinkState = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008402:	2300      	movs	r3, #0
 8008404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008406:	2300      	movs	r3, #0
 8008408:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800840a:	483a      	ldr	r0, [pc, #232]	@ (80084f4 <ethernet_link_check_state+0x110>)
 800840c:	f7f9 f8bb 	bl	8001586 <LAN8742_GetLinkState>
 8008410:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008418:	089b      	lsrs	r3, r3, #2
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00c      	beq.n	800843e <ethernet_link_check_state+0x5a>
 8008424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008426:	2b01      	cmp	r3, #1
 8008428:	dc09      	bgt.n	800843e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800842a:	4833      	ldr	r0, [pc, #204]	@ (80084f8 <ethernet_link_check_state+0x114>)
 800842c:	f7fa fd61 	bl	8002ef2 <HAL_ETH_Stop>
    netif_set_down(netif);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 f81d 	bl	8009470 <netif_set_down>
    netif_set_link_down(netif);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f880 	bl	800953c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800843c:	e055      	b.n	80084ea <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d14e      	bne.n	80084ea <ethernet_link_check_state+0x106>
 800844c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800844e:	2b01      	cmp	r3, #1
 8008450:	dd4b      	ble.n	80084ea <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008454:	3b02      	subs	r3, #2
 8008456:	2b03      	cmp	r3, #3
 8008458:	d82a      	bhi.n	80084b0 <ethernet_link_check_state+0xcc>
 800845a:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <ethernet_link_check_state+0x7c>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008471 	.word	0x08008471
 8008464:	08008483 	.word	0x08008483
 8008468:	08008493 	.word	0x08008493
 800846c:	080084a3 	.word	0x080084a3
      duplex = ETH_FULLDUPLEX_MODE;
 8008470:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008474:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008476:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800847a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800847c:	2301      	movs	r3, #1
 800847e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008480:	e017      	b.n	80084b2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008482:	2300      	movs	r3, #0
 8008484:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008486:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800848a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800848c:	2301      	movs	r3, #1
 800848e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008490:	e00f      	b.n	80084b2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008492:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008496:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008498:	2300      	movs	r3, #0
 800849a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800849c:	2301      	movs	r3, #1
 800849e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80084a0:	e007      	b.n	80084b2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80084a6:	2300      	movs	r3, #0
 80084a8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80084aa:	2301      	movs	r3, #1
 80084ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80084ae:	e000      	b.n	80084b2 <ethernet_link_check_state+0xce>
      break;
 80084b0:	bf00      	nop
    if(linkchanged)
 80084b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d018      	beq.n	80084ea <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80084b8:	f107 030c 	add.w	r3, r7, #12
 80084bc:	4619      	mov	r1, r3
 80084be:	480e      	ldr	r0, [pc, #56]	@ (80084f8 <ethernet_link_check_state+0x114>)
 80084c0:	f7fb f8c4 	bl	800364c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80084c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084c6:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80084c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ca:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4619      	mov	r1, r3
 80084d2:	4809      	ldr	r0, [pc, #36]	@ (80084f8 <ethernet_link_check_state+0x114>)
 80084d4:	f7fb f9a4 	bl	8003820 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80084d8:	4807      	ldr	r0, [pc, #28]	@ (80084f8 <ethernet_link_check_state+0x114>)
 80084da:	f7fa fcab 	bl	8002e34 <HAL_ETH_Start>
      netif_set_up(netif);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 ff5a 	bl	8009398 <netif_set_up>
      netif_set_link_up(netif);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fff5 	bl	80094d4 <netif_set_link_up>
}
 80084ea:	bf00      	nop
 80084ec:	3780      	adds	r7, #128	@ 0x80
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200054b4 	.word	0x200054b4
 80084f8:	200053cc 	.word	0x200053cc

080084fc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af02      	add	r7, sp, #8
 8008502:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008504:	4812      	ldr	r0, [pc, #72]	@ (8008550 <HAL_ETH_RxAllocateCallback+0x54>)
 8008506:	f000 fcc1 	bl	8008e8c <memp_malloc_pool>
 800850a:	60f8      	str	r0, [r7, #12]
  if (p)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d014      	beq.n	800853c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f103 0220 	add.w	r2, r3, #32
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a0d      	ldr	r2, [pc, #52]	@ (8008554 <HAL_ETH_RxAllocateCallback+0x58>)
 8008520:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800852a:	9201      	str	r2, [sp, #4]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2241      	movs	r2, #65	@ 0x41
 8008532:	2100      	movs	r1, #0
 8008534:	2000      	movs	r0, #0
 8008536:	f001 f9f7 	bl	8009928 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800853a:	e005      	b.n	8008548 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800853c:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <HAL_ETH_RxAllocateCallback+0x5c>)
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	08016c44 	.word	0x08016c44
 8008554:	08008175 	.word	0x08008175
 8008558:	200053c8 	.word	0x200053c8

0800855c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3b20      	subs	r3, #32
 800857a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2200      	movs	r2, #0
 8008586:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	887a      	ldrh	r2, [r7, #2]
 800858c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e003      	b.n	80085a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	e009      	b.n	80085c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	891a      	ldrh	r2, [r3, #8]
 80085b8:	887b      	ldrh	r3, [r7, #2]
 80085ba:	4413      	add	r3, r2
 80085bc:	b29a      	uxth	r2, r3
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f2      	bne.n	80085b4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80085ce:	887b      	ldrh	r3, [r7, #2]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff fc20 	bl	8007e18 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80085d8:	bf00      	nop
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	b21a      	sxth	r2, r3
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	b21b      	sxth	r3, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	b21b      	sxth	r3, r3
 80085fc:	b29b      	uxth	r3, r3
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	061a      	lsls	r2, r3, #24
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	0e1b      	lsrs	r3, r3, #24
 800862e:	4313      	orrs	r3, r2
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008646:	f000 f8d5 	bl	80087f4 <mem_init>
  memp_init();
 800864a:	f000 fbdb 	bl	8008e04 <memp_init>
  pbuf_init();
  netif_init();
 800864e:	f000 fcd9 	bl	8009004 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008652:	f007 f863 	bl	800f71c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008656:	f001 fdbf 	bl	800a1d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800865a:	f006 ffd5 	bl	800f608 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800865e:	bf00      	nop
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008672:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <ptr_to_mem+0x20>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	4413      	add	r3, r2
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20005b40 	.word	0x20005b40

0800868c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <mem_to_ptr+0x20>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	b29b      	uxth	r3, r3
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20005b40 	.word	0x20005b40

080086b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80086b0:	b590      	push	{r4, r7, lr}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80086b8:	4b45      	ldr	r3, [pc, #276]	@ (80087d0 <plug_holes+0x120>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d206      	bcs.n	80086d0 <plug_holes+0x20>
 80086c2:	4b44      	ldr	r3, [pc, #272]	@ (80087d4 <plug_holes+0x124>)
 80086c4:	f240 12df 	movw	r2, #479	@ 0x1df
 80086c8:	4943      	ldr	r1, [pc, #268]	@ (80087d8 <plug_holes+0x128>)
 80086ca:	4844      	ldr	r0, [pc, #272]	@ (80087dc <plug_holes+0x12c>)
 80086cc:	f00a fc5e 	bl	8012f8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80086d0:	4b43      	ldr	r3, [pc, #268]	@ (80087e0 <plug_holes+0x130>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d306      	bcc.n	80086e8 <plug_holes+0x38>
 80086da:	4b3e      	ldr	r3, [pc, #248]	@ (80087d4 <plug_holes+0x124>)
 80086dc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80086e0:	4940      	ldr	r1, [pc, #256]	@ (80087e4 <plug_holes+0x134>)
 80086e2:	483e      	ldr	r0, [pc, #248]	@ (80087dc <plug_holes+0x12c>)
 80086e4:	f00a fc52 	bl	8012f8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	791b      	ldrb	r3, [r3, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d006      	beq.n	80086fe <plug_holes+0x4e>
 80086f0:	4b38      	ldr	r3, [pc, #224]	@ (80087d4 <plug_holes+0x124>)
 80086f2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80086f6:	493c      	ldr	r1, [pc, #240]	@ (80087e8 <plug_holes+0x138>)
 80086f8:	4838      	ldr	r0, [pc, #224]	@ (80087dc <plug_holes+0x12c>)
 80086fa:	f00a fc47 	bl	8012f8c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008706:	d906      	bls.n	8008716 <plug_holes+0x66>
 8008708:	4b32      	ldr	r3, [pc, #200]	@ (80087d4 <plug_holes+0x124>)
 800870a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800870e:	4937      	ldr	r1, [pc, #220]	@ (80087ec <plug_holes+0x13c>)
 8008710:	4832      	ldr	r0, [pc, #200]	@ (80087dc <plug_holes+0x12c>)
 8008712:	f00a fc3b 	bl	8012f8c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff ffa4 	bl	8008668 <ptr_to_mem>
 8008720:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	429a      	cmp	r2, r3
 8008728:	d024      	beq.n	8008774 <plug_holes+0xc4>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	791b      	ldrb	r3, [r3, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d120      	bne.n	8008774 <plug_holes+0xc4>
 8008732:	4b2b      	ldr	r3, [pc, #172]	@ (80087e0 <plug_holes+0x130>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	429a      	cmp	r2, r3
 800873a:	d01b      	beq.n	8008774 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800873c:	4b2c      	ldr	r3, [pc, #176]	@ (80087f0 <plug_holes+0x140>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d102      	bne.n	800874c <plug_holes+0x9c>
      lfree = mem;
 8008746:	4a2a      	ldr	r2, [pc, #168]	@ (80087f0 <plug_holes+0x140>)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	881a      	ldrh	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800875c:	d00a      	beq.n	8008774 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff ff80 	bl	8008668 <ptr_to_mem>
 8008768:	4604      	mov	r4, r0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff8e 	bl	800868c <mem_to_ptr>
 8008770:	4603      	mov	r3, r0
 8008772:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	885b      	ldrh	r3, [r3, #2]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ff75 	bl	8008668 <ptr_to_mem>
 800877e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d01f      	beq.n	80087c8 <plug_holes+0x118>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	791b      	ldrb	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d11b      	bne.n	80087c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008790:	4b17      	ldr	r3, [pc, #92]	@ (80087f0 <plug_holes+0x140>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	d102      	bne.n	80087a0 <plug_holes+0xf0>
      lfree = pmem;
 800879a:	4a15      	ldr	r2, [pc, #84]	@ (80087f0 <plug_holes+0x140>)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	881a      	ldrh	r2, [r3, #0]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80087b0:	d00a      	beq.n	80087c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff ff56 	bl	8008668 <ptr_to_mem>
 80087bc:	4604      	mov	r4, r0
 80087be:	68b8      	ldr	r0, [r7, #8]
 80087c0:	f7ff ff64 	bl	800868c <mem_to_ptr>
 80087c4:	4603      	mov	r3, r0
 80087c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80087c8:	bf00      	nop
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}
 80087d0:	20005b40 	.word	0x20005b40
 80087d4:	08013eec 	.word	0x08013eec
 80087d8:	08013f1c 	.word	0x08013f1c
 80087dc:	08013f34 	.word	0x08013f34
 80087e0:	20005b44 	.word	0x20005b44
 80087e4:	08013f5c 	.word	0x08013f5c
 80087e8:	08013f78 	.word	0x08013f78
 80087ec:	08013f94 	.word	0x08013f94
 80087f0:	20005b48 	.word	0x20005b48

080087f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80087fa:	4b18      	ldr	r3, [pc, #96]	@ (800885c <mem_init+0x68>)
 80087fc:	3303      	adds	r3, #3
 80087fe:	f023 0303 	bic.w	r3, r3, #3
 8008802:	461a      	mov	r2, r3
 8008804:	4b16      	ldr	r3, [pc, #88]	@ (8008860 <mem_init+0x6c>)
 8008806:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008808:	4b15      	ldr	r3, [pc, #84]	@ (8008860 <mem_init+0x6c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8008814:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008822:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8008826:	f7ff ff1f 	bl	8008668 <ptr_to_mem>
 800882a:	4603      	mov	r3, r0
 800882c:	4a0d      	ldr	r2, [pc, #52]	@ (8008864 <mem_init+0x70>)
 800882e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008830:	4b0c      	ldr	r3, [pc, #48]	@ (8008864 <mem_init+0x70>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2201      	movs	r2, #1
 8008836:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008838:	4b0a      	ldr	r3, [pc, #40]	@ (8008864 <mem_init+0x70>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8008840:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008842:	4b08      	ldr	r3, [pc, #32]	@ (8008864 <mem_init+0x70>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800884a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800884c:	4b04      	ldr	r3, [pc, #16]	@ (8008860 <mem_init+0x6c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a05      	ldr	r2, [pc, #20]	@ (8008868 <mem_init+0x74>)
 8008852:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	200054ec 	.word	0x200054ec
 8008860:	20005b40 	.word	0x20005b40
 8008864:	20005b44 	.word	0x20005b44
 8008868:	20005b48 	.word	0x20005b48

0800886c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff ff09 	bl	800868c <mem_to_ptr>
 800887a:	4603      	mov	r3, r0
 800887c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fef0 	bl	8008668 <ptr_to_mem>
 8008888:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff feea 	bl	8008668 <ptr_to_mem>
 8008894:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800889e:	d818      	bhi.n	80088d2 <mem_link_valid+0x66>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	885b      	ldrh	r3, [r3, #2]
 80088a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80088a8:	d813      	bhi.n	80088d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80088ae:	8afa      	ldrh	r2, [r7, #22]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d004      	beq.n	80088be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	8afa      	ldrh	r2, [r7, #22]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d109      	bne.n	80088d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80088be:	4b08      	ldr	r3, [pc, #32]	@ (80088e0 <mem_link_valid+0x74>)
 80088c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d006      	beq.n	80088d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	885b      	ldrh	r3, [r3, #2]
 80088cc:	8afa      	ldrh	r2, [r7, #22]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d001      	beq.n	80088d6 <mem_link_valid+0x6a>
    return 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	e000      	b.n	80088d8 <mem_link_valid+0x6c>
  }
  return 1;
 80088d6:	2301      	movs	r3, #1
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20005b44 	.word	0x20005b44

080088e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d04c      	beq.n	800898c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80088fc:	4b25      	ldr	r3, [pc, #148]	@ (8008994 <mem_free+0xb0>)
 80088fe:	f240 2273 	movw	r2, #627	@ 0x273
 8008902:	4925      	ldr	r1, [pc, #148]	@ (8008998 <mem_free+0xb4>)
 8008904:	4825      	ldr	r0, [pc, #148]	@ (800899c <mem_free+0xb8>)
 8008906:	f00a fb41 	bl	8012f8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800890a:	e040      	b.n	800898e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3b08      	subs	r3, #8
 8008910:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008912:	4b23      	ldr	r3, [pc, #140]	@ (80089a0 <mem_free+0xbc>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	429a      	cmp	r2, r3
 800891a:	d306      	bcc.n	800892a <mem_free+0x46>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f103 020c 	add.w	r2, r3, #12
 8008922:	4b20      	ldr	r3, [pc, #128]	@ (80089a4 <mem_free+0xc0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d907      	bls.n	800893a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800892a:	4b1a      	ldr	r3, [pc, #104]	@ (8008994 <mem_free+0xb0>)
 800892c:	f240 227f 	movw	r2, #639	@ 0x27f
 8008930:	491d      	ldr	r1, [pc, #116]	@ (80089a8 <mem_free+0xc4>)
 8008932:	481a      	ldr	r0, [pc, #104]	@ (800899c <mem_free+0xb8>)
 8008934:	f00a fb2a 	bl	8012f8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008938:	e029      	b.n	800898e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	791b      	ldrb	r3, [r3, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d107      	bne.n	8008952 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008942:	4b14      	ldr	r3, [pc, #80]	@ (8008994 <mem_free+0xb0>)
 8008944:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8008948:	4918      	ldr	r1, [pc, #96]	@ (80089ac <mem_free+0xc8>)
 800894a:	4814      	ldr	r0, [pc, #80]	@ (800899c <mem_free+0xb8>)
 800894c:	f00a fb1e 	bl	8012f8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008950:	e01d      	b.n	800898e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff ff8a 	bl	800886c <mem_link_valid>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d107      	bne.n	800896e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800895e:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <mem_free+0xb0>)
 8008960:	f240 2295 	movw	r2, #661	@ 0x295
 8008964:	4912      	ldr	r1, [pc, #72]	@ (80089b0 <mem_free+0xcc>)
 8008966:	480d      	ldr	r0, [pc, #52]	@ (800899c <mem_free+0xb8>)
 8008968:	f00a fb10 	bl	8012f8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800896c:	e00f      	b.n	800898e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008974:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <mem_free+0xd0>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	429a      	cmp	r2, r3
 800897c:	d202      	bcs.n	8008984 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800897e:	4a0d      	ldr	r2, [pc, #52]	@ (80089b4 <mem_free+0xd0>)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff fe93 	bl	80086b0 <plug_holes>
 800898a:	e000      	b.n	800898e <mem_free+0xaa>
    return;
 800898c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	08013eec 	.word	0x08013eec
 8008998:	08013fc0 	.word	0x08013fc0
 800899c:	08013f34 	.word	0x08013f34
 80089a0:	20005b40 	.word	0x20005b40
 80089a4:	20005b44 	.word	0x20005b44
 80089a8:	08013fe4 	.word	0x08013fe4
 80089ac:	08014000 	.word	0x08014000
 80089b0:	08014028 	.word	0x08014028
 80089b4:	20005b48 	.word	0x20005b48

080089b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80089c4:	887b      	ldrh	r3, [r7, #2]
 80089c6:	3303      	adds	r3, #3
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f023 0303 	bic.w	r3, r3, #3
 80089ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80089d0:	8bfb      	ldrh	r3, [r7, #30]
 80089d2:	2b0b      	cmp	r3, #11
 80089d4:	d801      	bhi.n	80089da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80089d6:	230c      	movs	r3, #12
 80089d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80089da:	8bfb      	ldrh	r3, [r7, #30]
 80089dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80089e0:	d803      	bhi.n	80089ea <mem_trim+0x32>
 80089e2:	8bfa      	ldrh	r2, [r7, #30]
 80089e4:	887b      	ldrh	r3, [r7, #2]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d201      	bcs.n	80089ee <mem_trim+0x36>
    return NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	e0cc      	b.n	8008b88 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80089ee:	4b68      	ldr	r3, [pc, #416]	@ (8008b90 <mem_trim+0x1d8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d304      	bcc.n	8008a02 <mem_trim+0x4a>
 80089f8:	4b66      	ldr	r3, [pc, #408]	@ (8008b94 <mem_trim+0x1dc>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d306      	bcc.n	8008a10 <mem_trim+0x58>
 8008a02:	4b65      	ldr	r3, [pc, #404]	@ (8008b98 <mem_trim+0x1e0>)
 8008a04:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008a08:	4964      	ldr	r1, [pc, #400]	@ (8008b9c <mem_trim+0x1e4>)
 8008a0a:	4865      	ldr	r0, [pc, #404]	@ (8008ba0 <mem_trim+0x1e8>)
 8008a0c:	f00a fabe 	bl	8012f8c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008a10:	4b5f      	ldr	r3, [pc, #380]	@ (8008b90 <mem_trim+0x1d8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d304      	bcc.n	8008a24 <mem_trim+0x6c>
 8008a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8008b94 <mem_trim+0x1dc>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d301      	bcc.n	8008a28 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	e0af      	b.n	8008b88 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3b08      	subs	r3, #8
 8008a2c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008a2e:	69b8      	ldr	r0, [r7, #24]
 8008a30:	f7ff fe2c 	bl	800868c <mem_to_ptr>
 8008a34:	4603      	mov	r3, r0
 8008a36:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	881a      	ldrh	r2, [r3, #0]
 8008a3c:	8afb      	ldrh	r3, [r7, #22]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	3b08      	subs	r3, #8
 8008a44:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008a46:	8bfa      	ldrh	r2, [r7, #30]
 8008a48:	8abb      	ldrh	r3, [r7, #20]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d906      	bls.n	8008a5c <mem_trim+0xa4>
 8008a4e:	4b52      	ldr	r3, [pc, #328]	@ (8008b98 <mem_trim+0x1e0>)
 8008a50:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008a54:	4953      	ldr	r1, [pc, #332]	@ (8008ba4 <mem_trim+0x1ec>)
 8008a56:	4852      	ldr	r0, [pc, #328]	@ (8008ba0 <mem_trim+0x1e8>)
 8008a58:	f00a fa98 	bl	8012f8c <iprintf>
  if (newsize > size) {
 8008a5c:	8bfa      	ldrh	r2, [r7, #30]
 8008a5e:	8abb      	ldrh	r3, [r7, #20]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d901      	bls.n	8008a68 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	e08f      	b.n	8008b88 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008a68:	8bfa      	ldrh	r2, [r7, #30]
 8008a6a:	8abb      	ldrh	r3, [r7, #20]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d101      	bne.n	8008a74 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	e089      	b.n	8008b88 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff fdf5 	bl	8008668 <ptr_to_mem>
 8008a7e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	791b      	ldrb	r3, [r3, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d13f      	bne.n	8008b08 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008a90:	d106      	bne.n	8008aa0 <mem_trim+0xe8>
 8008a92:	4b41      	ldr	r3, [pc, #260]	@ (8008b98 <mem_trim+0x1e0>)
 8008a94:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008a98:	4943      	ldr	r1, [pc, #268]	@ (8008ba8 <mem_trim+0x1f0>)
 8008a9a:	4841      	ldr	r0, [pc, #260]	@ (8008ba0 <mem_trim+0x1e8>)
 8008a9c:	f00a fa76 	bl	8012f8c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008aa6:	8afa      	ldrh	r2, [r7, #22]
 8008aa8:	8bfb      	ldrh	r3, [r7, #30]
 8008aaa:	4413      	add	r3, r2
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3308      	adds	r3, #8
 8008ab0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8008bac <mem_trim+0x1f4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d106      	bne.n	8008aca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008abc:	89fb      	ldrh	r3, [r7, #14]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fdd2 	bl	8008668 <ptr_to_mem>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	4a39      	ldr	r2, [pc, #228]	@ (8008bac <mem_trim+0x1f4>)
 8008ac8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008aca:	89fb      	ldrh	r3, [r7, #14]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff fdcb 	bl	8008668 <ptr_to_mem>
 8008ad2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	89ba      	ldrh	r2, [r7, #12]
 8008ade:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	8afa      	ldrh	r2, [r7, #22]
 8008ae4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	89fa      	ldrh	r2, [r7, #14]
 8008aea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008af4:	d047      	beq.n	8008b86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff fdb4 	bl	8008668 <ptr_to_mem>
 8008b00:	4602      	mov	r2, r0
 8008b02:	89fb      	ldrh	r3, [r7, #14]
 8008b04:	8053      	strh	r3, [r2, #2]
 8008b06:	e03e      	b.n	8008b86 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008b08:	8bfb      	ldrh	r3, [r7, #30]
 8008b0a:	f103 0214 	add.w	r2, r3, #20
 8008b0e:	8abb      	ldrh	r3, [r7, #20]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d838      	bhi.n	8008b86 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008b14:	8afa      	ldrh	r2, [r7, #22]
 8008b16:	8bfb      	ldrh	r3, [r7, #30]
 8008b18:	4413      	add	r3, r2
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008b28:	d106      	bne.n	8008b38 <mem_trim+0x180>
 8008b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008b98 <mem_trim+0x1e0>)
 8008b2c:	f240 3216 	movw	r2, #790	@ 0x316
 8008b30:	491d      	ldr	r1, [pc, #116]	@ (8008ba8 <mem_trim+0x1f0>)
 8008b32:	481b      	ldr	r0, [pc, #108]	@ (8008ba0 <mem_trim+0x1e8>)
 8008b34:	f00a fa2a 	bl	8012f8c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008b38:	89fb      	ldrh	r3, [r7, #14]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fd94 	bl	8008668 <ptr_to_mem>
 8008b40:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008b42:	4b1a      	ldr	r3, [pc, #104]	@ (8008bac <mem_trim+0x1f4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d202      	bcs.n	8008b52 <mem_trim+0x19a>
      lfree = mem2;
 8008b4c:	4a17      	ldr	r2, [pc, #92]	@ (8008bac <mem_trim+0x1f4>)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2200      	movs	r2, #0
 8008b56:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	881a      	ldrh	r2, [r3, #0]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	8afa      	ldrh	r2, [r7, #22]
 8008b64:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	89fa      	ldrh	r2, [r7, #14]
 8008b6a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008b74:	d007      	beq.n	8008b86 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff fd74 	bl	8008668 <ptr_to_mem>
 8008b80:	4602      	mov	r2, r0
 8008b82:	89fb      	ldrh	r3, [r7, #14]
 8008b84:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008b86:	687b      	ldr	r3, [r7, #4]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20005b40 	.word	0x20005b40
 8008b94:	20005b44 	.word	0x20005b44
 8008b98:	08013eec 	.word	0x08013eec
 8008b9c:	0801405c 	.word	0x0801405c
 8008ba0:	08013f34 	.word	0x08013f34
 8008ba4:	08014074 	.word	0x08014074
 8008ba8:	08014094 	.word	0x08014094
 8008bac:	20005b48 	.word	0x20005b48

08008bb0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <mem_malloc+0x14>
    return NULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e0d9      	b.n	8008d78 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	3303      	adds	r3, #3
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008bd0:	8bbb      	ldrh	r3, [r7, #28]
 8008bd2:	2b0b      	cmp	r3, #11
 8008bd4:	d801      	bhi.n	8008bda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008bda:	8bbb      	ldrh	r3, [r7, #28]
 8008bdc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008be0:	d803      	bhi.n	8008bea <mem_malloc+0x3a>
 8008be2:	8bba      	ldrh	r2, [r7, #28]
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d201      	bcs.n	8008bee <mem_malloc+0x3e>
    return NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e0c4      	b.n	8008d78 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008bee:	4b64      	ldr	r3, [pc, #400]	@ (8008d80 <mem_malloc+0x1d0>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff fd4a 	bl	800868c <mem_to_ptr>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	83fb      	strh	r3, [r7, #30]
 8008bfc:	e0b4      	b.n	8008d68 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008bfe:	8bfb      	ldrh	r3, [r7, #30]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff fd31 	bl	8008668 <ptr_to_mem>
 8008c06:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	791b      	ldrb	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f040 80a4 	bne.w	8008d5a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	8bfb      	ldrh	r3, [r7, #30]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	f1a3 0208 	sub.w	r2, r3, #8
 8008c20:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008c22:	429a      	cmp	r2, r3
 8008c24:	f0c0 8099 	bcc.w	8008d5a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	8bfb      	ldrh	r3, [r7, #30]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	f1a3 0208 	sub.w	r2, r3, #8
 8008c36:	8bbb      	ldrh	r3, [r7, #28]
 8008c38:	3314      	adds	r3, #20
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d333      	bcc.n	8008ca6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008c3e:	8bfa      	ldrh	r2, [r7, #30]
 8008c40:	8bbb      	ldrh	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3308      	adds	r3, #8
 8008c48:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008c4a:	8a7b      	ldrh	r3, [r7, #18]
 8008c4c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008c50:	d106      	bne.n	8008c60 <mem_malloc+0xb0>
 8008c52:	4b4c      	ldr	r3, [pc, #304]	@ (8008d84 <mem_malloc+0x1d4>)
 8008c54:	f240 3287 	movw	r2, #903	@ 0x387
 8008c58:	494b      	ldr	r1, [pc, #300]	@ (8008d88 <mem_malloc+0x1d8>)
 8008c5a:	484c      	ldr	r0, [pc, #304]	@ (8008d8c <mem_malloc+0x1dc>)
 8008c5c:	f00a f996 	bl	8012f8c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008c60:	8a7b      	ldrh	r3, [r7, #18]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fd00 	bl	8008668 <ptr_to_mem>
 8008c68:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	881a      	ldrh	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8bfa      	ldrh	r2, [r7, #30]
 8008c7c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	8a7a      	ldrh	r2, [r7, #18]
 8008c82:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2201      	movs	r2, #1
 8008c88:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8008c92:	d00b      	beq.n	8008cac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff fce5 	bl	8008668 <ptr_to_mem>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	8a7b      	ldrh	r3, [r7, #18]
 8008ca2:	8053      	strh	r3, [r2, #2]
 8008ca4:	e002      	b.n	8008cac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008cac:	4b34      	ldr	r3, [pc, #208]	@ (8008d80 <mem_malloc+0x1d0>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d127      	bne.n	8008d06 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008cb6:	4b32      	ldr	r3, [pc, #200]	@ (8008d80 <mem_malloc+0x1d0>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008cbc:	e005      	b.n	8008cca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fcd0 	bl	8008668 <ptr_to_mem>
 8008cc8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	791b      	ldrb	r3, [r3, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <mem_malloc+0x12c>
 8008cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008d90 <mem_malloc+0x1e0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d1f0      	bne.n	8008cbe <mem_malloc+0x10e>
          }
          lfree = cur;
 8008cdc:	4a28      	ldr	r2, [pc, #160]	@ (8008d80 <mem_malloc+0x1d0>)
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008ce2:	4b27      	ldr	r3, [pc, #156]	@ (8008d80 <mem_malloc+0x1d0>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8008d90 <mem_malloc+0x1e0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d00b      	beq.n	8008d06 <mem_malloc+0x156>
 8008cee:	4b24      	ldr	r3, [pc, #144]	@ (8008d80 <mem_malloc+0x1d0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	791b      	ldrb	r3, [r3, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d006      	beq.n	8008d06 <mem_malloc+0x156>
 8008cf8:	4b22      	ldr	r3, [pc, #136]	@ (8008d84 <mem_malloc+0x1d4>)
 8008cfa:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8008cfe:	4925      	ldr	r1, [pc, #148]	@ (8008d94 <mem_malloc+0x1e4>)
 8008d00:	4822      	ldr	r0, [pc, #136]	@ (8008d8c <mem_malloc+0x1dc>)
 8008d02:	f00a f943 	bl	8012f8c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008d06:	8bba      	ldrh	r2, [r7, #28]
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	4a20      	ldr	r2, [pc, #128]	@ (8008d90 <mem_malloc+0x1e0>)
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d906      	bls.n	8008d24 <mem_malloc+0x174>
 8008d16:	4b1b      	ldr	r3, [pc, #108]	@ (8008d84 <mem_malloc+0x1d4>)
 8008d18:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008d1c:	491e      	ldr	r1, [pc, #120]	@ (8008d98 <mem_malloc+0x1e8>)
 8008d1e:	481b      	ldr	r0, [pc, #108]	@ (8008d8c <mem_malloc+0x1dc>)
 8008d20:	f00a f934 	bl	8012f8c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d006      	beq.n	8008d3c <mem_malloc+0x18c>
 8008d2e:	4b15      	ldr	r3, [pc, #84]	@ (8008d84 <mem_malloc+0x1d4>)
 8008d30:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008d34:	4919      	ldr	r1, [pc, #100]	@ (8008d9c <mem_malloc+0x1ec>)
 8008d36:	4815      	ldr	r0, [pc, #84]	@ (8008d8c <mem_malloc+0x1dc>)
 8008d38:	f00a f928 	bl	8012f8c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d006      	beq.n	8008d54 <mem_malloc+0x1a4>
 8008d46:	4b0f      	ldr	r3, [pc, #60]	@ (8008d84 <mem_malloc+0x1d4>)
 8008d48:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008d4c:	4914      	ldr	r1, [pc, #80]	@ (8008da0 <mem_malloc+0x1f0>)
 8008d4e:	480f      	ldr	r0, [pc, #60]	@ (8008d8c <mem_malloc+0x1dc>)
 8008d50:	f00a f91c 	bl	8012f8c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	3308      	adds	r3, #8
 8008d58:	e00e      	b.n	8008d78 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008d5a:	8bfb      	ldrh	r3, [r7, #30]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fc83 	bl	8008668 <ptr_to_mem>
 8008d62:	4603      	mov	r3, r0
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008d68:	8bfa      	ldrh	r2, [r7, #30]
 8008d6a:	8bbb      	ldrh	r3, [r7, #28]
 8008d6c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8008d70:	429a      	cmp	r2, r3
 8008d72:	f4ff af44 	bcc.w	8008bfe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20005b48 	.word	0x20005b48
 8008d84:	08013eec 	.word	0x08013eec
 8008d88:	08014094 	.word	0x08014094
 8008d8c:	08013f34 	.word	0x08013f34
 8008d90:	20005b44 	.word	0x20005b44
 8008d94:	080140a8 	.word	0x080140a8
 8008d98:	080140c4 	.word	0x080140c4
 8008d9c:	080140f4 	.word	0x080140f4
 8008da0:	08014124 	.word	0x08014124

08008da4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	3303      	adds	r3, #3
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e011      	b.n	8008dea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	4413      	add	r3, r2
 8008de2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	461a      	mov	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4293      	cmp	r3, r2
 8008df4:	dbe7      	blt.n	8008dc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	80fb      	strh	r3, [r7, #6]
 8008e0e:	e009      	b.n	8008e24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008e10:	88fb      	ldrh	r3, [r7, #6]
 8008e12:	4a08      	ldr	r2, [pc, #32]	@ (8008e34 <memp_init+0x30>)
 8008e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff ffc3 	bl	8008da4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	3301      	adds	r3, #1
 8008e22:	80fb      	strh	r3, [r7, #6]
 8008e24:	88fb      	ldrh	r3, [r7, #6]
 8008e26:	2b08      	cmp	r3, #8
 8008e28:	d9f2      	bls.n	8008e10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	08016cbc 	.word	0x08016cbc

08008e38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d012      	beq.n	8008e74 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d006      	beq.n	8008e70 <do_memp_malloc_pool+0x38>
 8008e62:	4b07      	ldr	r3, [pc, #28]	@ (8008e80 <do_memp_malloc_pool+0x48>)
 8008e64:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008e68:	4906      	ldr	r1, [pc, #24]	@ (8008e84 <do_memp_malloc_pool+0x4c>)
 8008e6a:	4807      	ldr	r0, [pc, #28]	@ (8008e88 <do_memp_malloc_pool+0x50>)
 8008e6c:	f00a f88e 	bl	8012f8c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	e000      	b.n	8008e76 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	08014148 	.word	0x08014148
 8008e84:	08014178 	.word	0x08014178
 8008e88:	0801419c 	.word	0x0801419c

08008e8c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <memp_malloc_pool+0x1c>
 8008e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <memp_malloc_pool+0x38>)
 8008e9c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8008ea0:	4909      	ldr	r1, [pc, #36]	@ (8008ec8 <memp_malloc_pool+0x3c>)
 8008ea2:	480a      	ldr	r0, [pc, #40]	@ (8008ecc <memp_malloc_pool+0x40>)
 8008ea4:	f00a f872 	bl	8012f8c <iprintf>
  if (desc == NULL) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <memp_malloc_pool+0x26>
    return NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e003      	b.n	8008eba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff ffc0 	bl	8008e38 <do_memp_malloc_pool>
 8008eb8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	08014148 	.word	0x08014148
 8008ec8:	080141c4 	.word	0x080141c4
 8008ecc:	0801419c 	.word	0x0801419c

08008ed0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d908      	bls.n	8008ef2 <memp_malloc+0x22>
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8008f0c <memp_malloc+0x3c>)
 8008ee2:	f240 1257 	movw	r2, #343	@ 0x157
 8008ee6:	490a      	ldr	r1, [pc, #40]	@ (8008f10 <memp_malloc+0x40>)
 8008ee8:	480a      	ldr	r0, [pc, #40]	@ (8008f14 <memp_malloc+0x44>)
 8008eea:	f00a f84f 	bl	8012f8c <iprintf>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e008      	b.n	8008f04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	4a08      	ldr	r2, [pc, #32]	@ (8008f18 <memp_malloc+0x48>)
 8008ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff ff9c 	bl	8008e38 <do_memp_malloc_pool>
 8008f00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008f02:	68fb      	ldr	r3, [r7, #12]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	08014148 	.word	0x08014148
 8008f10:	080141d8 	.word	0x080141d8
 8008f14:	0801419c 	.word	0x0801419c
 8008f18:	08016cbc 	.word	0x08016cbc

08008f1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d006      	beq.n	8008f3e <do_memp_free_pool+0x22>
 8008f30:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <do_memp_free_pool+0x40>)
 8008f32:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008f36:	490a      	ldr	r1, [pc, #40]	@ (8008f60 <do_memp_free_pool+0x44>)
 8008f38:	480a      	ldr	r0, [pc, #40]	@ (8008f64 <do_memp_free_pool+0x48>)
 8008f3a:	f00a f827 	bl	8012f8c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	08014148 	.word	0x08014148
 8008f60:	080141f8 	.word	0x080141f8
 8008f64:	0801419c 	.word	0x0801419c

08008f68 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <memp_free_pool+0x1e>
 8008f78:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa4 <memp_free_pool+0x3c>)
 8008f7a:	f240 1295 	movw	r2, #405	@ 0x195
 8008f7e:	490a      	ldr	r1, [pc, #40]	@ (8008fa8 <memp_free_pool+0x40>)
 8008f80:	480a      	ldr	r0, [pc, #40]	@ (8008fac <memp_free_pool+0x44>)
 8008f82:	f00a f803 	bl	8012f8c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <memp_free_pool+0x34>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d004      	beq.n	8008f9c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff ffc1 	bl	8008f1c <do_memp_free_pool>
 8008f9a:	e000      	b.n	8008f9e <memp_free_pool+0x36>
    return;
 8008f9c:	bf00      	nop
}
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	08014148 	.word	0x08014148
 8008fa8:	080141c4 	.word	0x080141c4
 8008fac:	0801419c 	.word	0x0801419c

08008fb0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d907      	bls.n	8008fd2 <memp_free+0x22>
 8008fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff4 <memp_free+0x44>)
 8008fc4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8008fc8:	490b      	ldr	r1, [pc, #44]	@ (8008ff8 <memp_free+0x48>)
 8008fca:	480c      	ldr	r0, [pc, #48]	@ (8008ffc <memp_free+0x4c>)
 8008fcc:	f009 ffde 	bl	8012f8c <iprintf>
 8008fd0:	e00c      	b.n	8008fec <memp_free+0x3c>

  if (mem == NULL) {
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d008      	beq.n	8008fea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	4a09      	ldr	r2, [pc, #36]	@ (8009000 <memp_free+0x50>)
 8008fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff ff9a 	bl	8008f1c <do_memp_free_pool>
 8008fe8:	e000      	b.n	8008fec <memp_free+0x3c>
    return;
 8008fea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	08014148 	.word	0x08014148
 8008ff8:	08014218 	.word	0x08014218
 8008ffc:	0801419c 	.word	0x0801419c
 8009000:	08016cbc 	.word	0x08016cbc

08009004 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009008:	bf00      	nop
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
	...

08009014 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d108      	bne.n	800903a <netif_add+0x26>
 8009028:	4b57      	ldr	r3, [pc, #348]	@ (8009188 <netif_add+0x174>)
 800902a:	f240 1227 	movw	r2, #295	@ 0x127
 800902e:	4957      	ldr	r1, [pc, #348]	@ (800918c <netif_add+0x178>)
 8009030:	4857      	ldr	r0, [pc, #348]	@ (8009190 <netif_add+0x17c>)
 8009032:	f009 ffab 	bl	8012f8c <iprintf>
 8009036:	2300      	movs	r3, #0
 8009038:	e0a2      	b.n	8009180 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	d108      	bne.n	8009052 <netif_add+0x3e>
 8009040:	4b51      	ldr	r3, [pc, #324]	@ (8009188 <netif_add+0x174>)
 8009042:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009046:	4953      	ldr	r1, [pc, #332]	@ (8009194 <netif_add+0x180>)
 8009048:	4851      	ldr	r0, [pc, #324]	@ (8009190 <netif_add+0x17c>)
 800904a:	f009 ff9f 	bl	8012f8c <iprintf>
 800904e:	2300      	movs	r3, #0
 8009050:	e096      	b.n	8009180 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009058:	4b4f      	ldr	r3, [pc, #316]	@ (8009198 <netif_add+0x184>)
 800905a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009062:	4b4d      	ldr	r3, [pc, #308]	@ (8009198 <netif_add+0x184>)
 8009064:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800906c:	4b4a      	ldr	r3, [pc, #296]	@ (8009198 <netif_add+0x184>)
 800906e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	4a45      	ldr	r2, [pc, #276]	@ (800919c <netif_add+0x188>)
 8009086:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a3a      	ldr	r2, [r7, #32]
 80090a0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80090a2:	4b3f      	ldr	r3, [pc, #252]	@ (80091a0 <netif_add+0x18c>)
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090b0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 f913 	bl	80092e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	4798      	blx	r3
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <netif_add+0xba>
    return NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e058      	b.n	8009180 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80090d4:	2bff      	cmp	r3, #255	@ 0xff
 80090d6:	d103      	bne.n	80090e0 <netif_add+0xcc>
        netif->num = 0;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80090e4:	4b2f      	ldr	r3, [pc, #188]	@ (80091a4 <netif_add+0x190>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	e02b      	b.n	8009144 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d106      	bne.n	8009102 <netif_add+0xee>
 80090f4:	4b24      	ldr	r3, [pc, #144]	@ (8009188 <netif_add+0x174>)
 80090f6:	f240 128b 	movw	r2, #395	@ 0x18b
 80090fa:	492b      	ldr	r1, [pc, #172]	@ (80091a8 <netif_add+0x194>)
 80090fc:	4824      	ldr	r0, [pc, #144]	@ (8009190 <netif_add+0x17c>)
 80090fe:	f009 ff45 	bl	8012f8c <iprintf>
        num_netifs++;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	3301      	adds	r3, #1
 8009106:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	2bff      	cmp	r3, #255	@ 0xff
 800910c:	dd06      	ble.n	800911c <netif_add+0x108>
 800910e:	4b1e      	ldr	r3, [pc, #120]	@ (8009188 <netif_add+0x174>)
 8009110:	f240 128d 	movw	r2, #397	@ 0x18d
 8009114:	4925      	ldr	r1, [pc, #148]	@ (80091ac <netif_add+0x198>)
 8009116:	481e      	ldr	r0, [pc, #120]	@ (8009190 <netif_add+0x17c>)
 8009118:	f009 ff38 	bl	8012f8c <iprintf>
        if (netif2->num == netif->num) {
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009128:	429a      	cmp	r2, r3
 800912a:	d108      	bne.n	800913e <netif_add+0x12a>
          netif->num++;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009132:	3301      	adds	r3, #1
 8009134:	b2da      	uxtb	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800913c:	e005      	b.n	800914a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1d0      	bne.n	80090ec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1be      	bne.n	80090ce <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009156:	2bfe      	cmp	r3, #254	@ 0xfe
 8009158:	d103      	bne.n	8009162 <netif_add+0x14e>
    netif_num = 0;
 800915a:	4b11      	ldr	r3, [pc, #68]	@ (80091a0 <netif_add+0x18c>)
 800915c:	2200      	movs	r2, #0
 800915e:	701a      	strb	r2, [r3, #0]
 8009160:	e006      	b.n	8009170 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009168:	3301      	adds	r3, #1
 800916a:	b2da      	uxtb	r2, r3
 800916c:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <netif_add+0x18c>)
 800916e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009170:	4b0c      	ldr	r3, [pc, #48]	@ (80091a4 <netif_add+0x190>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009178:	4a0a      	ldr	r2, [pc, #40]	@ (80091a4 <netif_add+0x190>)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800917e:	68fb      	ldr	r3, [r7, #12]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	08014234 	.word	0x08014234
 800918c:	080142c8 	.word	0x080142c8
 8009190:	08014284 	.word	0x08014284
 8009194:	080142e4 	.word	0x080142e4
 8009198:	08016d20 	.word	0x08016d20
 800919c:	080095bf 	.word	0x080095bf
 80091a0:	20008a40 	.word	0x20008a40
 80091a4:	20008a38 	.word	0x20008a38
 80091a8:	08014308 	.word	0x08014308
 80091ac:	0801431c 	.word	0x0801431c

080091b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f002 fb55 	bl	800b86c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f006 ff23 	bl	8010010 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <netif_do_set_ipaddr+0x20>
 80091e6:	4b1d      	ldr	r3, [pc, #116]	@ (800925c <netif_do_set_ipaddr+0x88>)
 80091e8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80091ec:	491c      	ldr	r1, [pc, #112]	@ (8009260 <netif_do_set_ipaddr+0x8c>)
 80091ee:	481d      	ldr	r0, [pc, #116]	@ (8009264 <netif_do_set_ipaddr+0x90>)
 80091f0:	f009 fecc 	bl	8012f8c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <netif_do_set_ipaddr+0x34>
 80091fa:	4b18      	ldr	r3, [pc, #96]	@ (800925c <netif_do_set_ipaddr+0x88>)
 80091fc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8009200:	4917      	ldr	r1, [pc, #92]	@ (8009260 <netif_do_set_ipaddr+0x8c>)
 8009202:	4818      	ldr	r0, [pc, #96]	@ (8009264 <netif_do_set_ipaddr+0x90>)
 8009204:	f009 fec2 	bl	8012f8c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3304      	adds	r3, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d01c      	beq.n	8009250 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3304      	adds	r3, #4
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009226:	f107 0314 	add.w	r3, r7, #20
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ffbf 	bl	80091b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <netif_do_set_ipaddr+0x6a>
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	e000      	b.n	8009240 <netif_do_set_ipaddr+0x6c>
 800923e:	2300      	movs	r3, #0
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009244:	2101      	movs	r1, #1
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f8d2 	bl	80093f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800924c:	2301      	movs	r3, #1
 800924e:	e000      	b.n	8009252 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	08014234 	.word	0x08014234
 8009260:	0801434c 	.word	0x0801434c
 8009264:	08014284 	.word	0x08014284

08009268 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3308      	adds	r3, #8
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d00a      	beq.n	8009298 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <netif_do_set_netmask+0x26>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	e000      	b.n	8009290 <netif_do_set_netmask+0x28>
 800928e:	2300      	movs	r3, #0
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009294:	2301      	movs	r3, #1
 8009296:	e000      	b.n	800929a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b085      	sub	sp, #20
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	330c      	adds	r3, #12
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d00a      	beq.n	80092d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <netif_do_set_gw+0x26>
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	e000      	b.n	80092ce <netif_do_set_gw+0x28>
 80092cc:	2300      	movs	r3, #0
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80092f2:	2300      	movs	r3, #0
 80092f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009300:	4b1c      	ldr	r3, [pc, #112]	@ (8009374 <netif_set_addr+0x90>)
 8009302:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800930a:	4b1a      	ldr	r3, [pc, #104]	@ (8009374 <netif_set_addr+0x90>)
 800930c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009314:	4b17      	ldr	r3, [pc, #92]	@ (8009374 <netif_set_addr+0x90>)
 8009316:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <netif_set_addr+0x42>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d101      	bne.n	800932a <netif_set_addr+0x46>
 8009326:	2301      	movs	r3, #1
 8009328:	e000      	b.n	800932c <netif_set_addr+0x48>
 800932a:	2300      	movs	r3, #0
 800932c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009334:	f107 0310 	add.w	r3, r7, #16
 8009338:	461a      	mov	r2, r3
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7ff ff49 	bl	80091d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff ff8e 	bl	8009268 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7ff ffa8 	bl	80092a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800935c:	f107 0310 	add.w	r3, r7, #16
 8009360:	461a      	mov	r2, r3
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff ff35 	bl	80091d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800936a:	bf00      	nop
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	08016d20 	.word	0x08016d20

08009378 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009380:	4a04      	ldr	r2, [pc, #16]	@ (8009394 <netif_set_default+0x1c>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	20008a3c 	.word	0x20008a3c

08009398 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d107      	bne.n	80093b6 <netif_set_up+0x1e>
 80093a6:	4b0f      	ldr	r3, [pc, #60]	@ (80093e4 <netif_set_up+0x4c>)
 80093a8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80093ac:	490e      	ldr	r1, [pc, #56]	@ (80093e8 <netif_set_up+0x50>)
 80093ae:	480f      	ldr	r0, [pc, #60]	@ (80093ec <netif_set_up+0x54>)
 80093b0:	f009 fdec 	bl	8012f8c <iprintf>
 80093b4:	e013      	b.n	80093de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10c      	bne.n	80093de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80093d6:	2103      	movs	r1, #3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f809 	bl	80093f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	08014234 	.word	0x08014234
 80093e8:	080143bc 	.word	0x080143bc
 80093ec:	08014284 	.word	0x08014284

080093f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <netif_issue_reports+0x20>
 8009402:	4b18      	ldr	r3, [pc, #96]	@ (8009464 <netif_issue_reports+0x74>)
 8009404:	f240 326d 	movw	r2, #877	@ 0x36d
 8009408:	4917      	ldr	r1, [pc, #92]	@ (8009468 <netif_issue_reports+0x78>)
 800940a:	4818      	ldr	r0, [pc, #96]	@ (800946c <netif_issue_reports+0x7c>)
 800940c:	f009 fdbe 	bl	8012f8c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d01e      	beq.n	800945c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009424:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009428:	2b00      	cmp	r3, #0
 800942a:	d017      	beq.n	800945c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d013      	beq.n	800945e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3304      	adds	r3, #4
 800943a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00e      	beq.n	800945e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3304      	adds	r3, #4
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f007 fd45 	bl	8010ee4 <etharp_request>
 800945a:	e000      	b.n	800945e <netif_issue_reports+0x6e>
    return;
 800945c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	08014234 	.word	0x08014234
 8009468:	080143d8 	.word	0x080143d8
 800946c:	08014284 	.word	0x08014284

08009470 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d107      	bne.n	800948e <netif_set_down+0x1e>
 800947e:	4b12      	ldr	r3, [pc, #72]	@ (80094c8 <netif_set_down+0x58>)
 8009480:	f240 329b 	movw	r2, #923	@ 0x39b
 8009484:	4911      	ldr	r1, [pc, #68]	@ (80094cc <netif_set_down+0x5c>)
 8009486:	4812      	ldr	r0, [pc, #72]	@ (80094d0 <netif_set_down+0x60>)
 8009488:	f009 fd80 	bl	8012f8c <iprintf>
 800948c:	e019      	b.n	80094c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	d012      	beq.n	80094c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80094a2:	f023 0301 	bic.w	r3, r3, #1
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f007 f8cf 	bl	8010660 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	08014234 	.word	0x08014234
 80094cc:	080143fc 	.word	0x080143fc
 80094d0:	08014284 	.word	0x08014284

080094d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d107      	bne.n	80094f2 <netif_set_link_up+0x1e>
 80094e2:	4b13      	ldr	r3, [pc, #76]	@ (8009530 <netif_set_link_up+0x5c>)
 80094e4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80094e8:	4912      	ldr	r1, [pc, #72]	@ (8009534 <netif_set_link_up+0x60>)
 80094ea:	4813      	ldr	r0, [pc, #76]	@ (8009538 <netif_set_link_up+0x64>)
 80094ec:	f009 fd4e 	bl	8012f8c <iprintf>
 80094f0:	e01b      	b.n	800952a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80094f8:	f003 0304 	and.w	r3, r3, #4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d114      	bne.n	800952a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009506:	f043 0304 	orr.w	r3, r3, #4
 800950a:	b2da      	uxtb	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009512:	2103      	movs	r1, #3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff ff6b 	bl	80093f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <netif_set_link_up+0x56>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	08014234 	.word	0x08014234
 8009534:	0801441c 	.word	0x0801441c
 8009538:	08014284 	.word	0x08014284

0800953c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d107      	bne.n	800955a <netif_set_link_down+0x1e>
 800954a:	4b11      	ldr	r3, [pc, #68]	@ (8009590 <netif_set_link_down+0x54>)
 800954c:	f240 4206 	movw	r2, #1030	@ 0x406
 8009550:	4910      	ldr	r1, [pc, #64]	@ (8009594 <netif_set_link_down+0x58>)
 8009552:	4811      	ldr	r0, [pc, #68]	@ (8009598 <netif_set_link_down+0x5c>)
 8009554:	f009 fd1a 	bl	8012f8c <iprintf>
 8009558:	e017      	b.n	800958a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d010      	beq.n	800958a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800956e:	f023 0304 	bic.w	r3, r3, #4
 8009572:	b2da      	uxtb	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <netif_set_link_down+0x4e>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	08014234 	.word	0x08014234
 8009594:	08014440 	.word	0x08014440
 8009598:	08014284 	.word	0x08014284

0800959c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	61da      	str	r2, [r3, #28]
  }
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80095be:	b480      	push	{r7}
 80095c0:	b085      	sub	sp, #20
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80095ca:	f06f 030b 	mvn.w	r3, #11
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d013      	beq.n	8009614 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80095ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009624 <netif_get_by_index+0x48>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	e00c      	b.n	800960e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095fa:	3301      	adds	r3, #1
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	79fa      	ldrb	r2, [r7, #7]
 8009600:	429a      	cmp	r2, r3
 8009602:	d101      	bne.n	8009608 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	e006      	b.n	8009616 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1ef      	bne.n	80095f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20008a38 	.word	0x20008a38

08009628 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800962e:	4b0c      	ldr	r3, [pc, #48]	@ (8009660 <pbuf_free_ooseq+0x38>)
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009634:	4b0b      	ldr	r3, [pc, #44]	@ (8009664 <pbuf_free_ooseq+0x3c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	607b      	str	r3, [r7, #4]
 800963a:	e00a      	b.n	8009652 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f002 f94f 	bl	800b8e8 <tcp_free_ooseq>
      return;
 800964a:	e005      	b.n	8009658 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	607b      	str	r3, [r7, #4]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1f1      	bne.n	800963c <pbuf_free_ooseq+0x14>
    }
  }
}
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20008a41 	.word	0x20008a41
 8009664:	20008a50 	.word	0x20008a50

08009668 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800966c:	4b03      	ldr	r3, [pc, #12]	@ (800967c <pbuf_pool_is_empty+0x14>)
 800966e:	2201      	movs	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009672:	bf00      	nop
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20008a41 	.word	0x20008a41

08009680 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4611      	mov	r1, r2
 800968c:	461a      	mov	r2, r3
 800968e:	460b      	mov	r3, r1
 8009690:	80fb      	strh	r3, [r7, #6]
 8009692:	4613      	mov	r3, r2
 8009694:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	88fa      	ldrh	r2, [r7, #6]
 80096a6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	88ba      	ldrh	r2, [r7, #4]
 80096ac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80096ae:	8b3b      	ldrh	r3, [r7, #24]
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	7f3a      	ldrb	r2, [r7, #28]
 80096ba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2201      	movs	r2, #1
 80096c0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	73da      	strb	r2, [r3, #15]
}
 80096c8:	bf00      	nop
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	@ 0x30
 80096d8:	af02      	add	r7, sp, #8
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
 80096de:	460b      	mov	r3, r1
 80096e0:	80bb      	strh	r3, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80096ea:	887b      	ldrh	r3, [r7, #2]
 80096ec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80096f0:	d07f      	beq.n	80097f2 <pbuf_alloc+0x11e>
 80096f2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80096f6:	f300 80c8 	bgt.w	800988a <pbuf_alloc+0x1b6>
 80096fa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80096fe:	d010      	beq.n	8009722 <pbuf_alloc+0x4e>
 8009700:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009704:	f300 80c1 	bgt.w	800988a <pbuf_alloc+0x1b6>
 8009708:	2b01      	cmp	r3, #1
 800970a:	d002      	beq.n	8009712 <pbuf_alloc+0x3e>
 800970c:	2b41      	cmp	r3, #65	@ 0x41
 800970e:	f040 80bc 	bne.w	800988a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009712:	887a      	ldrh	r2, [r7, #2]
 8009714:	88bb      	ldrh	r3, [r7, #4]
 8009716:	4619      	mov	r1, r3
 8009718:	2000      	movs	r0, #0
 800971a:	f000 f8d1 	bl	80098c0 <pbuf_alloc_reference>
 800971e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8009720:	e0bd      	b.n	800989e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009722:	2300      	movs	r3, #0
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800972a:	88bb      	ldrh	r3, [r7, #4]
 800972c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800972e:	2008      	movs	r0, #8
 8009730:	f7ff fbce 	bl	8008ed0 <memp_malloc>
 8009734:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800973c:	f7ff ff94 	bl	8009668 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <pbuf_alloc+0x78>
            pbuf_free(p);
 8009746:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009748:	f000 faa8 	bl	8009c9c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800974c:	2300      	movs	r3, #0
 800974e:	e0a7      	b.n	80098a0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009750:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009752:	3303      	adds	r3, #3
 8009754:	b29b      	uxth	r3, r3
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	b29b      	uxth	r3, r3
 800975c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8009760:	b29b      	uxth	r3, r3
 8009762:	8b7a      	ldrh	r2, [r7, #26]
 8009764:	4293      	cmp	r3, r2
 8009766:	bf28      	it	cs
 8009768:	4613      	movcs	r3, r2
 800976a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800976c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800976e:	3310      	adds	r3, #16
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	4413      	add	r3, r2
 8009774:	3303      	adds	r3, #3
 8009776:	f023 0303 	bic.w	r3, r3, #3
 800977a:	4618      	mov	r0, r3
 800977c:	89f9      	ldrh	r1, [r7, #14]
 800977e:	8b7a      	ldrh	r2, [r7, #26]
 8009780:	2300      	movs	r3, #0
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	887b      	ldrh	r3, [r7, #2]
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	460b      	mov	r3, r1
 800978a:	4601      	mov	r1, r0
 800978c:	6938      	ldr	r0, [r7, #16]
 800978e:	f7ff ff77 	bl	8009680 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d006      	beq.n	80097ac <pbuf_alloc+0xd8>
 800979e:	4b42      	ldr	r3, [pc, #264]	@ (80098a8 <pbuf_alloc+0x1d4>)
 80097a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097a4:	4941      	ldr	r1, [pc, #260]	@ (80098ac <pbuf_alloc+0x1d8>)
 80097a6:	4842      	ldr	r0, [pc, #264]	@ (80098b0 <pbuf_alloc+0x1dc>)
 80097a8:	f009 fbf0 	bl	8012f8c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80097ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097ae:	3303      	adds	r3, #3
 80097b0:	f023 0303 	bic.w	r3, r3, #3
 80097b4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80097b8:	d106      	bne.n	80097c8 <pbuf_alloc+0xf4>
 80097ba:	4b3b      	ldr	r3, [pc, #236]	@ (80098a8 <pbuf_alloc+0x1d4>)
 80097bc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80097c0:	493c      	ldr	r1, [pc, #240]	@ (80098b4 <pbuf_alloc+0x1e0>)
 80097c2:	483b      	ldr	r0, [pc, #236]	@ (80098b0 <pbuf_alloc+0x1dc>)
 80097c4:	f009 fbe2 	bl	8012f8c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d102      	bne.n	80097d4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097d2:	e002      	b.n	80097da <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80097de:	8b7a      	ldrh	r2, [r7, #26]
 80097e0:	89fb      	ldrh	r3, [r7, #14]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80097ea:	8b7b      	ldrh	r3, [r7, #26]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d19e      	bne.n	800972e <pbuf_alloc+0x5a>
      break;
 80097f0:	e055      	b.n	800989e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80097f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097f4:	3303      	adds	r3, #3
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	f023 0303 	bic.w	r3, r3, #3
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	88bb      	ldrh	r3, [r7, #4]
 8009800:	3303      	adds	r3, #3
 8009802:	b29b      	uxth	r3, r3
 8009804:	f023 0303 	bic.w	r3, r3, #3
 8009808:	b29b      	uxth	r3, r3
 800980a:	4413      	add	r3, r2
 800980c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800980e:	8b3b      	ldrh	r3, [r7, #24]
 8009810:	3310      	adds	r3, #16
 8009812:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009814:	8b3a      	ldrh	r2, [r7, #24]
 8009816:	88bb      	ldrh	r3, [r7, #4]
 8009818:	3303      	adds	r3, #3
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	429a      	cmp	r2, r3
 8009820:	d306      	bcc.n	8009830 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009822:	8afa      	ldrh	r2, [r7, #22]
 8009824:	88bb      	ldrh	r3, [r7, #4]
 8009826:	3303      	adds	r3, #3
 8009828:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800982c:	429a      	cmp	r2, r3
 800982e:	d201      	bcs.n	8009834 <pbuf_alloc+0x160>
        return NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	e035      	b.n	80098a0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009834:	8afb      	ldrh	r3, [r7, #22]
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff f9ba 	bl	8008bb0 <mem_malloc>
 800983c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <pbuf_alloc+0x174>
        return NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	e02b      	b.n	80098a0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009848:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800984a:	3310      	adds	r3, #16
 800984c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800984e:	4413      	add	r3, r2
 8009850:	3303      	adds	r3, #3
 8009852:	f023 0303 	bic.w	r3, r3, #3
 8009856:	4618      	mov	r0, r3
 8009858:	88b9      	ldrh	r1, [r7, #4]
 800985a:	88ba      	ldrh	r2, [r7, #4]
 800985c:	2300      	movs	r3, #0
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	887b      	ldrh	r3, [r7, #2]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	460b      	mov	r3, r1
 8009866:	4601      	mov	r1, r0
 8009868:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800986a:	f7ff ff09 	bl	8009680 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800986e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d010      	beq.n	800989c <pbuf_alloc+0x1c8>
 800987a:	4b0b      	ldr	r3, [pc, #44]	@ (80098a8 <pbuf_alloc+0x1d4>)
 800987c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8009880:	490d      	ldr	r1, [pc, #52]	@ (80098b8 <pbuf_alloc+0x1e4>)
 8009882:	480b      	ldr	r0, [pc, #44]	@ (80098b0 <pbuf_alloc+0x1dc>)
 8009884:	f009 fb82 	bl	8012f8c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009888:	e008      	b.n	800989c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800988a:	4b07      	ldr	r3, [pc, #28]	@ (80098a8 <pbuf_alloc+0x1d4>)
 800988c:	f240 1227 	movw	r2, #295	@ 0x127
 8009890:	490a      	ldr	r1, [pc, #40]	@ (80098bc <pbuf_alloc+0x1e8>)
 8009892:	4807      	ldr	r0, [pc, #28]	@ (80098b0 <pbuf_alloc+0x1dc>)
 8009894:	f009 fb7a 	bl	8012f8c <iprintf>
      return NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	e001      	b.n	80098a0 <pbuf_alloc+0x1cc>
      break;
 800989c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3728      	adds	r7, #40	@ 0x28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	08014464 	.word	0x08014464
 80098ac:	08014494 	.word	0x08014494
 80098b0:	080144c4 	.word	0x080144c4
 80098b4:	080144ec 	.word	0x080144ec
 80098b8:	08014520 	.word	0x08014520
 80098bc:	0801454c 	.word	0x0801454c

080098c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af02      	add	r7, sp, #8
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	807b      	strh	r3, [r7, #2]
 80098cc:	4613      	mov	r3, r2
 80098ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80098d0:	883b      	ldrh	r3, [r7, #0]
 80098d2:	2b41      	cmp	r3, #65	@ 0x41
 80098d4:	d009      	beq.n	80098ea <pbuf_alloc_reference+0x2a>
 80098d6:	883b      	ldrh	r3, [r7, #0]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d006      	beq.n	80098ea <pbuf_alloc_reference+0x2a>
 80098dc:	4b0f      	ldr	r3, [pc, #60]	@ (800991c <pbuf_alloc_reference+0x5c>)
 80098de:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80098e2:	490f      	ldr	r1, [pc, #60]	@ (8009920 <pbuf_alloc_reference+0x60>)
 80098e4:	480f      	ldr	r0, [pc, #60]	@ (8009924 <pbuf_alloc_reference+0x64>)
 80098e6:	f009 fb51 	bl	8012f8c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80098ea:	2007      	movs	r0, #7
 80098ec:	f7ff faf0 	bl	8008ed0 <memp_malloc>
 80098f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e00b      	b.n	8009914 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80098fc:	8879      	ldrh	r1, [r7, #2]
 80098fe:	887a      	ldrh	r2, [r7, #2]
 8009900:	2300      	movs	r3, #0
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	883b      	ldrh	r3, [r7, #0]
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	460b      	mov	r3, r1
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f7ff feb7 	bl	8009680 <pbuf_init_alloced_pbuf>
  return p;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	08014464 	.word	0x08014464
 8009920:	08014568 	.word	0x08014568
 8009924:	080144c4 	.word	0x080144c4

08009928 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af02      	add	r7, sp, #8
 800992e:	607b      	str	r3, [r7, #4]
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	460b      	mov	r3, r1
 8009936:	81bb      	strh	r3, [r7, #12]
 8009938:	4613      	mov	r3, r2
 800993a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009940:	8a7b      	ldrh	r3, [r7, #18]
 8009942:	3303      	adds	r3, #3
 8009944:	f023 0203 	bic.w	r2, r3, #3
 8009948:	89bb      	ldrh	r3, [r7, #12]
 800994a:	441a      	add	r2, r3
 800994c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800994e:	429a      	cmp	r2, r3
 8009950:	d901      	bls.n	8009956 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	e018      	b.n	8009988 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d007      	beq.n	800996c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800995c:	8a7b      	ldrh	r3, [r7, #18]
 800995e:	3303      	adds	r3, #3
 8009960:	f023 0303 	bic.w	r3, r3, #3
 8009964:	6a3a      	ldr	r2, [r7, #32]
 8009966:	4413      	add	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
 800996a:	e001      	b.n	8009970 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800996c:	2300      	movs	r3, #0
 800996e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	89b9      	ldrh	r1, [r7, #12]
 8009974:	89ba      	ldrh	r2, [r7, #12]
 8009976:	2302      	movs	r3, #2
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	897b      	ldrh	r3, [r7, #10]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	460b      	mov	r3, r1
 8009980:	6979      	ldr	r1, [r7, #20]
 8009982:	f7ff fe7d 	bl	8009680 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009986:	687b      	ldr	r3, [r7, #4]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <pbuf_realloc+0x20>
 80099a2:	4b3a      	ldr	r3, [pc, #232]	@ (8009a8c <pbuf_realloc+0xfc>)
 80099a4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80099a8:	4939      	ldr	r1, [pc, #228]	@ (8009a90 <pbuf_realloc+0x100>)
 80099aa:	483a      	ldr	r0, [pc, #232]	@ (8009a94 <pbuf_realloc+0x104>)
 80099ac:	f009 faee 	bl	8012f8c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	891b      	ldrh	r3, [r3, #8]
 80099b4:	887a      	ldrh	r2, [r7, #2]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d263      	bcs.n	8009a82 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	891a      	ldrh	r2, [r3, #8]
 80099be:	887b      	ldrh	r3, [r7, #2]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80099c4:	887b      	ldrh	r3, [r7, #2]
 80099c6:	817b      	strh	r3, [r7, #10]
  q = p;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80099cc:	e018      	b.n	8009a00 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	895b      	ldrh	r3, [r3, #10]
 80099d2:	897a      	ldrh	r2, [r7, #10]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	891a      	ldrh	r2, [r3, #8]
 80099dc:	893b      	ldrh	r3, [r7, #8]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <pbuf_realloc+0x70>
 80099f2:	4b26      	ldr	r3, [pc, #152]	@ (8009a8c <pbuf_realloc+0xfc>)
 80099f4:	f240 12af 	movw	r2, #431	@ 0x1af
 80099f8:	4927      	ldr	r1, [pc, #156]	@ (8009a98 <pbuf_realloc+0x108>)
 80099fa:	4826      	ldr	r0, [pc, #152]	@ (8009a94 <pbuf_realloc+0x104>)
 80099fc:	f009 fac6 	bl	8012f8c <iprintf>
  while (rem_len > q->len) {
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	895b      	ldrh	r3, [r3, #10]
 8009a04:	897a      	ldrh	r2, [r7, #10]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d8e1      	bhi.n	80099ce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	7b1b      	ldrb	r3, [r3, #12]
 8009a0e:	f003 030f 	and.w	r3, r3, #15
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d121      	bne.n	8009a5a <pbuf_realloc+0xca>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	895b      	ldrh	r3, [r3, #10]
 8009a1a:	897a      	ldrh	r2, [r7, #10]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d01c      	beq.n	8009a5a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	7b5b      	ldrb	r3, [r3, #13]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d116      	bne.n	8009a5a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	897b      	ldrh	r3, [r7, #10]
 8009a38:	4413      	add	r3, r2
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7fe ffba 	bl	80089b8 <mem_trim>
 8009a44:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d106      	bne.n	8009a5a <pbuf_realloc+0xca>
 8009a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a8c <pbuf_realloc+0xfc>)
 8009a4e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8009a52:	4912      	ldr	r1, [pc, #72]	@ (8009a9c <pbuf_realloc+0x10c>)
 8009a54:	480f      	ldr	r0, [pc, #60]	@ (8009a94 <pbuf_realloc+0x104>)
 8009a56:	f009 fa99 	bl	8012f8c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	897a      	ldrh	r2, [r7, #10]
 8009a5e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	895a      	ldrh	r2, [r3, #10]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d004      	beq.n	8009a7a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f911 	bl	8009c9c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e000      	b.n	8009a84 <pbuf_realloc+0xf4>
    return;
 8009a82:	bf00      	nop

}
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	08014464 	.word	0x08014464
 8009a90:	0801457c 	.word	0x0801457c
 8009a94:	080144c4 	.word	0x080144c4
 8009a98:	08014594 	.word	0x08014594
 8009a9c:	080145ac 	.word	0x080145ac

08009aa0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <pbuf_add_header_impl+0x22>
 8009ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8009b64 <pbuf_add_header_impl+0xc4>)
 8009ab6:	f240 12df 	movw	r2, #479	@ 0x1df
 8009aba:	492b      	ldr	r1, [pc, #172]	@ (8009b68 <pbuf_add_header_impl+0xc8>)
 8009abc:	482b      	ldr	r0, [pc, #172]	@ (8009b6c <pbuf_add_header_impl+0xcc>)
 8009abe:	f009 fa65 	bl	8012f8c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <pbuf_add_header_impl+0x30>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ace:	d301      	bcc.n	8009ad4 <pbuf_add_header_impl+0x34>
    return 1;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e043      	b.n	8009b5c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <pbuf_add_header_impl+0x3e>
    return 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e03e      	b.n	8009b5c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	891a      	ldrh	r2, [r3, #8]
 8009ae6:	8a7b      	ldrh	r3, [r7, #18]
 8009ae8:	4413      	add	r3, r2
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	8a7a      	ldrh	r2, [r7, #18]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d901      	bls.n	8009af6 <pbuf_add_header_impl+0x56>
    return 1;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e032      	b.n	8009b5c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	7b1b      	ldrb	r3, [r3, #12]
 8009afa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009afc:	8a3b      	ldrh	r3, [r7, #16]
 8009afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00c      	beq.n	8009b20 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	425b      	negs	r3, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3310      	adds	r3, #16
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d20d      	bcs.n	8009b38 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e01d      	b.n	8009b5c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d006      	beq.n	8009b34 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	425b      	negs	r3, r3
 8009b2e:	4413      	add	r3, r2
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	e001      	b.n	8009b38 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e011      	b.n	8009b5c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	895a      	ldrh	r2, [r3, #10]
 8009b42:	8a7b      	ldrh	r3, [r7, #18]
 8009b44:	4413      	add	r3, r2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	891a      	ldrh	r2, [r3, #8]
 8009b50:	8a7b      	ldrh	r3, [r7, #18]
 8009b52:	4413      	add	r3, r2
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	811a      	strh	r2, [r3, #8]


  return 0;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	08014464 	.word	0x08014464
 8009b68:	080145c8 	.word	0x080145c8
 8009b6c:	080144c4 	.word	0x080144c4

08009b70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff ff8e 	bl	8009aa0 <pbuf_add_header_impl>
 8009b84:	4603      	mov	r3, r0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <pbuf_remove_header+0x1e>
 8009ba0:	4b20      	ldr	r3, [pc, #128]	@ (8009c24 <pbuf_remove_header+0x94>)
 8009ba2:	f240 224b 	movw	r2, #587	@ 0x24b
 8009ba6:	4920      	ldr	r1, [pc, #128]	@ (8009c28 <pbuf_remove_header+0x98>)
 8009ba8:	4820      	ldr	r0, [pc, #128]	@ (8009c2c <pbuf_remove_header+0x9c>)
 8009baa:	f009 f9ef 	bl	8012f8c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <pbuf_remove_header+0x2c>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bba:	d301      	bcc.n	8009bc0 <pbuf_remove_header+0x30>
    return 1;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e02c      	b.n	8009c1a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <pbuf_remove_header+0x3a>
    return 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e027      	b.n	8009c1a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	895b      	ldrh	r3, [r3, #10]
 8009bd2:	89fa      	ldrh	r2, [r7, #14]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d908      	bls.n	8009bea <pbuf_remove_header+0x5a>
 8009bd8:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <pbuf_remove_header+0x94>)
 8009bda:	f240 2255 	movw	r2, #597	@ 0x255
 8009bde:	4914      	ldr	r1, [pc, #80]	@ (8009c30 <pbuf_remove_header+0xa0>)
 8009be0:	4812      	ldr	r0, [pc, #72]	@ (8009c2c <pbuf_remove_header+0x9c>)
 8009be2:	f009 f9d3 	bl	8012f8c <iprintf>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e017      	b.n	8009c1a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	441a      	add	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	895a      	ldrh	r2, [r3, #10]
 8009c00:	89fb      	ldrh	r3, [r7, #14]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	891a      	ldrh	r2, [r3, #8]
 8009c0e:	89fb      	ldrh	r3, [r7, #14]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	08014464 	.word	0x08014464
 8009c28:	080145c8 	.word	0x080145c8
 8009c2c:	080144c4 	.word	0x080144c4
 8009c30:	080145d4 	.word	0x080145d4

08009c34 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	807b      	strh	r3, [r7, #2]
 8009c40:	4613      	mov	r3, r2
 8009c42:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	da08      	bge.n	8009c5e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009c4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c50:	425b      	negs	r3, r3
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff ff9b 	bl	8009b90 <pbuf_remove_header>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	e007      	b.n	8009c6e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009c5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c62:	787a      	ldrb	r2, [r7, #1]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff ff1a 	bl	8009aa0 <pbuf_add_header_impl>
 8009c6c:	4603      	mov	r3, r0
  }
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009c82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c86:	2201      	movs	r2, #1
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff ffd2 	bl	8009c34 <pbuf_header_impl>
 8009c90:	4603      	mov	r3, r0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10b      	bne.n	8009cc2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d106      	bne.n	8009cbe <pbuf_free+0x22>
 8009cb0:	4b38      	ldr	r3, [pc, #224]	@ (8009d94 <pbuf_free+0xf8>)
 8009cb2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8009cb6:	4938      	ldr	r1, [pc, #224]	@ (8009d98 <pbuf_free+0xfc>)
 8009cb8:	4838      	ldr	r0, [pc, #224]	@ (8009d9c <pbuf_free+0x100>)
 8009cba:	f009 f967 	bl	8012f8c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e063      	b.n	8009d8a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009cc6:	e05c      	b.n	8009d82 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	7b9b      	ldrb	r3, [r3, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <pbuf_free+0x42>
 8009cd0:	4b30      	ldr	r3, [pc, #192]	@ (8009d94 <pbuf_free+0xf8>)
 8009cd2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8009cd6:	4932      	ldr	r1, [pc, #200]	@ (8009da0 <pbuf_free+0x104>)
 8009cd8:	4830      	ldr	r0, [pc, #192]	@ (8009d9c <pbuf_free+0x100>)
 8009cda:	f009 f957 	bl	8012f8c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7b9b      	ldrb	r3, [r3, #14]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	739a      	strb	r2, [r3, #14]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	7b9b      	ldrb	r3, [r3, #14]
 8009cee:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009cf0:	7dbb      	ldrb	r3, [r7, #22]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d143      	bne.n	8009d7e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7b1b      	ldrb	r3, [r3, #12]
 8009d00:	f003 030f 	and.w	r3, r3, #15
 8009d04:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	7b5b      	ldrb	r3, [r3, #13]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d011      	beq.n	8009d36 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d106      	bne.n	8009d2c <pbuf_free+0x90>
 8009d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8009d94 <pbuf_free+0xf8>)
 8009d20:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8009d24:	491f      	ldr	r1, [pc, #124]	@ (8009da4 <pbuf_free+0x108>)
 8009d26:	481d      	ldr	r0, [pc, #116]	@ (8009d9c <pbuf_free+0x100>)
 8009d28:	f009 f930 	bl	8012f8c <iprintf>
        pc->custom_free_function(p);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	4798      	blx	r3
 8009d34:	e01d      	b.n	8009d72 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d104      	bne.n	8009d46 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	2008      	movs	r0, #8
 8009d40:	f7ff f936 	bl	8008fb0 <memp_free>
 8009d44:	e015      	b.n	8009d72 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d104      	bne.n	8009d56 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	2007      	movs	r0, #7
 8009d50:	f7ff f92e 	bl	8008fb0 <memp_free>
 8009d54:	e00d      	b.n	8009d72 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <pbuf_free+0xc8>
          mem_free(p);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7fe fdc1 	bl	80088e4 <mem_free>
 8009d62:	e006      	b.n	8009d72 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009d64:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <pbuf_free+0xf8>)
 8009d66:	f240 320f 	movw	r2, #783	@ 0x30f
 8009d6a:	490f      	ldr	r1, [pc, #60]	@ (8009da8 <pbuf_free+0x10c>)
 8009d6c:	480b      	ldr	r0, [pc, #44]	@ (8009d9c <pbuf_free+0x100>)
 8009d6e:	f009 f90d 	bl	8012f8c <iprintf>
        }
      }
      count++;
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	3301      	adds	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	607b      	str	r3, [r7, #4]
 8009d7c:	e001      	b.n	8009d82 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d19f      	bne.n	8009cc8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	08014464 	.word	0x08014464
 8009d98:	080145c8 	.word	0x080145c8
 8009d9c:	080144c4 	.word	0x080144c4
 8009da0:	080145f4 	.word	0x080145f4
 8009da4:	0801460c 	.word	0x0801460c
 8009da8:	08014630 	.word	0x08014630

08009dac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009db8:	e005      	b.n	8009dc6 <pbuf_clen+0x1a>
    ++len;
 8009dba:	89fb      	ldrh	r3, [r7, #14]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f6      	bne.n	8009dba <pbuf_clen+0xe>
  }
  return len;
 8009dcc:	89fb      	ldrh	r3, [r7, #14]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
	...

08009ddc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d010      	beq.n	8009e0c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7b9b      	ldrb	r3, [r3, #14]
 8009dee:	3301      	adds	r3, #1
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7b9b      	ldrb	r3, [r3, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <pbuf_ref+0x30>
 8009dfe:	4b05      	ldr	r3, [pc, #20]	@ (8009e14 <pbuf_ref+0x38>)
 8009e00:	f240 3242 	movw	r2, #834	@ 0x342
 8009e04:	4904      	ldr	r1, [pc, #16]	@ (8009e18 <pbuf_ref+0x3c>)
 8009e06:	4805      	ldr	r0, [pc, #20]	@ (8009e1c <pbuf_ref+0x40>)
 8009e08:	f009 f8c0 	bl	8012f8c <iprintf>
  }
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	08014464 	.word	0x08014464
 8009e18:	08014644 	.word	0x08014644
 8009e1c:	080144c4 	.word	0x080144c4

08009e20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <pbuf_cat+0x16>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d107      	bne.n	8009e46 <pbuf_cat+0x26>
 8009e36:	4b20      	ldr	r3, [pc, #128]	@ (8009eb8 <pbuf_cat+0x98>)
 8009e38:	f240 3259 	movw	r2, #857	@ 0x359
 8009e3c:	491f      	ldr	r1, [pc, #124]	@ (8009ebc <pbuf_cat+0x9c>)
 8009e3e:	4820      	ldr	r0, [pc, #128]	@ (8009ec0 <pbuf_cat+0xa0>)
 8009e40:	f009 f8a4 	bl	8012f8c <iprintf>
 8009e44:	e034      	b.n	8009eb0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	e00a      	b.n	8009e62 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	891a      	ldrh	r2, [r3, #8]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	891b      	ldrh	r3, [r3, #8]
 8009e54:	4413      	add	r3, r2
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1f0      	bne.n	8009e4c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	891a      	ldrh	r2, [r3, #8]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	895b      	ldrh	r3, [r3, #10]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d006      	beq.n	8009e84 <pbuf_cat+0x64>
 8009e76:	4b10      	ldr	r3, [pc, #64]	@ (8009eb8 <pbuf_cat+0x98>)
 8009e78:	f240 3262 	movw	r2, #866	@ 0x362
 8009e7c:	4911      	ldr	r1, [pc, #68]	@ (8009ec4 <pbuf_cat+0xa4>)
 8009e7e:	4810      	ldr	r0, [pc, #64]	@ (8009ec0 <pbuf_cat+0xa0>)
 8009e80:	f009 f884 	bl	8012f8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d006      	beq.n	8009e9a <pbuf_cat+0x7a>
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb8 <pbuf_cat+0x98>)
 8009e8e:	f240 3263 	movw	r2, #867	@ 0x363
 8009e92:	490d      	ldr	r1, [pc, #52]	@ (8009ec8 <pbuf_cat+0xa8>)
 8009e94:	480a      	ldr	r0, [pc, #40]	@ (8009ec0 <pbuf_cat+0xa0>)
 8009e96:	f009 f879 	bl	8012f8c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	891a      	ldrh	r2, [r3, #8]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	891b      	ldrh	r3, [r3, #8]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	08014464 	.word	0x08014464
 8009ebc:	08014658 	.word	0x08014658
 8009ec0:	080144c4 	.word	0x080144c4
 8009ec4:	08014690 	.word	0x08014690
 8009ec8:	080146c0 	.word	0x080146c0

08009ecc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff ffa1 	bl	8009e20 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009ede:	6838      	ldr	r0, [r7, #0]
 8009ee0:	f7ff ff7c 	bl	8009ddc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <pbuf_copy+0x2a>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d005      	beq.n	8009f16 <pbuf_copy+0x2a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	891a      	ldrh	r2, [r3, #8]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	891b      	ldrh	r3, [r3, #8]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d209      	bcs.n	8009f2a <pbuf_copy+0x3e>
 8009f16:	4b57      	ldr	r3, [pc, #348]	@ (800a074 <pbuf_copy+0x188>)
 8009f18:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009f1c:	4956      	ldr	r1, [pc, #344]	@ (800a078 <pbuf_copy+0x18c>)
 8009f1e:	4857      	ldr	r0, [pc, #348]	@ (800a07c <pbuf_copy+0x190>)
 8009f20:	f009 f834 	bl	8012f8c <iprintf>
 8009f24:	f06f 030f 	mvn.w	r3, #15
 8009f28:	e09f      	b.n	800a06a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	895b      	ldrh	r3, [r3, #10]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	1ad2      	subs	r2, r2, r3
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	895b      	ldrh	r3, [r3, #10]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1acb      	subs	r3, r1, r3
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d306      	bcc.n	8009f50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	895b      	ldrh	r3, [r3, #10]
 8009f46:	461a      	mov	r2, r3
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e005      	b.n	8009f5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	895b      	ldrh	r3, [r3, #10]
 8009f54:	461a      	mov	r2, r3
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	18d0      	adds	r0, r2, r3
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f009 f9eb 	bl	801334a <memcpy>
    offset_to += len;
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	895b      	ldrh	r3, [r3, #10]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d906      	bls.n	8009f9e <pbuf_copy+0xb2>
 8009f90:	4b38      	ldr	r3, [pc, #224]	@ (800a074 <pbuf_copy+0x188>)
 8009f92:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8009f96:	493a      	ldr	r1, [pc, #232]	@ (800a080 <pbuf_copy+0x194>)
 8009f98:	4838      	ldr	r0, [pc, #224]	@ (800a07c <pbuf_copy+0x190>)
 8009f9a:	f008 fff7 	bl	8012f8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	895b      	ldrh	r3, [r3, #10]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d906      	bls.n	8009fb8 <pbuf_copy+0xcc>
 8009faa:	4b32      	ldr	r3, [pc, #200]	@ (800a074 <pbuf_copy+0x188>)
 8009fac:	f240 32da 	movw	r2, #986	@ 0x3da
 8009fb0:	4934      	ldr	r1, [pc, #208]	@ (800a084 <pbuf_copy+0x198>)
 8009fb2:	4832      	ldr	r0, [pc, #200]	@ (800a07c <pbuf_copy+0x190>)
 8009fb4:	f008 ffea 	bl	8012f8c <iprintf>
    if (offset_from >= p_from->len) {
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	895b      	ldrh	r3, [r3, #10]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d304      	bcc.n	8009fce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	895b      	ldrh	r3, [r3, #10]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d114      	bne.n	800a004 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10c      	bne.n	800a004 <pbuf_copy+0x118>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d009      	beq.n	800a004 <pbuf_copy+0x118>
 8009ff0:	4b20      	ldr	r3, [pc, #128]	@ (800a074 <pbuf_copy+0x188>)
 8009ff2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009ff6:	4924      	ldr	r1, [pc, #144]	@ (800a088 <pbuf_copy+0x19c>)
 8009ff8:	4820      	ldr	r0, [pc, #128]	@ (800a07c <pbuf_copy+0x190>)
 8009ffa:	f008 ffc7 	bl	8012f8c <iprintf>
 8009ffe:	f06f 030f 	mvn.w	r3, #15
 800a002:	e032      	b.n	800a06a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d013      	beq.n	800a032 <pbuf_copy+0x146>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	895a      	ldrh	r2, [r3, #10]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	891b      	ldrh	r3, [r3, #8]
 800a012:	429a      	cmp	r2, r3
 800a014:	d10d      	bne.n	800a032 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d009      	beq.n	800a032 <pbuf_copy+0x146>
 800a01e:	4b15      	ldr	r3, [pc, #84]	@ (800a074 <pbuf_copy+0x188>)
 800a020:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a024:	4919      	ldr	r1, [pc, #100]	@ (800a08c <pbuf_copy+0x1a0>)
 800a026:	4815      	ldr	r0, [pc, #84]	@ (800a07c <pbuf_copy+0x190>)
 800a028:	f008 ffb0 	bl	8012f8c <iprintf>
 800a02c:	f06f 0305 	mvn.w	r3, #5
 800a030:	e01b      	b.n	800a06a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d013      	beq.n	800a060 <pbuf_copy+0x174>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	895a      	ldrh	r2, [r3, #10]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	891b      	ldrh	r3, [r3, #8]
 800a040:	429a      	cmp	r2, r3
 800a042:	d10d      	bne.n	800a060 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <pbuf_copy+0x174>
 800a04c:	4b09      	ldr	r3, [pc, #36]	@ (800a074 <pbuf_copy+0x188>)
 800a04e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a052:	490e      	ldr	r1, [pc, #56]	@ (800a08c <pbuf_copy+0x1a0>)
 800a054:	4809      	ldr	r0, [pc, #36]	@ (800a07c <pbuf_copy+0x190>)
 800a056:	f008 ff99 	bl	8012f8c <iprintf>
 800a05a:	f06f 0305 	mvn.w	r3, #5
 800a05e:	e004      	b.n	800a06a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f47f af61 	bne.w	8009f2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	08014464 	.word	0x08014464
 800a078:	0801470c 	.word	0x0801470c
 800a07c:	080144c4 	.word	0x080144c4
 800a080:	0801473c 	.word	0x0801473c
 800a084:	08014754 	.word	0x08014754
 800a088:	08014770 	.word	0x08014770
 800a08c:	08014780 	.word	0x08014780

0800a090 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	4611      	mov	r1, r2
 800a09c:	461a      	mov	r2, r3
 800a09e:	460b      	mov	r3, r1
 800a0a0:	80fb      	strh	r3, [r7, #6]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d108      	bne.n	800a0c6 <pbuf_copy_partial+0x36>
 800a0b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a164 <pbuf_copy_partial+0xd4>)
 800a0b6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a0ba:	492b      	ldr	r1, [pc, #172]	@ (800a168 <pbuf_copy_partial+0xd8>)
 800a0bc:	482b      	ldr	r0, [pc, #172]	@ (800a16c <pbuf_copy_partial+0xdc>)
 800a0be:	f008 ff65 	bl	8012f8c <iprintf>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e04a      	b.n	800a15c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d108      	bne.n	800a0de <pbuf_copy_partial+0x4e>
 800a0cc:	4b25      	ldr	r3, [pc, #148]	@ (800a164 <pbuf_copy_partial+0xd4>)
 800a0ce:	f240 420b 	movw	r2, #1035	@ 0x40b
 800a0d2:	4927      	ldr	r1, [pc, #156]	@ (800a170 <pbuf_copy_partial+0xe0>)
 800a0d4:	4825      	ldr	r0, [pc, #148]	@ (800a16c <pbuf_copy_partial+0xdc>)
 800a0d6:	f008 ff59 	bl	8012f8c <iprintf>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e03e      	b.n	800a15c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e034      	b.n	800a14e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a0e4:	88bb      	ldrh	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <pbuf_copy_partial+0x70>
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	895b      	ldrh	r3, [r3, #10]
 800a0ee:	88ba      	ldrh	r2, [r7, #4]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d305      	bcc.n	800a100 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	895b      	ldrh	r3, [r3, #10]
 800a0f8:	88ba      	ldrh	r2, [r7, #4]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	80bb      	strh	r3, [r7, #4]
 800a0fe:	e023      	b.n	800a148 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	895a      	ldrh	r2, [r3, #10]
 800a104:	88bb      	ldrh	r3, [r7, #4]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a10a:	8b3a      	ldrh	r2, [r7, #24]
 800a10c:	88fb      	ldrh	r3, [r7, #6]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d901      	bls.n	800a116 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a116:	8b7b      	ldrh	r3, [r7, #26]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	18d0      	adds	r0, r2, r3
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	88bb      	ldrh	r3, [r7, #4]
 800a122:	4413      	add	r3, r2
 800a124:	8b3a      	ldrh	r2, [r7, #24]
 800a126:	4619      	mov	r1, r3
 800a128:	f009 f90f 	bl	801334a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a12c:	8afa      	ldrh	r2, [r7, #22]
 800a12e:	8b3b      	ldrh	r3, [r7, #24]
 800a130:	4413      	add	r3, r2
 800a132:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a134:	8b7a      	ldrh	r2, [r7, #26]
 800a136:	8b3b      	ldrh	r3, [r7, #24]
 800a138:	4413      	add	r3, r2
 800a13a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a13c:	88fa      	ldrh	r2, [r7, #6]
 800a13e:	8b3b      	ldrh	r3, [r7, #24]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <pbuf_copy_partial+0xca>
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1c4      	bne.n	800a0e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a15a:	8afb      	ldrh	r3, [r7, #22]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3720      	adds	r7, #32
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	08014464 	.word	0x08014464
 800a168:	080147ac 	.word	0x080147ac
 800a16c:	080144c4 	.word	0x080144c4
 800a170:	080147cc 	.word	0x080147cc

0800a174 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	603a      	str	r2, [r7, #0]
 800a17e:	71fb      	strb	r3, [r7, #7]
 800a180:	460b      	mov	r3, r1
 800a182:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	8919      	ldrh	r1, [r3, #8]
 800a188:	88ba      	ldrh	r2, [r7, #4]
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff faa1 	bl	80096d4 <pbuf_alloc>
 800a192:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <pbuf_clone+0x2a>
    return NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	e011      	b.n	800a1c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff fea3 	bl	8009eec <pbuf_copy>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a1aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d006      	beq.n	800a1c0 <pbuf_clone+0x4c>
 800a1b2:	4b06      	ldr	r3, [pc, #24]	@ (800a1cc <pbuf_clone+0x58>)
 800a1b4:	f240 5224 	movw	r2, #1316	@ 0x524
 800a1b8:	4905      	ldr	r1, [pc, #20]	@ (800a1d0 <pbuf_clone+0x5c>)
 800a1ba:	4806      	ldr	r0, [pc, #24]	@ (800a1d4 <pbuf_clone+0x60>)
 800a1bc:	f008 fee6 	bl	8012f8c <iprintf>
  return q;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	08014464 	.word	0x08014464
 800a1d0:	080148d8 	.word	0x080148d8
 800a1d4:	080144c4 	.word	0x080144c4

0800a1d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a1dc:	f008 fdd6 	bl	8012d8c <rand>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	4b01      	ldr	r3, [pc, #4]	@ (800a1f8 <tcp_init+0x20>)
 800a1f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a1f4:	bf00      	nop
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20000020 	.word	0x20000020

0800a1fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	7d1b      	ldrb	r3, [r3, #20]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d105      	bne.n	800a218 <tcp_free+0x1c>
 800a20c:	4b06      	ldr	r3, [pc, #24]	@ (800a228 <tcp_free+0x2c>)
 800a20e:	22d4      	movs	r2, #212	@ 0xd4
 800a210:	4906      	ldr	r1, [pc, #24]	@ (800a22c <tcp_free+0x30>)
 800a212:	4807      	ldr	r0, [pc, #28]	@ (800a230 <tcp_free+0x34>)
 800a214:	f008 feba 	bl	8012f8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a218:	6879      	ldr	r1, [r7, #4]
 800a21a:	2001      	movs	r0, #1
 800a21c:	f7fe fec8 	bl	8008fb0 <memp_free>
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	08014964 	.word	0x08014964
 800a22c:	08014994 	.word	0x08014994
 800a230:	080149a8 	.word	0x080149a8

0800a234 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	7d1b      	ldrb	r3, [r3, #20]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d105      	bne.n	800a250 <tcp_free_listen+0x1c>
 800a244:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <tcp_free_listen+0x2c>)
 800a246:	22df      	movs	r2, #223	@ 0xdf
 800a248:	4906      	ldr	r1, [pc, #24]	@ (800a264 <tcp_free_listen+0x30>)
 800a24a:	4807      	ldr	r0, [pc, #28]	@ (800a268 <tcp_free_listen+0x34>)
 800a24c:	f008 fe9e 	bl	8012f8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	2002      	movs	r0, #2
 800a254:	f7fe feac 	bl	8008fb0 <memp_free>
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	08014964 	.word	0x08014964
 800a264:	080149d0 	.word	0x080149d0
 800a268:	080149a8 	.word	0x080149a8

0800a26c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a270:	f000 fea4 	bl	800afbc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a274:	4b07      	ldr	r3, [pc, #28]	@ (800a294 <tcp_tmr+0x28>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	3301      	adds	r3, #1
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <tcp_tmr+0x28>)
 800a27e:	701a      	strb	r2, [r3, #0]
 800a280:	4b04      	ldr	r3, [pc, #16]	@ (800a294 <tcp_tmr+0x28>)
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a28c:	f000 fb54 	bl	800a938 <tcp_slowtmr>
  }
}
 800a290:	bf00      	nop
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20008a59 	.word	0x20008a59

0800a298 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d105      	bne.n	800a2b4 <tcp_remove_listener+0x1c>
 800a2a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <tcp_remove_listener+0x48>)
 800a2aa:	22ff      	movs	r2, #255	@ 0xff
 800a2ac:	490d      	ldr	r1, [pc, #52]	@ (800a2e4 <tcp_remove_listener+0x4c>)
 800a2ae:	480e      	ldr	r0, [pc, #56]	@ (800a2e8 <tcp_remove_listener+0x50>)
 800a2b0:	f008 fe6c 	bl	8012f8c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	e00a      	b.n	800a2d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d102      	bne.n	800a2ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1f1      	bne.n	800a2ba <tcp_remove_listener+0x22>
    }
  }
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	08014964 	.word	0x08014964
 800a2e4:	080149ec 	.word	0x080149ec
 800a2e8:	080149a8 	.word	0x080149a8

0800a2ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <tcp_listen_closed+0x1c>
 800a2fa:	4b14      	ldr	r3, [pc, #80]	@ (800a34c <tcp_listen_closed+0x60>)
 800a2fc:	f240 1211 	movw	r2, #273	@ 0x111
 800a300:	4913      	ldr	r1, [pc, #76]	@ (800a350 <tcp_listen_closed+0x64>)
 800a302:	4814      	ldr	r0, [pc, #80]	@ (800a354 <tcp_listen_closed+0x68>)
 800a304:	f008 fe42 	bl	8012f8c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7d1b      	ldrb	r3, [r3, #20]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d006      	beq.n	800a31e <tcp_listen_closed+0x32>
 800a310:	4b0e      	ldr	r3, [pc, #56]	@ (800a34c <tcp_listen_closed+0x60>)
 800a312:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a316:	4910      	ldr	r1, [pc, #64]	@ (800a358 <tcp_listen_closed+0x6c>)
 800a318:	480e      	ldr	r0, [pc, #56]	@ (800a354 <tcp_listen_closed+0x68>)
 800a31a:	f008 fe37 	bl	8012f8c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a31e:	2301      	movs	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]
 800a322:	e00b      	b.n	800a33c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a324:	4a0d      	ldr	r2, [pc, #52]	@ (800a35c <tcp_listen_closed+0x70>)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff ffb1 	bl	800a298 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3301      	adds	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d9f0      	bls.n	800a324 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	08014964 	.word	0x08014964
 800a350:	08014a14 	.word	0x08014a14
 800a354:	080149a8 	.word	0x080149a8
 800a358:	08014a20 	.word	0x08014a20
 800a35c:	08016cf8 	.word	0x08016cf8

0800a360 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a360:	b5b0      	push	{r4, r5, r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af04      	add	r7, sp, #16
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <tcp_close_shutdown+0x20>
 800a372:	4b63      	ldr	r3, [pc, #396]	@ (800a500 <tcp_close_shutdown+0x1a0>)
 800a374:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a378:	4962      	ldr	r1, [pc, #392]	@ (800a504 <tcp_close_shutdown+0x1a4>)
 800a37a:	4863      	ldr	r0, [pc, #396]	@ (800a508 <tcp_close_shutdown+0x1a8>)
 800a37c:	f008 fe06 	bl	8012f8c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a380:	78fb      	ldrb	r3, [r7, #3]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d066      	beq.n	800a454 <tcp_close_shutdown+0xf4>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	7d1b      	ldrb	r3, [r3, #20]
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d003      	beq.n	800a396 <tcp_close_shutdown+0x36>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	7d1b      	ldrb	r3, [r3, #20]
 800a392:	2b07      	cmp	r3, #7
 800a394:	d15e      	bne.n	800a454 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d104      	bne.n	800a3a8 <tcp_close_shutdown+0x48>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3a2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a3a6:	d055      	beq.n	800a454 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	8b5b      	ldrh	r3, [r3, #26]
 800a3ac:	f003 0310 	and.w	r3, r3, #16
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <tcp_close_shutdown+0x62>
 800a3b4:	4b52      	ldr	r3, [pc, #328]	@ (800a500 <tcp_close_shutdown+0x1a0>)
 800a3b6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800a3ba:	4954      	ldr	r1, [pc, #336]	@ (800a50c <tcp_close_shutdown+0x1ac>)
 800a3bc:	4852      	ldr	r0, [pc, #328]	@ (800a508 <tcp_close_shutdown+0x1a8>)
 800a3be:	f008 fde5 	bl	8012f8c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a3ca:	687d      	ldr	r5, [r7, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	8ad2      	ldrh	r2, [r2, #22]
 800a3d4:	6879      	ldr	r1, [r7, #4]
 800a3d6:	8b09      	ldrh	r1, [r1, #24]
 800a3d8:	9102      	str	r1, [sp, #8]
 800a3da:	9201      	str	r2, [sp, #4]
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	462b      	mov	r3, r5
 800a3e0:	4622      	mov	r2, r4
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f004 fe8d 	bl	800f104 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 f8c8 	bl	800b580 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a3f0:	4b47      	ldr	r3, [pc, #284]	@ (800a510 <tcp_close_shutdown+0x1b0>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d105      	bne.n	800a406 <tcp_close_shutdown+0xa6>
 800a3fa:	4b45      	ldr	r3, [pc, #276]	@ (800a510 <tcp_close_shutdown+0x1b0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	4a43      	ldr	r2, [pc, #268]	@ (800a510 <tcp_close_shutdown+0x1b0>)
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	e013      	b.n	800a42e <tcp_close_shutdown+0xce>
 800a406:	4b42      	ldr	r3, [pc, #264]	@ (800a510 <tcp_close_shutdown+0x1b0>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	e00c      	b.n	800a428 <tcp_close_shutdown+0xc8>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	429a      	cmp	r2, r3
 800a416:	d104      	bne.n	800a422 <tcp_close_shutdown+0xc2>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	60da      	str	r2, [r3, #12]
 800a420:	e005      	b.n	800a42e <tcp_close_shutdown+0xce>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1ef      	bne.n	800a40e <tcp_close_shutdown+0xae>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	60da      	str	r2, [r3, #12]
 800a434:	4b37      	ldr	r3, [pc, #220]	@ (800a514 <tcp_close_shutdown+0x1b4>)
 800a436:	2201      	movs	r2, #1
 800a438:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a43a:	4b37      	ldr	r3, [pc, #220]	@ (800a518 <tcp_close_shutdown+0x1b8>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d102      	bne.n	800a44a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a444:	f003 fd5c 	bl	800df00 <tcp_trigger_input_pcb_close>
 800a448:	e002      	b.n	800a450 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fed6 	bl	800a1fc <tcp_free>
      }
      return ERR_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	e050      	b.n	800a4f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d03b      	beq.n	800a4d4 <tcp_close_shutdown+0x174>
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	dc44      	bgt.n	800a4ea <tcp_close_shutdown+0x18a>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <tcp_close_shutdown+0x10a>
 800a464:	2b01      	cmp	r3, #1
 800a466:	d02a      	beq.n	800a4be <tcp_close_shutdown+0x15e>
 800a468:	e03f      	b.n	800a4ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	8adb      	ldrh	r3, [r3, #22]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d021      	beq.n	800a4b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a472:	4b2a      	ldr	r3, [pc, #168]	@ (800a51c <tcp_close_shutdown+0x1bc>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d105      	bne.n	800a488 <tcp_close_shutdown+0x128>
 800a47c:	4b27      	ldr	r3, [pc, #156]	@ (800a51c <tcp_close_shutdown+0x1bc>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	4a26      	ldr	r2, [pc, #152]	@ (800a51c <tcp_close_shutdown+0x1bc>)
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	e013      	b.n	800a4b0 <tcp_close_shutdown+0x150>
 800a488:	4b24      	ldr	r3, [pc, #144]	@ (800a51c <tcp_close_shutdown+0x1bc>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	60bb      	str	r3, [r7, #8]
 800a48e:	e00c      	b.n	800a4aa <tcp_close_shutdown+0x14a>
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	429a      	cmp	r2, r3
 800a498:	d104      	bne.n	800a4a4 <tcp_close_shutdown+0x144>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68da      	ldr	r2, [r3, #12]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	60da      	str	r2, [r3, #12]
 800a4a2:	e005      	b.n	800a4b0 <tcp_close_shutdown+0x150>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	60bb      	str	r3, [r7, #8]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1ef      	bne.n	800a490 <tcp_close_shutdown+0x130>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff fea0 	bl	800a1fc <tcp_free>
      break;
 800a4bc:	e01a      	b.n	800a4f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff ff14 	bl	800a2ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a4c4:	6879      	ldr	r1, [r7, #4]
 800a4c6:	4816      	ldr	r0, [pc, #88]	@ (800a520 <tcp_close_shutdown+0x1c0>)
 800a4c8:	f001 f8aa 	bl	800b620 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff feb1 	bl	800a234 <tcp_free_listen>
      break;
 800a4d2:	e00f      	b.n	800a4f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	480e      	ldr	r0, [pc, #56]	@ (800a510 <tcp_close_shutdown+0x1b0>)
 800a4d8:	f001 f8a2 	bl	800b620 <tcp_pcb_remove>
 800a4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a514 <tcp_close_shutdown+0x1b4>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fe8a 	bl	800a1fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a4e8:	e004      	b.n	800a4f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f81a 	bl	800a524 <tcp_close_shutdown_fin>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	e000      	b.n	800a4f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a4fe:	bf00      	nop
 800a500:	08014964 	.word	0x08014964
 800a504:	08014a38 	.word	0x08014a38
 800a508:	080149a8 	.word	0x080149a8
 800a50c:	08014a58 	.word	0x08014a58
 800a510:	20008a50 	.word	0x20008a50
 800a514:	20008a58 	.word	0x20008a58
 800a518:	20008a90 	.word	0x20008a90
 800a51c:	20008a48 	.word	0x20008a48
 800a520:	20008a4c 	.word	0x20008a4c

0800a524 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <tcp_close_shutdown_fin+0x1c>
 800a532:	4b2e      	ldr	r3, [pc, #184]	@ (800a5ec <tcp_close_shutdown_fin+0xc8>)
 800a534:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a538:	492d      	ldr	r1, [pc, #180]	@ (800a5f0 <tcp_close_shutdown_fin+0xcc>)
 800a53a:	482e      	ldr	r0, [pc, #184]	@ (800a5f4 <tcp_close_shutdown_fin+0xd0>)
 800a53c:	f008 fd26 	bl	8012f8c <iprintf>

  switch (pcb->state) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7d1b      	ldrb	r3, [r3, #20]
 800a544:	2b07      	cmp	r3, #7
 800a546:	d020      	beq.n	800a58a <tcp_close_shutdown_fin+0x66>
 800a548:	2b07      	cmp	r3, #7
 800a54a:	dc2b      	bgt.n	800a5a4 <tcp_close_shutdown_fin+0x80>
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d002      	beq.n	800a556 <tcp_close_shutdown_fin+0x32>
 800a550:	2b04      	cmp	r3, #4
 800a552:	d00d      	beq.n	800a570 <tcp_close_shutdown_fin+0x4c>
 800a554:	e026      	b.n	800a5a4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f003 fee2 	bl	800e320 <tcp_send_fin>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d11f      	bne.n	800a5a8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2205      	movs	r2, #5
 800a56c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a56e:	e01b      	b.n	800a5a8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f003 fed5 	bl	800e320 <tcp_send_fin>
 800a576:	4603      	mov	r3, r0
 800a578:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d114      	bne.n	800a5ac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2205      	movs	r2, #5
 800a586:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a588:	e010      	b.n	800a5ac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f003 fec8 	bl	800e320 <tcp_send_fin>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d109      	bne.n	800a5b0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2209      	movs	r2, #9
 800a5a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a5a2:	e005      	b.n	800a5b0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e01c      	b.n	800a5e2 <tcp_close_shutdown_fin+0xbe>
      break;
 800a5a8:	bf00      	nop
 800a5aa:	e002      	b.n	800a5b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800a5ac:	bf00      	nop
 800a5ae:	e000      	b.n	800a5b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800a5b0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d103      	bne.n	800a5c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f003 ffee 	bl	800e59c <tcp_output>
 800a5c0:	e00d      	b.n	800a5de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d108      	bne.n	800a5de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	8b5b      	ldrh	r3, [r3, #26]
 800a5d0:	f043 0308 	orr.w	r3, r3, #8
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e001      	b.n	800a5e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	08014964 	.word	0x08014964
 800a5f0:	08014a14 	.word	0x08014a14
 800a5f4:	080149a8 	.word	0x080149a8

0800a5f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <tcp_close+0x22>
 800a606:	4b0f      	ldr	r3, [pc, #60]	@ (800a644 <tcp_close+0x4c>)
 800a608:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a60c:	490e      	ldr	r1, [pc, #56]	@ (800a648 <tcp_close+0x50>)
 800a60e:	480f      	ldr	r0, [pc, #60]	@ (800a64c <tcp_close+0x54>)
 800a610:	f008 fcbc 	bl	8012f8c <iprintf>
 800a614:	f06f 030f 	mvn.w	r3, #15
 800a618:	e00f      	b.n	800a63a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	7d1b      	ldrb	r3, [r3, #20]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d006      	beq.n	800a630 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	8b5b      	ldrh	r3, [r3, #26]
 800a626:	f043 0310 	orr.w	r3, r3, #16
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a630:	2101      	movs	r1, #1
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fe94 	bl	800a360 <tcp_close_shutdown>
 800a638:	4603      	mov	r3, r0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	08014964 	.word	0x08014964
 800a648:	08014a74 	.word	0x08014a74
 800a64c:	080149a8 	.word	0x080149a8

0800a650 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08e      	sub	sp, #56	@ 0x38
 800a654:	af04      	add	r7, sp, #16
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d107      	bne.n	800a670 <tcp_abandon+0x20>
 800a660:	4b52      	ldr	r3, [pc, #328]	@ (800a7ac <tcp_abandon+0x15c>)
 800a662:	f240 223d 	movw	r2, #573	@ 0x23d
 800a666:	4952      	ldr	r1, [pc, #328]	@ (800a7b0 <tcp_abandon+0x160>)
 800a668:	4852      	ldr	r0, [pc, #328]	@ (800a7b4 <tcp_abandon+0x164>)
 800a66a:	f008 fc8f 	bl	8012f8c <iprintf>
 800a66e:	e099      	b.n	800a7a4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	7d1b      	ldrb	r3, [r3, #20]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d106      	bne.n	800a686 <tcp_abandon+0x36>
 800a678:	4b4c      	ldr	r3, [pc, #304]	@ (800a7ac <tcp_abandon+0x15c>)
 800a67a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a67e:	494e      	ldr	r1, [pc, #312]	@ (800a7b8 <tcp_abandon+0x168>)
 800a680:	484c      	ldr	r0, [pc, #304]	@ (800a7b4 <tcp_abandon+0x164>)
 800a682:	f008 fc83 	bl	8012f8c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	7d1b      	ldrb	r3, [r3, #20]
 800a68a:	2b0a      	cmp	r3, #10
 800a68c:	d107      	bne.n	800a69e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	484a      	ldr	r0, [pc, #296]	@ (800a7bc <tcp_abandon+0x16c>)
 800a692:	f000 ffc5 	bl	800b620 <tcp_pcb_remove>
    tcp_free(pcb);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff fdb0 	bl	800a1fc <tcp_free>
 800a69c:	e082      	b.n	800a7a4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6aa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6b8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	7d1b      	ldrb	r3, [r3, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d126      	bne.n	800a716 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	8adb      	ldrh	r3, [r3, #22]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d02e      	beq.n	800a72e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a6d0:	4b3b      	ldr	r3, [pc, #236]	@ (800a7c0 <tcp_abandon+0x170>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d105      	bne.n	800a6e6 <tcp_abandon+0x96>
 800a6da:	4b39      	ldr	r3, [pc, #228]	@ (800a7c0 <tcp_abandon+0x170>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	4a37      	ldr	r2, [pc, #220]	@ (800a7c0 <tcp_abandon+0x170>)
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	e013      	b.n	800a70e <tcp_abandon+0xbe>
 800a6e6:	4b36      	ldr	r3, [pc, #216]	@ (800a7c0 <tcp_abandon+0x170>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	e00c      	b.n	800a708 <tcp_abandon+0xb8>
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d104      	bne.n	800a702 <tcp_abandon+0xb2>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68da      	ldr	r2, [r3, #12]
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	60da      	str	r2, [r3, #12]
 800a700:	e005      	b.n	800a70e <tcp_abandon+0xbe>
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1ef      	bne.n	800a6ee <tcp_abandon+0x9e>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	60da      	str	r2, [r3, #12]
 800a714:	e00b      	b.n	800a72e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	8adb      	ldrh	r3, [r3, #22]
 800a71e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a720:	6879      	ldr	r1, [r7, #4]
 800a722:	4828      	ldr	r0, [pc, #160]	@ (800a7c4 <tcp_abandon+0x174>)
 800a724:	f000 ff7c 	bl	800b620 <tcp_pcb_remove>
 800a728:	4b27      	ldr	r3, [pc, #156]	@ (800a7c8 <tcp_abandon+0x178>)
 800a72a:	2201      	movs	r2, #1
 800a72c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a732:	2b00      	cmp	r3, #0
 800a734:	d004      	beq.n	800a740 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fd1e 	bl	800b17c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fd15 	bl	800b17c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a756:	2b00      	cmp	r3, #0
 800a758:	d004      	beq.n	800a764 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fd0c 	bl	800b17c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00e      	beq.n	800a788 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	8b12      	ldrh	r2, [r2, #24]
 800a774:	9202      	str	r2, [sp, #8]
 800a776:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a778:	9201      	str	r2, [sp, #4]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	460b      	mov	r3, r1
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	69b9      	ldr	r1, [r7, #24]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f004 fcbe 	bl	800f104 <tcp_rst>
    }
    last_state = pcb->state;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7d1b      	ldrb	r3, [r3, #20]
 800a78c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff fd34 	bl	800a1fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d004      	beq.n	800a7a4 <tcp_abandon+0x154>
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f06f 010c 	mvn.w	r1, #12
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	4798      	blx	r3
  }
}
 800a7a4:	3728      	adds	r7, #40	@ 0x28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	08014964 	.word	0x08014964
 800a7b0:	08014aa8 	.word	0x08014aa8
 800a7b4:	080149a8 	.word	0x080149a8
 800a7b8:	08014ac4 	.word	0x08014ac4
 800a7bc:	20008a54 	.word	0x20008a54
 800a7c0:	20008a48 	.word	0x20008a48
 800a7c4:	20008a50 	.word	0x20008a50
 800a7c8:	20008a58 	.word	0x20008a58

0800a7cc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff ff3a 	bl	800a650 <tcp_abandon>
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <tcp_update_rcv_ann_wnd+0x1c>
 800a7f2:	4b25      	ldr	r3, [pc, #148]	@ (800a888 <tcp_update_rcv_ann_wnd+0xa4>)
 800a7f4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a7f8:	4924      	ldr	r1, [pc, #144]	@ (800a88c <tcp_update_rcv_ann_wnd+0xa8>)
 800a7fa:	4825      	ldr	r0, [pc, #148]	@ (800a890 <tcp_update_rcv_ann_wnd+0xac>)
 800a7fc:	f008 fbc6 	bl	8012f8c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a808:	4413      	add	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800a814:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800a818:	bf28      	it	cs
 800a81a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800a81e:	b292      	uxth	r2, r2
 800a820:	4413      	add	r3, r2
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	db08      	blt.n	800a83c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	e020      	b.n	800a87e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	dd03      	ble.n	800a852 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a850:	e014      	b.n	800a87c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a864:	d306      	bcc.n	800a874 <tcp_update_rcv_ann_wnd+0x90>
 800a866:	4b08      	ldr	r3, [pc, #32]	@ (800a888 <tcp_update_rcv_ann_wnd+0xa4>)
 800a868:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800a86c:	4909      	ldr	r1, [pc, #36]	@ (800a894 <tcp_update_rcv_ann_wnd+0xb0>)
 800a86e:	4808      	ldr	r0, [pc, #32]	@ (800a890 <tcp_update_rcv_ann_wnd+0xac>)
 800a870:	f008 fb8c 	bl	8012f8c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800a87c:	2300      	movs	r3, #0
  }
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	08014964 	.word	0x08014964
 800a88c:	08014bc0 	.word	0x08014bc0
 800a890:	080149a8 	.word	0x080149a8
 800a894:	08014be4 	.word	0x08014be4

0800a898 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d107      	bne.n	800a8ba <tcp_recved+0x22>
 800a8aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a928 <tcp_recved+0x90>)
 800a8ac:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800a8b0:	491e      	ldr	r1, [pc, #120]	@ (800a92c <tcp_recved+0x94>)
 800a8b2:	481f      	ldr	r0, [pc, #124]	@ (800a930 <tcp_recved+0x98>)
 800a8b4:	f008 fb6a 	bl	8012f8c <iprintf>
 800a8b8:	e032      	b.n	800a920 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	7d1b      	ldrb	r3, [r3, #20]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d106      	bne.n	800a8d0 <tcp_recved+0x38>
 800a8c2:	4b19      	ldr	r3, [pc, #100]	@ (800a928 <tcp_recved+0x90>)
 800a8c4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800a8c8:	491a      	ldr	r1, [pc, #104]	@ (800a934 <tcp_recved+0x9c>)
 800a8ca:	4819      	ldr	r0, [pc, #100]	@ (800a930 <tcp_recved+0x98>)
 800a8cc:	f008 fb5e 	bl	8012f8c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a8d4:	887b      	ldrh	r3, [r7, #2]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a8da:	89fb      	ldrh	r3, [r7, #14]
 800a8dc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a8e0:	d804      	bhi.n	800a8ec <tcp_recved+0x54>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8e6:	89fa      	ldrh	r2, [r7, #14]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d204      	bcs.n	800a8f6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a8f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a8f4:	e002      	b.n	800a8fc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	89fa      	ldrh	r2, [r7, #14]
 800a8fa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7ff ff71 	bl	800a7e4 <tcp_update_rcv_ann_wnd>
 800a902:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a90a:	d309      	bcc.n	800a920 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	8b5b      	ldrh	r3, [r3, #26]
 800a910:	f043 0302 	orr.w	r3, r3, #2
 800a914:	b29a      	uxth	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f003 fe3e 	bl	800e59c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	08014964 	.word	0x08014964
 800a92c:	08014c00 	.word	0x08014c00
 800a930:	080149a8 	.word	0x080149a8
 800a934:	08014c18 	.word	0x08014c18

0800a938 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a938:	b5b0      	push	{r4, r5, r7, lr}
 800a93a:	b090      	sub	sp, #64	@ 0x40
 800a93c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800a944:	4b95      	ldr	r3, [pc, #596]	@ (800ab9c <tcp_slowtmr+0x264>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3301      	adds	r3, #1
 800a94a:	4a94      	ldr	r2, [pc, #592]	@ (800ab9c <tcp_slowtmr+0x264>)
 800a94c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a94e:	4b94      	ldr	r3, [pc, #592]	@ (800aba0 <tcp_slowtmr+0x268>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	4b92      	ldr	r3, [pc, #584]	@ (800aba0 <tcp_slowtmr+0x268>)
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	e000      	b.n	800a95e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800a95c:	bf00      	nop
  prev = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800a962:	4b90      	ldr	r3, [pc, #576]	@ (800aba4 <tcp_slowtmr+0x26c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a968:	e29d      	b.n	800aea6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96c:	7d1b      	ldrb	r3, [r3, #20]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <tcp_slowtmr+0x48>
 800a972:	4b8d      	ldr	r3, [pc, #564]	@ (800aba8 <tcp_slowtmr+0x270>)
 800a974:	f240 42be 	movw	r2, #1214	@ 0x4be
 800a978:	498c      	ldr	r1, [pc, #560]	@ (800abac <tcp_slowtmr+0x274>)
 800a97a:	488d      	ldr	r0, [pc, #564]	@ (800abb0 <tcp_slowtmr+0x278>)
 800a97c:	f008 fb06 	bl	8012f8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a982:	7d1b      	ldrb	r3, [r3, #20]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d106      	bne.n	800a996 <tcp_slowtmr+0x5e>
 800a988:	4b87      	ldr	r3, [pc, #540]	@ (800aba8 <tcp_slowtmr+0x270>)
 800a98a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800a98e:	4989      	ldr	r1, [pc, #548]	@ (800abb4 <tcp_slowtmr+0x27c>)
 800a990:	4887      	ldr	r0, [pc, #540]	@ (800abb0 <tcp_slowtmr+0x278>)
 800a992:	f008 fafb 	bl	8012f8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	7d1b      	ldrb	r3, [r3, #20]
 800a99a:	2b0a      	cmp	r3, #10
 800a99c:	d106      	bne.n	800a9ac <tcp_slowtmr+0x74>
 800a99e:	4b82      	ldr	r3, [pc, #520]	@ (800aba8 <tcp_slowtmr+0x270>)
 800a9a0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800a9a4:	4984      	ldr	r1, [pc, #528]	@ (800abb8 <tcp_slowtmr+0x280>)
 800a9a6:	4882      	ldr	r0, [pc, #520]	@ (800abb0 <tcp_slowtmr+0x278>)
 800a9a8:	f008 faf0 	bl	8012f8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ae:	7f9a      	ldrb	r2, [r3, #30]
 800a9b0:	4b7b      	ldr	r3, [pc, #492]	@ (800aba0 <tcp_slowtmr+0x268>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d105      	bne.n	800a9c4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800a9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800a9c2:	e270      	b.n	800aea6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800a9c4:	4b76      	ldr	r3, [pc, #472]	@ (800aba0 <tcp_slowtmr+0x268>)
 800a9c6:	781a      	ldrb	r2, [r3, #0]
 800a9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ca:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9da:	7d1b      	ldrb	r3, [r3, #20]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d10a      	bne.n	800a9f6 <tcp_slowtmr+0xbe>
 800a9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9e6:	2b05      	cmp	r3, #5
 800a9e8:	d905      	bls.n	800a9f6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a9f4:	e11e      	b.n	800ac34 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9fc:	2b0b      	cmp	r3, #11
 800a9fe:	d905      	bls.n	800aa0c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa04:	3301      	adds	r3, #1
 800aa06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa0a:	e113      	b.n	800ac34 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800aa0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d075      	beq.n	800ab02 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800aa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <tcp_slowtmr+0xf4>
 800aa1e:	4b62      	ldr	r3, [pc, #392]	@ (800aba8 <tcp_slowtmr+0x270>)
 800aa20:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800aa24:	4965      	ldr	r1, [pc, #404]	@ (800abbc <tcp_slowtmr+0x284>)
 800aa26:	4862      	ldr	r0, [pc, #392]	@ (800abb0 <tcp_slowtmr+0x278>)
 800aa28:	f008 fab0 	bl	8012f8c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800aa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d106      	bne.n	800aa42 <tcp_slowtmr+0x10a>
 800aa34:	4b5c      	ldr	r3, [pc, #368]	@ (800aba8 <tcp_slowtmr+0x270>)
 800aa36:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800aa3a:	4961      	ldr	r1, [pc, #388]	@ (800abc0 <tcp_slowtmr+0x288>)
 800aa3c:	485c      	ldr	r0, [pc, #368]	@ (800abb0 <tcp_slowtmr+0x278>)
 800aa3e:	f008 faa5 	bl	8012f8c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800aa42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa44:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800aa48:	2b0b      	cmp	r3, #11
 800aa4a:	d905      	bls.n	800aa58 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800aa4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa50:	3301      	adds	r3, #1
 800aa52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aa56:	e0ed      	b.n	800ac34 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800aa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	4a58      	ldr	r2, [pc, #352]	@ (800abc4 <tcp_slowtmr+0x28c>)
 800aa62:	5cd3      	ldrb	r3, [r2, r3]
 800aa64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800aa66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa68:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800aa6c:	7c7a      	ldrb	r2, [r7, #17]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d907      	bls.n	800aa82 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800aa72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa74:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800aa78:	3301      	adds	r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800aa82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800aa88:	7c7a      	ldrb	r2, [r7, #17]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	f200 80d2 	bhi.w	800ac34 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800aa90:	2301      	movs	r3, #1
 800aa92:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800aa94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d108      	bne.n	800aab0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800aa9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaa0:	f004 fc24 	bl	800f2ec <tcp_zero_window_probe>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d014      	beq.n	800aad4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800aaaa:	2300      	movs	r3, #0
 800aaac:	623b      	str	r3, [r7, #32]
 800aaae:	e011      	b.n	800aad4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800aab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aab6:	4619      	mov	r1, r3
 800aab8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaba:	f003 fae9 	bl	800e090 <tcp_split_unsent_seg>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d107      	bne.n	800aad4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800aac4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aac6:	f003 fd69 	bl	800e59c <tcp_output>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f000 80ac 	beq.w	800ac34 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800aadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800aae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800aaea:	2b06      	cmp	r3, #6
 800aaec:	f200 80a2 	bhi.w	800ac34 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800aaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ab00:	e098      	b.n	800ac34 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ab02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	db0f      	blt.n	800ab2c <tcp_slowtmr+0x1f4>
 800ab0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ab12:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d008      	beq.n	800ab2c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ab1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	3301      	adds	r3, #1
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	b21a      	sxth	r2, r3
 800ab28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ab2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	db7b      	blt.n	800ac34 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ab3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab3e:	f004 f821 	bl	800eb84 <tcp_rexmit_rto_prepare>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <tcp_slowtmr+0x220>
 800ab48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d171      	bne.n	800ac34 <tcp_slowtmr+0x2fc>
 800ab50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d06d      	beq.n	800ac34 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ab58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5a:	7d1b      	ldrb	r3, [r3, #20]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d03a      	beq.n	800abd6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ab60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab66:	2b0c      	cmp	r3, #12
 800ab68:	bf28      	it	cs
 800ab6a:	230c      	movcs	r3, #12
 800ab6c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ab74:	10db      	asrs	r3, r3, #3
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ab80:	4413      	add	r3, r2
 800ab82:	7efa      	ldrb	r2, [r7, #27]
 800ab84:	4910      	ldr	r1, [pc, #64]	@ (800abc8 <tcp_slowtmr+0x290>)
 800ab86:	5c8a      	ldrb	r2, [r1, r2]
 800ab88:	4093      	lsls	r3, r2
 800ab8a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ab92:	4293      	cmp	r3, r2
 800ab94:	dc1a      	bgt.n	800abcc <tcp_slowtmr+0x294>
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	b21a      	sxth	r2, r3
 800ab9a:	e019      	b.n	800abd0 <tcp_slowtmr+0x298>
 800ab9c:	20008a44 	.word	0x20008a44
 800aba0:	20008a5a 	.word	0x20008a5a
 800aba4:	20008a50 	.word	0x20008a50
 800aba8:	08014964 	.word	0x08014964
 800abac:	08014ca8 	.word	0x08014ca8
 800abb0:	080149a8 	.word	0x080149a8
 800abb4:	08014cd4 	.word	0x08014cd4
 800abb8:	08014d00 	.word	0x08014d00
 800abbc:	08014d30 	.word	0x08014d30
 800abc0:	08014d64 	.word	0x08014d64
 800abc4:	08016cf0 	.word	0x08016cf0
 800abc8:	08016ce0 	.word	0x08016ce0
 800abcc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800abd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800abd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd8:	2200      	movs	r2, #0
 800abda:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800abdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800abe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800abe8:	4293      	cmp	r3, r2
 800abea:	bf28      	it	cs
 800abec:	4613      	movcs	r3, r2
 800abee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800abf0:	8a7b      	ldrh	r3, [r7, #18]
 800abf2:	085b      	lsrs	r3, r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800abfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ac02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d206      	bcs.n	800ac1c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ac0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ac1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ac26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ac2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac30:	f004 f818 	bl	800ec64 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ac34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac36:	7d1b      	ldrb	r3, [r3, #20]
 800ac38:	2b06      	cmp	r3, #6
 800ac3a:	d111      	bne.n	800ac60 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ac3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3e:	8b5b      	ldrh	r3, [r3, #26]
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00b      	beq.n	800ac60 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac48:	4b9c      	ldr	r3, [pc, #624]	@ (800aebc <tcp_slowtmr+0x584>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	2b28      	cmp	r3, #40	@ 0x28
 800ac54:	d904      	bls.n	800ac60 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ac56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac62:	7a5b      	ldrb	r3, [r3, #9]
 800ac64:	f003 0308 	and.w	r3, r3, #8
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d04a      	beq.n	800ad02 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ac6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac70:	2b04      	cmp	r3, #4
 800ac72:	d003      	beq.n	800ac7c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ac74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac76:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ac78:	2b07      	cmp	r3, #7
 800ac7a:	d142      	bne.n	800ad02 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac7c:	4b8f      	ldr	r3, [pc, #572]	@ (800aebc <tcp_slowtmr+0x584>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ac86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac88:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ac8c:	4b8c      	ldr	r3, [pc, #560]	@ (800aec0 <tcp_slowtmr+0x588>)
 800ac8e:	440b      	add	r3, r1
 800ac90:	498c      	ldr	r1, [pc, #560]	@ (800aec4 <tcp_slowtmr+0x58c>)
 800ac92:	fba1 1303 	umull	r1, r3, r1, r3
 800ac96:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d90a      	bls.n	800acb2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800ac9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aca0:	3301      	adds	r3, #1
 800aca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800aca6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acaa:	3301      	adds	r3, #1
 800acac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800acb0:	e027      	b.n	800ad02 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acb2:	4b82      	ldr	r3, [pc, #520]	@ (800aebc <tcp_slowtmr+0x584>)
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800acbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbe:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800acc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800acc8:	4618      	mov	r0, r3
 800acca:	4b7f      	ldr	r3, [pc, #508]	@ (800aec8 <tcp_slowtmr+0x590>)
 800accc:	fb00 f303 	mul.w	r3, r0, r3
 800acd0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800acd2:	497c      	ldr	r1, [pc, #496]	@ (800aec4 <tcp_slowtmr+0x58c>)
 800acd4:	fba1 1303 	umull	r1, r3, r1, r3
 800acd8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acda:	429a      	cmp	r2, r3
 800acdc:	d911      	bls.n	800ad02 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800acde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ace0:	f004 fac4 	bl	800f26c <tcp_keepalive>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800acea:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d107      	bne.n	800ad02 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800acf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800acf8:	3301      	adds	r3, #1
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfe:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ad02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d011      	beq.n	800ad2e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ad0a:	4b6c      	ldr	r3, [pc, #432]	@ (800aebc <tcp_slowtmr+0x584>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	1ad2      	subs	r2, r2, r3
 800ad14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad16:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	440b      	add	r3, r1
 800ad22:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d302      	bcc.n	800ad2e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800ad28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad2a:	f000 fddd 	bl	800b8e8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ad2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad30:	7d1b      	ldrb	r3, [r3, #20]
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d10b      	bne.n	800ad4e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad36:	4b61      	ldr	r3, [pc, #388]	@ (800aebc <tcp_slowtmr+0x584>)
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b28      	cmp	r3, #40	@ 0x28
 800ad42:	d904      	bls.n	800ad4e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800ad44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad48:	3301      	adds	r3, #1
 800ad4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800ad4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad50:	7d1b      	ldrb	r3, [r3, #20]
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d10b      	bne.n	800ad6e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad56:	4b59      	ldr	r3, [pc, #356]	@ (800aebc <tcp_slowtmr+0x584>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	2bf0      	cmp	r3, #240	@ 0xf0
 800ad62:	d904      	bls.n	800ad6e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ad64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad68:	3301      	adds	r3, #1
 800ad6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ad6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d060      	beq.n	800ae38 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800ad76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad7c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ad7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad80:	f000 fbfe 	bl	800b580 <tcp_pcb_purge>
      if (prev != NULL) {
 800ad84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d010      	beq.n	800adac <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad8a:	4b50      	ldr	r3, [pc, #320]	@ (800aecc <tcp_slowtmr+0x594>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d106      	bne.n	800ada2 <tcp_slowtmr+0x46a>
 800ad94:	4b4e      	ldr	r3, [pc, #312]	@ (800aed0 <tcp_slowtmr+0x598>)
 800ad96:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ad9a:	494e      	ldr	r1, [pc, #312]	@ (800aed4 <tcp_slowtmr+0x59c>)
 800ad9c:	484e      	ldr	r0, [pc, #312]	@ (800aed8 <tcp_slowtmr+0x5a0>)
 800ad9e:	f008 f8f5 	bl	8012f8c <iprintf>
        prev->next = pcb->next;
 800ada2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada4:	68da      	ldr	r2, [r3, #12]
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	60da      	str	r2, [r3, #12]
 800adaa:	e00f      	b.n	800adcc <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800adac:	4b47      	ldr	r3, [pc, #284]	@ (800aecc <tcp_slowtmr+0x594>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d006      	beq.n	800adc4 <tcp_slowtmr+0x48c>
 800adb6:	4b46      	ldr	r3, [pc, #280]	@ (800aed0 <tcp_slowtmr+0x598>)
 800adb8:	f240 5271 	movw	r2, #1393	@ 0x571
 800adbc:	4947      	ldr	r1, [pc, #284]	@ (800aedc <tcp_slowtmr+0x5a4>)
 800adbe:	4846      	ldr	r0, [pc, #280]	@ (800aed8 <tcp_slowtmr+0x5a0>)
 800adc0:	f008 f8e4 	bl	8012f8c <iprintf>
        tcp_active_pcbs = pcb->next;
 800adc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	4a40      	ldr	r2, [pc, #256]	@ (800aecc <tcp_slowtmr+0x594>)
 800adca:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800adcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800add0:	2b00      	cmp	r3, #0
 800add2:	d013      	beq.n	800adfc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800add4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800addc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800adde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade0:	3304      	adds	r3, #4
 800ade2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ade4:	8ad2      	ldrh	r2, [r2, #22]
 800ade6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ade8:	8b09      	ldrh	r1, [r1, #24]
 800adea:	9102      	str	r1, [sp, #8]
 800adec:	9201      	str	r2, [sp, #4]
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	462b      	mov	r3, r5
 800adf2:	4622      	mov	r2, r4
 800adf4:	4601      	mov	r1, r0
 800adf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adf8:	f004 f984 	bl	800f104 <tcp_rst>
      err_arg = pcb->callback_arg;
 800adfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ae02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae04:	7d1b      	ldrb	r3, [r3, #20]
 800ae06:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ae08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ae0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ae12:	6838      	ldr	r0, [r7, #0]
 800ae14:	f7ff f9f2 	bl	800a1fc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ae18:	4b31      	ldr	r3, [pc, #196]	@ (800aee0 <tcp_slowtmr+0x5a8>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d004      	beq.n	800ae2e <tcp_slowtmr+0x4f6>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f06f 010c 	mvn.w	r1, #12
 800ae2a:	68b8      	ldr	r0, [r7, #8]
 800ae2c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ae2e:	4b2c      	ldr	r3, [pc, #176]	@ (800aee0 <tcp_slowtmr+0x5a8>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d037      	beq.n	800aea6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ae36:	e592      	b.n	800a95e <tcp_slowtmr+0x26>
      prev = pcb;
 800ae38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ae3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ae42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae44:	7f1b      	ldrb	r3, [r3, #28]
 800ae46:	3301      	adds	r3, #1
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ae4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae50:	7f1a      	ldrb	r2, [r3, #28]
 800ae52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae54:	7f5b      	ldrb	r3, [r3, #29]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d325      	bcc.n	800aea6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ae5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ae60:	4b1f      	ldr	r3, [pc, #124]	@ (800aee0 <tcp_slowtmr+0x5a8>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ae66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00b      	beq.n	800ae88 <tcp_slowtmr+0x550>
 800ae70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae78:	6912      	ldr	r2, [r2, #16]
 800ae7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
 800ae80:	4603      	mov	r3, r0
 800ae82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ae86:	e002      	b.n	800ae8e <tcp_slowtmr+0x556>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800ae8e:	4b14      	ldr	r3, [pc, #80]	@ (800aee0 <tcp_slowtmr+0x5a8>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f47f ad62 	bne.w	800a95c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ae98:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d102      	bne.n	800aea6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800aea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aea2:	f003 fb7b 	bl	800e59c <tcp_output>
  while (pcb != NULL) {
 800aea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f ad5e 	bne.w	800a96a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800aeb2:	4b0c      	ldr	r3, [pc, #48]	@ (800aee4 <tcp_slowtmr+0x5ac>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800aeb8:	e069      	b.n	800af8e <tcp_slowtmr+0x656>
 800aeba:	bf00      	nop
 800aebc:	20008a44 	.word	0x20008a44
 800aec0:	000a4cb8 	.word	0x000a4cb8
 800aec4:	10624dd3 	.word	0x10624dd3
 800aec8:	000124f8 	.word	0x000124f8
 800aecc:	20008a50 	.word	0x20008a50
 800aed0:	08014964 	.word	0x08014964
 800aed4:	08014d9c 	.word	0x08014d9c
 800aed8:	080149a8 	.word	0x080149a8
 800aedc:	08014dc8 	.word	0x08014dc8
 800aee0:	20008a58 	.word	0x20008a58
 800aee4:	20008a54 	.word	0x20008a54
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
 800aeec:	2b0a      	cmp	r3, #10
 800aeee:	d006      	beq.n	800aefe <tcp_slowtmr+0x5c6>
 800aef0:	4b2b      	ldr	r3, [pc, #172]	@ (800afa0 <tcp_slowtmr+0x668>)
 800aef2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800aef6:	492b      	ldr	r1, [pc, #172]	@ (800afa4 <tcp_slowtmr+0x66c>)
 800aef8:	482b      	ldr	r0, [pc, #172]	@ (800afa8 <tcp_slowtmr+0x670>)
 800aefa:	f008 f847 	bl	8012f8c <iprintf>
    pcb_remove = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800af04:	4b29      	ldr	r3, [pc, #164]	@ (800afac <tcp_slowtmr+0x674>)
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	2bf0      	cmp	r3, #240	@ 0xf0
 800af10:	d904      	bls.n	800af1c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800af12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af16:	3301      	adds	r3, #1
 800af18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800af1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af20:	2b00      	cmp	r3, #0
 800af22:	d02f      	beq.n	800af84 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800af24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af26:	f000 fb2b 	bl	800b580 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800af2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d010      	beq.n	800af52 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800af30:	4b1f      	ldr	r3, [pc, #124]	@ (800afb0 <tcp_slowtmr+0x678>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af36:	429a      	cmp	r2, r3
 800af38:	d106      	bne.n	800af48 <tcp_slowtmr+0x610>
 800af3a:	4b19      	ldr	r3, [pc, #100]	@ (800afa0 <tcp_slowtmr+0x668>)
 800af3c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800af40:	491c      	ldr	r1, [pc, #112]	@ (800afb4 <tcp_slowtmr+0x67c>)
 800af42:	4819      	ldr	r0, [pc, #100]	@ (800afa8 <tcp_slowtmr+0x670>)
 800af44:	f008 f822 	bl	8012f8c <iprintf>
        prev->next = pcb->next;
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	60da      	str	r2, [r3, #12]
 800af50:	e00f      	b.n	800af72 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800af52:	4b17      	ldr	r3, [pc, #92]	@ (800afb0 <tcp_slowtmr+0x678>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af58:	429a      	cmp	r2, r3
 800af5a:	d006      	beq.n	800af6a <tcp_slowtmr+0x632>
 800af5c:	4b10      	ldr	r3, [pc, #64]	@ (800afa0 <tcp_slowtmr+0x668>)
 800af5e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800af62:	4915      	ldr	r1, [pc, #84]	@ (800afb8 <tcp_slowtmr+0x680>)
 800af64:	4810      	ldr	r0, [pc, #64]	@ (800afa8 <tcp_slowtmr+0x670>)
 800af66:	f008 f811 	bl	8012f8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800af6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	4a10      	ldr	r2, [pc, #64]	@ (800afb0 <tcp_slowtmr+0x678>)
 800af70:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800af72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af74:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800af76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800af7c:	69f8      	ldr	r0, [r7, #28]
 800af7e:	f7ff f93d 	bl	800a1fc <tcp_free>
 800af82:	e004      	b.n	800af8e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800af84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af86:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800af8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1a9      	bne.n	800aee8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop
 800af98:	3730      	adds	r7, #48	@ 0x30
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bdb0      	pop	{r4, r5, r7, pc}
 800af9e:	bf00      	nop
 800afa0:	08014964 	.word	0x08014964
 800afa4:	08014df4 	.word	0x08014df4
 800afa8:	080149a8 	.word	0x080149a8
 800afac:	20008a44 	.word	0x20008a44
 800afb0:	20008a54 	.word	0x20008a54
 800afb4:	08014e24 	.word	0x08014e24
 800afb8:	08014e4c 	.word	0x08014e4c

0800afbc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800afc2:	4b2d      	ldr	r3, [pc, #180]	@ (800b078 <tcp_fasttmr+0xbc>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4b2b      	ldr	r3, [pc, #172]	@ (800b078 <tcp_fasttmr+0xbc>)
 800afcc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800afce:	4b2b      	ldr	r3, [pc, #172]	@ (800b07c <tcp_fasttmr+0xc0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800afd4:	e048      	b.n	800b068 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	7f9a      	ldrb	r2, [r3, #30]
 800afda:	4b27      	ldr	r3, [pc, #156]	@ (800b078 <tcp_fasttmr+0xbc>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d03f      	beq.n	800b062 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800afe2:	4b25      	ldr	r3, [pc, #148]	@ (800b078 <tcp_fasttmr+0xbc>)
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	8b5b      	ldrh	r3, [r3, #26]
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d010      	beq.n	800b018 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	8b5b      	ldrh	r3, [r3, #26]
 800affa:	f043 0302 	orr.w	r3, r3, #2
 800affe:	b29a      	uxth	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f003 fac9 	bl	800e59c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	8b5b      	ldrh	r3, [r3, #26]
 800b00e:	f023 0303 	bic.w	r3, r3, #3
 800b012:	b29a      	uxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	8b5b      	ldrh	r3, [r3, #26]
 800b01c:	f003 0308 	and.w	r3, r3, #8
 800b020:	2b00      	cmp	r3, #0
 800b022:	d009      	beq.n	800b038 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8b5b      	ldrh	r3, [r3, #26]
 800b028:	f023 0308 	bic.w	r3, r3, #8
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fa76 	bl	800a524 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b046:	4b0e      	ldr	r3, [pc, #56]	@ (800b080 <tcp_fasttmr+0xc4>)
 800b048:	2200      	movs	r2, #0
 800b04a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f819 	bl	800b084 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b052:	4b0b      	ldr	r3, [pc, #44]	@ (800b080 <tcp_fasttmr+0xc4>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d000      	beq.n	800b05c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b05a:	e7b8      	b.n	800afce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	607b      	str	r3, [r7, #4]
 800b060:	e002      	b.n	800b068 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1b3      	bne.n	800afd6 <tcp_fasttmr+0x1a>
    }
  }
}
 800b06e:	bf00      	nop
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20008a5a 	.word	0x20008a5a
 800b07c:	20008a50 	.word	0x20008a50
 800b080:	20008a58 	.word	0x20008a58

0800b084 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <tcp_process_refused_data+0x22>
 800b092:	4b37      	ldr	r3, [pc, #220]	@ (800b170 <tcp_process_refused_data+0xec>)
 800b094:	f240 6209 	movw	r2, #1545	@ 0x609
 800b098:	4936      	ldr	r1, [pc, #216]	@ (800b174 <tcp_process_refused_data+0xf0>)
 800b09a:	4837      	ldr	r0, [pc, #220]	@ (800b178 <tcp_process_refused_data+0xf4>)
 800b09c:	f007 ff76 	bl	8012f8c <iprintf>
 800b0a0:	f06f 030f 	mvn.w	r3, #15
 800b0a4:	e060      	b.n	800b168 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0aa:	7b5b      	ldrb	r3, [r3, #13]
 800b0ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <tcp_process_refused_data+0x58>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6918      	ldr	r0, [r3, #16]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	47a0      	blx	r4
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
 800b0da:	e007      	b.n	800b0ec <tcp_process_refused_data+0x68>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f000 f8a4 	bl	800b230 <tcp_recv_null>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d12a      	bne.n	800b14a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d033      	beq.n	800b166 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b102:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b106:	d005      	beq.n	800b114 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b10c:	3301      	adds	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <tcp_process_refused_data+0xb2>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6918      	ldr	r0, [r3, #16]
 800b128:	2300      	movs	r3, #0
 800b12a:	2200      	movs	r2, #0
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	47a0      	blx	r4
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]
 800b134:	e001      	b.n	800b13a <tcp_process_refused_data+0xb6>
 800b136:	2300      	movs	r3, #0
 800b138:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13e:	f113 0f0d 	cmn.w	r3, #13
 800b142:	d110      	bne.n	800b166 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b144:	f06f 030c 	mvn.w	r3, #12
 800b148:	e00e      	b.n	800b168 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b14e:	f113 0f0d 	cmn.w	r3, #13
 800b152:	d102      	bne.n	800b15a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b154:	f06f 030c 	mvn.w	r3, #12
 800b158:	e006      	b.n	800b168 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800b160:	f06f 0304 	mvn.w	r3, #4
 800b164:	e000      	b.n	800b168 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd90      	pop	{r4, r7, pc}
 800b170:	08014964 	.word	0x08014964
 800b174:	08014e74 	.word	0x08014e74
 800b178:	080149a8 	.word	0x080149a8

0800b17c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b184:	e007      	b.n	800b196 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f80a 	bl	800b1a6 <tcp_seg_free>
    seg = next;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1f4      	bne.n	800b186 <tcp_segs_free+0xa>
  }
}
 800b19c:	bf00      	nop
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00c      	beq.n	800b1ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d004      	beq.n	800b1c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe fd6b 	bl	8009c9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b1c6:	6879      	ldr	r1, [r7, #4]
 800b1c8:	2003      	movs	r0, #3
 800b1ca:	f7fd fef1 	bl	8008fb0 <memp_free>
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
	...

0800b1d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d106      	bne.n	800b1f4 <tcp_seg_copy+0x1c>
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b224 <tcp_seg_copy+0x4c>)
 800b1e8:	f240 6282 	movw	r2, #1666	@ 0x682
 800b1ec:	490e      	ldr	r1, [pc, #56]	@ (800b228 <tcp_seg_copy+0x50>)
 800b1ee:	480f      	ldr	r0, [pc, #60]	@ (800b22c <tcp_seg_copy+0x54>)
 800b1f0:	f007 fecc 	bl	8012f8c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b1f4:	2003      	movs	r0, #3
 800b1f6:	f7fd fe6b 	bl	8008ed0 <memp_malloc>
 800b1fa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <tcp_seg_copy+0x2e>
    return NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	e00a      	b.n	800b21c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b206:	2210      	movs	r2, #16
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f008 f89d 	bl	801334a <memcpy>
  pbuf_ref(cseg->p);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe fde1 	bl	8009ddc <pbuf_ref>
  return cseg;
 800b21a:	68fb      	ldr	r3, [r7, #12]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	08014964 	.word	0x08014964
 800b228:	08014eb8 	.word	0x08014eb8
 800b22c:	080149a8 	.word	0x080149a8

0800b230 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d109      	bne.n	800b258 <tcp_recv_null+0x28>
 800b244:	4b12      	ldr	r3, [pc, #72]	@ (800b290 <tcp_recv_null+0x60>)
 800b246:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b24a:	4912      	ldr	r1, [pc, #72]	@ (800b294 <tcp_recv_null+0x64>)
 800b24c:	4812      	ldr	r0, [pc, #72]	@ (800b298 <tcp_recv_null+0x68>)
 800b24e:	f007 fe9d 	bl	8012f8c <iprintf>
 800b252:	f06f 030f 	mvn.w	r3, #15
 800b256:	e016      	b.n	800b286 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d009      	beq.n	800b272 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	891b      	ldrh	r3, [r3, #8]
 800b262:	4619      	mov	r1, r3
 800b264:	68b8      	ldr	r0, [r7, #8]
 800b266:	f7ff fb17 	bl	800a898 <tcp_recved>
    pbuf_free(p);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7fe fd16 	bl	8009c9c <pbuf_free>
 800b270:	e008      	b.n	800b284 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d104      	bne.n	800b284 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b27a:	68b8      	ldr	r0, [r7, #8]
 800b27c:	f7ff f9bc 	bl	800a5f8 <tcp_close>
 800b280:	4603      	mov	r3, r0
 800b282:	e000      	b.n	800b286 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	08014964 	.word	0x08014964
 800b294:	08014ed4 	.word	0x08014ed4
 800b298:	080149a8 	.word	0x080149a8

0800b29c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b2a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	db01      	blt.n	800b2b2 <tcp_kill_prio+0x16>
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	e000      	b.n	800b2b4 <tcp_kill_prio+0x18>
 800b2b2:	237f      	movs	r3, #127	@ 0x7f
 800b2b4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b2b6:	7afb      	ldrb	r3, [r7, #11]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d034      	beq.n	800b326 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b2bc:	7afb      	ldrb	r3, [r7, #11]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2ca:	4b19      	ldr	r3, [pc, #100]	@ (800b330 <tcp_kill_prio+0x94>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e01f      	b.n	800b312 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	7d5b      	ldrb	r3, [r3, #21]
 800b2d6:	7afa      	ldrb	r2, [r7, #11]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d80c      	bhi.n	800b2f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b2e0:	7afa      	ldrb	r2, [r7, #11]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d112      	bne.n	800b30c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b2e6:	4b13      	ldr	r3, [pc, #76]	@ (800b334 <tcp_kill_prio+0x98>)
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d80a      	bhi.n	800b30c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b334 <tcp_kill_prio+0x98>)
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	7d5b      	ldrb	r3, [r3, #21]
 800b30a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	617b      	str	r3, [r7, #20]
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1dc      	bne.n	800b2d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d004      	beq.n	800b328 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b31e:	6938      	ldr	r0, [r7, #16]
 800b320:	f7ff fa54 	bl	800a7cc <tcp_abort>
 800b324:	e000      	b.n	800b328 <tcp_kill_prio+0x8c>
    return;
 800b326:	bf00      	nop
  }
}
 800b328:	3718      	adds	r7, #24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20008a50 	.word	0x20008a50
 800b334:	20008a44 	.word	0x20008a44

0800b338 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	2b08      	cmp	r3, #8
 800b346:	d009      	beq.n	800b35c <tcp_kill_state+0x24>
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	2b09      	cmp	r3, #9
 800b34c:	d006      	beq.n	800b35c <tcp_kill_state+0x24>
 800b34e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3b8 <tcp_kill_state+0x80>)
 800b350:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800b354:	4919      	ldr	r1, [pc, #100]	@ (800b3bc <tcp_kill_state+0x84>)
 800b356:	481a      	ldr	r0, [pc, #104]	@ (800b3c0 <tcp_kill_state+0x88>)
 800b358:	f007 fe18 	bl	8012f8c <iprintf>

  inactivity = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b364:	4b17      	ldr	r3, [pc, #92]	@ (800b3c4 <tcp_kill_state+0x8c>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	617b      	str	r3, [r7, #20]
 800b36a:	e017      	b.n	800b39c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	7d1b      	ldrb	r3, [r3, #20]
 800b370:	79fa      	ldrb	r2, [r7, #7]
 800b372:	429a      	cmp	r2, r3
 800b374:	d10f      	bne.n	800b396 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b376:	4b14      	ldr	r3, [pc, #80]	@ (800b3c8 <tcp_kill_state+0x90>)
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	429a      	cmp	r2, r3
 800b384:	d807      	bhi.n	800b396 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b386:	4b10      	ldr	r3, [pc, #64]	@ (800b3c8 <tcp_kill_state+0x90>)
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	617b      	str	r3, [r7, #20]
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1e4      	bne.n	800b36c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d003      	beq.n	800b3b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	6938      	ldr	r0, [r7, #16]
 800b3ac:	f7ff f950 	bl	800a650 <tcp_abandon>
  }
}
 800b3b0:	bf00      	nop
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	08014964 	.word	0x08014964
 800b3bc:	08014ef0 	.word	0x08014ef0
 800b3c0:	080149a8 	.word	0x080149a8
 800b3c4:	20008a50 	.word	0x20008a50
 800b3c8:	20008a44 	.word	0x20008a44

0800b3cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3da:	4b12      	ldr	r3, [pc, #72]	@ (800b424 <tcp_kill_timewait+0x58>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	e012      	b.n	800b408 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3e2:	4b11      	ldr	r3, [pc, #68]	@ (800b428 <tcp_kill_timewait+0x5c>)
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d807      	bhi.n	800b402 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b428 <tcp_kill_timewait+0x5c>)
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e9      	bne.n	800b3e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b414:	68b8      	ldr	r0, [r7, #8]
 800b416:	f7ff f9d9 	bl	800a7cc <tcp_abort>
  }
}
 800b41a:	bf00      	nop
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	20008a54 	.word	0x20008a54
 800b428:	20008a44 	.word	0x20008a44

0800b42c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b432:	4b10      	ldr	r3, [pc, #64]	@ (800b474 <tcp_handle_closepend+0x48>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b438:	e014      	b.n	800b464 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	8b5b      	ldrh	r3, [r3, #26]
 800b444:	f003 0308 	and.w	r3, r3, #8
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d009      	beq.n	800b460 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	8b5b      	ldrh	r3, [r3, #26]
 800b450:	f023 0308 	bic.w	r3, r3, #8
 800b454:	b29a      	uxth	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff f862 	bl	800a524 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e7      	bne.n	800b43a <tcp_handle_closepend+0xe>
  }
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20008a50 	.word	0x20008a50

0800b478 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	4603      	mov	r3, r0
 800b480:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b482:	2001      	movs	r0, #1
 800b484:	f7fd fd24 	bl	8008ed0 <memp_malloc>
 800b488:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d126      	bne.n	800b4de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b490:	f7ff ffcc 	bl	800b42c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b494:	f7ff ff9a 	bl	800b3cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b498:	2001      	movs	r0, #1
 800b49a:	f7fd fd19 	bl	8008ed0 <memp_malloc>
 800b49e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d11b      	bne.n	800b4de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b4a6:	2009      	movs	r0, #9
 800b4a8:	f7ff ff46 	bl	800b338 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	f7fd fd0f 	bl	8008ed0 <memp_malloc>
 800b4b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d111      	bne.n	800b4de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b4ba:	2008      	movs	r0, #8
 800b4bc:	f7ff ff3c 	bl	800b338 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	f7fd fd05 	bl	8008ed0 <memp_malloc>
 800b4c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d107      	bne.n	800b4de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fee3 	bl	800b29c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b4d6:	2001      	movs	r0, #1
 800b4d8:	f7fd fcfa 	bl	8008ed0 <memp_malloc>
 800b4dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d03f      	beq.n	800b564 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b4e4:	229c      	movs	r2, #156	@ 0x9c
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f007 fea7 	bl	801323c <memset>
    pcb->prio = prio;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	79fa      	ldrb	r2, [r7, #7]
 800b4f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b4fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b504:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	22ff      	movs	r2, #255	@ 0xff
 800b512:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b51a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2206      	movs	r2, #6
 800b520:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2206      	movs	r2, #6
 800b528:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b530:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2201      	movs	r2, #1
 800b536:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800b53a:	4b0d      	ldr	r3, [pc, #52]	@ (800b570 <tcp_alloc+0xf8>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b542:	4b0c      	ldr	r3, [pc, #48]	@ (800b574 <tcp_alloc+0xfc>)
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b550:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	4a08      	ldr	r2, [pc, #32]	@ (800b578 <tcp_alloc+0x100>)
 800b558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	4a07      	ldr	r2, [pc, #28]	@ (800b57c <tcp_alloc+0x104>)
 800b560:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b564:	68fb      	ldr	r3, [r7, #12]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20008a44 	.word	0x20008a44
 800b574:	20008a5a 	.word	0x20008a5a
 800b578:	0800b231 	.word	0x0800b231
 800b57c:	006ddd00 	.word	0x006ddd00

0800b580 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d107      	bne.n	800b59e <tcp_pcb_purge+0x1e>
 800b58e:	4b21      	ldr	r3, [pc, #132]	@ (800b614 <tcp_pcb_purge+0x94>)
 800b590:	f640 0251 	movw	r2, #2129	@ 0x851
 800b594:	4920      	ldr	r1, [pc, #128]	@ (800b618 <tcp_pcb_purge+0x98>)
 800b596:	4821      	ldr	r0, [pc, #132]	@ (800b61c <tcp_pcb_purge+0x9c>)
 800b598:	f007 fcf8 	bl	8012f8c <iprintf>
 800b59c:	e037      	b.n	800b60e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7d1b      	ldrb	r3, [r3, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d033      	beq.n	800b60e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b5aa:	2b0a      	cmp	r3, #10
 800b5ac:	d02f      	beq.n	800b60e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d02b      	beq.n	800b60e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d007      	beq.n	800b5ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fe fb6a 	bl	8009c9c <pbuf_free>
      pcb->refused_data = NULL;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f986 	bl	800b8e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b5e2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7ff fdc7 	bl	800b17c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff fdc2 	bl	800b17c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	08014964 	.word	0x08014964
 800b618:	08014fb0 	.word	0x08014fb0
 800b61c:	080149a8 	.word	0x080149a8

0800b620 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d106      	bne.n	800b63e <tcp_pcb_remove+0x1e>
 800b630:	4b3e      	ldr	r3, [pc, #248]	@ (800b72c <tcp_pcb_remove+0x10c>)
 800b632:	f640 0283 	movw	r2, #2179	@ 0x883
 800b636:	493e      	ldr	r1, [pc, #248]	@ (800b730 <tcp_pcb_remove+0x110>)
 800b638:	483e      	ldr	r0, [pc, #248]	@ (800b734 <tcp_pcb_remove+0x114>)
 800b63a:	f007 fca7 	bl	8012f8c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d106      	bne.n	800b652 <tcp_pcb_remove+0x32>
 800b644:	4b39      	ldr	r3, [pc, #228]	@ (800b72c <tcp_pcb_remove+0x10c>)
 800b646:	f640 0284 	movw	r2, #2180	@ 0x884
 800b64a:	493b      	ldr	r1, [pc, #236]	@ (800b738 <tcp_pcb_remove+0x118>)
 800b64c:	4839      	ldr	r0, [pc, #228]	@ (800b734 <tcp_pcb_remove+0x114>)
 800b64e:	f007 fc9d 	bl	8012f8c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d105      	bne.n	800b668 <tcp_pcb_remove+0x48>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	e013      	b.n	800b690 <tcp_pcb_remove+0x70>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	60fb      	str	r3, [r7, #12]
 800b66e:	e00c      	b.n	800b68a <tcp_pcb_remove+0x6a>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d104      	bne.n	800b684 <tcp_pcb_remove+0x64>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	60da      	str	r2, [r3, #12]
 800b682:	e005      	b.n	800b690 <tcp_pcb_remove+0x70>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1ef      	bne.n	800b670 <tcp_pcb_remove+0x50>
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	2200      	movs	r2, #0
 800b694:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b696:	6838      	ldr	r0, [r7, #0]
 800b698:	f7ff ff72 	bl	800b580 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	7d1b      	ldrb	r3, [r3, #20]
 800b6a0:	2b0a      	cmp	r3, #10
 800b6a2:	d013      	beq.n	800b6cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d00f      	beq.n	800b6cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	8b5b      	ldrh	r3, [r3, #26]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d009      	beq.n	800b6cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	8b5b      	ldrh	r3, [r3, #26]
 800b6bc:	f043 0302 	orr.w	r3, r3, #2
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b6c6:	6838      	ldr	r0, [r7, #0]
 800b6c8:	f002 ff68 	bl	800e59c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	7d1b      	ldrb	r3, [r3, #20]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d020      	beq.n	800b716 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d006      	beq.n	800b6ea <tcp_pcb_remove+0xca>
 800b6dc:	4b13      	ldr	r3, [pc, #76]	@ (800b72c <tcp_pcb_remove+0x10c>)
 800b6de:	f640 0293 	movw	r2, #2195	@ 0x893
 800b6e2:	4916      	ldr	r1, [pc, #88]	@ (800b73c <tcp_pcb_remove+0x11c>)
 800b6e4:	4813      	ldr	r0, [pc, #76]	@ (800b734 <tcp_pcb_remove+0x114>)
 800b6e6:	f007 fc51 	bl	8012f8c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <tcp_pcb_remove+0xe0>
 800b6f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b72c <tcp_pcb_remove+0x10c>)
 800b6f4:	f640 0294 	movw	r2, #2196	@ 0x894
 800b6f8:	4911      	ldr	r1, [pc, #68]	@ (800b740 <tcp_pcb_remove+0x120>)
 800b6fa:	480e      	ldr	r0, [pc, #56]	@ (800b734 <tcp_pcb_remove+0x114>)
 800b6fc:	f007 fc46 	bl	8012f8c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b704:	2b00      	cmp	r3, #0
 800b706:	d006      	beq.n	800b716 <tcp_pcb_remove+0xf6>
 800b708:	4b08      	ldr	r3, [pc, #32]	@ (800b72c <tcp_pcb_remove+0x10c>)
 800b70a:	f640 0296 	movw	r2, #2198	@ 0x896
 800b70e:	490d      	ldr	r1, [pc, #52]	@ (800b744 <tcp_pcb_remove+0x124>)
 800b710:	4808      	ldr	r0, [pc, #32]	@ (800b734 <tcp_pcb_remove+0x114>)
 800b712:	f007 fc3b 	bl	8012f8c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2200      	movs	r2, #0
 800b71a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	2200      	movs	r2, #0
 800b720:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b722:	bf00      	nop
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	08014964 	.word	0x08014964
 800b730:	08014fcc 	.word	0x08014fcc
 800b734:	080149a8 	.word	0x080149a8
 800b738:	08014fe8 	.word	0x08014fe8
 800b73c:	08015008 	.word	0x08015008
 800b740:	08015020 	.word	0x08015020
 800b744:	0801503c 	.word	0x0801503c

0800b748 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d106      	bne.n	800b764 <tcp_next_iss+0x1c>
 800b756:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <tcp_next_iss+0x38>)
 800b758:	f640 02af 	movw	r2, #2223	@ 0x8af
 800b75c:	4909      	ldr	r1, [pc, #36]	@ (800b784 <tcp_next_iss+0x3c>)
 800b75e:	480a      	ldr	r0, [pc, #40]	@ (800b788 <tcp_next_iss+0x40>)
 800b760:	f007 fc14 	bl	8012f8c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b764:	4b09      	ldr	r3, [pc, #36]	@ (800b78c <tcp_next_iss+0x44>)
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	4b09      	ldr	r3, [pc, #36]	@ (800b790 <tcp_next_iss+0x48>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4413      	add	r3, r2
 800b76e:	4a07      	ldr	r2, [pc, #28]	@ (800b78c <tcp_next_iss+0x44>)
 800b770:	6013      	str	r3, [r2, #0]
  return iss;
 800b772:	4b06      	ldr	r3, [pc, #24]	@ (800b78c <tcp_next_iss+0x44>)
 800b774:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b776:	4618      	mov	r0, r3
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	08014964 	.word	0x08014964
 800b784:	08015054 	.word	0x08015054
 800b788:	080149a8 	.word	0x080149a8
 800b78c:	20000024 	.word	0x20000024
 800b790:	20008a44 	.word	0x20008a44

0800b794 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d106      	bne.n	800b7b6 <tcp_eff_send_mss_netif+0x22>
 800b7a8:	4b14      	ldr	r3, [pc, #80]	@ (800b7fc <tcp_eff_send_mss_netif+0x68>)
 800b7aa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800b7ae:	4914      	ldr	r1, [pc, #80]	@ (800b800 <tcp_eff_send_mss_netif+0x6c>)
 800b7b0:	4814      	ldr	r0, [pc, #80]	@ (800b804 <tcp_eff_send_mss_netif+0x70>)
 800b7b2:	f007 fbeb 	bl	8012f8c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b7bc:	89fb      	ldrh	r3, [r7, #14]
 800b7be:	e019      	b.n	800b7f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b7c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b7c6:	8afb      	ldrh	r3, [r7, #22]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d012      	beq.n	800b7f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b7cc:	2328      	movs	r3, #40	@ 0x28
 800b7ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b7d0:	8afa      	ldrh	r2, [r7, #22]
 800b7d2:	8abb      	ldrh	r3, [r7, #20]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d904      	bls.n	800b7e2 <tcp_eff_send_mss_netif+0x4e>
 800b7d8:	8afa      	ldrh	r2, [r7, #22]
 800b7da:	8abb      	ldrh	r3, [r7, #20]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	e000      	b.n	800b7e4 <tcp_eff_send_mss_netif+0x50>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b7e6:	8a7a      	ldrh	r2, [r7, #18]
 800b7e8:	89fb      	ldrh	r3, [r7, #14]
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	bf28      	it	cs
 800b7ee:	4613      	movcs	r3, r2
 800b7f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b7f2:	89fb      	ldrh	r3, [r7, #14]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	08014964 	.word	0x08014964
 800b800:	08015070 	.word	0x08015070
 800b804:	080149a8 	.word	0x080149a8

0800b808 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d119      	bne.n	800b850 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b81c:	4b10      	ldr	r3, [pc, #64]	@ (800b860 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b81e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800b822:	4910      	ldr	r1, [pc, #64]	@ (800b864 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b824:	4810      	ldr	r0, [pc, #64]	@ (800b868 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b826:	f007 fbb1 	bl	8012f8c <iprintf>

  while (pcb != NULL) {
 800b82a:	e011      	b.n	800b850 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	d108      	bne.n	800b84a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7fe ffc4 	bl	800a7cc <tcp_abort>
      pcb = next;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	60fb      	str	r3, [r7, #12]
 800b848:	e002      	b.n	800b850 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1ea      	bne.n	800b82c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b856:	bf00      	nop
 800b858:	bf00      	nop
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	08014964 	.word	0x08014964
 800b864:	08015098 	.word	0x08015098
 800b868:	080149a8 	.word	0x080149a8

0800b86c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d02a      	beq.n	800b8d2 <tcp_netif_ip_addr_changed+0x66>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d026      	beq.n	800b8d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b884:	4b15      	ldr	r3, [pc, #84]	@ (800b8dc <tcp_netif_ip_addr_changed+0x70>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff ffbc 	bl	800b808 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b890:	4b13      	ldr	r3, [pc, #76]	@ (800b8e0 <tcp_netif_ip_addr_changed+0x74>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff ffb6 	bl	800b808 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d017      	beq.n	800b8d2 <tcp_netif_ip_addr_changed+0x66>
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d013      	beq.n	800b8d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b8e4 <tcp_netif_ip_addr_changed+0x78>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	e00c      	b.n	800b8cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d103      	bne.n	800b8c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1ef      	bne.n	800b8b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b8d2:	bf00      	nop
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20008a50 	.word	0x20008a50
 800b8e0:	20008a48 	.word	0x20008a48
 800b8e4:	20008a4c 	.word	0x20008a4c

0800b8e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d007      	beq.n	800b908 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fc3d 	bl	800b17c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b908:	bf00      	nop
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b910:	b590      	push	{r4, r7, lr}
 800b912:	b08d      	sub	sp, #52	@ 0x34
 800b914:	af04      	add	r7, sp, #16
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d105      	bne.n	800b92c <tcp_input+0x1c>
 800b920:	4b9b      	ldr	r3, [pc, #620]	@ (800bb90 <tcp_input+0x280>)
 800b922:	2283      	movs	r2, #131	@ 0x83
 800b924:	499b      	ldr	r1, [pc, #620]	@ (800bb94 <tcp_input+0x284>)
 800b926:	489c      	ldr	r0, [pc, #624]	@ (800bb98 <tcp_input+0x288>)
 800b928:	f007 fb30 	bl	8012f8c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	4a9a      	ldr	r2, [pc, #616]	@ (800bb9c <tcp_input+0x28c>)
 800b932:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	895b      	ldrh	r3, [r3, #10]
 800b938:	2b13      	cmp	r3, #19
 800b93a:	f240 83d1 	bls.w	800c0e0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b93e:	4b98      	ldr	r3, [pc, #608]	@ (800bba0 <tcp_input+0x290>)
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	4a97      	ldr	r2, [pc, #604]	@ (800bba0 <tcp_input+0x290>)
 800b944:	6812      	ldr	r2, [r2, #0]
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f005 ff01 	bl	8011750 <ip4_addr_isbroadcast_u32>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	f040 83c7 	bne.w	800c0e4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b956:	4b92      	ldr	r3, [pc, #584]	@ (800bba0 <tcp_input+0x290>)
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b95e:	2be0      	cmp	r3, #224	@ 0xe0
 800b960:	f000 83c0 	beq.w	800c0e4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b964:	4b8d      	ldr	r3, [pc, #564]	@ (800bb9c <tcp_input+0x28c>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	899b      	ldrh	r3, [r3, #12]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fc fe37 	bl	80085e0 <lwip_htons>
 800b972:	4603      	mov	r3, r0
 800b974:	0b1b      	lsrs	r3, r3, #12
 800b976:	b29b      	uxth	r3, r3
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b97e:	7cbb      	ldrb	r3, [r7, #18]
 800b980:	2b13      	cmp	r3, #19
 800b982:	f240 83b1 	bls.w	800c0e8 <tcp_input+0x7d8>
 800b986:	7cbb      	ldrb	r3, [r7, #18]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	891b      	ldrh	r3, [r3, #8]
 800b98e:	429a      	cmp	r2, r3
 800b990:	f200 83aa 	bhi.w	800c0e8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b994:	7cbb      	ldrb	r3, [r7, #18]
 800b996:	b29b      	uxth	r3, r3
 800b998:	3b14      	subs	r3, #20
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	4b81      	ldr	r3, [pc, #516]	@ (800bba4 <tcp_input+0x294>)
 800b99e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b9a0:	4b81      	ldr	r3, [pc, #516]	@ (800bba8 <tcp_input+0x298>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	895a      	ldrh	r2, [r3, #10]
 800b9aa:	7cbb      	ldrb	r3, [r7, #18]
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d309      	bcc.n	800b9c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b9b2:	4b7c      	ldr	r3, [pc, #496]	@ (800bba4 <tcp_input+0x294>)
 800b9b4:	881a      	ldrh	r2, [r3, #0]
 800b9b6:	4b7d      	ldr	r3, [pc, #500]	@ (800bbac <tcp_input+0x29c>)
 800b9b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b9ba:	7cbb      	ldrb	r3, [r7, #18]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7fe f8e6 	bl	8009b90 <pbuf_remove_header>
 800b9c4:	e04e      	b.n	800ba64 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d105      	bne.n	800b9da <tcp_input+0xca>
 800b9ce:	4b70      	ldr	r3, [pc, #448]	@ (800bb90 <tcp_input+0x280>)
 800b9d0:	22c2      	movs	r2, #194	@ 0xc2
 800b9d2:	4977      	ldr	r1, [pc, #476]	@ (800bbb0 <tcp_input+0x2a0>)
 800b9d4:	4870      	ldr	r0, [pc, #448]	@ (800bb98 <tcp_input+0x288>)
 800b9d6:	f007 fad9 	bl	8012f8c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b9da:	2114      	movs	r1, #20
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7fe f8d7 	bl	8009b90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	895a      	ldrh	r2, [r3, #10]
 800b9e6:	4b71      	ldr	r3, [pc, #452]	@ (800bbac <tcp_input+0x29c>)
 800b9e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b9ea:	4b6e      	ldr	r3, [pc, #440]	@ (800bba4 <tcp_input+0x294>)
 800b9ec:	881a      	ldrh	r2, [r3, #0]
 800b9ee:	4b6f      	ldr	r3, [pc, #444]	@ (800bbac <tcp_input+0x29c>)
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b9f6:	4b6d      	ldr	r3, [pc, #436]	@ (800bbac <tcp_input+0x29c>)
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7fe f8c7 	bl	8009b90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	895b      	ldrh	r3, [r3, #10]
 800ba08:	8a3a      	ldrh	r2, [r7, #16]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	f200 836e 	bhi.w	800c0ec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	4a64      	ldr	r2, [pc, #400]	@ (800bba8 <tcp_input+0x298>)
 800ba18:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	8a3a      	ldrh	r2, [r7, #16]
 800ba20:	4611      	mov	r1, r2
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fe f8b4 	bl	8009b90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	891a      	ldrh	r2, [r3, #8]
 800ba2c:	8a3b      	ldrh	r3, [r7, #16]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	895b      	ldrh	r3, [r3, #10]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d005      	beq.n	800ba4a <tcp_input+0x13a>
 800ba3e:	4b54      	ldr	r3, [pc, #336]	@ (800bb90 <tcp_input+0x280>)
 800ba40:	22df      	movs	r2, #223	@ 0xdf
 800ba42:	495c      	ldr	r1, [pc, #368]	@ (800bbb4 <tcp_input+0x2a4>)
 800ba44:	4854      	ldr	r0, [pc, #336]	@ (800bb98 <tcp_input+0x288>)
 800ba46:	f007 faa1 	bl	8012f8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	891a      	ldrh	r2, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	891b      	ldrh	r3, [r3, #8]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d005      	beq.n	800ba64 <tcp_input+0x154>
 800ba58:	4b4d      	ldr	r3, [pc, #308]	@ (800bb90 <tcp_input+0x280>)
 800ba5a:	22e0      	movs	r2, #224	@ 0xe0
 800ba5c:	4956      	ldr	r1, [pc, #344]	@ (800bbb8 <tcp_input+0x2a8>)
 800ba5e:	484e      	ldr	r0, [pc, #312]	@ (800bb98 <tcp_input+0x288>)
 800ba60:	f007 fa94 	bl	8012f8c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ba64:	4b4d      	ldr	r3, [pc, #308]	@ (800bb9c <tcp_input+0x28c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	4a4b      	ldr	r2, [pc, #300]	@ (800bb9c <tcp_input+0x28c>)
 800ba6e:	6814      	ldr	r4, [r2, #0]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fc fdb5 	bl	80085e0 <lwip_htons>
 800ba76:	4603      	mov	r3, r0
 800ba78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ba7a:	4b48      	ldr	r3, [pc, #288]	@ (800bb9c <tcp_input+0x28c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	4a46      	ldr	r2, [pc, #280]	@ (800bb9c <tcp_input+0x28c>)
 800ba84:	6814      	ldr	r4, [r2, #0]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fc fdaa 	bl	80085e0 <lwip_htons>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ba90:	4b42      	ldr	r3, [pc, #264]	@ (800bb9c <tcp_input+0x28c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	4a41      	ldr	r2, [pc, #260]	@ (800bb9c <tcp_input+0x28c>)
 800ba98:	6814      	ldr	r4, [r2, #0]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fc fdb5 	bl	800860a <lwip_htonl>
 800baa0:	4603      	mov	r3, r0
 800baa2:	6063      	str	r3, [r4, #4]
 800baa4:	6863      	ldr	r3, [r4, #4]
 800baa6:	4a45      	ldr	r2, [pc, #276]	@ (800bbbc <tcp_input+0x2ac>)
 800baa8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800baaa:	4b3c      	ldr	r3, [pc, #240]	@ (800bb9c <tcp_input+0x28c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	4a3a      	ldr	r2, [pc, #232]	@ (800bb9c <tcp_input+0x28c>)
 800bab2:	6814      	ldr	r4, [r2, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fc fda8 	bl	800860a <lwip_htonl>
 800baba:	4603      	mov	r3, r0
 800babc:	60a3      	str	r3, [r4, #8]
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	4a3f      	ldr	r2, [pc, #252]	@ (800bbc0 <tcp_input+0x2b0>)
 800bac2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bac4:	4b35      	ldr	r3, [pc, #212]	@ (800bb9c <tcp_input+0x28c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	89db      	ldrh	r3, [r3, #14]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	4a33      	ldr	r2, [pc, #204]	@ (800bb9c <tcp_input+0x28c>)
 800bace:	6814      	ldr	r4, [r2, #0]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fc fd85 	bl	80085e0 <lwip_htons>
 800bad6:	4603      	mov	r3, r0
 800bad8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bada:	4b30      	ldr	r3, [pc, #192]	@ (800bb9c <tcp_input+0x28c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	899b      	ldrh	r3, [r3, #12]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fc fd7c 	bl	80085e0 <lwip_htons>
 800bae8:	4603      	mov	r3, r0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	4b34      	ldr	r3, [pc, #208]	@ (800bbc4 <tcp_input+0x2b4>)
 800baf4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	891a      	ldrh	r2, [r3, #8]
 800bafa:	4b33      	ldr	r3, [pc, #204]	@ (800bbc8 <tcp_input+0x2b8>)
 800bafc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bafe:	4b31      	ldr	r3, [pc, #196]	@ (800bbc4 <tcp_input+0x2b4>)
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00c      	beq.n	800bb24 <tcp_input+0x214>
    tcplen++;
 800bb0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bbc8 <tcp_input+0x2b8>)
 800bb0c:	881b      	ldrh	r3, [r3, #0]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc8 <tcp_input+0x2b8>)
 800bb14:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	891a      	ldrh	r2, [r3, #8]
 800bb1a:	4b2b      	ldr	r3, [pc, #172]	@ (800bbc8 <tcp_input+0x2b8>)
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	f200 82e6 	bhi.w	800c0f0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bb24:	2300      	movs	r3, #0
 800bb26:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb28:	4b28      	ldr	r3, [pc, #160]	@ (800bbcc <tcp_input+0x2bc>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	61fb      	str	r3, [r7, #28]
 800bb2e:	e09d      	b.n	800bc6c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	7d1b      	ldrb	r3, [r3, #20]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d105      	bne.n	800bb44 <tcp_input+0x234>
 800bb38:	4b15      	ldr	r3, [pc, #84]	@ (800bb90 <tcp_input+0x280>)
 800bb3a:	22fb      	movs	r2, #251	@ 0xfb
 800bb3c:	4924      	ldr	r1, [pc, #144]	@ (800bbd0 <tcp_input+0x2c0>)
 800bb3e:	4816      	ldr	r0, [pc, #88]	@ (800bb98 <tcp_input+0x288>)
 800bb40:	f007 fa24 	bl	8012f8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	7d1b      	ldrb	r3, [r3, #20]
 800bb48:	2b0a      	cmp	r3, #10
 800bb4a:	d105      	bne.n	800bb58 <tcp_input+0x248>
 800bb4c:	4b10      	ldr	r3, [pc, #64]	@ (800bb90 <tcp_input+0x280>)
 800bb4e:	22fc      	movs	r2, #252	@ 0xfc
 800bb50:	4920      	ldr	r1, [pc, #128]	@ (800bbd4 <tcp_input+0x2c4>)
 800bb52:	4811      	ldr	r0, [pc, #68]	@ (800bb98 <tcp_input+0x288>)
 800bb54:	f007 fa1a 	bl	8012f8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	7d1b      	ldrb	r3, [r3, #20]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d105      	bne.n	800bb6c <tcp_input+0x25c>
 800bb60:	4b0b      	ldr	r3, [pc, #44]	@ (800bb90 <tcp_input+0x280>)
 800bb62:	22fd      	movs	r2, #253	@ 0xfd
 800bb64:	491c      	ldr	r1, [pc, #112]	@ (800bbd8 <tcp_input+0x2c8>)
 800bb66:	480c      	ldr	r0, [pc, #48]	@ (800bb98 <tcp_input+0x288>)
 800bb68:	f007 fa10 	bl	8012f8c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	7a1b      	ldrb	r3, [r3, #8]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d033      	beq.n	800bbdc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	7a1a      	ldrb	r2, [r3, #8]
 800bb78:	4b09      	ldr	r3, [pc, #36]	@ (800bba0 <tcp_input+0x290>)
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb80:	3301      	adds	r3, #1
 800bb82:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d029      	beq.n	800bbdc <tcp_input+0x2cc>
      prev = pcb;
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	61bb      	str	r3, [r7, #24]
      continue;
 800bb8c:	e06b      	b.n	800bc66 <tcp_input+0x356>
 800bb8e:	bf00      	nop
 800bb90:	080150cc 	.word	0x080150cc
 800bb94:	08015100 	.word	0x08015100
 800bb98:	08015118 	.word	0x08015118
 800bb9c:	20008a6c 	.word	0x20008a6c
 800bba0:	200054d4 	.word	0x200054d4
 800bba4:	20008a70 	.word	0x20008a70
 800bba8:	20008a74 	.word	0x20008a74
 800bbac:	20008a72 	.word	0x20008a72
 800bbb0:	08015140 	.word	0x08015140
 800bbb4:	08015150 	.word	0x08015150
 800bbb8:	0801515c 	.word	0x0801515c
 800bbbc:	20008a7c 	.word	0x20008a7c
 800bbc0:	20008a80 	.word	0x20008a80
 800bbc4:	20008a88 	.word	0x20008a88
 800bbc8:	20008a86 	.word	0x20008a86
 800bbcc:	20008a50 	.word	0x20008a50
 800bbd0:	0801517c 	.word	0x0801517c
 800bbd4:	080151a4 	.word	0x080151a4
 800bbd8:	080151d0 	.word	0x080151d0
    }

    if (pcb->remote_port == tcphdr->src &&
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	8b1a      	ldrh	r2, [r3, #24]
 800bbe0:	4b72      	ldr	r3, [pc, #456]	@ (800bdac <tcp_input+0x49c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d13a      	bne.n	800bc62 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	8ada      	ldrh	r2, [r3, #22]
 800bbf0:	4b6e      	ldr	r3, [pc, #440]	@ (800bdac <tcp_input+0x49c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	885b      	ldrh	r3, [r3, #2]
 800bbf6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d132      	bne.n	800bc62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	685a      	ldr	r2, [r3, #4]
 800bc00:	4b6b      	ldr	r3, [pc, #428]	@ (800bdb0 <tcp_input+0x4a0>)
 800bc02:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d12c      	bne.n	800bc62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	4b68      	ldr	r3, [pc, #416]	@ (800bdb0 <tcp_input+0x4a0>)
 800bc0e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d126      	bne.n	800bc62 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d106      	bne.n	800bc2c <tcp_input+0x31c>
 800bc1e:	4b65      	ldr	r3, [pc, #404]	@ (800bdb4 <tcp_input+0x4a4>)
 800bc20:	f240 120d 	movw	r2, #269	@ 0x10d
 800bc24:	4964      	ldr	r1, [pc, #400]	@ (800bdb8 <tcp_input+0x4a8>)
 800bc26:	4865      	ldr	r0, [pc, #404]	@ (800bdbc <tcp_input+0x4ac>)
 800bc28:	f007 f9b0 	bl	8012f8c <iprintf>
      if (prev != NULL) {
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00a      	beq.n	800bc48 <tcp_input+0x338>
        prev->next = pcb->next;
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	68da      	ldr	r2, [r3, #12]
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bc3a:	4b61      	ldr	r3, [pc, #388]	@ (800bdc0 <tcp_input+0x4b0>)
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bc42:	4a5f      	ldr	r2, [pc, #380]	@ (800bdc0 <tcp_input+0x4b0>)
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d111      	bne.n	800bc76 <tcp_input+0x366>
 800bc52:	4b58      	ldr	r3, [pc, #352]	@ (800bdb4 <tcp_input+0x4a4>)
 800bc54:	f240 1215 	movw	r2, #277	@ 0x115
 800bc58:	495a      	ldr	r1, [pc, #360]	@ (800bdc4 <tcp_input+0x4b4>)
 800bc5a:	4858      	ldr	r0, [pc, #352]	@ (800bdbc <tcp_input+0x4ac>)
 800bc5c:	f007 f996 	bl	8012f8c <iprintf>
      break;
 800bc60:	e009      	b.n	800bc76 <tcp_input+0x366>
    }
    prev = pcb;
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	61fb      	str	r3, [r7, #28]
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f47f af5e 	bne.w	800bb30 <tcp_input+0x220>
 800bc74:	e000      	b.n	800bc78 <tcp_input+0x368>
      break;
 800bc76:	bf00      	nop
  }

  if (pcb == NULL) {
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f040 80aa 	bne.w	800bdd4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc80:	4b51      	ldr	r3, [pc, #324]	@ (800bdc8 <tcp_input+0x4b8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	e03f      	b.n	800bd08 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	7d1b      	ldrb	r3, [r3, #20]
 800bc8c:	2b0a      	cmp	r3, #10
 800bc8e:	d006      	beq.n	800bc9e <tcp_input+0x38e>
 800bc90:	4b48      	ldr	r3, [pc, #288]	@ (800bdb4 <tcp_input+0x4a4>)
 800bc92:	f240 121f 	movw	r2, #287	@ 0x11f
 800bc96:	494d      	ldr	r1, [pc, #308]	@ (800bdcc <tcp_input+0x4bc>)
 800bc98:	4848      	ldr	r0, [pc, #288]	@ (800bdbc <tcp_input+0x4ac>)
 800bc9a:	f007 f977 	bl	8012f8c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	7a1b      	ldrb	r3, [r3, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	7a1a      	ldrb	r2, [r3, #8]
 800bcaa:	4b41      	ldr	r3, [pc, #260]	@ (800bdb0 <tcp_input+0x4a0>)
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d122      	bne.n	800bd00 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	8b1a      	ldrh	r2, [r3, #24]
 800bcbe:	4b3b      	ldr	r3, [pc, #236]	@ (800bdac <tcp_input+0x49c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d11b      	bne.n	800bd02 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	8ada      	ldrh	r2, [r3, #22]
 800bcce:	4b37      	ldr	r3, [pc, #220]	@ (800bdac <tcp_input+0x49c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	885b      	ldrh	r3, [r3, #2]
 800bcd4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d113      	bne.n	800bd02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	685a      	ldr	r2, [r3, #4]
 800bcde:	4b34      	ldr	r3, [pc, #208]	@ (800bdb0 <tcp_input+0x4a0>)
 800bce0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d10d      	bne.n	800bd02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	4b31      	ldr	r3, [pc, #196]	@ (800bdb0 <tcp_input+0x4a0>)
 800bcec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d107      	bne.n	800bd02 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bcf2:	69f8      	ldr	r0, [r7, #28]
 800bcf4:	f000 fb56 	bl	800c3a4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7fd ffcf 	bl	8009c9c <pbuf_free>
        return;
 800bcfe:	e1fd      	b.n	800c0fc <tcp_input+0x7ec>
        continue;
 800bd00:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	61fb      	str	r3, [r7, #28]
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1bc      	bne.n	800bc88 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd12:	4b2f      	ldr	r3, [pc, #188]	@ (800bdd0 <tcp_input+0x4c0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	617b      	str	r3, [r7, #20]
 800bd18:	e02a      	b.n	800bd70 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	7a1b      	ldrb	r3, [r3, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00c      	beq.n	800bd3c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	7a1a      	ldrb	r2, [r3, #8]
 800bd26:	4b22      	ldr	r3, [pc, #136]	@ (800bdb0 <tcp_input+0x4a0>)
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd2e:	3301      	adds	r3, #1
 800bd30:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d002      	beq.n	800bd3c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	61bb      	str	r3, [r7, #24]
        continue;
 800bd3a:	e016      	b.n	800bd6a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	8ada      	ldrh	r2, [r3, #22]
 800bd40:	4b1a      	ldr	r3, [pc, #104]	@ (800bdac <tcp_input+0x49c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	885b      	ldrh	r3, [r3, #2]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d10c      	bne.n	800bd66 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	4b17      	ldr	r3, [pc, #92]	@ (800bdb0 <tcp_input+0x4a0>)
 800bd52:	695b      	ldr	r3, [r3, #20]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d00f      	beq.n	800bd78 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00d      	beq.n	800bd7a <tcp_input+0x46a>
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d009      	beq.n	800bd7a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	617b      	str	r3, [r7, #20]
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1d1      	bne.n	800bd1a <tcp_input+0x40a>
 800bd76:	e000      	b.n	800bd7a <tcp_input+0x46a>
            break;
 800bd78:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d029      	beq.n	800bdd4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bd8e:	4b10      	ldr	r3, [pc, #64]	@ (800bdd0 <tcp_input+0x4c0>)
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bd96:	4a0e      	ldr	r2, [pc, #56]	@ (800bdd0 <tcp_input+0x4c0>)
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bd9c:	6978      	ldr	r0, [r7, #20]
 800bd9e:	f000 fa03 	bl	800c1a8 <tcp_listen_input>
      }
      pbuf_free(p);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7fd ff7a 	bl	8009c9c <pbuf_free>
      return;
 800bda8:	e1a8      	b.n	800c0fc <tcp_input+0x7ec>
 800bdaa:	bf00      	nop
 800bdac:	20008a6c 	.word	0x20008a6c
 800bdb0:	200054d4 	.word	0x200054d4
 800bdb4:	080150cc 	.word	0x080150cc
 800bdb8:	080151f8 	.word	0x080151f8
 800bdbc:	08015118 	.word	0x08015118
 800bdc0:	20008a50 	.word	0x20008a50
 800bdc4:	08015224 	.word	0x08015224
 800bdc8:	20008a54 	.word	0x20008a54
 800bdcc:	08015250 	.word	0x08015250
 800bdd0:	20008a4c 	.word	0x20008a4c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 8158 	beq.w	800c08c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bddc:	4b95      	ldr	r3, [pc, #596]	@ (800c034 <tcp_input+0x724>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	891a      	ldrh	r2, [r3, #8]
 800bde6:	4b93      	ldr	r3, [pc, #588]	@ (800c034 <tcp_input+0x724>)
 800bde8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bdea:	4a92      	ldr	r2, [pc, #584]	@ (800c034 <tcp_input+0x724>)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bdf0:	4b91      	ldr	r3, [pc, #580]	@ (800c038 <tcp_input+0x728>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a8f      	ldr	r2, [pc, #572]	@ (800c034 <tcp_input+0x724>)
 800bdf6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bdf8:	4b90      	ldr	r3, [pc, #576]	@ (800c03c <tcp_input+0x72c>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bdfe:	4b90      	ldr	r3, [pc, #576]	@ (800c040 <tcp_input+0x730>)
 800be00:	2200      	movs	r2, #0
 800be02:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800be04:	4b8f      	ldr	r3, [pc, #572]	@ (800c044 <tcp_input+0x734>)
 800be06:	2200      	movs	r2, #0
 800be08:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800be0a:	4b8f      	ldr	r3, [pc, #572]	@ (800c048 <tcp_input+0x738>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	f003 0308 	and.w	r3, r3, #8
 800be12:	2b00      	cmp	r3, #0
 800be14:	d006      	beq.n	800be24 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	7b5b      	ldrb	r3, [r3, #13]
 800be1a:	f043 0301 	orr.w	r3, r3, #1
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d017      	beq.n	800be5c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be2c:	69f8      	ldr	r0, [r7, #28]
 800be2e:	f7ff f929 	bl	800b084 <tcp_process_refused_data>
 800be32:	4603      	mov	r3, r0
 800be34:	f113 0f0d 	cmn.w	r3, #13
 800be38:	d007      	beq.n	800be4a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00c      	beq.n	800be5c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be42:	4b82      	ldr	r3, [pc, #520]	@ (800c04c <tcp_input+0x73c>)
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d008      	beq.n	800be5c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f040 80e3 	bne.w	800c01a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800be54:	69f8      	ldr	r0, [r7, #28]
 800be56:	f003 f9a7 	bl	800f1a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800be5a:	e0de      	b.n	800c01a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800be5c:	4a7c      	ldr	r2, [pc, #496]	@ (800c050 <tcp_input+0x740>)
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800be62:	69f8      	ldr	r0, [r7, #28]
 800be64:	f000 fb18 	bl	800c498 <tcp_process>
 800be68:	4603      	mov	r3, r0
 800be6a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800be6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be70:	f113 0f0d 	cmn.w	r3, #13
 800be74:	f000 80d3 	beq.w	800c01e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800be78:	4b71      	ldr	r3, [pc, #452]	@ (800c040 <tcp_input+0x730>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	f003 0308 	and.w	r3, r3, #8
 800be80:	2b00      	cmp	r3, #0
 800be82:	d015      	beq.n	800beb0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d008      	beq.n	800bea0 <tcp_input+0x590>
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be94:	69fa      	ldr	r2, [r7, #28]
 800be96:	6912      	ldr	r2, [r2, #16]
 800be98:	f06f 010d 	mvn.w	r1, #13
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bea0:	69f9      	ldr	r1, [r7, #28]
 800bea2:	486c      	ldr	r0, [pc, #432]	@ (800c054 <tcp_input+0x744>)
 800bea4:	f7ff fbbc 	bl	800b620 <tcp_pcb_remove>
        tcp_free(pcb);
 800bea8:	69f8      	ldr	r0, [r7, #28]
 800beaa:	f7fe f9a7 	bl	800a1fc <tcp_free>
 800beae:	e0da      	b.n	800c066 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800beb4:	4b63      	ldr	r3, [pc, #396]	@ (800c044 <tcp_input+0x734>)
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d01d      	beq.n	800bef8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bebc:	4b61      	ldr	r3, [pc, #388]	@ (800c044 <tcp_input+0x734>)
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00a      	beq.n	800bee2 <tcp_input+0x5d2>
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bed2:	69fa      	ldr	r2, [r7, #28]
 800bed4:	6910      	ldr	r0, [r2, #16]
 800bed6:	89fa      	ldrh	r2, [r7, #14]
 800bed8:	69f9      	ldr	r1, [r7, #28]
 800beda:	4798      	blx	r3
 800bedc:	4603      	mov	r3, r0
 800bede:	74fb      	strb	r3, [r7, #19]
 800bee0:	e001      	b.n	800bee6 <tcp_input+0x5d6>
 800bee2:	2300      	movs	r3, #0
 800bee4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bee6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800beea:	f113 0f0d 	cmn.w	r3, #13
 800beee:	f000 8098 	beq.w	800c022 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bef2:	4b54      	ldr	r3, [pc, #336]	@ (800c044 <tcp_input+0x734>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bef8:	69f8      	ldr	r0, [r7, #28]
 800befa:	f000 f915 	bl	800c128 <tcp_input_delayed_close>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f040 8090 	bne.w	800c026 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bf06:	4b4d      	ldr	r3, [pc, #308]	@ (800c03c <tcp_input+0x72c>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d041      	beq.n	800bf92 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d006      	beq.n	800bf24 <tcp_input+0x614>
 800bf16:	4b50      	ldr	r3, [pc, #320]	@ (800c058 <tcp_input+0x748>)
 800bf18:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800bf1c:	494f      	ldr	r1, [pc, #316]	@ (800c05c <tcp_input+0x74c>)
 800bf1e:	4850      	ldr	r0, [pc, #320]	@ (800c060 <tcp_input+0x750>)
 800bf20:	f007 f834 	bl	8012f8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	8b5b      	ldrh	r3, [r3, #26]
 800bf28:	f003 0310 	and.w	r3, r3, #16
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d008      	beq.n	800bf42 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bf30:	4b42      	ldr	r3, [pc, #264]	@ (800c03c <tcp_input+0x72c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fd feb1 	bl	8009c9c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bf3a:	69f8      	ldr	r0, [r7, #28]
 800bf3c:	f7fe fc46 	bl	800a7cc <tcp_abort>
            goto aborted;
 800bf40:	e091      	b.n	800c066 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00c      	beq.n	800bf66 <tcp_input+0x656>
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	6918      	ldr	r0, [r3, #16]
 800bf56:	4b39      	ldr	r3, [pc, #228]	@ (800c03c <tcp_input+0x72c>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	69f9      	ldr	r1, [r7, #28]
 800bf5e:	47a0      	blx	r4
 800bf60:	4603      	mov	r3, r0
 800bf62:	74fb      	strb	r3, [r7, #19]
 800bf64:	e008      	b.n	800bf78 <tcp_input+0x668>
 800bf66:	4b35      	ldr	r3, [pc, #212]	@ (800c03c <tcp_input+0x72c>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	69f9      	ldr	r1, [r7, #28]
 800bf6e:	2000      	movs	r0, #0
 800bf70:	f7ff f95e 	bl	800b230 <tcp_recv_null>
 800bf74:	4603      	mov	r3, r0
 800bf76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bf78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf7c:	f113 0f0d 	cmn.w	r3, #13
 800bf80:	d053      	beq.n	800c02a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bf82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d003      	beq.n	800bf92 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bf8a:	4b2c      	ldr	r3, [pc, #176]	@ (800c03c <tcp_input+0x72c>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bf92:	4b2b      	ldr	r3, [pc, #172]	@ (800c040 <tcp_input+0x730>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	f003 0320 	and.w	r3, r3, #32
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d030      	beq.n	800c000 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d009      	beq.n	800bfba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfaa:	7b5a      	ldrb	r2, [r3, #13]
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfb0:	f042 0220 	orr.w	r2, r2, #32
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	735a      	strb	r2, [r3, #13]
 800bfb8:	e022      	b.n	800c000 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfbe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bfc2:	d005      	beq.n	800bfd0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfc8:	3301      	adds	r3, #1
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00b      	beq.n	800bff2 <tcp_input+0x6e2>
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	6918      	ldr	r0, [r3, #16]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	69f9      	ldr	r1, [r7, #28]
 800bfea:	47a0      	blx	r4
 800bfec:	4603      	mov	r3, r0
 800bfee:	74fb      	strb	r3, [r7, #19]
 800bff0:	e001      	b.n	800bff6 <tcp_input+0x6e6>
 800bff2:	2300      	movs	r3, #0
 800bff4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bff6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bffa:	f113 0f0d 	cmn.w	r3, #13
 800bffe:	d016      	beq.n	800c02e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c000:	4b13      	ldr	r3, [pc, #76]	@ (800c050 <tcp_input+0x740>)
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c006:	69f8      	ldr	r0, [r7, #28]
 800c008:	f000 f88e 	bl	800c128 <tcp_input_delayed_close>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d128      	bne.n	800c064 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c012:	69f8      	ldr	r0, [r7, #28]
 800c014:	f002 fac2 	bl	800e59c <tcp_output>
 800c018:	e025      	b.n	800c066 <tcp_input+0x756>
        goto aborted;
 800c01a:	bf00      	nop
 800c01c:	e023      	b.n	800c066 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c01e:	bf00      	nop
 800c020:	e021      	b.n	800c066 <tcp_input+0x756>
              goto aborted;
 800c022:	bf00      	nop
 800c024:	e01f      	b.n	800c066 <tcp_input+0x756>
          goto aborted;
 800c026:	bf00      	nop
 800c028:	e01d      	b.n	800c066 <tcp_input+0x756>
            goto aborted;
 800c02a:	bf00      	nop
 800c02c:	e01b      	b.n	800c066 <tcp_input+0x756>
              goto aborted;
 800c02e:	bf00      	nop
 800c030:	e019      	b.n	800c066 <tcp_input+0x756>
 800c032:	bf00      	nop
 800c034:	20008a5c 	.word	0x20008a5c
 800c038:	20008a6c 	.word	0x20008a6c
 800c03c:	20008a8c 	.word	0x20008a8c
 800c040:	20008a89 	.word	0x20008a89
 800c044:	20008a84 	.word	0x20008a84
 800c048:	20008a88 	.word	0x20008a88
 800c04c:	20008a86 	.word	0x20008a86
 800c050:	20008a90 	.word	0x20008a90
 800c054:	20008a50 	.word	0x20008a50
 800c058:	080150cc 	.word	0x080150cc
 800c05c:	08015280 	.word	0x08015280
 800c060:	08015118 	.word	0x08015118
          goto aborted;
 800c064:	bf00      	nop
    tcp_input_pcb = NULL;
 800c066:	4b27      	ldr	r3, [pc, #156]	@ (800c104 <tcp_input+0x7f4>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c06c:	4b26      	ldr	r3, [pc, #152]	@ (800c108 <tcp_input+0x7f8>)
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c072:	4b26      	ldr	r3, [pc, #152]	@ (800c10c <tcp_input+0x7fc>)
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d03f      	beq.n	800c0fa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c07a:	4b24      	ldr	r3, [pc, #144]	@ (800c10c <tcp_input+0x7fc>)
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fd fe0c 	bl	8009c9c <pbuf_free>
      inseg.p = NULL;
 800c084:	4b21      	ldr	r3, [pc, #132]	@ (800c10c <tcp_input+0x7fc>)
 800c086:	2200      	movs	r2, #0
 800c088:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c08a:	e036      	b.n	800c0fa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c08c:	4b20      	ldr	r3, [pc, #128]	@ (800c110 <tcp_input+0x800>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	899b      	ldrh	r3, [r3, #12]
 800c092:	b29b      	uxth	r3, r3
 800c094:	4618      	mov	r0, r3
 800c096:	f7fc faa3 	bl	80085e0 <lwip_htons>
 800c09a:	4603      	mov	r3, r0
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	f003 0304 	and.w	r3, r3, #4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d118      	bne.n	800c0d8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0a6:	4b1b      	ldr	r3, [pc, #108]	@ (800c114 <tcp_input+0x804>)
 800c0a8:	6819      	ldr	r1, [r3, #0]
 800c0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c118 <tcp_input+0x808>)
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c11c <tcp_input+0x80c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0b6:	4b16      	ldr	r3, [pc, #88]	@ (800c110 <tcp_input+0x800>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ba:	885b      	ldrh	r3, [r3, #2]
 800c0bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0be:	4a14      	ldr	r2, [pc, #80]	@ (800c110 <tcp_input+0x800>)
 800c0c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0c2:	8812      	ldrh	r2, [r2, #0]
 800c0c4:	b292      	uxth	r2, r2
 800c0c6:	9202      	str	r2, [sp, #8]
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	4b15      	ldr	r3, [pc, #84]	@ (800c120 <tcp_input+0x810>)
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	4b15      	ldr	r3, [pc, #84]	@ (800c124 <tcp_input+0x814>)
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	f003 f816 	bl	800f104 <tcp_rst>
    pbuf_free(p);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7fd fddf 	bl	8009c9c <pbuf_free>
  return;
 800c0de:	e00c      	b.n	800c0fa <tcp_input+0x7ea>
    goto dropped;
 800c0e0:	bf00      	nop
 800c0e2:	e006      	b.n	800c0f2 <tcp_input+0x7e2>
    goto dropped;
 800c0e4:	bf00      	nop
 800c0e6:	e004      	b.n	800c0f2 <tcp_input+0x7e2>
    goto dropped;
 800c0e8:	bf00      	nop
 800c0ea:	e002      	b.n	800c0f2 <tcp_input+0x7e2>
      goto dropped;
 800c0ec:	bf00      	nop
 800c0ee:	e000      	b.n	800c0f2 <tcp_input+0x7e2>
      goto dropped;
 800c0f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7fd fdd2 	bl	8009c9c <pbuf_free>
 800c0f8:	e000      	b.n	800c0fc <tcp_input+0x7ec>
  return;
 800c0fa:	bf00      	nop
}
 800c0fc:	3724      	adds	r7, #36	@ 0x24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd90      	pop	{r4, r7, pc}
 800c102:	bf00      	nop
 800c104:	20008a90 	.word	0x20008a90
 800c108:	20008a8c 	.word	0x20008a8c
 800c10c:	20008a5c 	.word	0x20008a5c
 800c110:	20008a6c 	.word	0x20008a6c
 800c114:	20008a80 	.word	0x20008a80
 800c118:	20008a86 	.word	0x20008a86
 800c11c:	20008a7c 	.word	0x20008a7c
 800c120:	200054e4 	.word	0x200054e4
 800c124:	200054e8 	.word	0x200054e8

0800c128 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d106      	bne.n	800c144 <tcp_input_delayed_close+0x1c>
 800c136:	4b17      	ldr	r3, [pc, #92]	@ (800c194 <tcp_input_delayed_close+0x6c>)
 800c138:	f240 225a 	movw	r2, #602	@ 0x25a
 800c13c:	4916      	ldr	r1, [pc, #88]	@ (800c198 <tcp_input_delayed_close+0x70>)
 800c13e:	4817      	ldr	r0, [pc, #92]	@ (800c19c <tcp_input_delayed_close+0x74>)
 800c140:	f006 ff24 	bl	8012f8c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c144:	4b16      	ldr	r3, [pc, #88]	@ (800c1a0 <tcp_input_delayed_close+0x78>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	f003 0310 	and.w	r3, r3, #16
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01c      	beq.n	800c18a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	8b5b      	ldrh	r3, [r3, #26]
 800c154:	f003 0310 	and.w	r3, r3, #16
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10d      	bne.n	800c178 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c162:	2b00      	cmp	r3, #0
 800c164:	d008      	beq.n	800c178 <tcp_input_delayed_close+0x50>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	6912      	ldr	r2, [r2, #16]
 800c170:	f06f 010e 	mvn.w	r1, #14
 800c174:	4610      	mov	r0, r2
 800c176:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	480a      	ldr	r0, [pc, #40]	@ (800c1a4 <tcp_input_delayed_close+0x7c>)
 800c17c:	f7ff fa50 	bl	800b620 <tcp_pcb_remove>
    tcp_free(pcb);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7fe f83b 	bl	800a1fc <tcp_free>
    return 1;
 800c186:	2301      	movs	r3, #1
 800c188:	e000      	b.n	800c18c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	080150cc 	.word	0x080150cc
 800c198:	0801529c 	.word	0x0801529c
 800c19c:	08015118 	.word	0x08015118
 800c1a0:	20008a89 	.word	0x20008a89
 800c1a4:	20008a50 	.word	0x20008a50

0800c1a8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c1a8:	b590      	push	{r4, r7, lr}
 800c1aa:	b08b      	sub	sp, #44	@ 0x2c
 800c1ac:	af04      	add	r7, sp, #16
 800c1ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c1b0:	4b6f      	ldr	r3, [pc, #444]	@ (800c370 <tcp_listen_input+0x1c8>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f040 80d2 	bne.w	800c362 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d106      	bne.n	800c1d2 <tcp_listen_input+0x2a>
 800c1c4:	4b6b      	ldr	r3, [pc, #428]	@ (800c374 <tcp_listen_input+0x1cc>)
 800c1c6:	f240 2281 	movw	r2, #641	@ 0x281
 800c1ca:	496b      	ldr	r1, [pc, #428]	@ (800c378 <tcp_listen_input+0x1d0>)
 800c1cc:	486b      	ldr	r0, [pc, #428]	@ (800c37c <tcp_listen_input+0x1d4>)
 800c1ce:	f006 fedd 	bl	8012f8c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c1d2:	4b67      	ldr	r3, [pc, #412]	@ (800c370 <tcp_listen_input+0x1c8>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	f003 0310 	and.w	r3, r3, #16
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d019      	beq.n	800c212 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1de:	4b68      	ldr	r3, [pc, #416]	@ (800c380 <tcp_listen_input+0x1d8>)
 800c1e0:	6819      	ldr	r1, [r3, #0]
 800c1e2:	4b68      	ldr	r3, [pc, #416]	@ (800c384 <tcp_listen_input+0x1dc>)
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	4b67      	ldr	r3, [pc, #412]	@ (800c388 <tcp_listen_input+0x1e0>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1ee:	4b67      	ldr	r3, [pc, #412]	@ (800c38c <tcp_listen_input+0x1e4>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1f2:	885b      	ldrh	r3, [r3, #2]
 800c1f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1f6:	4a65      	ldr	r2, [pc, #404]	@ (800c38c <tcp_listen_input+0x1e4>)
 800c1f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1fa:	8812      	ldrh	r2, [r2, #0]
 800c1fc:	b292      	uxth	r2, r2
 800c1fe:	9202      	str	r2, [sp, #8]
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	4b63      	ldr	r3, [pc, #396]	@ (800c390 <tcp_listen_input+0x1e8>)
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	4b63      	ldr	r3, [pc, #396]	@ (800c394 <tcp_listen_input+0x1ec>)
 800c208:	4602      	mov	r2, r0
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f002 ff7a 	bl	800f104 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c210:	e0a9      	b.n	800c366 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c212:	4b57      	ldr	r3, [pc, #348]	@ (800c370 <tcp_listen_input+0x1c8>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	f003 0302 	and.w	r3, r3, #2
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f000 80a3 	beq.w	800c366 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	7d5b      	ldrb	r3, [r3, #21]
 800c224:	4618      	mov	r0, r3
 800c226:	f7ff f927 	bl	800b478 <tcp_alloc>
 800c22a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d111      	bne.n	800c256 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00a      	beq.n	800c250 <tcp_listen_input+0xa8>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	6910      	ldr	r0, [r2, #16]
 800c242:	f04f 32ff 	mov.w	r2, #4294967295
 800c246:	2100      	movs	r1, #0
 800c248:	4798      	blx	r3
 800c24a:	4603      	mov	r3, r0
 800c24c:	73bb      	strb	r3, [r7, #14]
      return;
 800c24e:	e08b      	b.n	800c368 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c250:	23f0      	movs	r3, #240	@ 0xf0
 800c252:	73bb      	strb	r3, [r7, #14]
      return;
 800c254:	e088      	b.n	800c368 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c256:	4b50      	ldr	r3, [pc, #320]	@ (800c398 <tcp_listen_input+0x1f0>)
 800c258:	695a      	ldr	r2, [r3, #20]
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c25e:	4b4e      	ldr	r3, [pc, #312]	@ (800c398 <tcp_listen_input+0x1f0>)
 800c260:	691a      	ldr	r2, [r3, #16]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	8ada      	ldrh	r2, [r3, #22]
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c26e:	4b47      	ldr	r3, [pc, #284]	@ (800c38c <tcp_listen_input+0x1e4>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	881b      	ldrh	r3, [r3, #0]
 800c274:	b29a      	uxth	r2, r3
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2203      	movs	r2, #3
 800c27e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c280:	4b41      	ldr	r3, [pc, #260]	@ (800c388 <tcp_listen_input+0x1e0>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800c292:	6978      	ldr	r0, [r7, #20]
 800c294:	f7ff fa58 	bl	800b748 <tcp_next_iss>
 800c298:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c2b2:	4b35      	ldr	r3, [pc, #212]	@ (800c388 <tcp_listen_input+0x1e0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	1e5a      	subs	r2, r3, #1
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	691a      	ldr	r2, [r3, #16]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7a5b      	ldrb	r3, [r3, #9]
 800c2ce:	f003 030c 	and.w	r3, r3, #12
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7a1a      	ldrb	r2, [r3, #8]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c2e0:	4b2e      	ldr	r3, [pc, #184]	@ (800c39c <tcp_listen_input+0x1f4>)
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	60da      	str	r2, [r3, #12]
 800c2e8:	4a2c      	ldr	r2, [pc, #176]	@ (800c39c <tcp_listen_input+0x1f4>)
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	f003 f8cb 	bl	800f488 <tcp_timer_needed>
 800c2f2:	4b2b      	ldr	r3, [pc, #172]	@ (800c3a0 <tcp_listen_input+0x1f8>)
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c2f8:	6978      	ldr	r0, [r7, #20]
 800c2fa:	f001 fd8b 	bl	800de14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c2fe:	4b23      	ldr	r3, [pc, #140]	@ (800c38c <tcp_listen_input+0x1e4>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	89db      	ldrh	r3, [r3, #14]
 800c304:	b29a      	uxth	r2, r3
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	3304      	adds	r3, #4
 800c320:	4618      	mov	r0, r3
 800c322:	f004 ff7f 	bl	8011224 <ip4_route>
 800c326:	4601      	mov	r1, r0
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	3304      	adds	r3, #4
 800c32c:	461a      	mov	r2, r3
 800c32e:	4620      	mov	r0, r4
 800c330:	f7ff fa30 	bl	800b794 <tcp_eff_send_mss_netif>
 800c334:	4603      	mov	r3, r0
 800c336:	461a      	mov	r2, r3
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c33c:	2112      	movs	r1, #18
 800c33e:	6978      	ldr	r0, [r7, #20]
 800c340:	f002 f83e 	bl	800e3c0 <tcp_enqueue_flags>
 800c344:	4603      	mov	r3, r0
 800c346:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d004      	beq.n	800c35a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c350:	2100      	movs	r1, #0
 800c352:	6978      	ldr	r0, [r7, #20]
 800c354:	f7fe f97c 	bl	800a650 <tcp_abandon>
      return;
 800c358:	e006      	b.n	800c368 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c35a:	6978      	ldr	r0, [r7, #20]
 800c35c:	f002 f91e 	bl	800e59c <tcp_output>
  return;
 800c360:	e001      	b.n	800c366 <tcp_listen_input+0x1be>
    return;
 800c362:	bf00      	nop
 800c364:	e000      	b.n	800c368 <tcp_listen_input+0x1c0>
  return;
 800c366:	bf00      	nop
}
 800c368:	371c      	adds	r7, #28
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd90      	pop	{r4, r7, pc}
 800c36e:	bf00      	nop
 800c370:	20008a88 	.word	0x20008a88
 800c374:	080150cc 	.word	0x080150cc
 800c378:	080152c4 	.word	0x080152c4
 800c37c:	08015118 	.word	0x08015118
 800c380:	20008a80 	.word	0x20008a80
 800c384:	20008a86 	.word	0x20008a86
 800c388:	20008a7c 	.word	0x20008a7c
 800c38c:	20008a6c 	.word	0x20008a6c
 800c390:	200054e4 	.word	0x200054e4
 800c394:	200054e8 	.word	0x200054e8
 800c398:	200054d4 	.word	0x200054d4
 800c39c:	20008a50 	.word	0x20008a50
 800c3a0:	20008a58 	.word	0x20008a58

0800c3a4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af04      	add	r7, sp, #16
 800c3aa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c3ac:	4b2f      	ldr	r3, [pc, #188]	@ (800c46c <tcp_timewait_input+0xc8>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d153      	bne.n	800c460 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d106      	bne.n	800c3cc <tcp_timewait_input+0x28>
 800c3be:	4b2c      	ldr	r3, [pc, #176]	@ (800c470 <tcp_timewait_input+0xcc>)
 800c3c0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c3c4:	492b      	ldr	r1, [pc, #172]	@ (800c474 <tcp_timewait_input+0xd0>)
 800c3c6:	482c      	ldr	r0, [pc, #176]	@ (800c478 <tcp_timewait_input+0xd4>)
 800c3c8:	f006 fde0 	bl	8012f8c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c3cc:	4b27      	ldr	r3, [pc, #156]	@ (800c46c <tcp_timewait_input+0xc8>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	f003 0302 	and.w	r3, r3, #2
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d02a      	beq.n	800c42e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c3d8:	4b28      	ldr	r3, [pc, #160]	@ (800c47c <tcp_timewait_input+0xd8>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	db2d      	blt.n	800c442 <tcp_timewait_input+0x9e>
 800c3e6:	4b25      	ldr	r3, [pc, #148]	@ (800c47c <tcp_timewait_input+0xd8>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c3f2:	440b      	add	r3, r1
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	dc23      	bgt.n	800c442 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3fa:	4b21      	ldr	r3, [pc, #132]	@ (800c480 <tcp_timewait_input+0xdc>)
 800c3fc:	6819      	ldr	r1, [r3, #0]
 800c3fe:	4b21      	ldr	r3, [pc, #132]	@ (800c484 <tcp_timewait_input+0xe0>)
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	4b1d      	ldr	r3, [pc, #116]	@ (800c47c <tcp_timewait_input+0xd8>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c40a:	4b1f      	ldr	r3, [pc, #124]	@ (800c488 <tcp_timewait_input+0xe4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c40e:	885b      	ldrh	r3, [r3, #2]
 800c410:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c412:	4a1d      	ldr	r2, [pc, #116]	@ (800c488 <tcp_timewait_input+0xe4>)
 800c414:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c416:	8812      	ldrh	r2, [r2, #0]
 800c418:	b292      	uxth	r2, r2
 800c41a:	9202      	str	r2, [sp, #8]
 800c41c:	9301      	str	r3, [sp, #4]
 800c41e:	4b1b      	ldr	r3, [pc, #108]	@ (800c48c <tcp_timewait_input+0xe8>)
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	4b1b      	ldr	r3, [pc, #108]	@ (800c490 <tcp_timewait_input+0xec>)
 800c424:	4602      	mov	r2, r0
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f002 fe6c 	bl	800f104 <tcp_rst>
      return;
 800c42c:	e01b      	b.n	800c466 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c42e:	4b0f      	ldr	r3, [pc, #60]	@ (800c46c <tcp_timewait_input+0xc8>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	f003 0301 	and.w	r3, r3, #1
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c43a:	4b16      	ldr	r3, [pc, #88]	@ (800c494 <tcp_timewait_input+0xf0>)
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c442:	4b10      	ldr	r3, [pc, #64]	@ (800c484 <tcp_timewait_input+0xe0>)
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00c      	beq.n	800c464 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	8b5b      	ldrh	r3, [r3, #26]
 800c44e:	f043 0302 	orr.w	r3, r3, #2
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f002 f89f 	bl	800e59c <tcp_output>
  }
  return;
 800c45e:	e001      	b.n	800c464 <tcp_timewait_input+0xc0>
    return;
 800c460:	bf00      	nop
 800c462:	e000      	b.n	800c466 <tcp_timewait_input+0xc2>
  return;
 800c464:	bf00      	nop
}
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20008a88 	.word	0x20008a88
 800c470:	080150cc 	.word	0x080150cc
 800c474:	080152e4 	.word	0x080152e4
 800c478:	08015118 	.word	0x08015118
 800c47c:	20008a7c 	.word	0x20008a7c
 800c480:	20008a80 	.word	0x20008a80
 800c484:	20008a86 	.word	0x20008a86
 800c488:	20008a6c 	.word	0x20008a6c
 800c48c:	200054e4 	.word	0x200054e4
 800c490:	200054e8 	.word	0x200054e8
 800c494:	20008a44 	.word	0x20008a44

0800c498 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c498:	b590      	push	{r4, r7, lr}
 800c49a:	b08d      	sub	sp, #52	@ 0x34
 800c49c:	af04      	add	r7, sp, #16
 800c49e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d106      	bne.n	800c4bc <tcp_process+0x24>
 800c4ae:	4b9d      	ldr	r3, [pc, #628]	@ (800c724 <tcp_process+0x28c>)
 800c4b0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c4b4:	499c      	ldr	r1, [pc, #624]	@ (800c728 <tcp_process+0x290>)
 800c4b6:	489d      	ldr	r0, [pc, #628]	@ (800c72c <tcp_process+0x294>)
 800c4b8:	f006 fd68 	bl	8012f8c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c4bc:	4b9c      	ldr	r3, [pc, #624]	@ (800c730 <tcp_process+0x298>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d04e      	beq.n	800c566 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	7d1b      	ldrb	r3, [r3, #20]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d108      	bne.n	800c4e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c4d4:	4b97      	ldr	r3, [pc, #604]	@ (800c734 <tcp_process+0x29c>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d123      	bne.n	800c524 <tcp_process+0x8c>
        acceptable = 1;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	76fb      	strb	r3, [r7, #27]
 800c4e0:	e020      	b.n	800c524 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4e6:	4b94      	ldr	r3, [pc, #592]	@ (800c738 <tcp_process+0x2a0>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d102      	bne.n	800c4f4 <tcp_process+0x5c>
        acceptable = 1;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	76fb      	strb	r3, [r7, #27]
 800c4f2:	e017      	b.n	800c524 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c4f4:	4b90      	ldr	r3, [pc, #576]	@ (800c738 <tcp_process+0x2a0>)
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	db10      	blt.n	800c524 <tcp_process+0x8c>
 800c502:	4b8d      	ldr	r3, [pc, #564]	@ (800c738 <tcp_process+0x2a0>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c50e:	440b      	add	r3, r1
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	dc06      	bgt.n	800c524 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	8b5b      	ldrh	r3, [r3, #26]
 800c51a:	f043 0302 	orr.w	r3, r3, #2
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c524:	7efb      	ldrb	r3, [r7, #27]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d01b      	beq.n	800c562 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	7d1b      	ldrb	r3, [r3, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <tcp_process+0xa8>
 800c532:	4b7c      	ldr	r3, [pc, #496]	@ (800c724 <tcp_process+0x28c>)
 800c534:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800c538:	4980      	ldr	r1, [pc, #512]	@ (800c73c <tcp_process+0x2a4>)
 800c53a:	487c      	ldr	r0, [pc, #496]	@ (800c72c <tcp_process+0x294>)
 800c53c:	f006 fd26 	bl	8012f8c <iprintf>
      recv_flags |= TF_RESET;
 800c540:	4b7f      	ldr	r3, [pc, #508]	@ (800c740 <tcp_process+0x2a8>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	f043 0308 	orr.w	r3, r3, #8
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	4b7d      	ldr	r3, [pc, #500]	@ (800c740 <tcp_process+0x2a8>)
 800c54c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	8b5b      	ldrh	r3, [r3, #26]
 800c552:	f023 0301 	bic.w	r3, r3, #1
 800c556:	b29a      	uxth	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c55c:	f06f 030d 	mvn.w	r3, #13
 800c560:	e37a      	b.n	800cc58 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	e378      	b.n	800cc58 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c566:	4b72      	ldr	r3, [pc, #456]	@ (800c730 <tcp_process+0x298>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d010      	beq.n	800c594 <tcp_process+0xfc>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	7d1b      	ldrb	r3, [r3, #20]
 800c576:	2b02      	cmp	r3, #2
 800c578:	d00c      	beq.n	800c594 <tcp_process+0xfc>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	7d1b      	ldrb	r3, [r3, #20]
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d008      	beq.n	800c594 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	8b5b      	ldrh	r3, [r3, #26]
 800c586:	f043 0302 	orr.w	r3, r3, #2
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	e361      	b.n	800cc58 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	8b5b      	ldrh	r3, [r3, #26]
 800c598:	f003 0310 	and.w	r3, r3, #16
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d103      	bne.n	800c5a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c5a0:	4b68      	ldr	r3, [pc, #416]	@ (800c744 <tcp_process+0x2ac>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f001 fc2b 	bl	800de14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7d1b      	ldrb	r3, [r3, #20]
 800c5c2:	3b02      	subs	r3, #2
 800c5c4:	2b07      	cmp	r3, #7
 800c5c6:	f200 8337 	bhi.w	800cc38 <tcp_process+0x7a0>
 800c5ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d0 <tcp_process+0x138>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c5f1 	.word	0x0800c5f1
 800c5d4:	0800c821 	.word	0x0800c821
 800c5d8:	0800c999 	.word	0x0800c999
 800c5dc:	0800c9c3 	.word	0x0800c9c3
 800c5e0:	0800cae7 	.word	0x0800cae7
 800c5e4:	0800c999 	.word	0x0800c999
 800c5e8:	0800cb73 	.word	0x0800cb73
 800c5ec:	0800cc03 	.word	0x0800cc03
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c5f0:	4b4f      	ldr	r3, [pc, #316]	@ (800c730 <tcp_process+0x298>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	f003 0310 	and.w	r3, r3, #16
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 80e4 	beq.w	800c7c6 <tcp_process+0x32e>
 800c5fe:	4b4c      	ldr	r3, [pc, #304]	@ (800c730 <tcp_process+0x298>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	f003 0302 	and.w	r3, r3, #2
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80dd 	beq.w	800c7c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	4b48      	ldr	r3, [pc, #288]	@ (800c734 <tcp_process+0x29c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	f040 80d5 	bne.w	800c7c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c61c:	4b46      	ldr	r3, [pc, #280]	@ (800c738 <tcp_process+0x2a0>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	1c5a      	adds	r2, r3, #1
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800c62e:	4b41      	ldr	r3, [pc, #260]	@ (800c734 <tcp_process+0x29c>)
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c636:	4b44      	ldr	r3, [pc, #272]	@ (800c748 <tcp_process+0x2b0>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	89db      	ldrh	r3, [r3, #14]
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c650:	4b39      	ldr	r3, [pc, #228]	@ (800c738 <tcp_process+0x2a0>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	1e5a      	subs	r2, r3, #1
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2204      	movs	r2, #4
 800c65e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3304      	adds	r3, #4
 800c668:	4618      	mov	r0, r3
 800c66a:	f004 fddb 	bl	8011224 <ip4_route>
 800c66e:	4601      	mov	r1, r0
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	3304      	adds	r3, #4
 800c674:	461a      	mov	r2, r3
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff f88c 	bl	800b794 <tcp_eff_send_mss_netif>
 800c67c:	4603      	mov	r3, r0
 800c67e:	461a      	mov	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c688:	009a      	lsls	r2, r3, #2
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c694:	428b      	cmp	r3, r1
 800c696:	bf38      	it	cc
 800c698:	460b      	movcc	r3, r1
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d204      	bcs.n	800c6a8 <tcp_process+0x210>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	e00d      	b.n	800c6c4 <tcp_process+0x22c>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d904      	bls.n	800c6c0 <tcp_process+0x228>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	e001      	b.n	800c6c4 <tcp_process+0x22c>
 800c6c0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d106      	bne.n	800c6e2 <tcp_process+0x24a>
 800c6d4:	4b13      	ldr	r3, [pc, #76]	@ (800c724 <tcp_process+0x28c>)
 800c6d6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800c6da:	491c      	ldr	r1, [pc, #112]	@ (800c74c <tcp_process+0x2b4>)
 800c6dc:	4813      	ldr	r0, [pc, #76]	@ (800c72c <tcp_process+0x294>)
 800c6de:	f006 fc55 	bl	8012f8c <iprintf>
        --pcb->snd_queuelen;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d12a      	bne.n	800c754 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c702:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d106      	bne.n	800c718 <tcp_process+0x280>
 800c70a:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <tcp_process+0x28c>)
 800c70c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800c710:	490f      	ldr	r1, [pc, #60]	@ (800c750 <tcp_process+0x2b8>)
 800c712:	4806      	ldr	r0, [pc, #24]	@ (800c72c <tcp_process+0x294>)
 800c714:	f006 fc3a 	bl	8012f8c <iprintf>
          pcb->unsent = rseg->next;
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c720:	e01c      	b.n	800c75c <tcp_process+0x2c4>
 800c722:	bf00      	nop
 800c724:	080150cc 	.word	0x080150cc
 800c728:	08015304 	.word	0x08015304
 800c72c:	08015118 	.word	0x08015118
 800c730:	20008a88 	.word	0x20008a88
 800c734:	20008a80 	.word	0x20008a80
 800c738:	20008a7c 	.word	0x20008a7c
 800c73c:	08015320 	.word	0x08015320
 800c740:	20008a89 	.word	0x20008a89
 800c744:	20008a44 	.word	0x20008a44
 800c748:	20008a6c 	.word	0x20008a6c
 800c74c:	08015340 	.word	0x08015340
 800c750:	08015358 	.word	0x08015358
        } else {
          pcb->unacked = rseg->next;
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800c75c:	69f8      	ldr	r0, [r7, #28]
 800c75e:	f7fe fd22 	bl	800b1a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c766:	2b00      	cmp	r3, #0
 800c768:	d104      	bne.n	800c774 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c770:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c772:	e006      	b.n	800c782 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00a      	beq.n	800c7a2 <tcp_process+0x30a>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6910      	ldr	r0, [r2, #16]
 800c796:	2200      	movs	r2, #0
 800c798:	6879      	ldr	r1, [r7, #4]
 800c79a:	4798      	blx	r3
 800c79c:	4603      	mov	r3, r0
 800c79e:	76bb      	strb	r3, [r7, #26]
 800c7a0:	e001      	b.n	800c7a6 <tcp_process+0x30e>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c7a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c7aa:	f113 0f0d 	cmn.w	r3, #13
 800c7ae:	d102      	bne.n	800c7b6 <tcp_process+0x31e>
          return ERR_ABRT;
 800c7b0:	f06f 030c 	mvn.w	r3, #12
 800c7b4:	e250      	b.n	800cc58 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	8b5b      	ldrh	r3, [r3, #26]
 800c7ba:	f043 0302 	orr.w	r3, r3, #2
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c7c4:	e23a      	b.n	800cc3c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c7c6:	4b98      	ldr	r3, [pc, #608]	@ (800ca28 <tcp_process+0x590>)
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	f003 0310 	and.w	r3, r3, #16
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 8234 	beq.w	800cc3c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7d4:	4b95      	ldr	r3, [pc, #596]	@ (800ca2c <tcp_process+0x594>)
 800c7d6:	6819      	ldr	r1, [r3, #0]
 800c7d8:	4b95      	ldr	r3, [pc, #596]	@ (800ca30 <tcp_process+0x598>)
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	4b95      	ldr	r3, [pc, #596]	@ (800ca34 <tcp_process+0x59c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7e4:	4b94      	ldr	r3, [pc, #592]	@ (800ca38 <tcp_process+0x5a0>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7e8:	885b      	ldrh	r3, [r3, #2]
 800c7ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7ec:	4a92      	ldr	r2, [pc, #584]	@ (800ca38 <tcp_process+0x5a0>)
 800c7ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7f0:	8812      	ldrh	r2, [r2, #0]
 800c7f2:	b292      	uxth	r2, r2
 800c7f4:	9202      	str	r2, [sp, #8]
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	4b90      	ldr	r3, [pc, #576]	@ (800ca3c <tcp_process+0x5a4>)
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	4b90      	ldr	r3, [pc, #576]	@ (800ca40 <tcp_process+0x5a8>)
 800c7fe:	4602      	mov	r2, r0
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f002 fc7f 	bl	800f104 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c80c:	2b05      	cmp	r3, #5
 800c80e:	f200 8215 	bhi.w	800cc3c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f002 fa4b 	bl	800ecb4 <tcp_rexmit_rto>
      break;
 800c81e:	e20d      	b.n	800cc3c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c820:	4b81      	ldr	r3, [pc, #516]	@ (800ca28 <tcp_process+0x590>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	f003 0310 	and.w	r3, r3, #16
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 80a1 	beq.w	800c970 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c82e:	4b7f      	ldr	r3, [pc, #508]	@ (800ca2c <tcp_process+0x594>)
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	3b01      	subs	r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	db7e      	blt.n	800c93c <tcp_process+0x4a4>
 800c83e:	4b7b      	ldr	r3, [pc, #492]	@ (800ca2c <tcp_process+0x594>)
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	2b00      	cmp	r3, #0
 800c84a:	dc77      	bgt.n	800c93c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2204      	movs	r2, #4
 800c850:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c856:	2b00      	cmp	r3, #0
 800c858:	d102      	bne.n	800c860 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c85a:	23fa      	movs	r3, #250	@ 0xfa
 800c85c:	76bb      	strb	r3, [r7, #26]
 800c85e:	e01d      	b.n	800c89c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <tcp_process+0x3e0>
 800c86a:	4b76      	ldr	r3, [pc, #472]	@ (800ca44 <tcp_process+0x5ac>)
 800c86c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800c870:	4975      	ldr	r1, [pc, #468]	@ (800ca48 <tcp_process+0x5b0>)
 800c872:	4876      	ldr	r0, [pc, #472]	@ (800ca4c <tcp_process+0x5b4>)
 800c874:	f006 fb8a 	bl	8012f8c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00a      	beq.n	800c898 <tcp_process+0x400>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c886:	699b      	ldr	r3, [r3, #24]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	6910      	ldr	r0, [r2, #16]
 800c88c:	2200      	movs	r2, #0
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	4798      	blx	r3
 800c892:	4603      	mov	r3, r0
 800c894:	76bb      	strb	r3, [r7, #26]
 800c896:	e001      	b.n	800c89c <tcp_process+0x404>
 800c898:	23f0      	movs	r3, #240	@ 0xf0
 800c89a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c89c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00a      	beq.n	800c8ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c8a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c8a8:	f113 0f0d 	cmn.w	r3, #13
 800c8ac:	d002      	beq.n	800c8b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7fd ff8c 	bl	800a7cc <tcp_abort>
            }
            return ERR_ABRT;
 800c8b4:	f06f 030c 	mvn.w	r3, #12
 800c8b8:	e1ce      	b.n	800cc58 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fae0 	bl	800ce80 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c8c0:	4b63      	ldr	r3, [pc, #396]	@ (800ca50 <tcp_process+0x5b8>)
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <tcp_process+0x43c>
            recv_acked--;
 800c8c8:	4b61      	ldr	r3, [pc, #388]	@ (800ca50 <tcp_process+0x5b8>)
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	4b5f      	ldr	r3, [pc, #380]	@ (800ca50 <tcp_process+0x5b8>)
 800c8d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8d8:	009a      	lsls	r2, r3, #2
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c8e4:	428b      	cmp	r3, r1
 800c8e6:	bf38      	it	cc
 800c8e8:	460b      	movcc	r3, r1
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d204      	bcs.n	800c8f8 <tcp_process+0x460>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	e00d      	b.n	800c914 <tcp_process+0x47c>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c902:	4293      	cmp	r3, r2
 800c904:	d904      	bls.n	800c910 <tcp_process+0x478>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	e001      	b.n	800c914 <tcp_process+0x47c>
 800c910:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c91a:	4b4e      	ldr	r3, [pc, #312]	@ (800ca54 <tcp_process+0x5bc>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	f003 0320 	and.w	r3, r3, #32
 800c922:	2b00      	cmp	r3, #0
 800c924:	d037      	beq.n	800c996 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	8b5b      	ldrh	r3, [r3, #26]
 800c92a:	f043 0302 	orr.w	r3, r3, #2
 800c92e:	b29a      	uxth	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2207      	movs	r2, #7
 800c938:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c93a:	e02c      	b.n	800c996 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c93c:	4b3b      	ldr	r3, [pc, #236]	@ (800ca2c <tcp_process+0x594>)
 800c93e:	6819      	ldr	r1, [r3, #0]
 800c940:	4b3b      	ldr	r3, [pc, #236]	@ (800ca30 <tcp_process+0x598>)
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	461a      	mov	r2, r3
 800c946:	4b3b      	ldr	r3, [pc, #236]	@ (800ca34 <tcp_process+0x59c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c94c:	4b3a      	ldr	r3, [pc, #232]	@ (800ca38 <tcp_process+0x5a0>)
 800c94e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c950:	885b      	ldrh	r3, [r3, #2]
 800c952:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c954:	4a38      	ldr	r2, [pc, #224]	@ (800ca38 <tcp_process+0x5a0>)
 800c956:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c958:	8812      	ldrh	r2, [r2, #0]
 800c95a:	b292      	uxth	r2, r2
 800c95c:	9202      	str	r2, [sp, #8]
 800c95e:	9301      	str	r3, [sp, #4]
 800c960:	4b36      	ldr	r3, [pc, #216]	@ (800ca3c <tcp_process+0x5a4>)
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	4b36      	ldr	r3, [pc, #216]	@ (800ca40 <tcp_process+0x5a8>)
 800c966:	4602      	mov	r2, r0
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f002 fbcb 	bl	800f104 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c96e:	e167      	b.n	800cc40 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c970:	4b2d      	ldr	r3, [pc, #180]	@ (800ca28 <tcp_process+0x590>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	f003 0302 	and.w	r3, r3, #2
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 8161 	beq.w	800cc40 <tcp_process+0x7a8>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c982:	1e5a      	subs	r2, r3, #1
 800c984:	4b2b      	ldr	r3, [pc, #172]	@ (800ca34 <tcp_process+0x59c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	f040 8159 	bne.w	800cc40 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f002 f9b2 	bl	800ecf8 <tcp_rexmit>
      break;
 800c994:	e154      	b.n	800cc40 <tcp_process+0x7a8>
 800c996:	e153      	b.n	800cc40 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fa71 	bl	800ce80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c99e:	4b2d      	ldr	r3, [pc, #180]	@ (800ca54 <tcp_process+0x5bc>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	f003 0320 	and.w	r3, r3, #32
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f000 814c 	beq.w	800cc44 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	8b5b      	ldrh	r3, [r3, #26]
 800c9b0:	f043 0302 	orr.w	r3, r3, #2
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2207      	movs	r2, #7
 800c9be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9c0:	e140      	b.n	800cc44 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fa5c 	bl	800ce80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c9c8:	4b22      	ldr	r3, [pc, #136]	@ (800ca54 <tcp_process+0x5bc>)
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	f003 0320 	and.w	r3, r3, #32
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d071      	beq.n	800cab8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9d4:	4b14      	ldr	r3, [pc, #80]	@ (800ca28 <tcp_process+0x590>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	f003 0310 	and.w	r3, r3, #16
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d060      	beq.n	800caa2 <tcp_process+0x60a>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c9e4:	4b11      	ldr	r3, [pc, #68]	@ (800ca2c <tcp_process+0x594>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d15a      	bne.n	800caa2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d156      	bne.n	800caa2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	8b5b      	ldrh	r3, [r3, #26]
 800c9f8:	f043 0302 	orr.w	r3, r3, #2
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fe fdbc 	bl	800b580 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ca08:	4b13      	ldr	r3, [pc, #76]	@ (800ca58 <tcp_process+0x5c0>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d105      	bne.n	800ca1e <tcp_process+0x586>
 800ca12:	4b11      	ldr	r3, [pc, #68]	@ (800ca58 <tcp_process+0x5c0>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	4a0f      	ldr	r2, [pc, #60]	@ (800ca58 <tcp_process+0x5c0>)
 800ca1a:	6013      	str	r3, [r2, #0]
 800ca1c:	e02e      	b.n	800ca7c <tcp_process+0x5e4>
 800ca1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ca58 <tcp_process+0x5c0>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	617b      	str	r3, [r7, #20]
 800ca24:	e027      	b.n	800ca76 <tcp_process+0x5de>
 800ca26:	bf00      	nop
 800ca28:	20008a88 	.word	0x20008a88
 800ca2c:	20008a80 	.word	0x20008a80
 800ca30:	20008a86 	.word	0x20008a86
 800ca34:	20008a7c 	.word	0x20008a7c
 800ca38:	20008a6c 	.word	0x20008a6c
 800ca3c:	200054e4 	.word	0x200054e4
 800ca40:	200054e8 	.word	0x200054e8
 800ca44:	080150cc 	.word	0x080150cc
 800ca48:	0801536c 	.word	0x0801536c
 800ca4c:	08015118 	.word	0x08015118
 800ca50:	20008a84 	.word	0x20008a84
 800ca54:	20008a89 	.word	0x20008a89
 800ca58:	20008a50 	.word	0x20008a50
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d104      	bne.n	800ca70 <tcp_process+0x5d8>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68da      	ldr	r2, [r3, #12]
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	60da      	str	r2, [r3, #12]
 800ca6e:	e005      	b.n	800ca7c <tcp_process+0x5e4>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	617b      	str	r3, [r7, #20]
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1ef      	bne.n	800ca5c <tcp_process+0x5c4>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	60da      	str	r2, [r3, #12]
 800ca82:	4b77      	ldr	r3, [pc, #476]	@ (800cc60 <tcp_process+0x7c8>)
 800ca84:	2201      	movs	r2, #1
 800ca86:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	220a      	movs	r2, #10
 800ca8c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ca8e:	4b75      	ldr	r3, [pc, #468]	@ (800cc64 <tcp_process+0x7cc>)
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	60da      	str	r2, [r3, #12]
 800ca96:	4a73      	ldr	r2, [pc, #460]	@ (800cc64 <tcp_process+0x7cc>)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	f002 fcf4 	bl	800f488 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800caa0:	e0d2      	b.n	800cc48 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	8b5b      	ldrh	r3, [r3, #26]
 800caa6:	f043 0302 	orr.w	r3, r3, #2
 800caaa:	b29a      	uxth	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2208      	movs	r2, #8
 800cab4:	751a      	strb	r2, [r3, #20]
      break;
 800cab6:	e0c7      	b.n	800cc48 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cab8:	4b6b      	ldr	r3, [pc, #428]	@ (800cc68 <tcp_process+0x7d0>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f003 0310 	and.w	r3, r3, #16
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 80c1 	beq.w	800cc48 <tcp_process+0x7b0>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800caca:	4b68      	ldr	r3, [pc, #416]	@ (800cc6c <tcp_process+0x7d4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	429a      	cmp	r2, r3
 800cad0:	f040 80ba 	bne.w	800cc48 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f040 80b5 	bne.w	800cc48 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2206      	movs	r2, #6
 800cae2:	751a      	strb	r2, [r3, #20]
      break;
 800cae4:	e0b0      	b.n	800cc48 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f9ca 	bl	800ce80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800caec:	4b60      	ldr	r3, [pc, #384]	@ (800cc70 <tcp_process+0x7d8>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	f003 0320 	and.w	r3, r3, #32
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 80a9 	beq.w	800cc4c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	8b5b      	ldrh	r3, [r3, #26]
 800cafe:	f043 0302 	orr.w	r3, r3, #2
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7fe fd39 	bl	800b580 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cb0e:	4b59      	ldr	r3, [pc, #356]	@ (800cc74 <tcp_process+0x7dc>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d105      	bne.n	800cb24 <tcp_process+0x68c>
 800cb18:	4b56      	ldr	r3, [pc, #344]	@ (800cc74 <tcp_process+0x7dc>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	4a55      	ldr	r2, [pc, #340]	@ (800cc74 <tcp_process+0x7dc>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	e013      	b.n	800cb4c <tcp_process+0x6b4>
 800cb24:	4b53      	ldr	r3, [pc, #332]	@ (800cc74 <tcp_process+0x7dc>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	613b      	str	r3, [r7, #16]
 800cb2a:	e00c      	b.n	800cb46 <tcp_process+0x6ae>
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d104      	bne.n	800cb40 <tcp_process+0x6a8>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	68da      	ldr	r2, [r3, #12]
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	60da      	str	r2, [r3, #12]
 800cb3e:	e005      	b.n	800cb4c <tcp_process+0x6b4>
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	613b      	str	r3, [r7, #16]
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1ef      	bne.n	800cb2c <tcp_process+0x694>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	60da      	str	r2, [r3, #12]
 800cb52:	4b43      	ldr	r3, [pc, #268]	@ (800cc60 <tcp_process+0x7c8>)
 800cb54:	2201      	movs	r2, #1
 800cb56:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	220a      	movs	r2, #10
 800cb5c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cb5e:	4b41      	ldr	r3, [pc, #260]	@ (800cc64 <tcp_process+0x7cc>)
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	60da      	str	r2, [r3, #12]
 800cb66:	4a3f      	ldr	r2, [pc, #252]	@ (800cc64 <tcp_process+0x7cc>)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	f002 fc8c 	bl	800f488 <tcp_timer_needed>
      }
      break;
 800cb70:	e06c      	b.n	800cc4c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 f984 	bl	800ce80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cb78:	4b3b      	ldr	r3, [pc, #236]	@ (800cc68 <tcp_process+0x7d0>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	f003 0310 	and.w	r3, r3, #16
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d065      	beq.n	800cc50 <tcp_process+0x7b8>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb88:	4b38      	ldr	r3, [pc, #224]	@ (800cc6c <tcp_process+0x7d4>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d15f      	bne.n	800cc50 <tcp_process+0x7b8>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d15b      	bne.n	800cc50 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7fe fcf1 	bl	800b580 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cb9e:	4b35      	ldr	r3, [pc, #212]	@ (800cc74 <tcp_process+0x7dc>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d105      	bne.n	800cbb4 <tcp_process+0x71c>
 800cba8:	4b32      	ldr	r3, [pc, #200]	@ (800cc74 <tcp_process+0x7dc>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	4a31      	ldr	r2, [pc, #196]	@ (800cc74 <tcp_process+0x7dc>)
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	e013      	b.n	800cbdc <tcp_process+0x744>
 800cbb4:	4b2f      	ldr	r3, [pc, #188]	@ (800cc74 <tcp_process+0x7dc>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	60fb      	str	r3, [r7, #12]
 800cbba:	e00c      	b.n	800cbd6 <tcp_process+0x73e>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d104      	bne.n	800cbd0 <tcp_process+0x738>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68da      	ldr	r2, [r3, #12]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	60da      	str	r2, [r3, #12]
 800cbce:	e005      	b.n	800cbdc <tcp_process+0x744>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1ef      	bne.n	800cbbc <tcp_process+0x724>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	60da      	str	r2, [r3, #12]
 800cbe2:	4b1f      	ldr	r3, [pc, #124]	@ (800cc60 <tcp_process+0x7c8>)
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	220a      	movs	r2, #10
 800cbec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cbee:	4b1d      	ldr	r3, [pc, #116]	@ (800cc64 <tcp_process+0x7cc>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	60da      	str	r2, [r3, #12]
 800cbf6:	4a1b      	ldr	r2, [pc, #108]	@ (800cc64 <tcp_process+0x7cc>)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	f002 fc44 	bl	800f488 <tcp_timer_needed>
      }
      break;
 800cc00:	e026      	b.n	800cc50 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f93c 	bl	800ce80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cc08:	4b17      	ldr	r3, [pc, #92]	@ (800cc68 <tcp_process+0x7d0>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	f003 0310 	and.w	r3, r3, #16
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01f      	beq.n	800cc54 <tcp_process+0x7bc>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc18:	4b14      	ldr	r3, [pc, #80]	@ (800cc6c <tcp_process+0x7d4>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d119      	bne.n	800cc54 <tcp_process+0x7bc>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d115      	bne.n	800cc54 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cc28:	4b11      	ldr	r3, [pc, #68]	@ (800cc70 <tcp_process+0x7d8>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	f043 0310 	orr.w	r3, r3, #16
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	4b0f      	ldr	r3, [pc, #60]	@ (800cc70 <tcp_process+0x7d8>)
 800cc34:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cc36:	e00d      	b.n	800cc54 <tcp_process+0x7bc>
    default:
      break;
 800cc38:	bf00      	nop
 800cc3a:	e00c      	b.n	800cc56 <tcp_process+0x7be>
      break;
 800cc3c:	bf00      	nop
 800cc3e:	e00a      	b.n	800cc56 <tcp_process+0x7be>
      break;
 800cc40:	bf00      	nop
 800cc42:	e008      	b.n	800cc56 <tcp_process+0x7be>
      break;
 800cc44:	bf00      	nop
 800cc46:	e006      	b.n	800cc56 <tcp_process+0x7be>
      break;
 800cc48:	bf00      	nop
 800cc4a:	e004      	b.n	800cc56 <tcp_process+0x7be>
      break;
 800cc4c:	bf00      	nop
 800cc4e:	e002      	b.n	800cc56 <tcp_process+0x7be>
      break;
 800cc50:	bf00      	nop
 800cc52:	e000      	b.n	800cc56 <tcp_process+0x7be>
      break;
 800cc54:	bf00      	nop
  }
  return ERR_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3724      	adds	r7, #36	@ 0x24
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd90      	pop	{r4, r7, pc}
 800cc60:	20008a58 	.word	0x20008a58
 800cc64:	20008a54 	.word	0x20008a54
 800cc68:	20008a88 	.word	0x20008a88
 800cc6c:	20008a80 	.word	0x20008a80
 800cc70:	20008a89 	.word	0x20008a89
 800cc74:	20008a50 	.word	0x20008a50

0800cc78 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cc78:	b590      	push	{r4, r7, lr}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d106      	bne.n	800cc96 <tcp_oos_insert_segment+0x1e>
 800cc88:	4b3b      	ldr	r3, [pc, #236]	@ (800cd78 <tcp_oos_insert_segment+0x100>)
 800cc8a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800cc8e:	493b      	ldr	r1, [pc, #236]	@ (800cd7c <tcp_oos_insert_segment+0x104>)
 800cc90:	483b      	ldr	r0, [pc, #236]	@ (800cd80 <tcp_oos_insert_segment+0x108>)
 800cc92:	f006 f97b 	bl	8012f8c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	899b      	ldrh	r3, [r3, #12]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fb fc9e 	bl	80085e0 <lwip_htons>
 800cca4:	4603      	mov	r3, r0
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d028      	beq.n	800cd02 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ccb0:	6838      	ldr	r0, [r7, #0]
 800ccb2:	f7fe fa63 	bl	800b17c <tcp_segs_free>
    next = NULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	603b      	str	r3, [r7, #0]
 800ccba:	e056      	b.n	800cd6a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	899b      	ldrh	r3, [r3, #12]
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fb fc8b 	bl	80085e0 <lwip_htons>
 800ccca:	4603      	mov	r3, r0
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 0301 	and.w	r3, r3, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00d      	beq.n	800ccf2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	899b      	ldrh	r3, [r3, #12]
 800ccdc:	b29c      	uxth	r4, r3
 800ccde:	2001      	movs	r0, #1
 800cce0:	f7fb fc7e 	bl	80085e0 <lwip_htons>
 800cce4:	4603      	mov	r3, r0
 800cce6:	461a      	mov	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	4322      	orrs	r2, r4
 800ccee:	b292      	uxth	r2, r2
 800ccf0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7fe fa52 	bl	800b1a6 <tcp_seg_free>
    while (next &&
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00e      	beq.n	800cd26 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	891b      	ldrh	r3, [r3, #8]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	4b1d      	ldr	r3, [pc, #116]	@ (800cd84 <tcp_oos_insert_segment+0x10c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	441a      	add	r2, r3
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	8909      	ldrh	r1, [r1, #8]
 800cd1e:	440b      	add	r3, r1
 800cd20:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	daca      	bge.n	800ccbc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d01e      	beq.n	800cd6a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	891b      	ldrh	r3, [r3, #8]
 800cd30:	461a      	mov	r2, r3
 800cd32:	4b14      	ldr	r3, [pc, #80]	@ (800cd84 <tcp_oos_insert_segment+0x10c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	441a      	add	r2, r3
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	dd12      	ble.n	800cd6a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd84 <tcp_oos_insert_segment+0x10c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	891b      	ldrh	r3, [r3, #8]
 800cd62:	4619      	mov	r1, r3
 800cd64:	4610      	mov	r0, r2
 800cd66:	f7fc fe13 	bl	8009990 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	601a      	str	r2, [r3, #0]
}
 800cd70:	bf00      	nop
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd90      	pop	{r4, r7, pc}
 800cd78:	080150cc 	.word	0x080150cc
 800cd7c:	0801538c 	.word	0x0801538c
 800cd80:	08015118 	.word	0x08015118
 800cd84:	20008a7c 	.word	0x20008a7c

0800cd88 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cd88:	b5b0      	push	{r4, r5, r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cd96:	e03e      	b.n	800ce16 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fd f800 	bl	8009dac <pbuf_clen>
 800cdac:	4603      	mov	r3, r0
 800cdae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdb6:	8a7a      	ldrh	r2, [r7, #18]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d906      	bls.n	800cdca <tcp_free_acked_segments+0x42>
 800cdbc:	4b2a      	ldr	r3, [pc, #168]	@ (800ce68 <tcp_free_acked_segments+0xe0>)
 800cdbe:	f240 4257 	movw	r2, #1111	@ 0x457
 800cdc2:	492a      	ldr	r1, [pc, #168]	@ (800ce6c <tcp_free_acked_segments+0xe4>)
 800cdc4:	482a      	ldr	r0, [pc, #168]	@ (800ce70 <tcp_free_acked_segments+0xe8>)
 800cdc6:	f006 f8e1 	bl	8012f8c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800cdd0:	8a7b      	ldrh	r3, [r7, #18]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	891a      	ldrh	r2, [r3, #8]
 800cde0:	4b24      	ldr	r3, [pc, #144]	@ (800ce74 <tcp_free_acked_segments+0xec>)
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	4413      	add	r3, r2
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	4b22      	ldr	r3, [pc, #136]	@ (800ce74 <tcp_free_acked_segments+0xec>)
 800cdea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cdec:	6978      	ldr	r0, [r7, #20]
 800cdee:	f7fe f9da 	bl	800b1a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00c      	beq.n	800ce16 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d109      	bne.n	800ce16 <tcp_free_acked_segments+0x8e>
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <tcp_free_acked_segments+0x8e>
 800ce08:	4b17      	ldr	r3, [pc, #92]	@ (800ce68 <tcp_free_acked_segments+0xe0>)
 800ce0a:	f240 4261 	movw	r2, #1121	@ 0x461
 800ce0e:	491a      	ldr	r1, [pc, #104]	@ (800ce78 <tcp_free_acked_segments+0xf0>)
 800ce10:	4817      	ldr	r0, [pc, #92]	@ (800ce70 <tcp_free_acked_segments+0xe8>)
 800ce12:	f006 f8bb 	bl	8012f8c <iprintf>
  while (seg_list != NULL &&
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d020      	beq.n	800ce5e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fb fbf1 	bl	800860a <lwip_htonl>
 800ce28:	4604      	mov	r4, r0
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	891b      	ldrh	r3, [r3, #8]
 800ce2e:	461d      	mov	r5, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	899b      	ldrh	r3, [r3, #12]
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fb fbd1 	bl	80085e0 <lwip_htons>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	f003 0303 	and.w	r3, r3, #3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <tcp_free_acked_segments+0xc6>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e000      	b.n	800ce50 <tcp_free_acked_segments+0xc8>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	442b      	add	r3, r5
 800ce52:	18e2      	adds	r2, r4, r3
 800ce54:	4b09      	ldr	r3, [pc, #36]	@ (800ce7c <tcp_free_acked_segments+0xf4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	dd9c      	ble.n	800cd98 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bdb0      	pop	{r4, r5, r7, pc}
 800ce68:	080150cc 	.word	0x080150cc
 800ce6c:	080153b4 	.word	0x080153b4
 800ce70:	08015118 	.word	0x08015118
 800ce74:	20008a84 	.word	0x20008a84
 800ce78:	080153dc 	.word	0x080153dc
 800ce7c:	20008a80 	.word	0x20008a80

0800ce80 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ce80:	b5b0      	push	{r4, r5, r7, lr}
 800ce82:	b094      	sub	sp, #80	@ 0x50
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d106      	bne.n	800cea0 <tcp_receive+0x20>
 800ce92:	4b91      	ldr	r3, [pc, #580]	@ (800d0d8 <tcp_receive+0x258>)
 800ce94:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ce98:	4990      	ldr	r1, [pc, #576]	@ (800d0dc <tcp_receive+0x25c>)
 800ce9a:	4891      	ldr	r0, [pc, #580]	@ (800d0e0 <tcp_receive+0x260>)
 800ce9c:	f006 f876 	bl	8012f8c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	7d1b      	ldrb	r3, [r3, #20]
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d806      	bhi.n	800ceb6 <tcp_receive+0x36>
 800cea8:	4b8b      	ldr	r3, [pc, #556]	@ (800d0d8 <tcp_receive+0x258>)
 800ceaa:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ceae:	498d      	ldr	r1, [pc, #564]	@ (800d0e4 <tcp_receive+0x264>)
 800ceb0:	488b      	ldr	r0, [pc, #556]	@ (800d0e0 <tcp_receive+0x260>)
 800ceb2:	f006 f86b 	bl	8012f8c <iprintf>

  if (flags & TCP_ACK) {
 800ceb6:	4b8c      	ldr	r3, [pc, #560]	@ (800d0e8 <tcp_receive+0x268>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	f003 0310 	and.w	r3, r3, #16
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 8264 	beq.w	800d38c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ceca:	461a      	mov	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ced0:	4413      	add	r3, r2
 800ced2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ced8:	4b84      	ldr	r3, [pc, #528]	@ (800d0ec <tcp_receive+0x26c>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	db1b      	blt.n	800cf1a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cee6:	4b81      	ldr	r3, [pc, #516]	@ (800d0ec <tcp_receive+0x26c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d106      	bne.n	800cefc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cef2:	4b7f      	ldr	r3, [pc, #508]	@ (800d0f0 <tcp_receive+0x270>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	db0e      	blt.n	800cf1a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cf00:	4b7b      	ldr	r3, [pc, #492]	@ (800d0f0 <tcp_receive+0x270>)
 800cf02:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d125      	bne.n	800cf54 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cf08:	4b7a      	ldr	r3, [pc, #488]	@ (800d0f4 <tcp_receive+0x274>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	89db      	ldrh	r3, [r3, #14]
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d91c      	bls.n	800cf54 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cf1a:	4b76      	ldr	r3, [pc, #472]	@ (800d0f4 <tcp_receive+0x274>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	89db      	ldrh	r3, [r3, #14]
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d205      	bcs.n	800cf44 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800cf44:	4b69      	ldr	r3, [pc, #420]	@ (800d0ec <tcp_receive+0x26c>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800cf4c:	4b68      	ldr	r3, [pc, #416]	@ (800d0f0 <tcp_receive+0x270>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cf54:	4b66      	ldr	r3, [pc, #408]	@ (800d0f0 <tcp_receive+0x270>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	dc58      	bgt.n	800d014 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cf62:	4b65      	ldr	r3, [pc, #404]	@ (800d0f8 <tcp_receive+0x278>)
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d14b      	bne.n	800d002 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800cf74:	4413      	add	r3, r2
 800cf76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d142      	bne.n	800d002 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	db3d      	blt.n	800d002 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf8a:	4b59      	ldr	r3, [pc, #356]	@ (800d0f0 <tcp_receive+0x270>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d137      	bne.n	800d002 <tcp_receive+0x182>
              found_dupack = 1;
 800cf92:	2301      	movs	r3, #1
 800cf94:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cf9c:	2bff      	cmp	r3, #255	@ 0xff
 800cf9e:	d007      	beq.n	800cfb0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d91b      	bls.n	800cff2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfc4:	4413      	add	r3, r2
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d30a      	bcc.n	800cfe8 <tcp_receive+0x168>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfdc:	4413      	add	r3, r2
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800cfe6:	e004      	b.n	800cff2 <tcp_receive+0x172>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cfee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d902      	bls.n	800d002 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 fee7 	bl	800edd0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d004:	2b00      	cmp	r3, #0
 800d006:	f040 8161 	bne.w	800d2cc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d012:	e15b      	b.n	800d2cc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d014:	4b36      	ldr	r3, [pc, #216]	@ (800d0f0 <tcp_receive+0x270>)
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	3b01      	subs	r3, #1
 800d020:	2b00      	cmp	r3, #0
 800d022:	f2c0 814e 	blt.w	800d2c2 <tcp_receive+0x442>
 800d026:	4b32      	ldr	r3, [pc, #200]	@ (800d0f0 <tcp_receive+0x270>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	2b00      	cmp	r3, #0
 800d032:	f300 8146 	bgt.w	800d2c2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	8b5b      	ldrh	r3, [r3, #26]
 800d03a:	f003 0304 	and.w	r3, r3, #4
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d010      	beq.n	800d064 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	8b5b      	ldrh	r3, [r3, #26]
 800d046:	f023 0304 	bic.w	r3, r3, #4
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d072:	10db      	asrs	r3, r3, #3
 800d074:	b21b      	sxth	r3, r3
 800d076:	b29a      	uxth	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d07e:	b29b      	uxth	r3, r3
 800d080:	4413      	add	r3, r2
 800d082:	b29b      	uxth	r3, r3
 800d084:	b21a      	sxth	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d08c:	4b18      	ldr	r3, [pc, #96]	@ (800d0f0 <tcp_receive+0x270>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	b29a      	uxth	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d096:	b29b      	uxth	r3, r3
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d0a4:	4b12      	ldr	r3, [pc, #72]	@ (800d0f0 <tcp_receive+0x270>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	7d1b      	ldrb	r3, [r3, #20]
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	f240 8097 	bls.w	800d1e4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d245      	bcs.n	800d152 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	8b5b      	ldrh	r3, [r3, #26]
 800d0ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d014      	beq.n	800d0fc <tcp_receive+0x27c>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e013      	b.n	800d0fe <tcp_receive+0x27e>
 800d0d6:	bf00      	nop
 800d0d8:	080150cc 	.word	0x080150cc
 800d0dc:	080153fc 	.word	0x080153fc
 800d0e0:	08015118 	.word	0x08015118
 800d0e4:	08015418 	.word	0x08015418
 800d0e8:	20008a88 	.word	0x20008a88
 800d0ec:	20008a7c 	.word	0x20008a7c
 800d0f0:	20008a80 	.word	0x20008a80
 800d0f4:	20008a6c 	.word	0x20008a6c
 800d0f8:	20008a86 	.word	0x20008a86
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d102:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d106:	b29a      	uxth	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d10c:	fb12 f303 	smulbb	r3, r2, r3
 800d110:	b29b      	uxth	r3, r3
 800d112:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d114:	4293      	cmp	r3, r2
 800d116:	bf28      	it	cs
 800d118:	4613      	movcs	r3, r2
 800d11a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d122:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d124:	4413      	add	r3, r2
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d12e:	429a      	cmp	r2, r3
 800d130:	d309      	bcc.n	800d146 <tcp_receive+0x2c6>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d138:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d13a:	4413      	add	r3, r2
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d144:	e04e      	b.n	800d1e4 <tcp_receive+0x364>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d14c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d150:	e048      	b.n	800d1e4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d158:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d15a:	4413      	add	r3, r2
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d164:	429a      	cmp	r2, r3
 800d166:	d309      	bcc.n	800d17c <tcp_receive+0x2fc>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d16e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d170:	4413      	add	r3, r2
 800d172:	b29a      	uxth	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d17a:	e004      	b.n	800d186 <tcp_receive+0x306>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d182:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d192:	429a      	cmp	r2, r3
 800d194:	d326      	bcc.n	800d1e4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1b6:	4413      	add	r3, r2
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d30a      	bcc.n	800d1da <tcp_receive+0x35a>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1ce:	4413      	add	r3, r2
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d1d8:	e004      	b.n	800d1e4 <tcp_receive+0x364>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d1e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ec:	4a98      	ldr	r2, [pc, #608]	@ (800d450 <tcp_receive+0x5d0>)
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff fdca 	bl	800cd88 <tcp_free_acked_segments>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d202:	4a94      	ldr	r2, [pc, #592]	@ (800d454 <tcp_receive+0x5d4>)
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7ff fdbf 	bl	800cd88 <tcp_free_acked_segments>
 800d20a:	4602      	mov	r2, r0
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d214:	2b00      	cmp	r3, #0
 800d216:	d104      	bne.n	800d222 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d21e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d220:	e002      	b.n	800d228 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d232:	2b00      	cmp	r3, #0
 800d234:	d103      	bne.n	800d23e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d244:	4b84      	ldr	r3, [pc, #528]	@ (800d458 <tcp_receive+0x5d8>)
 800d246:	881b      	ldrh	r3, [r3, #0]
 800d248:	4413      	add	r3, r2
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	8b5b      	ldrh	r3, [r3, #26]
 800d256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d035      	beq.n	800d2ca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d262:	2b00      	cmp	r3, #0
 800d264:	d118      	bne.n	800d298 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00c      	beq.n	800d288 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fb f9c5 	bl	800860a <lwip_htonl>
 800d280:	4603      	mov	r3, r0
 800d282:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d284:	2b00      	cmp	r3, #0
 800d286:	dc20      	bgt.n	800d2ca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8b5b      	ldrh	r3, [r3, #26]
 800d28c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d296:	e018      	b.n	800d2ca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fb f9b0 	bl	800860a <lwip_htonl>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	1ae3      	subs	r3, r4, r3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	dc0b      	bgt.n	800d2ca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	8b5b      	ldrh	r3, [r3, #26]
 800d2b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d2c0:	e003      	b.n	800d2ca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f001 ff70 	bl	800f1a8 <tcp_send_empty_ack>
 800d2c8:	e000      	b.n	800d2cc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d2ca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d05b      	beq.n	800d38c <tcp_receive+0x50c>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2d8:	4b60      	ldr	r3, [pc, #384]	@ (800d45c <tcp_receive+0x5dc>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	da54      	bge.n	800d38c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d2e2:	4b5f      	ldr	r3, [pc, #380]	@ (800d460 <tcp_receive+0x5e0>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d2f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d300:	10db      	asrs	r3, r3, #3
 800d302:	b21b      	sxth	r3, r3
 800d304:	b29b      	uxth	r3, r3
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	b29b      	uxth	r3, r3
 800d30a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d314:	b29a      	uxth	r2, r3
 800d316:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d31a:	4413      	add	r3, r2
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	b21a      	sxth	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800d324:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800d328:	2b00      	cmp	r3, #0
 800d32a:	da05      	bge.n	800d338 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d32c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d330:	425b      	negs	r3, r3
 800d332:	b29b      	uxth	r3, r3
 800d334:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d338:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d342:	109b      	asrs	r3, r3, #2
 800d344:	b21b      	sxth	r3, r3
 800d346:	b29b      	uxth	r3, r3
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d356:	b29a      	uxth	r2, r3
 800d358:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d35c:	4413      	add	r3, r2
 800d35e:	b29b      	uxth	r3, r3
 800d360:	b21a      	sxth	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d36c:	10db      	asrs	r3, r3, #3
 800d36e:	b21b      	sxth	r3, r3
 800d370:	b29a      	uxth	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d378:	b29b      	uxth	r3, r3
 800d37a:	4413      	add	r3, r2
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	b21a      	sxth	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d38c:	4b35      	ldr	r3, [pc, #212]	@ (800d464 <tcp_receive+0x5e4>)
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 84df 	beq.w	800dd54 <tcp_receive+0xed4>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	7d1b      	ldrb	r3, [r3, #20]
 800d39a:	2b06      	cmp	r3, #6
 800d39c:	f200 84da 	bhi.w	800dd54 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3a4:	4b30      	ldr	r3, [pc, #192]	@ (800d468 <tcp_receive+0x5e8>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f2c0 808f 	blt.w	800d4d0 <tcp_receive+0x650>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3b6:	4b2b      	ldr	r3, [pc, #172]	@ (800d464 <tcp_receive+0x5e4>)
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	4b2a      	ldr	r3, [pc, #168]	@ (800d468 <tcp_receive+0x5e8>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	440b      	add	r3, r1
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f300 8082 	bgt.w	800d4d0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d3cc:	4b27      	ldr	r3, [pc, #156]	@ (800d46c <tcp_receive+0x5ec>)
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3d6:	4b24      	ldr	r3, [pc, #144]	@ (800d468 <tcp_receive+0x5e8>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d3de:	4b23      	ldr	r3, [pc, #140]	@ (800d46c <tcp_receive+0x5ec>)
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d106      	bne.n	800d3f4 <tcp_receive+0x574>
 800d3e6:	4b22      	ldr	r3, [pc, #136]	@ (800d470 <tcp_receive+0x5f0>)
 800d3e8:	f240 5294 	movw	r2, #1428	@ 0x594
 800d3ec:	4921      	ldr	r1, [pc, #132]	@ (800d474 <tcp_receive+0x5f4>)
 800d3ee:	4822      	ldr	r0, [pc, #136]	@ (800d478 <tcp_receive+0x5f8>)
 800d3f0:	f005 fdcc 	bl	8012f8c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d906      	bls.n	800d40c <tcp_receive+0x58c>
 800d3fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d470 <tcp_receive+0x5f0>)
 800d400:	f240 5295 	movw	r2, #1429	@ 0x595
 800d404:	491d      	ldr	r1, [pc, #116]	@ (800d47c <tcp_receive+0x5fc>)
 800d406:	481c      	ldr	r0, [pc, #112]	@ (800d478 <tcp_receive+0x5f8>)
 800d408:	f005 fdc0 	bl	8012f8c <iprintf>
      off = (u16_t)off32;
 800d40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d412:	4b16      	ldr	r3, [pc, #88]	@ (800d46c <tcp_receive+0x5ec>)
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	891b      	ldrh	r3, [r3, #8]
 800d418:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d906      	bls.n	800d42e <tcp_receive+0x5ae>
 800d420:	4b13      	ldr	r3, [pc, #76]	@ (800d470 <tcp_receive+0x5f0>)
 800d422:	f240 5297 	movw	r2, #1431	@ 0x597
 800d426:	4916      	ldr	r1, [pc, #88]	@ (800d480 <tcp_receive+0x600>)
 800d428:	4813      	ldr	r0, [pc, #76]	@ (800d478 <tcp_receive+0x5f8>)
 800d42a:	f005 fdaf 	bl	8012f8c <iprintf>
      inseg.len -= off;
 800d42e:	4b0f      	ldr	r3, [pc, #60]	@ (800d46c <tcp_receive+0x5ec>)
 800d430:	891a      	ldrh	r2, [r3, #8]
 800d432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	b29a      	uxth	r2, r3
 800d43a:	4b0c      	ldr	r3, [pc, #48]	@ (800d46c <tcp_receive+0x5ec>)
 800d43c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d43e:	4b0b      	ldr	r3, [pc, #44]	@ (800d46c <tcp_receive+0x5ec>)
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	891a      	ldrh	r2, [r3, #8]
 800d444:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800d44c:	e02a      	b.n	800d4a4 <tcp_receive+0x624>
 800d44e:	bf00      	nop
 800d450:	08015434 	.word	0x08015434
 800d454:	0801543c 	.word	0x0801543c
 800d458:	20008a84 	.word	0x20008a84
 800d45c:	20008a80 	.word	0x20008a80
 800d460:	20008a44 	.word	0x20008a44
 800d464:	20008a86 	.word	0x20008a86
 800d468:	20008a7c 	.word	0x20008a7c
 800d46c:	20008a5c 	.word	0x20008a5c
 800d470:	080150cc 	.word	0x080150cc
 800d474:	08015444 	.word	0x08015444
 800d478:	08015118 	.word	0x08015118
 800d47c:	08015454 	.word	0x08015454
 800d480:	08015464 	.word	0x08015464
        off -= p->len;
 800d484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d486:	895b      	ldrh	r3, [r3, #10]
 800d488:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d494:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d496:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d49a:	2200      	movs	r2, #0
 800d49c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d49e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800d4a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4a6:	895b      	ldrh	r3, [r3, #10]
 800d4a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d8e9      	bhi.n	800d484 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d4b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d4b8:	f7fc fb6a 	bl	8009b90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4c0:	4a90      	ldr	r2, [pc, #576]	@ (800d704 <tcp_receive+0x884>)
 800d4c2:	6013      	str	r3, [r2, #0]
 800d4c4:	4b90      	ldr	r3, [pc, #576]	@ (800d708 <tcp_receive+0x888>)
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	4a8e      	ldr	r2, [pc, #568]	@ (800d704 <tcp_receive+0x884>)
 800d4ca:	6812      	ldr	r2, [r2, #0]
 800d4cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d4ce:	e00d      	b.n	800d4ec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d4d0:	4b8c      	ldr	r3, [pc, #560]	@ (800d704 <tcp_receive+0x884>)
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	da06      	bge.n	800d4ec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	8b5b      	ldrh	r3, [r3, #26]
 800d4e2:	f043 0302 	orr.w	r3, r3, #2
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d4ec:	4b85      	ldr	r3, [pc, #532]	@ (800d704 <tcp_receive+0x884>)
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f2c0 8427 	blt.w	800dd4a <tcp_receive+0xeca>
 800d4fc:	4b81      	ldr	r3, [pc, #516]	@ (800d704 <tcp_receive+0x884>)
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d504:	6879      	ldr	r1, [r7, #4]
 800d506:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d508:	440b      	add	r3, r1
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	3301      	adds	r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f300 841b 	bgt.w	800dd4a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d518:	4b7a      	ldr	r3, [pc, #488]	@ (800d704 <tcp_receive+0x884>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	f040 8298 	bne.w	800da52 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d522:	4b79      	ldr	r3, [pc, #484]	@ (800d708 <tcp_receive+0x888>)
 800d524:	891c      	ldrh	r4, [r3, #8]
 800d526:	4b78      	ldr	r3, [pc, #480]	@ (800d708 <tcp_receive+0x888>)
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	899b      	ldrh	r3, [r3, #12]
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fb f856 	bl	80085e0 <lwip_htons>
 800d534:	4603      	mov	r3, r0
 800d536:	b2db      	uxtb	r3, r3
 800d538:	f003 0303 	and.w	r3, r3, #3
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d001      	beq.n	800d544 <tcp_receive+0x6c4>
 800d540:	2301      	movs	r3, #1
 800d542:	e000      	b.n	800d546 <tcp_receive+0x6c6>
 800d544:	2300      	movs	r3, #0
 800d546:	4423      	add	r3, r4
 800d548:	b29a      	uxth	r2, r3
 800d54a:	4b70      	ldr	r3, [pc, #448]	@ (800d70c <tcp_receive+0x88c>)
 800d54c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d552:	4b6e      	ldr	r3, [pc, #440]	@ (800d70c <tcp_receive+0x88c>)
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d274      	bcs.n	800d644 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d55a:	4b6b      	ldr	r3, [pc, #428]	@ (800d708 <tcp_receive+0x888>)
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	899b      	ldrh	r3, [r3, #12]
 800d560:	b29b      	uxth	r3, r3
 800d562:	4618      	mov	r0, r3
 800d564:	f7fb f83c 	bl	80085e0 <lwip_htons>
 800d568:	4603      	mov	r3, r0
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	f003 0301 	and.w	r3, r3, #1
 800d570:	2b00      	cmp	r3, #0
 800d572:	d01e      	beq.n	800d5b2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d574:	4b64      	ldr	r3, [pc, #400]	@ (800d708 <tcp_receive+0x888>)
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	b21b      	sxth	r3, r3
 800d57e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d582:	b21c      	sxth	r4, r3
 800d584:	4b60      	ldr	r3, [pc, #384]	@ (800d708 <tcp_receive+0x888>)
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	899b      	ldrh	r3, [r3, #12]
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fb f827 	bl	80085e0 <lwip_htons>
 800d592:	4603      	mov	r3, r0
 800d594:	b2db      	uxtb	r3, r3
 800d596:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fb f81f 	bl	80085e0 <lwip_htons>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	b21b      	sxth	r3, r3
 800d5a6:	4323      	orrs	r3, r4
 800d5a8:	b21a      	sxth	r2, r3
 800d5aa:	4b57      	ldr	r3, [pc, #348]	@ (800d708 <tcp_receive+0x888>)
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	b292      	uxth	r2, r2
 800d5b0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d5b6:	4b54      	ldr	r3, [pc, #336]	@ (800d708 <tcp_receive+0x888>)
 800d5b8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d5ba:	4b53      	ldr	r3, [pc, #332]	@ (800d708 <tcp_receive+0x888>)
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	899b      	ldrh	r3, [r3, #12]
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fb f80c 	bl	80085e0 <lwip_htons>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	f003 0302 	and.w	r3, r3, #2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d005      	beq.n	800d5e0 <tcp_receive+0x760>
            inseg.len -= 1;
 800d5d4:	4b4c      	ldr	r3, [pc, #304]	@ (800d708 <tcp_receive+0x888>)
 800d5d6:	891b      	ldrh	r3, [r3, #8]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	4b4a      	ldr	r3, [pc, #296]	@ (800d708 <tcp_receive+0x888>)
 800d5de:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d5e0:	4b49      	ldr	r3, [pc, #292]	@ (800d708 <tcp_receive+0x888>)
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	4a48      	ldr	r2, [pc, #288]	@ (800d708 <tcp_receive+0x888>)
 800d5e6:	8912      	ldrh	r2, [r2, #8]
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fc f9d0 	bl	8009990 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d5f0:	4b45      	ldr	r3, [pc, #276]	@ (800d708 <tcp_receive+0x888>)
 800d5f2:	891c      	ldrh	r4, [r3, #8]
 800d5f4:	4b44      	ldr	r3, [pc, #272]	@ (800d708 <tcp_receive+0x888>)
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	899b      	ldrh	r3, [r3, #12]
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fa ffef 	bl	80085e0 <lwip_htons>
 800d602:	4603      	mov	r3, r0
 800d604:	b2db      	uxtb	r3, r3
 800d606:	f003 0303 	and.w	r3, r3, #3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d001      	beq.n	800d612 <tcp_receive+0x792>
 800d60e:	2301      	movs	r3, #1
 800d610:	e000      	b.n	800d614 <tcp_receive+0x794>
 800d612:	2300      	movs	r3, #0
 800d614:	4423      	add	r3, r4
 800d616:	b29a      	uxth	r2, r3
 800d618:	4b3c      	ldr	r3, [pc, #240]	@ (800d70c <tcp_receive+0x88c>)
 800d61a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d61c:	4b3b      	ldr	r3, [pc, #236]	@ (800d70c <tcp_receive+0x88c>)
 800d61e:	881b      	ldrh	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	4b38      	ldr	r3, [pc, #224]	@ (800d704 <tcp_receive+0x884>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	441a      	add	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d630:	440b      	add	r3, r1
 800d632:	429a      	cmp	r2, r3
 800d634:	d006      	beq.n	800d644 <tcp_receive+0x7c4>
 800d636:	4b36      	ldr	r3, [pc, #216]	@ (800d710 <tcp_receive+0x890>)
 800d638:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800d63c:	4935      	ldr	r1, [pc, #212]	@ (800d714 <tcp_receive+0x894>)
 800d63e:	4836      	ldr	r0, [pc, #216]	@ (800d718 <tcp_receive+0x898>)
 800d640:	f005 fca4 	bl	8012f8c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 80e6 	beq.w	800d81a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d64e:	4b2e      	ldr	r3, [pc, #184]	@ (800d708 <tcp_receive+0x888>)
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	899b      	ldrh	r3, [r3, #12]
 800d654:	b29b      	uxth	r3, r3
 800d656:	4618      	mov	r0, r3
 800d658:	f7fa ffc2 	bl	80085e0 <lwip_htons>
 800d65c:	4603      	mov	r3, r0
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	f003 0301 	and.w	r3, r3, #1
 800d664:	2b00      	cmp	r3, #0
 800d666:	d010      	beq.n	800d68a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d668:	e00a      	b.n	800d680 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d66e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7fd fd93 	bl	800b1a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1f0      	bne.n	800d66a <tcp_receive+0x7ea>
 800d688:	e0c7      	b.n	800d81a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d690:	e051      	b.n	800d736 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	899b      	ldrh	r3, [r3, #12]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fa ffa0 	bl	80085e0 <lwip_htons>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d03c      	beq.n	800d726 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d6ac:	4b16      	ldr	r3, [pc, #88]	@ (800d708 <tcp_receive+0x888>)
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	899b      	ldrh	r3, [r3, #12]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fa ff93 	bl	80085e0 <lwip_htons>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d12f      	bne.n	800d726 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d6c6:	4b10      	ldr	r3, [pc, #64]	@ (800d708 <tcp_receive+0x888>)
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	899b      	ldrh	r3, [r3, #12]
 800d6cc:	b29c      	uxth	r4, r3
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	f7fa ff86 	bl	80085e0 <lwip_htons>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d708 <tcp_receive+0x888>)
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	4322      	orrs	r2, r4
 800d6de:	b292      	uxth	r2, r2
 800d6e0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d6e2:	4b09      	ldr	r3, [pc, #36]	@ (800d708 <tcp_receive+0x888>)
 800d6e4:	891c      	ldrh	r4, [r3, #8]
 800d6e6:	4b08      	ldr	r3, [pc, #32]	@ (800d708 <tcp_receive+0x888>)
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	899b      	ldrh	r3, [r3, #12]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fa ff76 	bl	80085e0 <lwip_htons>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	f003 0303 	and.w	r3, r3, #3
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00d      	beq.n	800d71c <tcp_receive+0x89c>
 800d700:	2301      	movs	r3, #1
 800d702:	e00c      	b.n	800d71e <tcp_receive+0x89e>
 800d704:	20008a7c 	.word	0x20008a7c
 800d708:	20008a5c 	.word	0x20008a5c
 800d70c:	20008a86 	.word	0x20008a86
 800d710:	080150cc 	.word	0x080150cc
 800d714:	08015474 	.word	0x08015474
 800d718:	08015118 	.word	0x08015118
 800d71c:	2300      	movs	r3, #0
 800d71e:	4423      	add	r3, r4
 800d720:	b29a      	uxth	r2, r3
 800d722:	4b98      	ldr	r3, [pc, #608]	@ (800d984 <tcp_receive+0xb04>)
 800d724:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d728:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d72a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800d730:	6938      	ldr	r0, [r7, #16]
 800d732:	f7fd fd38 	bl	800b1a6 <tcp_seg_free>
            while (next &&
 800d736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00e      	beq.n	800d75a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d73c:	4b91      	ldr	r3, [pc, #580]	@ (800d984 <tcp_receive+0xb04>)
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	461a      	mov	r2, r3
 800d742:	4b91      	ldr	r3, [pc, #580]	@ (800d988 <tcp_receive+0xb08>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	441a      	add	r2, r3
 800d748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d750:	8909      	ldrh	r1, [r1, #8]
 800d752:	440b      	add	r3, r1
 800d754:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d756:	2b00      	cmp	r3, #0
 800d758:	da9b      	bge.n	800d692 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d059      	beq.n	800d814 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d760:	4b88      	ldr	r3, [pc, #544]	@ (800d984 <tcp_receive+0xb04>)
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	461a      	mov	r2, r3
 800d766:	4b88      	ldr	r3, [pc, #544]	@ (800d988 <tcp_receive+0xb08>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	441a      	add	r2, r3
 800d76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d774:	2b00      	cmp	r3, #0
 800d776:	dd4d      	ble.n	800d814 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	b29a      	uxth	r2, r3
 800d780:	4b81      	ldr	r3, [pc, #516]	@ (800d988 <tcp_receive+0xb08>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	b29b      	uxth	r3, r3
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	b29a      	uxth	r2, r3
 800d78a:	4b80      	ldr	r3, [pc, #512]	@ (800d98c <tcp_receive+0xb0c>)
 800d78c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d78e:	4b7f      	ldr	r3, [pc, #508]	@ (800d98c <tcp_receive+0xb0c>)
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	899b      	ldrh	r3, [r3, #12]
 800d794:	b29b      	uxth	r3, r3
 800d796:	4618      	mov	r0, r3
 800d798:	f7fa ff22 	bl	80085e0 <lwip_htons>
 800d79c:	4603      	mov	r3, r0
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f003 0302 	and.w	r3, r3, #2
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d005      	beq.n	800d7b4 <tcp_receive+0x934>
                inseg.len -= 1;
 800d7a8:	4b78      	ldr	r3, [pc, #480]	@ (800d98c <tcp_receive+0xb0c>)
 800d7aa:	891b      	ldrh	r3, [r3, #8]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	4b76      	ldr	r3, [pc, #472]	@ (800d98c <tcp_receive+0xb0c>)
 800d7b2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d7b4:	4b75      	ldr	r3, [pc, #468]	@ (800d98c <tcp_receive+0xb0c>)
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	4a74      	ldr	r2, [pc, #464]	@ (800d98c <tcp_receive+0xb0c>)
 800d7ba:	8912      	ldrh	r2, [r2, #8]
 800d7bc:	4611      	mov	r1, r2
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fc f8e6 	bl	8009990 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d7c4:	4b71      	ldr	r3, [pc, #452]	@ (800d98c <tcp_receive+0xb0c>)
 800d7c6:	891c      	ldrh	r4, [r3, #8]
 800d7c8:	4b70      	ldr	r3, [pc, #448]	@ (800d98c <tcp_receive+0xb0c>)
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	899b      	ldrh	r3, [r3, #12]
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fa ff05 	bl	80085e0 <lwip_htons>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	f003 0303 	and.w	r3, r3, #3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <tcp_receive+0x966>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e000      	b.n	800d7e8 <tcp_receive+0x968>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	4423      	add	r3, r4
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	4b65      	ldr	r3, [pc, #404]	@ (800d984 <tcp_receive+0xb04>)
 800d7ee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d7f0:	4b64      	ldr	r3, [pc, #400]	@ (800d984 <tcp_receive+0xb04>)
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	4b64      	ldr	r3, [pc, #400]	@ (800d988 <tcp_receive+0xb08>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	441a      	add	r2, r3
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	429a      	cmp	r2, r3
 800d804:	d006      	beq.n	800d814 <tcp_receive+0x994>
 800d806:	4b62      	ldr	r3, [pc, #392]	@ (800d990 <tcp_receive+0xb10>)
 800d808:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800d80c:	4961      	ldr	r1, [pc, #388]	@ (800d994 <tcp_receive+0xb14>)
 800d80e:	4862      	ldr	r0, [pc, #392]	@ (800d998 <tcp_receive+0xb18>)
 800d810:	f005 fbbc 	bl	8012f8c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d818:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d81a:	4b5a      	ldr	r3, [pc, #360]	@ (800d984 <tcp_receive+0xb04>)
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	4b59      	ldr	r3, [pc, #356]	@ (800d988 <tcp_receive+0xb08>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	441a      	add	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d82e:	4b55      	ldr	r3, [pc, #340]	@ (800d984 <tcp_receive+0xb04>)
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	429a      	cmp	r2, r3
 800d834:	d206      	bcs.n	800d844 <tcp_receive+0x9c4>
 800d836:	4b56      	ldr	r3, [pc, #344]	@ (800d990 <tcp_receive+0xb10>)
 800d838:	f240 6207 	movw	r2, #1543	@ 0x607
 800d83c:	4957      	ldr	r1, [pc, #348]	@ (800d99c <tcp_receive+0xb1c>)
 800d83e:	4856      	ldr	r0, [pc, #344]	@ (800d998 <tcp_receive+0xb18>)
 800d840:	f005 fba4 	bl	8012f8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d848:	4b4e      	ldr	r3, [pc, #312]	@ (800d984 <tcp_receive+0xb04>)
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	b29a      	uxth	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7fc ffc5 	bl	800a7e4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d85a:	4b4c      	ldr	r3, [pc, #304]	@ (800d98c <tcp_receive+0xb0c>)
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	891b      	ldrh	r3, [r3, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d006      	beq.n	800d872 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d864:	4b49      	ldr	r3, [pc, #292]	@ (800d98c <tcp_receive+0xb0c>)
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	4a4d      	ldr	r2, [pc, #308]	@ (800d9a0 <tcp_receive+0xb20>)
 800d86a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d86c:	4b47      	ldr	r3, [pc, #284]	@ (800d98c <tcp_receive+0xb0c>)
 800d86e:	2200      	movs	r2, #0
 800d870:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d872:	4b46      	ldr	r3, [pc, #280]	@ (800d98c <tcp_receive+0xb0c>)
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	899b      	ldrh	r3, [r3, #12]
 800d878:	b29b      	uxth	r3, r3
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fa feb0 	bl	80085e0 <lwip_htons>
 800d880:	4603      	mov	r3, r0
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80b8 	beq.w	800d9fe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d88e:	4b45      	ldr	r3, [pc, #276]	@ (800d9a4 <tcp_receive+0xb24>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	f043 0320 	orr.w	r3, r3, #32
 800d896:	b2da      	uxtb	r2, r3
 800d898:	4b42      	ldr	r3, [pc, #264]	@ (800d9a4 <tcp_receive+0xb24>)
 800d89a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d89c:	e0af      	b.n	800d9fe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	4a36      	ldr	r2, [pc, #216]	@ (800d988 <tcp_receive+0xb08>)
 800d8ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	891b      	ldrh	r3, [r3, #8]
 800d8b4:	461c      	mov	r4, r3
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	899b      	ldrh	r3, [r3, #12]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fa fe8e 	bl	80085e0 <lwip_htons>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0303 	and.w	r3, r3, #3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <tcp_receive+0xa54>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e000      	b.n	800d8d6 <tcp_receive+0xa56>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	191a      	adds	r2, r3, r4
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8dc:	441a      	add	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8e6:	461c      	mov	r4, r3
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	891b      	ldrh	r3, [r3, #8]
 800d8ec:	461d      	mov	r5, r3
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	899b      	ldrh	r3, [r3, #12]
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fa fe72 	bl	80085e0 <lwip_htons>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	f003 0303 	and.w	r3, r3, #3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <tcp_receive+0xa8c>
 800d908:	2301      	movs	r3, #1
 800d90a:	e000      	b.n	800d90e <tcp_receive+0xa8e>
 800d90c:	2300      	movs	r3, #0
 800d90e:	442b      	add	r3, r5
 800d910:	429c      	cmp	r4, r3
 800d912:	d206      	bcs.n	800d922 <tcp_receive+0xaa2>
 800d914:	4b1e      	ldr	r3, [pc, #120]	@ (800d990 <tcp_receive+0xb10>)
 800d916:	f240 622b 	movw	r2, #1579	@ 0x62b
 800d91a:	4923      	ldr	r1, [pc, #140]	@ (800d9a8 <tcp_receive+0xb28>)
 800d91c:	481e      	ldr	r0, [pc, #120]	@ (800d998 <tcp_receive+0xb18>)
 800d91e:	f005 fb35 	bl	8012f8c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	891b      	ldrh	r3, [r3, #8]
 800d926:	461c      	mov	r4, r3
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	899b      	ldrh	r3, [r3, #12]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	4618      	mov	r0, r3
 800d932:	f7fa fe55 	bl	80085e0 <lwip_htons>
 800d936:	4603      	mov	r3, r0
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 0303 	and.w	r3, r3, #3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <tcp_receive+0xac6>
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <tcp_receive+0xac8>
 800d946:	2300      	movs	r3, #0
 800d948:	1919      	adds	r1, r3, r4
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d94e:	b28b      	uxth	r3, r1
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	b29a      	uxth	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7fc ff43 	bl	800a7e4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	891b      	ldrh	r3, [r3, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d028      	beq.n	800d9ba <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d968:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a0 <tcp_receive+0xb20>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01d      	beq.n	800d9ac <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d970:	4b0b      	ldr	r3, [pc, #44]	@ (800d9a0 <tcp_receive+0xb20>)
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4619      	mov	r1, r3
 800d97a:	4610      	mov	r0, r2
 800d97c:	f7fc fa50 	bl	8009e20 <pbuf_cat>
 800d980:	e018      	b.n	800d9b4 <tcp_receive+0xb34>
 800d982:	bf00      	nop
 800d984:	20008a86 	.word	0x20008a86
 800d988:	20008a7c 	.word	0x20008a7c
 800d98c:	20008a5c 	.word	0x20008a5c
 800d990:	080150cc 	.word	0x080150cc
 800d994:	080154ac 	.word	0x080154ac
 800d998:	08015118 	.word	0x08015118
 800d99c:	080154e8 	.word	0x080154e8
 800d9a0:	20008a8c 	.word	0x20008a8c
 800d9a4:	20008a89 	.word	0x20008a89
 800d9a8:	08015508 	.word	0x08015508
            } else {
              recv_data = cseg->p;
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	4a70      	ldr	r2, [pc, #448]	@ (800db74 <tcp_receive+0xcf4>)
 800d9b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	899b      	ldrh	r3, [r3, #12]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fa fe0c 	bl	80085e0 <lwip_htons>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00d      	beq.n	800d9f0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d9d4:	4b68      	ldr	r3, [pc, #416]	@ (800db78 <tcp_receive+0xcf8>)
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	f043 0320 	orr.w	r3, r3, #32
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	4b66      	ldr	r3, [pc, #408]	@ (800db78 <tcp_receive+0xcf8>)
 800d9e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7d1b      	ldrb	r3, [r3, #20]
 800d9e6:	2b04      	cmp	r3, #4
 800d9e8:	d102      	bne.n	800d9f0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2207      	movs	r2, #7
 800d9ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800d9f8:	68b8      	ldr	r0, [r7, #8]
 800d9fa:	f7fd fbd4 	bl	800b1a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800da12:	429a      	cmp	r2, r3
 800da14:	f43f af43 	beq.w	800d89e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	8b5b      	ldrh	r3, [r3, #26]
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00e      	beq.n	800da42 <tcp_receive+0xbc2>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8b5b      	ldrh	r3, [r3, #26]
 800da28:	f023 0301 	bic.w	r3, r3, #1
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	835a      	strh	r2, [r3, #26]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	8b5b      	ldrh	r3, [r3, #26]
 800da36:	f043 0302 	orr.w	r3, r3, #2
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da40:	e187      	b.n	800dd52 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8b5b      	ldrh	r3, [r3, #26]
 800da46:	f043 0301 	orr.w	r3, r3, #1
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da50:	e17f      	b.n	800dd52 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da56:	2b00      	cmp	r3, #0
 800da58:	d106      	bne.n	800da68 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800da5a:	4848      	ldr	r0, [pc, #288]	@ (800db7c <tcp_receive+0xcfc>)
 800da5c:	f7fd fbbc 	bl	800b1d8 <tcp_seg_copy>
 800da60:	4602      	mov	r2, r0
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	675a      	str	r2, [r3, #116]	@ 0x74
 800da66:	e16c      	b.n	800dd42 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800da68:	2300      	movs	r3, #0
 800da6a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da72:	e156      	b.n	800dd22 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800da74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	4b41      	ldr	r3, [pc, #260]	@ (800db80 <tcp_receive+0xd00>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d11d      	bne.n	800dabe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800da82:	4b3e      	ldr	r3, [pc, #248]	@ (800db7c <tcp_receive+0xcfc>)
 800da84:	891a      	ldrh	r2, [r3, #8]
 800da86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da88:	891b      	ldrh	r3, [r3, #8]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	f240 814e 	bls.w	800dd2c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da90:	483a      	ldr	r0, [pc, #232]	@ (800db7c <tcp_receive+0xcfc>)
 800da92:	f7fd fba1 	bl	800b1d8 <tcp_seg_copy>
 800da96:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 8148 	beq.w	800dd30 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800daa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d003      	beq.n	800daae <tcp_receive+0xc2e>
                    prev->next = cseg;
 800daa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	e002      	b.n	800dab4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800dab4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dab6:	6978      	ldr	r0, [r7, #20]
 800dab8:	f7ff f8de 	bl	800cc78 <tcp_oos_insert_segment>
                }
                break;
 800dabc:	e138      	b.n	800dd30 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800dabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d117      	bne.n	800daf4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dac4:	4b2e      	ldr	r3, [pc, #184]	@ (800db80 <tcp_receive+0xd00>)
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	da57      	bge.n	800db84 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dad4:	4829      	ldr	r0, [pc, #164]	@ (800db7c <tcp_receive+0xcfc>)
 800dad6:	f7fd fb7f 	bl	800b1d8 <tcp_seg_copy>
 800dada:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 8128 	beq.w	800dd34 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	69ba      	ldr	r2, [r7, #24]
 800dae8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800daea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800daec:	69b8      	ldr	r0, [r7, #24]
 800daee:	f7ff f8c3 	bl	800cc78 <tcp_oos_insert_segment>
                  }
                  break;
 800daf2:	e11f      	b.n	800dd34 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800daf4:	4b22      	ldr	r3, [pc, #136]	@ (800db80 <tcp_receive+0xd00>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	3b01      	subs	r3, #1
 800db02:	2b00      	cmp	r3, #0
 800db04:	db3e      	blt.n	800db84 <tcp_receive+0xd04>
 800db06:	4b1e      	ldr	r3, [pc, #120]	@ (800db80 <tcp_receive+0xd00>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	3301      	adds	r3, #1
 800db14:	2b00      	cmp	r3, #0
 800db16:	dc35      	bgt.n	800db84 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800db18:	4818      	ldr	r0, [pc, #96]	@ (800db7c <tcp_receive+0xcfc>)
 800db1a:	f7fd fb5d 	bl	800b1d8 <tcp_seg_copy>
 800db1e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 8108 	beq.w	800dd38 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800db28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db30:	8912      	ldrh	r2, [r2, #8]
 800db32:	441a      	add	r2, r3
 800db34:	4b12      	ldr	r3, [pc, #72]	@ (800db80 <tcp_receive+0xd00>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	dd12      	ble.n	800db64 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800db3e:	4b10      	ldr	r3, [pc, #64]	@ (800db80 <tcp_receive+0xd00>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	b29a      	uxth	r2, r3
 800db44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	b29a      	uxth	r2, r3
 800db50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db52:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800db54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db56:	685a      	ldr	r2, [r3, #4]
 800db58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db5a:	891b      	ldrh	r3, [r3, #8]
 800db5c:	4619      	mov	r1, r3
 800db5e:	4610      	mov	r0, r2
 800db60:	f7fb ff16 	bl	8009990 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800db64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db66:	69fa      	ldr	r2, [r7, #28]
 800db68:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800db6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800db6c:	69f8      	ldr	r0, [r7, #28]
 800db6e:	f7ff f883 	bl	800cc78 <tcp_oos_insert_segment>
                  }
                  break;
 800db72:	e0e1      	b.n	800dd38 <tcp_receive+0xeb8>
 800db74:	20008a8c 	.word	0x20008a8c
 800db78:	20008a89 	.word	0x20008a89
 800db7c:	20008a5c 	.word	0x20008a5c
 800db80:	20008a7c 	.word	0x20008a7c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800db84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db86:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800db88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f040 80c5 	bne.w	800dd1c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800db92:	4b7f      	ldr	r3, [pc, #508]	@ (800dd90 <tcp_receive+0xf10>)
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f340 80bc 	ble.w	800dd1c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	899b      	ldrh	r3, [r3, #12]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fa fd17 	bl	80085e0 <lwip_htons>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f040 80be 	bne.w	800dd3c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dbc0:	4874      	ldr	r0, [pc, #464]	@ (800dd94 <tcp_receive+0xf14>)
 800dbc2:	f7fd fb09 	bl	800b1d8 <tcp_seg_copy>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 80b5 	beq.w	800dd40 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbde:	8912      	ldrh	r2, [r2, #8]
 800dbe0:	441a      	add	r2, r3
 800dbe2:	4b6b      	ldr	r3, [pc, #428]	@ (800dd90 <tcp_receive+0xf10>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	dd12      	ble.n	800dc12 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dbec:	4b68      	ldr	r3, [pc, #416]	@ (800dd90 <tcp_receive+0xf10>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc00:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc04:	685a      	ldr	r2, [r3, #4]
 800dc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc08:	891b      	ldrh	r3, [r3, #8]
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4610      	mov	r0, r2
 800dc0e:	f7fb febf 	bl	8009990 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dc12:	4b61      	ldr	r3, [pc, #388]	@ (800dd98 <tcp_receive+0xf18>)
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	461a      	mov	r2, r3
 800dc18:	4b5d      	ldr	r3, [pc, #372]	@ (800dd90 <tcp_receive+0xf10>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	441a      	add	r2, r3
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dc26:	440b      	add	r3, r1
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f340 8088 	ble.w	800dd40 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	899b      	ldrh	r3, [r3, #12]
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fa fcd0 	bl	80085e0 <lwip_htons>
 800dc40:	4603      	mov	r3, r0
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	f003 0301 	and.w	r3, r3, #1
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d021      	beq.n	800dc90 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	899b      	ldrh	r3, [r3, #12]
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	b21b      	sxth	r3, r3
 800dc58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dc5c:	b21c      	sxth	r4, r3
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	899b      	ldrh	r3, [r3, #12]
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fa fcb9 	bl	80085e0 <lwip_htons>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fa fcb1 	bl	80085e0 <lwip_htons>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	b21b      	sxth	r3, r3
 800dc82:	4323      	orrs	r3, r4
 800dc84:	b21a      	sxth	r2, r3
 800dc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	b292      	uxth	r2, r2
 800dc8e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc9a:	4413      	add	r3, r2
 800dc9c:	b299      	uxth	r1, r3
 800dc9e:	4b3c      	ldr	r3, [pc, #240]	@ (800dd90 <tcp_receive+0xf10>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	1a8a      	subs	r2, r1, r2
 800dcaa:	b292      	uxth	r2, r2
 800dcac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	891b      	ldrh	r3, [r3, #8]
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	f7fb fe67 	bl	8009990 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	891c      	ldrh	r4, [r3, #8]
 800dcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	899b      	ldrh	r3, [r3, #12]
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fa fc84 	bl	80085e0 <lwip_htons>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0303 	and.w	r3, r3, #3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <tcp_receive+0xe68>
 800dce4:	2301      	movs	r3, #1
 800dce6:	e000      	b.n	800dcea <tcp_receive+0xe6a>
 800dce8:	2300      	movs	r3, #0
 800dcea:	4423      	add	r3, r4
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	4b2a      	ldr	r3, [pc, #168]	@ (800dd98 <tcp_receive+0xf18>)
 800dcf0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dcf2:	4b29      	ldr	r3, [pc, #164]	@ (800dd98 <tcp_receive+0xf18>)
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	4b25      	ldr	r3, [pc, #148]	@ (800dd90 <tcp_receive+0xf10>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	441a      	add	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd02:	6879      	ldr	r1, [r7, #4]
 800dd04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dd06:	440b      	add	r3, r1
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d019      	beq.n	800dd40 <tcp_receive+0xec0>
 800dd0c:	4b23      	ldr	r3, [pc, #140]	@ (800dd9c <tcp_receive+0xf1c>)
 800dd0e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800dd12:	4923      	ldr	r1, [pc, #140]	@ (800dda0 <tcp_receive+0xf20>)
 800dd14:	4823      	ldr	r0, [pc, #140]	@ (800dda4 <tcp_receive+0xf24>)
 800dd16:	f005 f939 	bl	8012f8c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dd1a:	e011      	b.n	800dd40 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f47f aea5 	bne.w	800da74 <tcp_receive+0xbf4>
 800dd2a:	e00a      	b.n	800dd42 <tcp_receive+0xec2>
                break;
 800dd2c:	bf00      	nop
 800dd2e:	e008      	b.n	800dd42 <tcp_receive+0xec2>
                break;
 800dd30:	bf00      	nop
 800dd32:	e006      	b.n	800dd42 <tcp_receive+0xec2>
                  break;
 800dd34:	bf00      	nop
 800dd36:	e004      	b.n	800dd42 <tcp_receive+0xec2>
                  break;
 800dd38:	bf00      	nop
 800dd3a:	e002      	b.n	800dd42 <tcp_receive+0xec2>
                  break;
 800dd3c:	bf00      	nop
 800dd3e:	e000      	b.n	800dd42 <tcp_receive+0xec2>
                break;
 800dd40:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f001 fa30 	bl	800f1a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dd48:	e003      	b.n	800dd52 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 fa2c 	bl	800f1a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd50:	e01a      	b.n	800dd88 <tcp_receive+0xf08>
 800dd52:	e019      	b.n	800dd88 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dd54:	4b0e      	ldr	r3, [pc, #56]	@ (800dd90 <tcp_receive+0xf10>)
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	db0a      	blt.n	800dd78 <tcp_receive+0xef8>
 800dd62:	4b0b      	ldr	r3, [pc, #44]	@ (800dd90 <tcp_receive+0xf10>)
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd6a:	6879      	ldr	r1, [r7, #4]
 800dd6c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dd6e:	440b      	add	r3, r1
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	3301      	adds	r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	dd07      	ble.n	800dd88 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8b5b      	ldrh	r3, [r3, #26]
 800dd7c:	f043 0302 	orr.w	r3, r3, #2
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dd86:	e7ff      	b.n	800dd88 <tcp_receive+0xf08>
 800dd88:	bf00      	nop
 800dd8a:	3750      	adds	r7, #80	@ 0x50
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bdb0      	pop	{r4, r5, r7, pc}
 800dd90:	20008a7c 	.word	0x20008a7c
 800dd94:	20008a5c 	.word	0x20008a5c
 800dd98:	20008a86 	.word	0x20008a86
 800dd9c:	080150cc 	.word	0x080150cc
 800dda0:	08015474 	.word	0x08015474
 800dda4:	08015118 	.word	0x08015118

0800dda8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ddae:	4b15      	ldr	r3, [pc, #84]	@ (800de04 <tcp_get_next_optbyte+0x5c>)
 800ddb0:	881b      	ldrh	r3, [r3, #0]
 800ddb2:	1c5a      	adds	r2, r3, #1
 800ddb4:	b291      	uxth	r1, r2
 800ddb6:	4a13      	ldr	r2, [pc, #76]	@ (800de04 <tcp_get_next_optbyte+0x5c>)
 800ddb8:	8011      	strh	r1, [r2, #0]
 800ddba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ddbc:	4b12      	ldr	r3, [pc, #72]	@ (800de08 <tcp_get_next_optbyte+0x60>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d004      	beq.n	800ddce <tcp_get_next_optbyte+0x26>
 800ddc4:	4b11      	ldr	r3, [pc, #68]	@ (800de0c <tcp_get_next_optbyte+0x64>)
 800ddc6:	881b      	ldrh	r3, [r3, #0]
 800ddc8:	88fa      	ldrh	r2, [r7, #6]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d208      	bcs.n	800dde0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ddce:	4b10      	ldr	r3, [pc, #64]	@ (800de10 <tcp_get_next_optbyte+0x68>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3314      	adds	r3, #20
 800ddd4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ddd6:	88fb      	ldrh	r3, [r7, #6]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	4413      	add	r3, r2
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	e00b      	b.n	800ddf8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dde0:	88fb      	ldrh	r3, [r7, #6]
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	4b09      	ldr	r3, [pc, #36]	@ (800de0c <tcp_get_next_optbyte+0x64>)
 800dde6:	881b      	ldrh	r3, [r3, #0]
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ddee:	4b06      	ldr	r3, [pc, #24]	@ (800de08 <tcp_get_next_optbyte+0x60>)
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	797b      	ldrb	r3, [r7, #5]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	20008a78 	.word	0x20008a78
 800de08:	20008a74 	.word	0x20008a74
 800de0c:	20008a72 	.word	0x20008a72
 800de10:	20008a6c 	.word	0x20008a6c

0800de14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d106      	bne.n	800de30 <tcp_parseopt+0x1c>
 800de22:	4b32      	ldr	r3, [pc, #200]	@ (800deec <tcp_parseopt+0xd8>)
 800de24:	f240 727d 	movw	r2, #1917	@ 0x77d
 800de28:	4931      	ldr	r1, [pc, #196]	@ (800def0 <tcp_parseopt+0xdc>)
 800de2a:	4832      	ldr	r0, [pc, #200]	@ (800def4 <tcp_parseopt+0xe0>)
 800de2c:	f005 f8ae 	bl	8012f8c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800de30:	4b31      	ldr	r3, [pc, #196]	@ (800def8 <tcp_parseopt+0xe4>)
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d056      	beq.n	800dee6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de38:	4b30      	ldr	r3, [pc, #192]	@ (800defc <tcp_parseopt+0xe8>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	801a      	strh	r2, [r3, #0]
 800de3e:	e046      	b.n	800dece <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800de40:	f7ff ffb2 	bl	800dda8 <tcp_get_next_optbyte>
 800de44:	4603      	mov	r3, r0
 800de46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d006      	beq.n	800de5c <tcp_parseopt+0x48>
 800de4e:	2b02      	cmp	r3, #2
 800de50:	dc2a      	bgt.n	800dea8 <tcp_parseopt+0x94>
 800de52:	2b00      	cmp	r3, #0
 800de54:	d042      	beq.n	800dedc <tcp_parseopt+0xc8>
 800de56:	2b01      	cmp	r3, #1
 800de58:	d038      	beq.n	800decc <tcp_parseopt+0xb8>
 800de5a:	e025      	b.n	800dea8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800de5c:	f7ff ffa4 	bl	800dda8 <tcp_get_next_optbyte>
 800de60:	4603      	mov	r3, r0
 800de62:	2b04      	cmp	r3, #4
 800de64:	d13c      	bne.n	800dee0 <tcp_parseopt+0xcc>
 800de66:	4b25      	ldr	r3, [pc, #148]	@ (800defc <tcp_parseopt+0xe8>)
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	3301      	adds	r3, #1
 800de6c:	4a22      	ldr	r2, [pc, #136]	@ (800def8 <tcp_parseopt+0xe4>)
 800de6e:	8812      	ldrh	r2, [r2, #0]
 800de70:	4293      	cmp	r3, r2
 800de72:	da35      	bge.n	800dee0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800de74:	f7ff ff98 	bl	800dda8 <tcp_get_next_optbyte>
 800de78:	4603      	mov	r3, r0
 800de7a:	021b      	lsls	r3, r3, #8
 800de7c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800de7e:	f7ff ff93 	bl	800dda8 <tcp_get_next_optbyte>
 800de82:	4603      	mov	r3, r0
 800de84:	461a      	mov	r2, r3
 800de86:	89bb      	ldrh	r3, [r7, #12]
 800de88:	4313      	orrs	r3, r2
 800de8a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800de8c:	89bb      	ldrh	r3, [r7, #12]
 800de8e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800de92:	d804      	bhi.n	800de9e <tcp_parseopt+0x8a>
 800de94:	89bb      	ldrh	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <tcp_parseopt+0x8a>
 800de9a:	89ba      	ldrh	r2, [r7, #12]
 800de9c:	e001      	b.n	800dea2 <tcp_parseopt+0x8e>
 800de9e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800dea6:	e012      	b.n	800dece <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dea8:	f7ff ff7e 	bl	800dda8 <tcp_get_next_optbyte>
 800deac:	4603      	mov	r3, r0
 800deae:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800deb0:	7afb      	ldrb	r3, [r7, #11]
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d916      	bls.n	800dee4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	b29a      	uxth	r2, r3
 800deba:	4b10      	ldr	r3, [pc, #64]	@ (800defc <tcp_parseopt+0xe8>)
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	4413      	add	r3, r2
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	3b02      	subs	r3, #2
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	4b0d      	ldr	r3, [pc, #52]	@ (800defc <tcp_parseopt+0xe8>)
 800dec8:	801a      	strh	r2, [r3, #0]
 800deca:	e000      	b.n	800dece <tcp_parseopt+0xba>
          break;
 800decc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dece:	4b0b      	ldr	r3, [pc, #44]	@ (800defc <tcp_parseopt+0xe8>)
 800ded0:	881a      	ldrh	r2, [r3, #0]
 800ded2:	4b09      	ldr	r3, [pc, #36]	@ (800def8 <tcp_parseopt+0xe4>)
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d3b2      	bcc.n	800de40 <tcp_parseopt+0x2c>
 800deda:	e004      	b.n	800dee6 <tcp_parseopt+0xd2>
          return;
 800dedc:	bf00      	nop
 800dede:	e002      	b.n	800dee6 <tcp_parseopt+0xd2>
            return;
 800dee0:	bf00      	nop
 800dee2:	e000      	b.n	800dee6 <tcp_parseopt+0xd2>
            return;
 800dee4:	bf00      	nop
      }
    }
  }
}
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	080150cc 	.word	0x080150cc
 800def0:	08015530 	.word	0x08015530
 800def4:	08015118 	.word	0x08015118
 800def8:	20008a70 	.word	0x20008a70
 800defc:	20008a78 	.word	0x20008a78

0800df00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800df04:	4b05      	ldr	r3, [pc, #20]	@ (800df1c <tcp_trigger_input_pcb_close+0x1c>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	f043 0310 	orr.w	r3, r3, #16
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	4b03      	ldr	r3, [pc, #12]	@ (800df1c <tcp_trigger_input_pcb_close+0x1c>)
 800df10:	701a      	strb	r2, [r3, #0]
}
 800df12:	bf00      	nop
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	20008a89 	.word	0x20008a89

0800df20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00a      	beq.n	800df48 <tcp_route+0x28>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	7a1b      	ldrb	r3, [r3, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d006      	beq.n	800df48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	7a1b      	ldrb	r3, [r3, #8]
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fb fb4c 	bl	80095dc <netif_get_by_index>
 800df44:	4603      	mov	r3, r0
 800df46:	e003      	b.n	800df50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f003 f96b 	bl	8011224 <ip4_route>
 800df4e:	4603      	mov	r3, r0
  }
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800df58:	b590      	push	{r4, r7, lr}
 800df5a:	b087      	sub	sp, #28
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	603b      	str	r3, [r7, #0]
 800df64:	4613      	mov	r3, r2
 800df66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d105      	bne.n	800df7a <tcp_create_segment+0x22>
 800df6e:	4b43      	ldr	r3, [pc, #268]	@ (800e07c <tcp_create_segment+0x124>)
 800df70:	22a3      	movs	r2, #163	@ 0xa3
 800df72:	4943      	ldr	r1, [pc, #268]	@ (800e080 <tcp_create_segment+0x128>)
 800df74:	4843      	ldr	r0, [pc, #268]	@ (800e084 <tcp_create_segment+0x12c>)
 800df76:	f005 f809 	bl	8012f8c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d105      	bne.n	800df8c <tcp_create_segment+0x34>
 800df80:	4b3e      	ldr	r3, [pc, #248]	@ (800e07c <tcp_create_segment+0x124>)
 800df82:	22a4      	movs	r2, #164	@ 0xa4
 800df84:	4940      	ldr	r1, [pc, #256]	@ (800e088 <tcp_create_segment+0x130>)
 800df86:	483f      	ldr	r0, [pc, #252]	@ (800e084 <tcp_create_segment+0x12c>)
 800df88:	f005 f800 	bl	8012f8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800df8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800df9a:	2003      	movs	r0, #3
 800df9c:	f7fa ff98 	bl	8008ed0 <memp_malloc>
 800dfa0:	6138      	str	r0, [r7, #16]
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d104      	bne.n	800dfb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dfa8:	68b8      	ldr	r0, [r7, #8]
 800dfaa:	f7fb fe77 	bl	8009c9c <pbuf_free>
    return NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e060      	b.n	800e074 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800dfb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	891a      	ldrh	r2, [r3, #8]
 800dfca:	7dfb      	ldrb	r3, [r7, #23]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d205      	bcs.n	800dfde <tcp_create_segment+0x86>
 800dfd2:	4b2a      	ldr	r3, [pc, #168]	@ (800e07c <tcp_create_segment+0x124>)
 800dfd4:	22b0      	movs	r2, #176	@ 0xb0
 800dfd6:	492d      	ldr	r1, [pc, #180]	@ (800e08c <tcp_create_segment+0x134>)
 800dfd8:	482a      	ldr	r0, [pc, #168]	@ (800e084 <tcp_create_segment+0x12c>)
 800dfda:	f004 ffd7 	bl	8012f8c <iprintf>
  seg->len = p->tot_len - optlen;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	891a      	ldrh	r2, [r3, #8]
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dfee:	2114      	movs	r1, #20
 800dff0:	68b8      	ldr	r0, [r7, #8]
 800dff2:	f7fb fdbd 	bl	8009b70 <pbuf_add_header>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d004      	beq.n	800e006 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800dffc:	6938      	ldr	r0, [r7, #16]
 800dffe:	f7fd f8d2 	bl	800b1a6 <tcp_seg_free>
    return NULL;
 800e002:	2300      	movs	r3, #0
 800e004:	e036      	b.n	800e074 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	8ada      	ldrh	r2, [r3, #22]
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	68dc      	ldr	r4, [r3, #12]
 800e018:	4610      	mov	r0, r2
 800e01a:	f7fa fae1 	bl	80085e0 <lwip_htons>
 800e01e:	4603      	mov	r3, r0
 800e020:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	8b1a      	ldrh	r2, [r3, #24]
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	68dc      	ldr	r4, [r3, #12]
 800e02a:	4610      	mov	r0, r2
 800e02c:	f7fa fad8 	bl	80085e0 <lwip_htons>
 800e030:	4603      	mov	r3, r0
 800e032:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	68dc      	ldr	r4, [r3, #12]
 800e038:	6838      	ldr	r0, [r7, #0]
 800e03a:	f7fa fae6 	bl	800860a <lwip_htonl>
 800e03e:	4603      	mov	r3, r0
 800e040:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e042:	7dfb      	ldrb	r3, [r7, #23]
 800e044:	089b      	lsrs	r3, r3, #2
 800e046:	b2db      	uxtb	r3, r3
 800e048:	3305      	adds	r3, #5
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	031b      	lsls	r3, r3, #12
 800e04e:	b29a      	uxth	r2, r3
 800e050:	79fb      	ldrb	r3, [r7, #7]
 800e052:	b29b      	uxth	r3, r3
 800e054:	4313      	orrs	r3, r2
 800e056:	b29a      	uxth	r2, r3
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	68dc      	ldr	r4, [r3, #12]
 800e05c:	4610      	mov	r0, r2
 800e05e:	f7fa fabf 	bl	80085e0 <lwip_htons>
 800e062:	4603      	mov	r3, r0
 800e064:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	749a      	strb	r2, [r3, #18]
 800e06e:	2200      	movs	r2, #0
 800e070:	74da      	strb	r2, [r3, #19]
  return seg;
 800e072:	693b      	ldr	r3, [r7, #16]
}
 800e074:	4618      	mov	r0, r3
 800e076:	371c      	adds	r7, #28
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd90      	pop	{r4, r7, pc}
 800e07c:	0801554c 	.word	0x0801554c
 800e080:	08015580 	.word	0x08015580
 800e084:	080155a0 	.word	0x080155a0
 800e088:	080155c8 	.word	0x080155c8
 800e08c:	080155ec 	.word	0x080155ec

0800e090 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e090:	b590      	push	{r4, r7, lr}
 800e092:	b08b      	sub	sp, #44	@ 0x2c
 800e094:	af02      	add	r7, sp, #8
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e09c:	2300      	movs	r3, #0
 800e09e:	61fb      	str	r3, [r7, #28]
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d106      	bne.n	800e0bc <tcp_split_unsent_seg+0x2c>
 800e0ae:	4b95      	ldr	r3, [pc, #596]	@ (800e304 <tcp_split_unsent_seg+0x274>)
 800e0b0:	f240 324b 	movw	r2, #843	@ 0x34b
 800e0b4:	4994      	ldr	r1, [pc, #592]	@ (800e308 <tcp_split_unsent_seg+0x278>)
 800e0b6:	4895      	ldr	r0, [pc, #596]	@ (800e30c <tcp_split_unsent_seg+0x27c>)
 800e0b8:	f004 ff68 	bl	8012f8c <iprintf>

  useg = pcb->unsent;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0cc:	e116      	b.n	800e2fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e0ce:	887b      	ldrh	r3, [r7, #2]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d109      	bne.n	800e0e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e0d4:	4b8b      	ldr	r3, [pc, #556]	@ (800e304 <tcp_split_unsent_seg+0x274>)
 800e0d6:	f240 3253 	movw	r2, #851	@ 0x353
 800e0da:	498d      	ldr	r1, [pc, #564]	@ (800e310 <tcp_split_unsent_seg+0x280>)
 800e0dc:	488b      	ldr	r0, [pc, #556]	@ (800e30c <tcp_split_unsent_seg+0x27c>)
 800e0de:	f004 ff55 	bl	8012f8c <iprintf>
    return ERR_VAL;
 800e0e2:	f06f 0305 	mvn.w	r3, #5
 800e0e6:	e109      	b.n	800e2fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	891b      	ldrh	r3, [r3, #8]
 800e0ec:	887a      	ldrh	r2, [r7, #2]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d301      	bcc.n	800e0f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	e102      	b.n	800e2fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0fa:	887a      	ldrh	r2, [r7, #2]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d906      	bls.n	800e10e <tcp_split_unsent_seg+0x7e>
 800e100:	4b80      	ldr	r3, [pc, #512]	@ (800e304 <tcp_split_unsent_seg+0x274>)
 800e102:	f240 325b 	movw	r2, #859	@ 0x35b
 800e106:	4983      	ldr	r1, [pc, #524]	@ (800e314 <tcp_split_unsent_seg+0x284>)
 800e108:	4880      	ldr	r0, [pc, #512]	@ (800e30c <tcp_split_unsent_seg+0x27c>)
 800e10a:	f004 ff3f 	bl	8012f8c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	891b      	ldrh	r3, [r3, #8]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <tcp_split_unsent_seg+0x94>
 800e116:	4b7b      	ldr	r3, [pc, #492]	@ (800e304 <tcp_split_unsent_seg+0x274>)
 800e118:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e11c:	497e      	ldr	r1, [pc, #504]	@ (800e318 <tcp_split_unsent_seg+0x288>)
 800e11e:	487b      	ldr	r0, [pc, #492]	@ (800e30c <tcp_split_unsent_seg+0x27c>)
 800e120:	f004 ff34 	bl	8012f8c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	7a9b      	ldrb	r3, [r3, #10]
 800e128:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	f003 0304 	and.w	r3, r3, #4
 800e134:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	891a      	ldrh	r2, [r3, #8]
 800e13a:	887b      	ldrh	r3, [r7, #2]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e140:	7bbb      	ldrb	r3, [r7, #14]
 800e142:	b29a      	uxth	r2, r3
 800e144:	89bb      	ldrh	r3, [r7, #12]
 800e146:	4413      	add	r3, r2
 800e148:	b29b      	uxth	r3, r3
 800e14a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e14e:	4619      	mov	r1, r3
 800e150:	2036      	movs	r0, #54	@ 0x36
 800e152:	f7fb fabf 	bl	80096d4 <pbuf_alloc>
 800e156:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 80b7 	beq.w	800e2ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	891a      	ldrh	r2, [r3, #8]
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	891b      	ldrh	r3, [r3, #8]
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	887b      	ldrh	r3, [r7, #2]
 800e170:	4413      	add	r3, r2
 800e172:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	6858      	ldr	r0, [r3, #4]
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	7bbb      	ldrb	r3, [r7, #14]
 800e17e:	18d1      	adds	r1, r2, r3
 800e180:	897b      	ldrh	r3, [r7, #10]
 800e182:	89ba      	ldrh	r2, [r7, #12]
 800e184:	f7fb ff84 	bl	800a090 <pbuf_copy_partial>
 800e188:	4603      	mov	r3, r0
 800e18a:	461a      	mov	r2, r3
 800e18c:	89bb      	ldrh	r3, [r7, #12]
 800e18e:	4293      	cmp	r3, r2
 800e190:	f040 809f 	bne.w	800e2d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	899b      	ldrh	r3, [r3, #12]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7fa fa1f 	bl	80085e0 <lwip_htons>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e1b0:	7efb      	ldrb	r3, [r7, #27]
 800e1b2:	f003 0308 	and.w	r3, r3, #8
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d007      	beq.n	800e1ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e1ba:	7efb      	ldrb	r3, [r7, #27]
 800e1bc:	f023 0308 	bic.w	r3, r3, #8
 800e1c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e1c2:	7ebb      	ldrb	r3, [r7, #26]
 800e1c4:	f043 0308 	orr.w	r3, r3, #8
 800e1c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e1ca:	7efb      	ldrb	r3, [r7, #27]
 800e1cc:	f003 0301 	and.w	r3, r3, #1
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d007      	beq.n	800e1e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e1d4:	7efb      	ldrb	r3, [r7, #27]
 800e1d6:	f023 0301 	bic.w	r3, r3, #1
 800e1da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e1dc:	7ebb      	ldrb	r3, [r7, #26]
 800e1de:	f043 0301 	orr.w	r3, r3, #1
 800e1e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fa fa0d 	bl	800860a <lwip_htonl>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	887b      	ldrh	r3, [r7, #2]
 800e1f4:	18d1      	adds	r1, r2, r3
 800e1f6:	7eba      	ldrb	r2, [r7, #26]
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	6939      	ldr	r1, [r7, #16]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff fea9 	bl	800df58 <tcp_create_segment>
 800e206:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d063      	beq.n	800e2d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	4618      	mov	r0, r3
 800e214:	f7fb fdca 	bl	8009dac <pbuf_clen>
 800e218:	4603      	mov	r3, r0
 800e21a:	461a      	mov	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e222:	1a9b      	subs	r3, r3, r2
 800e224:	b29a      	uxth	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	6858      	ldr	r0, [r3, #4]
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	891a      	ldrh	r2, [r3, #8]
 800e236:	89bb      	ldrh	r3, [r7, #12]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	4619      	mov	r1, r3
 800e23e:	f7fb fba7 	bl	8009990 <pbuf_realloc>
  useg->len -= remainder;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	891a      	ldrh	r2, [r3, #8]
 800e246:	89bb      	ldrh	r3, [r7, #12]
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	899b      	ldrh	r3, [r3, #12]
 800e256:	b29c      	uxth	r4, r3
 800e258:	7efb      	ldrb	r3, [r7, #27]
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fa f9bf 	bl	80085e0 <lwip_htons>
 800e262:	4603      	mov	r3, r0
 800e264:	461a      	mov	r2, r3
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	4322      	orrs	r2, r4
 800e26c:	b292      	uxth	r2, r2
 800e26e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	4618      	mov	r0, r3
 800e276:	f7fb fd99 	bl	8009dac <pbuf_clen>
 800e27a:	4603      	mov	r3, r0
 800e27c:	461a      	mov	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e284:	4413      	add	r3, r2
 800e286:	b29a      	uxth	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	4618      	mov	r0, r3
 800e294:	f7fb fd8a 	bl	8009dac <pbuf_clen>
 800e298:	4603      	mov	r3, r0
 800e29a:	461a      	mov	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e2a2:	4413      	add	r3, r2
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	69fa      	ldr	r2, [r7, #28]
 800e2b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d103      	bne.n	800e2ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	e016      	b.n	800e2fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e2ce:	bf00      	nop
 800e2d0:	e002      	b.n	800e2d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2d2:	bf00      	nop
 800e2d4:	e000      	b.n	800e2d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d006      	beq.n	800e2ec <tcp_split_unsent_seg+0x25c>
 800e2de:	4b09      	ldr	r3, [pc, #36]	@ (800e304 <tcp_split_unsent_seg+0x274>)
 800e2e0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e2e4:	490d      	ldr	r1, [pc, #52]	@ (800e31c <tcp_split_unsent_seg+0x28c>)
 800e2e6:	4809      	ldr	r0, [pc, #36]	@ (800e30c <tcp_split_unsent_seg+0x27c>)
 800e2e8:	f004 fe50 	bl	8012f8c <iprintf>
  if (p != NULL) {
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d002      	beq.n	800e2f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e2f2:	6938      	ldr	r0, [r7, #16]
 800e2f4:	f7fb fcd2 	bl	8009c9c <pbuf_free>
  }

  return ERR_MEM;
 800e2f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3724      	adds	r7, #36	@ 0x24
 800e300:	46bd      	mov	sp, r7
 800e302:	bd90      	pop	{r4, r7, pc}
 800e304:	0801554c 	.word	0x0801554c
 800e308:	080158e0 	.word	0x080158e0
 800e30c:	080155a0 	.word	0x080155a0
 800e310:	08015904 	.word	0x08015904
 800e314:	08015928 	.word	0x08015928
 800e318:	08015938 	.word	0x08015938
 800e31c:	08015948 	.word	0x08015948

0800e320 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e320:	b590      	push	{r4, r7, lr}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d106      	bne.n	800e33c <tcp_send_fin+0x1c>
 800e32e:	4b21      	ldr	r3, [pc, #132]	@ (800e3b4 <tcp_send_fin+0x94>)
 800e330:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e334:	4920      	ldr	r1, [pc, #128]	@ (800e3b8 <tcp_send_fin+0x98>)
 800e336:	4821      	ldr	r0, [pc, #132]	@ (800e3bc <tcp_send_fin+0x9c>)
 800e338:	f004 fe28 	bl	8012f8c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e340:	2b00      	cmp	r3, #0
 800e342:	d02e      	beq.n	800e3a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e348:	60fb      	str	r3, [r7, #12]
 800e34a:	e002      	b.n	800e352 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1f8      	bne.n	800e34c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	899b      	ldrh	r3, [r3, #12]
 800e360:	b29b      	uxth	r3, r3
 800e362:	4618      	mov	r0, r3
 800e364:	f7fa f93c 	bl	80085e0 <lwip_htons>
 800e368:	4603      	mov	r3, r0
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	f003 0307 	and.w	r3, r3, #7
 800e370:	2b00      	cmp	r3, #0
 800e372:	d116      	bne.n	800e3a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	899b      	ldrh	r3, [r3, #12]
 800e37a:	b29c      	uxth	r4, r3
 800e37c:	2001      	movs	r0, #1
 800e37e:	f7fa f92f 	bl	80085e0 <lwip_htons>
 800e382:	4603      	mov	r3, r0
 800e384:	461a      	mov	r2, r3
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	4322      	orrs	r2, r4
 800e38c:	b292      	uxth	r2, r2
 800e38e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	8b5b      	ldrh	r3, [r3, #26]
 800e394:	f043 0320 	orr.w	r3, r3, #32
 800e398:	b29a      	uxth	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e004      	b.n	800e3ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e3a2:	2101      	movs	r1, #1
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f80b 	bl	800e3c0 <tcp_enqueue_flags>
 800e3aa:	4603      	mov	r3, r0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd90      	pop	{r4, r7, pc}
 800e3b4:	0801554c 	.word	0x0801554c
 800e3b8:	08015954 	.word	0x08015954
 800e3bc:	080155a0 	.word	0x080155a0

0800e3c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b08a      	sub	sp, #40	@ 0x28
 800e3c4:	af02      	add	r7, sp, #8
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e3d4:	78fb      	ldrb	r3, [r7, #3]
 800e3d6:	f003 0303 	and.w	r3, r3, #3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <tcp_enqueue_flags+0x2c>
 800e3de:	4b67      	ldr	r3, [pc, #412]	@ (800e57c <tcp_enqueue_flags+0x1bc>)
 800e3e0:	f240 4211 	movw	r2, #1041	@ 0x411
 800e3e4:	4966      	ldr	r1, [pc, #408]	@ (800e580 <tcp_enqueue_flags+0x1c0>)
 800e3e6:	4867      	ldr	r0, [pc, #412]	@ (800e584 <tcp_enqueue_flags+0x1c4>)
 800e3e8:	f004 fdd0 	bl	8012f8c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d106      	bne.n	800e400 <tcp_enqueue_flags+0x40>
 800e3f2:	4b62      	ldr	r3, [pc, #392]	@ (800e57c <tcp_enqueue_flags+0x1bc>)
 800e3f4:	f240 4213 	movw	r2, #1043	@ 0x413
 800e3f8:	4963      	ldr	r1, [pc, #396]	@ (800e588 <tcp_enqueue_flags+0x1c8>)
 800e3fa:	4862      	ldr	r0, [pc, #392]	@ (800e584 <tcp_enqueue_flags+0x1c4>)
 800e3fc:	f004 fdc6 	bl	8012f8c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e400:	78fb      	ldrb	r3, [r7, #3]
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e40a:	2301      	movs	r3, #1
 800e40c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e40e:	7ffb      	ldrb	r3, [r7, #31]
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f003 0304 	and.w	r3, r3, #4
 800e418:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e422:	4619      	mov	r1, r3
 800e424:	2036      	movs	r0, #54	@ 0x36
 800e426:	f7fb f955 	bl	80096d4 <pbuf_alloc>
 800e42a:	6138      	str	r0, [r7, #16]
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d109      	bne.n	800e446 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	8b5b      	ldrh	r3, [r3, #26]
 800e436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e440:	f04f 33ff 	mov.w	r3, #4294967295
 800e444:	e095      	b.n	800e572 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	895a      	ldrh	r2, [r3, #10]
 800e44a:	7dfb      	ldrb	r3, [r7, #23]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	429a      	cmp	r2, r3
 800e450:	d206      	bcs.n	800e460 <tcp_enqueue_flags+0xa0>
 800e452:	4b4a      	ldr	r3, [pc, #296]	@ (800e57c <tcp_enqueue_flags+0x1bc>)
 800e454:	f240 4239 	movw	r2, #1081	@ 0x439
 800e458:	494c      	ldr	r1, [pc, #304]	@ (800e58c <tcp_enqueue_flags+0x1cc>)
 800e45a:	484a      	ldr	r0, [pc, #296]	@ (800e584 <tcp_enqueue_flags+0x1c4>)
 800e45c:	f004 fd96 	bl	8012f8c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e464:	78fa      	ldrb	r2, [r7, #3]
 800e466:	7ffb      	ldrb	r3, [r7, #31]
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	460b      	mov	r3, r1
 800e46c:	6939      	ldr	r1, [r7, #16]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff fd72 	bl	800df58 <tcp_create_segment>
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d109      	bne.n	800e490 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	8b5b      	ldrh	r3, [r3, #26]
 800e480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e484:	b29a      	uxth	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e48a:	f04f 33ff 	mov.w	r3, #4294967295
 800e48e:	e070      	b.n	800e572 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	f003 0303 	and.w	r3, r3, #3
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d006      	beq.n	800e4aa <tcp_enqueue_flags+0xea>
 800e49c:	4b37      	ldr	r3, [pc, #220]	@ (800e57c <tcp_enqueue_flags+0x1bc>)
 800e49e:	f240 4242 	movw	r2, #1090	@ 0x442
 800e4a2:	493b      	ldr	r1, [pc, #236]	@ (800e590 <tcp_enqueue_flags+0x1d0>)
 800e4a4:	4837      	ldr	r0, [pc, #220]	@ (800e584 <tcp_enqueue_flags+0x1c4>)
 800e4a6:	f004 fd71 	bl	8012f8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	891b      	ldrh	r3, [r3, #8]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d006      	beq.n	800e4c0 <tcp_enqueue_flags+0x100>
 800e4b2:	4b32      	ldr	r3, [pc, #200]	@ (800e57c <tcp_enqueue_flags+0x1bc>)
 800e4b4:	f240 4243 	movw	r2, #1091	@ 0x443
 800e4b8:	4936      	ldr	r1, [pc, #216]	@ (800e594 <tcp_enqueue_flags+0x1d4>)
 800e4ba:	4832      	ldr	r0, [pc, #200]	@ (800e584 <tcp_enqueue_flags+0x1c4>)
 800e4bc:	f004 fd66 	bl	8012f8c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d103      	bne.n	800e4d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e4ce:	e00d      	b.n	800e4ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4d4:	61bb      	str	r3, [r7, #24]
 800e4d6:	e002      	b.n	800e4de <tcp_enqueue_flags+0x11e>
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	61bb      	str	r3, [r7, #24]
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1f8      	bne.n	800e4d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e4f4:	78fb      	ldrb	r3, [r7, #3]
 800e4f6:	f003 0302 	and.w	r3, r3, #2
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d104      	bne.n	800e508 <tcp_enqueue_flags+0x148>
 800e4fe:	78fb      	ldrb	r3, [r7, #3]
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	2b00      	cmp	r3, #0
 800e506:	d004      	beq.n	800e512 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e50c:	1c5a      	adds	r2, r3, #1
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e512:	78fb      	ldrb	r3, [r7, #3]
 800e514:	f003 0301 	and.w	r3, r3, #1
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d006      	beq.n	800e52a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	8b5b      	ldrh	r3, [r3, #26]
 800e520:	f043 0320 	orr.w	r3, r3, #32
 800e524:	b29a      	uxth	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fb fc3c 	bl	8009dac <pbuf_clen>
 800e534:	4603      	mov	r3, r0
 800e536:	461a      	mov	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e53e:	4413      	add	r3, r2
 800e540:	b29a      	uxth	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00e      	beq.n	800e570 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10a      	bne.n	800e570 <tcp_enqueue_flags+0x1b0>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d106      	bne.n	800e570 <tcp_enqueue_flags+0x1b0>
 800e562:	4b06      	ldr	r3, [pc, #24]	@ (800e57c <tcp_enqueue_flags+0x1bc>)
 800e564:	f240 4265 	movw	r2, #1125	@ 0x465
 800e568:	490b      	ldr	r1, [pc, #44]	@ (800e598 <tcp_enqueue_flags+0x1d8>)
 800e56a:	4806      	ldr	r0, [pc, #24]	@ (800e584 <tcp_enqueue_flags+0x1c4>)
 800e56c:	f004 fd0e 	bl	8012f8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3720      	adds	r7, #32
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	0801554c 	.word	0x0801554c
 800e580:	08015970 	.word	0x08015970
 800e584:	080155a0 	.word	0x080155a0
 800e588:	080159c8 	.word	0x080159c8
 800e58c:	080159e8 	.word	0x080159e8
 800e590:	08015a24 	.word	0x08015a24
 800e594:	08015a3c 	.word	0x08015a3c
 800e598:	08015a68 	.word	0x08015a68

0800e59c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e59c:	b5b0      	push	{r4, r5, r7, lr}
 800e59e:	b08a      	sub	sp, #40	@ 0x28
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <tcp_output+0x1c>
 800e5aa:	4b8a      	ldr	r3, [pc, #552]	@ (800e7d4 <tcp_output+0x238>)
 800e5ac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e5b0:	4989      	ldr	r1, [pc, #548]	@ (800e7d8 <tcp_output+0x23c>)
 800e5b2:	488a      	ldr	r0, [pc, #552]	@ (800e7dc <tcp_output+0x240>)
 800e5b4:	f004 fcea 	bl	8012f8c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	7d1b      	ldrb	r3, [r3, #20]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d106      	bne.n	800e5ce <tcp_output+0x32>
 800e5c0:	4b84      	ldr	r3, [pc, #528]	@ (800e7d4 <tcp_output+0x238>)
 800e5c2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e5c6:	4986      	ldr	r1, [pc, #536]	@ (800e7e0 <tcp_output+0x244>)
 800e5c8:	4884      	ldr	r0, [pc, #528]	@ (800e7dc <tcp_output+0x240>)
 800e5ca:	f004 fcdf 	bl	8012f8c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e5ce:	4b85      	ldr	r3, [pc, #532]	@ (800e7e4 <tcp_output+0x248>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d101      	bne.n	800e5dc <tcp_output+0x40>
    return ERR_OK;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	e1ce      	b.n	800e97a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	bf28      	it	cs
 800e5ec:	4613      	movcs	r3, r2
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d10b      	bne.n	800e616 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8b5b      	ldrh	r3, [r3, #26]
 800e602:	f003 0302 	and.w	r3, r3, #2
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 81aa 	beq.w	800e960 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 fdcb 	bl	800f1a8 <tcp_send_empty_ack>
 800e612:	4603      	mov	r3, r0
 800e614:	e1b1      	b.n	800e97a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3304      	adds	r3, #4
 800e61c:	461a      	mov	r2, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff fc7e 	bl	800df20 <tcp_route>
 800e624:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d102      	bne.n	800e632 <tcp_output+0x96>
    return ERR_RTE;
 800e62c:	f06f 0303 	mvn.w	r3, #3
 800e630:	e1a3      	b.n	800e97a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d003      	beq.n	800e640 <tcp_output+0xa4>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d111      	bne.n	800e664 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d002      	beq.n	800e64c <tcp_output+0xb0>
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	3304      	adds	r3, #4
 800e64a:	e000      	b.n	800e64e <tcp_output+0xb2>
 800e64c:	2300      	movs	r3, #0
 800e64e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d102      	bne.n	800e65c <tcp_output+0xc0>
      return ERR_RTE;
 800e656:	f06f 0303 	mvn.w	r3, #3
 800e65a:	e18e      	b.n	800e97a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7f9 ffcd 	bl	800860a <lwip_htonl>
 800e670:	4602      	mov	r2, r0
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e67a:	8912      	ldrh	r2, [r2, #8]
 800e67c:	4413      	add	r3, r2
 800e67e:	69ba      	ldr	r2, [r7, #24]
 800e680:	429a      	cmp	r2, r3
 800e682:	d227      	bcs.n	800e6d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e68a:	461a      	mov	r2, r3
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	4293      	cmp	r3, r2
 800e690:	d114      	bne.n	800e6bc <tcp_output+0x120>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e696:	2b00      	cmp	r3, #0
 800e698:	d110      	bne.n	800e6bc <tcp_output+0x120>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10b      	bne.n	800e6bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	8b5b      	ldrh	r3, [r3, #26]
 800e6c0:	f003 0302 	and.w	r3, r3, #2
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f000 814d 	beq.w	800e964 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fd6c 	bl	800f1a8 <tcp_send_empty_ack>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	e152      	b.n	800e97a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f000 811c 	beq.w	800e922 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e6ea:	e002      	b.n	800e6f2 <tcp_output+0x156>
 800e6ec:	6a3b      	ldr	r3, [r7, #32]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	623b      	str	r3, [r7, #32]
 800e6f2:	6a3b      	ldr	r3, [r7, #32]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1f8      	bne.n	800e6ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e6fa:	e112      	b.n	800e922 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	899b      	ldrh	r3, [r3, #12]
 800e702:	b29b      	uxth	r3, r3
 800e704:	4618      	mov	r0, r3
 800e706:	f7f9 ff6b 	bl	80085e0 <lwip_htons>
 800e70a:	4603      	mov	r3, r0
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	f003 0304 	and.w	r3, r3, #4
 800e712:	2b00      	cmp	r3, #0
 800e714:	d006      	beq.n	800e724 <tcp_output+0x188>
 800e716:	4b2f      	ldr	r3, [pc, #188]	@ (800e7d4 <tcp_output+0x238>)
 800e718:	f240 5236 	movw	r2, #1334	@ 0x536
 800e71c:	4932      	ldr	r1, [pc, #200]	@ (800e7e8 <tcp_output+0x24c>)
 800e71e:	482f      	ldr	r0, [pc, #188]	@ (800e7dc <tcp_output+0x240>)
 800e720:	f004 fc34 	bl	8012f8c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d01f      	beq.n	800e76c <tcp_output+0x1d0>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	8b5b      	ldrh	r3, [r3, #26]
 800e730:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e734:	2b00      	cmp	r3, #0
 800e736:	d119      	bne.n	800e76c <tcp_output+0x1d0>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00b      	beq.n	800e758 <tcp_output+0x1bc>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d110      	bne.n	800e76c <tcp_output+0x1d0>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e74e:	891a      	ldrh	r2, [r3, #8]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e754:	429a      	cmp	r2, r3
 800e756:	d209      	bcs.n	800e76c <tcp_output+0x1d0>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d004      	beq.n	800e76c <tcp_output+0x1d0>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e768:	2b08      	cmp	r3, #8
 800e76a:	d901      	bls.n	800e770 <tcp_output+0x1d4>
 800e76c:	2301      	movs	r3, #1
 800e76e:	e000      	b.n	800e772 <tcp_output+0x1d6>
 800e770:	2300      	movs	r3, #0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d106      	bne.n	800e784 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	8b5b      	ldrh	r3, [r3, #26]
 800e77a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 80e4 	beq.w	800e94c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	2b02      	cmp	r3, #2
 800e78a:	d00d      	beq.n	800e7a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	899b      	ldrh	r3, [r3, #12]
 800e792:	b29c      	uxth	r4, r3
 800e794:	2010      	movs	r0, #16
 800e796:	f7f9 ff23 	bl	80085e0 <lwip_htons>
 800e79a:	4603      	mov	r3, r0
 800e79c:	461a      	mov	r2, r3
 800e79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	4322      	orrs	r2, r4
 800e7a4:	b292      	uxth	r2, r2
 800e7a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e7ae:	f000 f909 	bl	800e9c4 <tcp_output_segment>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d016      	beq.n	800e7ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	8b5b      	ldrh	r3, [r3, #26]
 800e7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	835a      	strh	r2, [r3, #26]
      return err;
 800e7cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7d0:	e0d3      	b.n	800e97a <tcp_output+0x3de>
 800e7d2:	bf00      	nop
 800e7d4:	0801554c 	.word	0x0801554c
 800e7d8:	08015a90 	.word	0x08015a90
 800e7dc:	080155a0 	.word	0x080155a0
 800e7e0:	08015aa8 	.word	0x08015aa8
 800e7e4:	20008a90 	.word	0x20008a90
 800e7e8:	08015ad0 	.word	0x08015ad0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	7d1b      	ldrb	r3, [r3, #20]
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d006      	beq.n	800e80a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	8b5b      	ldrh	r3, [r3, #26]
 800e800:	f023 0303 	bic.w	r3, r3, #3
 800e804:	b29a      	uxth	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	f7f9 fefa 	bl	800860a <lwip_htonl>
 800e816:	4604      	mov	r4, r0
 800e818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81a:	891b      	ldrh	r3, [r3, #8]
 800e81c:	461d      	mov	r5, r3
 800e81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	899b      	ldrh	r3, [r3, #12]
 800e824:	b29b      	uxth	r3, r3
 800e826:	4618      	mov	r0, r3
 800e828:	f7f9 feda 	bl	80085e0 <lwip_htons>
 800e82c:	4603      	mov	r3, r0
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	f003 0303 	and.w	r3, r3, #3
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <tcp_output+0x2a0>
 800e838:	2301      	movs	r3, #1
 800e83a:	e000      	b.n	800e83e <tcp_output+0x2a2>
 800e83c:	2300      	movs	r3, #0
 800e83e:	442b      	add	r3, r5
 800e840:	4423      	add	r3, r4
 800e842:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	da02      	bge.n	800e856 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e858:	891b      	ldrh	r3, [r3, #8]
 800e85a:	461c      	mov	r4, r3
 800e85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	899b      	ldrh	r3, [r3, #12]
 800e862:	b29b      	uxth	r3, r3
 800e864:	4618      	mov	r0, r3
 800e866:	f7f9 febb 	bl	80085e0 <lwip_htons>
 800e86a:	4603      	mov	r3, r0
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	f003 0303 	and.w	r3, r3, #3
 800e872:	2b00      	cmp	r3, #0
 800e874:	d001      	beq.n	800e87a <tcp_output+0x2de>
 800e876:	2301      	movs	r3, #1
 800e878:	e000      	b.n	800e87c <tcp_output+0x2e0>
 800e87a:	2300      	movs	r3, #0
 800e87c:	4423      	add	r3, r4
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d049      	beq.n	800e916 <tcp_output+0x37a>
      seg->next = NULL;
 800e882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e884:	2200      	movs	r2, #0
 800e886:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d105      	bne.n	800e89c <tcp_output+0x300>
        pcb->unacked = seg;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e894:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e898:	623b      	str	r3, [r7, #32]
 800e89a:	e03f      	b.n	800e91c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7f9 feb1 	bl	800860a <lwip_htonl>
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f9 feaa 	bl	800860a <lwip_htonl>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	1ae3      	subs	r3, r4, r3
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	da24      	bge.n	800e908 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3370      	adds	r3, #112	@ 0x70
 800e8c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e8c4:	e002      	b.n	800e8cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d011      	beq.n	800e8f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7f9 fe94 	bl	800860a <lwip_htonl>
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7f9 fe8d 	bl	800860a <lwip_htonl>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	dbe6      	blt.n	800e8c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	e009      	b.n	800e91c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e90c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	623b      	str	r3, [r7, #32]
 800e914:	e002      	b.n	800e91c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e916:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e918:	f7fc fc45 	bl	800b1a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e920:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e924:	2b00      	cmp	r3, #0
 800e926:	d012      	beq.n	800e94e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f9 fe6b 	bl	800860a <lwip_htonl>
 800e934:	4602      	mov	r2, r0
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e93e:	8912      	ldrh	r2, [r2, #8]
 800e940:	4413      	add	r3, r2
  while (seg != NULL &&
 800e942:	69ba      	ldr	r2, [r7, #24]
 800e944:	429a      	cmp	r2, r3
 800e946:	f4bf aed9 	bcs.w	800e6fc <tcp_output+0x160>
 800e94a:	e000      	b.n	800e94e <tcp_output+0x3b2>
      break;
 800e94c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e952:	2b00      	cmp	r3, #0
 800e954:	d108      	bne.n	800e968 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e95e:	e004      	b.n	800e96a <tcp_output+0x3ce>
    goto output_done;
 800e960:	bf00      	nop
 800e962:	e002      	b.n	800e96a <tcp_output+0x3ce>
    goto output_done;
 800e964:	bf00      	nop
 800e966:	e000      	b.n	800e96a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e968:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	8b5b      	ldrh	r3, [r3, #26]
 800e96e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3728      	adds	r7, #40	@ 0x28
 800e97e:	46bd      	mov	sp, r7
 800e980:	bdb0      	pop	{r4, r5, r7, pc}
 800e982:	bf00      	nop

0800e984 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d106      	bne.n	800e9a0 <tcp_output_segment_busy+0x1c>
 800e992:	4b09      	ldr	r3, [pc, #36]	@ (800e9b8 <tcp_output_segment_busy+0x34>)
 800e994:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e998:	4908      	ldr	r1, [pc, #32]	@ (800e9bc <tcp_output_segment_busy+0x38>)
 800e99a:	4809      	ldr	r0, [pc, #36]	@ (800e9c0 <tcp_output_segment_busy+0x3c>)
 800e99c:	f004 faf6 	bl	8012f8c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	7b9b      	ldrb	r3, [r3, #14]
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d001      	beq.n	800e9ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e000      	b.n	800e9b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	0801554c 	.word	0x0801554c
 800e9bc:	08015ae8 	.word	0x08015ae8
 800e9c0:	080155a0 	.word	0x080155a0

0800e9c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e9c4:	b5b0      	push	{r4, r5, r7, lr}
 800e9c6:	b08c      	sub	sp, #48	@ 0x30
 800e9c8:	af04      	add	r7, sp, #16
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <tcp_output_segment+0x20>
 800e9d6:	4b64      	ldr	r3, [pc, #400]	@ (800eb68 <tcp_output_segment+0x1a4>)
 800e9d8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e9dc:	4963      	ldr	r1, [pc, #396]	@ (800eb6c <tcp_output_segment+0x1a8>)
 800e9de:	4864      	ldr	r0, [pc, #400]	@ (800eb70 <tcp_output_segment+0x1ac>)
 800e9e0:	f004 fad4 	bl	8012f8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <tcp_output_segment+0x34>
 800e9ea:	4b5f      	ldr	r3, [pc, #380]	@ (800eb68 <tcp_output_segment+0x1a4>)
 800e9ec:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e9f0:	4960      	ldr	r1, [pc, #384]	@ (800eb74 <tcp_output_segment+0x1b0>)
 800e9f2:	485f      	ldr	r0, [pc, #380]	@ (800eb70 <tcp_output_segment+0x1ac>)
 800e9f4:	f004 faca 	bl	8012f8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d106      	bne.n	800ea0c <tcp_output_segment+0x48>
 800e9fe:	4b5a      	ldr	r3, [pc, #360]	@ (800eb68 <tcp_output_segment+0x1a4>)
 800ea00:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800ea04:	495c      	ldr	r1, [pc, #368]	@ (800eb78 <tcp_output_segment+0x1b4>)
 800ea06:	485a      	ldr	r0, [pc, #360]	@ (800eb70 <tcp_output_segment+0x1ac>)
 800ea08:	f004 fac0 	bl	8012f8c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff ffb9 	bl	800e984 <tcp_output_segment_busy>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d001      	beq.n	800ea1c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	e0a1      	b.n	800eb60 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	68dc      	ldr	r4, [r3, #12]
 800ea24:	4610      	mov	r0, r2
 800ea26:	f7f9 fdf0 	bl	800860a <lwip_htonl>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	68dc      	ldr	r4, [r3, #12]
 800ea36:	4610      	mov	r0, r2
 800ea38:	f7f9 fdd2 	bl	80085e0 <lwip_htons>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ea48:	441a      	add	r2, r3
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	68db      	ldr	r3, [r3, #12]
 800ea52:	3314      	adds	r3, #20
 800ea54:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	7a9b      	ldrb	r3, [r3, #10]
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d015      	beq.n	800ea8e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	3304      	adds	r3, #4
 800ea66:	461a      	mov	r2, r3
 800ea68:	6879      	ldr	r1, [r7, #4]
 800ea6a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ea6e:	f7fc fe91 	bl	800b794 <tcp_eff_send_mss_netif>
 800ea72:	4603      	mov	r3, r0
 800ea74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ea76:	8b7b      	ldrh	r3, [r7, #26]
 800ea78:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7f9 fdc4 	bl	800860a <lwip_htonl>
 800ea82:	4602      	mov	r2, r0
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	da02      	bge.n	800ea9e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10c      	bne.n	800eac0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800eaa6:	4b35      	ldr	r3, [pc, #212]	@ (800eb7c <tcp_output_segment+0x1b8>)
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f9 fda8 	bl	800860a <lwip_htonl>
 800eaba:	4602      	mov	r2, r0
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	68da      	ldr	r2, [r3, #12]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	8959      	ldrh	r1, [r3, #10]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	8b3a      	ldrh	r2, [r7, #24]
 800eada:	1a8a      	subs	r2, r1, r2
 800eadc:	b292      	uxth	r2, r2
 800eade:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	8919      	ldrh	r1, [r3, #8]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	8b3a      	ldrh	r2, [r7, #24]
 800eaec:	1a8a      	subs	r2, r1, r2
 800eaee:	b292      	uxth	r2, r2
 800eaf0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	68d2      	ldr	r2, [r2, #12]
 800eafa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	741a      	strb	r2, [r3, #16]
 800eb04:	2200      	movs	r2, #0
 800eb06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	68da      	ldr	r2, [r3, #12]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	7a9b      	ldrb	r3, [r3, #10]
 800eb10:	f003 0301 	and.w	r3, r3, #1
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d001      	beq.n	800eb1c <tcp_output_segment+0x158>
 800eb18:	2318      	movs	r3, #24
 800eb1a:	e000      	b.n	800eb1e <tcp_output_segment+0x15a>
 800eb1c:	2314      	movs	r3, #20
 800eb1e:	4413      	add	r3, r2
 800eb20:	69fa      	ldr	r2, [r7, #28]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d006      	beq.n	800eb34 <tcp_output_segment+0x170>
 800eb26:	4b10      	ldr	r3, [pc, #64]	@ (800eb68 <tcp_output_segment+0x1a4>)
 800eb28:	f240 621c 	movw	r2, #1564	@ 0x61c
 800eb2c:	4914      	ldr	r1, [pc, #80]	@ (800eb80 <tcp_output_segment+0x1bc>)
 800eb2e:	4810      	ldr	r0, [pc, #64]	@ (800eb70 <tcp_output_segment+0x1ac>)
 800eb30:	f004 fa2c 	bl	8012f8c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6858      	ldr	r0, [r3, #4]
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	1d1c      	adds	r4, r3, #4
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	7add      	ldrb	r5, [r3, #11]
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	7a9b      	ldrb	r3, [r3, #10]
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	9202      	str	r2, [sp, #8]
 800eb4a:	2206      	movs	r2, #6
 800eb4c:	9201      	str	r2, [sp, #4]
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	462b      	mov	r3, r5
 800eb52:	4622      	mov	r2, r4
 800eb54:	f002 fd24 	bl	80115a0 <ip4_output_if>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800eb5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3720      	adds	r7, #32
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bdb0      	pop	{r4, r5, r7, pc}
 800eb68:	0801554c 	.word	0x0801554c
 800eb6c:	08015b10 	.word	0x08015b10
 800eb70:	080155a0 	.word	0x080155a0
 800eb74:	08015b30 	.word	0x08015b30
 800eb78:	08015b50 	.word	0x08015b50
 800eb7c:	20008a44 	.word	0x20008a44
 800eb80:	08015b74 	.word	0x08015b74

0800eb84 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800eb84:	b5b0      	push	{r4, r5, r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d106      	bne.n	800eba0 <tcp_rexmit_rto_prepare+0x1c>
 800eb92:	4b31      	ldr	r3, [pc, #196]	@ (800ec58 <tcp_rexmit_rto_prepare+0xd4>)
 800eb94:	f240 6263 	movw	r2, #1635	@ 0x663
 800eb98:	4930      	ldr	r1, [pc, #192]	@ (800ec5c <tcp_rexmit_rto_prepare+0xd8>)
 800eb9a:	4831      	ldr	r0, [pc, #196]	@ (800ec60 <tcp_rexmit_rto_prepare+0xdc>)
 800eb9c:	f004 f9f6 	bl	8012f8c <iprintf>

  if (pcb->unacked == NULL) {
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d102      	bne.n	800ebae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eba8:	f06f 0305 	mvn.w	r3, #5
 800ebac:	e050      	b.n	800ec50 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	e00b      	b.n	800ebce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f7ff fee4 	bl	800e984 <tcp_output_segment_busy>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d002      	beq.n	800ebc8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ebc2:	f06f 0305 	mvn.w	r3, #5
 800ebc6:	e043      	b.n	800ec50 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1ef      	bne.n	800ebb6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f7ff fed4 	bl	800e984 <tcp_output_segment_busy>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d002      	beq.n	800ebe8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ebe2:	f06f 0305 	mvn.w	r3, #5
 800ebe6:	e033      	b.n	800ec50 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	8b5b      	ldrh	r3, [r3, #26]
 800ec02:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7f9 fcf9 	bl	800860a <lwip_htonl>
 800ec18:	4604      	mov	r4, r0
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	891b      	ldrh	r3, [r3, #8]
 800ec1e:	461d      	mov	r5, r3
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	899b      	ldrh	r3, [r3, #12]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7f9 fcd9 	bl	80085e0 <lwip_htons>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	f003 0303 	and.w	r3, r3, #3
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <tcp_rexmit_rto_prepare+0xba>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e000      	b.n	800ec40 <tcp_rexmit_rto_prepare+0xbc>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	442b      	add	r3, r5
 800ec42:	18e2      	adds	r2, r4, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bdb0      	pop	{r4, r5, r7, pc}
 800ec58:	0801554c 	.word	0x0801554c
 800ec5c:	08015b88 	.word	0x08015b88
 800ec60:	080155a0 	.word	0x080155a0

0800ec64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d106      	bne.n	800ec80 <tcp_rexmit_rto_commit+0x1c>
 800ec72:	4b0d      	ldr	r3, [pc, #52]	@ (800eca8 <tcp_rexmit_rto_commit+0x44>)
 800ec74:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ec78:	490c      	ldr	r1, [pc, #48]	@ (800ecac <tcp_rexmit_rto_commit+0x48>)
 800ec7a:	480d      	ldr	r0, [pc, #52]	@ (800ecb0 <tcp_rexmit_rto_commit+0x4c>)
 800ec7c:	f004 f986 	bl	8012f8c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec86:	2bff      	cmp	r3, #255	@ 0xff
 800ec88:	d007      	beq.n	800ec9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec90:	3301      	adds	r3, #1
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7ff fc7e 	bl	800e59c <tcp_output>
}
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	0801554c 	.word	0x0801554c
 800ecac:	08015bac 	.word	0x08015bac
 800ecb0:	080155a0 	.word	0x080155a0

0800ecb4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d106      	bne.n	800ecd0 <tcp_rexmit_rto+0x1c>
 800ecc2:	4b0a      	ldr	r3, [pc, #40]	@ (800ecec <tcp_rexmit_rto+0x38>)
 800ecc4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ecc8:	4909      	ldr	r1, [pc, #36]	@ (800ecf0 <tcp_rexmit_rto+0x3c>)
 800ecca:	480a      	ldr	r0, [pc, #40]	@ (800ecf4 <tcp_rexmit_rto+0x40>)
 800eccc:	f004 f95e 	bl	8012f8c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff ff57 	bl	800eb84 <tcp_rexmit_rto_prepare>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d102      	bne.n	800ece2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff ffc1 	bl	800ec64 <tcp_rexmit_rto_commit>
  }
}
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	0801554c 	.word	0x0801554c
 800ecf0:	08015bd0 	.word	0x08015bd0
 800ecf4:	080155a0 	.word	0x080155a0

0800ecf8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ecf8:	b590      	push	{r4, r7, lr}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d106      	bne.n	800ed14 <tcp_rexmit+0x1c>
 800ed06:	4b2f      	ldr	r3, [pc, #188]	@ (800edc4 <tcp_rexmit+0xcc>)
 800ed08:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ed0c:	492e      	ldr	r1, [pc, #184]	@ (800edc8 <tcp_rexmit+0xd0>)
 800ed0e:	482f      	ldr	r0, [pc, #188]	@ (800edcc <tcp_rexmit+0xd4>)
 800ed10:	f004 f93c 	bl	8012f8c <iprintf>

  if (pcb->unacked == NULL) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d102      	bne.n	800ed22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ed1c:	f06f 0305 	mvn.w	r3, #5
 800ed20:	e04c      	b.n	800edbc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ed28:	68b8      	ldr	r0, [r7, #8]
 800ed2a:	f7ff fe2b 	bl	800e984 <tcp_output_segment_busy>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ed34:	f06f 0305 	mvn.w	r3, #5
 800ed38:	e040      	b.n	800edbc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	336c      	adds	r3, #108	@ 0x6c
 800ed46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed48:	e002      	b.n	800ed50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d011      	beq.n	800ed7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7f9 fc52 	bl	800860a <lwip_htonl>
 800ed66:	4604      	mov	r4, r0
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7f9 fc4b 	bl	800860a <lwip_htonl>
 800ed74:	4603      	mov	r3, r0
 800ed76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	dbe6      	blt.n	800ed4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d103      	bne.n	800ed9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eda0:	2bff      	cmp	r3, #255	@ 0xff
 800eda2:	d007      	beq.n	800edb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800edaa:	3301      	adds	r3, #1
 800edac:	b2da      	uxtb	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800edba:	2300      	movs	r3, #0
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3714      	adds	r7, #20
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd90      	pop	{r4, r7, pc}
 800edc4:	0801554c 	.word	0x0801554c
 800edc8:	08015bec 	.word	0x08015bec
 800edcc:	080155a0 	.word	0x080155a0

0800edd0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d106      	bne.n	800edec <tcp_rexmit_fast+0x1c>
 800edde:	4b2a      	ldr	r3, [pc, #168]	@ (800ee88 <tcp_rexmit_fast+0xb8>)
 800ede0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ede4:	4929      	ldr	r1, [pc, #164]	@ (800ee8c <tcp_rexmit_fast+0xbc>)
 800ede6:	482a      	ldr	r0, [pc, #168]	@ (800ee90 <tcp_rexmit_fast+0xc0>)
 800ede8:	f004 f8d0 	bl	8012f8c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d045      	beq.n	800ee80 <tcp_rexmit_fast+0xb0>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	8b5b      	ldrh	r3, [r3, #26]
 800edf8:	f003 0304 	and.w	r3, r3, #4
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d13f      	bne.n	800ee80 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7ff ff79 	bl	800ecf8 <tcp_rexmit>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d139      	bne.n	800ee80 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	bf28      	it	cs
 800ee1c:	4613      	movcs	r3, r2
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	da00      	bge.n	800ee26 <tcp_rexmit_fast+0x56>
 800ee24:	3301      	adds	r3, #1
 800ee26:	105b      	asrs	r3, r3, #1
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ee36:	461a      	mov	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee3c:	005b      	lsls	r3, r3, #1
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d206      	bcs.n	800ee50 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	0049      	lsls	r1, r1, #1
 800ee5e:	440b      	add	r3, r1
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	4413      	add	r3, r2
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	8b5b      	ldrh	r3, [r3, #26]
 800ee70:	f043 0304 	orr.w	r3, r3, #4
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ee80:	bf00      	nop
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801554c 	.word	0x0801554c
 800ee8c:	08015c04 	.word	0x08015c04
 800ee90:	080155a0 	.word	0x080155a0

0800ee94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b086      	sub	sp, #24
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	607b      	str	r3, [r7, #4]
 800ee9e:	460b      	mov	r3, r1
 800eea0:	817b      	strh	r3, [r7, #10]
 800eea2:	4613      	mov	r3, r2
 800eea4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800eea6:	897a      	ldrh	r2, [r7, #10]
 800eea8:	893b      	ldrh	r3, [r7, #8]
 800eeaa:	4413      	add	r3, r2
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	3314      	adds	r3, #20
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	2022      	movs	r0, #34	@ 0x22
 800eeba:	f7fa fc0b 	bl	80096d4 <pbuf_alloc>
 800eebe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d04d      	beq.n	800ef62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eec6:	897b      	ldrh	r3, [r7, #10]
 800eec8:	3313      	adds	r3, #19
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	8952      	ldrh	r2, [r2, #10]
 800eece:	4293      	cmp	r3, r2
 800eed0:	db06      	blt.n	800eee0 <tcp_output_alloc_header_common+0x4c>
 800eed2:	4b26      	ldr	r3, [pc, #152]	@ (800ef6c <tcp_output_alloc_header_common+0xd8>)
 800eed4:	f240 7223 	movw	r2, #1827	@ 0x723
 800eed8:	4925      	ldr	r1, [pc, #148]	@ (800ef70 <tcp_output_alloc_header_common+0xdc>)
 800eeda:	4826      	ldr	r0, [pc, #152]	@ (800ef74 <tcp_output_alloc_header_common+0xe0>)
 800eedc:	f004 f856 	bl	8012f8c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eee6:	8c3b      	ldrh	r3, [r7, #32]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7f9 fb79 	bl	80085e0 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	461a      	mov	r2, r3
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7f9 fb71 	bl	80085e0 <lwip_htons>
 800eefe:	4603      	mov	r3, r0
 800ef00:	461a      	mov	r2, r3
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f7f9 fb7c 	bl	800860a <lwip_htonl>
 800ef12:	4602      	mov	r2, r0
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ef18:	897b      	ldrh	r3, [r7, #10]
 800ef1a:	089b      	lsrs	r3, r3, #2
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	3305      	adds	r3, #5
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	031b      	lsls	r3, r3, #12
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7f9 fb55 	bl	80085e0 <lwip_htons>
 800ef36:	4603      	mov	r3, r0
 800ef38:	461a      	mov	r2, r3
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ef3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7f9 fb4d 	bl	80085e0 <lwip_htons>
 800ef46:	4603      	mov	r3, r0
 800ef48:	461a      	mov	r2, r3
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	2200      	movs	r2, #0
 800ef52:	741a      	strb	r2, [r3, #16]
 800ef54:	2200      	movs	r2, #0
 800ef56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	749a      	strb	r2, [r3, #18]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ef62:	697b      	ldr	r3, [r7, #20]
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3718      	adds	r7, #24
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	0801554c 	.word	0x0801554c
 800ef70:	08015c24 	.word	0x08015c24
 800ef74:	080155a0 	.word	0x080155a0

0800ef78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ef78:	b5b0      	push	{r4, r5, r7, lr}
 800ef7a:	b08a      	sub	sp, #40	@ 0x28
 800ef7c:	af04      	add	r7, sp, #16
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	607b      	str	r3, [r7, #4]
 800ef82:	460b      	mov	r3, r1
 800ef84:	817b      	strh	r3, [r7, #10]
 800ef86:	4613      	mov	r3, r2
 800ef88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d106      	bne.n	800ef9e <tcp_output_alloc_header+0x26>
 800ef90:	4b15      	ldr	r3, [pc, #84]	@ (800efe8 <tcp_output_alloc_header+0x70>)
 800ef92:	f240 7242 	movw	r2, #1858	@ 0x742
 800ef96:	4915      	ldr	r1, [pc, #84]	@ (800efec <tcp_output_alloc_header+0x74>)
 800ef98:	4815      	ldr	r0, [pc, #84]	@ (800eff0 <tcp_output_alloc_header+0x78>)
 800ef9a:	f003 fff7 	bl	8012f8c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	8adb      	ldrh	r3, [r3, #22]
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	8b12      	ldrh	r2, [r2, #24]
 800efaa:	68f9      	ldr	r1, [r7, #12]
 800efac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800efae:	893d      	ldrh	r5, [r7, #8]
 800efb0:	897c      	ldrh	r4, [r7, #10]
 800efb2:	9103      	str	r1, [sp, #12]
 800efb4:	2110      	movs	r1, #16
 800efb6:	9102      	str	r1, [sp, #8]
 800efb8:	9201      	str	r2, [sp, #4]
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	462a      	mov	r2, r5
 800efc0:	4621      	mov	r1, r4
 800efc2:	f7ff ff67 	bl	800ee94 <tcp_output_alloc_header_common>
 800efc6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d006      	beq.n	800efdc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800efd6:	441a      	add	r2, r3
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800efdc:	697b      	ldr	r3, [r7, #20]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3718      	adds	r7, #24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bdb0      	pop	{r4, r5, r7, pc}
 800efe6:	bf00      	nop
 800efe8:	0801554c 	.word	0x0801554c
 800efec:	08015c54 	.word	0x08015c54
 800eff0:	080155a0 	.word	0x080155a0

0800eff4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b088      	sub	sp, #32
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	4611      	mov	r1, r2
 800f000:	461a      	mov	r2, r3
 800f002:	460b      	mov	r3, r1
 800f004:	71fb      	strb	r3, [r7, #7]
 800f006:	4613      	mov	r3, r2
 800f008:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d106      	bne.n	800f022 <tcp_output_fill_options+0x2e>
 800f014:	4b12      	ldr	r3, [pc, #72]	@ (800f060 <tcp_output_fill_options+0x6c>)
 800f016:	f240 7256 	movw	r2, #1878	@ 0x756
 800f01a:	4912      	ldr	r1, [pc, #72]	@ (800f064 <tcp_output_fill_options+0x70>)
 800f01c:	4812      	ldr	r0, [pc, #72]	@ (800f068 <tcp_output_fill_options+0x74>)
 800f01e:	f003 ffb5 	bl	8012f8c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	3314      	adds	r3, #20
 800f02c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f02e:	8bfb      	ldrh	r3, [r7, #30]
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	461a      	mov	r2, r3
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	f003 0304 	and.w	r3, r3, #4
 800f03c:	4413      	add	r3, r2
 800f03e:	3314      	adds	r3, #20
 800f040:	69ba      	ldr	r2, [r7, #24]
 800f042:	4413      	add	r3, r2
 800f044:	697a      	ldr	r2, [r7, #20]
 800f046:	429a      	cmp	r2, r3
 800f048:	d006      	beq.n	800f058 <tcp_output_fill_options+0x64>
 800f04a:	4b05      	ldr	r3, [pc, #20]	@ (800f060 <tcp_output_fill_options+0x6c>)
 800f04c:	f240 7275 	movw	r2, #1909	@ 0x775
 800f050:	4906      	ldr	r1, [pc, #24]	@ (800f06c <tcp_output_fill_options+0x78>)
 800f052:	4805      	ldr	r0, [pc, #20]	@ (800f068 <tcp_output_fill_options+0x74>)
 800f054:	f003 ff9a 	bl	8012f8c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f058:	bf00      	nop
 800f05a:	3720      	adds	r7, #32
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	0801554c 	.word	0x0801554c
 800f064:	08015c7c 	.word	0x08015c7c
 800f068:	080155a0 	.word	0x080155a0
 800f06c:	08015b74 	.word	0x08015b74

0800f070 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08a      	sub	sp, #40	@ 0x28
 800f074:	af04      	add	r7, sp, #16
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
 800f07c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d106      	bne.n	800f092 <tcp_output_control_segment+0x22>
 800f084:	4b1c      	ldr	r3, [pc, #112]	@ (800f0f8 <tcp_output_control_segment+0x88>)
 800f086:	f240 7287 	movw	r2, #1927	@ 0x787
 800f08a:	491c      	ldr	r1, [pc, #112]	@ (800f0fc <tcp_output_control_segment+0x8c>)
 800f08c:	481c      	ldr	r0, [pc, #112]	@ (800f100 <tcp_output_control_segment+0x90>)
 800f08e:	f003 ff7d 	bl	8012f8c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f7fe ff42 	bl	800df20 <tcp_route>
 800f09c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d102      	bne.n	800f0aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f0a4:	23fc      	movs	r3, #252	@ 0xfc
 800f0a6:	75fb      	strb	r3, [r7, #23]
 800f0a8:	e01c      	b.n	800f0e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d006      	beq.n	800f0be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	7adb      	ldrb	r3, [r3, #11]
 800f0b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	7a9b      	ldrb	r3, [r3, #10]
 800f0ba:	757b      	strb	r3, [r7, #21]
 800f0bc:	e003      	b.n	800f0c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f0be:	23ff      	movs	r3, #255	@ 0xff
 800f0c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f0c6:	7dba      	ldrb	r2, [r7, #22]
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	9302      	str	r3, [sp, #8]
 800f0cc:	2306      	movs	r3, #6
 800f0ce:	9301      	str	r3, [sp, #4]
 800f0d0:	7d7b      	ldrb	r3, [r7, #21]
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	683a      	ldr	r2, [r7, #0]
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	68b8      	ldr	r0, [r7, #8]
 800f0dc:	f002 fa60 	bl	80115a0 <ip4_output_if>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f0e4:	68b8      	ldr	r0, [r7, #8]
 800f0e6:	f7fa fdd9 	bl	8009c9c <pbuf_free>
  return err;
 800f0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3718      	adds	r7, #24
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	0801554c 	.word	0x0801554c
 800f0fc:	08015ca4 	.word	0x08015ca4
 800f100:	080155a0 	.word	0x080155a0

0800f104 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f104:	b590      	push	{r4, r7, lr}
 800f106:	b08b      	sub	sp, #44	@ 0x2c
 800f108:	af04      	add	r7, sp, #16
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d106      	bne.n	800f126 <tcp_rst+0x22>
 800f118:	4b1f      	ldr	r3, [pc, #124]	@ (800f198 <tcp_rst+0x94>)
 800f11a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f11e:	491f      	ldr	r1, [pc, #124]	@ (800f19c <tcp_rst+0x98>)
 800f120:	481f      	ldr	r0, [pc, #124]	@ (800f1a0 <tcp_rst+0x9c>)
 800f122:	f003 ff33 	bl	8012f8c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d106      	bne.n	800f13a <tcp_rst+0x36>
 800f12c:	4b1a      	ldr	r3, [pc, #104]	@ (800f198 <tcp_rst+0x94>)
 800f12e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f132:	491c      	ldr	r1, [pc, #112]	@ (800f1a4 <tcp_rst+0xa0>)
 800f134:	481a      	ldr	r0, [pc, #104]	@ (800f1a0 <tcp_rst+0x9c>)
 800f136:	f003 ff29 	bl	8012f8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f13a:	2300      	movs	r3, #0
 800f13c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f13e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f142:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f144:	7dfb      	ldrb	r3, [r7, #23]
 800f146:	b29c      	uxth	r4, r3
 800f148:	68b8      	ldr	r0, [r7, #8]
 800f14a:	f7f9 fa5e 	bl	800860a <lwip_htonl>
 800f14e:	4602      	mov	r2, r0
 800f150:	8abb      	ldrh	r3, [r7, #20]
 800f152:	9303      	str	r3, [sp, #12]
 800f154:	2314      	movs	r3, #20
 800f156:	9302      	str	r3, [sp, #8]
 800f158:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f15a:	9301      	str	r3, [sp, #4]
 800f15c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f15e:	9300      	str	r3, [sp, #0]
 800f160:	4613      	mov	r3, r2
 800f162:	2200      	movs	r2, #0
 800f164:	4621      	mov	r1, r4
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7ff fe94 	bl	800ee94 <tcp_output_alloc_header_common>
 800f16c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d00c      	beq.n	800f18e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f174:	7dfb      	ldrb	r3, [r7, #23]
 800f176:	2200      	movs	r2, #0
 800f178:	6939      	ldr	r1, [r7, #16]
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f7ff ff3a 	bl	800eff4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	6939      	ldr	r1, [r7, #16]
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f7ff ff72 	bl	800f070 <tcp_output_control_segment>
 800f18c:	e000      	b.n	800f190 <tcp_rst+0x8c>
    return;
 800f18e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f190:	371c      	adds	r7, #28
 800f192:	46bd      	mov	sp, r7
 800f194:	bd90      	pop	{r4, r7, pc}
 800f196:	bf00      	nop
 800f198:	0801554c 	.word	0x0801554c
 800f19c:	08015cd0 	.word	0x08015cd0
 800f1a0:	080155a0 	.word	0x080155a0
 800f1a4:	08015cec 	.word	0x08015cec

0800f1a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f1a8:	b590      	push	{r4, r7, lr}
 800f1aa:	b087      	sub	sp, #28
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d106      	bne.n	800f1cc <tcp_send_empty_ack+0x24>
 800f1be:	4b28      	ldr	r3, [pc, #160]	@ (800f260 <tcp_send_empty_ack+0xb8>)
 800f1c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f1c4:	4927      	ldr	r1, [pc, #156]	@ (800f264 <tcp_send_empty_ack+0xbc>)
 800f1c6:	4828      	ldr	r0, [pc, #160]	@ (800f268 <tcp_send_empty_ack+0xc0>)
 800f1c8:	f003 fee0 	bl	8012f8c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f1cc:	7dfb      	ldrb	r3, [r7, #23]
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	f003 0304 	and.w	r3, r3, #4
 800f1d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f1d8:	7d7b      	ldrb	r3, [r7, #21]
 800f1da:	b29c      	uxth	r4, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7f9 fa12 	bl	800860a <lwip_htonl>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f7ff fec3 	bl	800ef78 <tcp_output_alloc_header>
 800f1f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d109      	bne.n	800f20e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	8b5b      	ldrh	r3, [r3, #26]
 800f1fe:	f043 0303 	orr.w	r3, r3, #3
 800f202:	b29a      	uxth	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f208:	f06f 0301 	mvn.w	r3, #1
 800f20c:	e023      	b.n	800f256 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f20e:	7dbb      	ldrb	r3, [r7, #22]
 800f210:	7dfa      	ldrb	r2, [r7, #23]
 800f212:	6939      	ldr	r1, [r7, #16]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff feed 	bl	800eff4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3304      	adds	r3, #4
 800f220:	6939      	ldr	r1, [r7, #16]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff ff24 	bl	800f070 <tcp_output_control_segment>
 800f228:	4603      	mov	r3, r0
 800f22a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f22c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d007      	beq.n	800f244 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	8b5b      	ldrh	r3, [r3, #26]
 800f238:	f043 0303 	orr.w	r3, r3, #3
 800f23c:	b29a      	uxth	r2, r3
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	835a      	strh	r2, [r3, #26]
 800f242:	e006      	b.n	800f252 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	8b5b      	ldrh	r3, [r3, #26]
 800f248:	f023 0303 	bic.w	r3, r3, #3
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f252:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f256:	4618      	mov	r0, r3
 800f258:	371c      	adds	r7, #28
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd90      	pop	{r4, r7, pc}
 800f25e:	bf00      	nop
 800f260:	0801554c 	.word	0x0801554c
 800f264:	08015d08 	.word	0x08015d08
 800f268:	080155a0 	.word	0x080155a0

0800f26c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f26c:	b590      	push	{r4, r7, lr}
 800f26e:	b087      	sub	sp, #28
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f274:	2300      	movs	r3, #0
 800f276:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <tcp_keepalive+0x20>
 800f27e:	4b18      	ldr	r3, [pc, #96]	@ (800f2e0 <tcp_keepalive+0x74>)
 800f280:	f640 0224 	movw	r2, #2084	@ 0x824
 800f284:	4917      	ldr	r1, [pc, #92]	@ (800f2e4 <tcp_keepalive+0x78>)
 800f286:	4818      	ldr	r0, [pc, #96]	@ (800f2e8 <tcp_keepalive+0x7c>)
 800f288:	f003 fe80 	bl	8012f8c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f28c:	7dfb      	ldrb	r3, [r7, #23]
 800f28e:	b29c      	uxth	r4, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f294:	3b01      	subs	r3, #1
 800f296:	4618      	mov	r0, r3
 800f298:	f7f9 f9b7 	bl	800860a <lwip_htonl>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2200      	movs	r2, #0
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7ff fe68 	bl	800ef78 <tcp_output_alloc_header>
 800f2a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d102      	bne.n	800f2b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b4:	e010      	b.n	800f2d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	6939      	ldr	r1, [r7, #16]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7ff fe99 	bl	800eff4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	6939      	ldr	r1, [r7, #16]
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff fed0 	bl	800f070 <tcp_output_control_segment>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	371c      	adds	r7, #28
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd90      	pop	{r4, r7, pc}
 800f2e0:	0801554c 	.word	0x0801554c
 800f2e4:	08015d28 	.word	0x08015d28
 800f2e8:	080155a0 	.word	0x080155a0

0800f2ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f2ec:	b590      	push	{r4, r7, lr}
 800f2ee:	b08b      	sub	sp, #44	@ 0x2c
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d106      	bne.n	800f30e <tcp_zero_window_probe+0x22>
 800f300:	4b4c      	ldr	r3, [pc, #304]	@ (800f434 <tcp_zero_window_probe+0x148>)
 800f302:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f306:	494c      	ldr	r1, [pc, #304]	@ (800f438 <tcp_zero_window_probe+0x14c>)
 800f308:	484c      	ldr	r0, [pc, #304]	@ (800f43c <tcp_zero_window_probe+0x150>)
 800f30a:	f003 fe3f 	bl	8012f8c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f312:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f314:	6a3b      	ldr	r3, [r7, #32]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f31a:	2300      	movs	r3, #0
 800f31c:	e086      	b.n	800f42c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f324:	2bff      	cmp	r3, #255	@ 0xff
 800f326:	d007      	beq.n	800f338 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f32e:	3301      	adds	r3, #1
 800f330:	b2da      	uxtb	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f338:	6a3b      	ldr	r3, [r7, #32]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	899b      	ldrh	r3, [r3, #12]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	4618      	mov	r0, r3
 800f342:	f7f9 f94d 	bl	80085e0 <lwip_htons>
 800f346:	4603      	mov	r3, r0
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	f003 0301 	and.w	r3, r3, #1
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d005      	beq.n	800f35e <tcp_zero_window_probe+0x72>
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	891b      	ldrh	r3, [r3, #8]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <tcp_zero_window_probe+0x72>
 800f35a:	2301      	movs	r3, #1
 800f35c:	e000      	b.n	800f360 <tcp_zero_window_probe+0x74>
 800f35e:	2300      	movs	r3, #0
 800f360:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f362:	7ffb      	ldrb	r3, [r7, #31]
 800f364:	2b00      	cmp	r3, #0
 800f366:	bf0c      	ite	eq
 800f368:	2301      	moveq	r3, #1
 800f36a:	2300      	movne	r3, #0
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f374:	b299      	uxth	r1, r3
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	8bba      	ldrh	r2, [r7, #28]
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7ff fdfa 	bl	800ef78 <tcp_output_alloc_header>
 800f384:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d102      	bne.n	800f392 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f38c:	f04f 33ff 	mov.w	r3, #4294967295
 800f390:	e04c      	b.n	800f42c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f398:	7ffb      	ldrb	r3, [r7, #31]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d011      	beq.n	800f3c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	899b      	ldrh	r3, [r3, #12]
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	b21b      	sxth	r3, r3
 800f3a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f3aa:	b21c      	sxth	r4, r3
 800f3ac:	2011      	movs	r0, #17
 800f3ae:	f7f9 f917 	bl	80085e0 <lwip_htons>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	b21b      	sxth	r3, r3
 800f3b6:	4323      	orrs	r3, r4
 800f3b8:	b21b      	sxth	r3, r3
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	819a      	strh	r2, [r3, #12]
 800f3c0:	e010      	b.n	800f3e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	3314      	adds	r3, #20
 800f3c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	6858      	ldr	r0, [r3, #4]
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	891a      	ldrh	r2, [r3, #8]
 800f3d4:	6a3b      	ldr	r3, [r7, #32]
 800f3d6:	891b      	ldrh	r3, [r3, #8]
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	2201      	movs	r2, #1
 800f3de:	6939      	ldr	r1, [r7, #16]
 800f3e0:	f7fa fe56 	bl	800a090 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7f9 f90d 	bl	800860a <lwip_htonl>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	da02      	bge.n	800f408 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f40c:	2200      	movs	r2, #0
 800f40e:	69b9      	ldr	r1, [r7, #24]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff fdef 	bl	800eff4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3304      	adds	r3, #4
 800f41c:	69b9      	ldr	r1, [r7, #24]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7ff fe26 	bl	800f070 <tcp_output_control_segment>
 800f424:	4603      	mov	r3, r0
 800f426:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f428:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	372c      	adds	r7, #44	@ 0x2c
 800f430:	46bd      	mov	sp, r7
 800f432:	bd90      	pop	{r4, r7, pc}
 800f434:	0801554c 	.word	0x0801554c
 800f438:	08015d44 	.word	0x08015d44
 800f43c:	080155a0 	.word	0x080155a0

0800f440 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f448:	f7fa ff10 	bl	800a26c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f44c:	4b0a      	ldr	r3, [pc, #40]	@ (800f478 <tcpip_tcp_timer+0x38>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d103      	bne.n	800f45c <tcpip_tcp_timer+0x1c>
 800f454:	4b09      	ldr	r3, [pc, #36]	@ (800f47c <tcpip_tcp_timer+0x3c>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d005      	beq.n	800f468 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f45c:	2200      	movs	r2, #0
 800f45e:	4908      	ldr	r1, [pc, #32]	@ (800f480 <tcpip_tcp_timer+0x40>)
 800f460:	20fa      	movs	r0, #250	@ 0xfa
 800f462:	f000 f8f3 	bl	800f64c <sys_timeout>
 800f466:	e003      	b.n	800f470 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f468:	4b06      	ldr	r3, [pc, #24]	@ (800f484 <tcpip_tcp_timer+0x44>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	601a      	str	r2, [r3, #0]
  }
}
 800f46e:	bf00      	nop
 800f470:	bf00      	nop
 800f472:	3708      	adds	r7, #8
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	20008a50 	.word	0x20008a50
 800f47c:	20008a54 	.word	0x20008a54
 800f480:	0800f441 	.word	0x0800f441
 800f484:	20008a9c 	.word	0x20008a9c

0800f488 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f48c:	4b0a      	ldr	r3, [pc, #40]	@ (800f4b8 <tcp_timer_needed+0x30>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d10f      	bne.n	800f4b4 <tcp_timer_needed+0x2c>
 800f494:	4b09      	ldr	r3, [pc, #36]	@ (800f4bc <tcp_timer_needed+0x34>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d103      	bne.n	800f4a4 <tcp_timer_needed+0x1c>
 800f49c:	4b08      	ldr	r3, [pc, #32]	@ (800f4c0 <tcp_timer_needed+0x38>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d007      	beq.n	800f4b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f4a4:	4b04      	ldr	r3, [pc, #16]	@ (800f4b8 <tcp_timer_needed+0x30>)
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4905      	ldr	r1, [pc, #20]	@ (800f4c4 <tcp_timer_needed+0x3c>)
 800f4ae:	20fa      	movs	r0, #250	@ 0xfa
 800f4b0:	f000 f8cc 	bl	800f64c <sys_timeout>
  }
}
 800f4b4:	bf00      	nop
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	20008a9c 	.word	0x20008a9c
 800f4bc:	20008a50 	.word	0x20008a50
 800f4c0:	20008a54 	.word	0x20008a54
 800f4c4:	0800f441 	.word	0x0800f441

0800f4c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f4d4:	2006      	movs	r0, #6
 800f4d6:	f7f9 fcfb 	bl	8008ed0 <memp_malloc>
 800f4da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d109      	bne.n	800f4f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d151      	bne.n	800f58c <sys_timeout_abs+0xc4>
 800f4e8:	4b2a      	ldr	r3, [pc, #168]	@ (800f594 <sys_timeout_abs+0xcc>)
 800f4ea:	22be      	movs	r2, #190	@ 0xbe
 800f4ec:	492a      	ldr	r1, [pc, #168]	@ (800f598 <sys_timeout_abs+0xd0>)
 800f4ee:	482b      	ldr	r0, [pc, #172]	@ (800f59c <sys_timeout_abs+0xd4>)
 800f4f0:	f003 fd4c 	bl	8012f8c <iprintf>
    return;
 800f4f4:	e04a      	b.n	800f58c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f50e:	4b24      	ldr	r3, [pc, #144]	@ (800f5a0 <sys_timeout_abs+0xd8>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d103      	bne.n	800f51e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f516:	4a22      	ldr	r2, [pc, #136]	@ (800f5a0 <sys_timeout_abs+0xd8>)
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	6013      	str	r3, [r2, #0]
    return;
 800f51c:	e037      	b.n	800f58e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	4b1f      	ldr	r3, [pc, #124]	@ (800f5a0 <sys_timeout_abs+0xd8>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	0fdb      	lsrs	r3, r3, #31
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	b2db      	uxtb	r3, r3
 800f532:	2b00      	cmp	r3, #0
 800f534:	d007      	beq.n	800f546 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f536:	4b1a      	ldr	r3, [pc, #104]	@ (800f5a0 <sys_timeout_abs+0xd8>)
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f53e:	4a18      	ldr	r2, [pc, #96]	@ (800f5a0 <sys_timeout_abs+0xd8>)
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	e023      	b.n	800f58e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f546:	4b16      	ldr	r3, [pc, #88]	@ (800f5a0 <sys_timeout_abs+0xd8>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	617b      	str	r3, [r7, #20]
 800f54c:	e01a      	b.n	800f584 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00b      	beq.n	800f56e <sys_timeout_abs+0xa6>
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	1ad3      	subs	r3, r2, r3
 800f562:	0fdb      	lsrs	r3, r3, #31
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	601a      	str	r2, [r3, #0]
        break;
 800f57c:	e007      	b.n	800f58e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	617b      	str	r3, [r7, #20]
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1e1      	bne.n	800f54e <sys_timeout_abs+0x86>
 800f58a:	e000      	b.n	800f58e <sys_timeout_abs+0xc6>
    return;
 800f58c:	bf00      	nop
      }
    }
  }
}
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	08015d68 	.word	0x08015d68
 800f598:	08015d9c 	.word	0x08015d9c
 800f59c:	08015ddc 	.word	0x08015ddc
 800f5a0:	20008a94 	.word	0x20008a94

0800f5a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	4798      	blx	r3

  now = sys_now();
 800f5b6:	f7f8 fdf7 	bl	80081a8 <sys_now>
 800f5ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800f600 <lwip_cyclic_timer+0x5c>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	0fdb      	lsrs	r3, r3, #31
 800f5d0:	f003 0301 	and.w	r3, r3, #1
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d009      	beq.n	800f5ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	4907      	ldr	r1, [pc, #28]	@ (800f604 <lwip_cyclic_timer+0x60>)
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff ff6e 	bl	800f4c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f5ec:	e004      	b.n	800f5f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	4904      	ldr	r1, [pc, #16]	@ (800f604 <lwip_cyclic_timer+0x60>)
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f7ff ff68 	bl	800f4c8 <sys_timeout_abs>
}
 800f5f8:	bf00      	nop
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	20008a98 	.word	0x20008a98
 800f604:	0800f5a5 	.word	0x0800f5a5

0800f608 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f60e:	2301      	movs	r3, #1
 800f610:	607b      	str	r3, [r7, #4]
 800f612:	e00e      	b.n	800f632 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f614:	4a0b      	ldr	r2, [pc, #44]	@ (800f644 <sys_timeouts_init+0x3c>)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	4a08      	ldr	r2, [pc, #32]	@ (800f644 <sys_timeouts_init+0x3c>)
 800f622:	4413      	add	r3, r2
 800f624:	461a      	mov	r2, r3
 800f626:	4908      	ldr	r1, [pc, #32]	@ (800f648 <sys_timeouts_init+0x40>)
 800f628:	f000 f810 	bl	800f64c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3301      	adds	r3, #1
 800f630:	607b      	str	r3, [r7, #4]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b02      	cmp	r3, #2
 800f636:	d9ed      	bls.n	800f614 <sys_timeouts_init+0xc>
  }
}
 800f638:	bf00      	nop
 800f63a:	bf00      	nop
 800f63c:	3708      	adds	r7, #8
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	08016d08 	.word	0x08016d08
 800f648:	0800f5a5 	.word	0x0800f5a5

0800f64c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b086      	sub	sp, #24
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f65e:	d306      	bcc.n	800f66e <sys_timeout+0x22>
 800f660:	4b0a      	ldr	r3, [pc, #40]	@ (800f68c <sys_timeout+0x40>)
 800f662:	f240 1229 	movw	r2, #297	@ 0x129
 800f666:	490a      	ldr	r1, [pc, #40]	@ (800f690 <sys_timeout+0x44>)
 800f668:	480a      	ldr	r0, [pc, #40]	@ (800f694 <sys_timeout+0x48>)
 800f66a:	f003 fc8f 	bl	8012f8c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f66e:	f7f8 fd9b 	bl	80081a8 <sys_now>
 800f672:	4602      	mov	r2, r0
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	4413      	add	r3, r2
 800f678:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	68b9      	ldr	r1, [r7, #8]
 800f67e:	6978      	ldr	r0, [r7, #20]
 800f680:	f7ff ff22 	bl	800f4c8 <sys_timeout_abs>
#endif
}
 800f684:	bf00      	nop
 800f686:	3718      	adds	r7, #24
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	08015d68 	.word	0x08015d68
 800f690:	08015e04 	.word	0x08015e04
 800f694:	08015ddc 	.word	0x08015ddc

0800f698 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f69e:	f7f8 fd83 	bl	80081a8 <sys_now>
 800f6a2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f710 <sys_check_timeouts+0x78>)
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d001      	beq.n	800f6b2 <sys_check_timeouts+0x1a>
 800f6ae:	f7f9 ffbb 	bl	8009628 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f6b2:	4b18      	ldr	r3, [pc, #96]	@ (800f714 <sys_check_timeouts+0x7c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d022      	beq.n	800f704 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	68fa      	ldr	r2, [r7, #12]
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	0fdb      	lsrs	r3, r3, #31
 800f6c8:	f003 0301 	and.w	r3, r3, #1
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d11a      	bne.n	800f708 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a0f      	ldr	r2, [pc, #60]	@ (800f714 <sys_check_timeouts+0x7c>)
 800f6d8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	4a0b      	ldr	r2, [pc, #44]	@ (800f718 <sys_check_timeouts+0x80>)
 800f6ec:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f6ee:	68b9      	ldr	r1, [r7, #8]
 800f6f0:	2006      	movs	r0, #6
 800f6f2:	f7f9 fc5d 	bl	8008fb0 <memp_free>
    if (handler != NULL) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d0d3      	beq.n	800f6a4 <sys_check_timeouts+0xc>
      handler(arg);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6838      	ldr	r0, [r7, #0]
 800f700:	4798      	blx	r3
  do {
 800f702:	e7cf      	b.n	800f6a4 <sys_check_timeouts+0xc>
      return;
 800f704:	bf00      	nop
 800f706:	e000      	b.n	800f70a <sys_check_timeouts+0x72>
      return;
 800f708:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	20008a41 	.word	0x20008a41
 800f714:	20008a94 	.word	0x20008a94
 800f718:	20008a98 	.word	0x20008a98

0800f71c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f720:	f003 fb34 	bl	8012d8c <rand>
 800f724:	4603      	mov	r3, r0
 800f726:	b29b      	uxth	r3, r3
 800f728:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f732:	b29a      	uxth	r2, r3
 800f734:	4b01      	ldr	r3, [pc, #4]	@ (800f73c <udp_init+0x20>)
 800f736:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f738:	bf00      	nop
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	20000028 	.word	0x20000028

0800f740 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f746:	2300      	movs	r3, #0
 800f748:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f74a:	4b17      	ldr	r3, [pc, #92]	@ (800f7a8 <udp_new_port+0x68>)
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	1c5a      	adds	r2, r3, #1
 800f750:	b291      	uxth	r1, r2
 800f752:	4a15      	ldr	r2, [pc, #84]	@ (800f7a8 <udp_new_port+0x68>)
 800f754:	8011      	strh	r1, [r2, #0]
 800f756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d103      	bne.n	800f766 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f75e:	4b12      	ldr	r3, [pc, #72]	@ (800f7a8 <udp_new_port+0x68>)
 800f760:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f764:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f766:	4b11      	ldr	r3, [pc, #68]	@ (800f7ac <udp_new_port+0x6c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	603b      	str	r3, [r7, #0]
 800f76c:	e011      	b.n	800f792 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	8a5a      	ldrh	r2, [r3, #18]
 800f772:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a8 <udp_new_port+0x68>)
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	429a      	cmp	r2, r3
 800f778:	d108      	bne.n	800f78c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f77a:	88fb      	ldrh	r3, [r7, #6]
 800f77c:	3301      	adds	r3, #1
 800f77e:	80fb      	strh	r3, [r7, #6]
 800f780:	88fb      	ldrh	r3, [r7, #6]
 800f782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f786:	d3e0      	bcc.n	800f74a <udp_new_port+0xa>
        return 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	e007      	b.n	800f79c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	603b      	str	r3, [r7, #0]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1ea      	bne.n	800f76e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f798:	4b03      	ldr	r3, [pc, #12]	@ (800f7a8 <udp_new_port+0x68>)
 800f79a:	881b      	ldrh	r3, [r3, #0]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	370c      	adds	r7, #12
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	20000028 	.word	0x20000028
 800f7ac:	20008aa0 	.word	0x20008aa0

0800f7b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d105      	bne.n	800f7d0 <udp_input_local_match+0x20>
 800f7c4:	4b27      	ldr	r3, [pc, #156]	@ (800f864 <udp_input_local_match+0xb4>)
 800f7c6:	2287      	movs	r2, #135	@ 0x87
 800f7c8:	4927      	ldr	r1, [pc, #156]	@ (800f868 <udp_input_local_match+0xb8>)
 800f7ca:	4828      	ldr	r0, [pc, #160]	@ (800f86c <udp_input_local_match+0xbc>)
 800f7cc:	f003 fbde 	bl	8012f8c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d105      	bne.n	800f7e2 <udp_input_local_match+0x32>
 800f7d6:	4b23      	ldr	r3, [pc, #140]	@ (800f864 <udp_input_local_match+0xb4>)
 800f7d8:	2288      	movs	r2, #136	@ 0x88
 800f7da:	4925      	ldr	r1, [pc, #148]	@ (800f870 <udp_input_local_match+0xc0>)
 800f7dc:	4823      	ldr	r0, [pc, #140]	@ (800f86c <udp_input_local_match+0xbc>)
 800f7de:	f003 fbd5 	bl	8012f8c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	7a1b      	ldrb	r3, [r3, #8]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00b      	beq.n	800f802 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	7a1a      	ldrb	r2, [r3, #8]
 800f7ee:	4b21      	ldr	r3, [pc, #132]	@ (800f874 <udp_input_local_match+0xc4>)
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d001      	beq.n	800f802 <udp_input_local_match+0x52>
    return 0;
 800f7fe:	2300      	movs	r3, #0
 800f800:	e02b      	b.n	800f85a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d018      	beq.n	800f83a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d013      	beq.n	800f836 <udp_input_local_match+0x86>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00f      	beq.n	800f836 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f816:	4b17      	ldr	r3, [pc, #92]	@ (800f874 <udp_input_local_match+0xc4>)
 800f818:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81e:	d00a      	beq.n	800f836 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	4b13      	ldr	r3, [pc, #76]	@ (800f874 <udp_input_local_match+0xc4>)
 800f826:	695b      	ldr	r3, [r3, #20]
 800f828:	405a      	eors	r2, r3
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	3308      	adds	r3, #8
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f832:	2b00      	cmp	r3, #0
 800f834:	d110      	bne.n	800f858 <udp_input_local_match+0xa8>
          return 1;
 800f836:	2301      	movs	r3, #1
 800f838:	e00f      	b.n	800f85a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d009      	beq.n	800f854 <udp_input_local_match+0xa4>
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d005      	beq.n	800f854 <udp_input_local_match+0xa4>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	4b09      	ldr	r3, [pc, #36]	@ (800f874 <udp_input_local_match+0xc4>)
 800f84e:	695b      	ldr	r3, [r3, #20]
 800f850:	429a      	cmp	r2, r3
 800f852:	d101      	bne.n	800f858 <udp_input_local_match+0xa8>
        return 1;
 800f854:	2301      	movs	r3, #1
 800f856:	e000      	b.n	800f85a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	08015e50 	.word	0x08015e50
 800f868:	08015e80 	.word	0x08015e80
 800f86c:	08015ea4 	.word	0x08015ea4
 800f870:	08015ecc 	.word	0x08015ecc
 800f874:	200054d4 	.word	0x200054d4

0800f878 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f878:	b590      	push	{r4, r7, lr}
 800f87a:	b08d      	sub	sp, #52	@ 0x34
 800f87c:	af02      	add	r7, sp, #8
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f882:	2300      	movs	r3, #0
 800f884:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d105      	bne.n	800f898 <udp_input+0x20>
 800f88c:	4b7c      	ldr	r3, [pc, #496]	@ (800fa80 <udp_input+0x208>)
 800f88e:	22cf      	movs	r2, #207	@ 0xcf
 800f890:	497c      	ldr	r1, [pc, #496]	@ (800fa84 <udp_input+0x20c>)
 800f892:	487d      	ldr	r0, [pc, #500]	@ (800fa88 <udp_input+0x210>)
 800f894:	f003 fb7a 	bl	8012f8c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d105      	bne.n	800f8aa <udp_input+0x32>
 800f89e:	4b78      	ldr	r3, [pc, #480]	@ (800fa80 <udp_input+0x208>)
 800f8a0:	22d0      	movs	r2, #208	@ 0xd0
 800f8a2:	497a      	ldr	r1, [pc, #488]	@ (800fa8c <udp_input+0x214>)
 800f8a4:	4878      	ldr	r0, [pc, #480]	@ (800fa88 <udp_input+0x210>)
 800f8a6:	f003 fb71 	bl	8012f8c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	895b      	ldrh	r3, [r3, #10]
 800f8ae:	2b07      	cmp	r3, #7
 800f8b0:	d803      	bhi.n	800f8ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7fa f9f2 	bl	8009c9c <pbuf_free>
    goto end;
 800f8b8:	e0de      	b.n	800fa78 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f8c0:	4b73      	ldr	r3, [pc, #460]	@ (800fa90 <udp_input+0x218>)
 800f8c2:	695b      	ldr	r3, [r3, #20]
 800f8c4:	4a72      	ldr	r2, [pc, #456]	@ (800fa90 <udp_input+0x218>)
 800f8c6:	6812      	ldr	r2, [r2, #0]
 800f8c8:	4611      	mov	r1, r2
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f001 ff40 	bl	8011750 <ip4_addr_isbroadcast_u32>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7f8 fe80 	bl	80085e0 <lwip_htons>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	885b      	ldrh	r3, [r3, #2]
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7f8 fe78 	bl	80085e0 <lwip_htons>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f900:	4b64      	ldr	r3, [pc, #400]	@ (800fa94 <udp_input+0x21c>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	627b      	str	r3, [r7, #36]	@ 0x24
 800f906:	e054      	b.n	800f9b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90a:	8a5b      	ldrh	r3, [r3, #18]
 800f90c:	89fa      	ldrh	r2, [r7, #14]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d14a      	bne.n	800f9a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f912:	7cfb      	ldrb	r3, [r7, #19]
 800f914:	461a      	mov	r2, r3
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f91a:	f7ff ff49 	bl	800f7b0 <udp_input_local_match>
 800f91e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f920:	2b00      	cmp	r3, #0
 800f922:	d041      	beq.n	800f9a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f926:	7c1b      	ldrb	r3, [r3, #16]
 800f928:	f003 0304 	and.w	r3, r3, #4
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d11d      	bne.n	800f96c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d102      	bne.n	800f93c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f938:	61fb      	str	r3, [r7, #28]
 800f93a:	e017      	b.n	800f96c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f93c:	7cfb      	ldrb	r3, [r7, #19]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d014      	beq.n	800f96c <udp_input+0xf4>
 800f942:	4b53      	ldr	r3, [pc, #332]	@ (800fa90 <udp_input+0x218>)
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f94a:	d10f      	bne.n	800f96c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	3304      	adds	r3, #4
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d008      	beq.n	800f96c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	3304      	adds	r3, #4
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	429a      	cmp	r2, r3
 800f966:	d101      	bne.n	800f96c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96e:	8a9b      	ldrh	r3, [r3, #20]
 800f970:	8a3a      	ldrh	r2, [r7, #16]
 800f972:	429a      	cmp	r2, r3
 800f974:	d118      	bne.n	800f9a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f978:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d005      	beq.n	800f98a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f980:	685a      	ldr	r2, [r3, #4]
 800f982:	4b43      	ldr	r3, [pc, #268]	@ (800fa90 <udp_input+0x218>)
 800f984:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f986:	429a      	cmp	r2, r3
 800f988:	d10e      	bne.n	800f9a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f98a:	6a3b      	ldr	r3, [r7, #32]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d014      	beq.n	800f9ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f992:	68da      	ldr	r2, [r3, #12]
 800f994:	6a3b      	ldr	r3, [r7, #32]
 800f996:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f998:	4b3e      	ldr	r3, [pc, #248]	@ (800fa94 <udp_input+0x21c>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f9a0:	4a3c      	ldr	r2, [pc, #240]	@ (800fa94 <udp_input+0x21c>)
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f9a6:	e008      	b.n	800f9ba <udp_input+0x142>
      }
    }

    prev = pcb;
 800f9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1a7      	bne.n	800f908 <udp_input+0x90>
 800f9b8:	e000      	b.n	800f9bc <udp_input+0x144>
        break;
 800f9ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <udp_input+0x15a>
    for_us = 1;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	76fb      	strb	r3, [r7, #27]
 800f9d0:	e00a      	b.n	800f9e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	4b2d      	ldr	r3, [pc, #180]	@ (800fa90 <udp_input+0x218>)
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	bf0c      	ite	eq
 800f9e0:	2301      	moveq	r3, #1
 800f9e2:	2300      	movne	r3, #0
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f9e8:	7efb      	ldrb	r3, [r7, #27]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d041      	beq.n	800fa72 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f9ee:	2108      	movs	r1, #8
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7fa f8cd 	bl	8009b90 <pbuf_remove_header>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00a      	beq.n	800fa12 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f9fc:	4b20      	ldr	r3, [pc, #128]	@ (800fa80 <udp_input+0x208>)
 800f9fe:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800fa02:	4925      	ldr	r1, [pc, #148]	@ (800fa98 <udp_input+0x220>)
 800fa04:	4820      	ldr	r0, [pc, #128]	@ (800fa88 <udp_input+0x210>)
 800fa06:	f003 fac1 	bl	8012f8c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7fa f946 	bl	8009c9c <pbuf_free>
      goto end;
 800fa10:	e032      	b.n	800fa78 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d012      	beq.n	800fa3e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1a:	699b      	ldr	r3, [r3, #24]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d00a      	beq.n	800fa36 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa22:	699c      	ldr	r4, [r3, #24]
 800fa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa26:	69d8      	ldr	r0, [r3, #28]
 800fa28:	8a3b      	ldrh	r3, [r7, #16]
 800fa2a:	9300      	str	r3, [sp, #0]
 800fa2c:	4b1b      	ldr	r3, [pc, #108]	@ (800fa9c <udp_input+0x224>)
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fa32:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fa34:	e021      	b.n	800fa7a <udp_input+0x202>
        pbuf_free(p);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7fa f930 	bl	8009c9c <pbuf_free>
        goto end;
 800fa3c:	e01c      	b.n	800fa78 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fa3e:	7cfb      	ldrb	r3, [r7, #19]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d112      	bne.n	800fa6a <udp_input+0x1f2>
 800fa44:	4b12      	ldr	r3, [pc, #72]	@ (800fa90 <udp_input+0x218>)
 800fa46:	695b      	ldr	r3, [r3, #20]
 800fa48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa4c:	2be0      	cmp	r3, #224	@ 0xe0
 800fa4e:	d00c      	beq.n	800fa6a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fa50:	4b0f      	ldr	r3, [pc, #60]	@ (800fa90 <udp_input+0x218>)
 800fa52:	899b      	ldrh	r3, [r3, #12]
 800fa54:	3308      	adds	r3, #8
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	b21b      	sxth	r3, r3
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fa f90a 	bl	8009c76 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fa62:	2103      	movs	r1, #3
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f001 fb53 	bl	8011110 <icmp_dest_unreach>
      pbuf_free(p);
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f7fa f916 	bl	8009c9c <pbuf_free>
  return;
 800fa70:	e003      	b.n	800fa7a <udp_input+0x202>
    pbuf_free(p);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7fa f912 	bl	8009c9c <pbuf_free>
  return;
 800fa78:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fa7a:	372c      	adds	r7, #44	@ 0x2c
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd90      	pop	{r4, r7, pc}
 800fa80:	08015e50 	.word	0x08015e50
 800fa84:	08015ef4 	.word	0x08015ef4
 800fa88:	08015ea4 	.word	0x08015ea4
 800fa8c:	08015f0c 	.word	0x08015f0c
 800fa90:	200054d4 	.word	0x200054d4
 800fa94:	20008aa0 	.word	0x20008aa0
 800fa98:	08015f28 	.word	0x08015f28
 800fa9c:	200054e4 	.word	0x200054e4

0800faa0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af02      	add	r7, sp, #8
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
 800faac:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d109      	bne.n	800fac8 <udp_sendto+0x28>
 800fab4:	4b23      	ldr	r3, [pc, #140]	@ (800fb44 <udp_sendto+0xa4>)
 800fab6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800faba:	4923      	ldr	r1, [pc, #140]	@ (800fb48 <udp_sendto+0xa8>)
 800fabc:	4823      	ldr	r0, [pc, #140]	@ (800fb4c <udp_sendto+0xac>)
 800fabe:	f003 fa65 	bl	8012f8c <iprintf>
 800fac2:	f06f 030f 	mvn.w	r3, #15
 800fac6:	e038      	b.n	800fb3a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d109      	bne.n	800fae2 <udp_sendto+0x42>
 800face:	4b1d      	ldr	r3, [pc, #116]	@ (800fb44 <udp_sendto+0xa4>)
 800fad0:	f240 2219 	movw	r2, #537	@ 0x219
 800fad4:	491e      	ldr	r1, [pc, #120]	@ (800fb50 <udp_sendto+0xb0>)
 800fad6:	481d      	ldr	r0, [pc, #116]	@ (800fb4c <udp_sendto+0xac>)
 800fad8:	f003 fa58 	bl	8012f8c <iprintf>
 800fadc:	f06f 030f 	mvn.w	r3, #15
 800fae0:	e02b      	b.n	800fb3a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d109      	bne.n	800fafc <udp_sendto+0x5c>
 800fae8:	4b16      	ldr	r3, [pc, #88]	@ (800fb44 <udp_sendto+0xa4>)
 800faea:	f240 221a 	movw	r2, #538	@ 0x21a
 800faee:	4919      	ldr	r1, [pc, #100]	@ (800fb54 <udp_sendto+0xb4>)
 800faf0:	4816      	ldr	r0, [pc, #88]	@ (800fb4c <udp_sendto+0xac>)
 800faf2:	f003 fa4b 	bl	8012f8c <iprintf>
 800faf6:	f06f 030f 	mvn.w	r3, #15
 800fafa:	e01e      	b.n	800fb3a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	7a1b      	ldrb	r3, [r3, #8]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d006      	beq.n	800fb12 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	7a1b      	ldrb	r3, [r3, #8]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7f9 fd67 	bl	80095dc <netif_get_by_index>
 800fb0e:	6178      	str	r0, [r7, #20]
 800fb10:	e003      	b.n	800fb1a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f001 fb86 	bl	8011224 <ip4_route>
 800fb18:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fb20:	f06f 0303 	mvn.w	r3, #3
 800fb24:	e009      	b.n	800fb3a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fb26:	887a      	ldrh	r2, [r7, #2]
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	68b9      	ldr	r1, [r7, #8]
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f000 f810 	bl	800fb58 <udp_sendto_if>
 800fb38:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3718      	adds	r7, #24
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	08015e50 	.word	0x08015e50
 800fb48:	08015f74 	.word	0x08015f74
 800fb4c:	08015ea4 	.word	0x08015ea4
 800fb50:	08015f8c 	.word	0x08015f8c
 800fb54:	08015fa8 	.word	0x08015fa8

0800fb58 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b088      	sub	sp, #32
 800fb5c:	af02      	add	r7, sp, #8
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	607a      	str	r2, [r7, #4]
 800fb64:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d109      	bne.n	800fb80 <udp_sendto_if+0x28>
 800fb6c:	4b2e      	ldr	r3, [pc, #184]	@ (800fc28 <udp_sendto_if+0xd0>)
 800fb6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fb72:	492e      	ldr	r1, [pc, #184]	@ (800fc2c <udp_sendto_if+0xd4>)
 800fb74:	482e      	ldr	r0, [pc, #184]	@ (800fc30 <udp_sendto_if+0xd8>)
 800fb76:	f003 fa09 	bl	8012f8c <iprintf>
 800fb7a:	f06f 030f 	mvn.w	r3, #15
 800fb7e:	e04f      	b.n	800fc20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d109      	bne.n	800fb9a <udp_sendto_if+0x42>
 800fb86:	4b28      	ldr	r3, [pc, #160]	@ (800fc28 <udp_sendto_if+0xd0>)
 800fb88:	f240 2281 	movw	r2, #641	@ 0x281
 800fb8c:	4929      	ldr	r1, [pc, #164]	@ (800fc34 <udp_sendto_if+0xdc>)
 800fb8e:	4828      	ldr	r0, [pc, #160]	@ (800fc30 <udp_sendto_if+0xd8>)
 800fb90:	f003 f9fc 	bl	8012f8c <iprintf>
 800fb94:	f06f 030f 	mvn.w	r3, #15
 800fb98:	e042      	b.n	800fc20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d109      	bne.n	800fbb4 <udp_sendto_if+0x5c>
 800fba0:	4b21      	ldr	r3, [pc, #132]	@ (800fc28 <udp_sendto_if+0xd0>)
 800fba2:	f240 2282 	movw	r2, #642	@ 0x282
 800fba6:	4924      	ldr	r1, [pc, #144]	@ (800fc38 <udp_sendto_if+0xe0>)
 800fba8:	4821      	ldr	r0, [pc, #132]	@ (800fc30 <udp_sendto_if+0xd8>)
 800fbaa:	f003 f9ef 	bl	8012f8c <iprintf>
 800fbae:	f06f 030f 	mvn.w	r3, #15
 800fbb2:	e035      	b.n	800fc20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fbb4:	6a3b      	ldr	r3, [r7, #32]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d109      	bne.n	800fbce <udp_sendto_if+0x76>
 800fbba:	4b1b      	ldr	r3, [pc, #108]	@ (800fc28 <udp_sendto_if+0xd0>)
 800fbbc:	f240 2283 	movw	r2, #643	@ 0x283
 800fbc0:	491e      	ldr	r1, [pc, #120]	@ (800fc3c <udp_sendto_if+0xe4>)
 800fbc2:	481b      	ldr	r0, [pc, #108]	@ (800fc30 <udp_sendto_if+0xd8>)
 800fbc4:	f003 f9e2 	bl	8012f8c <iprintf>
 800fbc8:	f06f 030f 	mvn.w	r3, #15
 800fbcc:	e028      	b.n	800fc20 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d009      	beq.n	800fbe8 <udp_sendto_if+0x90>
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d005      	beq.n	800fbe8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fbe4:	2be0      	cmp	r3, #224	@ 0xe0
 800fbe6:	d103      	bne.n	800fbf0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fbe8:	6a3b      	ldr	r3, [r7, #32]
 800fbea:	3304      	adds	r3, #4
 800fbec:	617b      	str	r3, [r7, #20]
 800fbee:	e00b      	b.n	800fc08 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	6a3b      	ldr	r3, [r7, #32]
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d002      	beq.n	800fc04 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fbfe:	f06f 0303 	mvn.w	r3, #3
 800fc02:	e00d      	b.n	800fc20 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fc08:	887a      	ldrh	r2, [r7, #2]
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	6a3b      	ldr	r3, [r7, #32]
 800fc10:	9300      	str	r3, [sp, #0]
 800fc12:	4613      	mov	r3, r2
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	68b9      	ldr	r1, [r7, #8]
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 f811 	bl	800fc40 <udp_sendto_if_src>
 800fc1e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3718      	adds	r7, #24
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	08015e50 	.word	0x08015e50
 800fc2c:	08015fc4 	.word	0x08015fc4
 800fc30:	08015ea4 	.word	0x08015ea4
 800fc34:	08015fe0 	.word	0x08015fe0
 800fc38:	08015ffc 	.word	0x08015ffc
 800fc3c:	0801601c 	.word	0x0801601c

0800fc40 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b08c      	sub	sp, #48	@ 0x30
 800fc44:	af04      	add	r7, sp, #16
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d109      	bne.n	800fc68 <udp_sendto_if_src+0x28>
 800fc54:	4b65      	ldr	r3, [pc, #404]	@ (800fdec <udp_sendto_if_src+0x1ac>)
 800fc56:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fc5a:	4965      	ldr	r1, [pc, #404]	@ (800fdf0 <udp_sendto_if_src+0x1b0>)
 800fc5c:	4865      	ldr	r0, [pc, #404]	@ (800fdf4 <udp_sendto_if_src+0x1b4>)
 800fc5e:	f003 f995 	bl	8012f8c <iprintf>
 800fc62:	f06f 030f 	mvn.w	r3, #15
 800fc66:	e0bc      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d109      	bne.n	800fc82 <udp_sendto_if_src+0x42>
 800fc6e:	4b5f      	ldr	r3, [pc, #380]	@ (800fdec <udp_sendto_if_src+0x1ac>)
 800fc70:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800fc74:	4960      	ldr	r1, [pc, #384]	@ (800fdf8 <udp_sendto_if_src+0x1b8>)
 800fc76:	485f      	ldr	r0, [pc, #380]	@ (800fdf4 <udp_sendto_if_src+0x1b4>)
 800fc78:	f003 f988 	bl	8012f8c <iprintf>
 800fc7c:	f06f 030f 	mvn.w	r3, #15
 800fc80:	e0af      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d109      	bne.n	800fc9c <udp_sendto_if_src+0x5c>
 800fc88:	4b58      	ldr	r3, [pc, #352]	@ (800fdec <udp_sendto_if_src+0x1ac>)
 800fc8a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800fc8e:	495b      	ldr	r1, [pc, #364]	@ (800fdfc <udp_sendto_if_src+0x1bc>)
 800fc90:	4858      	ldr	r0, [pc, #352]	@ (800fdf4 <udp_sendto_if_src+0x1b4>)
 800fc92:	f003 f97b 	bl	8012f8c <iprintf>
 800fc96:	f06f 030f 	mvn.w	r3, #15
 800fc9a:	e0a2      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800fc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d109      	bne.n	800fcb6 <udp_sendto_if_src+0x76>
 800fca2:	4b52      	ldr	r3, [pc, #328]	@ (800fdec <udp_sendto_if_src+0x1ac>)
 800fca4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800fca8:	4955      	ldr	r1, [pc, #340]	@ (800fe00 <udp_sendto_if_src+0x1c0>)
 800fcaa:	4852      	ldr	r0, [pc, #328]	@ (800fdf4 <udp_sendto_if_src+0x1b4>)
 800fcac:	f003 f96e 	bl	8012f8c <iprintf>
 800fcb0:	f06f 030f 	mvn.w	r3, #15
 800fcb4:	e095      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800fcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d109      	bne.n	800fcd0 <udp_sendto_if_src+0x90>
 800fcbc:	4b4b      	ldr	r3, [pc, #300]	@ (800fdec <udp_sendto_if_src+0x1ac>)
 800fcbe:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800fcc2:	4950      	ldr	r1, [pc, #320]	@ (800fe04 <udp_sendto_if_src+0x1c4>)
 800fcc4:	484b      	ldr	r0, [pc, #300]	@ (800fdf4 <udp_sendto_if_src+0x1b4>)
 800fcc6:	f003 f961 	bl	8012f8c <iprintf>
 800fcca:	f06f 030f 	mvn.w	r3, #15
 800fcce:	e088      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	8a5b      	ldrh	r3, [r3, #18]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d10f      	bne.n	800fcf8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fcd8:	68f9      	ldr	r1, [r7, #12]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	8a5b      	ldrh	r3, [r3, #18]
 800fcde:	461a      	mov	r2, r3
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f000 f893 	bl	800fe0c <udp_bind>
 800fce6:	4603      	mov	r3, r0
 800fce8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800fcea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d002      	beq.n	800fcf8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800fcf2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fcf6:	e074      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	891b      	ldrh	r3, [r3, #8]
 800fcfc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d902      	bls.n	800fd0a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800fd04:	f04f 33ff 	mov.w	r3, #4294967295
 800fd08:	e06b      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fd0a:	2108      	movs	r1, #8
 800fd0c:	68b8      	ldr	r0, [r7, #8]
 800fd0e:	f7f9 ff2f 	bl	8009b70 <pbuf_add_header>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d015      	beq.n	800fd44 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800fd18:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd1c:	2108      	movs	r1, #8
 800fd1e:	2022      	movs	r0, #34	@ 0x22
 800fd20:	f7f9 fcd8 	bl	80096d4 <pbuf_alloc>
 800fd24:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d102      	bne.n	800fd32 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fd2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd30:	e057      	b.n	800fde2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	891b      	ldrh	r3, [r3, #8]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d006      	beq.n	800fd48 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fd3a:	68b9      	ldr	r1, [r7, #8]
 800fd3c:	69f8      	ldr	r0, [r7, #28]
 800fd3e:	f7fa f8c5 	bl	8009ecc <pbuf_chain>
 800fd42:	e001      	b.n	800fd48 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fd48:	69fb      	ldr	r3, [r7, #28]
 800fd4a:	895b      	ldrh	r3, [r3, #10]
 800fd4c:	2b07      	cmp	r3, #7
 800fd4e:	d806      	bhi.n	800fd5e <udp_sendto_if_src+0x11e>
 800fd50:	4b26      	ldr	r3, [pc, #152]	@ (800fdec <udp_sendto_if_src+0x1ac>)
 800fd52:	f240 320d 	movw	r2, #781	@ 0x30d
 800fd56:	492c      	ldr	r1, [pc, #176]	@ (800fe08 <udp_sendto_if_src+0x1c8>)
 800fd58:	4826      	ldr	r0, [pc, #152]	@ (800fdf4 <udp_sendto_if_src+0x1b4>)
 800fd5a:	f003 f917 	bl	8012f8c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	8a5b      	ldrh	r3, [r3, #18]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f8 fc39 	bl	80085e0 <lwip_htons>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	461a      	mov	r2, r3
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fd76:	887b      	ldrh	r3, [r7, #2]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7f8 fc31 	bl	80085e0 <lwip_htons>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	461a      	mov	r2, r3
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	719a      	strb	r2, [r3, #6]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	891b      	ldrh	r3, [r3, #8]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7f8 fc23 	bl	80085e0 <lwip_htons>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800fda2:	2311      	movs	r3, #17
 800fda4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	7adb      	ldrb	r3, [r3, #11]
 800fdaa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	7a9b      	ldrb	r3, [r3, #10]
 800fdb0:	7cb9      	ldrb	r1, [r7, #18]
 800fdb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdb4:	9202      	str	r2, [sp, #8]
 800fdb6:	7cfa      	ldrb	r2, [r7, #19]
 800fdb8:	9201      	str	r2, [sp, #4]
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fdc2:	69f8      	ldr	r0, [r7, #28]
 800fdc4:	f001 fc16 	bl	80115f4 <ip4_output_if_src>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800fdcc:	69fa      	ldr	r2, [r7, #28]
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d004      	beq.n	800fdde <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800fdd4:	69f8      	ldr	r0, [r7, #28]
 800fdd6:	f7f9 ff61 	bl	8009c9c <pbuf_free>
    q = NULL;
 800fdda:	2300      	movs	r3, #0
 800fddc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800fdde:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3720      	adds	r7, #32
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	08015e50 	.word	0x08015e50
 800fdf0:	0801603c 	.word	0x0801603c
 800fdf4:	08015ea4 	.word	0x08015ea4
 800fdf8:	0801605c 	.word	0x0801605c
 800fdfc:	0801607c 	.word	0x0801607c
 800fe00:	080160a0 	.word	0x080160a0
 800fe04:	080160c4 	.word	0x080160c4
 800fe08:	080160e8 	.word	0x080160e8

0800fe0c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b086      	sub	sp, #24
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	4613      	mov	r3, r2
 800fe18:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d101      	bne.n	800fe24 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fe20:	4b39      	ldr	r3, [pc, #228]	@ (800ff08 <udp_bind+0xfc>)
 800fe22:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d109      	bne.n	800fe3e <udp_bind+0x32>
 800fe2a:	4b38      	ldr	r3, [pc, #224]	@ (800ff0c <udp_bind+0x100>)
 800fe2c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800fe30:	4937      	ldr	r1, [pc, #220]	@ (800ff10 <udp_bind+0x104>)
 800fe32:	4838      	ldr	r0, [pc, #224]	@ (800ff14 <udp_bind+0x108>)
 800fe34:	f003 f8aa 	bl	8012f8c <iprintf>
 800fe38:	f06f 030f 	mvn.w	r3, #15
 800fe3c:	e060      	b.n	800ff00 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fe42:	4b35      	ldr	r3, [pc, #212]	@ (800ff18 <udp_bind+0x10c>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	617b      	str	r3, [r7, #20]
 800fe48:	e009      	b.n	800fe5e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d102      	bne.n	800fe58 <udp_bind+0x4c>
      rebind = 1;
 800fe52:	2301      	movs	r3, #1
 800fe54:	74fb      	strb	r3, [r7, #19]
      break;
 800fe56:	e005      	b.n	800fe64 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	617b      	str	r3, [r7, #20]
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1f2      	bne.n	800fe4a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800fe64:	88fb      	ldrh	r3, [r7, #6]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d109      	bne.n	800fe7e <udp_bind+0x72>
    port = udp_new_port();
 800fe6a:	f7ff fc69 	bl	800f740 <udp_new_port>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fe72:	88fb      	ldrh	r3, [r7, #6]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d12c      	bne.n	800fed2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800fe78:	f06f 0307 	mvn.w	r3, #7
 800fe7c:	e040      	b.n	800ff00 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fe7e:	4b26      	ldr	r3, [pc, #152]	@ (800ff18 <udp_bind+0x10c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	617b      	str	r3, [r7, #20]
 800fe84:	e022      	b.n	800fecc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d01b      	beq.n	800fec6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	8a5b      	ldrh	r3, [r3, #18]
 800fe92:	88fa      	ldrh	r2, [r7, #6]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d116      	bne.n	800fec6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d00d      	beq.n	800fec0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00a      	beq.n	800fec0 <udp_bind+0xb4>
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d006      	beq.n	800fec0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800feb2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d003      	beq.n	800fec0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d102      	bne.n	800fec6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800fec0:	f06f 0307 	mvn.w	r3, #7
 800fec4:	e01c      	b.n	800ff00 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	617b      	str	r3, [r7, #20]
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1d9      	bne.n	800fe86 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d002      	beq.n	800fede <udp_bind+0xd2>
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	e000      	b.n	800fee0 <udp_bind+0xd4>
 800fede:	2300      	movs	r3, #0
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	88fa      	ldrh	r2, [r7, #6]
 800fee8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800feea:	7cfb      	ldrb	r3, [r7, #19]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d106      	bne.n	800fefe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800fef0:	4b09      	ldr	r3, [pc, #36]	@ (800ff18 <udp_bind+0x10c>)
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800fef8:	4a07      	ldr	r2, [pc, #28]	@ (800ff18 <udp_bind+0x10c>)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3718      	adds	r7, #24
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	08016d20 	.word	0x08016d20
 800ff0c:	08015e50 	.word	0x08015e50
 800ff10:	08016118 	.word	0x08016118
 800ff14:	08015ea4 	.word	0x08015ea4
 800ff18:	20008aa0 	.word	0x20008aa0

0800ff1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d107      	bne.n	800ff3e <udp_recv+0x22>
 800ff2e:	4b08      	ldr	r3, [pc, #32]	@ (800ff50 <udp_recv+0x34>)
 800ff30:	f240 428a 	movw	r2, #1162	@ 0x48a
 800ff34:	4907      	ldr	r1, [pc, #28]	@ (800ff54 <udp_recv+0x38>)
 800ff36:	4808      	ldr	r0, [pc, #32]	@ (800ff58 <udp_recv+0x3c>)
 800ff38:	f003 f828 	bl	8012f8c <iprintf>
 800ff3c:	e005      	b.n	800ff4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	68ba      	ldr	r2, [r7, #8]
 800ff42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	61da      	str	r2, [r3, #28]
}
 800ff4a:	3710      	adds	r7, #16
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	08015e50 	.word	0x08015e50
 800ff54:	08016184 	.word	0x08016184
 800ff58:	08015ea4 	.word	0x08015ea4

0800ff5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d107      	bne.n	800ff7a <udp_remove+0x1e>
 800ff6a:	4b19      	ldr	r3, [pc, #100]	@ (800ffd0 <udp_remove+0x74>)
 800ff6c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800ff70:	4918      	ldr	r1, [pc, #96]	@ (800ffd4 <udp_remove+0x78>)
 800ff72:	4819      	ldr	r0, [pc, #100]	@ (800ffd8 <udp_remove+0x7c>)
 800ff74:	f003 f80a 	bl	8012f8c <iprintf>
 800ff78:	e026      	b.n	800ffc8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ff7a:	4b18      	ldr	r3, [pc, #96]	@ (800ffdc <udp_remove+0x80>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d105      	bne.n	800ff90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ff84:	4b15      	ldr	r3, [pc, #84]	@ (800ffdc <udp_remove+0x80>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	68db      	ldr	r3, [r3, #12]
 800ff8a:	4a14      	ldr	r2, [pc, #80]	@ (800ffdc <udp_remove+0x80>)
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	e017      	b.n	800ffc0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ff90:	4b12      	ldr	r3, [pc, #72]	@ (800ffdc <udp_remove+0x80>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	60fb      	str	r3, [r7, #12]
 800ff96:	e010      	b.n	800ffba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d009      	beq.n	800ffb4 <udp_remove+0x58>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d104      	bne.n	800ffb4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	68da      	ldr	r2, [r3, #12]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	60da      	str	r2, [r3, #12]
        break;
 800ffb2:	e005      	b.n	800ffc0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	60fb      	str	r3, [r7, #12]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1eb      	bne.n	800ff98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ffc0:	6879      	ldr	r1, [r7, #4]
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	f7f8 fff4 	bl	8008fb0 <memp_free>
}
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	08015e50 	.word	0x08015e50
 800ffd4:	0801619c 	.word	0x0801619c
 800ffd8:	08015ea4 	.word	0x08015ea4
 800ffdc:	20008aa0 	.word	0x20008aa0

0800ffe0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	f7f8 ff72 	bl	8008ed0 <memp_malloc>
 800ffec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d007      	beq.n	8010004 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800fff4:	2220      	movs	r2, #32
 800fff6:	2100      	movs	r1, #0
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f003 f91f 	bl	801323c <memset>
    pcb->ttl = UDP_TTL;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	22ff      	movs	r2, #255	@ 0xff
 8010002:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010004:	687b      	ldr	r3, [r7, #4]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3708      	adds	r7, #8
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
	...

08010010 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d01e      	beq.n	801005e <udp_netif_ip_addr_changed+0x4e>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d01a      	beq.n	801005e <udp_netif_ip_addr_changed+0x4e>
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d017      	beq.n	801005e <udp_netif_ip_addr_changed+0x4e>
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d013      	beq.n	801005e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010036:	4b0d      	ldr	r3, [pc, #52]	@ (801006c <udp_netif_ip_addr_changed+0x5c>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	60fb      	str	r3, [r7, #12]
 801003c:	e00c      	b.n	8010058 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	429a      	cmp	r2, r3
 8010048:	d103      	bne.n	8010052 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1ef      	bne.n	801003e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801005e:	bf00      	nop
 8010060:	3714      	adds	r7, #20
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	20008aa0 	.word	0x20008aa0

08010070 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010078:	4915      	ldr	r1, [pc, #84]	@ (80100d0 <etharp_free_entry+0x60>)
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	4613      	mov	r3, r2
 801007e:	005b      	lsls	r3, r3, #1
 8010080:	4413      	add	r3, r2
 8010082:	00db      	lsls	r3, r3, #3
 8010084:	440b      	add	r3, r1
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d013      	beq.n	80100b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801008c:	4910      	ldr	r1, [pc, #64]	@ (80100d0 <etharp_free_entry+0x60>)
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	4613      	mov	r3, r2
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	4413      	add	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	440b      	add	r3, r1
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4618      	mov	r0, r3
 801009e:	f7f9 fdfd 	bl	8009c9c <pbuf_free>
    arp_table[i].q = NULL;
 80100a2:	490b      	ldr	r1, [pc, #44]	@ (80100d0 <etharp_free_entry+0x60>)
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	4613      	mov	r3, r2
 80100a8:	005b      	lsls	r3, r3, #1
 80100aa:	4413      	add	r3, r2
 80100ac:	00db      	lsls	r3, r3, #3
 80100ae:	440b      	add	r3, r1
 80100b0:	2200      	movs	r2, #0
 80100b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80100b4:	4906      	ldr	r1, [pc, #24]	@ (80100d0 <etharp_free_entry+0x60>)
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	4613      	mov	r3, r2
 80100ba:	005b      	lsls	r3, r3, #1
 80100bc:	4413      	add	r3, r2
 80100be:	00db      	lsls	r3, r3, #3
 80100c0:	440b      	add	r3, r1
 80100c2:	3314      	adds	r3, #20
 80100c4:	2200      	movs	r2, #0
 80100c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80100c8:	bf00      	nop
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	20008aa4 	.word	0x20008aa4

080100d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100da:	2300      	movs	r3, #0
 80100dc:	607b      	str	r3, [r7, #4]
 80100de:	e096      	b.n	801020e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80100e0:	494f      	ldr	r1, [pc, #316]	@ (8010220 <etharp_tmr+0x14c>)
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	4613      	mov	r3, r2
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	4413      	add	r3, r2
 80100ea:	00db      	lsls	r3, r3, #3
 80100ec:	440b      	add	r3, r1
 80100ee:	3314      	adds	r3, #20
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80100f4:	78fb      	ldrb	r3, [r7, #3]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f000 8086 	beq.w	8010208 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80100fc:	4948      	ldr	r1, [pc, #288]	@ (8010220 <etharp_tmr+0x14c>)
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	4613      	mov	r3, r2
 8010102:	005b      	lsls	r3, r3, #1
 8010104:	4413      	add	r3, r2
 8010106:	00db      	lsls	r3, r3, #3
 8010108:	440b      	add	r3, r1
 801010a:	3312      	adds	r3, #18
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	3301      	adds	r3, #1
 8010110:	b298      	uxth	r0, r3
 8010112:	4943      	ldr	r1, [pc, #268]	@ (8010220 <etharp_tmr+0x14c>)
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	4613      	mov	r3, r2
 8010118:	005b      	lsls	r3, r3, #1
 801011a:	4413      	add	r3, r2
 801011c:	00db      	lsls	r3, r3, #3
 801011e:	440b      	add	r3, r1
 8010120:	3312      	adds	r3, #18
 8010122:	4602      	mov	r2, r0
 8010124:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010126:	493e      	ldr	r1, [pc, #248]	@ (8010220 <etharp_tmr+0x14c>)
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	4613      	mov	r3, r2
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	4413      	add	r3, r2
 8010130:	00db      	lsls	r3, r3, #3
 8010132:	440b      	add	r3, r1
 8010134:	3312      	adds	r3, #18
 8010136:	881b      	ldrh	r3, [r3, #0]
 8010138:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801013c:	d215      	bcs.n	801016a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801013e:	4938      	ldr	r1, [pc, #224]	@ (8010220 <etharp_tmr+0x14c>)
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	4613      	mov	r3, r2
 8010144:	005b      	lsls	r3, r3, #1
 8010146:	4413      	add	r3, r2
 8010148:	00db      	lsls	r3, r3, #3
 801014a:	440b      	add	r3, r1
 801014c:	3314      	adds	r3, #20
 801014e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010150:	2b01      	cmp	r3, #1
 8010152:	d10e      	bne.n	8010172 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010154:	4932      	ldr	r1, [pc, #200]	@ (8010220 <etharp_tmr+0x14c>)
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	4613      	mov	r3, r2
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	4413      	add	r3, r2
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	440b      	add	r3, r1
 8010162:	3312      	adds	r3, #18
 8010164:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010166:	2b04      	cmp	r3, #4
 8010168:	d903      	bls.n	8010172 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f7ff ff80 	bl	8010070 <etharp_free_entry>
 8010170:	e04a      	b.n	8010208 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010172:	492b      	ldr	r1, [pc, #172]	@ (8010220 <etharp_tmr+0x14c>)
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	4613      	mov	r3, r2
 8010178:	005b      	lsls	r3, r3, #1
 801017a:	4413      	add	r3, r2
 801017c:	00db      	lsls	r3, r3, #3
 801017e:	440b      	add	r3, r1
 8010180:	3314      	adds	r3, #20
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	2b03      	cmp	r3, #3
 8010186:	d10a      	bne.n	801019e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010188:	4925      	ldr	r1, [pc, #148]	@ (8010220 <etharp_tmr+0x14c>)
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	4613      	mov	r3, r2
 801018e:	005b      	lsls	r3, r3, #1
 8010190:	4413      	add	r3, r2
 8010192:	00db      	lsls	r3, r3, #3
 8010194:	440b      	add	r3, r1
 8010196:	3314      	adds	r3, #20
 8010198:	2204      	movs	r2, #4
 801019a:	701a      	strb	r2, [r3, #0]
 801019c:	e034      	b.n	8010208 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801019e:	4920      	ldr	r1, [pc, #128]	@ (8010220 <etharp_tmr+0x14c>)
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	4613      	mov	r3, r2
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	4413      	add	r3, r2
 80101a8:	00db      	lsls	r3, r3, #3
 80101aa:	440b      	add	r3, r1
 80101ac:	3314      	adds	r3, #20
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	2b04      	cmp	r3, #4
 80101b2:	d10a      	bne.n	80101ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80101b4:	491a      	ldr	r1, [pc, #104]	@ (8010220 <etharp_tmr+0x14c>)
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	4613      	mov	r3, r2
 80101ba:	005b      	lsls	r3, r3, #1
 80101bc:	4413      	add	r3, r2
 80101be:	00db      	lsls	r3, r3, #3
 80101c0:	440b      	add	r3, r1
 80101c2:	3314      	adds	r3, #20
 80101c4:	2202      	movs	r2, #2
 80101c6:	701a      	strb	r2, [r3, #0]
 80101c8:	e01e      	b.n	8010208 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80101ca:	4915      	ldr	r1, [pc, #84]	@ (8010220 <etharp_tmr+0x14c>)
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	4613      	mov	r3, r2
 80101d0:	005b      	lsls	r3, r3, #1
 80101d2:	4413      	add	r3, r2
 80101d4:	00db      	lsls	r3, r3, #3
 80101d6:	440b      	add	r3, r1
 80101d8:	3314      	adds	r3, #20
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d113      	bne.n	8010208 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80101e0:	490f      	ldr	r1, [pc, #60]	@ (8010220 <etharp_tmr+0x14c>)
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	4613      	mov	r3, r2
 80101e6:	005b      	lsls	r3, r3, #1
 80101e8:	4413      	add	r3, r2
 80101ea:	00db      	lsls	r3, r3, #3
 80101ec:	440b      	add	r3, r1
 80101ee:	3308      	adds	r3, #8
 80101f0:	6818      	ldr	r0, [r3, #0]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	4613      	mov	r3, r2
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	4413      	add	r3, r2
 80101fa:	00db      	lsls	r3, r3, #3
 80101fc:	4a08      	ldr	r2, [pc, #32]	@ (8010220 <etharp_tmr+0x14c>)
 80101fe:	4413      	add	r3, r2
 8010200:	3304      	adds	r3, #4
 8010202:	4619      	mov	r1, r3
 8010204:	f000 fe6e 	bl	8010ee4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	3301      	adds	r3, #1
 801020c:	607b      	str	r3, [r7, #4]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2b09      	cmp	r3, #9
 8010212:	f77f af65 	ble.w	80100e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8010216:	bf00      	nop
 8010218:	bf00      	nop
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}
 8010220:	20008aa4 	.word	0x20008aa4

08010224 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b08a      	sub	sp, #40	@ 0x28
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	460b      	mov	r3, r1
 801022e:	607a      	str	r2, [r7, #4]
 8010230:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010232:	230a      	movs	r3, #10
 8010234:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010236:	230a      	movs	r3, #10
 8010238:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801023a:	230a      	movs	r3, #10
 801023c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801023e:	2300      	movs	r3, #0
 8010240:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010242:	230a      	movs	r3, #10
 8010244:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	83bb      	strh	r3, [r7, #28]
 801024a:	2300      	movs	r3, #0
 801024c:	837b      	strh	r3, [r7, #26]
 801024e:	2300      	movs	r3, #0
 8010250:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010252:	2300      	movs	r3, #0
 8010254:	843b      	strh	r3, [r7, #32]
 8010256:	e0ae      	b.n	80103b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801025c:	49a6      	ldr	r1, [pc, #664]	@ (80104f8 <etharp_find_entry+0x2d4>)
 801025e:	4613      	mov	r3, r2
 8010260:	005b      	lsls	r3, r3, #1
 8010262:	4413      	add	r3, r2
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	440b      	add	r3, r1
 8010268:	3314      	adds	r3, #20
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801026e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010272:	2b0a      	cmp	r3, #10
 8010274:	d105      	bne.n	8010282 <etharp_find_entry+0x5e>
 8010276:	7dfb      	ldrb	r3, [r7, #23]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801027c:	8c3b      	ldrh	r3, [r7, #32]
 801027e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010280:	e095      	b.n	80103ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010282:	7dfb      	ldrb	r3, [r7, #23]
 8010284:	2b00      	cmp	r3, #0
 8010286:	f000 8092 	beq.w	80103ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801028a:	7dfb      	ldrb	r3, [r7, #23]
 801028c:	2b01      	cmp	r3, #1
 801028e:	d009      	beq.n	80102a4 <etharp_find_entry+0x80>
 8010290:	7dfb      	ldrb	r3, [r7, #23]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d806      	bhi.n	80102a4 <etharp_find_entry+0x80>
 8010296:	4b99      	ldr	r3, [pc, #612]	@ (80104fc <etharp_find_entry+0x2d8>)
 8010298:	f240 1223 	movw	r2, #291	@ 0x123
 801029c:	4998      	ldr	r1, [pc, #608]	@ (8010500 <etharp_find_entry+0x2dc>)
 801029e:	4899      	ldr	r0, [pc, #612]	@ (8010504 <etharp_find_entry+0x2e0>)
 80102a0:	f002 fe74 	bl	8012f8c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d020      	beq.n	80102ec <etharp_find_entry+0xc8>
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6819      	ldr	r1, [r3, #0]
 80102ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102b2:	4891      	ldr	r0, [pc, #580]	@ (80104f8 <etharp_find_entry+0x2d4>)
 80102b4:	4613      	mov	r3, r2
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	4413      	add	r3, r2
 80102ba:	00db      	lsls	r3, r3, #3
 80102bc:	4403      	add	r3, r0
 80102be:	3304      	adds	r3, #4
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	4299      	cmp	r1, r3
 80102c4:	d112      	bne.n	80102ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00c      	beq.n	80102e6 <etharp_find_entry+0xc2>
 80102cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102d0:	4989      	ldr	r1, [pc, #548]	@ (80104f8 <etharp_find_entry+0x2d4>)
 80102d2:	4613      	mov	r3, r2
 80102d4:	005b      	lsls	r3, r3, #1
 80102d6:	4413      	add	r3, r2
 80102d8:	00db      	lsls	r3, r3, #3
 80102da:	440b      	add	r3, r1
 80102dc:	3308      	adds	r3, #8
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d102      	bne.n	80102ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80102e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102ea:	e100      	b.n	80104ee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80102ec:	7dfb      	ldrb	r3, [r7, #23]
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	d140      	bne.n	8010374 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80102f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102f6:	4980      	ldr	r1, [pc, #512]	@ (80104f8 <etharp_find_entry+0x2d4>)
 80102f8:	4613      	mov	r3, r2
 80102fa:	005b      	lsls	r3, r3, #1
 80102fc:	4413      	add	r3, r2
 80102fe:	00db      	lsls	r3, r3, #3
 8010300:	440b      	add	r3, r1
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d01a      	beq.n	801033e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010308:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801030c:	497a      	ldr	r1, [pc, #488]	@ (80104f8 <etharp_find_entry+0x2d4>)
 801030e:	4613      	mov	r3, r2
 8010310:	005b      	lsls	r3, r3, #1
 8010312:	4413      	add	r3, r2
 8010314:	00db      	lsls	r3, r3, #3
 8010316:	440b      	add	r3, r1
 8010318:	3312      	adds	r3, #18
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	8bba      	ldrh	r2, [r7, #28]
 801031e:	429a      	cmp	r2, r3
 8010320:	d845      	bhi.n	80103ae <etharp_find_entry+0x18a>
            old_queue = i;
 8010322:	8c3b      	ldrh	r3, [r7, #32]
 8010324:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801032a:	4973      	ldr	r1, [pc, #460]	@ (80104f8 <etharp_find_entry+0x2d4>)
 801032c:	4613      	mov	r3, r2
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	4413      	add	r3, r2
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	440b      	add	r3, r1
 8010336:	3312      	adds	r3, #18
 8010338:	881b      	ldrh	r3, [r3, #0]
 801033a:	83bb      	strh	r3, [r7, #28]
 801033c:	e037      	b.n	80103ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801033e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010342:	496d      	ldr	r1, [pc, #436]	@ (80104f8 <etharp_find_entry+0x2d4>)
 8010344:	4613      	mov	r3, r2
 8010346:	005b      	lsls	r3, r3, #1
 8010348:	4413      	add	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	440b      	add	r3, r1
 801034e:	3312      	adds	r3, #18
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	8b7a      	ldrh	r2, [r7, #26]
 8010354:	429a      	cmp	r2, r3
 8010356:	d82a      	bhi.n	80103ae <etharp_find_entry+0x18a>
            old_pending = i;
 8010358:	8c3b      	ldrh	r3, [r7, #32]
 801035a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801035c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010360:	4965      	ldr	r1, [pc, #404]	@ (80104f8 <etharp_find_entry+0x2d4>)
 8010362:	4613      	mov	r3, r2
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	4413      	add	r3, r2
 8010368:	00db      	lsls	r3, r3, #3
 801036a:	440b      	add	r3, r1
 801036c:	3312      	adds	r3, #18
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	837b      	strh	r3, [r7, #26]
 8010372:	e01c      	b.n	80103ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010374:	7dfb      	ldrb	r3, [r7, #23]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d919      	bls.n	80103ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801037a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801037e:	495e      	ldr	r1, [pc, #376]	@ (80104f8 <etharp_find_entry+0x2d4>)
 8010380:	4613      	mov	r3, r2
 8010382:	005b      	lsls	r3, r3, #1
 8010384:	4413      	add	r3, r2
 8010386:	00db      	lsls	r3, r3, #3
 8010388:	440b      	add	r3, r1
 801038a:	3312      	adds	r3, #18
 801038c:	881b      	ldrh	r3, [r3, #0]
 801038e:	8b3a      	ldrh	r2, [r7, #24]
 8010390:	429a      	cmp	r2, r3
 8010392:	d80c      	bhi.n	80103ae <etharp_find_entry+0x18a>
            old_stable = i;
 8010394:	8c3b      	ldrh	r3, [r7, #32]
 8010396:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8010398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801039c:	4956      	ldr	r1, [pc, #344]	@ (80104f8 <etharp_find_entry+0x2d4>)
 801039e:	4613      	mov	r3, r2
 80103a0:	005b      	lsls	r3, r3, #1
 80103a2:	4413      	add	r3, r2
 80103a4:	00db      	lsls	r3, r3, #3
 80103a6:	440b      	add	r3, r1
 80103a8:	3312      	adds	r3, #18
 80103aa:	881b      	ldrh	r3, [r3, #0]
 80103ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103ae:	8c3b      	ldrh	r3, [r7, #32]
 80103b0:	3301      	adds	r3, #1
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	843b      	strh	r3, [r7, #32]
 80103b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80103ba:	2b09      	cmp	r3, #9
 80103bc:	f77f af4c 	ble.w	8010258 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80103c0:	7afb      	ldrb	r3, [r7, #11]
 80103c2:	f003 0302 	and.w	r3, r3, #2
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d108      	bne.n	80103dc <etharp_find_entry+0x1b8>
 80103ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80103ce:	2b0a      	cmp	r3, #10
 80103d0:	d107      	bne.n	80103e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80103d2:	7afb      	ldrb	r3, [r7, #11]
 80103d4:	f003 0301 	and.w	r3, r3, #1
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d102      	bne.n	80103e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80103dc:	f04f 33ff 	mov.w	r3, #4294967295
 80103e0:	e085      	b.n	80104ee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80103e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80103e6:	2b09      	cmp	r3, #9
 80103e8:	dc02      	bgt.n	80103f0 <etharp_find_entry+0x1cc>
    i = empty;
 80103ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103ec:	843b      	strh	r3, [r7, #32]
 80103ee:	e039      	b.n	8010464 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80103f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80103f4:	2b09      	cmp	r3, #9
 80103f6:	dc14      	bgt.n	8010422 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80103f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80103fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010400:	493d      	ldr	r1, [pc, #244]	@ (80104f8 <etharp_find_entry+0x2d4>)
 8010402:	4613      	mov	r3, r2
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	4413      	add	r3, r2
 8010408:	00db      	lsls	r3, r3, #3
 801040a:	440b      	add	r3, r1
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d018      	beq.n	8010444 <etharp_find_entry+0x220>
 8010412:	4b3a      	ldr	r3, [pc, #232]	@ (80104fc <etharp_find_entry+0x2d8>)
 8010414:	f240 126d 	movw	r2, #365	@ 0x16d
 8010418:	493b      	ldr	r1, [pc, #236]	@ (8010508 <etharp_find_entry+0x2e4>)
 801041a:	483a      	ldr	r0, [pc, #232]	@ (8010504 <etharp_find_entry+0x2e0>)
 801041c:	f002 fdb6 	bl	8012f8c <iprintf>
 8010420:	e010      	b.n	8010444 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010422:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010426:	2b09      	cmp	r3, #9
 8010428:	dc02      	bgt.n	8010430 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801042a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801042c:	843b      	strh	r3, [r7, #32]
 801042e:	e009      	b.n	8010444 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010430:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010434:	2b09      	cmp	r3, #9
 8010436:	dc02      	bgt.n	801043e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010438:	8bfb      	ldrh	r3, [r7, #30]
 801043a:	843b      	strh	r3, [r7, #32]
 801043c:	e002      	b.n	8010444 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801043e:	f04f 33ff 	mov.w	r3, #4294967295
 8010442:	e054      	b.n	80104ee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010444:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010448:	2b09      	cmp	r3, #9
 801044a:	dd06      	ble.n	801045a <etharp_find_entry+0x236>
 801044c:	4b2b      	ldr	r3, [pc, #172]	@ (80104fc <etharp_find_entry+0x2d8>)
 801044e:	f240 127f 	movw	r2, #383	@ 0x17f
 8010452:	492e      	ldr	r1, [pc, #184]	@ (801050c <etharp_find_entry+0x2e8>)
 8010454:	482b      	ldr	r0, [pc, #172]	@ (8010504 <etharp_find_entry+0x2e0>)
 8010456:	f002 fd99 	bl	8012f8c <iprintf>
    etharp_free_entry(i);
 801045a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801045e:	4618      	mov	r0, r3
 8010460:	f7ff fe06 	bl	8010070 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010464:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010468:	2b09      	cmp	r3, #9
 801046a:	dd06      	ble.n	801047a <etharp_find_entry+0x256>
 801046c:	4b23      	ldr	r3, [pc, #140]	@ (80104fc <etharp_find_entry+0x2d8>)
 801046e:	f240 1283 	movw	r2, #387	@ 0x183
 8010472:	4926      	ldr	r1, [pc, #152]	@ (801050c <etharp_find_entry+0x2e8>)
 8010474:	4823      	ldr	r0, [pc, #140]	@ (8010504 <etharp_find_entry+0x2e0>)
 8010476:	f002 fd89 	bl	8012f8c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801047a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801047e:	491e      	ldr	r1, [pc, #120]	@ (80104f8 <etharp_find_entry+0x2d4>)
 8010480:	4613      	mov	r3, r2
 8010482:	005b      	lsls	r3, r3, #1
 8010484:	4413      	add	r3, r2
 8010486:	00db      	lsls	r3, r3, #3
 8010488:	440b      	add	r3, r1
 801048a:	3314      	adds	r3, #20
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d006      	beq.n	80104a0 <etharp_find_entry+0x27c>
 8010492:	4b1a      	ldr	r3, [pc, #104]	@ (80104fc <etharp_find_entry+0x2d8>)
 8010494:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8010498:	491d      	ldr	r1, [pc, #116]	@ (8010510 <etharp_find_entry+0x2ec>)
 801049a:	481a      	ldr	r0, [pc, #104]	@ (8010504 <etharp_find_entry+0x2e0>)
 801049c:	f002 fd76 	bl	8012f8c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00b      	beq.n	80104be <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80104a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	6819      	ldr	r1, [r3, #0]
 80104ae:	4812      	ldr	r0, [pc, #72]	@ (80104f8 <etharp_find_entry+0x2d4>)
 80104b0:	4613      	mov	r3, r2
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	4413      	add	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	4403      	add	r3, r0
 80104ba:	3304      	adds	r3, #4
 80104bc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80104be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104c2:	490d      	ldr	r1, [pc, #52]	@ (80104f8 <etharp_find_entry+0x2d4>)
 80104c4:	4613      	mov	r3, r2
 80104c6:	005b      	lsls	r3, r3, #1
 80104c8:	4413      	add	r3, r2
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	440b      	add	r3, r1
 80104ce:	3312      	adds	r3, #18
 80104d0:	2200      	movs	r2, #0
 80104d2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80104d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104d8:	4907      	ldr	r1, [pc, #28]	@ (80104f8 <etharp_find_entry+0x2d4>)
 80104da:	4613      	mov	r3, r2
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	4413      	add	r3, r2
 80104e0:	00db      	lsls	r3, r3, #3
 80104e2:	440b      	add	r3, r1
 80104e4:	3308      	adds	r3, #8
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80104ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3728      	adds	r7, #40	@ 0x28
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	20008aa4 	.word	0x20008aa4
 80104fc:	080161b4 	.word	0x080161b4
 8010500:	080161ec 	.word	0x080161ec
 8010504:	0801622c 	.word	0x0801622c
 8010508:	08016254 	.word	0x08016254
 801050c:	0801626c 	.word	0x0801626c
 8010510:	08016280 	.word	0x08016280

08010514 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b088      	sub	sp, #32
 8010518:	af02      	add	r7, sp, #8
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
 8010520:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010528:	2b06      	cmp	r3, #6
 801052a:	d006      	beq.n	801053a <etharp_update_arp_entry+0x26>
 801052c:	4b48      	ldr	r3, [pc, #288]	@ (8010650 <etharp_update_arp_entry+0x13c>)
 801052e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8010532:	4948      	ldr	r1, [pc, #288]	@ (8010654 <etharp_update_arp_entry+0x140>)
 8010534:	4848      	ldr	r0, [pc, #288]	@ (8010658 <etharp_update_arp_entry+0x144>)
 8010536:	f002 fd29 	bl	8012f8c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d012      	beq.n	8010566 <etharp_update_arp_entry+0x52>
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00e      	beq.n	8010566 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	68f9      	ldr	r1, [r7, #12]
 801054e:	4618      	mov	r0, r3
 8010550:	f001 f8fe 	bl	8011750 <ip4_addr_isbroadcast_u32>
 8010554:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010556:	2b00      	cmp	r3, #0
 8010558:	d105      	bne.n	8010566 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010562:	2be0      	cmp	r3, #224	@ 0xe0
 8010564:	d102      	bne.n	801056c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010566:	f06f 030f 	mvn.w	r3, #15
 801056a:	e06c      	b.n	8010646 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801056c:	78fb      	ldrb	r3, [r7, #3]
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	4619      	mov	r1, r3
 8010572:	68b8      	ldr	r0, [r7, #8]
 8010574:	f7ff fe56 	bl	8010224 <etharp_find_entry>
 8010578:	4603      	mov	r3, r0
 801057a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801057c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010580:	2b00      	cmp	r3, #0
 8010582:	da02      	bge.n	801058a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010584:	8afb      	ldrh	r3, [r7, #22]
 8010586:	b25b      	sxtb	r3, r3
 8010588:	e05d      	b.n	8010646 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801058a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801058e:	4933      	ldr	r1, [pc, #204]	@ (801065c <etharp_update_arp_entry+0x148>)
 8010590:	4613      	mov	r3, r2
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	4413      	add	r3, r2
 8010596:	00db      	lsls	r3, r3, #3
 8010598:	440b      	add	r3, r1
 801059a:	3314      	adds	r3, #20
 801059c:	2202      	movs	r2, #2
 801059e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80105a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105a4:	492d      	ldr	r1, [pc, #180]	@ (801065c <etharp_update_arp_entry+0x148>)
 80105a6:	4613      	mov	r3, r2
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	4413      	add	r3, r2
 80105ac:	00db      	lsls	r3, r3, #3
 80105ae:	440b      	add	r3, r1
 80105b0:	3308      	adds	r3, #8
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80105b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105ba:	4613      	mov	r3, r2
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	4413      	add	r3, r2
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	3308      	adds	r3, #8
 80105c4:	4a25      	ldr	r2, [pc, #148]	@ (801065c <etharp_update_arp_entry+0x148>)
 80105c6:	4413      	add	r3, r2
 80105c8:	3304      	adds	r3, #4
 80105ca:	2206      	movs	r2, #6
 80105cc:	6879      	ldr	r1, [r7, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f002 febb 	bl	801334a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80105d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105d8:	4920      	ldr	r1, [pc, #128]	@ (801065c <etharp_update_arp_entry+0x148>)
 80105da:	4613      	mov	r3, r2
 80105dc:	005b      	lsls	r3, r3, #1
 80105de:	4413      	add	r3, r2
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	440b      	add	r3, r1
 80105e4:	3312      	adds	r3, #18
 80105e6:	2200      	movs	r2, #0
 80105e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80105ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105ee:	491b      	ldr	r1, [pc, #108]	@ (801065c <etharp_update_arp_entry+0x148>)
 80105f0:	4613      	mov	r3, r2
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	4413      	add	r3, r2
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	440b      	add	r3, r1
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d021      	beq.n	8010644 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010600:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010604:	4915      	ldr	r1, [pc, #84]	@ (801065c <etharp_update_arp_entry+0x148>)
 8010606:	4613      	mov	r3, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	4413      	add	r3, r2
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	440b      	add	r3, r1
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010614:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010618:	4910      	ldr	r1, [pc, #64]	@ (801065c <etharp_update_arp_entry+0x148>)
 801061a:	4613      	mov	r3, r2
 801061c:	005b      	lsls	r3, r3, #1
 801061e:	4413      	add	r3, r2
 8010620:	00db      	lsls	r3, r3, #3
 8010622:	440b      	add	r3, r1
 8010624:	2200      	movs	r2, #0
 8010626:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801062e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6939      	ldr	r1, [r7, #16]
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f001 ff97 	bl	801256c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801063e:	6938      	ldr	r0, [r7, #16]
 8010640:	f7f9 fb2c 	bl	8009c9c <pbuf_free>
  }
  return ERR_OK;
 8010644:	2300      	movs	r3, #0
}
 8010646:	4618      	mov	r0, r3
 8010648:	3718      	adds	r7, #24
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	080161b4 	.word	0x080161b4
 8010654:	080162ac 	.word	0x080162ac
 8010658:	0801622c 	.word	0x0801622c
 801065c:	20008aa4 	.word	0x20008aa4

08010660 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010668:	2300      	movs	r3, #0
 801066a:	60fb      	str	r3, [r7, #12]
 801066c:	e01e      	b.n	80106ac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801066e:	4913      	ldr	r1, [pc, #76]	@ (80106bc <etharp_cleanup_netif+0x5c>)
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	4613      	mov	r3, r2
 8010674:	005b      	lsls	r3, r3, #1
 8010676:	4413      	add	r3, r2
 8010678:	00db      	lsls	r3, r3, #3
 801067a:	440b      	add	r3, r1
 801067c:	3314      	adds	r3, #20
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010682:	7afb      	ldrb	r3, [r7, #11]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00e      	beq.n	80106a6 <etharp_cleanup_netif+0x46>
 8010688:	490c      	ldr	r1, [pc, #48]	@ (80106bc <etharp_cleanup_netif+0x5c>)
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	4613      	mov	r3, r2
 801068e:	005b      	lsls	r3, r3, #1
 8010690:	4413      	add	r3, r2
 8010692:	00db      	lsls	r3, r3, #3
 8010694:	440b      	add	r3, r1
 8010696:	3308      	adds	r3, #8
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	429a      	cmp	r2, r3
 801069e:	d102      	bne.n	80106a6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f7ff fce5 	bl	8010070 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	3301      	adds	r3, #1
 80106aa:	60fb      	str	r3, [r7, #12]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2b09      	cmp	r3, #9
 80106b0:	dddd      	ble.n	801066e <etharp_cleanup_netif+0xe>
    }
  }
}
 80106b2:	bf00      	nop
 80106b4:	bf00      	nop
 80106b6:	3710      	adds	r7, #16
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	20008aa4 	.word	0x20008aa4

080106c0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80106c0:	b5b0      	push	{r4, r5, r7, lr}
 80106c2:	b08a      	sub	sp, #40	@ 0x28
 80106c4:	af04      	add	r7, sp, #16
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d107      	bne.n	80106e0 <etharp_input+0x20>
 80106d0:	4b3d      	ldr	r3, [pc, #244]	@ (80107c8 <etharp_input+0x108>)
 80106d2:	f240 228a 	movw	r2, #650	@ 0x28a
 80106d6:	493d      	ldr	r1, [pc, #244]	@ (80107cc <etharp_input+0x10c>)
 80106d8:	483d      	ldr	r0, [pc, #244]	@ (80107d0 <etharp_input+0x110>)
 80106da:	f002 fc57 	bl	8012f8c <iprintf>
 80106de:	e06f      	b.n	80107c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	881b      	ldrh	r3, [r3, #0]
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106f0:	d10c      	bne.n	801070c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106f6:	2b06      	cmp	r3, #6
 80106f8:	d108      	bne.n	801070c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106fe:	2b04      	cmp	r3, #4
 8010700:	d104      	bne.n	801070c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	885b      	ldrh	r3, [r3, #2]
 8010706:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010708:	2b08      	cmp	r3, #8
 801070a:	d003      	beq.n	8010714 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7f9 fac5 	bl	8009c9c <pbuf_free>
    return;
 8010712:	e055      	b.n	80107c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	330e      	adds	r3, #14
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	3318      	adds	r3, #24
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	3304      	adds	r3, #4
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d102      	bne.n	8010734 <etharp_input+0x74>
    for_us = 0;
 801072e:	2300      	movs	r3, #0
 8010730:	75fb      	strb	r3, [r7, #23]
 8010732:	e009      	b.n	8010748 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010734:	68ba      	ldr	r2, [r7, #8]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	3304      	adds	r3, #4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	429a      	cmp	r2, r3
 801073e:	bf0c      	ite	eq
 8010740:	2301      	moveq	r3, #1
 8010742:	2300      	movne	r3, #0
 8010744:	b2db      	uxtb	r3, r3
 8010746:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	f103 0208 	add.w	r2, r3, #8
 801074e:	7dfb      	ldrb	r3, [r7, #23]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <etharp_input+0x98>
 8010754:	2301      	movs	r3, #1
 8010756:	e000      	b.n	801075a <etharp_input+0x9a>
 8010758:	2302      	movs	r3, #2
 801075a:	f107 010c 	add.w	r1, r7, #12
 801075e:	6838      	ldr	r0, [r7, #0]
 8010760:	f7ff fed8 	bl	8010514 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	88db      	ldrh	r3, [r3, #6]
 8010768:	b29b      	uxth	r3, r3
 801076a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801076e:	d003      	beq.n	8010778 <etharp_input+0xb8>
 8010770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010774:	d01e      	beq.n	80107b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010776:	e020      	b.n	80107ba <etharp_input+0xfa>
      if (for_us) {
 8010778:	7dfb      	ldrb	r3, [r7, #23]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d01c      	beq.n	80107b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010794:	693a      	ldr	r2, [r7, #16]
 8010796:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010798:	2102      	movs	r1, #2
 801079a:	9103      	str	r1, [sp, #12]
 801079c:	f107 010c 	add.w	r1, r7, #12
 80107a0:	9102      	str	r1, [sp, #8]
 80107a2:	9201      	str	r2, [sp, #4]
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	462b      	mov	r3, r5
 80107a8:	4622      	mov	r2, r4
 80107aa:	4601      	mov	r1, r0
 80107ac:	6838      	ldr	r0, [r7, #0]
 80107ae:	f000 faeb 	bl	8010d88 <etharp_raw>
      break;
 80107b2:	e001      	b.n	80107b8 <etharp_input+0xf8>
      break;
 80107b4:	bf00      	nop
 80107b6:	e000      	b.n	80107ba <etharp_input+0xfa>
      break;
 80107b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7f9 fa6e 	bl	8009c9c <pbuf_free>
}
 80107c0:	3718      	adds	r7, #24
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bdb0      	pop	{r4, r5, r7, pc}
 80107c6:	bf00      	nop
 80107c8:	080161b4 	.word	0x080161b4
 80107cc:	08016304 	.word	0x08016304
 80107d0:	0801622c 	.word	0x0801622c

080107d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b086      	sub	sp, #24
 80107d8:	af02      	add	r7, sp, #8
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	4613      	mov	r3, r2
 80107e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80107e2:	79fa      	ldrb	r2, [r7, #7]
 80107e4:	4944      	ldr	r1, [pc, #272]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 80107e6:	4613      	mov	r3, r2
 80107e8:	005b      	lsls	r3, r3, #1
 80107ea:	4413      	add	r3, r2
 80107ec:	00db      	lsls	r3, r3, #3
 80107ee:	440b      	add	r3, r1
 80107f0:	3314      	adds	r3, #20
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d806      	bhi.n	8010806 <etharp_output_to_arp_index+0x32>
 80107f8:	4b40      	ldr	r3, [pc, #256]	@ (80108fc <etharp_output_to_arp_index+0x128>)
 80107fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80107fe:	4940      	ldr	r1, [pc, #256]	@ (8010900 <etharp_output_to_arp_index+0x12c>)
 8010800:	4840      	ldr	r0, [pc, #256]	@ (8010904 <etharp_output_to_arp_index+0x130>)
 8010802:	f002 fbc3 	bl	8012f8c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010806:	79fa      	ldrb	r2, [r7, #7]
 8010808:	493b      	ldr	r1, [pc, #236]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 801080a:	4613      	mov	r3, r2
 801080c:	005b      	lsls	r3, r3, #1
 801080e:	4413      	add	r3, r2
 8010810:	00db      	lsls	r3, r3, #3
 8010812:	440b      	add	r3, r1
 8010814:	3314      	adds	r3, #20
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	2b02      	cmp	r3, #2
 801081a:	d153      	bne.n	80108c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801081c:	79fa      	ldrb	r2, [r7, #7]
 801081e:	4936      	ldr	r1, [pc, #216]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 8010820:	4613      	mov	r3, r2
 8010822:	005b      	lsls	r3, r3, #1
 8010824:	4413      	add	r3, r2
 8010826:	00db      	lsls	r3, r3, #3
 8010828:	440b      	add	r3, r1
 801082a:	3312      	adds	r3, #18
 801082c:	881b      	ldrh	r3, [r3, #0]
 801082e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010832:	d919      	bls.n	8010868 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010834:	79fa      	ldrb	r2, [r7, #7]
 8010836:	4613      	mov	r3, r2
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	4413      	add	r3, r2
 801083c:	00db      	lsls	r3, r3, #3
 801083e:	4a2e      	ldr	r2, [pc, #184]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 8010840:	4413      	add	r3, r2
 8010842:	3304      	adds	r3, #4
 8010844:	4619      	mov	r1, r3
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f000 fb4c 	bl	8010ee4 <etharp_request>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d138      	bne.n	80108c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010852:	79fa      	ldrb	r2, [r7, #7]
 8010854:	4928      	ldr	r1, [pc, #160]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 8010856:	4613      	mov	r3, r2
 8010858:	005b      	lsls	r3, r3, #1
 801085a:	4413      	add	r3, r2
 801085c:	00db      	lsls	r3, r3, #3
 801085e:	440b      	add	r3, r1
 8010860:	3314      	adds	r3, #20
 8010862:	2203      	movs	r2, #3
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	e02d      	b.n	80108c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010868:	79fa      	ldrb	r2, [r7, #7]
 801086a:	4923      	ldr	r1, [pc, #140]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 801086c:	4613      	mov	r3, r2
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	4413      	add	r3, r2
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	440b      	add	r3, r1
 8010876:	3312      	adds	r3, #18
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801087e:	d321      	bcc.n	80108c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010880:	79fa      	ldrb	r2, [r7, #7]
 8010882:	4613      	mov	r3, r2
 8010884:	005b      	lsls	r3, r3, #1
 8010886:	4413      	add	r3, r2
 8010888:	00db      	lsls	r3, r3, #3
 801088a:	4a1b      	ldr	r2, [pc, #108]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 801088c:	4413      	add	r3, r2
 801088e:	1d19      	adds	r1, r3, #4
 8010890:	79fa      	ldrb	r2, [r7, #7]
 8010892:	4613      	mov	r3, r2
 8010894:	005b      	lsls	r3, r3, #1
 8010896:	4413      	add	r3, r2
 8010898:	00db      	lsls	r3, r3, #3
 801089a:	3308      	adds	r3, #8
 801089c:	4a16      	ldr	r2, [pc, #88]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 801089e:	4413      	add	r3, r2
 80108a0:	3304      	adds	r3, #4
 80108a2:	461a      	mov	r2, r3
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f000 fafb 	bl	8010ea0 <etharp_request_dst>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d109      	bne.n	80108c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80108b0:	79fa      	ldrb	r2, [r7, #7]
 80108b2:	4911      	ldr	r1, [pc, #68]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 80108b4:	4613      	mov	r3, r2
 80108b6:	005b      	lsls	r3, r3, #1
 80108b8:	4413      	add	r3, r2
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	440b      	add	r3, r1
 80108be:	3314      	adds	r3, #20
 80108c0:	2203      	movs	r2, #3
 80108c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80108ca:	79fa      	ldrb	r2, [r7, #7]
 80108cc:	4613      	mov	r3, r2
 80108ce:	005b      	lsls	r3, r3, #1
 80108d0:	4413      	add	r3, r2
 80108d2:	00db      	lsls	r3, r3, #3
 80108d4:	3308      	adds	r3, #8
 80108d6:	4a08      	ldr	r2, [pc, #32]	@ (80108f8 <etharp_output_to_arp_index+0x124>)
 80108d8:	4413      	add	r3, r2
 80108da:	3304      	adds	r3, #4
 80108dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80108e0:	9200      	str	r2, [sp, #0]
 80108e2:	460a      	mov	r2, r1
 80108e4:	68b9      	ldr	r1, [r7, #8]
 80108e6:	68f8      	ldr	r0, [r7, #12]
 80108e8:	f001 fe40 	bl	801256c <ethernet_output>
 80108ec:	4603      	mov	r3, r0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	20008aa4 	.word	0x20008aa4
 80108fc:	080161b4 	.word	0x080161b4
 8010900:	08016324 	.word	0x08016324
 8010904:	0801622c 	.word	0x0801622c

08010908 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08a      	sub	sp, #40	@ 0x28
 801090c:	af02      	add	r7, sp, #8
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d106      	bne.n	801092c <etharp_output+0x24>
 801091e:	4b73      	ldr	r3, [pc, #460]	@ (8010aec <etharp_output+0x1e4>)
 8010920:	f240 321e 	movw	r2, #798	@ 0x31e
 8010924:	4972      	ldr	r1, [pc, #456]	@ (8010af0 <etharp_output+0x1e8>)
 8010926:	4873      	ldr	r0, [pc, #460]	@ (8010af4 <etharp_output+0x1ec>)
 8010928:	f002 fb30 	bl	8012f8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d106      	bne.n	8010940 <etharp_output+0x38>
 8010932:	4b6e      	ldr	r3, [pc, #440]	@ (8010aec <etharp_output+0x1e4>)
 8010934:	f240 321f 	movw	r2, #799	@ 0x31f
 8010938:	496f      	ldr	r1, [pc, #444]	@ (8010af8 <etharp_output+0x1f0>)
 801093a:	486e      	ldr	r0, [pc, #440]	@ (8010af4 <etharp_output+0x1ec>)
 801093c:	f002 fb26 	bl	8012f8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d106      	bne.n	8010954 <etharp_output+0x4c>
 8010946:	4b69      	ldr	r3, [pc, #420]	@ (8010aec <etharp_output+0x1e4>)
 8010948:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801094c:	496b      	ldr	r1, [pc, #428]	@ (8010afc <etharp_output+0x1f4>)
 801094e:	4869      	ldr	r0, [pc, #420]	@ (8010af4 <etharp_output+0x1ec>)
 8010950:	f002 fb1c 	bl	8012f8c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	68f9      	ldr	r1, [r7, #12]
 801095a:	4618      	mov	r0, r3
 801095c:	f000 fef8 	bl	8011750 <ip4_addr_isbroadcast_u32>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d002      	beq.n	801096c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010966:	4b66      	ldr	r3, [pc, #408]	@ (8010b00 <etharp_output+0x1f8>)
 8010968:	61fb      	str	r3, [r7, #28]
 801096a:	e0af      	b.n	8010acc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010974:	2be0      	cmp	r3, #224	@ 0xe0
 8010976:	d118      	bne.n	80109aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010978:	2301      	movs	r3, #1
 801097a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801097c:	2300      	movs	r3, #0
 801097e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010980:	235e      	movs	r3, #94	@ 0x5e
 8010982:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	3301      	adds	r3, #1
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801098e:	b2db      	uxtb	r3, r3
 8010990:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	3302      	adds	r3, #2
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	3303      	adds	r3, #3
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80109a2:	f107 0310 	add.w	r3, r7, #16
 80109a6:	61fb      	str	r3, [r7, #28]
 80109a8:	e090      	b.n	8010acc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	3304      	adds	r3, #4
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	405a      	eors	r2, r3
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	3308      	adds	r3, #8
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4013      	ands	r3, r2
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d012      	beq.n	80109e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80109c8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d00b      	beq.n	80109e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	330c      	adds	r3, #12
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d003      	beq.n	80109e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	330c      	adds	r3, #12
 80109de:	61bb      	str	r3, [r7, #24]
 80109e0:	e002      	b.n	80109e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80109e2:	f06f 0303 	mvn.w	r3, #3
 80109e6:	e07d      	b.n	8010ae4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80109e8:	4b46      	ldr	r3, [pc, #280]	@ (8010b04 <etharp_output+0x1fc>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	4619      	mov	r1, r3
 80109ee:	4a46      	ldr	r2, [pc, #280]	@ (8010b08 <etharp_output+0x200>)
 80109f0:	460b      	mov	r3, r1
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	440b      	add	r3, r1
 80109f6:	00db      	lsls	r3, r3, #3
 80109f8:	4413      	add	r3, r2
 80109fa:	3314      	adds	r3, #20
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d925      	bls.n	8010a4e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010a02:	4b40      	ldr	r3, [pc, #256]	@ (8010b04 <etharp_output+0x1fc>)
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	4619      	mov	r1, r3
 8010a08:	4a3f      	ldr	r2, [pc, #252]	@ (8010b08 <etharp_output+0x200>)
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	005b      	lsls	r3, r3, #1
 8010a0e:	440b      	add	r3, r1
 8010a10:	00db      	lsls	r3, r3, #3
 8010a12:	4413      	add	r3, r2
 8010a14:	3308      	adds	r3, #8
 8010a16:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010a18:	68fa      	ldr	r2, [r7, #12]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d117      	bne.n	8010a4e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	4b38      	ldr	r3, [pc, #224]	@ (8010b04 <etharp_output+0x1fc>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	4618      	mov	r0, r3
 8010a28:	4937      	ldr	r1, [pc, #220]	@ (8010b08 <etharp_output+0x200>)
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	005b      	lsls	r3, r3, #1
 8010a2e:	4403      	add	r3, r0
 8010a30:	00db      	lsls	r3, r3, #3
 8010a32:	440b      	add	r3, r1
 8010a34:	3304      	adds	r3, #4
 8010a36:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d108      	bne.n	8010a4e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010a3c:	4b31      	ldr	r3, [pc, #196]	@ (8010b04 <etharp_output+0x1fc>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	68b9      	ldr	r1, [r7, #8]
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f7ff fec5 	bl	80107d4 <etharp_output_to_arp_index>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	e04a      	b.n	8010ae4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a4e:	2300      	movs	r3, #0
 8010a50:	75fb      	strb	r3, [r7, #23]
 8010a52:	e031      	b.n	8010ab8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a54:	7dfa      	ldrb	r2, [r7, #23]
 8010a56:	492c      	ldr	r1, [pc, #176]	@ (8010b08 <etharp_output+0x200>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	4413      	add	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	440b      	add	r3, r1
 8010a62:	3314      	adds	r3, #20
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d923      	bls.n	8010ab2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010a6a:	7dfa      	ldrb	r2, [r7, #23]
 8010a6c:	4926      	ldr	r1, [pc, #152]	@ (8010b08 <etharp_output+0x200>)
 8010a6e:	4613      	mov	r3, r2
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	4413      	add	r3, r2
 8010a74:	00db      	lsls	r3, r3, #3
 8010a76:	440b      	add	r3, r1
 8010a78:	3308      	adds	r3, #8
 8010a7a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d117      	bne.n	8010ab2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	6819      	ldr	r1, [r3, #0]
 8010a86:	7dfa      	ldrb	r2, [r7, #23]
 8010a88:	481f      	ldr	r0, [pc, #124]	@ (8010b08 <etharp_output+0x200>)
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	4413      	add	r3, r2
 8010a90:	00db      	lsls	r3, r3, #3
 8010a92:	4403      	add	r3, r0
 8010a94:	3304      	adds	r3, #4
 8010a96:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010a98:	4299      	cmp	r1, r3
 8010a9a:	d10a      	bne.n	8010ab2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010a9c:	4a19      	ldr	r2, [pc, #100]	@ (8010b04 <etharp_output+0x1fc>)
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010aa2:	7dfb      	ldrb	r3, [r7, #23]
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	68b9      	ldr	r1, [r7, #8]
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f7ff fe93 	bl	80107d4 <etharp_output_to_arp_index>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	e018      	b.n	8010ae4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010ab2:	7dfb      	ldrb	r3, [r7, #23]
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	75fb      	strb	r3, [r7, #23]
 8010ab8:	7dfb      	ldrb	r3, [r7, #23]
 8010aba:	2b09      	cmp	r3, #9
 8010abc:	d9ca      	bls.n	8010a54 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010abe:	68ba      	ldr	r2, [r7, #8]
 8010ac0:	69b9      	ldr	r1, [r7, #24]
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	f000 f822 	bl	8010b0c <etharp_query>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	e00b      	b.n	8010ae4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010ad2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	68b9      	ldr	r1, [r7, #8]
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f001 fd45 	bl	801256c <ethernet_output>
 8010ae2:	4603      	mov	r3, r0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3720      	adds	r7, #32
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	080161b4 	.word	0x080161b4
 8010af0:	08016304 	.word	0x08016304
 8010af4:	0801622c 	.word	0x0801622c
 8010af8:	08016354 	.word	0x08016354
 8010afc:	080162f4 	.word	0x080162f4
 8010b00:	08016d24 	.word	0x08016d24
 8010b04:	20008b94 	.word	0x20008b94
 8010b08:	20008aa4 	.word	0x20008aa4

08010b0c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b08c      	sub	sp, #48	@ 0x30
 8010b10:	af02      	add	r7, sp, #8
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	3326      	adds	r3, #38	@ 0x26
 8010b1c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010b1e:	23ff      	movs	r3, #255	@ 0xff
 8010b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8010b24:	2300      	movs	r3, #0
 8010b26:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	68f9      	ldr	r1, [r7, #12]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 fe0e 	bl	8011750 <ip4_addr_isbroadcast_u32>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10c      	bne.n	8010b54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b42:	2be0      	cmp	r3, #224	@ 0xe0
 8010b44:	d006      	beq.n	8010b54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d003      	beq.n	8010b54 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d102      	bne.n	8010b5a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b54:	f06f 030f 	mvn.w	r3, #15
 8010b58:	e101      	b.n	8010d5e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	2101      	movs	r1, #1
 8010b5e:	68b8      	ldr	r0, [r7, #8]
 8010b60:	f7ff fb60 	bl	8010224 <etharp_find_entry>
 8010b64:	4603      	mov	r3, r0
 8010b66:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	da02      	bge.n	8010b76 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010b70:	8a7b      	ldrh	r3, [r7, #18]
 8010b72:	b25b      	sxtb	r3, r3
 8010b74:	e0f3      	b.n	8010d5e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010b76:	8a7b      	ldrh	r3, [r7, #18]
 8010b78:	2b7e      	cmp	r3, #126	@ 0x7e
 8010b7a:	d906      	bls.n	8010b8a <etharp_query+0x7e>
 8010b7c:	4b7a      	ldr	r3, [pc, #488]	@ (8010d68 <etharp_query+0x25c>)
 8010b7e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8010b82:	497a      	ldr	r1, [pc, #488]	@ (8010d6c <etharp_query+0x260>)
 8010b84:	487a      	ldr	r0, [pc, #488]	@ (8010d70 <etharp_query+0x264>)
 8010b86:	f002 fa01 	bl	8012f8c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010b8a:	8a7b      	ldrh	r3, [r7, #18]
 8010b8c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010b8e:	7c7a      	ldrb	r2, [r7, #17]
 8010b90:	4978      	ldr	r1, [pc, #480]	@ (8010d74 <etharp_query+0x268>)
 8010b92:	4613      	mov	r3, r2
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	4413      	add	r3, r2
 8010b98:	00db      	lsls	r3, r3, #3
 8010b9a:	440b      	add	r3, r1
 8010b9c:	3314      	adds	r3, #20
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d115      	bne.n	8010bd0 <etharp_query+0xc4>
    is_new_entry = 1;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010ba8:	7c7a      	ldrb	r2, [r7, #17]
 8010baa:	4972      	ldr	r1, [pc, #456]	@ (8010d74 <etharp_query+0x268>)
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	3314      	adds	r3, #20
 8010bb8:	2201      	movs	r2, #1
 8010bba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010bbc:	7c7a      	ldrb	r2, [r7, #17]
 8010bbe:	496d      	ldr	r1, [pc, #436]	@ (8010d74 <etharp_query+0x268>)
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	005b      	lsls	r3, r3, #1
 8010bc4:	4413      	add	r3, r2
 8010bc6:	00db      	lsls	r3, r3, #3
 8010bc8:	440b      	add	r3, r1
 8010bca:	3308      	adds	r3, #8
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010bd0:	7c7a      	ldrb	r2, [r7, #17]
 8010bd2:	4968      	ldr	r1, [pc, #416]	@ (8010d74 <etharp_query+0x268>)
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	005b      	lsls	r3, r3, #1
 8010bd8:	4413      	add	r3, r2
 8010bda:	00db      	lsls	r3, r3, #3
 8010bdc:	440b      	add	r3, r1
 8010bde:	3314      	adds	r3, #20
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d011      	beq.n	8010c0a <etharp_query+0xfe>
 8010be6:	7c7a      	ldrb	r2, [r7, #17]
 8010be8:	4962      	ldr	r1, [pc, #392]	@ (8010d74 <etharp_query+0x268>)
 8010bea:	4613      	mov	r3, r2
 8010bec:	005b      	lsls	r3, r3, #1
 8010bee:	4413      	add	r3, r2
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	440b      	add	r3, r1
 8010bf4:	3314      	adds	r3, #20
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d806      	bhi.n	8010c0a <etharp_query+0xfe>
 8010bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8010d68 <etharp_query+0x25c>)
 8010bfe:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8010c02:	495d      	ldr	r1, [pc, #372]	@ (8010d78 <etharp_query+0x26c>)
 8010c04:	485a      	ldr	r0, [pc, #360]	@ (8010d70 <etharp_query+0x264>)
 8010c06:	f002 f9c1 	bl	8012f8c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010c0a:	6a3b      	ldr	r3, [r7, #32]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d102      	bne.n	8010c16 <etharp_query+0x10a>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d10c      	bne.n	8010c30 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010c16:	68b9      	ldr	r1, [r7, #8]
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	f000 f963 	bl	8010ee4 <etharp_request>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d102      	bne.n	8010c30 <etharp_query+0x124>
      return result;
 8010c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010c2e:	e096      	b.n	8010d5e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <etharp_query+0x138>
 8010c36:	4b4c      	ldr	r3, [pc, #304]	@ (8010d68 <etharp_query+0x25c>)
 8010c38:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8010c3c:	494f      	ldr	r1, [pc, #316]	@ (8010d7c <etharp_query+0x270>)
 8010c3e:	484c      	ldr	r0, [pc, #304]	@ (8010d70 <etharp_query+0x264>)
 8010c40:	f002 f9a4 	bl	8012f8c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010c44:	7c7a      	ldrb	r2, [r7, #17]
 8010c46:	494b      	ldr	r1, [pc, #300]	@ (8010d74 <etharp_query+0x268>)
 8010c48:	4613      	mov	r3, r2
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4413      	add	r3, r2
 8010c4e:	00db      	lsls	r3, r3, #3
 8010c50:	440b      	add	r3, r1
 8010c52:	3314      	adds	r3, #20
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d917      	bls.n	8010c8a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010c5a:	4a49      	ldr	r2, [pc, #292]	@ (8010d80 <etharp_query+0x274>)
 8010c5c:	7c7b      	ldrb	r3, [r7, #17]
 8010c5e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010c60:	7c7a      	ldrb	r2, [r7, #17]
 8010c62:	4613      	mov	r3, r2
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	4413      	add	r3, r2
 8010c68:	00db      	lsls	r3, r3, #3
 8010c6a:	3308      	adds	r3, #8
 8010c6c:	4a41      	ldr	r2, [pc, #260]	@ (8010d74 <etharp_query+0x268>)
 8010c6e:	4413      	add	r3, r2
 8010c70:	3304      	adds	r3, #4
 8010c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c76:	9200      	str	r2, [sp, #0]
 8010c78:	697a      	ldr	r2, [r7, #20]
 8010c7a:	6879      	ldr	r1, [r7, #4]
 8010c7c:	68f8      	ldr	r0, [r7, #12]
 8010c7e:	f001 fc75 	bl	801256c <ethernet_output>
 8010c82:	4603      	mov	r3, r0
 8010c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c88:	e067      	b.n	8010d5a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c8a:	7c7a      	ldrb	r2, [r7, #17]
 8010c8c:	4939      	ldr	r1, [pc, #228]	@ (8010d74 <etharp_query+0x268>)
 8010c8e:	4613      	mov	r3, r2
 8010c90:	005b      	lsls	r3, r3, #1
 8010c92:	4413      	add	r3, r2
 8010c94:	00db      	lsls	r3, r3, #3
 8010c96:	440b      	add	r3, r1
 8010c98:	3314      	adds	r3, #20
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d15c      	bne.n	8010d5a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ca8:	e01c      	b.n	8010ce4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	895a      	ldrh	r2, [r3, #10]
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	891b      	ldrh	r3, [r3, #8]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d10a      	bne.n	8010ccc <etharp_query+0x1c0>
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d006      	beq.n	8010ccc <etharp_query+0x1c0>
 8010cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8010d68 <etharp_query+0x25c>)
 8010cc0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8010cc4:	492f      	ldr	r1, [pc, #188]	@ (8010d84 <etharp_query+0x278>)
 8010cc6:	482a      	ldr	r0, [pc, #168]	@ (8010d70 <etharp_query+0x264>)
 8010cc8:	f002 f960 	bl	8012f8c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	7b1b      	ldrb	r3, [r3, #12]
 8010cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <etharp_query+0x1d2>
        copy_needed = 1;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	61bb      	str	r3, [r7, #24]
        break;
 8010cdc:	e005      	b.n	8010cea <etharp_query+0x1de>
      }
      p = p->next;
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1df      	bne.n	8010caa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d007      	beq.n	8010d00 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8010cf6:	200e      	movs	r0, #14
 8010cf8:	f7f9 fa3c 	bl	800a174 <pbuf_clone>
 8010cfc:	61f8      	str	r0, [r7, #28]
 8010cfe:	e004      	b.n	8010d0a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010d04:	69f8      	ldr	r0, [r7, #28]
 8010d06:	f7f9 f869 	bl	8009ddc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010d0a:	69fb      	ldr	r3, [r7, #28]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d021      	beq.n	8010d54 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010d10:	7c7a      	ldrb	r2, [r7, #17]
 8010d12:	4918      	ldr	r1, [pc, #96]	@ (8010d74 <etharp_query+0x268>)
 8010d14:	4613      	mov	r3, r2
 8010d16:	005b      	lsls	r3, r3, #1
 8010d18:	4413      	add	r3, r2
 8010d1a:	00db      	lsls	r3, r3, #3
 8010d1c:	440b      	add	r3, r1
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00a      	beq.n	8010d3a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010d24:	7c7a      	ldrb	r2, [r7, #17]
 8010d26:	4913      	ldr	r1, [pc, #76]	@ (8010d74 <etharp_query+0x268>)
 8010d28:	4613      	mov	r3, r2
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	4413      	add	r3, r2
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	440b      	add	r3, r1
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7f8 ffb1 	bl	8009c9c <pbuf_free>
      }
      arp_table[i].q = p;
 8010d3a:	7c7a      	ldrb	r2, [r7, #17]
 8010d3c:	490d      	ldr	r1, [pc, #52]	@ (8010d74 <etharp_query+0x268>)
 8010d3e:	4613      	mov	r3, r2
 8010d40:	005b      	lsls	r3, r3, #1
 8010d42:	4413      	add	r3, r2
 8010d44:	00db      	lsls	r3, r3, #3
 8010d46:	440b      	add	r3, r1
 8010d48:	69fa      	ldr	r2, [r7, #28]
 8010d4a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010d52:	e002      	b.n	8010d5a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010d54:	23ff      	movs	r3, #255	@ 0xff
 8010d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8010d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3728      	adds	r7, #40	@ 0x28
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	080161b4 	.word	0x080161b4
 8010d6c:	08016360 	.word	0x08016360
 8010d70:	0801622c 	.word	0x0801622c
 8010d74:	20008aa4 	.word	0x20008aa4
 8010d78:	08016370 	.word	0x08016370
 8010d7c:	08016354 	.word	0x08016354
 8010d80:	20008b94 	.word	0x20008b94
 8010d84:	08016398 	.word	0x08016398

08010d88 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b08a      	sub	sp, #40	@ 0x28
 8010d8c:	af02      	add	r7, sp, #8
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	607a      	str	r2, [r7, #4]
 8010d94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010d96:	2300      	movs	r3, #0
 8010d98:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d106      	bne.n	8010dae <etharp_raw+0x26>
 8010da0:	4b3a      	ldr	r3, [pc, #232]	@ (8010e8c <etharp_raw+0x104>)
 8010da2:	f240 4257 	movw	r2, #1111	@ 0x457
 8010da6:	493a      	ldr	r1, [pc, #232]	@ (8010e90 <etharp_raw+0x108>)
 8010da8:	483a      	ldr	r0, [pc, #232]	@ (8010e94 <etharp_raw+0x10c>)
 8010daa:	f002 f8ef 	bl	8012f8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010dae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010db2:	211c      	movs	r1, #28
 8010db4:	200e      	movs	r0, #14
 8010db6:	f7f8 fc8d 	bl	80096d4 <pbuf_alloc>
 8010dba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d102      	bne.n	8010dc8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8010dc6:	e05d      	b.n	8010e84 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	895b      	ldrh	r3, [r3, #10]
 8010dcc:	2b1b      	cmp	r3, #27
 8010dce:	d806      	bhi.n	8010dde <etharp_raw+0x56>
 8010dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8010e8c <etharp_raw+0x104>)
 8010dd2:	f240 4262 	movw	r2, #1122	@ 0x462
 8010dd6:	4930      	ldr	r1, [pc, #192]	@ (8010e98 <etharp_raw+0x110>)
 8010dd8:	482e      	ldr	r0, [pc, #184]	@ (8010e94 <etharp_raw+0x10c>)
 8010dda:	f002 f8d7 	bl	8012f8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010de4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7f7 fbfa 	bl	80085e0 <lwip_htons>
 8010dec:	4603      	mov	r3, r0
 8010dee:	461a      	mov	r2, r3
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010dfa:	2b06      	cmp	r3, #6
 8010dfc:	d006      	beq.n	8010e0c <etharp_raw+0x84>
 8010dfe:	4b23      	ldr	r3, [pc, #140]	@ (8010e8c <etharp_raw+0x104>)
 8010e00:	f240 4269 	movw	r2, #1129	@ 0x469
 8010e04:	4925      	ldr	r1, [pc, #148]	@ (8010e9c <etharp_raw+0x114>)
 8010e06:	4823      	ldr	r0, [pc, #140]	@ (8010e94 <etharp_raw+0x10c>)
 8010e08:	f002 f8c0 	bl	8012f8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	3308      	adds	r3, #8
 8010e10:	2206      	movs	r2, #6
 8010e12:	6839      	ldr	r1, [r7, #0]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f002 fa98 	bl	801334a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	3312      	adds	r3, #18
 8010e1e:	2206      	movs	r2, #6
 8010e20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e22:	4618      	mov	r0, r3
 8010e24:	f002 fa91 	bl	801334a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	330e      	adds	r3, #14
 8010e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e2e:	6812      	ldr	r2, [r2, #0]
 8010e30:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	3318      	adds	r3, #24
 8010e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e38:	6812      	ldr	r2, [r2, #0]
 8010e3a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	701a      	strb	r2, [r3, #0]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f042 0201 	orr.w	r2, r2, #1
 8010e48:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f042 0208 	orr.w	r2, r2, #8
 8010e52:	709a      	strb	r2, [r3, #2]
 8010e54:	2200      	movs	r2, #0
 8010e56:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	2206      	movs	r2, #6
 8010e5c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	2204      	movs	r2, #4
 8010e62:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010e64:	f640 0306 	movw	r3, #2054	@ 0x806
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	68ba      	ldr	r2, [r7, #8]
 8010e6e:	69b9      	ldr	r1, [r7, #24]
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f001 fb7b 	bl	801256c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010e76:	69b8      	ldr	r0, [r7, #24]
 8010e78:	f7f8 ff10 	bl	8009c9c <pbuf_free>
  p = NULL;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010e80:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3720      	adds	r7, #32
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	080161b4 	.word	0x080161b4
 8010e90:	08016304 	.word	0x08016304
 8010e94:	0801622c 	.word	0x0801622c
 8010e98:	080163b4 	.word	0x080163b4
 8010e9c:	080163e8 	.word	0x080163e8

08010ea0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b088      	sub	sp, #32
 8010ea4:	af04      	add	r7, sp, #16
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	9203      	str	r2, [sp, #12]
 8010ec0:	68ba      	ldr	r2, [r7, #8]
 8010ec2:	9202      	str	r2, [sp, #8]
 8010ec4:	4a06      	ldr	r2, [pc, #24]	@ (8010ee0 <etharp_request_dst+0x40>)
 8010ec6:	9201      	str	r2, [sp, #4]
 8010ec8:	9300      	str	r3, [sp, #0]
 8010eca:	4603      	mov	r3, r0
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f7ff ff5a 	bl	8010d88 <etharp_raw>
 8010ed4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	08016d2c 	.word	0x08016d2c

08010ee4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010eee:	4a05      	ldr	r2, [pc, #20]	@ (8010f04 <etharp_request+0x20>)
 8010ef0:	6839      	ldr	r1, [r7, #0]
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f7ff ffd4 	bl	8010ea0 <etharp_request_dst>
 8010ef8:	4603      	mov	r3, r0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	08016d24 	.word	0x08016d24

08010f08 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b08e      	sub	sp, #56	@ 0x38
 8010f0c:	af04      	add	r7, sp, #16
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010f12:	4b79      	ldr	r3, [pc, #484]	@ (80110f8 <icmp_input+0x1f0>)
 8010f14:	689b      	ldr	r3, [r3, #8]
 8010f16:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	f003 030f 	and.w	r3, r3, #15
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8010f28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f2a:	2b13      	cmp	r3, #19
 8010f2c:	f240 80cd 	bls.w	80110ca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	895b      	ldrh	r3, [r3, #10]
 8010f34:	2b03      	cmp	r3, #3
 8010f36:	f240 80ca 	bls.w	80110ce <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010f44:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f000 80b7 	beq.w	80110bc <icmp_input+0x1b4>
 8010f4e:	2b08      	cmp	r3, #8
 8010f50:	f040 80b7 	bne.w	80110c2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010f54:	4b69      	ldr	r3, [pc, #420]	@ (80110fc <icmp_input+0x1f4>)
 8010f56:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f58:	4b67      	ldr	r3, [pc, #412]	@ (80110f8 <icmp_input+0x1f0>)
 8010f5a:	695b      	ldr	r3, [r3, #20]
 8010f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f60:	2be0      	cmp	r3, #224	@ 0xe0
 8010f62:	f000 80bb 	beq.w	80110dc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010f66:	4b64      	ldr	r3, [pc, #400]	@ (80110f8 <icmp_input+0x1f0>)
 8010f68:	695b      	ldr	r3, [r3, #20]
 8010f6a:	4a63      	ldr	r2, [pc, #396]	@ (80110f8 <icmp_input+0x1f0>)
 8010f6c:	6812      	ldr	r2, [r2, #0]
 8010f6e:	4611      	mov	r1, r2
 8010f70:	4618      	mov	r0, r3
 8010f72:	f000 fbed 	bl	8011750 <ip4_addr_isbroadcast_u32>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f040 80b1 	bne.w	80110e0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	891b      	ldrh	r3, [r3, #8]
 8010f82:	2b07      	cmp	r3, #7
 8010f84:	f240 80a5 	bls.w	80110d2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010f88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f8a:	330e      	adds	r3, #14
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7f8 fdee 	bl	8009b70 <pbuf_add_header>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d04b      	beq.n	8011032 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	891a      	ldrh	r2, [r3, #8]
 8010f9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fa0:	4413      	add	r3, r2
 8010fa2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	891b      	ldrh	r3, [r3, #8]
 8010fa8:	8b7a      	ldrh	r2, [r7, #26]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	f0c0 809a 	bcc.w	80110e4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010fb0:	8b7b      	ldrh	r3, [r7, #26]
 8010fb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	200e      	movs	r0, #14
 8010fba:	f7f8 fb8b 	bl	80096d4 <pbuf_alloc>
 8010fbe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	f000 8090 	beq.w	80110e8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	895b      	ldrh	r3, [r3, #10]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d203      	bcs.n	8010fde <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010fd6:	6978      	ldr	r0, [r7, #20]
 8010fd8:	f7f8 fe60 	bl	8009c9c <pbuf_free>
          goto icmperr;
 8010fdc:	e085      	b.n	80110ea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f002 f9af 	bl	801334a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010fec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fee:	4619      	mov	r1, r3
 8010ff0:	6978      	ldr	r0, [r7, #20]
 8010ff2:	f7f8 fdcd 	bl	8009b90 <pbuf_remove_header>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d009      	beq.n	8011010 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010ffc:	4b40      	ldr	r3, [pc, #256]	@ (8011100 <icmp_input+0x1f8>)
 8010ffe:	22b6      	movs	r2, #182	@ 0xb6
 8011000:	4940      	ldr	r1, [pc, #256]	@ (8011104 <icmp_input+0x1fc>)
 8011002:	4841      	ldr	r0, [pc, #260]	@ (8011108 <icmp_input+0x200>)
 8011004:	f001 ffc2 	bl	8012f8c <iprintf>
          pbuf_free(r);
 8011008:	6978      	ldr	r0, [r7, #20]
 801100a:	f7f8 fe47 	bl	8009c9c <pbuf_free>
          goto icmperr;
 801100e:	e06c      	b.n	80110ea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011010:	6879      	ldr	r1, [r7, #4]
 8011012:	6978      	ldr	r0, [r7, #20]
 8011014:	f7f8 ff6a 	bl	8009eec <pbuf_copy>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d003      	beq.n	8011026 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801101e:	6978      	ldr	r0, [r7, #20]
 8011020:	f7f8 fe3c 	bl	8009c9c <pbuf_free>
          goto icmperr;
 8011024:	e061      	b.n	80110ea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f7f8 fe38 	bl	8009c9c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	607b      	str	r3, [r7, #4]
 8011030:	e00f      	b.n	8011052 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011034:	330e      	adds	r3, #14
 8011036:	4619      	mov	r1, r3
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7f8 fda9 	bl	8009b90 <pbuf_remove_header>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d006      	beq.n	8011052 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011044:	4b2e      	ldr	r3, [pc, #184]	@ (8011100 <icmp_input+0x1f8>)
 8011046:	22c7      	movs	r2, #199	@ 0xc7
 8011048:	4930      	ldr	r1, [pc, #192]	@ (801110c <icmp_input+0x204>)
 801104a:	482f      	ldr	r0, [pc, #188]	@ (8011108 <icmp_input+0x200>)
 801104c:	f001 ff9e 	bl	8012f8c <iprintf>
          goto icmperr;
 8011050:	e04b      	b.n	80110ea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011058:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801105a:	4619      	mov	r1, r3
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7f8 fd87 	bl	8009b70 <pbuf_add_header>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d12b      	bne.n	80110c0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011076:	4b20      	ldr	r3, [pc, #128]	@ (80110f8 <icmp_input+0x1f0>)
 8011078:	691a      	ldr	r2, [r3, #16]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2200      	movs	r2, #0
 8011082:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	2200      	movs	r2, #0
 8011088:	709a      	strb	r2, [r3, #2]
 801108a:	2200      	movs	r2, #0
 801108c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	22ff      	movs	r2, #255	@ 0xff
 8011092:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2200      	movs	r2, #0
 8011098:	729a      	strb	r2, [r3, #10]
 801109a:	2200      	movs	r2, #0
 801109c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	9302      	str	r3, [sp, #8]
 80110a2:	2301      	movs	r3, #1
 80110a4:	9301      	str	r3, [sp, #4]
 80110a6:	2300      	movs	r3, #0
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	23ff      	movs	r3, #255	@ 0xff
 80110ac:	2200      	movs	r2, #0
 80110ae:	69f9      	ldr	r1, [r7, #28]
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 fa75 	bl	80115a0 <ip4_output_if>
 80110b6:	4603      	mov	r3, r0
 80110b8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80110ba:	e001      	b.n	80110c0 <icmp_input+0x1b8>
      break;
 80110bc:	bf00      	nop
 80110be:	e000      	b.n	80110c2 <icmp_input+0x1ba>
      break;
 80110c0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f7f8 fdea 	bl	8009c9c <pbuf_free>
  return;
 80110c8:	e013      	b.n	80110f2 <icmp_input+0x1ea>
    goto lenerr;
 80110ca:	bf00      	nop
 80110cc:	e002      	b.n	80110d4 <icmp_input+0x1cc>
    goto lenerr;
 80110ce:	bf00      	nop
 80110d0:	e000      	b.n	80110d4 <icmp_input+0x1cc>
        goto lenerr;
 80110d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7f8 fde1 	bl	8009c9c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80110da:	e00a      	b.n	80110f2 <icmp_input+0x1ea>
        goto icmperr;
 80110dc:	bf00      	nop
 80110de:	e004      	b.n	80110ea <icmp_input+0x1e2>
        goto icmperr;
 80110e0:	bf00      	nop
 80110e2:	e002      	b.n	80110ea <icmp_input+0x1e2>
          goto icmperr;
 80110e4:	bf00      	nop
 80110e6:	e000      	b.n	80110ea <icmp_input+0x1e2>
          goto icmperr;
 80110e8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7f8 fdd6 	bl	8009c9c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80110f0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80110f2:	3728      	adds	r7, #40	@ 0x28
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	200054d4 	.word	0x200054d4
 80110fc:	200054e8 	.word	0x200054e8
 8011100:	0801642c 	.word	0x0801642c
 8011104:	08016464 	.word	0x08016464
 8011108:	0801649c 	.word	0x0801649c
 801110c:	080164c4 	.word	0x080164c4

08011110 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	460b      	mov	r3, r1
 801111a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801111c:	78fb      	ldrb	r3, [r7, #3]
 801111e:	461a      	mov	r2, r3
 8011120:	2103      	movs	r1, #3
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 f814 	bl	8011150 <icmp_send_response>
}
 8011128:	bf00      	nop
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	460b      	mov	r3, r1
 801113a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801113c:	78fb      	ldrb	r3, [r7, #3]
 801113e:	461a      	mov	r2, r3
 8011140:	210b      	movs	r1, #11
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 f804 	bl	8011150 <icmp_send_response>
}
 8011148:	bf00      	nop
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b08c      	sub	sp, #48	@ 0x30
 8011154:	af04      	add	r7, sp, #16
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	460b      	mov	r3, r1
 801115a:	70fb      	strb	r3, [r7, #3]
 801115c:	4613      	mov	r3, r2
 801115e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011160:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011164:	2124      	movs	r1, #36	@ 0x24
 8011166:	2022      	movs	r0, #34	@ 0x22
 8011168:	f7f8 fab4 	bl	80096d4 <pbuf_alloc>
 801116c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d04c      	beq.n	801120e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	895b      	ldrh	r3, [r3, #10]
 8011178:	2b23      	cmp	r3, #35	@ 0x23
 801117a:	d806      	bhi.n	801118a <icmp_send_response+0x3a>
 801117c:	4b26      	ldr	r3, [pc, #152]	@ (8011218 <icmp_send_response+0xc8>)
 801117e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8011182:	4926      	ldr	r1, [pc, #152]	@ (801121c <icmp_send_response+0xcc>)
 8011184:	4826      	ldr	r0, [pc, #152]	@ (8011220 <icmp_send_response+0xd0>)
 8011186:	f001 ff01 	bl	8012f8c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	78fa      	ldrb	r2, [r7, #3]
 801119a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	78ba      	ldrb	r2, [r7, #2]
 80111a0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2200      	movs	r2, #0
 80111a6:	711a      	strb	r2, [r3, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	2200      	movs	r2, #0
 80111b0:	719a      	strb	r2, [r3, #6]
 80111b2:	2200      	movs	r2, #0
 80111b4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	f103 0008 	add.w	r0, r3, #8
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	221c      	movs	r2, #28
 80111c4:	4619      	mov	r1, r3
 80111c6:	f002 f8c0 	bl	801334a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80111d0:	f107 030c 	add.w	r3, r7, #12
 80111d4:	4618      	mov	r0, r3
 80111d6:	f000 f825 	bl	8011224 <ip4_route>
 80111da:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d011      	beq.n	8011206 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	2200      	movs	r2, #0
 80111e6:	709a      	strb	r2, [r3, #2]
 80111e8:	2200      	movs	r2, #0
 80111ea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80111ec:	f107 020c 	add.w	r2, r7, #12
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	9302      	str	r3, [sp, #8]
 80111f4:	2301      	movs	r3, #1
 80111f6:	9301      	str	r3, [sp, #4]
 80111f8:	2300      	movs	r3, #0
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	23ff      	movs	r3, #255	@ 0xff
 80111fe:	2100      	movs	r1, #0
 8011200:	69f8      	ldr	r0, [r7, #28]
 8011202:	f000 f9cd 	bl	80115a0 <ip4_output_if>
  }
  pbuf_free(q);
 8011206:	69f8      	ldr	r0, [r7, #28]
 8011208:	f7f8 fd48 	bl	8009c9c <pbuf_free>
 801120c:	e000      	b.n	8011210 <icmp_send_response+0xc0>
    return;
 801120e:	bf00      	nop
}
 8011210:	3720      	adds	r7, #32
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	0801642c 	.word	0x0801642c
 801121c:	080164f8 	.word	0x080164f8
 8011220:	0801649c 	.word	0x0801649c

08011224 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011224:	b480      	push	{r7}
 8011226:	b085      	sub	sp, #20
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801122c:	4b33      	ldr	r3, [pc, #204]	@ (80112fc <ip4_route+0xd8>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	60fb      	str	r3, [r7, #12]
 8011232:	e036      	b.n	80112a2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	b2db      	uxtb	r3, r3
 8011240:	2b00      	cmp	r3, #0
 8011242:	d02b      	beq.n	801129c <ip4_route+0x78>
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801124a:	089b      	lsrs	r3, r3, #2
 801124c:	f003 0301 	and.w	r3, r3, #1
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d022      	beq.n	801129c <ip4_route+0x78>
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	3304      	adds	r3, #4
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d01d      	beq.n	801129c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	3304      	adds	r3, #4
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	405a      	eors	r2, r3
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	3308      	adds	r3, #8
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4013      	ands	r3, r2
 8011274:	2b00      	cmp	r3, #0
 8011276:	d101      	bne.n	801127c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	e038      	b.n	80112ee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011282:	f003 0302 	and.w	r3, r3, #2
 8011286:	2b00      	cmp	r3, #0
 8011288:	d108      	bne.n	801129c <ip4_route+0x78>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	330c      	adds	r3, #12
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	429a      	cmp	r2, r3
 8011296:	d101      	bne.n	801129c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	e028      	b.n	80112ee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	60fb      	str	r3, [r7, #12]
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1c5      	bne.n	8011234 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80112a8:	4b15      	ldr	r3, [pc, #84]	@ (8011300 <ip4_route+0xdc>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d01a      	beq.n	80112e6 <ip4_route+0xc2>
 80112b0:	4b13      	ldr	r3, [pc, #76]	@ (8011300 <ip4_route+0xdc>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112b8:	f003 0301 	and.w	r3, r3, #1
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d012      	beq.n	80112e6 <ip4_route+0xc2>
 80112c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011300 <ip4_route+0xdc>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80112c8:	f003 0304 	and.w	r3, r3, #4
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d00a      	beq.n	80112e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80112d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011300 <ip4_route+0xdc>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	3304      	adds	r3, #4
 80112d6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d004      	beq.n	80112e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	b2db      	uxtb	r3, r3
 80112e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80112e4:	d101      	bne.n	80112ea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80112e6:	2300      	movs	r3, #0
 80112e8:	e001      	b.n	80112ee <ip4_route+0xca>
  }

  return netif_default;
 80112ea:	4b05      	ldr	r3, [pc, #20]	@ (8011300 <ip4_route+0xdc>)
 80112ec:	681b      	ldr	r3, [r3, #0]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3714      	adds	r7, #20
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop
 80112fc:	20008a38 	.word	0x20008a38
 8011300:	20008a3c 	.word	0x20008a3c

08011304 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011312:	f003 0301 	and.w	r3, r3, #1
 8011316:	b2db      	uxtb	r3, r3
 8011318:	2b00      	cmp	r3, #0
 801131a:	d016      	beq.n	801134a <ip4_input_accept+0x46>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	3304      	adds	r3, #4
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d011      	beq.n	801134a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011326:	4b0b      	ldr	r3, [pc, #44]	@ (8011354 <ip4_input_accept+0x50>)
 8011328:	695a      	ldr	r2, [r3, #20]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	3304      	adds	r3, #4
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	d008      	beq.n	8011346 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011334:	4b07      	ldr	r3, [pc, #28]	@ (8011354 <ip4_input_accept+0x50>)
 8011336:	695b      	ldr	r3, [r3, #20]
 8011338:	6879      	ldr	r1, [r7, #4]
 801133a:	4618      	mov	r0, r3
 801133c:	f000 fa08 	bl	8011750 <ip4_addr_isbroadcast_u32>
 8011340:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011346:	2301      	movs	r3, #1
 8011348:	e000      	b.n	801134c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	200054d4 	.word	0x200054d4

08011358 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b086      	sub	sp, #24
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	091b      	lsrs	r3, r3, #4
 801136e:	b2db      	uxtb	r3, r3
 8011370:	2b04      	cmp	r3, #4
 8011372:	d004      	beq.n	801137e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f7f8 fc91 	bl	8009c9c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	e107      	b.n	801158e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	f003 030f 	and.w	r3, r3, #15
 8011386:	b2db      	uxtb	r3, r3
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	b2db      	uxtb	r3, r3
 801138c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	885b      	ldrh	r3, [r3, #2]
 8011392:	b29b      	uxth	r3, r3
 8011394:	4618      	mov	r0, r3
 8011396:	f7f7 f923 	bl	80085e0 <lwip_htons>
 801139a:	4603      	mov	r3, r0
 801139c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	891b      	ldrh	r3, [r3, #8]
 80113a2:	89ba      	ldrh	r2, [r7, #12]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d204      	bcs.n	80113b2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80113a8:	89bb      	ldrh	r3, [r7, #12]
 80113aa:	4619      	mov	r1, r3
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f7f8 faef 	bl	8009990 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	895b      	ldrh	r3, [r3, #10]
 80113b6:	89fa      	ldrh	r2, [r7, #14]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d807      	bhi.n	80113cc <ip4_input+0x74>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	891b      	ldrh	r3, [r3, #8]
 80113c0:	89ba      	ldrh	r2, [r7, #12]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d802      	bhi.n	80113cc <ip4_input+0x74>
 80113c6:	89fb      	ldrh	r3, [r7, #14]
 80113c8:	2b13      	cmp	r3, #19
 80113ca:	d804      	bhi.n	80113d6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f7f8 fc65 	bl	8009c9c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80113d2:	2300      	movs	r3, #0
 80113d4:	e0db      	b.n	801158e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	691b      	ldr	r3, [r3, #16]
 80113da:	4a6f      	ldr	r2, [pc, #444]	@ (8011598 <ip4_input+0x240>)
 80113dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	4a6d      	ldr	r2, [pc, #436]	@ (8011598 <ip4_input+0x240>)
 80113e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80113e6:	4b6c      	ldr	r3, [pc, #432]	@ (8011598 <ip4_input+0x240>)
 80113e8:	695b      	ldr	r3, [r3, #20]
 80113ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80113ee:	2be0      	cmp	r3, #224	@ 0xe0
 80113f0:	d112      	bne.n	8011418 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d007      	beq.n	8011412 <ip4_input+0xba>
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	3304      	adds	r3, #4
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d002      	beq.n	8011412 <ip4_input+0xba>
      netif = inp;
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	613b      	str	r3, [r7, #16]
 8011410:	e02a      	b.n	8011468 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011412:	2300      	movs	r3, #0
 8011414:	613b      	str	r3, [r7, #16]
 8011416:	e027      	b.n	8011468 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011418:	6838      	ldr	r0, [r7, #0]
 801141a:	f7ff ff73 	bl	8011304 <ip4_input_accept>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d002      	beq.n	801142a <ip4_input+0xd2>
      netif = inp;
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	613b      	str	r3, [r7, #16]
 8011428:	e01e      	b.n	8011468 <ip4_input+0x110>
    } else {
      netif = NULL;
 801142a:	2300      	movs	r3, #0
 801142c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801142e:	4b5a      	ldr	r3, [pc, #360]	@ (8011598 <ip4_input+0x240>)
 8011430:	695b      	ldr	r3, [r3, #20]
 8011432:	b2db      	uxtb	r3, r3
 8011434:	2b7f      	cmp	r3, #127	@ 0x7f
 8011436:	d017      	beq.n	8011468 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011438:	4b58      	ldr	r3, [pc, #352]	@ (801159c <ip4_input+0x244>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	613b      	str	r3, [r7, #16]
 801143e:	e00e      	b.n	801145e <ip4_input+0x106>
          if (netif == inp) {
 8011440:	693a      	ldr	r2, [r7, #16]
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	429a      	cmp	r2, r3
 8011446:	d006      	beq.n	8011456 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011448:	6938      	ldr	r0, [r7, #16]
 801144a:	f7ff ff5b 	bl	8011304 <ip4_input_accept>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d108      	bne.n	8011466 <ip4_input+0x10e>
 8011454:	e000      	b.n	8011458 <ip4_input+0x100>
            continue;
 8011456:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	613b      	str	r3, [r7, #16]
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d1ed      	bne.n	8011440 <ip4_input+0xe8>
 8011464:	e000      	b.n	8011468 <ip4_input+0x110>
            break;
 8011466:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011468:	4b4b      	ldr	r3, [pc, #300]	@ (8011598 <ip4_input+0x240>)
 801146a:	691b      	ldr	r3, [r3, #16]
 801146c:	6839      	ldr	r1, [r7, #0]
 801146e:	4618      	mov	r0, r3
 8011470:	f000 f96e 	bl	8011750 <ip4_addr_isbroadcast_u32>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d105      	bne.n	8011486 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801147a:	4b47      	ldr	r3, [pc, #284]	@ (8011598 <ip4_input+0x240>)
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011482:	2be0      	cmp	r3, #224	@ 0xe0
 8011484:	d104      	bne.n	8011490 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f7f8 fc08 	bl	8009c9c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801148c:	2300      	movs	r3, #0
 801148e:	e07e      	b.n	801158e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d104      	bne.n	80114a0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f7f8 fc00 	bl	8009c9c <pbuf_free>
    return ERR_OK;
 801149c:	2300      	movs	r3, #0
 801149e:	e076      	b.n	801158e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	88db      	ldrh	r3, [r3, #6]
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	461a      	mov	r2, r3
 80114a8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80114ac:	4013      	ands	r3, r2
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d00b      	beq.n	80114ca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 fc92 	bl	8011ddc <ip4_reass>
 80114b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d101      	bne.n	80114c4 <ip4_input+0x16c>
      return ERR_OK;
 80114c0:	2300      	movs	r3, #0
 80114c2:	e064      	b.n	801158e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80114ca:	4a33      	ldr	r2, [pc, #204]	@ (8011598 <ip4_input+0x240>)
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80114d0:	4a31      	ldr	r2, [pc, #196]	@ (8011598 <ip4_input+0x240>)
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80114d6:	4a30      	ldr	r2, [pc, #192]	@ (8011598 <ip4_input+0x240>)
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	f003 030f 	and.w	r3, r3, #15
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	461a      	mov	r2, r3
 80114ec:	4b2a      	ldr	r3, [pc, #168]	@ (8011598 <ip4_input+0x240>)
 80114ee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80114f0:	89fb      	ldrh	r3, [r7, #14]
 80114f2:	4619      	mov	r1, r3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7f8 fb4b 	bl	8009b90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	7a5b      	ldrb	r3, [r3, #9]
 80114fe:	2b11      	cmp	r3, #17
 8011500:	d006      	beq.n	8011510 <ip4_input+0x1b8>
 8011502:	2b11      	cmp	r3, #17
 8011504:	dc13      	bgt.n	801152e <ip4_input+0x1d6>
 8011506:	2b01      	cmp	r3, #1
 8011508:	d00c      	beq.n	8011524 <ip4_input+0x1cc>
 801150a:	2b06      	cmp	r3, #6
 801150c:	d005      	beq.n	801151a <ip4_input+0x1c2>
 801150e:	e00e      	b.n	801152e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011510:	6839      	ldr	r1, [r7, #0]
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f7fe f9b0 	bl	800f878 <udp_input>
        break;
 8011518:	e026      	b.n	8011568 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801151a:	6839      	ldr	r1, [r7, #0]
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7fa f9f7 	bl	800b910 <tcp_input>
        break;
 8011522:	e021      	b.n	8011568 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011524:	6839      	ldr	r1, [r7, #0]
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7ff fcee 	bl	8010f08 <icmp_input>
        break;
 801152c:	e01c      	b.n	8011568 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801152e:	4b1a      	ldr	r3, [pc, #104]	@ (8011598 <ip4_input+0x240>)
 8011530:	695b      	ldr	r3, [r3, #20]
 8011532:	6939      	ldr	r1, [r7, #16]
 8011534:	4618      	mov	r0, r3
 8011536:	f000 f90b 	bl	8011750 <ip4_addr_isbroadcast_u32>
 801153a:	4603      	mov	r3, r0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d10f      	bne.n	8011560 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011540:	4b15      	ldr	r3, [pc, #84]	@ (8011598 <ip4_input+0x240>)
 8011542:	695b      	ldr	r3, [r3, #20]
 8011544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011548:	2be0      	cmp	r3, #224	@ 0xe0
 801154a:	d009      	beq.n	8011560 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801154c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011550:	4619      	mov	r1, r3
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f7f8 fb8f 	bl	8009c76 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011558:	2102      	movs	r1, #2
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff fdd8 	bl	8011110 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f7f8 fb9b 	bl	8009c9c <pbuf_free>
        break;
 8011566:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011568:	4b0b      	ldr	r3, [pc, #44]	@ (8011598 <ip4_input+0x240>)
 801156a:	2200      	movs	r2, #0
 801156c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801156e:	4b0a      	ldr	r3, [pc, #40]	@ (8011598 <ip4_input+0x240>)
 8011570:	2200      	movs	r2, #0
 8011572:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011574:	4b08      	ldr	r3, [pc, #32]	@ (8011598 <ip4_input+0x240>)
 8011576:	2200      	movs	r2, #0
 8011578:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801157a:	4b07      	ldr	r3, [pc, #28]	@ (8011598 <ip4_input+0x240>)
 801157c:	2200      	movs	r2, #0
 801157e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011580:	4b05      	ldr	r3, [pc, #20]	@ (8011598 <ip4_input+0x240>)
 8011582:	2200      	movs	r2, #0
 8011584:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011586:	4b04      	ldr	r3, [pc, #16]	@ (8011598 <ip4_input+0x240>)
 8011588:	2200      	movs	r2, #0
 801158a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801158c:	2300      	movs	r3, #0
}
 801158e:	4618      	mov	r0, r3
 8011590:	3718      	adds	r7, #24
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	200054d4 	.word	0x200054d4
 801159c:	20008a38 	.word	0x20008a38

080115a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b08a      	sub	sp, #40	@ 0x28
 80115a4:	af04      	add	r7, sp, #16
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
 80115ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d009      	beq.n	80115cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d003      	beq.n	80115c6 <ip4_output_if+0x26>
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d102      	bne.n	80115cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80115c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115c8:	3304      	adds	r3, #4
 80115ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80115cc:	78fa      	ldrb	r2, [r7, #3]
 80115ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115d0:	9302      	str	r3, [sp, #8]
 80115d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	4613      	mov	r3, r2
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	6979      	ldr	r1, [r7, #20]
 80115e4:	68f8      	ldr	r0, [r7, #12]
 80115e6:	f000 f805 	bl	80115f4 <ip4_output_if_src>
 80115ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3718      	adds	r7, #24
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b088      	sub	sp, #32
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]
 8011600:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	7b9b      	ldrb	r3, [r3, #14]
 8011606:	2b01      	cmp	r3, #1
 8011608:	d006      	beq.n	8011618 <ip4_output_if_src+0x24>
 801160a:	4b4b      	ldr	r3, [pc, #300]	@ (8011738 <ip4_output_if_src+0x144>)
 801160c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8011610:	494a      	ldr	r1, [pc, #296]	@ (801173c <ip4_output_if_src+0x148>)
 8011612:	484b      	ldr	r0, [pc, #300]	@ (8011740 <ip4_output_if_src+0x14c>)
 8011614:	f001 fcba 	bl	8012f8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d060      	beq.n	80116e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801161e:	2314      	movs	r3, #20
 8011620:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011622:	2114      	movs	r1, #20
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f7f8 faa3 	bl	8009b70 <pbuf_add_header>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011630:	f06f 0301 	mvn.w	r3, #1
 8011634:	e07c      	b.n	8011730 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	895b      	ldrh	r3, [r3, #10]
 8011640:	2b13      	cmp	r3, #19
 8011642:	d806      	bhi.n	8011652 <ip4_output_if_src+0x5e>
 8011644:	4b3c      	ldr	r3, [pc, #240]	@ (8011738 <ip4_output_if_src+0x144>)
 8011646:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801164a:	493e      	ldr	r1, [pc, #248]	@ (8011744 <ip4_output_if_src+0x150>)
 801164c:	483c      	ldr	r0, [pc, #240]	@ (8011740 <ip4_output_if_src+0x14c>)
 801164e:	f001 fc9d 	bl	8012f8c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	78fa      	ldrb	r2, [r7, #3]
 8011656:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801165e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011668:	8b7b      	ldrh	r3, [r7, #26]
 801166a:	089b      	lsrs	r3, r3, #2
 801166c:	b29b      	uxth	r3, r3
 801166e:	b2db      	uxtb	r3, r3
 8011670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011674:	b2da      	uxtb	r2, r3
 8011676:	69fb      	ldr	r3, [r7, #28]
 8011678:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011680:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	891b      	ldrh	r3, [r3, #8]
 8011686:	4618      	mov	r0, r3
 8011688:	f7f6 ffaa 	bl	80085e0 <lwip_htons>
 801168c:	4603      	mov	r3, r0
 801168e:	461a      	mov	r2, r3
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	2200      	movs	r2, #0
 8011698:	719a      	strb	r2, [r3, #6]
 801169a:	2200      	movs	r2, #0
 801169c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801169e:	4b2a      	ldr	r3, [pc, #168]	@ (8011748 <ip4_output_if_src+0x154>)
 80116a0:	881b      	ldrh	r3, [r3, #0]
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7f6 ff9c 	bl	80085e0 <lwip_htons>
 80116a8:	4603      	mov	r3, r0
 80116aa:	461a      	mov	r2, r3
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80116b0:	4b25      	ldr	r3, [pc, #148]	@ (8011748 <ip4_output_if_src+0x154>)
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	3301      	adds	r3, #1
 80116b6:	b29a      	uxth	r2, r3
 80116b8:	4b23      	ldr	r3, [pc, #140]	@ (8011748 <ip4_output_if_src+0x154>)
 80116ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d104      	bne.n	80116cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80116c2:	4b22      	ldr	r3, [pc, #136]	@ (801174c <ip4_output_if_src+0x158>)
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	60da      	str	r2, [r3, #12]
 80116ca:	e003      	b.n	80116d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	2200      	movs	r2, #0
 80116d8:	729a      	strb	r2, [r3, #10]
 80116da:	2200      	movs	r2, #0
 80116dc:	72da      	strb	r2, [r3, #11]
 80116de:	e00f      	b.n	8011700 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	895b      	ldrh	r3, [r3, #10]
 80116e4:	2b13      	cmp	r3, #19
 80116e6:	d802      	bhi.n	80116ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80116e8:	f06f 0301 	mvn.w	r3, #1
 80116ec:	e020      	b.n	8011730 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	691b      	ldr	r3, [r3, #16]
 80116f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80116fa:	f107 0314 	add.w	r3, r7, #20
 80116fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011702:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00c      	beq.n	8011722 <ip4_output_if_src+0x12e>
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	891a      	ldrh	r2, [r3, #8]
 801170c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801170e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011710:	429a      	cmp	r2, r3
 8011712:	d906      	bls.n	8011722 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011718:	68f8      	ldr	r0, [r7, #12]
 801171a:	f000 fd53 	bl	80121c4 <ip4_frag>
 801171e:	4603      	mov	r3, r0
 8011720:	e006      	b.n	8011730 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011724:	695b      	ldr	r3, [r3, #20]
 8011726:	687a      	ldr	r2, [r7, #4]
 8011728:	68f9      	ldr	r1, [r7, #12]
 801172a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801172c:	4798      	blx	r3
 801172e:	4603      	mov	r3, r0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3720      	adds	r7, #32
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	08016524 	.word	0x08016524
 801173c:	08016558 	.word	0x08016558
 8011740:	08016564 	.word	0x08016564
 8011744:	0801658c 	.word	0x0801658c
 8011748:	20008b96 	.word	0x20008b96
 801174c:	08016d20 	.word	0x08016d20

08011750 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011750:	b480      	push	{r7}
 8011752:	b085      	sub	sp, #20
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011764:	d002      	beq.n	801176c <ip4_addr_isbroadcast_u32+0x1c>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801176c:	2301      	movs	r3, #1
 801176e:	e02a      	b.n	80117c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011776:	f003 0302 	and.w	r3, r3, #2
 801177a:	2b00      	cmp	r3, #0
 801177c:	d101      	bne.n	8011782 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801177e:	2300      	movs	r3, #0
 8011780:	e021      	b.n	80117c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	3304      	adds	r3, #4
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	429a      	cmp	r2, r3
 801178c:	d101      	bne.n	8011792 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801178e:	2300      	movs	r3, #0
 8011790:	e019      	b.n	80117c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	3304      	adds	r3, #4
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	405a      	eors	r2, r3
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	3308      	adds	r3, #8
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	4013      	ands	r3, r2
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d10d      	bne.n	80117c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	3308      	adds	r3, #8
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	43da      	mvns	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	3308      	adds	r3, #8
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80117bc:	429a      	cmp	r2, r3
 80117be:	d101      	bne.n	80117c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80117c0:	2301      	movs	r3, #1
 80117c2:	e000      	b.n	80117c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80117c4:	2300      	movs	r3, #0
  }
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3714      	adds	r7, #20
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr
	...

080117d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80117da:	2300      	movs	r3, #0
 80117dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80117de:	4b12      	ldr	r3, [pc, #72]	@ (8011828 <ip_reass_tmr+0x54>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80117e4:	e018      	b.n	8011818 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	7fdb      	ldrb	r3, [r3, #31]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00b      	beq.n	8011806 <ip_reass_tmr+0x32>
      r->timer--;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	7fdb      	ldrb	r3, [r3, #31]
 80117f2:	3b01      	subs	r3, #1
 80117f4:	b2da      	uxtb	r2, r3
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	60fb      	str	r3, [r7, #12]
 8011804:	e008      	b.n	8011818 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011810:	68b9      	ldr	r1, [r7, #8]
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f000 f80a 	bl	801182c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d1e3      	bne.n	80117e6 <ip_reass_tmr+0x12>
    }
  }
}
 801181e:	bf00      	nop
 8011820:	bf00      	nop
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}
 8011828:	20008b98 	.word	0x20008b98

0801182c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b088      	sub	sp, #32
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011836:	2300      	movs	r3, #0
 8011838:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801183a:	683a      	ldr	r2, [r7, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	429a      	cmp	r2, r3
 8011840:	d105      	bne.n	801184e <ip_reass_free_complete_datagram+0x22>
 8011842:	4b45      	ldr	r3, [pc, #276]	@ (8011958 <ip_reass_free_complete_datagram+0x12c>)
 8011844:	22ab      	movs	r2, #171	@ 0xab
 8011846:	4945      	ldr	r1, [pc, #276]	@ (801195c <ip_reass_free_complete_datagram+0x130>)
 8011848:	4845      	ldr	r0, [pc, #276]	@ (8011960 <ip_reass_free_complete_datagram+0x134>)
 801184a:	f001 fb9f 	bl	8012f8c <iprintf>
  if (prev != NULL) {
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00a      	beq.n	801186a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	429a      	cmp	r2, r3
 801185c:	d005      	beq.n	801186a <ip_reass_free_complete_datagram+0x3e>
 801185e:	4b3e      	ldr	r3, [pc, #248]	@ (8011958 <ip_reass_free_complete_datagram+0x12c>)
 8011860:	22ad      	movs	r2, #173	@ 0xad
 8011862:	4940      	ldr	r1, [pc, #256]	@ (8011964 <ip_reass_free_complete_datagram+0x138>)
 8011864:	483e      	ldr	r0, [pc, #248]	@ (8011960 <ip_reass_free_complete_datagram+0x134>)
 8011866:	f001 fb91 	bl	8012f8c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	889b      	ldrh	r3, [r3, #4]
 8011876:	b29b      	uxth	r3, r3
 8011878:	2b00      	cmp	r3, #0
 801187a:	d12a      	bne.n	80118d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	6858      	ldr	r0, [r3, #4]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	3308      	adds	r3, #8
 8011892:	2214      	movs	r2, #20
 8011894:	4619      	mov	r1, r3
 8011896:	f001 fd58 	bl	801334a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801189a:	2101      	movs	r1, #1
 801189c:	69b8      	ldr	r0, [r7, #24]
 801189e:	f7ff fc47 	bl	8011130 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80118a2:	69b8      	ldr	r0, [r7, #24]
 80118a4:	f7f8 fa82 	bl	8009dac <pbuf_clen>
 80118a8:	4603      	mov	r3, r0
 80118aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80118ac:	8bfa      	ldrh	r2, [r7, #30]
 80118ae:	8a7b      	ldrh	r3, [r7, #18]
 80118b0:	4413      	add	r3, r2
 80118b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118b6:	db05      	blt.n	80118c4 <ip_reass_free_complete_datagram+0x98>
 80118b8:	4b27      	ldr	r3, [pc, #156]	@ (8011958 <ip_reass_free_complete_datagram+0x12c>)
 80118ba:	22bc      	movs	r2, #188	@ 0xbc
 80118bc:	492a      	ldr	r1, [pc, #168]	@ (8011968 <ip_reass_free_complete_datagram+0x13c>)
 80118be:	4828      	ldr	r0, [pc, #160]	@ (8011960 <ip_reass_free_complete_datagram+0x134>)
 80118c0:	f001 fb64 	bl	8012f8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80118c4:	8bfa      	ldrh	r2, [r7, #30]
 80118c6:	8a7b      	ldrh	r3, [r7, #18]
 80118c8:	4413      	add	r3, r2
 80118ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80118cc:	69b8      	ldr	r0, [r7, #24]
 80118ce:	f7f8 f9e5 	bl	8009c9c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80118d8:	e01f      	b.n	801191a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f7f8 fa5e 	bl	8009dac <pbuf_clen>
 80118f0:	4603      	mov	r3, r0
 80118f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80118f4:	8bfa      	ldrh	r2, [r7, #30]
 80118f6:	8a7b      	ldrh	r3, [r7, #18]
 80118f8:	4413      	add	r3, r2
 80118fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118fe:	db05      	blt.n	801190c <ip_reass_free_complete_datagram+0xe0>
 8011900:	4b15      	ldr	r3, [pc, #84]	@ (8011958 <ip_reass_free_complete_datagram+0x12c>)
 8011902:	22cc      	movs	r2, #204	@ 0xcc
 8011904:	4918      	ldr	r1, [pc, #96]	@ (8011968 <ip_reass_free_complete_datagram+0x13c>)
 8011906:	4816      	ldr	r0, [pc, #88]	@ (8011960 <ip_reass_free_complete_datagram+0x134>)
 8011908:	f001 fb40 	bl	8012f8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801190c:	8bfa      	ldrh	r2, [r7, #30]
 801190e:	8a7b      	ldrh	r3, [r7, #18]
 8011910:	4413      	add	r3, r2
 8011912:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	f7f8 f9c1 	bl	8009c9c <pbuf_free>
  while (p != NULL) {
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1dc      	bne.n	80118da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011920:	6839      	ldr	r1, [r7, #0]
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 f8c2 	bl	8011aac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011928:	4b10      	ldr	r3, [pc, #64]	@ (801196c <ip_reass_free_complete_datagram+0x140>)
 801192a:	881b      	ldrh	r3, [r3, #0]
 801192c:	8bfa      	ldrh	r2, [r7, #30]
 801192e:	429a      	cmp	r2, r3
 8011930:	d905      	bls.n	801193e <ip_reass_free_complete_datagram+0x112>
 8011932:	4b09      	ldr	r3, [pc, #36]	@ (8011958 <ip_reass_free_complete_datagram+0x12c>)
 8011934:	22d2      	movs	r2, #210	@ 0xd2
 8011936:	490e      	ldr	r1, [pc, #56]	@ (8011970 <ip_reass_free_complete_datagram+0x144>)
 8011938:	4809      	ldr	r0, [pc, #36]	@ (8011960 <ip_reass_free_complete_datagram+0x134>)
 801193a:	f001 fb27 	bl	8012f8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801193e:	4b0b      	ldr	r3, [pc, #44]	@ (801196c <ip_reass_free_complete_datagram+0x140>)
 8011940:	881a      	ldrh	r2, [r3, #0]
 8011942:	8bfb      	ldrh	r3, [r7, #30]
 8011944:	1ad3      	subs	r3, r2, r3
 8011946:	b29a      	uxth	r2, r3
 8011948:	4b08      	ldr	r3, [pc, #32]	@ (801196c <ip_reass_free_complete_datagram+0x140>)
 801194a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801194c:	8bfb      	ldrh	r3, [r7, #30]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3720      	adds	r7, #32
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	080165bc 	.word	0x080165bc
 801195c:	080165f8 	.word	0x080165f8
 8011960:	08016604 	.word	0x08016604
 8011964:	0801662c 	.word	0x0801662c
 8011968:	08016640 	.word	0x08016640
 801196c:	20008b9c 	.word	0x20008b9c
 8011970:	08016660 	.word	0x08016660

08011974 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b08a      	sub	sp, #40	@ 0x28
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801197e:	2300      	movs	r3, #0
 8011980:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011982:	2300      	movs	r3, #0
 8011984:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011986:	2300      	movs	r3, #0
 8011988:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801198a:	2300      	movs	r3, #0
 801198c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801198e:	2300      	movs	r3, #0
 8011990:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011992:	4b28      	ldr	r3, [pc, #160]	@ (8011a34 <ip_reass_remove_oldest_datagram+0xc0>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011998:	e030      	b.n	80119fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801199c:	695a      	ldr	r2, [r3, #20]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d10c      	bne.n	80119c0 <ip_reass_remove_oldest_datagram+0x4c>
 80119a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a8:	699a      	ldr	r2, [r3, #24]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d106      	bne.n	80119c0 <ip_reass_remove_oldest_datagram+0x4c>
 80119b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b4:	899a      	ldrh	r2, [r3, #12]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	889b      	ldrh	r3, [r3, #4]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	429a      	cmp	r2, r3
 80119be:	d014      	beq.n	80119ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	3301      	adds	r3, #1
 80119c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d104      	bne.n	80119d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80119cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	61bb      	str	r3, [r7, #24]
 80119d4:	e009      	b.n	80119ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80119d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d8:	7fda      	ldrb	r2, [r3, #31]
 80119da:	6a3b      	ldr	r3, [r7, #32]
 80119dc:	7fdb      	ldrb	r3, [r3, #31]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d803      	bhi.n	80119ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80119e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80119e6:	69fb      	ldr	r3, [r7, #28]
 80119e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80119ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d001      	beq.n	80119f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80119f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80119f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80119fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1cb      	bne.n	801199a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011a02:	6a3b      	ldr	r3, [r7, #32]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d008      	beq.n	8011a1a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011a08:	69b9      	ldr	r1, [r7, #24]
 8011a0a:	6a38      	ldr	r0, [r7, #32]
 8011a0c:	f7ff ff0e 	bl	801182c <ip_reass_free_complete_datagram>
 8011a10:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011a12:	697a      	ldr	r2, [r7, #20]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	4413      	add	r3, r2
 8011a18:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	da02      	bge.n	8011a28 <ip_reass_remove_oldest_datagram+0xb4>
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	dcac      	bgt.n	8011982 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011a28:	697b      	ldr	r3, [r7, #20]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3728      	adds	r7, #40	@ 0x28
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	20008b98 	.word	0x20008b98

08011a38 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a42:	2004      	movs	r0, #4
 8011a44:	f7f7 fa44 	bl	8008ed0 <memp_malloc>
 8011a48:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d110      	bne.n	8011a72 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011a50:	6839      	ldr	r1, [r7, #0]
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7ff ff8e 	bl	8011974 <ip_reass_remove_oldest_datagram>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	dc03      	bgt.n	8011a68 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a60:	2004      	movs	r0, #4
 8011a62:	f7f7 fa35 	bl	8008ed0 <memp_malloc>
 8011a66:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d101      	bne.n	8011a72 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e016      	b.n	8011aa0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011a72:	2220      	movs	r2, #32
 8011a74:	2100      	movs	r1, #0
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f001 fbe0 	bl	801323c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	220f      	movs	r2, #15
 8011a80:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011a82:	4b09      	ldr	r3, [pc, #36]	@ (8011aa8 <ip_reass_enqueue_new_datagram+0x70>)
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011a8a:	4a07      	ldr	r2, [pc, #28]	@ (8011aa8 <ip_reass_enqueue_new_datagram+0x70>)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	3308      	adds	r3, #8
 8011a94:	2214      	movs	r2, #20
 8011a96:	6879      	ldr	r1, [r7, #4]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f001 fc56 	bl	801334a <memcpy>
  return ipr;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3710      	adds	r7, #16
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}
 8011aa8:	20008b98 	.word	0x20008b98

08011aac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b082      	sub	sp, #8
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011ab6:	4b10      	ldr	r3, [pc, #64]	@ (8011af8 <ip_reass_dequeue_datagram+0x4c>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d104      	bne.n	8011aca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8011af8 <ip_reass_dequeue_datagram+0x4c>)
 8011ac6:	6013      	str	r3, [r2, #0]
 8011ac8:	e00d      	b.n	8011ae6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d106      	bne.n	8011ade <ip_reass_dequeue_datagram+0x32>
 8011ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8011afc <ip_reass_dequeue_datagram+0x50>)
 8011ad2:	f240 1245 	movw	r2, #325	@ 0x145
 8011ad6:	490a      	ldr	r1, [pc, #40]	@ (8011b00 <ip_reass_dequeue_datagram+0x54>)
 8011ad8:	480a      	ldr	r0, [pc, #40]	@ (8011b04 <ip_reass_dequeue_datagram+0x58>)
 8011ada:	f001 fa57 	bl	8012f8c <iprintf>
    prev->next = ipr->next;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011ae6:	6879      	ldr	r1, [r7, #4]
 8011ae8:	2004      	movs	r0, #4
 8011aea:	f7f7 fa61 	bl	8008fb0 <memp_free>
}
 8011aee:	bf00      	nop
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	20008b98 	.word	0x20008b98
 8011afc:	080165bc 	.word	0x080165bc
 8011b00:	08016684 	.word	0x08016684
 8011b04:	08016604 	.word	0x08016604

08011b08 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b08c      	sub	sp, #48	@ 0x30
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	60f8      	str	r0, [r7, #12]
 8011b10:	60b9      	str	r1, [r7, #8]
 8011b12:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011b14:	2300      	movs	r3, #0
 8011b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011b18:	2301      	movs	r3, #1
 8011b1a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	885b      	ldrh	r3, [r3, #2]
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7f6 fd59 	bl	80085e0 <lwip_htons>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	f003 030f 	and.w	r3, r3, #15
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011b40:	7e7b      	ldrb	r3, [r7, #25]
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	8b7a      	ldrh	r2, [r7, #26]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d202      	bcs.n	8011b50 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4e:	e135      	b.n	8011dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011b50:	7e7b      	ldrb	r3, [r7, #25]
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	8b7a      	ldrh	r2, [r7, #26]
 8011b56:	1ad3      	subs	r3, r2, r3
 8011b58:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	88db      	ldrh	r3, [r3, #6]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f6 fd3d 	bl	80085e0 <lwip_htons>
 8011b66:	4603      	mov	r3, r0
 8011b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	00db      	lsls	r3, r3, #3
 8011b70:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8011b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	701a      	strb	r2, [r3, #0]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	705a      	strb	r2, [r3, #1]
 8011b82:	2200      	movs	r2, #0
 8011b84:	709a      	strb	r2, [r3, #2]
 8011b86:	2200      	movs	r2, #0
 8011b88:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8c:	8afa      	ldrh	r2, [r7, #22]
 8011b8e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011b90:	8afa      	ldrh	r2, [r7, #22]
 8011b92:	8b7b      	ldrh	r3, [r7, #26]
 8011b94:	4413      	add	r3, r2
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b9a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b9e:	88db      	ldrh	r3, [r3, #6]
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	8afa      	ldrh	r2, [r7, #22]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d902      	bls.n	8011bae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bac:	e106      	b.n	8011dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bb4:	e068      	b.n	8011c88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bbe:	889b      	ldrh	r3, [r3, #4]
 8011bc0:	b29a      	uxth	r2, r3
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	889b      	ldrh	r3, [r3, #4]
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d235      	bcs.n	8011c38 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bd0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d020      	beq.n	8011c1a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bda:	889b      	ldrh	r3, [r3, #4]
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be0:	88db      	ldrh	r3, [r3, #6]
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d307      	bcc.n	8011bf8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bea:	88db      	ldrh	r3, [r3, #6]
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	889b      	ldrh	r3, [r3, #4]
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d902      	bls.n	8011bfe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bfc:	e0de      	b.n	8011dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c06:	88db      	ldrh	r3, [r3, #6]
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0c:	889b      	ldrh	r3, [r3, #4]
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d03d      	beq.n	8011c90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011c18:	e03a      	b.n	8011c90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c1c:	88db      	ldrh	r3, [r3, #6]
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	889b      	ldrh	r3, [r3, #4]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d902      	bls.n	8011c30 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c2e:	e0c5      	b.n	8011dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	605a      	str	r2, [r3, #4]
      break;
 8011c36:	e02b      	b.n	8011c90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c3a:	889b      	ldrh	r3, [r3, #4]
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	889b      	ldrh	r3, [r3, #4]
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d102      	bne.n	8011c4e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c48:	f04f 33ff 	mov.w	r3, #4294967295
 8011c4c:	e0b6      	b.n	8011dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c50:	889b      	ldrh	r3, [r3, #4]
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	88db      	ldrh	r3, [r3, #6]
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d202      	bcs.n	8011c64 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c62:	e0ab      	b.n	8011dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d009      	beq.n	8011c7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c6c:	88db      	ldrh	r3, [r3, #6]
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	889b      	ldrh	r3, [r3, #4]
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d001      	beq.n	8011c7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8011c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d193      	bne.n	8011bb6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011c8e:	e000      	b.n	8011c92 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011c90:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d12d      	bne.n	8011cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d01c      	beq.n	8011cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca0:	88db      	ldrh	r3, [r3, #6]
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca6:	889b      	ldrh	r3, [r3, #4]
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d906      	bls.n	8011cbc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011cae:	4b45      	ldr	r3, [pc, #276]	@ (8011dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011cb0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011cb4:	4944      	ldr	r1, [pc, #272]	@ (8011dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011cb6:	4845      	ldr	r0, [pc, #276]	@ (8011dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011cb8:	f001 f968 	bl	8012f8c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc4:	88db      	ldrh	r3, [r3, #6]
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cca:	889b      	ldrh	r3, [r3, #4]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d010      	beq.n	8011cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	623b      	str	r3, [r7, #32]
 8011cd6:	e00d      	b.n	8011cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d006      	beq.n	8011cee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011ce0:	4b38      	ldr	r3, [pc, #224]	@ (8011dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011ce2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8011ce6:	493a      	ldr	r1, [pc, #232]	@ (8011dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011ce8:	4838      	ldr	r0, [pc, #224]	@ (8011dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011cea:	f001 f94f 	bl	8012f8c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d105      	bne.n	8011d06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	7f9b      	ldrb	r3, [r3, #30]
 8011cfe:	f003 0301 	and.w	r3, r3, #1
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d059      	beq.n	8011dba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d04f      	beq.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d006      	beq.n	8011d22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	889b      	ldrh	r3, [r3, #4]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d002      	beq.n	8011d28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	623b      	str	r3, [r7, #32]
 8011d26:	e041      	b.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011d32:	e012      	b.n	8011d5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d3c:	88db      	ldrh	r3, [r3, #6]
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d42:	889b      	ldrh	r3, [r3, #4]
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d002      	beq.n	8011d50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	623b      	str	r3, [r7, #32]
            break;
 8011d4e:	e007      	b.n	8011d60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d52:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1e9      	bne.n	8011d34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011d60:	6a3b      	ldr	r3, [r7, #32]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d022      	beq.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d106      	bne.n	8011d7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011d6e:	4b15      	ldr	r3, [pc, #84]	@ (8011dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d70:	f240 12df 	movw	r2, #479	@ 0x1df
 8011d74:	4917      	ldr	r1, [pc, #92]	@ (8011dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d76:	4815      	ldr	r0, [pc, #84]	@ (8011dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d78:	f001 f908 	bl	8012f8c <iprintf>
          LWIP_ASSERT("sanity check",
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d106      	bne.n	8011d96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011d88:	4b0e      	ldr	r3, [pc, #56]	@ (8011dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d8a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011d8e:	4911      	ldr	r1, [pc, #68]	@ (8011dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d90:	480e      	ldr	r0, [pc, #56]	@ (8011dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d92:	f001 f8fb 	bl	8012f8c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d006      	beq.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011d9e:	4b09      	ldr	r3, [pc, #36]	@ (8011dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011da0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011da4:	490c      	ldr	r1, [pc, #48]	@ (8011dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011da6:	4809      	ldr	r0, [pc, #36]	@ (8011dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011da8:	f001 f8f0 	bl	8012f8c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	bf14      	ite	ne
 8011db2:	2301      	movne	r3, #1
 8011db4:	2300      	moveq	r3, #0
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	e000      	b.n	8011dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011dba:	2300      	movs	r3, #0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3730      	adds	r7, #48	@ 0x30
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	080165bc 	.word	0x080165bc
 8011dc8:	080166a0 	.word	0x080166a0
 8011dcc:	08016604 	.word	0x08016604
 8011dd0:	080166c0 	.word	0x080166c0
 8011dd4:	080166f8 	.word	0x080166f8
 8011dd8:	08016708 	.word	0x08016708

08011ddc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b08e      	sub	sp, #56	@ 0x38
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	f003 030f 	and.w	r3, r3, #15
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b14      	cmp	r3, #20
 8011dfa:	f040 8171 	bne.w	80120e0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e00:	88db      	ldrh	r3, [r3, #6]
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7f6 fbeb 	bl	80085e0 <lwip_htons>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	00db      	lsls	r3, r3, #3
 8011e14:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e18:	885b      	ldrh	r3, [r3, #2]
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7f6 fbdf 	bl	80085e0 <lwip_htons>
 8011e22:	4603      	mov	r3, r0
 8011e24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	f003 030f 	and.w	r3, r3, #15
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011e36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	f0c0 8150 	bcc.w	80120e4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011e44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7f7 ffab 	bl	8009dac <pbuf_clen>
 8011e56:	4603      	mov	r3, r0
 8011e58:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011e5a:	4b8c      	ldr	r3, [pc, #560]	@ (801208c <ip4_reass+0x2b0>)
 8011e5c:	881b      	ldrh	r3, [r3, #0]
 8011e5e:	461a      	mov	r2, r3
 8011e60:	8c3b      	ldrh	r3, [r7, #32]
 8011e62:	4413      	add	r3, r2
 8011e64:	2b0a      	cmp	r3, #10
 8011e66:	dd10      	ble.n	8011e8a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e68:	8c3b      	ldrh	r3, [r7, #32]
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e6e:	f7ff fd81 	bl	8011974 <ip_reass_remove_oldest_datagram>
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f000 8137 	beq.w	80120e8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011e7a:	4b84      	ldr	r3, [pc, #528]	@ (801208c <ip4_reass+0x2b0>)
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	8c3b      	ldrh	r3, [r7, #32]
 8011e82:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e84:	2b0a      	cmp	r3, #10
 8011e86:	f300 812f 	bgt.w	80120e8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011e8a:	4b81      	ldr	r3, [pc, #516]	@ (8012090 <ip4_reass+0x2b4>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e90:	e015      	b.n	8011ebe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e94:	695a      	ldr	r2, [r3, #20]
 8011e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e98:	68db      	ldr	r3, [r3, #12]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d10c      	bne.n	8011eb8 <ip4_reass+0xdc>
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ea0:	699a      	ldr	r2, [r3, #24]
 8011ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea4:	691b      	ldr	r3, [r3, #16]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d106      	bne.n	8011eb8 <ip4_reass+0xdc>
 8011eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eac:	899a      	ldrh	r2, [r3, #12]
 8011eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb0:	889b      	ldrh	r3, [r3, #4]
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d006      	beq.n	8011ec6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d1e6      	bne.n	8011e92 <ip4_reass+0xb6>
 8011ec4:	e000      	b.n	8011ec8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011ec6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d109      	bne.n	8011ee2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011ece:	8c3b      	ldrh	r3, [r7, #32]
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ed4:	f7ff fdb0 	bl	8011a38 <ip_reass_enqueue_new_datagram>
 8011ed8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d11c      	bne.n	8011f1a <ip4_reass+0x13e>
      goto nullreturn;
 8011ee0:	e105      	b.n	80120ee <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee4:	88db      	ldrh	r3, [r3, #6]
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7f6 fb79 	bl	80085e0 <lwip_htons>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d110      	bne.n	8011f1a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011efa:	89db      	ldrh	r3, [r3, #14]
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7f6 fb6f 	bl	80085e0 <lwip_htons>
 8011f02:	4603      	mov	r3, r0
 8011f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d006      	beq.n	8011f1a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f0e:	3308      	adds	r3, #8
 8011f10:	2214      	movs	r2, #20
 8011f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f14:	4618      	mov	r0, r3
 8011f16:	f001 fa18 	bl	801334a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f1c:	88db      	ldrh	r3, [r3, #6]
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	f003 0320 	and.w	r3, r3, #32
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	bf0c      	ite	eq
 8011f28:	2301      	moveq	r3, #1
 8011f2a:	2300      	movne	r3, #0
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00e      	beq.n	8011f54 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011f36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f3a:	4413      	add	r3, r2
 8011f3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011f3e:	8b7a      	ldrh	r2, [r7, #26]
 8011f40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011f42:	429a      	cmp	r2, r3
 8011f44:	f0c0 80a0 	bcc.w	8012088 <ip4_reass+0x2ac>
 8011f48:	8b7b      	ldrh	r3, [r7, #26]
 8011f4a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	f200 809a 	bhi.w	8012088 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011f54:	69fa      	ldr	r2, [r7, #28]
 8011f56:	6879      	ldr	r1, [r7, #4]
 8011f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f5a:	f7ff fdd5 	bl	8011b08 <ip_reass_chain_frag_into_datagram_and_validate>
 8011f5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f66:	f000 809b 	beq.w	80120a0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011f6a:	4b48      	ldr	r3, [pc, #288]	@ (801208c <ip4_reass+0x2b0>)
 8011f6c:	881a      	ldrh	r2, [r3, #0]
 8011f6e:	8c3b      	ldrh	r3, [r7, #32]
 8011f70:	4413      	add	r3, r2
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	4b45      	ldr	r3, [pc, #276]	@ (801208c <ip4_reass+0x2b0>)
 8011f76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d00d      	beq.n	8011f9a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011f7e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011f80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f82:	4413      	add	r3, r2
 8011f84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f88:	8a7a      	ldrh	r2, [r7, #18]
 8011f8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f8e:	7f9b      	ldrb	r3, [r3, #30]
 8011f90:	f043 0301 	orr.w	r3, r3, #1
 8011f94:	b2da      	uxtb	r2, r3
 8011f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	2b01      	cmp	r3, #1
 8011f9e:	d171      	bne.n	8012084 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fa2:	8b9b      	ldrh	r3, [r3, #28]
 8011fa4:	3314      	adds	r3, #20
 8011fa6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fbc:	3308      	adds	r3, #8
 8011fbe:	2214      	movs	r2, #20
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fc4:	f001 f9c1 	bl	801334a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011fc8:	8a3b      	ldrh	r3, [r7, #16]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7f6 fb08 	bl	80085e0 <lwip_htons>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fda:	2200      	movs	r2, #0
 8011fdc:	719a      	strb	r2, [r3, #6]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	729a      	strb	r2, [r3, #10]
 8011fe8:	2200      	movs	r2, #0
 8011fea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011ff2:	e00d      	b.n	8012010 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011ffa:	2114      	movs	r1, #20
 8011ffc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011ffe:	f7f7 fdc7 	bl	8009b90 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012002:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7f7 ff0b 	bl	8009e20 <pbuf_cat>
      r = iprh->next_pbuf;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8012010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012012:	2b00      	cmp	r3, #0
 8012014:	d1ee      	bne.n	8011ff4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012016:	4b1e      	ldr	r3, [pc, #120]	@ (8012090 <ip4_reass+0x2b4>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801201c:	429a      	cmp	r2, r3
 801201e:	d102      	bne.n	8012026 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012020:	2300      	movs	r3, #0
 8012022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012024:	e010      	b.n	8012048 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012026:	4b1a      	ldr	r3, [pc, #104]	@ (8012090 <ip4_reass+0x2b4>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801202c:	e007      	b.n	801203e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801202e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012034:	429a      	cmp	r2, r3
 8012036:	d006      	beq.n	8012046 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1f4      	bne.n	801202e <ip4_reass+0x252>
 8012044:	e000      	b.n	8012048 <ip4_reass+0x26c>
          break;
 8012046:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801204a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801204c:	f7ff fd2e 	bl	8011aac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f7f7 feab 	bl	8009dac <pbuf_clen>
 8012056:	4603      	mov	r3, r0
 8012058:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801205a:	4b0c      	ldr	r3, [pc, #48]	@ (801208c <ip4_reass+0x2b0>)
 801205c:	881b      	ldrh	r3, [r3, #0]
 801205e:	8c3a      	ldrh	r2, [r7, #32]
 8012060:	429a      	cmp	r2, r3
 8012062:	d906      	bls.n	8012072 <ip4_reass+0x296>
 8012064:	4b0b      	ldr	r3, [pc, #44]	@ (8012094 <ip4_reass+0x2b8>)
 8012066:	f240 229b 	movw	r2, #667	@ 0x29b
 801206a:	490b      	ldr	r1, [pc, #44]	@ (8012098 <ip4_reass+0x2bc>)
 801206c:	480b      	ldr	r0, [pc, #44]	@ (801209c <ip4_reass+0x2c0>)
 801206e:	f000 ff8d 	bl	8012f8c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012072:	4b06      	ldr	r3, [pc, #24]	@ (801208c <ip4_reass+0x2b0>)
 8012074:	881a      	ldrh	r2, [r3, #0]
 8012076:	8c3b      	ldrh	r3, [r7, #32]
 8012078:	1ad3      	subs	r3, r2, r3
 801207a:	b29a      	uxth	r2, r3
 801207c:	4b03      	ldr	r3, [pc, #12]	@ (801208c <ip4_reass+0x2b0>)
 801207e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	e038      	b.n	80120f6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012084:	2300      	movs	r3, #0
 8012086:	e036      	b.n	80120f6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012088:	bf00      	nop
 801208a:	e00a      	b.n	80120a2 <ip4_reass+0x2c6>
 801208c:	20008b9c 	.word	0x20008b9c
 8012090:	20008b98 	.word	0x20008b98
 8012094:	080165bc 	.word	0x080165bc
 8012098:	0801672c 	.word	0x0801672c
 801209c:	08016604 	.word	0x08016604
    goto nullreturn_ipr;
 80120a0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80120a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d106      	bne.n	80120b6 <ip4_reass+0x2da>
 80120a8:	4b15      	ldr	r3, [pc, #84]	@ (8012100 <ip4_reass+0x324>)
 80120aa:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80120ae:	4915      	ldr	r1, [pc, #84]	@ (8012104 <ip4_reass+0x328>)
 80120b0:	4815      	ldr	r0, [pc, #84]	@ (8012108 <ip4_reass+0x32c>)
 80120b2:	f000 ff6b 	bl	8012f8c <iprintf>
  if (ipr->p == NULL) {
 80120b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d116      	bne.n	80120ec <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80120be:	4b13      	ldr	r3, [pc, #76]	@ (801210c <ip4_reass+0x330>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d006      	beq.n	80120d6 <ip4_reass+0x2fa>
 80120c8:	4b0d      	ldr	r3, [pc, #52]	@ (8012100 <ip4_reass+0x324>)
 80120ca:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80120ce:	4910      	ldr	r1, [pc, #64]	@ (8012110 <ip4_reass+0x334>)
 80120d0:	480d      	ldr	r0, [pc, #52]	@ (8012108 <ip4_reass+0x32c>)
 80120d2:	f000 ff5b 	bl	8012f8c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80120d6:	2100      	movs	r1, #0
 80120d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80120da:	f7ff fce7 	bl	8011aac <ip_reass_dequeue_datagram>
 80120de:	e006      	b.n	80120ee <ip4_reass+0x312>
    goto nullreturn;
 80120e0:	bf00      	nop
 80120e2:	e004      	b.n	80120ee <ip4_reass+0x312>
    goto nullreturn;
 80120e4:	bf00      	nop
 80120e6:	e002      	b.n	80120ee <ip4_reass+0x312>
      goto nullreturn;
 80120e8:	bf00      	nop
 80120ea:	e000      	b.n	80120ee <ip4_reass+0x312>
  }

nullreturn:
 80120ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7f7 fdd4 	bl	8009c9c <pbuf_free>
  return NULL;
 80120f4:	2300      	movs	r3, #0
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3738      	adds	r7, #56	@ 0x38
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	080165bc 	.word	0x080165bc
 8012104:	08016748 	.word	0x08016748
 8012108:	08016604 	.word	0x08016604
 801210c:	20008b98 	.word	0x20008b98
 8012110:	08016754 	.word	0x08016754

08012114 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012118:	2005      	movs	r0, #5
 801211a:	f7f6 fed9 	bl	8008ed0 <memp_malloc>
 801211e:	4603      	mov	r3, r0
}
 8012120:	4618      	mov	r0, r3
 8012122:	bd80      	pop	{r7, pc}

08012124 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d106      	bne.n	8012140 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012132:	4b07      	ldr	r3, [pc, #28]	@ (8012150 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012134:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012138:	4906      	ldr	r1, [pc, #24]	@ (8012154 <ip_frag_free_pbuf_custom_ref+0x30>)
 801213a:	4807      	ldr	r0, [pc, #28]	@ (8012158 <ip_frag_free_pbuf_custom_ref+0x34>)
 801213c:	f000 ff26 	bl	8012f8c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012140:	6879      	ldr	r1, [r7, #4]
 8012142:	2005      	movs	r0, #5
 8012144:	f7f6 ff34 	bl	8008fb0 <memp_free>
}
 8012148:	bf00      	nop
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	080165bc 	.word	0x080165bc
 8012154:	08016774 	.word	0x08016774
 8012158:	08016604 	.word	0x08016604

0801215c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <ipfrag_free_pbuf_custom+0x20>
 801216e:	4b11      	ldr	r3, [pc, #68]	@ (80121b4 <ipfrag_free_pbuf_custom+0x58>)
 8012170:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012174:	4910      	ldr	r1, [pc, #64]	@ (80121b8 <ipfrag_free_pbuf_custom+0x5c>)
 8012176:	4811      	ldr	r0, [pc, #68]	@ (80121bc <ipfrag_free_pbuf_custom+0x60>)
 8012178:	f000 ff08 	bl	8012f8c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801217c:	68fa      	ldr	r2, [r7, #12]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	429a      	cmp	r2, r3
 8012182:	d006      	beq.n	8012192 <ipfrag_free_pbuf_custom+0x36>
 8012184:	4b0b      	ldr	r3, [pc, #44]	@ (80121b4 <ipfrag_free_pbuf_custom+0x58>)
 8012186:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801218a:	490d      	ldr	r1, [pc, #52]	@ (80121c0 <ipfrag_free_pbuf_custom+0x64>)
 801218c:	480b      	ldr	r0, [pc, #44]	@ (80121bc <ipfrag_free_pbuf_custom+0x60>)
 801218e:	f000 fefd 	bl	8012f8c <iprintf>
  if (pcr->original != NULL) {
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	695b      	ldr	r3, [r3, #20]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d004      	beq.n	80121a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	695b      	ldr	r3, [r3, #20]
 801219e:	4618      	mov	r0, r3
 80121a0:	f7f7 fd7c 	bl	8009c9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f7ff ffbd 	bl	8012124 <ip_frag_free_pbuf_custom_ref>
}
 80121aa:	bf00      	nop
 80121ac:	3710      	adds	r7, #16
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	080165bc 	.word	0x080165bc
 80121b8:	08016780 	.word	0x08016780
 80121bc:	08016604 	.word	0x08016604
 80121c0:	0801678c 	.word	0x0801678c

080121c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b094      	sub	sp, #80	@ 0x50
 80121c8:	af02      	add	r7, sp, #8
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80121d0:	2300      	movs	r3, #0
 80121d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80121da:	3b14      	subs	r3, #20
 80121dc:	2b00      	cmp	r3, #0
 80121de:	da00      	bge.n	80121e2 <ip4_frag+0x1e>
 80121e0:	3307      	adds	r3, #7
 80121e2:	10db      	asrs	r3, r3, #3
 80121e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80121e6:	2314      	movs	r3, #20
 80121e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80121f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80121f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	f003 030f 	and.w	r3, r3, #15
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	b2db      	uxtb	r3, r3
 8012202:	2b14      	cmp	r3, #20
 8012204:	d002      	beq.n	801220c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012206:	f06f 0305 	mvn.w	r3, #5
 801220a:	e110      	b.n	801242e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	895b      	ldrh	r3, [r3, #10]
 8012210:	2b13      	cmp	r3, #19
 8012212:	d809      	bhi.n	8012228 <ip4_frag+0x64>
 8012214:	4b88      	ldr	r3, [pc, #544]	@ (8012438 <ip4_frag+0x274>)
 8012216:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801221a:	4988      	ldr	r1, [pc, #544]	@ (801243c <ip4_frag+0x278>)
 801221c:	4888      	ldr	r0, [pc, #544]	@ (8012440 <ip4_frag+0x27c>)
 801221e:	f000 feb5 	bl	8012f8c <iprintf>
 8012222:	f06f 0305 	mvn.w	r3, #5
 8012226:	e102      	b.n	801242e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801222a:	88db      	ldrh	r3, [r3, #6]
 801222c:	b29b      	uxth	r3, r3
 801222e:	4618      	mov	r0, r3
 8012230:	f7f6 f9d6 	bl	80085e0 <lwip_htons>
 8012234:	4603      	mov	r3, r0
 8012236:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012238:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801223a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801223e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012242:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012248:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	891b      	ldrh	r3, [r3, #8]
 801224e:	3b14      	subs	r3, #20
 8012250:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012254:	e0e1      	b.n	801241a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012256:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012258:	00db      	lsls	r3, r3, #3
 801225a:	b29b      	uxth	r3, r3
 801225c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012260:	4293      	cmp	r3, r2
 8012262:	bf28      	it	cs
 8012264:	4613      	movcs	r3, r2
 8012266:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012268:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801226c:	2114      	movs	r1, #20
 801226e:	200e      	movs	r0, #14
 8012270:	f7f7 fa30 	bl	80096d4 <pbuf_alloc>
 8012274:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012278:	2b00      	cmp	r3, #0
 801227a:	f000 80d5 	beq.w	8012428 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012280:	895b      	ldrh	r3, [r3, #10]
 8012282:	2b13      	cmp	r3, #19
 8012284:	d806      	bhi.n	8012294 <ip4_frag+0xd0>
 8012286:	4b6c      	ldr	r3, [pc, #432]	@ (8012438 <ip4_frag+0x274>)
 8012288:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801228c:	496d      	ldr	r1, [pc, #436]	@ (8012444 <ip4_frag+0x280>)
 801228e:	486c      	ldr	r0, [pc, #432]	@ (8012440 <ip4_frag+0x27c>)
 8012290:	f000 fe7c 	bl	8012f8c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	2214      	movs	r2, #20
 801229a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801229c:	4618      	mov	r0, r3
 801229e:	f001 f854 	bl	801334a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80122a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80122a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80122aa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80122ae:	e064      	b.n	801237a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	895a      	ldrh	r2, [r3, #10]
 80122b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80122b6:	1ad3      	subs	r3, r2, r3
 80122b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	895b      	ldrh	r3, [r3, #10]
 80122be:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d906      	bls.n	80122d2 <ip4_frag+0x10e>
 80122c4:	4b5c      	ldr	r3, [pc, #368]	@ (8012438 <ip4_frag+0x274>)
 80122c6:	f240 322d 	movw	r2, #813	@ 0x32d
 80122ca:	495f      	ldr	r1, [pc, #380]	@ (8012448 <ip4_frag+0x284>)
 80122cc:	485c      	ldr	r0, [pc, #368]	@ (8012440 <ip4_frag+0x27c>)
 80122ce:	f000 fe5d 	bl	8012f8c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80122d2:	8bfa      	ldrh	r2, [r7, #30]
 80122d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80122d8:	4293      	cmp	r3, r2
 80122da:	bf28      	it	cs
 80122dc:	4613      	movcs	r3, r2
 80122de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80122e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d105      	bne.n	80122f6 <ip4_frag+0x132>
        poff = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	60fb      	str	r3, [r7, #12]
        continue;
 80122f4:	e041      	b.n	801237a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80122f6:	f7ff ff0d 	bl	8012114 <ip_frag_alloc_pbuf_custom_ref>
 80122fa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d103      	bne.n	801230a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012302:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012304:	f7f7 fcca 	bl	8009c9c <pbuf_free>
        goto memerr;
 8012308:	e08f      	b.n	801242a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801230a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012310:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012312:	4413      	add	r3, r2
 8012314:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012318:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801231c:	9201      	str	r2, [sp, #4]
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	4603      	mov	r3, r0
 8012322:	2241      	movs	r2, #65	@ 0x41
 8012324:	2000      	movs	r0, #0
 8012326:	f7f7 faff 	bl	8009928 <pbuf_alloced_custom>
 801232a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d106      	bne.n	8012340 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012332:	69b8      	ldr	r0, [r7, #24]
 8012334:	f7ff fef6 	bl	8012124 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012338:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801233a:	f7f7 fcaf 	bl	8009c9c <pbuf_free>
        goto memerr;
 801233e:	e074      	b.n	801242a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7f7 fd4b 	bl	8009ddc <pbuf_ref>
      pcr->original = p;
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	4a3f      	ldr	r2, [pc, #252]	@ (801244c <ip4_frag+0x288>)
 8012350:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012352:	6979      	ldr	r1, [r7, #20]
 8012354:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012356:	f7f7 fd63 	bl	8009e20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801235a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801235e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012368:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801236c:	2b00      	cmp	r3, #0
 801236e:	d004      	beq.n	801237a <ip4_frag+0x1b6>
        poff = 0;
 8012370:	2300      	movs	r3, #0
 8012372:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801237a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801237e:	2b00      	cmp	r3, #0
 8012380:	d196      	bne.n	80122b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012382:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012384:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012388:	4413      	add	r3, r2
 801238a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012390:	f1a3 0213 	sub.w	r2, r3, #19
 8012394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012398:	429a      	cmp	r2, r3
 801239a:	bfcc      	ite	gt
 801239c:	2301      	movgt	r3, #1
 801239e:	2300      	movle	r3, #0
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80123a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80123a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80123ae:	6a3b      	ldr	r3, [r7, #32]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d002      	beq.n	80123ba <ip4_frag+0x1f6>
 80123b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d003      	beq.n	80123c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80123ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80123c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80123c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7f6 f90b 	bl	80085e0 <lwip_htons>
 80123ca:	4603      	mov	r3, r0
 80123cc:	461a      	mov	r2, r3
 80123ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80123d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80123d4:	3314      	adds	r3, #20
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f6 f901 	bl	80085e0 <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	461a      	mov	r2, r3
 80123e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80123e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e8:	2200      	movs	r2, #0
 80123ea:	729a      	strb	r2, [r3, #10]
 80123ec:	2200      	movs	r2, #0
 80123ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	695b      	ldr	r3, [r3, #20]
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123f8:	68b8      	ldr	r0, [r7, #8]
 80123fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80123fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80123fe:	f7f7 fc4d 	bl	8009c9c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012402:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012406:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012408:	1ad3      	subs	r3, r2, r3
 801240a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801240e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012412:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012414:	4413      	add	r3, r2
 8012416:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801241a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801241e:	2b00      	cmp	r3, #0
 8012420:	f47f af19 	bne.w	8012256 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012424:	2300      	movs	r3, #0
 8012426:	e002      	b.n	801242e <ip4_frag+0x26a>
      goto memerr;
 8012428:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801242a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801242e:	4618      	mov	r0, r3
 8012430:	3748      	adds	r7, #72	@ 0x48
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	080165bc 	.word	0x080165bc
 801243c:	08016798 	.word	0x08016798
 8012440:	08016604 	.word	0x08016604
 8012444:	080167b4 	.word	0x080167b4
 8012448:	080167d4 	.word	0x080167d4
 801244c:	0801215d 	.word	0x0801215d

08012450 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b086      	sub	sp, #24
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801245a:	230e      	movs	r3, #14
 801245c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	895b      	ldrh	r3, [r3, #10]
 8012462:	2b0e      	cmp	r3, #14
 8012464:	d96e      	bls.n	8012544 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	7bdb      	ldrb	r3, [r3, #15]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d106      	bne.n	801247c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012474:	3301      	adds	r3, #1
 8012476:	b2da      	uxtb	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	7b1a      	ldrb	r2, [r3, #12]
 8012486:	7b5b      	ldrb	r3, [r3, #13]
 8012488:	021b      	lsls	r3, r3, #8
 801248a:	4313      	orrs	r3, r2
 801248c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	f003 0301 	and.w	r3, r3, #1
 8012496:	2b00      	cmp	r3, #0
 8012498:	d023      	beq.n	80124e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	2b01      	cmp	r3, #1
 80124a0:	d10f      	bne.n	80124c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	785b      	ldrb	r3, [r3, #1]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d11b      	bne.n	80124e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124ae:	2b5e      	cmp	r3, #94	@ 0x5e
 80124b0:	d117      	bne.n	80124e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	7b5b      	ldrb	r3, [r3, #13]
 80124b6:	f043 0310 	orr.w	r3, r3, #16
 80124ba:	b2da      	uxtb	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	735a      	strb	r2, [r3, #13]
 80124c0:	e00f      	b.n	80124e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	2206      	movs	r2, #6
 80124c6:	4928      	ldr	r1, [pc, #160]	@ (8012568 <ethernet_input+0x118>)
 80124c8:	4618      	mov	r0, r3
 80124ca:	f000 fea7 	bl	801321c <memcmp>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d106      	bne.n	80124e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	7b5b      	ldrb	r3, [r3, #13]
 80124d8:	f043 0308 	orr.w	r3, r3, #8
 80124dc:	b2da      	uxtb	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80124e2:	89fb      	ldrh	r3, [r7, #14]
 80124e4:	2b08      	cmp	r3, #8
 80124e6:	d003      	beq.n	80124f0 <ethernet_input+0xa0>
 80124e8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80124ec:	d014      	beq.n	8012518 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80124ee:	e032      	b.n	8012556 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124f6:	f003 0308 	and.w	r3, r3, #8
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d024      	beq.n	8012548 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80124fe:	8afb      	ldrh	r3, [r7, #22]
 8012500:	4619      	mov	r1, r3
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f7f7 fb44 	bl	8009b90 <pbuf_remove_header>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d11e      	bne.n	801254c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801250e:	6839      	ldr	r1, [r7, #0]
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7fe ff21 	bl	8011358 <ip4_input>
      break;
 8012516:	e013      	b.n	8012540 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801251e:	f003 0308 	and.w	r3, r3, #8
 8012522:	2b00      	cmp	r3, #0
 8012524:	d014      	beq.n	8012550 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012526:	8afb      	ldrh	r3, [r7, #22]
 8012528:	4619      	mov	r1, r3
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7f7 fb30 	bl	8009b90 <pbuf_remove_header>
 8012530:	4603      	mov	r3, r0
 8012532:	2b00      	cmp	r3, #0
 8012534:	d10e      	bne.n	8012554 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7fe f8c1 	bl	80106c0 <etharp_input>
      break;
 801253e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012540:	2300      	movs	r3, #0
 8012542:	e00c      	b.n	801255e <ethernet_input+0x10e>
    goto free_and_return;
 8012544:	bf00      	nop
 8012546:	e006      	b.n	8012556 <ethernet_input+0x106>
        goto free_and_return;
 8012548:	bf00      	nop
 801254a:	e004      	b.n	8012556 <ethernet_input+0x106>
        goto free_and_return;
 801254c:	bf00      	nop
 801254e:	e002      	b.n	8012556 <ethernet_input+0x106>
        goto free_and_return;
 8012550:	bf00      	nop
 8012552:	e000      	b.n	8012556 <ethernet_input+0x106>
        goto free_and_return;
 8012554:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7f7 fba0 	bl	8009c9c <pbuf_free>
  return ERR_OK;
 801255c:	2300      	movs	r3, #0
}
 801255e:	4618      	mov	r0, r3
 8012560:	3718      	adds	r7, #24
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	08016d24 	.word	0x08016d24

0801256c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801256c:	b580      	push	{r7, lr}
 801256e:	b086      	sub	sp, #24
 8012570:	af00      	add	r7, sp, #0
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
 8012578:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801257a:	8c3b      	ldrh	r3, [r7, #32]
 801257c:	4618      	mov	r0, r3
 801257e:	f7f6 f82f 	bl	80085e0 <lwip_htons>
 8012582:	4603      	mov	r3, r0
 8012584:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012586:	210e      	movs	r1, #14
 8012588:	68b8      	ldr	r0, [r7, #8]
 801258a:	f7f7 faf1 	bl	8009b70 <pbuf_add_header>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d125      	bne.n	80125e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	8afa      	ldrh	r2, [r7, #22]
 801259e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	2206      	movs	r2, #6
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	4618      	mov	r0, r3
 80125a8:	f000 fecf 	bl	801334a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	3306      	adds	r3, #6
 80125b0:	2206      	movs	r2, #6
 80125b2:	6879      	ldr	r1, [r7, #4]
 80125b4:	4618      	mov	r0, r3
 80125b6:	f000 fec8 	bl	801334a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80125c0:	2b06      	cmp	r3, #6
 80125c2:	d006      	beq.n	80125d2 <ethernet_output+0x66>
 80125c4:	4b0a      	ldr	r3, [pc, #40]	@ (80125f0 <ethernet_output+0x84>)
 80125c6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80125ca:	490a      	ldr	r1, [pc, #40]	@ (80125f4 <ethernet_output+0x88>)
 80125cc:	480a      	ldr	r0, [pc, #40]	@ (80125f8 <ethernet_output+0x8c>)
 80125ce:	f000 fcdd 	bl	8012f8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	699b      	ldr	r3, [r3, #24]
 80125d6:	68b9      	ldr	r1, [r7, #8]
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	4798      	blx	r3
 80125dc:	4603      	mov	r3, r0
 80125de:	e002      	b.n	80125e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80125e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80125e2:	f06f 0301 	mvn.w	r3, #1
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3718      	adds	r7, #24
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	080167e4 	.word	0x080167e4
 80125f4:	0801681c 	.word	0x0801681c
 80125f8:	08016850 	.word	0x08016850

080125fc <rtg_main>:
u16_t dest_port = 0;
struct udp_pcb *upcb;
uint8_t incomming_buffer[MAX_BUF_LEN] = {0};
u16_t incomming_len = 0;

void rtg_main() {
 80125fc:	b580      	push	{r7, lr}
 80125fe:	af00      	add	r7, sp, #0
    printf("UDP Server is running...\r\n");
 8012600:	480a      	ldr	r0, [pc, #40]	@ (801262c <rtg_main+0x30>)
 8012602:	f000 fd2b 	bl	801305c <puts>
    udpServer_init();
 8012606:	f000 f92b 	bl	8012860 <udpServer_init>

    while (1) {
        ethernetif_input(&gnetif);
 801260a:	4809      	ldr	r0, [pc, #36]	@ (8012630 <rtg_main+0x34>)
 801260c:	f7f5 fd64 	bl	80080d8 <ethernetif_input>
        sys_check_timeouts();
 8012610:	f7fd f842 	bl	800f698 <sys_check_timeouts>

        if (callback_flag == 1) {
 8012614:	4b07      	ldr	r3, [pc, #28]	@ (8012634 <rtg_main+0x38>)
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	2b01      	cmp	r3, #1
 801261a:	d1f6      	bne.n	801260a <rtg_main+0xe>
            printf("Received command for testing\r\n");
 801261c:	4806      	ldr	r0, [pc, #24]	@ (8012638 <rtg_main+0x3c>)
 801261e:	f000 fd1d 	bl	801305c <puts>
            callback_flag = 0;
 8012622:	4b04      	ldr	r3, [pc, #16]	@ (8012634 <rtg_main+0x38>)
 8012624:	2200      	movs	r2, #0
 8012626:	701a      	strb	r2, [r3, #0]
        ethernetif_input(&gnetif);
 8012628:	e7ef      	b.n	801260a <rtg_main+0xe>
 801262a:	bf00      	nop
 801262c:	08016878 	.word	0x08016878
 8012630:	200009f4 	.word	0x200009f4
 8012634:	20008b9e 	.word	0x20008b9e
 8012638:	08016894 	.word	0x08016894

0801263c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	b29a      	uxth	r2, r3
 801264c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012650:	68b9      	ldr	r1, [r7, #8]
 8012652:	4804      	ldr	r0, [pc, #16]	@ (8012664 <_write+0x28>)
 8012654:	f7f3 fc68 	bl	8005f28 <HAL_UART_Transmit>
	return len;
 8012658:	687b      	ldr	r3, [r7, #4]
}
 801265a:	4618      	mov	r0, r3
 801265c:	3710      	adds	r7, #16
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	2000039c 	.word	0x2000039c

08012668 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8012672:	1df9      	adds	r1, r7, #7
 8012674:	f04f 33ff 	mov.w	r3, #4294967295
 8012678:	2201      	movs	r2, #1
 801267a:	4807      	ldr	r0, [pc, #28]	@ (8012698 <__io_getchar+0x30>)
 801267c:	f7f3 fcd7 	bl	800602e <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8012680:	1df9      	adds	r1, r7, #7
 8012682:	f04f 33ff 	mov.w	r3, #4294967295
 8012686:	2201      	movs	r2, #1
 8012688:	4803      	ldr	r0, [pc, #12]	@ (8012698 <__io_getchar+0x30>)
 801268a:	f7f3 fc4d 	bl	8005f28 <HAL_UART_Transmit>
	return ch;
 801268e:	79fb      	ldrb	r3, [r7, #7]
}
 8012690:	4618      	mov	r0, r3
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	2000039c 	.word	0x2000039c

0801269c <_read>:

int _read(int file, char *ptr, int len) {
 801269c:	b580      	push	{r7, lr}
 801269e:	b086      	sub	sp, #24
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 80126a8:	2300      	movs	r3, #0
 80126aa:	617b      	str	r3, [r7, #20]
	char ch;

	for (; DataIdx < len; DataIdx++) {
 80126ac:	e016      	b.n	80126dc <_read+0x40>
		ch = __io_getchar();
 80126ae:	f7ff ffdb 	bl	8012668 <__io_getchar>
 80126b2:	4603      	mov	r3, r0
 80126b4:	74fb      	strb	r3, [r7, #19]
		*ptr = ch;
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	7cfa      	ldrb	r2, [r7, #19]
 80126ba:	701a      	strb	r2, [r3, #0]
		ptr++;
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	3301      	adds	r3, #1
 80126c0:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 80126c2:	7cfb      	ldrb	r3, [r7, #19]
 80126c4:	2b0d      	cmp	r3, #13
 80126c6:	d002      	beq.n	80126ce <_read+0x32>
 80126c8:	7cfb      	ldrb	r3, [r7, #19]
 80126ca:	2b0a      	cmp	r3, #10
 80126cc:	d103      	bne.n	80126d6 <_read+0x3a>
			*(ptr) = 0;
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	2200      	movs	r2, #0
 80126d2:	701a      	strb	r2, [r3, #0]
			break;
 80126d4:	e006      	b.n	80126e4 <_read+0x48>
	for (; DataIdx < len; DataIdx++) {
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	3301      	adds	r3, #1
 80126da:	617b      	str	r3, [r7, #20]
 80126dc:	697a      	ldr	r2, [r7, #20]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	dbe4      	blt.n	80126ae <_read+0x12>
		}
	}
	return DataIdx + 1;
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	3301      	adds	r3, #1
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3718      	adds	r7, #24
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <execute_test>:
#include "Protocol.h"
#include "UART_test.h"
#include "ADC_test.h"
#include "Timer_test.h"

static uint8_t execute_test(TestCommand* command) {
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
	printf("Executing test for Peripheral: %u, Test-ID: %u\r\n", (unsigned int)command->peripheral, (unsigned int)command->test_id);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	791b      	ldrb	r3, [r3, #4]
 80126fc:	4619      	mov	r1, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	461a      	mov	r2, r3
 8012704:	4813      	ldr	r0, [pc, #76]	@ (8012754 <execute_test+0x64>)
 8012706:	f000 fc41 	bl	8012f8c <iprintf>
    switch (command->peripheral) {
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	791b      	ldrb	r3, [r3, #4]
 801270e:	2b02      	cmp	r3, #2
 8012710:	d002      	beq.n	8012718 <execute_test+0x28>
 8012712:	2b10      	cmp	r3, #16
 8012714:	d00b      	beq.n	801272e <execute_test+0x3e>
 8012716:	e011      	b.n	801273c <execute_test+0x4c>
        case TEST_PERIPHERAL_UART:
        	return test_uart(command->bit_pattern, command->pattern_length, command->iterations);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	1dd8      	adds	r0, r3, #7
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	7999      	ldrb	r1, [r3, #6]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	795b      	ldrb	r3, [r3, #5]
 8012724:	461a      	mov	r2, r3
 8012726:	f000 f961 	bl	80129ec <test_uart>
 801272a:	4603      	mov	r3, r0
 801272c:	e00d      	b.n	801274a <execute_test+0x5a>
        case TEST_PERIPHERAL_ADC:
            return test_adc(command->iterations);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	795b      	ldrb	r3, [r3, #5]
 8012732:	4618      	mov	r0, r3
 8012734:	f000 f8c6 	bl	80128c4 <test_adc>
 8012738:	4603      	mov	r3, r0
 801273a:	e006      	b.n	801274a <execute_test+0x5a>
        case TEST_PERIPHERAL_TIMER:
//        	return test_timer(command->iterations);
        default:
            printf("Invalid peripheral for testing: %d\r\n", command->peripheral);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	791b      	ldrb	r3, [r3, #4]
 8012740:	4619      	mov	r1, r3
 8012742:	4805      	ldr	r0, [pc, #20]	@ (8012758 <execute_test+0x68>)
 8012744:	f000 fc22 	bl	8012f8c <iprintf>
            return 0xFF;
 8012748:	23ff      	movs	r3, #255	@ 0xff
    }
}
 801274a:	4618      	mov	r0, r3
 801274c:	3708      	adds	r7, #8
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
 8012752:	bf00      	nop
 8012754:	080168b4 	.word	0x080168b4
 8012758:	080168e8 	.word	0x080168e8

0801275c <udp_receive_callback>:

void udp_receive_callback(void* arg, struct udp_pcb* upcb, struct pbuf* p, const ip_addr_t* addr, u16_t port) {
 801275c:	b590      	push	{r4, r7, lr}
 801275e:	b0a5      	sub	sp, #148	@ 0x94
 8012760:	af02      	add	r7, sp, #8
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
 8012768:	603b      	str	r3, [r7, #0]
    TestCommand command;
    TestResult result;

    // Parse incoming command
    memcpy(&command, p->payload, sizeof(TestCommand));
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6859      	ldr	r1, [r3, #4]
 801276e:	f107 031c 	add.w	r3, r7, #28
 8012772:	226c      	movs	r2, #108	@ 0x6c
 8012774:	4618      	mov	r0, r3
 8012776:	f000 fde8 	bl	801334a <memcpy>
    pbuf_free(p);
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f7f7 fa8e 	bl	8009c9c <pbuf_free>

    // Validate pattern length
       if (command.pattern_length != strlen(command.bit_pattern)) {
 8012780:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012784:	461c      	mov	r4, r3
 8012786:	f107 031c 	add.w	r3, r7, #28
 801278a:	3307      	adds	r3, #7
 801278c:	4618      	mov	r0, r3
 801278e:	f7ed fd3f 	bl	8000210 <strlen>
 8012792:	4603      	mov	r3, r0
 8012794:	429c      	cmp	r4, r3
 8012796:	d01c      	beq.n	80127d2 <udp_receive_callback+0x76>
           printf("Pattern length mismatch. Expected: %d, Received: %d\r\n", (int)strlen(command.bit_pattern), command.pattern_length);
 8012798:	f107 031c 	add.w	r3, r7, #28
 801279c:	3307      	adds	r3, #7
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ed fd36 	bl	8000210 <strlen>
 80127a4:	4603      	mov	r3, r0
 80127a6:	4619      	mov	r1, r3
 80127a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80127ac:	461a      	mov	r2, r3
 80127ae:	4814      	ldr	r0, [pc, #80]	@ (8012800 <udp_receive_callback+0xa4>)
 80127b0:	f000 fbec 	bl	8012f8c <iprintf>
           result.result = 0xFF;  // Indicate error
 80127b4:	23ff      	movs	r3, #255	@ 0xff
 80127b6:	763b      	strb	r3, [r7, #24]
           result.test_id = command.test_id;
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	617b      	str	r3, [r7, #20]
           send_packet(upcb, &result, sizeof(TestResult), addr, port);
 80127bc:	f107 0114 	add.w	r1, r7, #20
 80127c0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	2208      	movs	r2, #8
 80127ca:	68b8      	ldr	r0, [r7, #8]
 80127cc:	f000 f81a 	bl	8012804 <send_packet>
 80127d0:	e012      	b.n	80127f8 <udp_receive_callback+0x9c>
           return;
       }

    // Execute the test
    result.test_id = command.test_id;
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	617b      	str	r3, [r7, #20]
    result.result = execute_test(&command);
 80127d6:	f107 031c 	add.w	r3, r7, #28
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff ff88 	bl	80126f0 <execute_test>
 80127e0:	4603      	mov	r3, r0
 80127e2:	763b      	strb	r3, [r7, #24]

    // Send the result back to the client
    send_packet(upcb, &result, sizeof(TestResult), addr, port);
 80127e4:	f107 0114 	add.w	r1, r7, #20
 80127e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 80127ec:	9300      	str	r3, [sp, #0]
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	2208      	movs	r2, #8
 80127f2:	68b8      	ldr	r0, [r7, #8]
 80127f4:	f000 f806 	bl	8012804 <send_packet>
}
 80127f8:	378c      	adds	r7, #140	@ 0x8c
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd90      	pop	{r4, r7, pc}
 80127fe:	bf00      	nop
 8012800:	08016910 	.word	0x08016910

08012804 <send_packet>:



err_t send_packet(struct udp_pcb* pcb, const void* payload, u16_t payload_len, const ip_addr_t* ipaddr, u16_t port)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b086      	sub	sp, #24
 8012808:	af00      	add	r7, sp, #0
 801280a:	60f8      	str	r0, [r7, #12]
 801280c:	60b9      	str	r1, [r7, #8]
 801280e:	603b      	str	r3, [r7, #0]
 8012810:	4613      	mov	r3, r2
 8012812:	80fb      	strh	r3, [r7, #6]
    err_t err;
    struct pbuf* p;

    // allocate a pbuf for the payload
    p = pbuf_alloc(PBUF_TRANSPORT, payload_len, PBUF_RAM);
 8012814:	88fb      	ldrh	r3, [r7, #6]
 8012816:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801281a:	4619      	mov	r1, r3
 801281c:	2036      	movs	r0, #54	@ 0x36
 801281e:	f7f6 ff59 	bl	80096d4 <pbuf_alloc>
 8012822:	6178      	str	r0, [r7, #20]
    if (!p) {
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d102      	bne.n	8012830 <send_packet+0x2c>
        // failed to allocate pbuf
        return ERR_MEM;
 801282a:	f04f 33ff 	mov.w	r3, #4294967295
 801282e:	e013      	b.n	8012858 <send_packet+0x54>
    }

    // copy the payload into the pbuf
    memcpy(p->payload, payload, payload_len);
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	88fa      	ldrh	r2, [r7, #6]
 8012836:	68b9      	ldr	r1, [r7, #8]
 8012838:	4618      	mov	r0, r3
 801283a:	f000 fd86 	bl	801334a <memcpy>

    // send the packet
    err = udp_sendto(pcb, p, ipaddr, port);
 801283e:	8c3b      	ldrh	r3, [r7, #32]
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	6979      	ldr	r1, [r7, #20]
 8012844:	68f8      	ldr	r0, [r7, #12]
 8012846:	f7fd f92b 	bl	800faa0 <udp_sendto>
 801284a:	4603      	mov	r3, r0
 801284c:	74fb      	strb	r3, [r7, #19]

    // free the pbuf
    pbuf_free(p);
 801284e:	6978      	ldr	r0, [r7, #20]
 8012850:	f7f7 fa24 	bl	8009c9c <pbuf_free>

    return err;
 8012854:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3718      	adds	r7, #24
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <udpServer_init>:


void udpServer_init(void) {
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   upcb = udp_new();
 8012866:	f7fd fbbb 	bl	800ffe0 <udp_new>
 801286a:	4603      	mov	r3, r0
 801286c:	4a11      	ldr	r2, [pc, #68]	@ (80128b4 <udpServer_init+0x54>)
 801286e:	6013      	str	r3, [r2, #0]
   callback_flag = 0;
 8012870:	4b11      	ldr	r3, [pc, #68]	@ (80128b8 <udpServer_init+0x58>)
 8012872:	2200      	movs	r2, #0
 8012874:	701a      	strb	r2, [r3, #0]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 50,007 is the server UDP port
 8012876:	4b0f      	ldr	r3, [pc, #60]	@ (80128b4 <udpServer_init+0x54>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f24c 3257 	movw	r2, #50007	@ 0xc357
 801287e:	490f      	ldr	r1, [pc, #60]	@ (80128bc <udpServer_init+0x5c>)
 8012880:	4618      	mov	r0, r3
 8012882:	f7fd fac3 	bl	800fe0c <udp_bind>
 8012886:	4603      	mov	r3, r0
 8012888:	71fb      	strb	r3, [r7, #7]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 801288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d107      	bne.n	80128a2 <udpServer_init+0x42>
	   udp_recv(upcb, udp_receive_callback, NULL);
 8012892:	4b08      	ldr	r3, [pc, #32]	@ (80128b4 <udpServer_init+0x54>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2200      	movs	r2, #0
 8012898:	4909      	ldr	r1, [pc, #36]	@ (80128c0 <udpServer_init+0x60>)
 801289a:	4618      	mov	r0, r3
 801289c:	f7fd fb3e 	bl	800ff1c <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 80128a0:	e004      	b.n	80128ac <udpServer_init+0x4c>
	   udp_remove(upcb);
 80128a2:	4b04      	ldr	r3, [pc, #16]	@ (80128b4 <udpServer_init+0x54>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fd fb58 	bl	800ff5c <udp_remove>
}
 80128ac:	bf00      	nop
 80128ae:	3708      	adds	r7, #8
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	20008ba0 	.word	0x20008ba0
 80128b8:	20008b9e 	.word	0x20008b9e
 80128bc:	08016d20 	.word	0x08016d20
 80128c0:	0801275d 	.word	0x0801275d

080128c4 <test_adc>:
 * Perform ADC test.
 *
 * @param iterations Number of iterations to sample ADC.
 * @return 1 for success, 0 for failure.
 */
uint8_t test_adc(uint16_t iterations) {
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b086      	sub	sp, #24
 80128c8:	af02      	add	r7, sp, #8
 80128ca:	4603      	mov	r3, r0
 80128cc:	80fb      	strh	r3, [r7, #6]
    printf("Starting ADC Test with %u iterations...\r\n", iterations);
 80128ce:	88fb      	ldrh	r3, [r7, #6]
 80128d0:	4619      	mov	r1, r3
 80128d2:	483d      	ldr	r0, [pc, #244]	@ (80129c8 <test_adc+0x104>)
 80128d4:	f000 fb5a 	bl	8012f8c <iprintf>

    uint32_t adc_value = 0;
 80128d8:	2300      	movs	r3, #0
 80128da:	60bb      	str	r3, [r7, #8]
    uint8_t success = 1; // Assume success initially
 80128dc:	2301      	movs	r3, #1
 80128de:	73fb      	strb	r3, [r7, #15]

    // Check if the number of iterations exceeds known values
    if (iterations > sizeof(known_adc_values) / sizeof(known_adc_values[0])) {
 80128e0:	88fb      	ldrh	r3, [r7, #6]
 80128e2:	2b05      	cmp	r3, #5
 80128e4:	d907      	bls.n	80128f6 <test_adc+0x32>
        printf("Error: Too many iterations requested (%u). Maximum allowed is %u.\r\n",iterations, sizeof(known_adc_values) / sizeof(known_adc_values[0]));
 80128e6:	88fb      	ldrh	r3, [r7, #6]
 80128e8:	2205      	movs	r2, #5
 80128ea:	4619      	mov	r1, r3
 80128ec:	4837      	ldr	r0, [pc, #220]	@ (80129cc <test_adc+0x108>)
 80128ee:	f000 fb4d 	bl	8012f8c <iprintf>
        return 0xFF; // Failure
 80128f2:	23ff      	movs	r3, #255	@ 0xff
 80128f4:	e063      	b.n	80129be <test_adc+0xfa>
    }

    for (uint16_t i = 0; i < iterations; i++) {
 80128f6:	2300      	movs	r3, #0
 80128f8:	81bb      	strh	r3, [r7, #12]
 80128fa:	e04f      	b.n	801299c <test_adc+0xd8>
        // Start ADC conversion
        HAL_ADC_Start(&hadc1);
 80128fc:	4834      	ldr	r0, [pc, #208]	@ (80129d0 <test_adc+0x10c>)
 80128fe:	f7ee ff8f 	bl	8001820 <HAL_ADC_Start>

        // Wait for ADC conversion to complete
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8012902:	2164      	movs	r1, #100	@ 0x64
 8012904:	4832      	ldr	r0, [pc, #200]	@ (80129d0 <test_adc+0x10c>)
 8012906:	f7ef f88d 	bl	8001a24 <HAL_ADC_PollForConversion>
 801290a:	4603      	mov	r3, r0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d131      	bne.n	8012974 <test_adc+0xb0>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8012910:	482f      	ldr	r0, [pc, #188]	@ (80129d0 <test_adc+0x10c>)
 8012912:	f7ef fa22 	bl	8001d5a <HAL_ADC_GetValue>
 8012916:	60b8      	str	r0, [r7, #8]

            printf("Iteration %u: ADC Value = %lu (Expected: %lu ± %lu)\r\n",
 8012918:	89bb      	ldrh	r3, [r7, #12]
 801291a:	1c59      	adds	r1, r3, #1
 801291c:	89bb      	ldrh	r3, [r7, #12]
                   i + 1, adc_value, known_adc_values[i], acceptable_offset);
 801291e:	4a2d      	ldr	r2, [pc, #180]	@ (80129d4 <test_adc+0x110>)
 8012920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            printf("Iteration %u: ADC Value = %lu (Expected: %lu ± %lu)\r\n",
 8012924:	2296      	movs	r2, #150	@ 0x96
 8012926:	9200      	str	r2, [sp, #0]
 8012928:	68ba      	ldr	r2, [r7, #8]
 801292a:	482b      	ldr	r0, [pc, #172]	@ (80129d8 <test_adc+0x114>)
 801292c:	f000 fb2e 	bl	8012f8c <iprintf>

            // Validate the ADC value within the acceptable range
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 8012930:	89bb      	ldrh	r3, [r7, #12]
 8012932:	4a28      	ldr	r2, [pc, #160]	@ (80129d4 <test_adc+0x110>)
 8012934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012938:	2296      	movs	r2, #150	@ 0x96
 801293a:	1a9b      	subs	r3, r3, r2
 801293c:	68ba      	ldr	r2, [r7, #8]
 801293e:	429a      	cmp	r2, r3
 8012940:	d308      	bcc.n	8012954 <test_adc+0x90>
                adc_value > known_adc_values[i] + acceptable_offset) {
 8012942:	89bb      	ldrh	r3, [r7, #12]
 8012944:	4a23      	ldr	r2, [pc, #140]	@ (80129d4 <test_adc+0x110>)
 8012946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801294a:	2296      	movs	r2, #150	@ 0x96
 801294c:	4413      	add	r3, r2
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	429a      	cmp	r2, r3
 8012952:	d91a      	bls.n	801298a <test_adc+0xc6>
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 8012954:	89bb      	ldrh	r3, [r7, #12]
 8012956:	1c59      	adds	r1, r3, #1
 8012958:	89bb      	ldrh	r3, [r7, #12]
                       i + 1, known_adc_values[i], acceptable_offset, adc_value);
 801295a:	4a1e      	ldr	r2, [pc, #120]	@ (80129d4 <test_adc+0x110>)
 801295c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 8012960:	2096      	movs	r0, #150	@ 0x96
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	9300      	str	r3, [sp, #0]
 8012966:	4603      	mov	r3, r0
 8012968:	481c      	ldr	r0, [pc, #112]	@ (80129dc <test_adc+0x118>)
 801296a:	f000 fb0f 	bl	8012f8c <iprintf>
                success = 0; // Mark as failure
 801296e:	2300      	movs	r3, #0
 8012970:	73fb      	strb	r3, [r7, #15]
 8012972:	e00a      	b.n	801298a <test_adc+0xc6>
            }
        } else {
            printf("ADC conversion timeout on iteration %u.\r\n", i + 1);
 8012974:	89bb      	ldrh	r3, [r7, #12]
 8012976:	3301      	adds	r3, #1
 8012978:	4619      	mov	r1, r3
 801297a:	4819      	ldr	r0, [pc, #100]	@ (80129e0 <test_adc+0x11c>)
 801297c:	f000 fb06 	bl	8012f8c <iprintf>
            HAL_ADC_Stop(&hadc1);
 8012980:	4813      	ldr	r0, [pc, #76]	@ (80129d0 <test_adc+0x10c>)
 8012982:	f7ef f81b 	bl	80019bc <HAL_ADC_Stop>
            return 0xFF; // Failure
 8012986:	23ff      	movs	r3, #255	@ 0xff
 8012988:	e019      	b.n	80129be <test_adc+0xfa>
        }

        // Stop ADC conversion
        HAL_ADC_Stop(&hadc1);
 801298a:	4811      	ldr	r0, [pc, #68]	@ (80129d0 <test_adc+0x10c>)
 801298c:	f7ef f816 	bl	80019bc <HAL_ADC_Stop>

        // Add delay between iterations
        HAL_Delay(100);
 8012990:	2064      	movs	r0, #100	@ 0x64
 8012992:	f7ee fedd 	bl	8001750 <HAL_Delay>
    for (uint16_t i = 0; i < iterations; i++) {
 8012996:	89bb      	ldrh	r3, [r7, #12]
 8012998:	3301      	adds	r3, #1
 801299a:	81bb      	strh	r3, [r7, #12]
 801299c:	89ba      	ldrh	r2, [r7, #12]
 801299e:	88fb      	ldrh	r3, [r7, #6]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d3ab      	bcc.n	80128fc <test_adc+0x38>
    }

    if (success) {
 80129a4:	7bfb      	ldrb	r3, [r7, #15]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d005      	beq.n	80129b6 <test_adc+0xf2>
        printf("ADC Test Passed for all %u iterations.\r\n", iterations);
 80129aa:	88fb      	ldrh	r3, [r7, #6]
 80129ac:	4619      	mov	r1, r3
 80129ae:	480d      	ldr	r0, [pc, #52]	@ (80129e4 <test_adc+0x120>)
 80129b0:	f000 faec 	bl	8012f8c <iprintf>
 80129b4:	e002      	b.n	80129bc <test_adc+0xf8>
    } else {
        printf("ADC Test Failed.\r\n");
 80129b6:	480c      	ldr	r0, [pc, #48]	@ (80129e8 <test_adc+0x124>)
 80129b8:	f000 fb50 	bl	801305c <puts>
    }

    return 1;
 80129bc:	2301      	movs	r3, #1
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	08016948 	.word	0x08016948
 80129cc:	08016974 	.word	0x08016974
 80129d0:	200001e4 	.word	0x200001e4
 80129d4:	08016d34 	.word	0x08016d34
 80129d8:	080169b8 	.word	0x080169b8
 80129dc:	080169f0 	.word	0x080169f0
 80129e0:	08016a2c 	.word	0x08016a2c
 80129e4:	08016a58 	.word	0x08016a58
 80129e8:	08016a84 	.word	0x08016a84

080129ec <test_uart>:
volatile uint8_t Uart_5_ErrorCallback_Flag = 0;
volatile uint8_t Uart_2_ErrorCallback_Flag = 0;

volatile HAL_StatusTypeDef status2tx, status2rx, status5tx, status5rx;

uint8_t test_uart(const char* bit_pattern, uint8_t pattern_length, uint8_t iterations) {
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b0c4      	sub	sp, #272	@ 0x110
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80129f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80129fa:	6018      	str	r0, [r3, #0]
 80129fc:	4608      	mov	r0, r1
 80129fe:	4611      	mov	r1, r2
 8012a00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012a04:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8012a08:	4602      	mov	r2, r0
 8012a0a:	701a      	strb	r2, [r3, #0]
 8012a0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012a10:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8012a14:	460a      	mov	r2, r1
 8012a16:	701a      	strb	r2, [r3, #0]
    uint8_t recv_msg5_rx[128] = {0};
 8012a18:	2300      	movs	r3, #0
 8012a1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012a1e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8012a22:	227c      	movs	r2, #124	@ 0x7c
 8012a24:	2100      	movs	r1, #0
 8012a26:	4618      	mov	r0, r3
 8012a28:	f000 fc08 	bl	801323c <memset>
    uint8_t recv_msg2_rx[128] = {0};
 8012a2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012a34:	2200      	movs	r2, #0
 8012a36:	601a      	str	r2, [r3, #0]
 8012a38:	3304      	adds	r3, #4
 8012a3a:	227c      	movs	r2, #124	@ 0x7c
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f000 fbfc 	bl	801323c <memset>

    for (uint8_t i = 0; i < iterations; ++i) {
 8012a44:	2300      	movs	r3, #0
 8012a46:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8012a4a:	e117      	b.n	8012c7c <test_uart+0x290>
        printf("\nIteration %d:\r\n", i + 1);
 8012a4c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8012a50:	3301      	adds	r3, #1
 8012a52:	4619      	mov	r1, r3
 8012a54:	4893      	ldr	r0, [pc, #588]	@ (8012ca4 <test_uart+0x2b8>)
 8012a56:	f000 fa99 	bl	8012f8c <iprintf>

        uint32_t iteration_start_time = HAL_GetTick(); // Track total time for the iteration
 8012a5a:	f7ee fe6d 	bl	8001738 <HAL_GetTick>
 8012a5e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 8012a62:	e0ea      	b.n	8012c3a <test_uart+0x24e>
            // UART2 Transmission
            status2tx = HAL_UART_Transmit(UART_2, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 8012a64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012a68:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	b29b      	uxth	r3, r3
 8012a70:	3301      	adds	r3, #1
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012a78:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8012a7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012a80:	6809      	ldr	r1, [r1, #0]
 8012a82:	4889      	ldr	r0, [pc, #548]	@ (8012ca8 <test_uart+0x2bc>)
 8012a84:	f7f3 fa50 	bl	8005f28 <HAL_UART_Transmit>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	4b87      	ldr	r3, [pc, #540]	@ (8012cac <test_uart+0x2c0>)
 8012a8e:	701a      	strb	r2, [r3, #0]
            if (status2tx != HAL_OK) {
 8012a90:	4b86      	ldr	r3, [pc, #536]	@ (8012cac <test_uart+0x2c0>)
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d008      	beq.n	8012aac <test_uart+0xc0>
                printf("UART2 TX failed with status: %d\r\n", status2tx);
 8012a9a:	4b84      	ldr	r3, [pc, #528]	@ (8012cac <test_uart+0x2c0>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4883      	ldr	r0, [pc, #524]	@ (8012cb0 <test_uart+0x2c4>)
 8012aa4:	f000 fa72 	bl	8012f8c <iprintf>
                return 0xFF;
 8012aa8:	23ff      	movs	r3, #255	@ 0xff
 8012aaa:	e0f5      	b.n	8012c98 <test_uart+0x2ac>
            }
            HAL_Delay(100);
 8012aac:	2064      	movs	r0, #100	@ 0x64
 8012aae:	f7ee fe4f 	bl	8001750 <HAL_Delay>

            // UART5 Transmission
            status5tx = HAL_UART_Transmit(UART_5, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 8012ab2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012ab6:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	3301      	adds	r3, #1
 8012ac0:	b29a      	uxth	r2, r3
 8012ac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012ac6:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 8012aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012ace:	6809      	ldr	r1, [r1, #0]
 8012ad0:	4878      	ldr	r0, [pc, #480]	@ (8012cb4 <test_uart+0x2c8>)
 8012ad2:	f7f3 fa29 	bl	8005f28 <HAL_UART_Transmit>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	461a      	mov	r2, r3
 8012ada:	4b77      	ldr	r3, [pc, #476]	@ (8012cb8 <test_uart+0x2cc>)
 8012adc:	701a      	strb	r2, [r3, #0]
            if (status5tx != HAL_OK) {
 8012ade:	4b76      	ldr	r3, [pc, #472]	@ (8012cb8 <test_uart+0x2cc>)
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d008      	beq.n	8012afa <test_uart+0x10e>
                printf("UART5 TX failed with status: %d\r\n", status5tx);
 8012ae8:	4b73      	ldr	r3, [pc, #460]	@ (8012cb8 <test_uart+0x2cc>)
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	4619      	mov	r1, r3
 8012af0:	4872      	ldr	r0, [pc, #456]	@ (8012cbc <test_uart+0x2d0>)
 8012af2:	f000 fa4b 	bl	8012f8c <iprintf>
                return 0xFF;
 8012af6:	23ff      	movs	r3, #255	@ 0xff
 8012af8:	e0ce      	b.n	8012c98 <test_uart+0x2ac>
            }
            HAL_Delay(100);
 8012afa:	2064      	movs	r0, #100	@ 0x64
 8012afc:	f7ee fe28 	bl	8001750 <HAL_Delay>

            // UART5 Reception
            status5rx = HAL_UART_Receive_IT(UART_5, recv_msg5_rx, pattern_length + 1);
 8012b00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012b04:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	b29b      	uxth	r3, r3
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	b29a      	uxth	r2, r3
 8012b10:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8012b14:	4619      	mov	r1, r3
 8012b16:	4867      	ldr	r0, [pc, #412]	@ (8012cb4 <test_uart+0x2c8>)
 8012b18:	f7f3 fb4d 	bl	80061b6 <HAL_UART_Receive_IT>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	461a      	mov	r2, r3
 8012b20:	4b67      	ldr	r3, [pc, #412]	@ (8012cc0 <test_uart+0x2d4>)
 8012b22:	701a      	strb	r2, [r3, #0]
            if (status5rx != HAL_OK) {
 8012b24:	4b66      	ldr	r3, [pc, #408]	@ (8012cc0 <test_uart+0x2d4>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d008      	beq.n	8012b40 <test_uart+0x154>
                printf("UART5 RX failed with status: %d\r\n", status5rx);
 8012b2e:	4b64      	ldr	r3, [pc, #400]	@ (8012cc0 <test_uart+0x2d4>)
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	4619      	mov	r1, r3
 8012b36:	4863      	ldr	r0, [pc, #396]	@ (8012cc4 <test_uart+0x2d8>)
 8012b38:	f000 fa28 	bl	8012f8c <iprintf>
                return 0xFF;
 8012b3c:	23ff      	movs	r3, #255	@ 0xff
 8012b3e:	e0ab      	b.n	8012c98 <test_uart+0x2ac>
            }

            // UART2 Reception
            status2rx = HAL_UART_Receive_IT(UART_2, recv_msg2_rx, pattern_length + 1);
 8012b40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012b44:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	f107 0308 	add.w	r3, r7, #8
 8012b54:	4619      	mov	r1, r3
 8012b56:	4854      	ldr	r0, [pc, #336]	@ (8012ca8 <test_uart+0x2bc>)
 8012b58:	f7f3 fb2d 	bl	80061b6 <HAL_UART_Receive_IT>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	461a      	mov	r2, r3
 8012b60:	4b59      	ldr	r3, [pc, #356]	@ (8012cc8 <test_uart+0x2dc>)
 8012b62:	701a      	strb	r2, [r3, #0]
            if (status2rx != HAL_OK) {
 8012b64:	4b58      	ldr	r3, [pc, #352]	@ (8012cc8 <test_uart+0x2dc>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d008      	beq.n	8012b80 <test_uart+0x194>
                printf("UART2 RX failed with status: %d\r\n", status2rx);
 8012b6e:	4b56      	ldr	r3, [pc, #344]	@ (8012cc8 <test_uart+0x2dc>)
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	4619      	mov	r1, r3
 8012b76:	4855      	ldr	r0, [pc, #340]	@ (8012ccc <test_uart+0x2e0>)
 8012b78:	f000 fa08 	bl	8012f8c <iprintf>
                return 0xFF;
 8012b7c:	23ff      	movs	r3, #255	@ 0xff
 8012b7e:	e08b      	b.n	8012c98 <test_uart+0x2ac>
            }

            // Error Handling and Data Verification
            if (Uart_5_ErrorCallback_Flag == 1 || Uart_2_ErrorCallback_Flag == 1) {
 8012b80:	4b53      	ldr	r3, [pc, #332]	@ (8012cd0 <test_uart+0x2e4>)
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	2b01      	cmp	r3, #1
 8012b88:	d004      	beq.n	8012b94 <test_uart+0x1a8>
 8012b8a:	4b52      	ldr	r3, [pc, #328]	@ (8012cd4 <test_uart+0x2e8>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d109      	bne.n	8012ba8 <test_uart+0x1bc>
                printf("Error detected in UART5 or UART2\r\n");
 8012b94:	4850      	ldr	r0, [pc, #320]	@ (8012cd8 <test_uart+0x2ec>)
 8012b96:	f000 fa61 	bl	801305c <puts>
                Uart_5_ErrorCallback_Flag = 0;
 8012b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8012cd0 <test_uart+0x2e4>)
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	701a      	strb	r2, [r3, #0]
                Uart_2_ErrorCallback_Flag = 0;
 8012ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8012cd4 <test_uart+0x2e8>)
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	701a      	strb	r2, [r3, #0]
 8012ba6:	e048      	b.n	8012c3a <test_uart+0x24e>
            } else {
                if (UART_5_RX_Complete_Callback_Flag == 1) {
 8012ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8012cdc <test_uart+0x2f0>)
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	2b01      	cmp	r3, #1
 8012bb0:	d108      	bne.n	8012bc4 <test_uart+0x1d8>
                    printf("Received message by UART5 RX: %s\r\n", recv_msg5_rx);
 8012bb2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	4849      	ldr	r0, [pc, #292]	@ (8012ce0 <test_uart+0x2f4>)
 8012bba:	f000 f9e7 	bl	8012f8c <iprintf>
                    UART_5_RX_Complete_Callback_Flag = 0;
 8012bbe:	4b47      	ldr	r3, [pc, #284]	@ (8012cdc <test_uart+0x2f0>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	701a      	strb	r2, [r3, #0]
                }
                if (UART_2_RX_Complete_Callback_Flag == 1) {
 8012bc4:	4b47      	ldr	r3, [pc, #284]	@ (8012ce4 <test_uart+0x2f8>)
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d108      	bne.n	8012be0 <test_uart+0x1f4>
                    printf("Received message by UART2 RX: %s\r\n", recv_msg2_rx);
 8012bce:	f107 0308 	add.w	r3, r7, #8
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	4844      	ldr	r0, [pc, #272]	@ (8012ce8 <test_uart+0x2fc>)
 8012bd6:	f000 f9d9 	bl	8012f8c <iprintf>
                    UART_2_RX_Complete_Callback_Flag = 0;
 8012bda:	4b42      	ldr	r3, [pc, #264]	@ (8012ce4 <test_uart+0x2f8>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	701a      	strb	r2, [r3, #0]
                }

                // Compare received data
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 8012be0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012be4:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8012be8:	781a      	ldrb	r2, [r3, #0]
 8012bea:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8012bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012bf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012bf6:	6818      	ldr	r0, [r3, #0]
 8012bf8:	f000 fb28 	bl	801324c <strncmp>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d118      	bne.n	8012c34 <test_uart+0x248>
                    strncmp(bit_pattern, (char*)recv_msg2_rx, pattern_length) == 0) {
 8012c02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012c06:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8012c0a:	781a      	ldrb	r2, [r3, #0]
 8012c0c:	f107 0108 	add.w	r1, r7, #8
 8012c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012c14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	f000 fb17 	bl	801324c <strncmp>
 8012c1e:	4603      	mov	r3, r0
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d107      	bne.n	8012c34 <test_uart+0x248>
                    printf("Iteration %d passed\r\n", i + 1);
 8012c24:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8012c28:	3301      	adds	r3, #1
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	482f      	ldr	r0, [pc, #188]	@ (8012cec <test_uart+0x300>)
 8012c2e:	f000 f9ad 	bl	8012f8c <iprintf>
                    break; // Exit while loop once successful
 8012c32:	e00c      	b.n	8012c4e <test_uart+0x262>
                } else {
                    printf("Data mismatch detected. Retrying...\r\n");
 8012c34:	482e      	ldr	r0, [pc, #184]	@ (8012cf0 <test_uart+0x304>)
 8012c36:	f000 fa11 	bl	801305c <puts>
        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 8012c3a:	f7ee fd7d 	bl	8001738 <HAL_GetTick>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012c44:	1ad3      	subs	r3, r2, r3
 8012c46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012c4a:	f4ff af0b 	bcc.w	8012a64 <test_uart+0x78>
                }
            }
        }

        if (HAL_GetTick() - iteration_start_time >= SHORT_TIMEOUT) {
 8012c4e:	f7ee fd73 	bl	8001738 <HAL_GetTick>
 8012c52:	4602      	mov	r2, r0
 8012c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012c58:	1ad3      	subs	r3, r2, r3
 8012c5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012c5e:	d308      	bcc.n	8012c72 <test_uart+0x286>
            printf("Iteration %d failed due to timeout\r\n", i + 1);
 8012c60:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8012c64:	3301      	adds	r3, #1
 8012c66:	4619      	mov	r1, r3
 8012c68:	4822      	ldr	r0, [pc, #136]	@ (8012cf4 <test_uart+0x308>)
 8012c6a:	f000 f98f 	bl	8012f8c <iprintf>
            return 0xFF;
 8012c6e:	23ff      	movs	r3, #255	@ 0xff
 8012c70:	e012      	b.n	8012c98 <test_uart+0x2ac>
    for (uint8_t i = 0; i < iterations; ++i) {
 8012c72:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8012c76:	3301      	adds	r3, #1
 8012c78:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8012c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012c80:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8012c84:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	f4ff aede 	bcc.w	8012a4c <test_uart+0x60>
        }
    }

    printf("UART test complete\r\n");
 8012c90:	4819      	ldr	r0, [pc, #100]	@ (8012cf8 <test_uart+0x30c>)
 8012c92:	f000 f9e3 	bl	801305c <puts>
    return 1;
 8012c96:	2301      	movs	r3, #1
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	08016a98 	.word	0x08016a98
 8012ca8:	20000314 	.word	0x20000314
 8012cac:	20008ba8 	.word	0x20008ba8
 8012cb0:	08016aac 	.word	0x08016aac
 8012cb4:	2000028c 	.word	0x2000028c
 8012cb8:	20008baa 	.word	0x20008baa
 8012cbc:	08016ad0 	.word	0x08016ad0
 8012cc0:	20008bab 	.word	0x20008bab
 8012cc4:	08016af4 	.word	0x08016af4
 8012cc8:	20008ba9 	.word	0x20008ba9
 8012ccc:	08016b18 	.word	0x08016b18
 8012cd0:	20008ba6 	.word	0x20008ba6
 8012cd4:	20008ba7 	.word	0x20008ba7
 8012cd8:	08016b3c 	.word	0x08016b3c
 8012cdc:	20008ba4 	.word	0x20008ba4
 8012ce0:	08016b60 	.word	0x08016b60
 8012ce4:	20008ba5 	.word	0x20008ba5
 8012ce8:	08016b84 	.word	0x08016b84
 8012cec:	08016ba8 	.word	0x08016ba8
 8012cf0:	08016bc0 	.word	0x08016bc0
 8012cf4:	08016be8 	.word	0x08016be8
 8012cf8:	08016c10 	.word	0x08016c10

08012cfc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8012cfc:	b480      	push	{r7}
 8012cfe:	b083      	sub	sp, #12
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	4a0a      	ldr	r2, [pc, #40]	@ (8012d34 <HAL_UART_RxCpltCallback+0x38>)
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d103      	bne.n	8012d16 <HAL_UART_RxCpltCallback+0x1a>
        UART_5_RX_Complete_Callback_Flag = 1;
 8012d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8012d38 <HAL_UART_RxCpltCallback+0x3c>)
 8012d10:	2201      	movs	r2, #1
 8012d12:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        UART_2_RX_Complete_Callback_Flag = 1;
    }
}
 8012d14:	e007      	b.n	8012d26 <HAL_UART_RxCpltCallback+0x2a>
    } else if (huart->Instance == USART2) {
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4a08      	ldr	r2, [pc, #32]	@ (8012d3c <HAL_UART_RxCpltCallback+0x40>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d102      	bne.n	8012d26 <HAL_UART_RxCpltCallback+0x2a>
        UART_2_RX_Complete_Callback_Flag = 1;
 8012d20:	4b07      	ldr	r3, [pc, #28]	@ (8012d40 <HAL_UART_RxCpltCallback+0x44>)
 8012d22:	2201      	movs	r2, #1
 8012d24:	701a      	strb	r2, [r3, #0]
}
 8012d26:	bf00      	nop
 8012d28:	370c      	adds	r7, #12
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr
 8012d32:	bf00      	nop
 8012d34:	40005000 	.word	0x40005000
 8012d38:	20008ba4 	.word	0x20008ba4
 8012d3c:	40004400 	.word	0x40004400
 8012d40:	20008ba5 	.word	0x20008ba5

08012d44 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4a0a      	ldr	r2, [pc, #40]	@ (8012d7c <HAL_UART_ErrorCallback+0x38>)
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d103      	bne.n	8012d5e <HAL_UART_ErrorCallback+0x1a>
        Uart_5_ErrorCallback_Flag = 1;
 8012d56:	4b0a      	ldr	r3, [pc, #40]	@ (8012d80 <HAL_UART_ErrorCallback+0x3c>)
 8012d58:	2201      	movs	r2, #1
 8012d5a:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        Uart_2_ErrorCallback_Flag = 1;
    }
}
 8012d5c:	e007      	b.n	8012d6e <HAL_UART_ErrorCallback+0x2a>
    } else if (huart->Instance == USART2) {
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	4a08      	ldr	r2, [pc, #32]	@ (8012d84 <HAL_UART_ErrorCallback+0x40>)
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d102      	bne.n	8012d6e <HAL_UART_ErrorCallback+0x2a>
        Uart_2_ErrorCallback_Flag = 1;
 8012d68:	4b07      	ldr	r3, [pc, #28]	@ (8012d88 <HAL_UART_ErrorCallback+0x44>)
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	701a      	strb	r2, [r3, #0]
}
 8012d6e:	bf00      	nop
 8012d70:	370c      	adds	r7, #12
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr
 8012d7a:	bf00      	nop
 8012d7c:	40005000 	.word	0x40005000
 8012d80:	20008ba6 	.word	0x20008ba6
 8012d84:	40004400 	.word	0x40004400
 8012d88:	20008ba7 	.word	0x20008ba7

08012d8c <rand>:
 8012d8c:	4b16      	ldr	r3, [pc, #88]	@ (8012de8 <rand+0x5c>)
 8012d8e:	b510      	push	{r4, lr}
 8012d90:	681c      	ldr	r4, [r3, #0]
 8012d92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d94:	b9b3      	cbnz	r3, 8012dc4 <rand+0x38>
 8012d96:	2018      	movs	r0, #24
 8012d98:	f000 fb4e 	bl	8013438 <malloc>
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	6320      	str	r0, [r4, #48]	@ 0x30
 8012da0:	b920      	cbnz	r0, 8012dac <rand+0x20>
 8012da2:	4b12      	ldr	r3, [pc, #72]	@ (8012dec <rand+0x60>)
 8012da4:	4812      	ldr	r0, [pc, #72]	@ (8012df0 <rand+0x64>)
 8012da6:	2152      	movs	r1, #82	@ 0x52
 8012da8:	f000 fade 	bl	8013368 <__assert_func>
 8012dac:	4911      	ldr	r1, [pc, #68]	@ (8012df4 <rand+0x68>)
 8012dae:	4b12      	ldr	r3, [pc, #72]	@ (8012df8 <rand+0x6c>)
 8012db0:	e9c0 1300 	strd	r1, r3, [r0]
 8012db4:	4b11      	ldr	r3, [pc, #68]	@ (8012dfc <rand+0x70>)
 8012db6:	6083      	str	r3, [r0, #8]
 8012db8:	230b      	movs	r3, #11
 8012dba:	8183      	strh	r3, [r0, #12]
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	2001      	movs	r0, #1
 8012dc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012dc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012dc6:	480e      	ldr	r0, [pc, #56]	@ (8012e00 <rand+0x74>)
 8012dc8:	690b      	ldr	r3, [r1, #16]
 8012dca:	694c      	ldr	r4, [r1, #20]
 8012dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8012e04 <rand+0x78>)
 8012dce:	4358      	muls	r0, r3
 8012dd0:	fb02 0004 	mla	r0, r2, r4, r0
 8012dd4:	fba3 3202 	umull	r3, r2, r3, r2
 8012dd8:	3301      	adds	r3, #1
 8012dda:	eb40 0002 	adc.w	r0, r0, r2
 8012dde:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012de2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012de6:	bd10      	pop	{r4, pc}
 8012de8:	20000038 	.word	0x20000038
 8012dec:	08016d48 	.word	0x08016d48
 8012df0:	08016d5f 	.word	0x08016d5f
 8012df4:	abcd330e 	.word	0xabcd330e
 8012df8:	e66d1234 	.word	0xe66d1234
 8012dfc:	0005deec 	.word	0x0005deec
 8012e00:	5851f42d 	.word	0x5851f42d
 8012e04:	4c957f2d 	.word	0x4c957f2d

08012e08 <std>:
 8012e08:	2300      	movs	r3, #0
 8012e0a:	b510      	push	{r4, lr}
 8012e0c:	4604      	mov	r4, r0
 8012e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8012e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e16:	6083      	str	r3, [r0, #8]
 8012e18:	8181      	strh	r1, [r0, #12]
 8012e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012e1c:	81c2      	strh	r2, [r0, #14]
 8012e1e:	6183      	str	r3, [r0, #24]
 8012e20:	4619      	mov	r1, r3
 8012e22:	2208      	movs	r2, #8
 8012e24:	305c      	adds	r0, #92	@ 0x5c
 8012e26:	f000 fa09 	bl	801323c <memset>
 8012e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012e60 <std+0x58>)
 8012e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012e64 <std+0x5c>)
 8012e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012e32:	4b0d      	ldr	r3, [pc, #52]	@ (8012e68 <std+0x60>)
 8012e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012e36:	4b0d      	ldr	r3, [pc, #52]	@ (8012e6c <std+0x64>)
 8012e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8012e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012e70 <std+0x68>)
 8012e3c:	6224      	str	r4, [r4, #32]
 8012e3e:	429c      	cmp	r4, r3
 8012e40:	d006      	beq.n	8012e50 <std+0x48>
 8012e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012e46:	4294      	cmp	r4, r2
 8012e48:	d002      	beq.n	8012e50 <std+0x48>
 8012e4a:	33d0      	adds	r3, #208	@ 0xd0
 8012e4c:	429c      	cmp	r4, r3
 8012e4e:	d105      	bne.n	8012e5c <std+0x54>
 8012e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e58:	f000 ba74 	b.w	8013344 <__retarget_lock_init_recursive>
 8012e5c:	bd10      	pop	{r4, pc}
 8012e5e:	bf00      	nop
 8012e60:	0801306d 	.word	0x0801306d
 8012e64:	0801308f 	.word	0x0801308f
 8012e68:	080130c7 	.word	0x080130c7
 8012e6c:	080130eb 	.word	0x080130eb
 8012e70:	20008bac 	.word	0x20008bac

08012e74 <stdio_exit_handler>:
 8012e74:	4a02      	ldr	r2, [pc, #8]	@ (8012e80 <stdio_exit_handler+0xc>)
 8012e76:	4903      	ldr	r1, [pc, #12]	@ (8012e84 <stdio_exit_handler+0x10>)
 8012e78:	4803      	ldr	r0, [pc, #12]	@ (8012e88 <stdio_exit_handler+0x14>)
 8012e7a:	f000 b869 	b.w	8012f50 <_fwalk_sglue>
 8012e7e:	bf00      	nop
 8012e80:	2000002c 	.word	0x2000002c
 8012e84:	08013c4d 	.word	0x08013c4d
 8012e88:	2000003c 	.word	0x2000003c

08012e8c <cleanup_stdio>:
 8012e8c:	6841      	ldr	r1, [r0, #4]
 8012e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8012ec0 <cleanup_stdio+0x34>)
 8012e90:	4299      	cmp	r1, r3
 8012e92:	b510      	push	{r4, lr}
 8012e94:	4604      	mov	r4, r0
 8012e96:	d001      	beq.n	8012e9c <cleanup_stdio+0x10>
 8012e98:	f000 fed8 	bl	8013c4c <_fflush_r>
 8012e9c:	68a1      	ldr	r1, [r4, #8]
 8012e9e:	4b09      	ldr	r3, [pc, #36]	@ (8012ec4 <cleanup_stdio+0x38>)
 8012ea0:	4299      	cmp	r1, r3
 8012ea2:	d002      	beq.n	8012eaa <cleanup_stdio+0x1e>
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f000 fed1 	bl	8013c4c <_fflush_r>
 8012eaa:	68e1      	ldr	r1, [r4, #12]
 8012eac:	4b06      	ldr	r3, [pc, #24]	@ (8012ec8 <cleanup_stdio+0x3c>)
 8012eae:	4299      	cmp	r1, r3
 8012eb0:	d004      	beq.n	8012ebc <cleanup_stdio+0x30>
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eb8:	f000 bec8 	b.w	8013c4c <_fflush_r>
 8012ebc:	bd10      	pop	{r4, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20008bac 	.word	0x20008bac
 8012ec4:	20008c14 	.word	0x20008c14
 8012ec8:	20008c7c 	.word	0x20008c7c

08012ecc <global_stdio_init.part.0>:
 8012ecc:	b510      	push	{r4, lr}
 8012ece:	4b0b      	ldr	r3, [pc, #44]	@ (8012efc <global_stdio_init.part.0+0x30>)
 8012ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8012f00 <global_stdio_init.part.0+0x34>)
 8012ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8012f04 <global_stdio_init.part.0+0x38>)
 8012ed4:	601a      	str	r2, [r3, #0]
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	2200      	movs	r2, #0
 8012eda:	2104      	movs	r1, #4
 8012edc:	f7ff ff94 	bl	8012e08 <std>
 8012ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	2109      	movs	r1, #9
 8012ee8:	f7ff ff8e 	bl	8012e08 <std>
 8012eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ef0:	2202      	movs	r2, #2
 8012ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ef6:	2112      	movs	r1, #18
 8012ef8:	f7ff bf86 	b.w	8012e08 <std>
 8012efc:	20008ce4 	.word	0x20008ce4
 8012f00:	20008bac 	.word	0x20008bac
 8012f04:	08012e75 	.word	0x08012e75

08012f08 <__sfp_lock_acquire>:
 8012f08:	4801      	ldr	r0, [pc, #4]	@ (8012f10 <__sfp_lock_acquire+0x8>)
 8012f0a:	f000 ba1c 	b.w	8013346 <__retarget_lock_acquire_recursive>
 8012f0e:	bf00      	nop
 8012f10:	20008ced 	.word	0x20008ced

08012f14 <__sfp_lock_release>:
 8012f14:	4801      	ldr	r0, [pc, #4]	@ (8012f1c <__sfp_lock_release+0x8>)
 8012f16:	f000 ba17 	b.w	8013348 <__retarget_lock_release_recursive>
 8012f1a:	bf00      	nop
 8012f1c:	20008ced 	.word	0x20008ced

08012f20 <__sinit>:
 8012f20:	b510      	push	{r4, lr}
 8012f22:	4604      	mov	r4, r0
 8012f24:	f7ff fff0 	bl	8012f08 <__sfp_lock_acquire>
 8012f28:	6a23      	ldr	r3, [r4, #32]
 8012f2a:	b11b      	cbz	r3, 8012f34 <__sinit+0x14>
 8012f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f30:	f7ff bff0 	b.w	8012f14 <__sfp_lock_release>
 8012f34:	4b04      	ldr	r3, [pc, #16]	@ (8012f48 <__sinit+0x28>)
 8012f36:	6223      	str	r3, [r4, #32]
 8012f38:	4b04      	ldr	r3, [pc, #16]	@ (8012f4c <__sinit+0x2c>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d1f5      	bne.n	8012f2c <__sinit+0xc>
 8012f40:	f7ff ffc4 	bl	8012ecc <global_stdio_init.part.0>
 8012f44:	e7f2      	b.n	8012f2c <__sinit+0xc>
 8012f46:	bf00      	nop
 8012f48:	08012e8d 	.word	0x08012e8d
 8012f4c:	20008ce4 	.word	0x20008ce4

08012f50 <_fwalk_sglue>:
 8012f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f54:	4607      	mov	r7, r0
 8012f56:	4688      	mov	r8, r1
 8012f58:	4614      	mov	r4, r2
 8012f5a:	2600      	movs	r6, #0
 8012f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f60:	f1b9 0901 	subs.w	r9, r9, #1
 8012f64:	d505      	bpl.n	8012f72 <_fwalk_sglue+0x22>
 8012f66:	6824      	ldr	r4, [r4, #0]
 8012f68:	2c00      	cmp	r4, #0
 8012f6a:	d1f7      	bne.n	8012f5c <_fwalk_sglue+0xc>
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f72:	89ab      	ldrh	r3, [r5, #12]
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	d907      	bls.n	8012f88 <_fwalk_sglue+0x38>
 8012f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	d003      	beq.n	8012f88 <_fwalk_sglue+0x38>
 8012f80:	4629      	mov	r1, r5
 8012f82:	4638      	mov	r0, r7
 8012f84:	47c0      	blx	r8
 8012f86:	4306      	orrs	r6, r0
 8012f88:	3568      	adds	r5, #104	@ 0x68
 8012f8a:	e7e9      	b.n	8012f60 <_fwalk_sglue+0x10>

08012f8c <iprintf>:
 8012f8c:	b40f      	push	{r0, r1, r2, r3}
 8012f8e:	b507      	push	{r0, r1, r2, lr}
 8012f90:	4906      	ldr	r1, [pc, #24]	@ (8012fac <iprintf+0x20>)
 8012f92:	ab04      	add	r3, sp, #16
 8012f94:	6808      	ldr	r0, [r1, #0]
 8012f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f9a:	6881      	ldr	r1, [r0, #8]
 8012f9c:	9301      	str	r3, [sp, #4]
 8012f9e:	f000 fb2b 	bl	80135f8 <_vfiprintf_r>
 8012fa2:	b003      	add	sp, #12
 8012fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fa8:	b004      	add	sp, #16
 8012faa:	4770      	bx	lr
 8012fac:	20000038 	.word	0x20000038

08012fb0 <_puts_r>:
 8012fb0:	6a03      	ldr	r3, [r0, #32]
 8012fb2:	b570      	push	{r4, r5, r6, lr}
 8012fb4:	6884      	ldr	r4, [r0, #8]
 8012fb6:	4605      	mov	r5, r0
 8012fb8:	460e      	mov	r6, r1
 8012fba:	b90b      	cbnz	r3, 8012fc0 <_puts_r+0x10>
 8012fbc:	f7ff ffb0 	bl	8012f20 <__sinit>
 8012fc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012fc2:	07db      	lsls	r3, r3, #31
 8012fc4:	d405      	bmi.n	8012fd2 <_puts_r+0x22>
 8012fc6:	89a3      	ldrh	r3, [r4, #12]
 8012fc8:	0598      	lsls	r0, r3, #22
 8012fca:	d402      	bmi.n	8012fd2 <_puts_r+0x22>
 8012fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fce:	f000 f9ba 	bl	8013346 <__retarget_lock_acquire_recursive>
 8012fd2:	89a3      	ldrh	r3, [r4, #12]
 8012fd4:	0719      	lsls	r1, r3, #28
 8012fd6:	d502      	bpl.n	8012fde <_puts_r+0x2e>
 8012fd8:	6923      	ldr	r3, [r4, #16]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d135      	bne.n	801304a <_puts_r+0x9a>
 8012fde:	4621      	mov	r1, r4
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	f000 f8c5 	bl	8013170 <__swsetup_r>
 8012fe6:	b380      	cbz	r0, 801304a <_puts_r+0x9a>
 8012fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8012fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012fee:	07da      	lsls	r2, r3, #31
 8012ff0:	d405      	bmi.n	8012ffe <_puts_r+0x4e>
 8012ff2:	89a3      	ldrh	r3, [r4, #12]
 8012ff4:	059b      	lsls	r3, r3, #22
 8012ff6:	d402      	bmi.n	8012ffe <_puts_r+0x4e>
 8012ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ffa:	f000 f9a5 	bl	8013348 <__retarget_lock_release_recursive>
 8012ffe:	4628      	mov	r0, r5
 8013000:	bd70      	pop	{r4, r5, r6, pc}
 8013002:	2b00      	cmp	r3, #0
 8013004:	da04      	bge.n	8013010 <_puts_r+0x60>
 8013006:	69a2      	ldr	r2, [r4, #24]
 8013008:	429a      	cmp	r2, r3
 801300a:	dc17      	bgt.n	801303c <_puts_r+0x8c>
 801300c:	290a      	cmp	r1, #10
 801300e:	d015      	beq.n	801303c <_puts_r+0x8c>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	1c5a      	adds	r2, r3, #1
 8013014:	6022      	str	r2, [r4, #0]
 8013016:	7019      	strb	r1, [r3, #0]
 8013018:	68a3      	ldr	r3, [r4, #8]
 801301a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801301e:	3b01      	subs	r3, #1
 8013020:	60a3      	str	r3, [r4, #8]
 8013022:	2900      	cmp	r1, #0
 8013024:	d1ed      	bne.n	8013002 <_puts_r+0x52>
 8013026:	2b00      	cmp	r3, #0
 8013028:	da11      	bge.n	801304e <_puts_r+0x9e>
 801302a:	4622      	mov	r2, r4
 801302c:	210a      	movs	r1, #10
 801302e:	4628      	mov	r0, r5
 8013030:	f000 f85f 	bl	80130f2 <__swbuf_r>
 8013034:	3001      	adds	r0, #1
 8013036:	d0d7      	beq.n	8012fe8 <_puts_r+0x38>
 8013038:	250a      	movs	r5, #10
 801303a:	e7d7      	b.n	8012fec <_puts_r+0x3c>
 801303c:	4622      	mov	r2, r4
 801303e:	4628      	mov	r0, r5
 8013040:	f000 f857 	bl	80130f2 <__swbuf_r>
 8013044:	3001      	adds	r0, #1
 8013046:	d1e7      	bne.n	8013018 <_puts_r+0x68>
 8013048:	e7ce      	b.n	8012fe8 <_puts_r+0x38>
 801304a:	3e01      	subs	r6, #1
 801304c:	e7e4      	b.n	8013018 <_puts_r+0x68>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	1c5a      	adds	r2, r3, #1
 8013052:	6022      	str	r2, [r4, #0]
 8013054:	220a      	movs	r2, #10
 8013056:	701a      	strb	r2, [r3, #0]
 8013058:	e7ee      	b.n	8013038 <_puts_r+0x88>
	...

0801305c <puts>:
 801305c:	4b02      	ldr	r3, [pc, #8]	@ (8013068 <puts+0xc>)
 801305e:	4601      	mov	r1, r0
 8013060:	6818      	ldr	r0, [r3, #0]
 8013062:	f7ff bfa5 	b.w	8012fb0 <_puts_r>
 8013066:	bf00      	nop
 8013068:	20000038 	.word	0x20000038

0801306c <__sread>:
 801306c:	b510      	push	{r4, lr}
 801306e:	460c      	mov	r4, r1
 8013070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013074:	f000 f91e 	bl	80132b4 <_read_r>
 8013078:	2800      	cmp	r0, #0
 801307a:	bfab      	itete	ge
 801307c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801307e:	89a3      	ldrhlt	r3, [r4, #12]
 8013080:	181b      	addge	r3, r3, r0
 8013082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013086:	bfac      	ite	ge
 8013088:	6563      	strge	r3, [r4, #84]	@ 0x54
 801308a:	81a3      	strhlt	r3, [r4, #12]
 801308c:	bd10      	pop	{r4, pc}

0801308e <__swrite>:
 801308e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013092:	461f      	mov	r7, r3
 8013094:	898b      	ldrh	r3, [r1, #12]
 8013096:	05db      	lsls	r3, r3, #23
 8013098:	4605      	mov	r5, r0
 801309a:	460c      	mov	r4, r1
 801309c:	4616      	mov	r6, r2
 801309e:	d505      	bpl.n	80130ac <__swrite+0x1e>
 80130a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130a4:	2302      	movs	r3, #2
 80130a6:	2200      	movs	r2, #0
 80130a8:	f000 f8f2 	bl	8013290 <_lseek_r>
 80130ac:	89a3      	ldrh	r3, [r4, #12]
 80130ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80130b6:	81a3      	strh	r3, [r4, #12]
 80130b8:	4632      	mov	r2, r6
 80130ba:	463b      	mov	r3, r7
 80130bc:	4628      	mov	r0, r5
 80130be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130c2:	f000 b909 	b.w	80132d8 <_write_r>

080130c6 <__sseek>:
 80130c6:	b510      	push	{r4, lr}
 80130c8:	460c      	mov	r4, r1
 80130ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130ce:	f000 f8df 	bl	8013290 <_lseek_r>
 80130d2:	1c43      	adds	r3, r0, #1
 80130d4:	89a3      	ldrh	r3, [r4, #12]
 80130d6:	bf15      	itete	ne
 80130d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80130da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80130de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80130e2:	81a3      	strheq	r3, [r4, #12]
 80130e4:	bf18      	it	ne
 80130e6:	81a3      	strhne	r3, [r4, #12]
 80130e8:	bd10      	pop	{r4, pc}

080130ea <__sclose>:
 80130ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130ee:	f000 b8bf 	b.w	8013270 <_close_r>

080130f2 <__swbuf_r>:
 80130f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f4:	460e      	mov	r6, r1
 80130f6:	4614      	mov	r4, r2
 80130f8:	4605      	mov	r5, r0
 80130fa:	b118      	cbz	r0, 8013104 <__swbuf_r+0x12>
 80130fc:	6a03      	ldr	r3, [r0, #32]
 80130fe:	b90b      	cbnz	r3, 8013104 <__swbuf_r+0x12>
 8013100:	f7ff ff0e 	bl	8012f20 <__sinit>
 8013104:	69a3      	ldr	r3, [r4, #24]
 8013106:	60a3      	str	r3, [r4, #8]
 8013108:	89a3      	ldrh	r3, [r4, #12]
 801310a:	071a      	lsls	r2, r3, #28
 801310c:	d501      	bpl.n	8013112 <__swbuf_r+0x20>
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	b943      	cbnz	r3, 8013124 <__swbuf_r+0x32>
 8013112:	4621      	mov	r1, r4
 8013114:	4628      	mov	r0, r5
 8013116:	f000 f82b 	bl	8013170 <__swsetup_r>
 801311a:	b118      	cbz	r0, 8013124 <__swbuf_r+0x32>
 801311c:	f04f 37ff 	mov.w	r7, #4294967295
 8013120:	4638      	mov	r0, r7
 8013122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013124:	6823      	ldr	r3, [r4, #0]
 8013126:	6922      	ldr	r2, [r4, #16]
 8013128:	1a98      	subs	r0, r3, r2
 801312a:	6963      	ldr	r3, [r4, #20]
 801312c:	b2f6      	uxtb	r6, r6
 801312e:	4283      	cmp	r3, r0
 8013130:	4637      	mov	r7, r6
 8013132:	dc05      	bgt.n	8013140 <__swbuf_r+0x4e>
 8013134:	4621      	mov	r1, r4
 8013136:	4628      	mov	r0, r5
 8013138:	f000 fd88 	bl	8013c4c <_fflush_r>
 801313c:	2800      	cmp	r0, #0
 801313e:	d1ed      	bne.n	801311c <__swbuf_r+0x2a>
 8013140:	68a3      	ldr	r3, [r4, #8]
 8013142:	3b01      	subs	r3, #1
 8013144:	60a3      	str	r3, [r4, #8]
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	1c5a      	adds	r2, r3, #1
 801314a:	6022      	str	r2, [r4, #0]
 801314c:	701e      	strb	r6, [r3, #0]
 801314e:	6962      	ldr	r2, [r4, #20]
 8013150:	1c43      	adds	r3, r0, #1
 8013152:	429a      	cmp	r2, r3
 8013154:	d004      	beq.n	8013160 <__swbuf_r+0x6e>
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	07db      	lsls	r3, r3, #31
 801315a:	d5e1      	bpl.n	8013120 <__swbuf_r+0x2e>
 801315c:	2e0a      	cmp	r6, #10
 801315e:	d1df      	bne.n	8013120 <__swbuf_r+0x2e>
 8013160:	4621      	mov	r1, r4
 8013162:	4628      	mov	r0, r5
 8013164:	f000 fd72 	bl	8013c4c <_fflush_r>
 8013168:	2800      	cmp	r0, #0
 801316a:	d0d9      	beq.n	8013120 <__swbuf_r+0x2e>
 801316c:	e7d6      	b.n	801311c <__swbuf_r+0x2a>
	...

08013170 <__swsetup_r>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4b29      	ldr	r3, [pc, #164]	@ (8013218 <__swsetup_r+0xa8>)
 8013174:	4605      	mov	r5, r0
 8013176:	6818      	ldr	r0, [r3, #0]
 8013178:	460c      	mov	r4, r1
 801317a:	b118      	cbz	r0, 8013184 <__swsetup_r+0x14>
 801317c:	6a03      	ldr	r3, [r0, #32]
 801317e:	b90b      	cbnz	r3, 8013184 <__swsetup_r+0x14>
 8013180:	f7ff fece 	bl	8012f20 <__sinit>
 8013184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013188:	0719      	lsls	r1, r3, #28
 801318a:	d422      	bmi.n	80131d2 <__swsetup_r+0x62>
 801318c:	06da      	lsls	r2, r3, #27
 801318e:	d407      	bmi.n	80131a0 <__swsetup_r+0x30>
 8013190:	2209      	movs	r2, #9
 8013192:	602a      	str	r2, [r5, #0]
 8013194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013198:	81a3      	strh	r3, [r4, #12]
 801319a:	f04f 30ff 	mov.w	r0, #4294967295
 801319e:	e033      	b.n	8013208 <__swsetup_r+0x98>
 80131a0:	0758      	lsls	r0, r3, #29
 80131a2:	d512      	bpl.n	80131ca <__swsetup_r+0x5a>
 80131a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80131a6:	b141      	cbz	r1, 80131ba <__swsetup_r+0x4a>
 80131a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80131ac:	4299      	cmp	r1, r3
 80131ae:	d002      	beq.n	80131b6 <__swsetup_r+0x46>
 80131b0:	4628      	mov	r0, r5
 80131b2:	f000 f8f7 	bl	80133a4 <_free_r>
 80131b6:	2300      	movs	r3, #0
 80131b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80131c0:	81a3      	strh	r3, [r4, #12]
 80131c2:	2300      	movs	r3, #0
 80131c4:	6063      	str	r3, [r4, #4]
 80131c6:	6923      	ldr	r3, [r4, #16]
 80131c8:	6023      	str	r3, [r4, #0]
 80131ca:	89a3      	ldrh	r3, [r4, #12]
 80131cc:	f043 0308 	orr.w	r3, r3, #8
 80131d0:	81a3      	strh	r3, [r4, #12]
 80131d2:	6923      	ldr	r3, [r4, #16]
 80131d4:	b94b      	cbnz	r3, 80131ea <__swsetup_r+0x7a>
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80131dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80131e0:	d003      	beq.n	80131ea <__swsetup_r+0x7a>
 80131e2:	4621      	mov	r1, r4
 80131e4:	4628      	mov	r0, r5
 80131e6:	f000 fd91 	bl	8013d0c <__smakebuf_r>
 80131ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131ee:	f013 0201 	ands.w	r2, r3, #1
 80131f2:	d00a      	beq.n	801320a <__swsetup_r+0x9a>
 80131f4:	2200      	movs	r2, #0
 80131f6:	60a2      	str	r2, [r4, #8]
 80131f8:	6962      	ldr	r2, [r4, #20]
 80131fa:	4252      	negs	r2, r2
 80131fc:	61a2      	str	r2, [r4, #24]
 80131fe:	6922      	ldr	r2, [r4, #16]
 8013200:	b942      	cbnz	r2, 8013214 <__swsetup_r+0xa4>
 8013202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013206:	d1c5      	bne.n	8013194 <__swsetup_r+0x24>
 8013208:	bd38      	pop	{r3, r4, r5, pc}
 801320a:	0799      	lsls	r1, r3, #30
 801320c:	bf58      	it	pl
 801320e:	6962      	ldrpl	r2, [r4, #20]
 8013210:	60a2      	str	r2, [r4, #8]
 8013212:	e7f4      	b.n	80131fe <__swsetup_r+0x8e>
 8013214:	2000      	movs	r0, #0
 8013216:	e7f7      	b.n	8013208 <__swsetup_r+0x98>
 8013218:	20000038 	.word	0x20000038

0801321c <memcmp>:
 801321c:	b510      	push	{r4, lr}
 801321e:	3901      	subs	r1, #1
 8013220:	4402      	add	r2, r0
 8013222:	4290      	cmp	r0, r2
 8013224:	d101      	bne.n	801322a <memcmp+0xe>
 8013226:	2000      	movs	r0, #0
 8013228:	e005      	b.n	8013236 <memcmp+0x1a>
 801322a:	7803      	ldrb	r3, [r0, #0]
 801322c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013230:	42a3      	cmp	r3, r4
 8013232:	d001      	beq.n	8013238 <memcmp+0x1c>
 8013234:	1b18      	subs	r0, r3, r4
 8013236:	bd10      	pop	{r4, pc}
 8013238:	3001      	adds	r0, #1
 801323a:	e7f2      	b.n	8013222 <memcmp+0x6>

0801323c <memset>:
 801323c:	4402      	add	r2, r0
 801323e:	4603      	mov	r3, r0
 8013240:	4293      	cmp	r3, r2
 8013242:	d100      	bne.n	8013246 <memset+0xa>
 8013244:	4770      	bx	lr
 8013246:	f803 1b01 	strb.w	r1, [r3], #1
 801324a:	e7f9      	b.n	8013240 <memset+0x4>

0801324c <strncmp>:
 801324c:	b510      	push	{r4, lr}
 801324e:	b16a      	cbz	r2, 801326c <strncmp+0x20>
 8013250:	3901      	subs	r1, #1
 8013252:	1884      	adds	r4, r0, r2
 8013254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013258:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801325c:	429a      	cmp	r2, r3
 801325e:	d103      	bne.n	8013268 <strncmp+0x1c>
 8013260:	42a0      	cmp	r0, r4
 8013262:	d001      	beq.n	8013268 <strncmp+0x1c>
 8013264:	2a00      	cmp	r2, #0
 8013266:	d1f5      	bne.n	8013254 <strncmp+0x8>
 8013268:	1ad0      	subs	r0, r2, r3
 801326a:	bd10      	pop	{r4, pc}
 801326c:	4610      	mov	r0, r2
 801326e:	e7fc      	b.n	801326a <strncmp+0x1e>

08013270 <_close_r>:
 8013270:	b538      	push	{r3, r4, r5, lr}
 8013272:	4d06      	ldr	r5, [pc, #24]	@ (801328c <_close_r+0x1c>)
 8013274:	2300      	movs	r3, #0
 8013276:	4604      	mov	r4, r0
 8013278:	4608      	mov	r0, r1
 801327a:	602b      	str	r3, [r5, #0]
 801327c:	f7ee f801 	bl	8001282 <_close>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d102      	bne.n	801328a <_close_r+0x1a>
 8013284:	682b      	ldr	r3, [r5, #0]
 8013286:	b103      	cbz	r3, 801328a <_close_r+0x1a>
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	20008ce8 	.word	0x20008ce8

08013290 <_lseek_r>:
 8013290:	b538      	push	{r3, r4, r5, lr}
 8013292:	4d07      	ldr	r5, [pc, #28]	@ (80132b0 <_lseek_r+0x20>)
 8013294:	4604      	mov	r4, r0
 8013296:	4608      	mov	r0, r1
 8013298:	4611      	mov	r1, r2
 801329a:	2200      	movs	r2, #0
 801329c:	602a      	str	r2, [r5, #0]
 801329e:	461a      	mov	r2, r3
 80132a0:	f7ee f816 	bl	80012d0 <_lseek>
 80132a4:	1c43      	adds	r3, r0, #1
 80132a6:	d102      	bne.n	80132ae <_lseek_r+0x1e>
 80132a8:	682b      	ldr	r3, [r5, #0]
 80132aa:	b103      	cbz	r3, 80132ae <_lseek_r+0x1e>
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	bd38      	pop	{r3, r4, r5, pc}
 80132b0:	20008ce8 	.word	0x20008ce8

080132b4 <_read_r>:
 80132b4:	b538      	push	{r3, r4, r5, lr}
 80132b6:	4d07      	ldr	r5, [pc, #28]	@ (80132d4 <_read_r+0x20>)
 80132b8:	4604      	mov	r4, r0
 80132ba:	4608      	mov	r0, r1
 80132bc:	4611      	mov	r1, r2
 80132be:	2200      	movs	r2, #0
 80132c0:	602a      	str	r2, [r5, #0]
 80132c2:	461a      	mov	r2, r3
 80132c4:	f7ff f9ea 	bl	801269c <_read>
 80132c8:	1c43      	adds	r3, r0, #1
 80132ca:	d102      	bne.n	80132d2 <_read_r+0x1e>
 80132cc:	682b      	ldr	r3, [r5, #0]
 80132ce:	b103      	cbz	r3, 80132d2 <_read_r+0x1e>
 80132d0:	6023      	str	r3, [r4, #0]
 80132d2:	bd38      	pop	{r3, r4, r5, pc}
 80132d4:	20008ce8 	.word	0x20008ce8

080132d8 <_write_r>:
 80132d8:	b538      	push	{r3, r4, r5, lr}
 80132da:	4d07      	ldr	r5, [pc, #28]	@ (80132f8 <_write_r+0x20>)
 80132dc:	4604      	mov	r4, r0
 80132de:	4608      	mov	r0, r1
 80132e0:	4611      	mov	r1, r2
 80132e2:	2200      	movs	r2, #0
 80132e4:	602a      	str	r2, [r5, #0]
 80132e6:	461a      	mov	r2, r3
 80132e8:	f7ff f9a8 	bl	801263c <_write>
 80132ec:	1c43      	adds	r3, r0, #1
 80132ee:	d102      	bne.n	80132f6 <_write_r+0x1e>
 80132f0:	682b      	ldr	r3, [r5, #0]
 80132f2:	b103      	cbz	r3, 80132f6 <_write_r+0x1e>
 80132f4:	6023      	str	r3, [r4, #0]
 80132f6:	bd38      	pop	{r3, r4, r5, pc}
 80132f8:	20008ce8 	.word	0x20008ce8

080132fc <__libc_init_array>:
 80132fc:	b570      	push	{r4, r5, r6, lr}
 80132fe:	4d0d      	ldr	r5, [pc, #52]	@ (8013334 <__libc_init_array+0x38>)
 8013300:	4c0d      	ldr	r4, [pc, #52]	@ (8013338 <__libc_init_array+0x3c>)
 8013302:	1b64      	subs	r4, r4, r5
 8013304:	10a4      	asrs	r4, r4, #2
 8013306:	2600      	movs	r6, #0
 8013308:	42a6      	cmp	r6, r4
 801330a:	d109      	bne.n	8013320 <__libc_init_array+0x24>
 801330c:	4d0b      	ldr	r5, [pc, #44]	@ (801333c <__libc_init_array+0x40>)
 801330e:	4c0c      	ldr	r4, [pc, #48]	@ (8013340 <__libc_init_array+0x44>)
 8013310:	f000 fdb6 	bl	8013e80 <_init>
 8013314:	1b64      	subs	r4, r4, r5
 8013316:	10a4      	asrs	r4, r4, #2
 8013318:	2600      	movs	r6, #0
 801331a:	42a6      	cmp	r6, r4
 801331c:	d105      	bne.n	801332a <__libc_init_array+0x2e>
 801331e:	bd70      	pop	{r4, r5, r6, pc}
 8013320:	f855 3b04 	ldr.w	r3, [r5], #4
 8013324:	4798      	blx	r3
 8013326:	3601      	adds	r6, #1
 8013328:	e7ee      	b.n	8013308 <__libc_init_array+0xc>
 801332a:	f855 3b04 	ldr.w	r3, [r5], #4
 801332e:	4798      	blx	r3
 8013330:	3601      	adds	r6, #1
 8013332:	e7f2      	b.n	801331a <__libc_init_array+0x1e>
 8013334:	08016e30 	.word	0x08016e30
 8013338:	08016e30 	.word	0x08016e30
 801333c:	08016e30 	.word	0x08016e30
 8013340:	08016e34 	.word	0x08016e34

08013344 <__retarget_lock_init_recursive>:
 8013344:	4770      	bx	lr

08013346 <__retarget_lock_acquire_recursive>:
 8013346:	4770      	bx	lr

08013348 <__retarget_lock_release_recursive>:
 8013348:	4770      	bx	lr

0801334a <memcpy>:
 801334a:	440a      	add	r2, r1
 801334c:	4291      	cmp	r1, r2
 801334e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013352:	d100      	bne.n	8013356 <memcpy+0xc>
 8013354:	4770      	bx	lr
 8013356:	b510      	push	{r4, lr}
 8013358:	f811 4b01 	ldrb.w	r4, [r1], #1
 801335c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013360:	4291      	cmp	r1, r2
 8013362:	d1f9      	bne.n	8013358 <memcpy+0xe>
 8013364:	bd10      	pop	{r4, pc}
	...

08013368 <__assert_func>:
 8013368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801336a:	4614      	mov	r4, r2
 801336c:	461a      	mov	r2, r3
 801336e:	4b09      	ldr	r3, [pc, #36]	@ (8013394 <__assert_func+0x2c>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	4605      	mov	r5, r0
 8013374:	68d8      	ldr	r0, [r3, #12]
 8013376:	b954      	cbnz	r4, 801338e <__assert_func+0x26>
 8013378:	4b07      	ldr	r3, [pc, #28]	@ (8013398 <__assert_func+0x30>)
 801337a:	461c      	mov	r4, r3
 801337c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013380:	9100      	str	r1, [sp, #0]
 8013382:	462b      	mov	r3, r5
 8013384:	4905      	ldr	r1, [pc, #20]	@ (801339c <__assert_func+0x34>)
 8013386:	f000 fc89 	bl	8013c9c <fiprintf>
 801338a:	f000 fd2d 	bl	8013de8 <abort>
 801338e:	4b04      	ldr	r3, [pc, #16]	@ (80133a0 <__assert_func+0x38>)
 8013390:	e7f4      	b.n	801337c <__assert_func+0x14>
 8013392:	bf00      	nop
 8013394:	20000038 	.word	0x20000038
 8013398:	08016df2 	.word	0x08016df2
 801339c:	08016dc4 	.word	0x08016dc4
 80133a0:	08016db7 	.word	0x08016db7

080133a4 <_free_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4605      	mov	r5, r0
 80133a8:	2900      	cmp	r1, #0
 80133aa:	d041      	beq.n	8013430 <_free_r+0x8c>
 80133ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133b0:	1f0c      	subs	r4, r1, #4
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	bfb8      	it	lt
 80133b6:	18e4      	addlt	r4, r4, r3
 80133b8:	f000 f8e8 	bl	801358c <__malloc_lock>
 80133bc:	4a1d      	ldr	r2, [pc, #116]	@ (8013434 <_free_r+0x90>)
 80133be:	6813      	ldr	r3, [r2, #0]
 80133c0:	b933      	cbnz	r3, 80133d0 <_free_r+0x2c>
 80133c2:	6063      	str	r3, [r4, #4]
 80133c4:	6014      	str	r4, [r2, #0]
 80133c6:	4628      	mov	r0, r5
 80133c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133cc:	f000 b8e4 	b.w	8013598 <__malloc_unlock>
 80133d0:	42a3      	cmp	r3, r4
 80133d2:	d908      	bls.n	80133e6 <_free_r+0x42>
 80133d4:	6820      	ldr	r0, [r4, #0]
 80133d6:	1821      	adds	r1, r4, r0
 80133d8:	428b      	cmp	r3, r1
 80133da:	bf01      	itttt	eq
 80133dc:	6819      	ldreq	r1, [r3, #0]
 80133de:	685b      	ldreq	r3, [r3, #4]
 80133e0:	1809      	addeq	r1, r1, r0
 80133e2:	6021      	streq	r1, [r4, #0]
 80133e4:	e7ed      	b.n	80133c2 <_free_r+0x1e>
 80133e6:	461a      	mov	r2, r3
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	b10b      	cbz	r3, 80133f0 <_free_r+0x4c>
 80133ec:	42a3      	cmp	r3, r4
 80133ee:	d9fa      	bls.n	80133e6 <_free_r+0x42>
 80133f0:	6811      	ldr	r1, [r2, #0]
 80133f2:	1850      	adds	r0, r2, r1
 80133f4:	42a0      	cmp	r0, r4
 80133f6:	d10b      	bne.n	8013410 <_free_r+0x6c>
 80133f8:	6820      	ldr	r0, [r4, #0]
 80133fa:	4401      	add	r1, r0
 80133fc:	1850      	adds	r0, r2, r1
 80133fe:	4283      	cmp	r3, r0
 8013400:	6011      	str	r1, [r2, #0]
 8013402:	d1e0      	bne.n	80133c6 <_free_r+0x22>
 8013404:	6818      	ldr	r0, [r3, #0]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	6053      	str	r3, [r2, #4]
 801340a:	4408      	add	r0, r1
 801340c:	6010      	str	r0, [r2, #0]
 801340e:	e7da      	b.n	80133c6 <_free_r+0x22>
 8013410:	d902      	bls.n	8013418 <_free_r+0x74>
 8013412:	230c      	movs	r3, #12
 8013414:	602b      	str	r3, [r5, #0]
 8013416:	e7d6      	b.n	80133c6 <_free_r+0x22>
 8013418:	6820      	ldr	r0, [r4, #0]
 801341a:	1821      	adds	r1, r4, r0
 801341c:	428b      	cmp	r3, r1
 801341e:	bf04      	itt	eq
 8013420:	6819      	ldreq	r1, [r3, #0]
 8013422:	685b      	ldreq	r3, [r3, #4]
 8013424:	6063      	str	r3, [r4, #4]
 8013426:	bf04      	itt	eq
 8013428:	1809      	addeq	r1, r1, r0
 801342a:	6021      	streq	r1, [r4, #0]
 801342c:	6054      	str	r4, [r2, #4]
 801342e:	e7ca      	b.n	80133c6 <_free_r+0x22>
 8013430:	bd38      	pop	{r3, r4, r5, pc}
 8013432:	bf00      	nop
 8013434:	20008cf4 	.word	0x20008cf4

08013438 <malloc>:
 8013438:	4b02      	ldr	r3, [pc, #8]	@ (8013444 <malloc+0xc>)
 801343a:	4601      	mov	r1, r0
 801343c:	6818      	ldr	r0, [r3, #0]
 801343e:	f000 b825 	b.w	801348c <_malloc_r>
 8013442:	bf00      	nop
 8013444:	20000038 	.word	0x20000038

08013448 <sbrk_aligned>:
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	4e0f      	ldr	r6, [pc, #60]	@ (8013488 <sbrk_aligned+0x40>)
 801344c:	460c      	mov	r4, r1
 801344e:	6831      	ldr	r1, [r6, #0]
 8013450:	4605      	mov	r5, r0
 8013452:	b911      	cbnz	r1, 801345a <sbrk_aligned+0x12>
 8013454:	f000 fcb8 	bl	8013dc8 <_sbrk_r>
 8013458:	6030      	str	r0, [r6, #0]
 801345a:	4621      	mov	r1, r4
 801345c:	4628      	mov	r0, r5
 801345e:	f000 fcb3 	bl	8013dc8 <_sbrk_r>
 8013462:	1c43      	adds	r3, r0, #1
 8013464:	d103      	bne.n	801346e <sbrk_aligned+0x26>
 8013466:	f04f 34ff 	mov.w	r4, #4294967295
 801346a:	4620      	mov	r0, r4
 801346c:	bd70      	pop	{r4, r5, r6, pc}
 801346e:	1cc4      	adds	r4, r0, #3
 8013470:	f024 0403 	bic.w	r4, r4, #3
 8013474:	42a0      	cmp	r0, r4
 8013476:	d0f8      	beq.n	801346a <sbrk_aligned+0x22>
 8013478:	1a21      	subs	r1, r4, r0
 801347a:	4628      	mov	r0, r5
 801347c:	f000 fca4 	bl	8013dc8 <_sbrk_r>
 8013480:	3001      	adds	r0, #1
 8013482:	d1f2      	bne.n	801346a <sbrk_aligned+0x22>
 8013484:	e7ef      	b.n	8013466 <sbrk_aligned+0x1e>
 8013486:	bf00      	nop
 8013488:	20008cf0 	.word	0x20008cf0

0801348c <_malloc_r>:
 801348c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013490:	1ccd      	adds	r5, r1, #3
 8013492:	f025 0503 	bic.w	r5, r5, #3
 8013496:	3508      	adds	r5, #8
 8013498:	2d0c      	cmp	r5, #12
 801349a:	bf38      	it	cc
 801349c:	250c      	movcc	r5, #12
 801349e:	2d00      	cmp	r5, #0
 80134a0:	4606      	mov	r6, r0
 80134a2:	db01      	blt.n	80134a8 <_malloc_r+0x1c>
 80134a4:	42a9      	cmp	r1, r5
 80134a6:	d904      	bls.n	80134b2 <_malloc_r+0x26>
 80134a8:	230c      	movs	r3, #12
 80134aa:	6033      	str	r3, [r6, #0]
 80134ac:	2000      	movs	r0, #0
 80134ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013588 <_malloc_r+0xfc>
 80134b6:	f000 f869 	bl	801358c <__malloc_lock>
 80134ba:	f8d8 3000 	ldr.w	r3, [r8]
 80134be:	461c      	mov	r4, r3
 80134c0:	bb44      	cbnz	r4, 8013514 <_malloc_r+0x88>
 80134c2:	4629      	mov	r1, r5
 80134c4:	4630      	mov	r0, r6
 80134c6:	f7ff ffbf 	bl	8013448 <sbrk_aligned>
 80134ca:	1c43      	adds	r3, r0, #1
 80134cc:	4604      	mov	r4, r0
 80134ce:	d158      	bne.n	8013582 <_malloc_r+0xf6>
 80134d0:	f8d8 4000 	ldr.w	r4, [r8]
 80134d4:	4627      	mov	r7, r4
 80134d6:	2f00      	cmp	r7, #0
 80134d8:	d143      	bne.n	8013562 <_malloc_r+0xd6>
 80134da:	2c00      	cmp	r4, #0
 80134dc:	d04b      	beq.n	8013576 <_malloc_r+0xea>
 80134de:	6823      	ldr	r3, [r4, #0]
 80134e0:	4639      	mov	r1, r7
 80134e2:	4630      	mov	r0, r6
 80134e4:	eb04 0903 	add.w	r9, r4, r3
 80134e8:	f000 fc6e 	bl	8013dc8 <_sbrk_r>
 80134ec:	4581      	cmp	r9, r0
 80134ee:	d142      	bne.n	8013576 <_malloc_r+0xea>
 80134f0:	6821      	ldr	r1, [r4, #0]
 80134f2:	1a6d      	subs	r5, r5, r1
 80134f4:	4629      	mov	r1, r5
 80134f6:	4630      	mov	r0, r6
 80134f8:	f7ff ffa6 	bl	8013448 <sbrk_aligned>
 80134fc:	3001      	adds	r0, #1
 80134fe:	d03a      	beq.n	8013576 <_malloc_r+0xea>
 8013500:	6823      	ldr	r3, [r4, #0]
 8013502:	442b      	add	r3, r5
 8013504:	6023      	str	r3, [r4, #0]
 8013506:	f8d8 3000 	ldr.w	r3, [r8]
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	bb62      	cbnz	r2, 8013568 <_malloc_r+0xdc>
 801350e:	f8c8 7000 	str.w	r7, [r8]
 8013512:	e00f      	b.n	8013534 <_malloc_r+0xa8>
 8013514:	6822      	ldr	r2, [r4, #0]
 8013516:	1b52      	subs	r2, r2, r5
 8013518:	d420      	bmi.n	801355c <_malloc_r+0xd0>
 801351a:	2a0b      	cmp	r2, #11
 801351c:	d917      	bls.n	801354e <_malloc_r+0xc2>
 801351e:	1961      	adds	r1, r4, r5
 8013520:	42a3      	cmp	r3, r4
 8013522:	6025      	str	r5, [r4, #0]
 8013524:	bf18      	it	ne
 8013526:	6059      	strne	r1, [r3, #4]
 8013528:	6863      	ldr	r3, [r4, #4]
 801352a:	bf08      	it	eq
 801352c:	f8c8 1000 	streq.w	r1, [r8]
 8013530:	5162      	str	r2, [r4, r5]
 8013532:	604b      	str	r3, [r1, #4]
 8013534:	4630      	mov	r0, r6
 8013536:	f000 f82f 	bl	8013598 <__malloc_unlock>
 801353a:	f104 000b 	add.w	r0, r4, #11
 801353e:	1d23      	adds	r3, r4, #4
 8013540:	f020 0007 	bic.w	r0, r0, #7
 8013544:	1ac2      	subs	r2, r0, r3
 8013546:	bf1c      	itt	ne
 8013548:	1a1b      	subne	r3, r3, r0
 801354a:	50a3      	strne	r3, [r4, r2]
 801354c:	e7af      	b.n	80134ae <_malloc_r+0x22>
 801354e:	6862      	ldr	r2, [r4, #4]
 8013550:	42a3      	cmp	r3, r4
 8013552:	bf0c      	ite	eq
 8013554:	f8c8 2000 	streq.w	r2, [r8]
 8013558:	605a      	strne	r2, [r3, #4]
 801355a:	e7eb      	b.n	8013534 <_malloc_r+0xa8>
 801355c:	4623      	mov	r3, r4
 801355e:	6864      	ldr	r4, [r4, #4]
 8013560:	e7ae      	b.n	80134c0 <_malloc_r+0x34>
 8013562:	463c      	mov	r4, r7
 8013564:	687f      	ldr	r7, [r7, #4]
 8013566:	e7b6      	b.n	80134d6 <_malloc_r+0x4a>
 8013568:	461a      	mov	r2, r3
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	42a3      	cmp	r3, r4
 801356e:	d1fb      	bne.n	8013568 <_malloc_r+0xdc>
 8013570:	2300      	movs	r3, #0
 8013572:	6053      	str	r3, [r2, #4]
 8013574:	e7de      	b.n	8013534 <_malloc_r+0xa8>
 8013576:	230c      	movs	r3, #12
 8013578:	6033      	str	r3, [r6, #0]
 801357a:	4630      	mov	r0, r6
 801357c:	f000 f80c 	bl	8013598 <__malloc_unlock>
 8013580:	e794      	b.n	80134ac <_malloc_r+0x20>
 8013582:	6005      	str	r5, [r0, #0]
 8013584:	e7d6      	b.n	8013534 <_malloc_r+0xa8>
 8013586:	bf00      	nop
 8013588:	20008cf4 	.word	0x20008cf4

0801358c <__malloc_lock>:
 801358c:	4801      	ldr	r0, [pc, #4]	@ (8013594 <__malloc_lock+0x8>)
 801358e:	f7ff beda 	b.w	8013346 <__retarget_lock_acquire_recursive>
 8013592:	bf00      	nop
 8013594:	20008cec 	.word	0x20008cec

08013598 <__malloc_unlock>:
 8013598:	4801      	ldr	r0, [pc, #4]	@ (80135a0 <__malloc_unlock+0x8>)
 801359a:	f7ff bed5 	b.w	8013348 <__retarget_lock_release_recursive>
 801359e:	bf00      	nop
 80135a0:	20008cec 	.word	0x20008cec

080135a4 <__sfputc_r>:
 80135a4:	6893      	ldr	r3, [r2, #8]
 80135a6:	3b01      	subs	r3, #1
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	b410      	push	{r4}
 80135ac:	6093      	str	r3, [r2, #8]
 80135ae:	da08      	bge.n	80135c2 <__sfputc_r+0x1e>
 80135b0:	6994      	ldr	r4, [r2, #24]
 80135b2:	42a3      	cmp	r3, r4
 80135b4:	db01      	blt.n	80135ba <__sfputc_r+0x16>
 80135b6:	290a      	cmp	r1, #10
 80135b8:	d103      	bne.n	80135c2 <__sfputc_r+0x1e>
 80135ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135be:	f7ff bd98 	b.w	80130f2 <__swbuf_r>
 80135c2:	6813      	ldr	r3, [r2, #0]
 80135c4:	1c58      	adds	r0, r3, #1
 80135c6:	6010      	str	r0, [r2, #0]
 80135c8:	7019      	strb	r1, [r3, #0]
 80135ca:	4608      	mov	r0, r1
 80135cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135d0:	4770      	bx	lr

080135d2 <__sfputs_r>:
 80135d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d4:	4606      	mov	r6, r0
 80135d6:	460f      	mov	r7, r1
 80135d8:	4614      	mov	r4, r2
 80135da:	18d5      	adds	r5, r2, r3
 80135dc:	42ac      	cmp	r4, r5
 80135de:	d101      	bne.n	80135e4 <__sfputs_r+0x12>
 80135e0:	2000      	movs	r0, #0
 80135e2:	e007      	b.n	80135f4 <__sfputs_r+0x22>
 80135e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135e8:	463a      	mov	r2, r7
 80135ea:	4630      	mov	r0, r6
 80135ec:	f7ff ffda 	bl	80135a4 <__sfputc_r>
 80135f0:	1c43      	adds	r3, r0, #1
 80135f2:	d1f3      	bne.n	80135dc <__sfputs_r+0xa>
 80135f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135f8 <_vfiprintf_r>:
 80135f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135fc:	460d      	mov	r5, r1
 80135fe:	b09d      	sub	sp, #116	@ 0x74
 8013600:	4614      	mov	r4, r2
 8013602:	4698      	mov	r8, r3
 8013604:	4606      	mov	r6, r0
 8013606:	b118      	cbz	r0, 8013610 <_vfiprintf_r+0x18>
 8013608:	6a03      	ldr	r3, [r0, #32]
 801360a:	b90b      	cbnz	r3, 8013610 <_vfiprintf_r+0x18>
 801360c:	f7ff fc88 	bl	8012f20 <__sinit>
 8013610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013612:	07d9      	lsls	r1, r3, #31
 8013614:	d405      	bmi.n	8013622 <_vfiprintf_r+0x2a>
 8013616:	89ab      	ldrh	r3, [r5, #12]
 8013618:	059a      	lsls	r2, r3, #22
 801361a:	d402      	bmi.n	8013622 <_vfiprintf_r+0x2a>
 801361c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801361e:	f7ff fe92 	bl	8013346 <__retarget_lock_acquire_recursive>
 8013622:	89ab      	ldrh	r3, [r5, #12]
 8013624:	071b      	lsls	r3, r3, #28
 8013626:	d501      	bpl.n	801362c <_vfiprintf_r+0x34>
 8013628:	692b      	ldr	r3, [r5, #16]
 801362a:	b99b      	cbnz	r3, 8013654 <_vfiprintf_r+0x5c>
 801362c:	4629      	mov	r1, r5
 801362e:	4630      	mov	r0, r6
 8013630:	f7ff fd9e 	bl	8013170 <__swsetup_r>
 8013634:	b170      	cbz	r0, 8013654 <_vfiprintf_r+0x5c>
 8013636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013638:	07dc      	lsls	r4, r3, #31
 801363a:	d504      	bpl.n	8013646 <_vfiprintf_r+0x4e>
 801363c:	f04f 30ff 	mov.w	r0, #4294967295
 8013640:	b01d      	add	sp, #116	@ 0x74
 8013642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013646:	89ab      	ldrh	r3, [r5, #12]
 8013648:	0598      	lsls	r0, r3, #22
 801364a:	d4f7      	bmi.n	801363c <_vfiprintf_r+0x44>
 801364c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801364e:	f7ff fe7b 	bl	8013348 <__retarget_lock_release_recursive>
 8013652:	e7f3      	b.n	801363c <_vfiprintf_r+0x44>
 8013654:	2300      	movs	r3, #0
 8013656:	9309      	str	r3, [sp, #36]	@ 0x24
 8013658:	2320      	movs	r3, #32
 801365a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801365e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013662:	2330      	movs	r3, #48	@ 0x30
 8013664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013814 <_vfiprintf_r+0x21c>
 8013668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801366c:	f04f 0901 	mov.w	r9, #1
 8013670:	4623      	mov	r3, r4
 8013672:	469a      	mov	sl, r3
 8013674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013678:	b10a      	cbz	r2, 801367e <_vfiprintf_r+0x86>
 801367a:	2a25      	cmp	r2, #37	@ 0x25
 801367c:	d1f9      	bne.n	8013672 <_vfiprintf_r+0x7a>
 801367e:	ebba 0b04 	subs.w	fp, sl, r4
 8013682:	d00b      	beq.n	801369c <_vfiprintf_r+0xa4>
 8013684:	465b      	mov	r3, fp
 8013686:	4622      	mov	r2, r4
 8013688:	4629      	mov	r1, r5
 801368a:	4630      	mov	r0, r6
 801368c:	f7ff ffa1 	bl	80135d2 <__sfputs_r>
 8013690:	3001      	adds	r0, #1
 8013692:	f000 80a7 	beq.w	80137e4 <_vfiprintf_r+0x1ec>
 8013696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013698:	445a      	add	r2, fp
 801369a:	9209      	str	r2, [sp, #36]	@ 0x24
 801369c:	f89a 3000 	ldrb.w	r3, [sl]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f000 809f 	beq.w	80137e4 <_vfiprintf_r+0x1ec>
 80136a6:	2300      	movs	r3, #0
 80136a8:	f04f 32ff 	mov.w	r2, #4294967295
 80136ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136b0:	f10a 0a01 	add.w	sl, sl, #1
 80136b4:	9304      	str	r3, [sp, #16]
 80136b6:	9307      	str	r3, [sp, #28]
 80136b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80136bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80136be:	4654      	mov	r4, sl
 80136c0:	2205      	movs	r2, #5
 80136c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136c6:	4853      	ldr	r0, [pc, #332]	@ (8013814 <_vfiprintf_r+0x21c>)
 80136c8:	f7ec fdaa 	bl	8000220 <memchr>
 80136cc:	9a04      	ldr	r2, [sp, #16]
 80136ce:	b9d8      	cbnz	r0, 8013708 <_vfiprintf_r+0x110>
 80136d0:	06d1      	lsls	r1, r2, #27
 80136d2:	bf44      	itt	mi
 80136d4:	2320      	movmi	r3, #32
 80136d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136da:	0713      	lsls	r3, r2, #28
 80136dc:	bf44      	itt	mi
 80136de:	232b      	movmi	r3, #43	@ 0x2b
 80136e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136e4:	f89a 3000 	ldrb.w	r3, [sl]
 80136e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80136ea:	d015      	beq.n	8013718 <_vfiprintf_r+0x120>
 80136ec:	9a07      	ldr	r2, [sp, #28]
 80136ee:	4654      	mov	r4, sl
 80136f0:	2000      	movs	r0, #0
 80136f2:	f04f 0c0a 	mov.w	ip, #10
 80136f6:	4621      	mov	r1, r4
 80136f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136fc:	3b30      	subs	r3, #48	@ 0x30
 80136fe:	2b09      	cmp	r3, #9
 8013700:	d94b      	bls.n	801379a <_vfiprintf_r+0x1a2>
 8013702:	b1b0      	cbz	r0, 8013732 <_vfiprintf_r+0x13a>
 8013704:	9207      	str	r2, [sp, #28]
 8013706:	e014      	b.n	8013732 <_vfiprintf_r+0x13a>
 8013708:	eba0 0308 	sub.w	r3, r0, r8
 801370c:	fa09 f303 	lsl.w	r3, r9, r3
 8013710:	4313      	orrs	r3, r2
 8013712:	9304      	str	r3, [sp, #16]
 8013714:	46a2      	mov	sl, r4
 8013716:	e7d2      	b.n	80136be <_vfiprintf_r+0xc6>
 8013718:	9b03      	ldr	r3, [sp, #12]
 801371a:	1d19      	adds	r1, r3, #4
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	9103      	str	r1, [sp, #12]
 8013720:	2b00      	cmp	r3, #0
 8013722:	bfbb      	ittet	lt
 8013724:	425b      	neglt	r3, r3
 8013726:	f042 0202 	orrlt.w	r2, r2, #2
 801372a:	9307      	strge	r3, [sp, #28]
 801372c:	9307      	strlt	r3, [sp, #28]
 801372e:	bfb8      	it	lt
 8013730:	9204      	strlt	r2, [sp, #16]
 8013732:	7823      	ldrb	r3, [r4, #0]
 8013734:	2b2e      	cmp	r3, #46	@ 0x2e
 8013736:	d10a      	bne.n	801374e <_vfiprintf_r+0x156>
 8013738:	7863      	ldrb	r3, [r4, #1]
 801373a:	2b2a      	cmp	r3, #42	@ 0x2a
 801373c:	d132      	bne.n	80137a4 <_vfiprintf_r+0x1ac>
 801373e:	9b03      	ldr	r3, [sp, #12]
 8013740:	1d1a      	adds	r2, r3, #4
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	9203      	str	r2, [sp, #12]
 8013746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801374a:	3402      	adds	r4, #2
 801374c:	9305      	str	r3, [sp, #20]
 801374e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013824 <_vfiprintf_r+0x22c>
 8013752:	7821      	ldrb	r1, [r4, #0]
 8013754:	2203      	movs	r2, #3
 8013756:	4650      	mov	r0, sl
 8013758:	f7ec fd62 	bl	8000220 <memchr>
 801375c:	b138      	cbz	r0, 801376e <_vfiprintf_r+0x176>
 801375e:	9b04      	ldr	r3, [sp, #16]
 8013760:	eba0 000a 	sub.w	r0, r0, sl
 8013764:	2240      	movs	r2, #64	@ 0x40
 8013766:	4082      	lsls	r2, r0
 8013768:	4313      	orrs	r3, r2
 801376a:	3401      	adds	r4, #1
 801376c:	9304      	str	r3, [sp, #16]
 801376e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013772:	4829      	ldr	r0, [pc, #164]	@ (8013818 <_vfiprintf_r+0x220>)
 8013774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013778:	2206      	movs	r2, #6
 801377a:	f7ec fd51 	bl	8000220 <memchr>
 801377e:	2800      	cmp	r0, #0
 8013780:	d03f      	beq.n	8013802 <_vfiprintf_r+0x20a>
 8013782:	4b26      	ldr	r3, [pc, #152]	@ (801381c <_vfiprintf_r+0x224>)
 8013784:	bb1b      	cbnz	r3, 80137ce <_vfiprintf_r+0x1d6>
 8013786:	9b03      	ldr	r3, [sp, #12]
 8013788:	3307      	adds	r3, #7
 801378a:	f023 0307 	bic.w	r3, r3, #7
 801378e:	3308      	adds	r3, #8
 8013790:	9303      	str	r3, [sp, #12]
 8013792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013794:	443b      	add	r3, r7
 8013796:	9309      	str	r3, [sp, #36]	@ 0x24
 8013798:	e76a      	b.n	8013670 <_vfiprintf_r+0x78>
 801379a:	fb0c 3202 	mla	r2, ip, r2, r3
 801379e:	460c      	mov	r4, r1
 80137a0:	2001      	movs	r0, #1
 80137a2:	e7a8      	b.n	80136f6 <_vfiprintf_r+0xfe>
 80137a4:	2300      	movs	r3, #0
 80137a6:	3401      	adds	r4, #1
 80137a8:	9305      	str	r3, [sp, #20]
 80137aa:	4619      	mov	r1, r3
 80137ac:	f04f 0c0a 	mov.w	ip, #10
 80137b0:	4620      	mov	r0, r4
 80137b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137b6:	3a30      	subs	r2, #48	@ 0x30
 80137b8:	2a09      	cmp	r2, #9
 80137ba:	d903      	bls.n	80137c4 <_vfiprintf_r+0x1cc>
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d0c6      	beq.n	801374e <_vfiprintf_r+0x156>
 80137c0:	9105      	str	r1, [sp, #20]
 80137c2:	e7c4      	b.n	801374e <_vfiprintf_r+0x156>
 80137c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80137c8:	4604      	mov	r4, r0
 80137ca:	2301      	movs	r3, #1
 80137cc:	e7f0      	b.n	80137b0 <_vfiprintf_r+0x1b8>
 80137ce:	ab03      	add	r3, sp, #12
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	462a      	mov	r2, r5
 80137d4:	4b12      	ldr	r3, [pc, #72]	@ (8013820 <_vfiprintf_r+0x228>)
 80137d6:	a904      	add	r1, sp, #16
 80137d8:	4630      	mov	r0, r6
 80137da:	f3af 8000 	nop.w
 80137de:	4607      	mov	r7, r0
 80137e0:	1c78      	adds	r0, r7, #1
 80137e2:	d1d6      	bne.n	8013792 <_vfiprintf_r+0x19a>
 80137e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137e6:	07d9      	lsls	r1, r3, #31
 80137e8:	d405      	bmi.n	80137f6 <_vfiprintf_r+0x1fe>
 80137ea:	89ab      	ldrh	r3, [r5, #12]
 80137ec:	059a      	lsls	r2, r3, #22
 80137ee:	d402      	bmi.n	80137f6 <_vfiprintf_r+0x1fe>
 80137f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137f2:	f7ff fda9 	bl	8013348 <__retarget_lock_release_recursive>
 80137f6:	89ab      	ldrh	r3, [r5, #12]
 80137f8:	065b      	lsls	r3, r3, #25
 80137fa:	f53f af1f 	bmi.w	801363c <_vfiprintf_r+0x44>
 80137fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013800:	e71e      	b.n	8013640 <_vfiprintf_r+0x48>
 8013802:	ab03      	add	r3, sp, #12
 8013804:	9300      	str	r3, [sp, #0]
 8013806:	462a      	mov	r2, r5
 8013808:	4b05      	ldr	r3, [pc, #20]	@ (8013820 <_vfiprintf_r+0x228>)
 801380a:	a904      	add	r1, sp, #16
 801380c:	4630      	mov	r0, r6
 801380e:	f000 f879 	bl	8013904 <_printf_i>
 8013812:	e7e4      	b.n	80137de <_vfiprintf_r+0x1e6>
 8013814:	08016df3 	.word	0x08016df3
 8013818:	08016dfd 	.word	0x08016dfd
 801381c:	00000000 	.word	0x00000000
 8013820:	080135d3 	.word	0x080135d3
 8013824:	08016df9 	.word	0x08016df9

08013828 <_printf_common>:
 8013828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801382c:	4616      	mov	r6, r2
 801382e:	4698      	mov	r8, r3
 8013830:	688a      	ldr	r2, [r1, #8]
 8013832:	690b      	ldr	r3, [r1, #16]
 8013834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013838:	4293      	cmp	r3, r2
 801383a:	bfb8      	it	lt
 801383c:	4613      	movlt	r3, r2
 801383e:	6033      	str	r3, [r6, #0]
 8013840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013844:	4607      	mov	r7, r0
 8013846:	460c      	mov	r4, r1
 8013848:	b10a      	cbz	r2, 801384e <_printf_common+0x26>
 801384a:	3301      	adds	r3, #1
 801384c:	6033      	str	r3, [r6, #0]
 801384e:	6823      	ldr	r3, [r4, #0]
 8013850:	0699      	lsls	r1, r3, #26
 8013852:	bf42      	ittt	mi
 8013854:	6833      	ldrmi	r3, [r6, #0]
 8013856:	3302      	addmi	r3, #2
 8013858:	6033      	strmi	r3, [r6, #0]
 801385a:	6825      	ldr	r5, [r4, #0]
 801385c:	f015 0506 	ands.w	r5, r5, #6
 8013860:	d106      	bne.n	8013870 <_printf_common+0x48>
 8013862:	f104 0a19 	add.w	sl, r4, #25
 8013866:	68e3      	ldr	r3, [r4, #12]
 8013868:	6832      	ldr	r2, [r6, #0]
 801386a:	1a9b      	subs	r3, r3, r2
 801386c:	42ab      	cmp	r3, r5
 801386e:	dc26      	bgt.n	80138be <_printf_common+0x96>
 8013870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013874:	6822      	ldr	r2, [r4, #0]
 8013876:	3b00      	subs	r3, #0
 8013878:	bf18      	it	ne
 801387a:	2301      	movne	r3, #1
 801387c:	0692      	lsls	r2, r2, #26
 801387e:	d42b      	bmi.n	80138d8 <_printf_common+0xb0>
 8013880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013884:	4641      	mov	r1, r8
 8013886:	4638      	mov	r0, r7
 8013888:	47c8      	blx	r9
 801388a:	3001      	adds	r0, #1
 801388c:	d01e      	beq.n	80138cc <_printf_common+0xa4>
 801388e:	6823      	ldr	r3, [r4, #0]
 8013890:	6922      	ldr	r2, [r4, #16]
 8013892:	f003 0306 	and.w	r3, r3, #6
 8013896:	2b04      	cmp	r3, #4
 8013898:	bf02      	ittt	eq
 801389a:	68e5      	ldreq	r5, [r4, #12]
 801389c:	6833      	ldreq	r3, [r6, #0]
 801389e:	1aed      	subeq	r5, r5, r3
 80138a0:	68a3      	ldr	r3, [r4, #8]
 80138a2:	bf0c      	ite	eq
 80138a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138a8:	2500      	movne	r5, #0
 80138aa:	4293      	cmp	r3, r2
 80138ac:	bfc4      	itt	gt
 80138ae:	1a9b      	subgt	r3, r3, r2
 80138b0:	18ed      	addgt	r5, r5, r3
 80138b2:	2600      	movs	r6, #0
 80138b4:	341a      	adds	r4, #26
 80138b6:	42b5      	cmp	r5, r6
 80138b8:	d11a      	bne.n	80138f0 <_printf_common+0xc8>
 80138ba:	2000      	movs	r0, #0
 80138bc:	e008      	b.n	80138d0 <_printf_common+0xa8>
 80138be:	2301      	movs	r3, #1
 80138c0:	4652      	mov	r2, sl
 80138c2:	4641      	mov	r1, r8
 80138c4:	4638      	mov	r0, r7
 80138c6:	47c8      	blx	r9
 80138c8:	3001      	adds	r0, #1
 80138ca:	d103      	bne.n	80138d4 <_printf_common+0xac>
 80138cc:	f04f 30ff 	mov.w	r0, #4294967295
 80138d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d4:	3501      	adds	r5, #1
 80138d6:	e7c6      	b.n	8013866 <_printf_common+0x3e>
 80138d8:	18e1      	adds	r1, r4, r3
 80138da:	1c5a      	adds	r2, r3, #1
 80138dc:	2030      	movs	r0, #48	@ 0x30
 80138de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80138e2:	4422      	add	r2, r4
 80138e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80138e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80138ec:	3302      	adds	r3, #2
 80138ee:	e7c7      	b.n	8013880 <_printf_common+0x58>
 80138f0:	2301      	movs	r3, #1
 80138f2:	4622      	mov	r2, r4
 80138f4:	4641      	mov	r1, r8
 80138f6:	4638      	mov	r0, r7
 80138f8:	47c8      	blx	r9
 80138fa:	3001      	adds	r0, #1
 80138fc:	d0e6      	beq.n	80138cc <_printf_common+0xa4>
 80138fe:	3601      	adds	r6, #1
 8013900:	e7d9      	b.n	80138b6 <_printf_common+0x8e>
	...

08013904 <_printf_i>:
 8013904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013908:	7e0f      	ldrb	r7, [r1, #24]
 801390a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801390c:	2f78      	cmp	r7, #120	@ 0x78
 801390e:	4691      	mov	r9, r2
 8013910:	4680      	mov	r8, r0
 8013912:	460c      	mov	r4, r1
 8013914:	469a      	mov	sl, r3
 8013916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801391a:	d807      	bhi.n	801392c <_printf_i+0x28>
 801391c:	2f62      	cmp	r7, #98	@ 0x62
 801391e:	d80a      	bhi.n	8013936 <_printf_i+0x32>
 8013920:	2f00      	cmp	r7, #0
 8013922:	f000 80d2 	beq.w	8013aca <_printf_i+0x1c6>
 8013926:	2f58      	cmp	r7, #88	@ 0x58
 8013928:	f000 80b9 	beq.w	8013a9e <_printf_i+0x19a>
 801392c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013934:	e03a      	b.n	80139ac <_printf_i+0xa8>
 8013936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801393a:	2b15      	cmp	r3, #21
 801393c:	d8f6      	bhi.n	801392c <_printf_i+0x28>
 801393e:	a101      	add	r1, pc, #4	@ (adr r1, 8013944 <_printf_i+0x40>)
 8013940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013944:	0801399d 	.word	0x0801399d
 8013948:	080139b1 	.word	0x080139b1
 801394c:	0801392d 	.word	0x0801392d
 8013950:	0801392d 	.word	0x0801392d
 8013954:	0801392d 	.word	0x0801392d
 8013958:	0801392d 	.word	0x0801392d
 801395c:	080139b1 	.word	0x080139b1
 8013960:	0801392d 	.word	0x0801392d
 8013964:	0801392d 	.word	0x0801392d
 8013968:	0801392d 	.word	0x0801392d
 801396c:	0801392d 	.word	0x0801392d
 8013970:	08013ab1 	.word	0x08013ab1
 8013974:	080139db 	.word	0x080139db
 8013978:	08013a6b 	.word	0x08013a6b
 801397c:	0801392d 	.word	0x0801392d
 8013980:	0801392d 	.word	0x0801392d
 8013984:	08013ad3 	.word	0x08013ad3
 8013988:	0801392d 	.word	0x0801392d
 801398c:	080139db 	.word	0x080139db
 8013990:	0801392d 	.word	0x0801392d
 8013994:	0801392d 	.word	0x0801392d
 8013998:	08013a73 	.word	0x08013a73
 801399c:	6833      	ldr	r3, [r6, #0]
 801399e:	1d1a      	adds	r2, r3, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	6032      	str	r2, [r6, #0]
 80139a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80139ac:	2301      	movs	r3, #1
 80139ae:	e09d      	b.n	8013aec <_printf_i+0x1e8>
 80139b0:	6833      	ldr	r3, [r6, #0]
 80139b2:	6820      	ldr	r0, [r4, #0]
 80139b4:	1d19      	adds	r1, r3, #4
 80139b6:	6031      	str	r1, [r6, #0]
 80139b8:	0606      	lsls	r6, r0, #24
 80139ba:	d501      	bpl.n	80139c0 <_printf_i+0xbc>
 80139bc:	681d      	ldr	r5, [r3, #0]
 80139be:	e003      	b.n	80139c8 <_printf_i+0xc4>
 80139c0:	0645      	lsls	r5, r0, #25
 80139c2:	d5fb      	bpl.n	80139bc <_printf_i+0xb8>
 80139c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80139c8:	2d00      	cmp	r5, #0
 80139ca:	da03      	bge.n	80139d4 <_printf_i+0xd0>
 80139cc:	232d      	movs	r3, #45	@ 0x2d
 80139ce:	426d      	negs	r5, r5
 80139d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80139d4:	4859      	ldr	r0, [pc, #356]	@ (8013b3c <_printf_i+0x238>)
 80139d6:	230a      	movs	r3, #10
 80139d8:	e011      	b.n	80139fe <_printf_i+0xfa>
 80139da:	6821      	ldr	r1, [r4, #0]
 80139dc:	6833      	ldr	r3, [r6, #0]
 80139de:	0608      	lsls	r0, r1, #24
 80139e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80139e4:	d402      	bmi.n	80139ec <_printf_i+0xe8>
 80139e6:	0649      	lsls	r1, r1, #25
 80139e8:	bf48      	it	mi
 80139ea:	b2ad      	uxthmi	r5, r5
 80139ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80139ee:	4853      	ldr	r0, [pc, #332]	@ (8013b3c <_printf_i+0x238>)
 80139f0:	6033      	str	r3, [r6, #0]
 80139f2:	bf14      	ite	ne
 80139f4:	230a      	movne	r3, #10
 80139f6:	2308      	moveq	r3, #8
 80139f8:	2100      	movs	r1, #0
 80139fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80139fe:	6866      	ldr	r6, [r4, #4]
 8013a00:	60a6      	str	r6, [r4, #8]
 8013a02:	2e00      	cmp	r6, #0
 8013a04:	bfa2      	ittt	ge
 8013a06:	6821      	ldrge	r1, [r4, #0]
 8013a08:	f021 0104 	bicge.w	r1, r1, #4
 8013a0c:	6021      	strge	r1, [r4, #0]
 8013a0e:	b90d      	cbnz	r5, 8013a14 <_printf_i+0x110>
 8013a10:	2e00      	cmp	r6, #0
 8013a12:	d04b      	beq.n	8013aac <_printf_i+0x1a8>
 8013a14:	4616      	mov	r6, r2
 8013a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8013a1e:	5dc7      	ldrb	r7, [r0, r7]
 8013a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a24:	462f      	mov	r7, r5
 8013a26:	42bb      	cmp	r3, r7
 8013a28:	460d      	mov	r5, r1
 8013a2a:	d9f4      	bls.n	8013a16 <_printf_i+0x112>
 8013a2c:	2b08      	cmp	r3, #8
 8013a2e:	d10b      	bne.n	8013a48 <_printf_i+0x144>
 8013a30:	6823      	ldr	r3, [r4, #0]
 8013a32:	07df      	lsls	r7, r3, #31
 8013a34:	d508      	bpl.n	8013a48 <_printf_i+0x144>
 8013a36:	6923      	ldr	r3, [r4, #16]
 8013a38:	6861      	ldr	r1, [r4, #4]
 8013a3a:	4299      	cmp	r1, r3
 8013a3c:	bfde      	ittt	le
 8013a3e:	2330      	movle	r3, #48	@ 0x30
 8013a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013a48:	1b92      	subs	r2, r2, r6
 8013a4a:	6122      	str	r2, [r4, #16]
 8013a4c:	f8cd a000 	str.w	sl, [sp]
 8013a50:	464b      	mov	r3, r9
 8013a52:	aa03      	add	r2, sp, #12
 8013a54:	4621      	mov	r1, r4
 8013a56:	4640      	mov	r0, r8
 8013a58:	f7ff fee6 	bl	8013828 <_printf_common>
 8013a5c:	3001      	adds	r0, #1
 8013a5e:	d14a      	bne.n	8013af6 <_printf_i+0x1f2>
 8013a60:	f04f 30ff 	mov.w	r0, #4294967295
 8013a64:	b004      	add	sp, #16
 8013a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	f043 0320 	orr.w	r3, r3, #32
 8013a70:	6023      	str	r3, [r4, #0]
 8013a72:	4833      	ldr	r0, [pc, #204]	@ (8013b40 <_printf_i+0x23c>)
 8013a74:	2778      	movs	r7, #120	@ 0x78
 8013a76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013a7a:	6823      	ldr	r3, [r4, #0]
 8013a7c:	6831      	ldr	r1, [r6, #0]
 8013a7e:	061f      	lsls	r7, r3, #24
 8013a80:	f851 5b04 	ldr.w	r5, [r1], #4
 8013a84:	d402      	bmi.n	8013a8c <_printf_i+0x188>
 8013a86:	065f      	lsls	r7, r3, #25
 8013a88:	bf48      	it	mi
 8013a8a:	b2ad      	uxthmi	r5, r5
 8013a8c:	6031      	str	r1, [r6, #0]
 8013a8e:	07d9      	lsls	r1, r3, #31
 8013a90:	bf44      	itt	mi
 8013a92:	f043 0320 	orrmi.w	r3, r3, #32
 8013a96:	6023      	strmi	r3, [r4, #0]
 8013a98:	b11d      	cbz	r5, 8013aa2 <_printf_i+0x19e>
 8013a9a:	2310      	movs	r3, #16
 8013a9c:	e7ac      	b.n	80139f8 <_printf_i+0xf4>
 8013a9e:	4827      	ldr	r0, [pc, #156]	@ (8013b3c <_printf_i+0x238>)
 8013aa0:	e7e9      	b.n	8013a76 <_printf_i+0x172>
 8013aa2:	6823      	ldr	r3, [r4, #0]
 8013aa4:	f023 0320 	bic.w	r3, r3, #32
 8013aa8:	6023      	str	r3, [r4, #0]
 8013aaa:	e7f6      	b.n	8013a9a <_printf_i+0x196>
 8013aac:	4616      	mov	r6, r2
 8013aae:	e7bd      	b.n	8013a2c <_printf_i+0x128>
 8013ab0:	6833      	ldr	r3, [r6, #0]
 8013ab2:	6825      	ldr	r5, [r4, #0]
 8013ab4:	6961      	ldr	r1, [r4, #20]
 8013ab6:	1d18      	adds	r0, r3, #4
 8013ab8:	6030      	str	r0, [r6, #0]
 8013aba:	062e      	lsls	r6, r5, #24
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	d501      	bpl.n	8013ac4 <_printf_i+0x1c0>
 8013ac0:	6019      	str	r1, [r3, #0]
 8013ac2:	e002      	b.n	8013aca <_printf_i+0x1c6>
 8013ac4:	0668      	lsls	r0, r5, #25
 8013ac6:	d5fb      	bpl.n	8013ac0 <_printf_i+0x1bc>
 8013ac8:	8019      	strh	r1, [r3, #0]
 8013aca:	2300      	movs	r3, #0
 8013acc:	6123      	str	r3, [r4, #16]
 8013ace:	4616      	mov	r6, r2
 8013ad0:	e7bc      	b.n	8013a4c <_printf_i+0x148>
 8013ad2:	6833      	ldr	r3, [r6, #0]
 8013ad4:	1d1a      	adds	r2, r3, #4
 8013ad6:	6032      	str	r2, [r6, #0]
 8013ad8:	681e      	ldr	r6, [r3, #0]
 8013ada:	6862      	ldr	r2, [r4, #4]
 8013adc:	2100      	movs	r1, #0
 8013ade:	4630      	mov	r0, r6
 8013ae0:	f7ec fb9e 	bl	8000220 <memchr>
 8013ae4:	b108      	cbz	r0, 8013aea <_printf_i+0x1e6>
 8013ae6:	1b80      	subs	r0, r0, r6
 8013ae8:	6060      	str	r0, [r4, #4]
 8013aea:	6863      	ldr	r3, [r4, #4]
 8013aec:	6123      	str	r3, [r4, #16]
 8013aee:	2300      	movs	r3, #0
 8013af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013af4:	e7aa      	b.n	8013a4c <_printf_i+0x148>
 8013af6:	6923      	ldr	r3, [r4, #16]
 8013af8:	4632      	mov	r2, r6
 8013afa:	4649      	mov	r1, r9
 8013afc:	4640      	mov	r0, r8
 8013afe:	47d0      	blx	sl
 8013b00:	3001      	adds	r0, #1
 8013b02:	d0ad      	beq.n	8013a60 <_printf_i+0x15c>
 8013b04:	6823      	ldr	r3, [r4, #0]
 8013b06:	079b      	lsls	r3, r3, #30
 8013b08:	d413      	bmi.n	8013b32 <_printf_i+0x22e>
 8013b0a:	68e0      	ldr	r0, [r4, #12]
 8013b0c:	9b03      	ldr	r3, [sp, #12]
 8013b0e:	4298      	cmp	r0, r3
 8013b10:	bfb8      	it	lt
 8013b12:	4618      	movlt	r0, r3
 8013b14:	e7a6      	b.n	8013a64 <_printf_i+0x160>
 8013b16:	2301      	movs	r3, #1
 8013b18:	4632      	mov	r2, r6
 8013b1a:	4649      	mov	r1, r9
 8013b1c:	4640      	mov	r0, r8
 8013b1e:	47d0      	blx	sl
 8013b20:	3001      	adds	r0, #1
 8013b22:	d09d      	beq.n	8013a60 <_printf_i+0x15c>
 8013b24:	3501      	adds	r5, #1
 8013b26:	68e3      	ldr	r3, [r4, #12]
 8013b28:	9903      	ldr	r1, [sp, #12]
 8013b2a:	1a5b      	subs	r3, r3, r1
 8013b2c:	42ab      	cmp	r3, r5
 8013b2e:	dcf2      	bgt.n	8013b16 <_printf_i+0x212>
 8013b30:	e7eb      	b.n	8013b0a <_printf_i+0x206>
 8013b32:	2500      	movs	r5, #0
 8013b34:	f104 0619 	add.w	r6, r4, #25
 8013b38:	e7f5      	b.n	8013b26 <_printf_i+0x222>
 8013b3a:	bf00      	nop
 8013b3c:	08016e04 	.word	0x08016e04
 8013b40:	08016e15 	.word	0x08016e15

08013b44 <__sflush_r>:
 8013b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b4c:	0716      	lsls	r6, r2, #28
 8013b4e:	4605      	mov	r5, r0
 8013b50:	460c      	mov	r4, r1
 8013b52:	d454      	bmi.n	8013bfe <__sflush_r+0xba>
 8013b54:	684b      	ldr	r3, [r1, #4]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	dc02      	bgt.n	8013b60 <__sflush_r+0x1c>
 8013b5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	dd48      	ble.n	8013bf2 <__sflush_r+0xae>
 8013b60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b62:	2e00      	cmp	r6, #0
 8013b64:	d045      	beq.n	8013bf2 <__sflush_r+0xae>
 8013b66:	2300      	movs	r3, #0
 8013b68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013b6c:	682f      	ldr	r7, [r5, #0]
 8013b6e:	6a21      	ldr	r1, [r4, #32]
 8013b70:	602b      	str	r3, [r5, #0]
 8013b72:	d030      	beq.n	8013bd6 <__sflush_r+0x92>
 8013b74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013b76:	89a3      	ldrh	r3, [r4, #12]
 8013b78:	0759      	lsls	r1, r3, #29
 8013b7a:	d505      	bpl.n	8013b88 <__sflush_r+0x44>
 8013b7c:	6863      	ldr	r3, [r4, #4]
 8013b7e:	1ad2      	subs	r2, r2, r3
 8013b80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013b82:	b10b      	cbz	r3, 8013b88 <__sflush_r+0x44>
 8013b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013b86:	1ad2      	subs	r2, r2, r3
 8013b88:	2300      	movs	r3, #0
 8013b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b8c:	6a21      	ldr	r1, [r4, #32]
 8013b8e:	4628      	mov	r0, r5
 8013b90:	47b0      	blx	r6
 8013b92:	1c43      	adds	r3, r0, #1
 8013b94:	89a3      	ldrh	r3, [r4, #12]
 8013b96:	d106      	bne.n	8013ba6 <__sflush_r+0x62>
 8013b98:	6829      	ldr	r1, [r5, #0]
 8013b9a:	291d      	cmp	r1, #29
 8013b9c:	d82b      	bhi.n	8013bf6 <__sflush_r+0xb2>
 8013b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8013c48 <__sflush_r+0x104>)
 8013ba0:	410a      	asrs	r2, r1
 8013ba2:	07d6      	lsls	r6, r2, #31
 8013ba4:	d427      	bmi.n	8013bf6 <__sflush_r+0xb2>
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	6062      	str	r2, [r4, #4]
 8013baa:	04d9      	lsls	r1, r3, #19
 8013bac:	6922      	ldr	r2, [r4, #16]
 8013bae:	6022      	str	r2, [r4, #0]
 8013bb0:	d504      	bpl.n	8013bbc <__sflush_r+0x78>
 8013bb2:	1c42      	adds	r2, r0, #1
 8013bb4:	d101      	bne.n	8013bba <__sflush_r+0x76>
 8013bb6:	682b      	ldr	r3, [r5, #0]
 8013bb8:	b903      	cbnz	r3, 8013bbc <__sflush_r+0x78>
 8013bba:	6560      	str	r0, [r4, #84]	@ 0x54
 8013bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013bbe:	602f      	str	r7, [r5, #0]
 8013bc0:	b1b9      	cbz	r1, 8013bf2 <__sflush_r+0xae>
 8013bc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013bc6:	4299      	cmp	r1, r3
 8013bc8:	d002      	beq.n	8013bd0 <__sflush_r+0x8c>
 8013bca:	4628      	mov	r0, r5
 8013bcc:	f7ff fbea 	bl	80133a4 <_free_r>
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8013bd4:	e00d      	b.n	8013bf2 <__sflush_r+0xae>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	4628      	mov	r0, r5
 8013bda:	47b0      	blx	r6
 8013bdc:	4602      	mov	r2, r0
 8013bde:	1c50      	adds	r0, r2, #1
 8013be0:	d1c9      	bne.n	8013b76 <__sflush_r+0x32>
 8013be2:	682b      	ldr	r3, [r5, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d0c6      	beq.n	8013b76 <__sflush_r+0x32>
 8013be8:	2b1d      	cmp	r3, #29
 8013bea:	d001      	beq.n	8013bf0 <__sflush_r+0xac>
 8013bec:	2b16      	cmp	r3, #22
 8013bee:	d11e      	bne.n	8013c2e <__sflush_r+0xea>
 8013bf0:	602f      	str	r7, [r5, #0]
 8013bf2:	2000      	movs	r0, #0
 8013bf4:	e022      	b.n	8013c3c <__sflush_r+0xf8>
 8013bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bfa:	b21b      	sxth	r3, r3
 8013bfc:	e01b      	b.n	8013c36 <__sflush_r+0xf2>
 8013bfe:	690f      	ldr	r7, [r1, #16]
 8013c00:	2f00      	cmp	r7, #0
 8013c02:	d0f6      	beq.n	8013bf2 <__sflush_r+0xae>
 8013c04:	0793      	lsls	r3, r2, #30
 8013c06:	680e      	ldr	r6, [r1, #0]
 8013c08:	bf08      	it	eq
 8013c0a:	694b      	ldreq	r3, [r1, #20]
 8013c0c:	600f      	str	r7, [r1, #0]
 8013c0e:	bf18      	it	ne
 8013c10:	2300      	movne	r3, #0
 8013c12:	eba6 0807 	sub.w	r8, r6, r7
 8013c16:	608b      	str	r3, [r1, #8]
 8013c18:	f1b8 0f00 	cmp.w	r8, #0
 8013c1c:	dde9      	ble.n	8013bf2 <__sflush_r+0xae>
 8013c1e:	6a21      	ldr	r1, [r4, #32]
 8013c20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013c22:	4643      	mov	r3, r8
 8013c24:	463a      	mov	r2, r7
 8013c26:	4628      	mov	r0, r5
 8013c28:	47b0      	blx	r6
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	dc08      	bgt.n	8013c40 <__sflush_r+0xfc>
 8013c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c36:	81a3      	strh	r3, [r4, #12]
 8013c38:	f04f 30ff 	mov.w	r0, #4294967295
 8013c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c40:	4407      	add	r7, r0
 8013c42:	eba8 0800 	sub.w	r8, r8, r0
 8013c46:	e7e7      	b.n	8013c18 <__sflush_r+0xd4>
 8013c48:	dfbffffe 	.word	0xdfbffffe

08013c4c <_fflush_r>:
 8013c4c:	b538      	push	{r3, r4, r5, lr}
 8013c4e:	690b      	ldr	r3, [r1, #16]
 8013c50:	4605      	mov	r5, r0
 8013c52:	460c      	mov	r4, r1
 8013c54:	b913      	cbnz	r3, 8013c5c <_fflush_r+0x10>
 8013c56:	2500      	movs	r5, #0
 8013c58:	4628      	mov	r0, r5
 8013c5a:	bd38      	pop	{r3, r4, r5, pc}
 8013c5c:	b118      	cbz	r0, 8013c66 <_fflush_r+0x1a>
 8013c5e:	6a03      	ldr	r3, [r0, #32]
 8013c60:	b90b      	cbnz	r3, 8013c66 <_fflush_r+0x1a>
 8013c62:	f7ff f95d 	bl	8012f20 <__sinit>
 8013c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d0f3      	beq.n	8013c56 <_fflush_r+0xa>
 8013c6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013c70:	07d0      	lsls	r0, r2, #31
 8013c72:	d404      	bmi.n	8013c7e <_fflush_r+0x32>
 8013c74:	0599      	lsls	r1, r3, #22
 8013c76:	d402      	bmi.n	8013c7e <_fflush_r+0x32>
 8013c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c7a:	f7ff fb64 	bl	8013346 <__retarget_lock_acquire_recursive>
 8013c7e:	4628      	mov	r0, r5
 8013c80:	4621      	mov	r1, r4
 8013c82:	f7ff ff5f 	bl	8013b44 <__sflush_r>
 8013c86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013c88:	07da      	lsls	r2, r3, #31
 8013c8a:	4605      	mov	r5, r0
 8013c8c:	d4e4      	bmi.n	8013c58 <_fflush_r+0xc>
 8013c8e:	89a3      	ldrh	r3, [r4, #12]
 8013c90:	059b      	lsls	r3, r3, #22
 8013c92:	d4e1      	bmi.n	8013c58 <_fflush_r+0xc>
 8013c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c96:	f7ff fb57 	bl	8013348 <__retarget_lock_release_recursive>
 8013c9a:	e7dd      	b.n	8013c58 <_fflush_r+0xc>

08013c9c <fiprintf>:
 8013c9c:	b40e      	push	{r1, r2, r3}
 8013c9e:	b503      	push	{r0, r1, lr}
 8013ca0:	4601      	mov	r1, r0
 8013ca2:	ab03      	add	r3, sp, #12
 8013ca4:	4805      	ldr	r0, [pc, #20]	@ (8013cbc <fiprintf+0x20>)
 8013ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013caa:	6800      	ldr	r0, [r0, #0]
 8013cac:	9301      	str	r3, [sp, #4]
 8013cae:	f7ff fca3 	bl	80135f8 <_vfiprintf_r>
 8013cb2:	b002      	add	sp, #8
 8013cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cb8:	b003      	add	sp, #12
 8013cba:	4770      	bx	lr
 8013cbc:	20000038 	.word	0x20000038

08013cc0 <__swhatbuf_r>:
 8013cc0:	b570      	push	{r4, r5, r6, lr}
 8013cc2:	460c      	mov	r4, r1
 8013cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cc8:	2900      	cmp	r1, #0
 8013cca:	b096      	sub	sp, #88	@ 0x58
 8013ccc:	4615      	mov	r5, r2
 8013cce:	461e      	mov	r6, r3
 8013cd0:	da0d      	bge.n	8013cee <__swhatbuf_r+0x2e>
 8013cd2:	89a3      	ldrh	r3, [r4, #12]
 8013cd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013cd8:	f04f 0100 	mov.w	r1, #0
 8013cdc:	bf14      	ite	ne
 8013cde:	2340      	movne	r3, #64	@ 0x40
 8013ce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	6031      	str	r1, [r6, #0]
 8013ce8:	602b      	str	r3, [r5, #0]
 8013cea:	b016      	add	sp, #88	@ 0x58
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	466a      	mov	r2, sp
 8013cf0:	f000 f848 	bl	8013d84 <_fstat_r>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	dbec      	blt.n	8013cd2 <__swhatbuf_r+0x12>
 8013cf8:	9901      	ldr	r1, [sp, #4]
 8013cfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013cfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013d02:	4259      	negs	r1, r3
 8013d04:	4159      	adcs	r1, r3
 8013d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013d0a:	e7eb      	b.n	8013ce4 <__swhatbuf_r+0x24>

08013d0c <__smakebuf_r>:
 8013d0c:	898b      	ldrh	r3, [r1, #12]
 8013d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d10:	079d      	lsls	r5, r3, #30
 8013d12:	4606      	mov	r6, r0
 8013d14:	460c      	mov	r4, r1
 8013d16:	d507      	bpl.n	8013d28 <__smakebuf_r+0x1c>
 8013d18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013d1c:	6023      	str	r3, [r4, #0]
 8013d1e:	6123      	str	r3, [r4, #16]
 8013d20:	2301      	movs	r3, #1
 8013d22:	6163      	str	r3, [r4, #20]
 8013d24:	b003      	add	sp, #12
 8013d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d28:	ab01      	add	r3, sp, #4
 8013d2a:	466a      	mov	r2, sp
 8013d2c:	f7ff ffc8 	bl	8013cc0 <__swhatbuf_r>
 8013d30:	9f00      	ldr	r7, [sp, #0]
 8013d32:	4605      	mov	r5, r0
 8013d34:	4639      	mov	r1, r7
 8013d36:	4630      	mov	r0, r6
 8013d38:	f7ff fba8 	bl	801348c <_malloc_r>
 8013d3c:	b948      	cbnz	r0, 8013d52 <__smakebuf_r+0x46>
 8013d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d42:	059a      	lsls	r2, r3, #22
 8013d44:	d4ee      	bmi.n	8013d24 <__smakebuf_r+0x18>
 8013d46:	f023 0303 	bic.w	r3, r3, #3
 8013d4a:	f043 0302 	orr.w	r3, r3, #2
 8013d4e:	81a3      	strh	r3, [r4, #12]
 8013d50:	e7e2      	b.n	8013d18 <__smakebuf_r+0xc>
 8013d52:	89a3      	ldrh	r3, [r4, #12]
 8013d54:	6020      	str	r0, [r4, #0]
 8013d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d5a:	81a3      	strh	r3, [r4, #12]
 8013d5c:	9b01      	ldr	r3, [sp, #4]
 8013d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013d62:	b15b      	cbz	r3, 8013d7c <__smakebuf_r+0x70>
 8013d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d68:	4630      	mov	r0, r6
 8013d6a:	f000 f81d 	bl	8013da8 <_isatty_r>
 8013d6e:	b128      	cbz	r0, 8013d7c <__smakebuf_r+0x70>
 8013d70:	89a3      	ldrh	r3, [r4, #12]
 8013d72:	f023 0303 	bic.w	r3, r3, #3
 8013d76:	f043 0301 	orr.w	r3, r3, #1
 8013d7a:	81a3      	strh	r3, [r4, #12]
 8013d7c:	89a3      	ldrh	r3, [r4, #12]
 8013d7e:	431d      	orrs	r5, r3
 8013d80:	81a5      	strh	r5, [r4, #12]
 8013d82:	e7cf      	b.n	8013d24 <__smakebuf_r+0x18>

08013d84 <_fstat_r>:
 8013d84:	b538      	push	{r3, r4, r5, lr}
 8013d86:	4d07      	ldr	r5, [pc, #28]	@ (8013da4 <_fstat_r+0x20>)
 8013d88:	2300      	movs	r3, #0
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	4608      	mov	r0, r1
 8013d8e:	4611      	mov	r1, r2
 8013d90:	602b      	str	r3, [r5, #0]
 8013d92:	f7ed fa82 	bl	800129a <_fstat>
 8013d96:	1c43      	adds	r3, r0, #1
 8013d98:	d102      	bne.n	8013da0 <_fstat_r+0x1c>
 8013d9a:	682b      	ldr	r3, [r5, #0]
 8013d9c:	b103      	cbz	r3, 8013da0 <_fstat_r+0x1c>
 8013d9e:	6023      	str	r3, [r4, #0]
 8013da0:	bd38      	pop	{r3, r4, r5, pc}
 8013da2:	bf00      	nop
 8013da4:	20008ce8 	.word	0x20008ce8

08013da8 <_isatty_r>:
 8013da8:	b538      	push	{r3, r4, r5, lr}
 8013daa:	4d06      	ldr	r5, [pc, #24]	@ (8013dc4 <_isatty_r+0x1c>)
 8013dac:	2300      	movs	r3, #0
 8013dae:	4604      	mov	r4, r0
 8013db0:	4608      	mov	r0, r1
 8013db2:	602b      	str	r3, [r5, #0]
 8013db4:	f7ed fa81 	bl	80012ba <_isatty>
 8013db8:	1c43      	adds	r3, r0, #1
 8013dba:	d102      	bne.n	8013dc2 <_isatty_r+0x1a>
 8013dbc:	682b      	ldr	r3, [r5, #0]
 8013dbe:	b103      	cbz	r3, 8013dc2 <_isatty_r+0x1a>
 8013dc0:	6023      	str	r3, [r4, #0]
 8013dc2:	bd38      	pop	{r3, r4, r5, pc}
 8013dc4:	20008ce8 	.word	0x20008ce8

08013dc8 <_sbrk_r>:
 8013dc8:	b538      	push	{r3, r4, r5, lr}
 8013dca:	4d06      	ldr	r5, [pc, #24]	@ (8013de4 <_sbrk_r+0x1c>)
 8013dcc:	2300      	movs	r3, #0
 8013dce:	4604      	mov	r4, r0
 8013dd0:	4608      	mov	r0, r1
 8013dd2:	602b      	str	r3, [r5, #0]
 8013dd4:	f7ed fa8a 	bl	80012ec <_sbrk>
 8013dd8:	1c43      	adds	r3, r0, #1
 8013dda:	d102      	bne.n	8013de2 <_sbrk_r+0x1a>
 8013ddc:	682b      	ldr	r3, [r5, #0]
 8013dde:	b103      	cbz	r3, 8013de2 <_sbrk_r+0x1a>
 8013de0:	6023      	str	r3, [r4, #0]
 8013de2:	bd38      	pop	{r3, r4, r5, pc}
 8013de4:	20008ce8 	.word	0x20008ce8

08013de8 <abort>:
 8013de8:	b508      	push	{r3, lr}
 8013dea:	2006      	movs	r0, #6
 8013dec:	f000 f82c 	bl	8013e48 <raise>
 8013df0:	2001      	movs	r0, #1
 8013df2:	f7ed fa3b 	bl	800126c <_exit>

08013df6 <_raise_r>:
 8013df6:	291f      	cmp	r1, #31
 8013df8:	b538      	push	{r3, r4, r5, lr}
 8013dfa:	4605      	mov	r5, r0
 8013dfc:	460c      	mov	r4, r1
 8013dfe:	d904      	bls.n	8013e0a <_raise_r+0x14>
 8013e00:	2316      	movs	r3, #22
 8013e02:	6003      	str	r3, [r0, #0]
 8013e04:	f04f 30ff 	mov.w	r0, #4294967295
 8013e08:	bd38      	pop	{r3, r4, r5, pc}
 8013e0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013e0c:	b112      	cbz	r2, 8013e14 <_raise_r+0x1e>
 8013e0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e12:	b94b      	cbnz	r3, 8013e28 <_raise_r+0x32>
 8013e14:	4628      	mov	r0, r5
 8013e16:	f000 f831 	bl	8013e7c <_getpid_r>
 8013e1a:	4622      	mov	r2, r4
 8013e1c:	4601      	mov	r1, r0
 8013e1e:	4628      	mov	r0, r5
 8013e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e24:	f000 b818 	b.w	8013e58 <_kill_r>
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d00a      	beq.n	8013e42 <_raise_r+0x4c>
 8013e2c:	1c59      	adds	r1, r3, #1
 8013e2e:	d103      	bne.n	8013e38 <_raise_r+0x42>
 8013e30:	2316      	movs	r3, #22
 8013e32:	6003      	str	r3, [r0, #0]
 8013e34:	2001      	movs	r0, #1
 8013e36:	e7e7      	b.n	8013e08 <_raise_r+0x12>
 8013e38:	2100      	movs	r1, #0
 8013e3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013e3e:	4620      	mov	r0, r4
 8013e40:	4798      	blx	r3
 8013e42:	2000      	movs	r0, #0
 8013e44:	e7e0      	b.n	8013e08 <_raise_r+0x12>
	...

08013e48 <raise>:
 8013e48:	4b02      	ldr	r3, [pc, #8]	@ (8013e54 <raise+0xc>)
 8013e4a:	4601      	mov	r1, r0
 8013e4c:	6818      	ldr	r0, [r3, #0]
 8013e4e:	f7ff bfd2 	b.w	8013df6 <_raise_r>
 8013e52:	bf00      	nop
 8013e54:	20000038 	.word	0x20000038

08013e58 <_kill_r>:
 8013e58:	b538      	push	{r3, r4, r5, lr}
 8013e5a:	4d07      	ldr	r5, [pc, #28]	@ (8013e78 <_kill_r+0x20>)
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	4604      	mov	r4, r0
 8013e60:	4608      	mov	r0, r1
 8013e62:	4611      	mov	r1, r2
 8013e64:	602b      	str	r3, [r5, #0]
 8013e66:	f7ed f9ef 	bl	8001248 <_kill>
 8013e6a:	1c43      	adds	r3, r0, #1
 8013e6c:	d102      	bne.n	8013e74 <_kill_r+0x1c>
 8013e6e:	682b      	ldr	r3, [r5, #0]
 8013e70:	b103      	cbz	r3, 8013e74 <_kill_r+0x1c>
 8013e72:	6023      	str	r3, [r4, #0]
 8013e74:	bd38      	pop	{r3, r4, r5, pc}
 8013e76:	bf00      	nop
 8013e78:	20008ce8 	.word	0x20008ce8

08013e7c <_getpid_r>:
 8013e7c:	f7ed b9dc 	b.w	8001238 <_getpid>

08013e80 <_init>:
 8013e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e82:	bf00      	nop
 8013e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e86:	bc08      	pop	{r3}
 8013e88:	469e      	mov	lr, r3
 8013e8a:	4770      	bx	lr

08013e8c <_fini>:
 8013e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e8e:	bf00      	nop
 8013e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e92:	bc08      	pop	{r3}
 8013e94:	469e      	mov	lr, r3
 8013e96:	4770      	bx	lr
