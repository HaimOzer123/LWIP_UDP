
LWIP_UDP_FProj_HaimOzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016838  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032f8  08016a08  08016a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019d00  08019d00  0001b1c8  2**0
                  CONTENTS
  4 .ARM          00000008  08019d00  08019d00  0001ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019d08  08019d08  0001b1c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019d08  08019d08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019d0c  08019d0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08019d10  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08019d98  0001b088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08019e38  0001b128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d00  200001c8  08019ed8  0001b1c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008ec8  08019ed8  0001bec8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001b1c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003400f  00000000  00000000  0001b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008006  00000000  00000000  0004f207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002798  00000000  00000000  00057210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f5b  00000000  00000000  000599a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039b2f  00000000  00000000  0005b903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044452  00000000  00000000  00095432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116dd1  00000000  00000000  000d9884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001f0655  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ae64  00000000  00000000  001f0698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  001fb4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080169f0 	.word	0x080169f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	080169f0 	.word	0x080169f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 fb98 	bl	8001ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f822 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fb7e 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 fb56 	bl	8000c70 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 faf6 	bl	8000bb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 fb24 	bl	8000c14 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005cc:	f009 fdc0 	bl	800a150 <MX_LWIP_Init>
  MX_UART5_Init();
 80005d0:	f000 fa90 	bl	8000af4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 fabe 	bl	8000b54 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d8:	f000 f87a 	bl	80006d0 <MX_ADC1_Init>
  MX_DAC_Init();
 80005dc:	f000 f8ca 	bl	8000774 <MX_DAC_Init>
  MX_TIM2_Init();
 80005e0:	f000 f9ea 	bl	80009b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e4:	f000 fa36 	bl	8000a54 <MX_TIM3_Init>
  MX_SPI1_Init();
 80005e8:	f000 f96e 	bl	80008c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005ec:	f000 f9aa 	bl	8000944 <MX_SPI2_Init>
  MX_I2C2_Init();
 80005f0:	f000 f8ea 	bl	80007c8 <MX_I2C2_Init>
  MX_I2C4_Init();
 80005f4:	f000 f928 	bl	8000848 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rtg_main();
 80005f8:	f014 fad8 	bl	8014bac <rtg_main>
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0x4c>

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f015 fb96 	bl	8015d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f005 f8e4 	bl	80057f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a26      	ldr	r2, [pc, #152]	@ (80006c8 <SystemClock_Config+0xc8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	@ (80006cc <SystemClock_Config+0xcc>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000674:	2348      	movs	r3, #72	@ 0x48
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800067c:	2303      	movs	r3, #3
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f005 f8c3 	bl	8005810 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 fbd2 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 fb51 	bl	8005d58 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 fbbc 	bl	8000e38 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	@ 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <MX_ADC1_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <MX_ADC1_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_ADC1_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000730:	f001 fb5c 	bl	8001dec <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fb7d 	bl	8000e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000750:	f001 fe58 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fb6d 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001e4 	.word	0x200001e4
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_DAC_Init+0x4c>)
 8000784:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <MX_DAC_Init+0x50>)
 8000786:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000788:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <MX_DAC_Init+0x4c>)
 800078a:	f002 f9a6 	bl	8002ada <HAL_DAC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000794:	f000 fb50 	bl	8000e38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <MX_DAC_Init+0x4c>)
 80007a8:	f002 fa1d 	bl	8002be6 <HAL_DAC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007b2:	f000 fb41 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000022c 	.word	0x2000022c
 80007c4:	40007400 	.word	0x40007400

080007c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_I2C2_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_I2C2_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_I2C2_Init+0x74>)
 80007d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <MX_I2C2_Init+0x7c>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 88;
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_I2C2_Init+0x74>)
 80007da:	2258      	movs	r2, #88	@ 0x58
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_I2C2_Init+0x74>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000802:	480e      	ldr	r0, [pc, #56]	@ (800083c <MX_I2C2_Init+0x74>)
 8000804:	f004 f970 	bl	8004ae8 <HAL_I2C_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800080e:	f000 fb13 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <MX_I2C2_Init+0x74>)
 8000816:	f004 fe0b 	bl	8005430 <HAL_I2CEx_ConfigAnalogFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 fb0a 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_I2C2_Init+0x74>)
 8000828:	f004 fe4d 	bl	80054c6 <HAL_I2CEx_ConfigDigitalFilter>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 fb01 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000240 	.word	0x20000240
 8000840:	40005800 	.word	0x40005800
 8000844:	00808cd2 	.word	0x00808cd2

08000848 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_I2C4_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <MX_I2C4_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_I2C4_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 88;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_I2C4_Init+0x74>)
 800085a:	2258      	movs	r2, #88	@ 0x58
 800085c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_I2C4_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C4_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000884:	f004 f930 	bl	8004ae8 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fad3 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_I2C4_Init+0x74>)
 8000896:	f004 fdcb 	bl	8005430 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 faca 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_I2C4_Init+0x74>)
 80008a8:	f004 fe0d 	bl	80054c6 <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fac1 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000294 	.word	0x20000294
 80008c0:	40006000 	.word	0x40006000
 80008c4:	00808cd2 	.word	0x00808cd2

080008c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_SPI1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <MX_SPI1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_SPI1_Init+0x74>)
 80008d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_SPI1_Init+0x74>)
 80008e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_SPI1_Init+0x74>)
 80008f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_SPI1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_SPI1_Init+0x74>)
 8000916:	2207      	movs	r2, #7
 8000918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_SPI1_Init+0x74>)
 8000922:	2208      	movs	r2, #8
 8000924:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_SPI1_Init+0x74>)
 8000928:	f006 f82c 	bl	8006984 <HAL_SPI_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fa81 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200002e8 	.word	0x200002e8
 8000940:	40013000 	.word	0x40013000

08000944 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800094a:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <MX_SPI2_Init+0x70>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800095c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000960:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800098a:	2207      	movs	r2, #7
 800098c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 8000996:	2200      	movs	r2, #0
 8000998:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_SPI2_Init+0x6c>)
 800099c:	f005 fff2 	bl	8006984 <HAL_SPI_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009a6:	f000 fa47 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000034c 	.word	0x2000034c
 80009b4:	40003800 	.word	0x40003800

080009b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600;
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009e0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80009e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009e8:	2210      	movs	r2, #16
 80009ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_TIM2_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a00:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <MX_TIM2_Init+0x98>)
 8000a02:	f007 f825 	bl	8007a50 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 fa14 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <MX_TIM2_Init+0x98>)
 8000a1e:	f007 fa35 	bl	8007e8c <HAL_TIM_ConfigClockSource>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a28:	f000 fa06 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_TIM2_Init+0x98>)
 8000a3a:	f007 fc53 	bl	80082e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a44:	f000 f9f8 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200003b0 	.word	0x200003b0

08000a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a74:	4a1e      	ldr	r2, [pc, #120]	@ (8000af0 <MX_TIM3_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a7a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a82:	2210      	movs	r2, #16
 8000a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a88:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a9a:	4814      	ldr	r0, [pc, #80]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000a9c:	f006 ffd8 	bl	8007a50 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000aa6:	f000 f9c7 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000ab8:	f007 f9e8 	bl	8007e8c <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000ac2:	f000 f9b9 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_TIM3_Init+0x98>)
 8000ad4:	f007 fc06 	bl	80082e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000ade:	f000 f9ab 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200003fc 	.word	0x200003fc
 8000af0:	40000400 	.word	0x40000400

08000af4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <MX_UART5_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_UART5_Init+0x58>)
 8000b38:	f007 fc80 	bl	800843c <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 f979 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000448 	.word	0x20000448
 8000b50:	40005000 	.word	0x40005000

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <MX_USART2_UART_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_USART2_UART_Init+0x58>)
 8000b98:	f007 fc50 	bl	800843c <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 f949 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200004d0 	.word	0x200004d0
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <MX_USART3_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf8:	f007 fc20 	bl	800843c <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f919 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000558 	.word	0x20000558
 8000c10:	40004800 	.word	0x40004800

08000c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2206      	movs	r2, #6
 8000c24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c58:	f004 fc81 	bl	800555e <HAL_PCD_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 f8e9 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200006a0 	.word	0x200006a0

08000c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_DMA_Init+0x48>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <MX_DMA_Init+0x48>)
 8000c7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <MX_DMA_Init+0x48>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	200b      	movs	r0, #11
 8000c94:	f001 feeb 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c98:	200b      	movs	r0, #11
 8000c9a:	f001 ff04 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2010      	movs	r0, #16
 8000ca4:	f001 fee3 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ca8:	2010      	movs	r0, #16
 8000caa:	f001 fefc 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	@ 0x30
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b55      	ldr	r3, [pc, #340]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a54      	ldr	r2, [pc, #336]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b52      	ldr	r3, [pc, #328]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cea:	4b4f      	ldr	r3, [pc, #316]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a4e      	ldr	r2, [pc, #312]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a48      	ldr	r2, [pc, #288]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a42      	ldr	r2, [pc, #264]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b40      	ldr	r3, [pc, #256]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a3c      	ldr	r2, [pc, #240]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a36      	ldr	r2, [pc, #216]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d62:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a30      	ldr	r2, [pc, #192]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <MX_GPIO_Init+0x16c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d80:	482a      	ldr	r0, [pc, #168]	@ (8000e2c <MX_GPIO_Init+0x170>)
 8000d82:	f003 fe97 	bl	8004ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	@ 0x40
 8000d8a:	4829      	ldr	r0, [pc, #164]	@ (8000e30 <MX_GPIO_Init+0x174>)
 8000d8c:	f003 fe92 	bl	8004ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4823      	ldr	r0, [pc, #140]	@ (8000e34 <MX_GPIO_Init+0x178>)
 8000da8:	f003 fcd8 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dac:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4819      	ldr	r0, [pc, #100]	@ (8000e2c <MX_GPIO_Init+0x170>)
 8000dc6:	f003 fcc9 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4813      	ldr	r0, [pc, #76]	@ (8000e30 <MX_GPIO_Init+0x174>)
 8000de2:	f003 fcbb 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_GPIO_Init+0x174>)
 8000dfa:	f003 fcaf 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e10:	2308      	movs	r3, #8
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <MX_GPIO_Init+0x178>)
 8000e1c:	f003 fc9e 	bl	800475c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	@ 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40020800 	.word	0x40020800

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a19      	ldr	r2, [pc, #100]	@ (8000f10 <HAL_ADC_MspInit+0x84>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12b      	bne.n	8000f06 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <HAL_ADC_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <HAL_ADC_MspInit+0x8c>)
 8000ef2:	f003 fc33 	bl	800475c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2012      	movs	r0, #18
 8000efc:	f001 fdb7 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f00:	2012      	movs	r0, #18
 8000f02:	f001 fdd0 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	@ 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40012000 	.word	0x40012000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	@ (8000fa0 <HAL_DAC_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_DAC_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <HAL_DAC_MspInit+0x8c>)
 8000f82:	f003 fbeb 	bl	800475c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2036      	movs	r0, #54	@ 0x36
 8000f8c:	f001 fd6f 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f90:	2036      	movs	r0, #54	@ 0x36
 8000f92:	f001 fd88 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40007400 	.word	0x40007400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0ac      	sub	sp, #176	@ 0xb0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	2284      	movs	r2, #132	@ 0x84
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f014 feb7 	bl	8015d40 <memset>
  if(hi2c->Instance==I2C2)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a4c      	ldr	r2, [pc, #304]	@ (8001108 <HAL_I2C_MspInit+0x15c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d145      	bne.n	8001068 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 f8d9 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ff8:	f7ff ff1e 	bl	8000e38 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffc:	4b43      	ldr	r3, [pc, #268]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001000:	4a42      	ldr	r2, [pc, #264]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6313      	str	r3, [r2, #48]	@ 0x30
 8001008:	4b40      	ldr	r3, [pc, #256]	@ (800110c <HAL_I2C_MspInit+0x160>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001014:	2303      	movs	r3, #3
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800102c:	2304      	movs	r3, #4
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001032:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001036:	4619      	mov	r1, r3
 8001038:	4835      	ldr	r0, [pc, #212]	@ (8001110 <HAL_I2C_MspInit+0x164>)
 800103a:	f003 fb8f 	bl	800475c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800103e:	4b33      	ldr	r3, [pc, #204]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a32      	ldr	r2, [pc, #200]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b30      	ldr	r3, [pc, #192]	@ (800110c <HAL_I2C_MspInit+0x160>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2021      	movs	r0, #33	@ 0x21
 800105c:	f001 fd07 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001060:	2021      	movs	r0, #33	@ 0x21
 8001062:	f001 fd20 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001066:	e04a      	b.n	80010fe <HAL_I2C_MspInit+0x152>
  else if(hi2c->Instance==I2C4)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a29      	ldr	r2, [pc, #164]	@ (8001114 <HAL_I2C_MspInit+0x168>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d145      	bne.n	80010fe <HAL_I2C_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001072:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001076:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	4618      	mov	r0, r3
 8001084:	f005 f88e 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_I2C_MspInit+0xe6>
      Error_Handler();
 800108e:	f7ff fed3 	bl	8000e38 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001092:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <HAL_I2C_MspInit+0x160>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ce:	4619      	mov	r1, r3
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <HAL_I2C_MspInit+0x164>)
 80010d2:	f003 fb43 	bl	800475c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_I2C_MspInit+0x160>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	205f      	movs	r0, #95	@ 0x5f
 80010f4:	f001 fcbb 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80010f8:	205f      	movs	r0, #95	@ 0x5f
 80010fa:	f001 fcd4 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	37b0      	adds	r7, #176	@ 0xb0
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40005800 	.word	0x40005800
 800110c:	40023800 	.word	0x40023800
 8001110:	40021400 	.word	0x40021400
 8001114:	40006000 	.word	0x40006000

08001118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	@ 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a52      	ldr	r2, [pc, #328]	@ (8001280 <HAL_SPI_MspInit+0x168>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d14c      	bne.n	80011d4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113a:	4b52      	ldr	r3, [pc, #328]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a51      	ldr	r2, [pc, #324]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800114e:	623b      	str	r3, [r7, #32]
 8001150:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b4c      	ldr	r3, [pc, #304]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a4b      	ldr	r2, [pc, #300]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b49      	ldr	r3, [pc, #292]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a45      	ldr	r2, [pc, #276]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001182:	2360      	movs	r3, #96	@ 0x60
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001192:	2305      	movs	r3, #5
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	483a      	ldr	r0, [pc, #232]	@ (8001288 <HAL_SPI_MspInit+0x170>)
 800119e:	f003 fadd 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011a2:	2320      	movs	r3, #32
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b2:	2305      	movs	r3, #5
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4833      	ldr	r0, [pc, #204]	@ (800128c <HAL_SPI_MspInit+0x174>)
 80011be:	f003 facd 	bl	800475c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2023      	movs	r0, #35	@ 0x23
 80011c8:	f001 fc51 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011cc:	2023      	movs	r0, #35	@ 0x23
 80011ce:	f001 fc6a 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011d2:	e051      	b.n	8001278 <HAL_SPI_MspInit+0x160>
  else if(hspi->Instance==SPI2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001290 <HAL_SPI_MspInit+0x178>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d14c      	bne.n	8001278 <HAL_SPI_MspInit+0x160>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011de:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a22      	ldr	r2, [pc, #136]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_SPI_MspInit+0x16c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001226:	230c      	movs	r3, #12
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001236:	2305      	movs	r3, #5
 8001238:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	4814      	ldr	r0, [pc, #80]	@ (8001294 <HAL_SPI_MspInit+0x17c>)
 8001242:	f003 fa8b 	bl	800475c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001258:	2305      	movs	r3, #5
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <HAL_SPI_MspInit+0x174>)
 8001264:	f003 fa7a 	bl	800475c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2024      	movs	r0, #36	@ 0x24
 800126e:	f001 fbfe 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001272:	2024      	movs	r0, #36	@ 0x24
 8001274:	f001 fc17 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3738      	adds	r7, #56	@ 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40013000 	.word	0x40013000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40003800 	.word	0x40003800
 8001294:	40020800 	.word	0x40020800

08001298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a8:	d114      	bne.n	80012d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	201c      	movs	r0, #28
 80012c8:	f001 fbd1 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012cc:	201c      	movs	r0, #28
 80012ce:	f001 fbea 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012d2:	e018      	b.n	8001306 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <HAL_TIM_Base_MspInit+0x7c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d113      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_TIM_Base_MspInit+0x78>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201d      	movs	r0, #29
 80012fc:	f001 fbb7 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001300:	201d      	movs	r0, #29
 8001302:	f001 fbd0 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40000400 	.word	0x40000400

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0b0      	sub	sp, #192	@ 0xc0
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001334:	2284      	movs	r2, #132	@ 0x84
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f014 fd01 	bl	8015d40 <memset>
  if(huart->Instance==UART5)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4aad      	ldr	r2, [pc, #692]	@ (80015f8 <HAL_UART_MspInit+0x2e0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f040 8097 	bne.w	8001478 <HAL_UART_MspInit+0x160>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800134a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001354:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001358:	4618      	mov	r0, r3
 800135a:	f004 ff23 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001364:	f7ff fd68 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001368:	4ba4      	ldr	r3, [pc, #656]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	4aa3      	ldr	r2, [pc, #652]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800136e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001372:	6413      	str	r3, [r2, #64]	@ 0x40
 8001374:	4ba1      	ldr	r3, [pc, #644]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001380:	4b9e      	ldr	r3, [pc, #632]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	4a9d      	ldr	r2, [pc, #628]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6313      	str	r3, [r2, #48]	@ 0x30
 800138c:	4b9b      	ldr	r3, [pc, #620]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001398:	4b98      	ldr	r3, [pc, #608]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	4a97      	ldr	r2, [pc, #604]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a4:	4b95      	ldr	r3, [pc, #596]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013ca:	2308      	movs	r3, #8
 80013cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013d4:	4619      	mov	r1, r3
 80013d6:	488a      	ldr	r0, [pc, #552]	@ (8001600 <HAL_UART_MspInit+0x2e8>)
 80013d8:	f003 f9c0 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013dc:	2304      	movs	r3, #4
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013f4:	2308      	movs	r3, #8
 80013f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013fe:	4619      	mov	r1, r3
 8001400:	4880      	ldr	r0, [pc, #512]	@ (8001604 <HAL_UART_MspInit+0x2ec>)
 8001402:	f003 f9ab 	bl	800475c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001406:	4b80      	ldr	r3, [pc, #512]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001408:	4a80      	ldr	r2, [pc, #512]	@ (800160c <HAL_UART_MspInit+0x2f4>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800140c:	4b7e      	ldr	r3, [pc, #504]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800140e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001412:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001414:	4b7c      	ldr	r3, [pc, #496]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b7b      	ldr	r3, [pc, #492]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b79      	ldr	r3, [pc, #484]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001428:	4b77      	ldr	r3, [pc, #476]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142e:	4b76      	ldr	r3, [pc, #472]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001434:	4b74      	ldr	r3, [pc, #464]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800143c:	4b72      	ldr	r3, [pc, #456]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800143e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001442:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001444:	4b70      	ldr	r3, [pc, #448]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800144a:	486f      	ldr	r0, [pc, #444]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800144c:	f001 fc24 	bl	8002c98 <HAL_DMA_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001456:	f7ff fcef 	bl	8000e38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a6a      	ldr	r2, [pc, #424]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 800145e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001460:	4a69      	ldr	r2, [pc, #420]	@ (8001608 <HAL_UART_MspInit+0x2f0>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2035      	movs	r0, #53	@ 0x35
 800146c:	f001 faff 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001470:	2035      	movs	r0, #53	@ 0x35
 8001472:	f001 fb18 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001476:	e0ba      	b.n	80015ee <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a64      	ldr	r2, [pc, #400]	@ (8001610 <HAL_UART_MspInit+0x2f8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d173      	bne.n	800156a <HAL_UART_MspInit+0x252>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001486:	2300      	movs	r3, #0
 8001488:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fe88 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_UART_MspInit+0x186>
      Error_Handler();
 800149a:	f7ff fccd 	bl	8000e38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a56      	ldr	r2, [pc, #344]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b51      	ldr	r3, [pc, #324]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a50      	ldr	r2, [pc, #320]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b4e      	ldr	r3, [pc, #312]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014ce:	2360      	movs	r3, #96	@ 0x60
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014da:	2301      	movs	r3, #1
 80014dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e6:	2307      	movs	r3, #7
 80014e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014f0:	4619      	mov	r1, r3
 80014f2:	4844      	ldr	r0, [pc, #272]	@ (8001604 <HAL_UART_MspInit+0x2ec>)
 80014f4:	f003 f932 	bl	800475c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014f8:	4b46      	ldr	r3, [pc, #280]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 80014fa:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <HAL_UART_MspInit+0x300>)
 80014fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014fe:	4b45      	ldr	r3, [pc, #276]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001500:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001504:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001506:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150c:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001512:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001514:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001518:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151a:	4b3e      	ldr	r3, [pc, #248]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001520:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001526:	4b3b      	ldr	r3, [pc, #236]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800152e:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001534:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001536:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800153c:	4835      	ldr	r0, [pc, #212]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 800153e:	f001 fbab 	bl	8002c98 <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_UART_MspInit+0x234>
      Error_Handler();
 8001548:	f7ff fc76 	bl	8000e38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a31      	ldr	r2, [pc, #196]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001550:	675a      	str	r2, [r3, #116]	@ 0x74
 8001552:	4a30      	ldr	r2, [pc, #192]	@ (8001614 <HAL_UART_MspInit+0x2fc>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2026      	movs	r0, #38	@ 0x26
 800155e:	f001 fa86 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001562:	2026      	movs	r0, #38	@ 0x26
 8001564:	f001 fa9f 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8001568:	e041      	b.n	80015ee <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2b      	ldr	r2, [pc, #172]	@ (800161c <HAL_UART_MspInit+0x304>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d13c      	bne.n	80015ee <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800157a:	2300      	movs	r3, #0
 800157c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fe0e 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 800158e:	f7ff fc53 	bl	8000e38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_UART_MspInit+0x2e4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015e6:	4619      	mov	r1, r3
 80015e8:	4806      	ldr	r0, [pc, #24]	@ (8001604 <HAL_UART_MspInit+0x2ec>)
 80015ea:	f003 f8b7 	bl	800475c <HAL_GPIO_Init>
}
 80015ee:	bf00      	nop
 80015f0:	37c0      	adds	r7, #192	@ 0xc0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005000 	.word	0x40005000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	200005e0 	.word	0x200005e0
 800160c:	40026010 	.word	0x40026010
 8001610:	40004400 	.word	0x40004400
 8001614:	20000640 	.word	0x20000640
 8001618:	40026088 	.word	0x40026088
 800161c:	40004800 	.word	0x40004800

08001620 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ac      	sub	sp, #176	@ 0xb0
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	2284      	movs	r2, #132	@ 0x84
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f014 fb7d 	bl	8015d40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800164e:	d159      	bne.n	8001704 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001650:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001654:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fd9f 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800166c:	f7ff fbe4 	bl	8000e38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <HAL_PCD_MspInit+0xec>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001674:	4a25      	ldr	r2, [pc, #148]	@ (800170c <HAL_PCD_MspInit+0xec>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6313      	str	r3, [r2, #48]	@ 0x30
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_PCD_MspInit+0xec>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001688:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800168c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016a2:	230a      	movs	r3, #10
 80016a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ac:	4619      	mov	r1, r3
 80016ae:	4818      	ldr	r0, [pc, #96]	@ (8001710 <HAL_PCD_MspInit+0xf0>)
 80016b0:	f003 f854 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016cc:	4619      	mov	r1, r3
 80016ce:	4810      	ldr	r0, [pc, #64]	@ (8001710 <HAL_PCD_MspInit+0xf0>)
 80016d0:	f003 f844 	bl	800475c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016d4:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d8:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016de:	6353      	str	r3, [r2, #52]	@ 0x34
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	4a06      	ldr	r2, [pc, #24]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <HAL_PCD_MspInit+0xec>)
 80016fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	37b0      	adds	r7, #176	@ 0xb0
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 fafb 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA1_Stream0_IRQHandler+0x10>)
 800177a:	f001 fbcd 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200005e0 	.word	0x200005e0

08001788 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA1_Stream5_IRQHandler+0x10>)
 800178e:	f001 fbc3 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000640 	.word	0x20000640

0800179c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <ADC_IRQHandler+0x10>)
 80017a2:	f000 fcf4 	bl	800218e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001e4 	.word	0x200001e4

080017b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <TIM2_IRQHandler+0x10>)
 80017b6:	f006 fa4a 	bl	8007c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200003b0 	.word	0x200003b0

080017c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <TIM3_IRQHandler+0x10>)
 80017ca:	f006 fa40 	bl	8007c4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003fc 	.word	0x200003fc

080017d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <I2C2_EV_IRQHandler+0x10>)
 80017de:	f003 fc0f 	bl	8005000 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000240 	.word	0x20000240

080017ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <SPI1_IRQHandler+0x10>)
 80017f2:	f005 fc41 	bl	8007078 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200002e8 	.word	0x200002e8

08001800 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <SPI2_IRQHandler+0x10>)
 8001806:	f005 fc37 	bl	8007078 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000034c 	.word	0x2000034c

08001814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <USART2_IRQHandler+0x10>)
 800181a:	f006 ffe9 	bl	80087f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200004d0 	.word	0x200004d0

08001828 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <UART5_IRQHandler+0x10>)
 800182e:	f006 ffdf 	bl	80087f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000448 	.word	0x20000448

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f001 f96c 	bl	8002b1e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000022c 	.word	0x2000022c

08001850 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <ETH_IRQHandler+0x10>)
 8001856:	f002 f89b 	bl	8003990 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20005588 	.word	0x20005588

08001864 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <ETH_WKUP_IRQHandler+0x10>)
 800186a:	f002 f891 	bl	8003990 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20005588 	.word	0x20005588

08001878 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <I2C4_EV_IRQHandler+0x10>)
 800187e:	f003 fbbf 	bl	8005000 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000294 	.word	0x20000294

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a6:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <_kill+0x20>)
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20008eb8 	.word	0x20008eb8

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe5 	bl	800189c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <_exit+0x12>

080018d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_isatty>:

int _isatty(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d205      	bcs.n	800197c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <_sbrk+0x6c>)
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	20050000 	.word	0x20050000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	20000ba8 	.word	0x20000ba8
 80019a8:	20008ec8 	.word	0x20008ec8
 80019ac:	20008eb8 	.word	0x20008eb8

080019b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d8:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019da:	490e      	ldr	r1, [pc, #56]	@ (8001a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019fe:	f7ff ffd7 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f014 fa2b 	bl	8015e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7fe fdd3 	bl	80005b0 <main>
  bx  lr    
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a18:	08019d10 	.word	0x08019d10
  ldr r2, =_sbss
 8001a1c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001a20:	20008ec8 	.word	0x20008ec8

08001a24 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <CAN1_RX0_IRQHandler>

08001a26 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <LAN8742_RegisterBusIO+0x28>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <LAN8742_RegisterBusIO+0x28>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <LAN8742_RegisterBusIO+0x28>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e014      	b.n	8001a7e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d17c      	bne.n	8001ba4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e01c      	b.n	8001afe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f107 0208 	add.w	r2, r7, #8
 8001acc:	2112      	movs	r1, #18
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	4798      	blx	r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da03      	bge.n	8001ae0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001ad8:	f06f 0304 	mvn.w	r3, #4
 8001adc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001ade:	e00b      	b.n	8001af8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d105      	bne.n	8001af8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
         break;
 8001af6:	e005      	b.n	8001b04 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b1f      	cmp	r3, #31
 8001b02:	d9df      	bls.n	8001ac4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b1f      	cmp	r3, #31
 8001b0a:	d902      	bls.n	8001b12 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b0c:	f06f 0302 	mvn.w	r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d145      	bne.n	8001ba4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6810      	ldr	r0, [r2, #0]
 8001b20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b24:	2100      	movs	r1, #0
 8001b26:	4798      	blx	r3
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db37      	blt.n	8001b9e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6810      	ldr	r0, [r2, #0]
 8001b36:	f107 0208 	add.w	r2, r7, #8
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4798      	blx	r3
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db28      	blt.n	8001b96 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4798      	blx	r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b4e:	e01c      	b.n	8001b8a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4798      	blx	r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b62:	d80e      	bhi.n	8001b82 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6810      	ldr	r0, [r2, #0]
 8001b6c:	f107 0208 	add.w	r2, r7, #8
 8001b70:	2100      	movs	r1, #0
 8001b72:	4798      	blx	r3
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da07      	bge.n	8001b8a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001b7a:	f06f 0304 	mvn.w	r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
                 break;
 8001b80:	e010      	b.n	8001ba4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001b82:	f06f 0301 	mvn.w	r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
               break;
 8001b88:	e00c      	b.n	8001ba4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1dd      	bne.n	8001b50 <LAN8742_Init+0xc6>
 8001b94:	e006      	b.n	8001ba4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001b96:	f06f 0304 	mvn.w	r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	e002      	b.n	8001ba4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001b9e:	f06f 0303 	mvn.w	r3, #3
 8001ba2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d112      	bne.n	8001bd0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	4798      	blx	r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001bb4:	bf00      	nop
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4798      	blx	r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001bc8:	d9f5      	bls.n	8001bb6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 }
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6810      	ldr	r0, [r2, #0]
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4798      	blx	r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da02      	bge.n	8001c02 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bfc:	f06f 0304 	mvn.w	r3, #4
 8001c00:	e06e      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6810      	ldr	r0, [r2, #0]
 8001c0a:	f107 020c 	add.w	r2, r7, #12
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4798      	blx	r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da02      	bge.n	8001c1e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c18:	f06f 0304 	mvn.w	r3, #4
 8001c1c:	e060      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e059      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6810      	ldr	r0, [r2, #0]
 8001c34:	f107 020c 	add.w	r2, r7, #12
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4798      	blx	r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da02      	bge.n	8001c48 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c42:	f06f 0304 	mvn.w	r3, #4
 8001c46:	e04b      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d11b      	bne.n	8001c8a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <LAN8742_GetLinkState+0x90>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c66:	2302      	movs	r3, #2
 8001c68:	e03a      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e033      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c82:	2304      	movs	r3, #4
 8001c84:	e02c      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c86:	2305      	movs	r3, #5
 8001c88:	e02a      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6810      	ldr	r0, [r2, #0]
 8001c92:	f107 020c 	add.w	r2, r7, #12
 8001c96:	211f      	movs	r1, #31
 8001c98:	4798      	blx	r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da02      	bge.n	8001ca6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001ca0:	f06f 0304 	mvn.w	r3, #4
 8001ca4:	e01c      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	e015      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 031c 	and.w	r3, r3, #28
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	d101      	bne.n	8001cc2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00e      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 031c 	and.w	r3, r3, #28
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d101      	bne.n	8001cd0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e007      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 031c 	and.w	r3, r3, #28
 8001cd6:	2b14      	cmp	r3, #20
 8001cd8:	d101      	bne.n	8001cde <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e000      	b.n	8001ce0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cde:	2305      	movs	r3, #5
    }				
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 feb3 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f806 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff f8a4 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fecd 	bl	8002ac2 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 fe95 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000bac 	.word	0x20000bac

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000bac 	.word	0x20000bac

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e031      	b.n	8001e66 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff f83e 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_ADC_Init+0x84>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fc38 	bl	80026b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	ffffeefd 	.word	0xffffeefd

08001e74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Start+0x1a>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e0ad      	b.n	8001fea <HAL_ADC_Start+0x176>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d018      	beq.n	8001ed6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001eb4:	4b50      	ldr	r3, [pc, #320]	@ (8001ff8 <HAL_ADC_Start+0x184>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a50      	ldr	r2, [pc, #320]	@ (8001ffc <HAL_ADC_Start+0x188>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9a      	lsrs	r2, r3, #18
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d175      	bne.n	8001fd0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ee8:	4b45      	ldr	r3, [pc, #276]	@ (8002000 <HAL_ADC_Start+0x18c>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f1e:	d106      	bne.n	8001f2e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f24:	f023 0206 	bic.w	r2, r3, #6
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f46:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <HAL_ADC_Start+0x190>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d143      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	e03a      	b.n	8001fe8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a24      	ldr	r2, [pc, #144]	@ (8002008 <HAL_ADC_Start+0x194>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10e      	bne.n	8001f9a <HAL_ADC_Start+0x126>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f98:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <HAL_ADC_Start+0x190>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d120      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_ADC_Start+0x198>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d11b      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d114      	bne.n	8001fe8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	e00b      	b.n	8001fe8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f043 0210 	orr.w	r2, r3, #16
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	fffff8fe 	.word	0xfffff8fe
 8002004:	40012300 	.word	0x40012300
 8002008:	40012000 	.word	0x40012000
 800200c:	40012200 	.word	0x40012200

08002010 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Stop+0x16>
 8002022:	2302      	movs	r3, #2
 8002024:	e01f      	b.n	8002066 <HAL_ADC_Stop+0x56>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_ADC_Stop+0x64>)
 8002052:	4013      	ands	r3, r2
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	ffffeefe 	.word	0xffffeefe

08002078 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002094:	d113      	bne.n	80020be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f043 0220 	orr.w	r2, r3, #32
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e063      	b.n	8002186 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020be:	f7ff fe65 	bl	8001d8c <HAL_GetTick>
 80020c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020c4:	e021      	b.n	800210a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d01d      	beq.n	800210a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_ADC_PollForConversion+0x6c>
 80020d4:	f7ff fe5a 	bl	8001d8c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d212      	bcs.n	800210a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d00b      	beq.n	800210a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e03d      	b.n	8002186 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d1d6      	bne.n	80020c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0212 	mvn.w	r2, #18
 8002120:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d123      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11f      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800215c:	2b00      	cmp	r3, #0
 800215e:	d111      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d049      	beq.n	8002258 <HAL_ADC_IRQHandler+0xca>
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d046      	beq.n	8002258 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d12b      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d127      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002210:	2b00      	cmp	r3, #0
 8002212:	d119      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0220 	bic.w	r2, r2, #32
 8002222:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8bd 	bl	80023c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0212 	mvn.w	r2, #18
 8002256:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002266:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d057      	beq.n	800231e <HAL_ADC_IRQHandler+0x190>
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d054      	beq.n	800231e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d139      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12b      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d124      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11d      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d119      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fac8 	bl	80028a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 020c 	mvn.w	r2, #12
 800231c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10d      	bne.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f841 	bl	80023dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f06f 0201 	mvn.w	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002372:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x218>
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002384:	f043 0202 	orr.w	r2, r3, #2
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f82a 	bl	80023f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0220 	mvn.w	r2, #32
 80023a4:	601a      	str	r2, [r3, #0]
  }
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1c>
 800241c:	2302      	movs	r3, #2
 800241e:	e136      	b.n	800268e <HAL_ADC_ConfigChannel+0x28a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b09      	cmp	r3, #9
 800242e:	d93a      	bls.n	80024a6 <HAL_ADC_ConfigChannel+0xa2>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002438:	d035      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68d9      	ldr	r1, [r3, #12]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3b1e      	subs	r3, #30
 8002450:	2207      	movs	r2, #7
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	400a      	ands	r2, r1
 800245e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a8d      	ldr	r2, [pc, #564]	@ (800269c <HAL_ADC_ConfigChannel+0x298>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68d9      	ldr	r1, [r3, #12]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	061a      	lsls	r2, r3, #24
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247e:	e035      	b.n	80024ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68d9      	ldr	r1, [r3, #12]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	4603      	mov	r3, r0
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4403      	add	r3, r0
 8002498:	3b1e      	subs	r3, #30
 800249a:	409a      	lsls	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a4:	e022      	b.n	80024ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6919      	ldr	r1, [r3, #16]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	2207      	movs	r2, #7
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43da      	mvns	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	400a      	ands	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	4603      	mov	r3, r0
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4403      	add	r3, r0
 80024e2:	409a      	lsls	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d824      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3b05      	subs	r3, #5
 8002506:	221f      	movs	r2, #31
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34
 800253c:	e04c      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b23      	subs	r3, #35	@ 0x23
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b23      	subs	r3, #35	@ 0x23
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	631a      	str	r2, [r3, #48]	@ 0x30
 800258e:	e023      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	3b41      	subs	r3, #65	@ 0x41
 80025a2:	221f      	movs	r2, #31
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43da      	mvns	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	400a      	ands	r2, r1
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b41      	subs	r3, #65	@ 0x41
 80025cc:	fa00 f203 	lsl.w	r2, r0, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a30      	ldr	r2, [pc, #192]	@ (80026a0 <HAL_ADC_ConfigChannel+0x29c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10a      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1f4>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025ea:	d105      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025ec:	4b2d      	ldr	r3, [pc, #180]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a2c      	ldr	r2, [pc, #176]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80025f2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <HAL_ADC_ConfigChannel+0x29c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10f      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x21e>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b12      	cmp	r3, #18
 8002608:	d10b      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800260a:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a25      	ldr	r2, [pc, #148]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002610:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002614:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002616:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800261c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002620:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1e      	ldr	r2, [pc, #120]	@ (80026a0 <HAL_ADC_ConfigChannel+0x29c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d12b      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x280>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <HAL_ADC_ConfigChannel+0x298>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <HAL_ADC_ConfigChannel+0x23a>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b11      	cmp	r3, #17
 800263c:	d122      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800263e:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002644:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002648:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800264a:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002654:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a10      	ldr	r2, [pc, #64]	@ (800269c <HAL_ADC_ConfigChannel+0x298>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d111      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a11      	ldr	r2, [pc, #68]	@ (80026ac <HAL_ADC_ConfigChannel+0x2a8>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9a      	lsrs	r2, r3, #18
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002676:	e002      	b.n	800267e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3b01      	subs	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	10000012 	.word	0x10000012
 80026a0:	40012000 	.word	0x40012000
 80026a4:	40012300 	.word	0x40012300
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026b8:	4b78      	ldr	r3, [pc, #480]	@ (800289c <ADC_Init+0x1ec>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a77      	ldr	r2, [pc, #476]	@ (800289c <ADC_Init+0x1ec>)
 80026be:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80026c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026c4:	4b75      	ldr	r3, [pc, #468]	@ (800289c <ADC_Init+0x1ec>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4973      	ldr	r1, [pc, #460]	@ (800289c <ADC_Init+0x1ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	021a      	lsls	r2, r3, #8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <ADC_Init+0x1f0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002752:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	e00f      	b.n	80027aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0202 	bic.w	r2, r2, #2
 80027b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	005a      	lsls	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01b      	beq.n	8002810 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	3b01      	subs	r3, #1
 8002804:	035a      	lsls	r2, r3, #13
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	e007      	b.n	8002820 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	3b01      	subs	r3, #1
 800283c:	051a      	lsls	r2, r3, #20
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002862:	025a      	lsls	r2, r3, #9
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	029a      	lsls	r2, r3, #10
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40012300 	.word	0x40012300
 80028a0:	0f000001 	.word	0x0f000001

080028a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x40>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x40>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00
 80028fc:	05fa0000 	.word	0x05fa0000

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	@ (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	@ (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	@ (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	@ 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	@ 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	@ (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e014      	b.n	8002b16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	791b      	ldrb	r3, [r3, #4]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fe fa0d 	bl	8000f1c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b34:	d120      	bne.n	8002b78 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b44:	d118      	bne.n	8002b78 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b70:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f82d 	bl	8002bd2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b86:	d120      	bne.n	8002bca <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b96:	d118      	bne.n	8002bca <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f043 0202 	orr.w	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002bb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f85d 	bl	8002c84 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	795b      	ldrb	r3, [r3, #5]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_DAC_ConfigChannel+0x18>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e03c      	b.n	8002c78 <HAL_DAC_ConfigChannel+0x92>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4013      	ands	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	22c0      	movs	r2, #192	@ 0xc0
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43da      	mvns	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	400a      	ands	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff f872 	bl	8001d8c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e099      	b.n	8002de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd4:	e00f      	b.n	8002cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd6:	f7ff f859 	bl	8001d8c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d908      	bls.n	8002cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e078      	b.n	8002de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e8      	bne.n	8002cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_DMA_Init+0x158>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d117      	bne.n	8002dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa7b 	bl	8003298 <DMA_CheckFifoParam>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2240      	movs	r2, #64	@ 0x40
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002db6:	2301      	movs	r3, #1
 8002db8:	e016      	b.n	8002de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa32 	bl	800322c <DMA_CalcBaseAndBitshift>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	223f      	movs	r2, #63	@ 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	f010803f 	.word	0xf010803f

08002df4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e02:	f7fe ffc3 	bl	8001d8c <HAL_GetTick>
 8002e06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d008      	beq.n	8002e26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2280      	movs	r2, #128	@ 0x80
 8002e18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e052      	b.n	8002ecc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0216 	bic.w	r2, r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_DMA_Abort+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0208 	bic.w	r2, r2, #8
 8002e64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e76:	e013      	b.n	8002ea0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e78:	f7fe ff88 	bl	8001d8c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d90c      	bls.n	8002ea0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e015      	b.n	8002ecc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e4      	bne.n	8002e78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	223f      	movs	r2, #63	@ 0x3f
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00c      	b.n	8002f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f24:	4b8e      	ldr	r3, [pc, #568]	@ (8003160 <HAL_DMA_IRQHandler+0x248>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a8e      	ldr	r2, [pc, #568]	@ (8003164 <HAL_DMA_IRQHandler+0x24c>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a9b      	lsrs	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	2208      	movs	r2, #8
 8002f44:	409a      	lsls	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f70:	2208      	movs	r2, #8
 8002f72:	409a      	lsls	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	f043 0202 	orr.w	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	2204      	movs	r2, #4
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d043      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03c      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	2210      	movs	r2, #16
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d018      	beq.n	800305a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d024      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
 8003046:	e01f      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
 8003058:	e016      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0208 	bic.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	2220      	movs	r2, #32
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 808f 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8087 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	2220      	movs	r2, #32
 80030b0:	409a      	lsls	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d136      	bne.n	8003130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_IRQHandler+0x1da>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	223f      	movs	r2, #63	@ 0x3f
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003122:	2b00      	cmp	r3, #0
 8003124:	d07e      	beq.n	8003224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
        }
        return;
 800312e:	e079      	b.n	8003224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01d      	beq.n	800317a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003150:	2b00      	cmp	r3, #0
 8003152:	d031      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
 800315c:	e02c      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d023      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e01e      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0210 	bic.w	r2, r2, #16
 8003196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d032      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2205      	movs	r2, #5
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d307      	bcc.n	8003200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f2      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x2cc>
 80031fe:	e000      	b.n	8003202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
 8003222:	e000      	b.n	8003226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003224:	bf00      	nop
    }
  }
}
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b10      	subs	r3, #16
 800323c:	4a13      	ldr	r2, [pc, #76]	@ (800328c <DMA_CalcBaseAndBitshift+0x60>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003246:	4a12      	ldr	r2, [pc, #72]	@ (8003290 <DMA_CalcBaseAndBitshift+0x64>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d908      	bls.n	800326c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <DMA_CalcBaseAndBitshift+0x68>)
 8003262:	4013      	ands	r3, r2
 8003264:	1d1a      	adds	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	@ 0x58
 800326a:	e006      	b.n	800327a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <DMA_CalcBaseAndBitshift+0x68>)
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	aaaaaaab 	.word	0xaaaaaaab
 8003290:	08019b14 	.word	0x08019b14
 8003294:	fffffc00 	.word	0xfffffc00

08003298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d856      	bhi.n	8003366 <DMA_CheckFifoParam+0xce>
 80032b8:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <DMA_CheckFifoParam+0x28>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032e3 	.word	0x080032e3
 80032c8:	080032d1 	.word	0x080032d1
 80032cc:	08003367 	.word	0x08003367
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d046      	beq.n	800336a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e043      	b.n	800336a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032ea:	d140      	bne.n	800336e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f0:	e03d      	b.n	800336e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fa:	d121      	bne.n	8003340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d837      	bhi.n	8003372 <DMA_CheckFifoParam+0xda>
 8003302:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <DMA_CheckFifoParam+0x70>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003319 	.word	0x08003319
 800330c:	0800331f 	.word	0x0800331f
 8003310:	08003319 	.word	0x08003319
 8003314:	08003331 	.word	0x08003331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e030      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d025      	beq.n	8003376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332e:	e022      	b.n	8003376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003338:	d11f      	bne.n	800337a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333e:	e01c      	b.n	800337a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d903      	bls.n	800334e <DMA_CheckFifoParam+0xb6>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d003      	beq.n	8003354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800334c:	e018      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      break;
 8003352:	e015      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00e      	beq.n	800337e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e00b      	b.n	800337e <DMA_CheckFifoParam+0xe6>
      break;
 8003366:	bf00      	nop
 8003368:	e00a      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e008      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e006      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e004      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;   
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
    }
  } 
  
  return status; 
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06a      	b.n	8003478 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2223      	movs	r2, #35	@ 0x23
 80033b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f007 f9d7 	bl	800a768 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	4b31      	ldr	r3, [pc, #196]	@ (8003480 <HAL_ETH_Init+0xf0>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	4a30      	ldr	r2, [pc, #192]	@ (8003480 <HAL_ETH_Init+0xf0>)
 80033c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003480 <HAL_ETH_Init+0xf0>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003484 <HAL_ETH_Init+0xf4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003484 <HAL_ETH_Init+0xf4>)
 80033d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033de:	4b29      	ldr	r3, [pc, #164]	@ (8003484 <HAL_ETH_Init+0xf4>)
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4927      	ldr	r1, [pc, #156]	@ (8003484 <HAL_ETH_Init+0xf4>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80033ec:	4b25      	ldr	r3, [pc, #148]	@ (8003484 <HAL_ETH_Init+0xf4>)
 80033ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003406:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003408:	f7fe fcc0 	bl	8001d8c <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800340e:	e011      	b.n	8003434 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003410:	f7fe fcbc 	bl	8001d8c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800341e:	d909      	bls.n	8003434 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2204      	movs	r2, #4
 8003424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	22e0      	movs	r2, #224	@ 0xe0
 800342c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e021      	b.n	8003478 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e4      	bne.n	8003410 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fee4 	bl	8004214 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 ff8b 	bl	8004368 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 ffe1 	bl	800441a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	461a      	mov	r2, r3
 800345e:	2100      	movs	r1, #0
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 ff49 	bl	80042f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2210      	movs	r2, #16
 8003472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	40013800 	.word	0x40013800

08003488 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003496:	2b10      	cmp	r3, #16
 8003498:	d150      	bne.n	800353c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2223      	movs	r2, #35	@ 0x23
 800349e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2204      	movs	r2, #4
 80034a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9fd 	bl	80038a8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0208 	orr.w	r2, r2, #8
 80034bc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f7fe fc6c 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0204 	orr.w	r2, r2, #4
 80034e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7fe fc59 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fd2a 	bl	8003f54 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003516:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	f043 0302 	orr.w	r3, r3, #2
 800352a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800352e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2223      	movs	r2, #35	@ 0x23
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003554:	2b23      	cmp	r3, #35	@ 0x23
 8003556:	d14a      	bne.n	80035ee <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2223      	movs	r2, #35	@ 0x23
 800355c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003572:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003576:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	f023 0302 	bic.w	r3, r3, #2
 800358a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800358e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7fe fbfb 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fccc 	bl	8003f54 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0208 	bic.w	r2, r2, #8
 80035ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f7fe fbe5 	bl	8001da4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2210      	movs	r2, #16
 80035e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07c      	b.n	8003718 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003624:	2b23      	cmp	r3, #35	@ 0x23
 8003626:	d176      	bne.n	8003716 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003628:	2200      	movs	r2, #0
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 ff61 	bl	80044f4 <ETH_Prepare_Tx_Descriptors>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363e:	f043 0202 	orr.w	r2, r3, #2
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e065      	b.n	8003718 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800364c:	f3bf 8f4f 	dsb	sy
}
 8003650:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3206      	adds	r2, #6
 800365a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	629a      	str	r2, [r3, #40]	@ 0x28
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	2b03      	cmp	r3, #3
 8003670:	d904      	bls.n	800367c <HAL_ETH_Transmit+0x84>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	1f1a      	subs	r2, r3, #4
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3106      	adds	r1, #6
 8003688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800368c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003690:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003692:	f7fe fb7b 	bl	8001d8c <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003698:	e037      	b.n	800370a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d011      	beq.n	80036d0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	f043 0208 	orr.w	r2, r3, #8
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e023      	b.n	8003718 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d018      	beq.n	800370a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7fe fb58 	bl	8001d8c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <HAL_ETH_Transmit+0xf6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003704:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e006      	b.n	8003718 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	dbc3      	blt.n	800369a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
  }
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0a8      	b.n	800389e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003752:	2b23      	cmp	r3, #35	@ 0x23
 8003754:	d001      	beq.n	800375a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0a1      	b.n	800389e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	3212      	adds	r2, #18
 8003766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003770:	f1c3 0304 	rsb	r3, r3, #4
 8003774:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003776:	e06a      	b.n	800384e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_ETH_ReadData+0x88>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d040      	beq.n	800382a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80037dc:	3b04      	subs	r3, #4
 80037de:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003804:	461a      	mov	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f007 f97f 	bl	800ab0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	441a      	add	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2200      	movs	r2, #0
 8003828:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3301      	adds	r3, #1
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d902      	bls.n	800383c <HAL_ETH_ReadData+0x11c>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b04      	subs	r3, #4
 800383a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	3212      	adds	r2, #18
 8003842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003846:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003852:	2b00      	cmp	r3, #0
 8003854:	db06      	blt.n	8003864 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d202      	bcs.n	8003864 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d089      	beq.n	8003778 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f815 	bl	80038a8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80038b4:	2301      	movs	r3, #1
 80038b6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	3212      	adds	r2, #18
 80038c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ce:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80038d0:	e040      	b.n	8003954 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d112      	bne.n	8003900 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	4618      	mov	r0, r3
 80038e0:	f007 f8e4 	bl	800aaac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	74fb      	strb	r3, [r7, #19]
 80038ee:	e007      	b.n	8003900 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d026      	beq.n	8003954 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4a1e      	ldr	r2, [pc, #120]	@ (800398c <ETH_UpdateDescriptor+0xe4>)
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	e003      	b.n	800391e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800391c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800391e:	f3bf 8f5f 	dmb	sy
}
 8003922:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3301      	adds	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d902      	bls.n	8003942 <ETH_UpdateDescriptor+0x9a>
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3b04      	subs	r3, #4
 8003940:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	3212      	adds	r2, #18
 8003948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394c:	617b      	str	r3, [r7, #20]
      desccount--;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3b01      	subs	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <ETH_UpdateDescriptor+0xb8>
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1b8      	bne.n	80038d2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	429a      	cmp	r2, r3
 8003968:	d00c      	beq.n	8003984 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	80004600 	.word	0x80004600

08003990 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d112      	bne.n	80039d0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b8:	2b40      	cmp	r3, #64	@ 0x40
 80039ba:	d109      	bne.n	80039d0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b50      	ldr	r3, [pc, #320]	@ (8003b08 <HAL_ETH_IRQHandler+0x178>)
 80039c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f8ac 	bl	8003b28 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d113      	bne.n	8003a0a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10a      	bne.n	8003a0a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003a02:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f885 	bl	8003b14 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a1c:	d14c      	bne.n	8003ab8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a30:	d142      	bne.n	8003ab8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a38:	f043 0208 	orr.w	r2, r3, #8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a54:	d11a      	bne.n	8003a8c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <HAL_ETH_IRQHandler+0x17c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003a7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a80:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	22e0      	movs	r2, #224	@ 0xe0
 8003a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003a8a:	e012      	b.n	8003ab2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003ab0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f842 	bl	8003b3c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f83a 	bl	8003b50 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <HAL_ETH_IRQHandler+0x180>)
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <HAL_ETH_IRQHandler+0x180>)
 8003af2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003af6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f833 	bl	8003b64 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	00010040 	.word	0x00010040
 8003b0c:	007e2000 	.word	0x007e2000
 8003b10:	40013c00 	.word	0x40013c00

08003b14 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 031c 	and.w	r3, r3, #28
 8003b94:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	02db      	lsls	r3, r3, #11
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0302 	bic.w	r3, r3, #2
 8003bb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003bc8:	f7fe f8e0 	bl	8001d8c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bce:	e00d      	b.n	8003bec <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003bd0:	f7fe f8dc 	bl	8001d8c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bde:	d301      	bcc.n	8003be4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e010      	b.n	8003c06 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ec      	bne.n	8003bd0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 031c 	and.w	r3, r3, #28
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	02db      	lsls	r3, r3, #11
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	019b      	lsls	r3, r3, #6
 8003c3c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c68:	f7fe f890 	bl	8001d8c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c6e:	e00d      	b.n	8003c8c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003c70:	f7fe f88c 	bl	8001d8c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7e:	d301      	bcc.n	8003c84 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e009      	b.n	8003c98 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ec      	bne.n	8003c70 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d9      	b.n	8003e68 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bf0c      	ite	eq
 8003d72:	2301      	moveq	r3, #1
 8003d74:	2300      	movne	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf14      	ite	ne
 8003da6:	2301      	movne	r3, #1
 8003da8:	2300      	moveq	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e00b      	b.n	8003ea0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d105      	bne.n	8003e9e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f883 	bl	8003fa0 <ETH_SetMACConfig>

    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 031c 	bic.w	r3, r3, #28
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ec0:	f002 f93c 	bl	800613c <HAL_RCC_GetHCLKFreq>
 8003ec4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f40 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d908      	bls.n	8003ee0 <HAL_ETH_SetMDIOClockRange+0x38>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d804      	bhi.n	8003ee0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e027      	b.n	8003f30 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a18      	ldr	r2, [pc, #96]	@ (8003f44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d908      	bls.n	8003efa <HAL_ETH_SetMDIOClockRange+0x52>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d204      	bcs.n	8003efa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f043 030c 	orr.w	r3, r3, #12
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e01a      	b.n	8003f30 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4a12      	ldr	r2, [pc, #72]	@ (8003f48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d303      	bcc.n	8003f0a <HAL_ETH_SetMDIOClockRange+0x62>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4a11      	ldr	r2, [pc, #68]	@ (8003f4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d911      	bls.n	8003f2e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d908      	bls.n	8003f24 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4a0e      	ldr	r2, [pc, #56]	@ (8003f50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d804      	bhi.n	8003f24 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	e005      	b.n	8003f30 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f043 0310 	orr.w	r3, r3, #16
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e000      	b.n	8003f30 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003f2e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	611a      	str	r2, [r3, #16]
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	01312cff 	.word	0x01312cff
 8003f44:	02160ebf 	.word	0x02160ebf
 8003f48:	03938700 	.word	0x03938700
 8003f4c:	05f5e0ff 	.word	0x05f5e0ff
 8003f50:	08f0d17f 	.word	0x08f0d17f

08003f54 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f76:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7fd ff0d 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f94:	6193      	str	r3, [r2, #24]
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4b51      	ldr	r3, [pc, #324]	@ (80040fc <ETH_SetMACConfig+0x15c>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	7c1b      	ldrb	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <ETH_SetMACConfig+0x28>
 8003fc2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003fc6:	e000      	b.n	8003fca <ETH_SetMACConfig+0x2a>
 8003fc8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	7c5b      	ldrb	r3, [r3, #17]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <ETH_SetMACConfig+0x38>
 8003fd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003fd6:	e000      	b.n	8003fda <ETH_SetMACConfig+0x3a>
 8003fd8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003fda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003fe0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	7fdb      	ldrb	r3, [r3, #31]
 8003fe6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003fe8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003fee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	7f92      	ldrb	r2, [r2, #30]
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	d102      	bne.n	8003ffe <ETH_SetMACConfig+0x5e>
 8003ff8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ffc:	e000      	b.n	8004000 <ETH_SetMACConfig+0x60>
 8003ffe:	2200      	movs	r2, #0
                        macconf->Speed |
 8004000:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	7f1b      	ldrb	r3, [r3, #28]
 8004006:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004008:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800400e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	791b      	ldrb	r3, [r3, #4]
 8004014:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004016:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800401e:	2a00      	cmp	r2, #0
 8004020:	d102      	bne.n	8004028 <ETH_SetMACConfig+0x88>
 8004022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004026:	e000      	b.n	800402a <ETH_SetMACConfig+0x8a>
 8004028:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800402a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	7bdb      	ldrb	r3, [r3, #15]
 8004030:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004032:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004038:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004040:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004042:	4313      	orrs	r3, r2
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800405a:	2001      	movs	r0, #1
 800405c:	f7fd fea2 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004076:	4013      	ands	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004086:	2a00      	cmp	r2, #0
 8004088:	d101      	bne.n	800408e <ETH_SetMACConfig+0xee>
 800408a:	2280      	movs	r2, #128	@ 0x80
 800408c:	e000      	b.n	8004090 <ETH_SetMACConfig+0xf0>
 800408e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004090:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004096:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800409e:	2a01      	cmp	r2, #1
 80040a0:	d101      	bne.n	80040a6 <ETH_SetMACConfig+0x106>
 80040a2:	2208      	movs	r2, #8
 80040a4:	e000      	b.n	80040a8 <ETH_SetMACConfig+0x108>
 80040a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80040a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80040b0:	2a01      	cmp	r2, #1
 80040b2:	d101      	bne.n	80040b8 <ETH_SetMACConfig+0x118>
 80040b4:	2204      	movs	r2, #4
 80040b6:	e000      	b.n	80040ba <ETH_SetMACConfig+0x11a>
 80040b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80040ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80040c2:	2a01      	cmp	r2, #1
 80040c4:	d101      	bne.n	80040ca <ETH_SetMACConfig+0x12a>
 80040c6:	2202      	movs	r2, #2
 80040c8:	e000      	b.n	80040cc <ETH_SetMACConfig+0x12c>
 80040ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80040cc:	4313      	orrs	r3, r2
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040e4:	2001      	movs	r0, #1
 80040e6:	f7fd fe5d 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	619a      	str	r2, [r3, #24]
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	ff20810f 	.word	0xff20810f

08004100 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4b3d      	ldr	r3, [pc, #244]	@ (8004210 <ETH_SetDMAConfig+0x110>)
 800411a:	4013      	ands	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	7b1b      	ldrb	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <ETH_SetDMAConfig+0x2c>
 8004126:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800412a:	e000      	b.n	800412e <ETH_SetDMAConfig+0x2e>
 800412c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	7b5b      	ldrb	r3, [r3, #13]
 8004132:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004134:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	7f52      	ldrb	r2, [r2, #29]
 800413a:	2a00      	cmp	r2, #0
 800413c:	d102      	bne.n	8004144 <ETH_SetDMAConfig+0x44>
 800413e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004142:	e000      	b.n	8004146 <ETH_SetDMAConfig+0x46>
 8004144:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004146:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	7b9b      	ldrb	r3, [r3, #14]
 800414c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800414e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004154:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	7f1b      	ldrb	r3, [r3, #28]
 800415a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800415c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	7f9b      	ldrb	r3, [r3, #30]
 8004162:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004164:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800416a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004172:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004174:	4313      	orrs	r3, r2
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004184:	461a      	mov	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004196:	2001      	movs	r0, #1
 8004198:	f7fd fe04 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a4:	461a      	mov	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	791b      	ldrb	r3, [r3, #4]
 80041ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80041b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80041ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80041c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80041ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80041d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80041d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041f4:	2001      	movs	r0, #1
 80041f6:	f7fd fdd5 	bl	8001da4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	f8de3f23 	.word	0xf8de3f23

08004214 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b0a6      	sub	sp, #152	@ 0x98
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004228:	2300      	movs	r3, #0
 800422a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800424a:	2300      	movs	r3, #0
 800424c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004250:	2300      	movs	r3, #0
 8004252:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004254:	2300      	movs	r3, #0
 8004256:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800425a:	2300      	movs	r3, #0
 800425c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004276:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800427c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004288:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff fe86 	bl	8003fa0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004294:	2301      	movs	r3, #1
 8004296:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004298:	2301      	movs	r3, #1
 800429a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80042c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80042ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80042ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80042d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80042e4:	f107 0308 	add.w	r3, r7, #8
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff08 	bl	8004100 <ETH_SetDMAConfig>
}
 80042f0:	bf00      	nop
 80042f2:	3798      	adds	r7, #152	@ 0x98
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3305      	adds	r3, #5
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	3204      	adds	r2, #4
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <ETH_MACAddressConfig+0x68>)
 800431a:	4413      	add	r3, r2
 800431c:	461a      	mov	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3303      	adds	r3, #3
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	061a      	lsls	r2, r3, #24
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3302      	adds	r3, #2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	4313      	orrs	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <ETH_MACAddressConfig+0x6c>)
 800434a:	4413      	add	r3, r2
 800434c:	461a      	mov	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	6013      	str	r3, [r2, #0]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40028040 	.word	0x40028040
 8004364:	40028044 	.word	0x40028044

08004368 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e03e      	b.n	80043f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68d9      	ldr	r1, [r3, #12]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	3206      	adds	r2, #6
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d80c      	bhi.n	80043d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68d9      	ldr	r1, [r3, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	461a      	mov	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	e004      	b.n	80043e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d9bd      	bls.n	8004376 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800440c:	611a      	str	r2, [r3, #16]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e046      	b.n	80044b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6919      	ldr	r1, [r3, #16]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	440b      	add	r3, r1
 8004438:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2200      	movs	r2, #0
 8004444:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2200      	movs	r2, #0
 8004450:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004464:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800446c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	3212      	adds	r2, #18
 8004482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d80c      	bhi.n	80044a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6919      	ldr	r1, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	440b      	add	r3, r1
 800449e:	461a      	mov	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	e004      	b.n	80044b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3301      	adds	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d9b5      	bls.n	8004428 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e6:	60da      	str	r2, [r3, #12]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b08d      	sub	sp, #52	@ 0x34
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3318      	adds	r3, #24
 8004504:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800451a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004536:	d007      	beq.n	8004548 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453c:	3304      	adds	r3, #4
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	e0ff      	b.n	800474c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	3301      	adds	r3, #1
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4b7d      	ldr	r3, [pc, #500]	@ (8004758 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004562:	4013      	ands	r3, r2
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	6852      	ldr	r2, [r2, #4]
 8004568:	431a      	orrs	r2, r3
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80045ce:	f3bf 8f5f 	dmb	sy
}
 80045d2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80045e0:	e082      	b.n	80046e8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d006      	beq.n	8004602 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e005      	b.n	800460e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800460e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004610:	3301      	adds	r3, #1
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	2b03      	cmp	r3, #3
 8004618:	d902      	bls.n	8004620 <ETH_Prepare_Tx_Descriptors+0x12c>
 800461a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461c:	3b04      	subs	r3, #4
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004628:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800463e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004642:	d007      	beq.n	8004654 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004648:	3304      	adds	r3, #4
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d029      	beq.n	80046a8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800465c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004660:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004662:	2300      	movs	r3, #0
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004666:	e019      	b.n	800469c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004668:	f3bf 8f5f 	dmb	sy
}
 800466c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467c:	3301      	adds	r3, #1
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004682:	2b03      	cmp	r3, #3
 8004684:	d902      	bls.n	800468c <ETH_Prepare_Tx_Descriptors+0x198>
 8004686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004688:	3b04      	subs	r3, #4
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004694:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	3301      	adds	r3, #1
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800469c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3e1      	bcc.n	8004668 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80046a4:	2302      	movs	r3, #2
 80046a6:	e051      	b.n	800474c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	3301      	adds	r3, #1
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	4b25      	ldr	r3, [pc, #148]	@ (8004758 <ETH_Prepare_Tx_Descriptors+0x264>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	6852      	ldr	r2, [r2, #4]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	3301      	adds	r3, #1
 80046d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80046d6:	f3bf 8f5f 	dmb	sy
}
 80046da:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f47f af78 	bne.w	80045e2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e005      	b.n	8004712 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004722:	6979      	ldr	r1, [r7, #20]
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	3304      	adds	r3, #4
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004732:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004734:	b672      	cpsid	i
}
 8004736:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004746:	b662      	cpsie	i
}
 8004748:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3734      	adds	r7, #52	@ 0x34
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	ffffe000 	.word	0xffffe000

0800475c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	@ 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e175      	b.n	8004a68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800477c:	2201      	movs	r2, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	429a      	cmp	r2, r3
 8004796:	f040 8164 	bne.w	8004a62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d005      	beq.n	80047b2 <HAL_GPIO_Init+0x56>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d130      	bne.n	8004814 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	2203      	movs	r2, #3
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047e8:	2201      	movs	r2, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 0201 	and.w	r2, r3, #1
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b03      	cmp	r3, #3
 800481e:	d017      	beq.n	8004850 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	2203      	movs	r2, #3
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d123      	bne.n	80048a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	08da      	lsrs	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3208      	adds	r2, #8
 8004864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	220f      	movs	r2, #15
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	08da      	lsrs	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3208      	adds	r2, #8
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0203 	and.w	r2, r3, #3
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80be 	beq.w	8004a62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e6:	4b66      	ldr	r3, [pc, #408]	@ (8004a80 <HAL_GPIO_Init+0x324>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	4a65      	ldr	r2, [pc, #404]	@ (8004a80 <HAL_GPIO_Init+0x324>)
 80048ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80048f2:	4b63      	ldr	r3, [pc, #396]	@ (8004a80 <HAL_GPIO_Init+0x324>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80048fe:	4a61      	ldr	r2, [pc, #388]	@ (8004a84 <HAL_GPIO_Init+0x328>)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	3302      	adds	r3, #2
 8004906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	220f      	movs	r2, #15
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a58      	ldr	r2, [pc, #352]	@ (8004a88 <HAL_GPIO_Init+0x32c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d037      	beq.n	800499a <HAL_GPIO_Init+0x23e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a57      	ldr	r2, [pc, #348]	@ (8004a8c <HAL_GPIO_Init+0x330>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d031      	beq.n	8004996 <HAL_GPIO_Init+0x23a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a56      	ldr	r2, [pc, #344]	@ (8004a90 <HAL_GPIO_Init+0x334>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d02b      	beq.n	8004992 <HAL_GPIO_Init+0x236>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a55      	ldr	r2, [pc, #340]	@ (8004a94 <HAL_GPIO_Init+0x338>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d025      	beq.n	800498e <HAL_GPIO_Init+0x232>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a54      	ldr	r2, [pc, #336]	@ (8004a98 <HAL_GPIO_Init+0x33c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01f      	beq.n	800498a <HAL_GPIO_Init+0x22e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a53      	ldr	r2, [pc, #332]	@ (8004a9c <HAL_GPIO_Init+0x340>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d019      	beq.n	8004986 <HAL_GPIO_Init+0x22a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a52      	ldr	r2, [pc, #328]	@ (8004aa0 <HAL_GPIO_Init+0x344>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_GPIO_Init+0x226>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a51      	ldr	r2, [pc, #324]	@ (8004aa4 <HAL_GPIO_Init+0x348>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00d      	beq.n	800497e <HAL_GPIO_Init+0x222>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a50      	ldr	r2, [pc, #320]	@ (8004aa8 <HAL_GPIO_Init+0x34c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d007      	beq.n	800497a <HAL_GPIO_Init+0x21e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a4f      	ldr	r2, [pc, #316]	@ (8004aac <HAL_GPIO_Init+0x350>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_GPIO_Init+0x21a>
 8004972:	2309      	movs	r3, #9
 8004974:	e012      	b.n	800499c <HAL_GPIO_Init+0x240>
 8004976:	230a      	movs	r3, #10
 8004978:	e010      	b.n	800499c <HAL_GPIO_Init+0x240>
 800497a:	2308      	movs	r3, #8
 800497c:	e00e      	b.n	800499c <HAL_GPIO_Init+0x240>
 800497e:	2307      	movs	r3, #7
 8004980:	e00c      	b.n	800499c <HAL_GPIO_Init+0x240>
 8004982:	2306      	movs	r3, #6
 8004984:	e00a      	b.n	800499c <HAL_GPIO_Init+0x240>
 8004986:	2305      	movs	r3, #5
 8004988:	e008      	b.n	800499c <HAL_GPIO_Init+0x240>
 800498a:	2304      	movs	r3, #4
 800498c:	e006      	b.n	800499c <HAL_GPIO_Init+0x240>
 800498e:	2303      	movs	r3, #3
 8004990:	e004      	b.n	800499c <HAL_GPIO_Init+0x240>
 8004992:	2302      	movs	r3, #2
 8004994:	e002      	b.n	800499c <HAL_GPIO_Init+0x240>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_GPIO_Init+0x240>
 800499a:	2300      	movs	r3, #0
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	f002 0203 	and.w	r2, r2, #3
 80049a2:	0092      	lsls	r2, r2, #2
 80049a4:	4093      	lsls	r3, r2
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049ac:	4935      	ldr	r1, [pc, #212]	@ (8004a84 <HAL_GPIO_Init+0x328>)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	3302      	adds	r3, #2
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ba:	4b3d      	ldr	r3, [pc, #244]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049de:	4a34      	ldr	r2, [pc, #208]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e4:	4b32      	ldr	r3, [pc, #200]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a08:	4a29      	ldr	r2, [pc, #164]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a0e:	4b28      	ldr	r3, [pc, #160]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a32:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a38:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a5c:	4a14      	ldr	r2, [pc, #80]	@ (8004ab0 <HAL_GPIO_Init+0x354>)
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3301      	adds	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	2b0f      	cmp	r3, #15
 8004a6c:	f67f ae86 	bls.w	800477c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3724      	adds	r7, #36	@ 0x24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40013800 	.word	0x40013800
 8004a88:	40020000 	.word	0x40020000
 8004a8c:	40020400 	.word	0x40020400
 8004a90:	40020800 	.word	0x40020800
 8004a94:	40020c00 	.word	0x40020c00
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40021400 	.word	0x40021400
 8004aa0:	40021800 	.word	0x40021800
 8004aa4:	40021c00 	.word	0x40021c00
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40022400 	.word	0x40022400
 8004ab0:	40013c00 	.word	0x40013c00

08004ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ac4:	787b      	ldrb	r3, [r7, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ad0:	e003      	b.n	8004ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	041a      	lsls	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	619a      	str	r2, [r3, #24]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e07f      	b.n	8004bfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fa4c 	bl	8000fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	@ 0x24
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	e006      	b.n	8004b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d104      	bne.n	8004b82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <HAL_I2C_Init+0x11c>)
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1a      	ldr	r2, [r3, #32]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	02008000 	.word	0x02008000

08004c08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	461a      	mov	r2, r3
 8004c14:	460b      	mov	r3, r1
 8004c16:	817b      	strh	r3, [r7, #10]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	f040 80da 	bne.w	8004dde <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_I2C_Master_Transmit+0x30>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e0d3      	b.n	8004de0 <HAL_I2C_Master_Transmit+0x1d8>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c40:	f7fd f8a4 	bl	8001d8c <HAL_GetTick>
 8004c44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2319      	movs	r3, #25
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fa1e 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0be      	b.n	8004de0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2221      	movs	r2, #33	@ 0x21
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	893a      	ldrh	r2, [r7, #8]
 8004c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2bff      	cmp	r3, #255	@ 0xff
 8004c92:	d90e      	bls.n	8004cb2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	22ff      	movs	r2, #255	@ 0xff
 8004c98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	8979      	ldrh	r1, [r7, #10]
 8004ca2:	4b51      	ldr	r3, [pc, #324]	@ (8004de8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fb8e 	bl	80053cc <I2C_TransferConfig>
 8004cb0:	e06c      	b.n	8004d8c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	8979      	ldrh	r1, [r7, #10]
 8004cc4:	4b48      	ldr	r3, [pc, #288]	@ (8004de8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fb7d 	bl	80053cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004cd2:	e05b      	b.n	8004d8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	6a39      	ldr	r1, [r7, #32]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fa1b 	bl	8005114 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e07b      	b.n	8004de0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	781a      	ldrb	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d034      	beq.n	8004d8c <HAL_I2C_Master_Transmit+0x184>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d130      	bne.n	8004d8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	2200      	movs	r2, #0
 8004d32:	2180      	movs	r1, #128	@ 0x80
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f9ad 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e04d      	b.n	8004de0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2bff      	cmp	r3, #255	@ 0xff
 8004d4c:	d90e      	bls.n	8004d6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	22ff      	movs	r2, #255	@ 0xff
 8004d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	8979      	ldrh	r1, [r7, #10]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fb31 	bl	80053cc <I2C_TransferConfig>
 8004d6a:	e00f      	b.n	8004d8c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	8979      	ldrh	r1, [r7, #10]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fb20 	bl	80053cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d19e      	bne.n	8004cd4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f9fa 	bl	8005194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e01a      	b.n	8004de0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2220      	movs	r2, #32
 8004db0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6859      	ldr	r1, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dec <HAL_I2C_Master_Transmit+0x1e4>)
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	80002000 	.word	0x80002000
 8004dec:	fe00e800 	.word	0xfe00e800

08004df0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	@ 0x28
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	f040 80ef 	bne.w	8004ff0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e20:	d101      	bne.n	8004e26 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0e5      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2C_IsDeviceReady+0x44>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e0de      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2224      	movs	r2, #36	@ 0x24
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <HAL_I2C_IsDeviceReady+0x6e>
 8004e52:	897b      	ldrh	r3, [r7, #10]
 8004e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e58:	4b68      	ldr	r3, [pc, #416]	@ (8004ffc <HAL_I2C_IsDeviceReady+0x20c>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	e004      	b.n	8004e68 <HAL_I2C_IsDeviceReady+0x78>
 8004e5e:	897b      	ldrh	r3, [r7, #10]
 8004e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e64:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fc ff8d 	bl	8001d8c <HAL_GetTick>
 8004e72:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	bf0c      	ite	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	2300      	movne	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004ea0:	e034      	b.n	8004f0c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d01a      	beq.n	8004ee0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fc ff6f 	bl	8001d8c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <HAL_I2C_IsDeviceReady+0xd0>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e088      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f0c:	7ffb      	ldrb	r3, [r7, #31]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <HAL_I2C_IsDeviceReady+0x128>
 8004f12:	7fbb      	ldrb	r3, [r7, #30]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0c4      	beq.n	8004ea2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d01a      	beq.n	8004f5c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2120      	movs	r1, #32
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f8af 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e058      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2220      	movs	r2, #32
 8004f46:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e04a      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2120      	movs	r1, #32
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f894 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e03d      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2220      	movs	r2, #32
 8004f84:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d118      	bne.n	8004fc0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f9c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2120      	movs	r1, #32
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f873 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e01c      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	f63f af3d 	bhi.w	8004e4a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	02002000 	.word	0x02002000

08005000 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
  }
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d103      	bne.n	800506a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d007      	beq.n	8005088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	619a      	str	r2, [r3, #24]
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a4:	e022      	b.n	80050ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d01e      	beq.n	80050ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ae:	f7fc fe6d 	bl	8001d8c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d113      	bne.n	80050ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e00f      	b.n	800510c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4013      	ands	r3, r2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	429a      	cmp	r2, r3
 8005108:	d0cd      	beq.n	80050a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005120:	e02c      	b.n	800517c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f870 	bl	800520c <I2C_IsErrorOccurred>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e02a      	b.n	800518c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d01e      	beq.n	800517c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fc fe25 	bl	8001d8c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d113      	bne.n	800517c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e007      	b.n	800518c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d1cb      	bne.n	8005122 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a0:	e028      	b.n	80051f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f830 	bl	800520c <I2C_IsErrorOccurred>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e026      	b.n	8005204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b6:	f7fc fde9 	bl	8001d8c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d302      	bcc.n	80051cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d113      	bne.n	80051f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e007      	b.n	8005204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d1cf      	bne.n	80051a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	@ 0x28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b00      	cmp	r3, #0
 8005236:	d068      	beq.n	800530a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2210      	movs	r2, #16
 800523e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005240:	e049      	b.n	80052d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d045      	beq.n	80052d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fc fd9f 	bl	8001d8c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_IsErrorOccurred+0x54>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d13a      	bne.n	80052d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800526a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005272:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005282:	d121      	bne.n	80052c8 <I2C_IsErrorOccurred+0xbc>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800528a:	d01d      	beq.n	80052c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	2b20      	cmp	r3, #32
 8005290:	d01a      	beq.n	80052c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052a2:	f7fc fd73 	bl	8001d8c <HAL_GetTick>
 80052a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a8:	e00e      	b.n	80052c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052aa:	f7fc fd6f 	bl	8001d8c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b19      	cmp	r3, #25
 80052b6:	d907      	bls.n	80052c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	f043 0320 	orr.w	r3, r3, #32
 80052be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80052c6:	e006      	b.n	80052d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d1e9      	bne.n	80052aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d003      	beq.n	80052ec <I2C_IsErrorOccurred+0xe0>
 80052e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0aa      	beq.n	8005242 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2220      	movs	r2, #32
 80052fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f043 0304 	orr.w	r3, r3, #4
 8005302:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800532c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f043 0308 	orr.w	r3, r3, #8
 8005344:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800534e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005370:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01c      	beq.n	80053ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fe63 	bl	800504c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <I2C_IsErrorOccurred+0x1bc>)
 8005392:	400b      	ands	r3, r1
 8005394:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80053ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3728      	adds	r7, #40	@ 0x28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	fe00e800 	.word	0xfe00e800

080053cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	817b      	strh	r3, [r7, #10]
 80053da:	4613      	mov	r3, r2
 80053dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053e4:	7a7b      	ldrb	r3, [r7, #9]
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	0d5b      	lsrs	r3, r3, #21
 8005406:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800540a:	4b08      	ldr	r3, [pc, #32]	@ (800542c <I2C_TransferConfig+0x60>)
 800540c:	430b      	orrs	r3, r1
 800540e:	43db      	mvns	r3, r3
 8005410:	ea02 0103 	and.w	r1, r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	03ff63ff 	.word	0x03ff63ff

08005430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b20      	cmp	r3, #32
 8005444:	d138      	bne.n	80054b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005450:	2302      	movs	r3, #2
 8005452:	e032      	b.n	80054ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	@ 0x24
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6819      	ldr	r1, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d139      	bne.n	8005550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e033      	b.n	8005552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2224      	movs	r2, #36	@ 0x24
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e000      	b.n	8005552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005550:	2302      	movs	r3, #2
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800555e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005560:	b08f      	sub	sp, #60	@ 0x3c
 8005562:	af0a      	add	r7, sp, #40	@ 0x28
 8005564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e116      	b.n	800579e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc f848 	bl	8001620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2203      	movs	r2, #3
 8005594:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f004 fb32 	bl	8009c18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	687e      	ldr	r6, [r7, #4]
 80055bc:	466d      	mov	r5, sp
 80055be:	f106 0410 	add.w	r4, r6, #16
 80055c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80055d2:	1d33      	adds	r3, r6, #4
 80055d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055d6:	6838      	ldr	r0, [r7, #0]
 80055d8:	f004 fac6 	bl	8009b68 <USB_CoreInit>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0d7      	b.n	800579e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f004 fb20 	bl	8009c3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
 80055fe:	e04a      	b.n	8005696 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	333d      	adds	r3, #61	@ 0x3d
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005614:	7bfa      	ldrb	r2, [r7, #15]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	333c      	adds	r3, #60	@ 0x3c
 8005624:	7bfa      	ldrb	r2, [r7, #15]
 8005626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	b298      	uxth	r0, r3
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	3344      	adds	r3, #68	@ 0x44
 800563c:	4602      	mov	r2, r0
 800563e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005640:	7bfa      	ldrb	r2, [r7, #15]
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	3340      	adds	r3, #64	@ 0x40
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005654:	7bfa      	ldrb	r2, [r7, #15]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	3348      	adds	r3, #72	@ 0x48
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005668:	7bfa      	ldrb	r2, [r7, #15]
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	334c      	adds	r3, #76	@ 0x4c
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3354      	adds	r3, #84	@ 0x54
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	3301      	adds	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d3af      	bcc.n	8005600 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	e044      	b.n	8005730 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056a6:	7bfa      	ldrb	r2, [r7, #15]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	3301      	adds	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d3b5      	bcc.n	80056a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	687e      	ldr	r6, [r7, #4]
 8005742:	466d      	mov	r5, sp
 8005744:	f106 0410 	add.w	r4, r6, #16
 8005748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800574a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800574c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800574e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005754:	e885 0003 	stmia.w	r5, {r0, r1}
 8005758:	1d33      	adds	r3, r6, #4
 800575a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800575c:	6838      	ldr	r0, [r7, #0]
 800575e:	f004 fab9 	bl	8009cd4 <USB_DevInit>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e014      	b.n	800579e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	2b01      	cmp	r3, #1
 800578a:	d102      	bne.n	8005792 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f80b 	bl	80057a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f004 fc77 	bl	800a08a <USB_DevDisconnect>

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080057a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057d6:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_PCDEx_ActivateLPM+0x44>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	10000003 	.word	0x10000003

080057f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a04      	ldr	r2, [pc, #16]	@ (800580c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057fe:	6013      	str	r3, [r2, #0]
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40007000 	.word	0x40007000

08005810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005818:	2300      	movs	r3, #0
 800581a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e291      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8087 	beq.w	8005942 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005834:	4b96      	ldr	r3, [pc, #600]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b04      	cmp	r3, #4
 800583e:	d00c      	beq.n	800585a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005840:	4b93      	ldr	r3, [pc, #588]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 030c 	and.w	r3, r3, #12
 8005848:	2b08      	cmp	r3, #8
 800584a:	d112      	bne.n	8005872 <HAL_RCC_OscConfig+0x62>
 800584c:	4b90      	ldr	r3, [pc, #576]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005858:	d10b      	bne.n	8005872 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d06c      	beq.n	8005940 <HAL_RCC_OscConfig+0x130>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d168      	bne.n	8005940 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e26b      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800587a:	d106      	bne.n	800588a <HAL_RCC_OscConfig+0x7a>
 800587c:	4b84      	ldr	r3, [pc, #528]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a83      	ldr	r2, [pc, #524]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e02e      	b.n	80058e8 <HAL_RCC_OscConfig+0xd8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <HAL_RCC_OscConfig+0x9c>
 8005892:	4b7f      	ldr	r3, [pc, #508]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a7e      	ldr	r2, [pc, #504]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a7b      	ldr	r2, [pc, #492]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e01d      	b.n	80058e8 <HAL_RCC_OscConfig+0xd8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0xc0>
 80058b6:	4b76      	ldr	r3, [pc, #472]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a75      	ldr	r2, [pc, #468]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b73      	ldr	r3, [pc, #460]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a72      	ldr	r2, [pc, #456]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0xd8>
 80058d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b6c      	ldr	r3, [pc, #432]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80058e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fc fa4c 	bl	8001d8c <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fc fa48 	bl	8001d8c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	@ 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e21f      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b61      	ldr	r3, [pc, #388]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0xe8>
 8005916:	e014      	b.n	8005942 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fc fa38 	bl	8001d8c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005920:	f7fc fa34 	bl	8001d8c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	@ 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e20b      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	4b57      	ldr	r3, [pc, #348]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x110>
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d069      	beq.n	8005a22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800594e:	4b50      	ldr	r3, [pc, #320]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595a:	4b4d      	ldr	r3, [pc, #308]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b08      	cmp	r3, #8
 8005964:	d11c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x190>
 8005966:	4b4a      	ldr	r3, [pc, #296]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005972:	4b47      	ldr	r3, [pc, #284]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_RCC_OscConfig+0x17a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e1df      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598a:	4b41      	ldr	r3, [pc, #260]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	493d      	ldr	r1, [pc, #244]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599e:	e040      	b.n	8005a22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d023      	beq.n	80059f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a8:	4b39      	ldr	r3, [pc, #228]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a38      	ldr	r2, [pc, #224]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fc f9ea 	bl	8001d8c <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059bc:	f7fc f9e6 	bl	8001d8c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1bd      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ce:	4b30      	ldr	r3, [pc, #192]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059da:	4b2d      	ldr	r3, [pc, #180]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4929      	ldr	r1, [pc, #164]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]
 80059ee:	e018      	b.n	8005a22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059f0:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 80059f6:	f023 0301 	bic.w	r3, r3, #1
 80059fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fc f9c6 	bl	8001d8c <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a04:	f7fc f9c2 	bl	8001d8c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e199      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a16:	4b1e      	ldr	r3, [pc, #120]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d038      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d019      	beq.n	8005a6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a36:	4b16      	ldr	r3, [pc, #88]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a3a:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fc f9a3 	bl	8001d8c <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4a:	f7fc f99f 	bl	8001d8c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e176      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x23a>
 8005a68:	e01a      	b.n	8005aa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a6a:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6e:	4a08      	ldr	r2, [pc, #32]	@ (8005a90 <HAL_RCC_OscConfig+0x280>)
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a76:	f7fc f989 	bl	8001d8c <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7e:	f7fc f985 	bl	8001d8c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d903      	bls.n	8005a94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e15c      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
 8005a90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a94:	4b91      	ldr	r3, [pc, #580]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ee      	bne.n	8005a7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80a4 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aae:	4b8b      	ldr	r3, [pc, #556]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10d      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aba:	4b88      	ldr	r3, [pc, #544]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	4a87      	ldr	r2, [pc, #540]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ac6:	4b85      	ldr	r3, [pc, #532]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad6:	4b82      	ldr	r3, [pc, #520]	@ (8005ce0 <HAL_RCC_OscConfig+0x4d0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d118      	bne.n	8005b14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ce0 <HAL_RCC_OscConfig+0x4d0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ce0 <HAL_RCC_OscConfig+0x4d0>)
 8005ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aee:	f7fc f94d 	bl	8001d8c <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af6:	f7fc f949 	bl	8001d8c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b64      	cmp	r3, #100	@ 0x64
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e120      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b08:	4b75      	ldr	r3, [pc, #468]	@ (8005ce0 <HAL_RCC_OscConfig+0x4d0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d106      	bne.n	8005b2a <HAL_RCC_OscConfig+0x31a>
 8005b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b20:	4a6e      	ldr	r2, [pc, #440]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b28:	e02d      	b.n	8005b86 <HAL_RCC_OscConfig+0x376>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x33c>
 8005b32:	4b6a      	ldr	r3, [pc, #424]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b36:	4a69      	ldr	r2, [pc, #420]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b3e:	4b67      	ldr	r3, [pc, #412]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b42:	4a66      	ldr	r2, [pc, #408]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b4a:	e01c      	b.n	8005b86 <HAL_RCC_OscConfig+0x376>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b05      	cmp	r3, #5
 8005b52:	d10c      	bne.n	8005b6e <HAL_RCC_OscConfig+0x35e>
 8005b54:	4b61      	ldr	r3, [pc, #388]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	4a60      	ldr	r2, [pc, #384]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b5a:	f043 0304 	orr.w	r3, r3, #4
 8005b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b60:	4b5e      	ldr	r3, [pc, #376]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b64:	4a5d      	ldr	r2, [pc, #372]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b6c:	e00b      	b.n	8005b86 <HAL_RCC_OscConfig+0x376>
 8005b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b72:	4a5a      	ldr	r2, [pc, #360]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b7a:	4b58      	ldr	r3, [pc, #352]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7e:	4a57      	ldr	r2, [pc, #348]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005b80:	f023 0304 	bic.w	r3, r3, #4
 8005b84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d015      	beq.n	8005bba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8e:	f7fc f8fd 	bl	8001d8c <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fc f8f9 	bl	8001d8c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e0ce      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bac:	4b4b      	ldr	r3, [pc, #300]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0ee      	beq.n	8005b96 <HAL_RCC_OscConfig+0x386>
 8005bb8:	e014      	b.n	8005be4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bba:	f7fc f8e7 	bl	8001d8c <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fc f8e3 	bl	8001d8c <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0b8      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd8:	4b40      	ldr	r3, [pc, #256]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ee      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d105      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bea:	4b3c      	ldr	r3, [pc, #240]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	4a3b      	ldr	r2, [pc, #236]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bf4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80a4 	beq.w	8005d48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c00:	4b36      	ldr	r3, [pc, #216]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 030c 	and.w	r3, r3, #12
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d06b      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d149      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c14:	4b31      	ldr	r3, [pc, #196]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a30      	ldr	r2, [pc, #192]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fc f8b4 	bl	8001d8c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c28:	f7fc f8b0 	bl	8001d8c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e087      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3a:	4b28      	ldr	r3, [pc, #160]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	019b      	lsls	r3, r3, #6
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	061b      	lsls	r3, r3, #24
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c74:	4b19      	ldr	r3, [pc, #100]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a18      	ldr	r2, [pc, #96]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fc f884 	bl	8001d8c <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fc f880 	bl	8001d8c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e057      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9a:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x478>
 8005ca6:	e04f      	b.n	8005d48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a0b      	ldr	r2, [pc, #44]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fc f86a 	bl	8001d8c <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fc f866 	bl	8001d8c <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e03d      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cce:	4b03      	ldr	r3, [pc, #12]	@ (8005cdc <HAL_RCC_OscConfig+0x4cc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4ac>
 8005cda:	e035      	b.n	8005d48 <HAL_RCC_OscConfig+0x538>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <HAL_RCC_OscConfig+0x544>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d028      	beq.n	8005d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d121      	bne.n	8005d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d11a      	bne.n	8005d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d14:	4013      	ands	r3, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d111      	bne.n	8005d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d107      	bne.n	8005d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40023800 	.word	0x40023800

08005d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0d0      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d70:	4b6a      	ldr	r3, [pc, #424]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d910      	bls.n	8005da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b67      	ldr	r3, [pc, #412]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f023 020f 	bic.w	r2, r3, #15
 8005d86:	4965      	ldr	r1, [pc, #404]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8e:	4b63      	ldr	r3, [pc, #396]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0b8      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d020      	beq.n	8005dee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db8:	4b59      	ldr	r3, [pc, #356]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4a58      	ldr	r2, [pc, #352]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dd0:	4b53      	ldr	r3, [pc, #332]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a52      	ldr	r2, [pc, #328]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ddc:	4b50      	ldr	r3, [pc, #320]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	494d      	ldr	r1, [pc, #308]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d040      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	4b47      	ldr	r3, [pc, #284]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d115      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e07f      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1a:	4b41      	ldr	r3, [pc, #260]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e073      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e06b      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e3a:	4b39      	ldr	r3, [pc, #228]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f023 0203 	bic.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4936      	ldr	r1, [pc, #216]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fb ff9e 	bl	8001d8c <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e54:	f7fb ff9a 	bl	8001d8c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e053      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 020c 	and.w	r2, r3, #12
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1eb      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b27      	ldr	r3, [pc, #156]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d210      	bcs.n	8005eac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b24      	ldr	r3, [pc, #144]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f023 020f 	bic.w	r2, r3, #15
 8005e92:	4922      	ldr	r1, [pc, #136]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9a:	4b20      	ldr	r3, [pc, #128]	@ (8005f1c <HAL_RCC_ClockConfig+0x1c4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e032      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb8:	4b19      	ldr	r3, [pc, #100]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4916      	ldr	r1, [pc, #88]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	490e      	ldr	r1, [pc, #56]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eea:	f000 f821 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	490a      	ldr	r1, [pc, #40]	@ (8005f24 <HAL_RCC_ClockConfig+0x1cc>)
 8005efc:	5ccb      	ldrb	r3, [r1, r3]
 8005efe:	fa22 f303 	lsr.w	r3, r2, r3
 8005f02:	4a09      	ldr	r2, [pc, #36]	@ (8005f28 <HAL_RCC_ClockConfig+0x1d0>)
 8005f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f06:	4b09      	ldr	r3, [pc, #36]	@ (8005f2c <HAL_RCC_ClockConfig+0x1d4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fb fefa 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40023c00 	.word	0x40023c00
 8005f20:	40023800 	.word	0x40023800
 8005f24:	08019afc 	.word	0x08019afc
 8005f28:	20000000 	.word	0x20000000
 8005f2c:	20000004 	.word	0x20000004

08005f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f34:	b094      	sub	sp, #80	@ 0x50
 8005f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f40:	2300      	movs	r3, #0
 8005f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f48:	4b79      	ldr	r3, [pc, #484]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d00d      	beq.n	8005f70 <HAL_RCC_GetSysClockFreq+0x40>
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	f200 80e1 	bhi.w	800611c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x34>
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d003      	beq.n	8005f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f62:	e0db      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f64:	4b73      	ldr	r3, [pc, #460]	@ (8006134 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f68:	e0db      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f6a:	4b73      	ldr	r3, [pc, #460]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f6e:	e0d8      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f70:	4b6f      	ldr	r3, [pc, #444]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d063      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f86:	4b6a      	ldr	r3, [pc, #424]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	099b      	lsrs	r3, r3, #6
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	f04f 0000 	mov.w	r0, #0
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	0159      	lsls	r1, r3, #5
 8005fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fb4:	0150      	lsls	r0, r2, #5
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4621      	mov	r1, r4
 8005fbc:	1a51      	subs	r1, r2, r1
 8005fbe:	6139      	str	r1, [r7, #16]
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	018b      	lsls	r3, r1, #6
 8005fd8:	4651      	mov	r1, sl
 8005fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fde:	4651      	mov	r1, sl
 8005fe0:	018a      	lsls	r2, r1, #6
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8005fe8:	4659      	mov	r1, fp
 8005fea:	eb63 0901 	sbc.w	r9, r3, r1
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006002:	4690      	mov	r8, r2
 8006004:	4699      	mov	r9, r3
 8006006:	4623      	mov	r3, r4
 8006008:	eb18 0303 	adds.w	r3, r8, r3
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	462b      	mov	r3, r5
 8006010:	eb49 0303 	adc.w	r3, r9, r3
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006022:	4629      	mov	r1, r5
 8006024:	024b      	lsls	r3, r1, #9
 8006026:	4621      	mov	r1, r4
 8006028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800602c:	4621      	mov	r1, r4
 800602e:	024a      	lsls	r2, r1, #9
 8006030:	4610      	mov	r0, r2
 8006032:	4619      	mov	r1, r3
 8006034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006036:	2200      	movs	r2, #0
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800603a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006040:	f7fa f93e 	bl	80002c0 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800604c:	e058      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800604e:	4b38      	ldr	r3, [pc, #224]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	2200      	movs	r2, #0
 8006056:	4618      	mov	r0, r3
 8006058:	4611      	mov	r1, r2
 800605a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	2300      	movs	r3, #0
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
 8006064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006068:	4642      	mov	r2, r8
 800606a:	464b      	mov	r3, r9
 800606c:	f04f 0000 	mov.w	r0, #0
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	0159      	lsls	r1, r3, #5
 8006076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800607a:	0150      	lsls	r0, r2, #5
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4641      	mov	r1, r8
 8006082:	ebb2 0a01 	subs.w	sl, r2, r1
 8006086:	4649      	mov	r1, r9
 8006088:	eb63 0b01 	sbc.w	fp, r3, r1
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800609c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060a0:	ebb2 040a 	subs.w	r4, r2, sl
 80060a4:	eb63 050b 	sbc.w	r5, r3, fp
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	00eb      	lsls	r3, r5, #3
 80060b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060b6:	00e2      	lsls	r2, r4, #3
 80060b8:	4614      	mov	r4, r2
 80060ba:	461d      	mov	r5, r3
 80060bc:	4643      	mov	r3, r8
 80060be:	18e3      	adds	r3, r4, r3
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	464b      	mov	r3, r9
 80060c4:	eb45 0303 	adc.w	r3, r5, r3
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060d6:	4629      	mov	r1, r5
 80060d8:	028b      	lsls	r3, r1, #10
 80060da:	4621      	mov	r1, r4
 80060dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060e0:	4621      	mov	r1, r4
 80060e2:	028a      	lsls	r2, r1, #10
 80060e4:	4610      	mov	r0, r2
 80060e6:	4619      	mov	r1, r3
 80060e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ea:	2200      	movs	r2, #0
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	61fa      	str	r2, [r7, #28]
 80060f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f4:	f7fa f8e4 	bl	80002c0 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4613      	mov	r3, r2
 80060fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006100:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	0c1b      	lsrs	r3, r3, #16
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	3301      	adds	r3, #1
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800611a:	e002      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <HAL_RCC_GetSysClockFreq+0x204>)
 800611e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006124:	4618      	mov	r0, r3
 8006126:	3750      	adds	r7, #80	@ 0x50
 8006128:	46bd      	mov	sp, r7
 800612a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612e:	bf00      	nop
 8006130:	40023800 	.word	0x40023800
 8006134:	00f42400 	.word	0x00f42400
 8006138:	007a1200 	.word	0x007a1200

0800613c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006140:	4b03      	ldr	r3, [pc, #12]	@ (8006150 <HAL_RCC_GetHCLKFreq+0x14>)
 8006142:	681b      	ldr	r3, [r3, #0]
}
 8006144:	4618      	mov	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000000 	.word	0x20000000

08006154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006158:	f7ff fff0 	bl	800613c <HAL_RCC_GetHCLKFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	0a9b      	lsrs	r3, r3, #10
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	4903      	ldr	r1, [pc, #12]	@ (8006178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800616a:	5ccb      	ldrb	r3, [r1, r3]
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40023800 	.word	0x40023800
 8006178:	08019b0c 	.word	0x08019b0c

0800617c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006180:	f7ff ffdc 	bl	800613c <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b05      	ldr	r3, [pc, #20]	@ (800619c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0b5b      	lsrs	r3, r3, #13
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4903      	ldr	r1, [pc, #12]	@ (80061a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	08019b0c 	.word	0x08019b0c

080061a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d012      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061cc:	4b69      	ldr	r3, [pc, #420]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	4a68      	ldr	r2, [pc, #416]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80061d6:	6093      	str	r3, [r2, #8]
 80061d8:	4b66      	ldr	r3, [pc, #408]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e0:	4964      	ldr	r1, [pc, #400]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d017      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061fe:	4b5d      	ldr	r3, [pc, #372]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006204:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620c:	4959      	ldr	r1, [pc, #356]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006218:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800621c:	d101      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800621e:	2301      	movs	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800622a:	2301      	movs	r3, #1
 800622c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d017      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800623a:	4b4e      	ldr	r3, [pc, #312]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006240:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006248:	494a      	ldr	r1, [pc, #296]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006258:	d101      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800625a:	2301      	movs	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006266:	2301      	movs	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006276:	2301      	movs	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 808b 	beq.w	800639e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006288:	4b3a      	ldr	r3, [pc, #232]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	4a39      	ldr	r2, [pc, #228]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006292:	6413      	str	r3, [r2, #64]	@ 0x40
 8006294:	4b37      	ldr	r3, [pc, #220]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062a0:	4b35      	ldr	r3, [pc, #212]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a34      	ldr	r2, [pc, #208]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ac:	f7fb fd6e 	bl	8001d8c <HAL_GetTick>
 80062b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b4:	f7fb fd6a 	bl	8001d8c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	@ 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e357      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062d2:	4b28      	ldr	r3, [pc, #160]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d035      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d02e      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062f0:	4b20      	ldr	r3, [pc, #128]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006304:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006306:	4b1b      	ldr	r3, [pc, #108]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630a:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800630c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006310:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006312:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006318:	4b16      	ldr	r3, [pc, #88]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d114      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fb fd32 	bl	8001d8c <HAL_GetTick>
 8006328:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632a:	e00a      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800632c:	f7fb fd2e 	bl	8001d8c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e319      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006342:	4b0c      	ldr	r3, [pc, #48]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0ee      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800635a:	d111      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006368:	4b04      	ldr	r3, [pc, #16]	@ (800637c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800636a:	400b      	ands	r3, r1
 800636c:	4901      	ldr	r1, [pc, #4]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800636e:	4313      	orrs	r3, r2
 8006370:	608b      	str	r3, [r1, #8]
 8006372:	e00b      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006374:	40023800 	.word	0x40023800
 8006378:	40007000 	.word	0x40007000
 800637c:	0ffffcff 	.word	0x0ffffcff
 8006380:	4baa      	ldr	r3, [pc, #680]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4aa9      	ldr	r2, [pc, #676]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006386:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800638a:	6093      	str	r3, [r2, #8]
 800638c:	4ba7      	ldr	r3, [pc, #668]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800638e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006398:	49a4      	ldr	r1, [pc, #656]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800639a:	4313      	orrs	r3, r2
 800639c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063aa:	4ba0      	ldr	r3, [pc, #640]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063b0:	4a9e      	ldr	r2, [pc, #632]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80063ba:	4b9c      	ldr	r3, [pc, #624]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c4:	4999      	ldr	r1, [pc, #612]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063d8:	4b94      	ldr	r3, [pc, #592]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063e6:	4991      	ldr	r1, [pc, #580]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063fa:	4b8c      	ldr	r3, [pc, #560]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006400:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006408:	4988      	ldr	r1, [pc, #544]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800641c:	4b83      	ldr	r3, [pc, #524]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006422:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800642a:	4980      	ldr	r1, [pc, #512]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800642c:	4313      	orrs	r3, r2
 800642e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800643e:	4b7b      	ldr	r3, [pc, #492]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006444:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644c:	4977      	ldr	r1, [pc, #476]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006460:	4b72      	ldr	r3, [pc, #456]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006466:	f023 0203 	bic.w	r2, r3, #3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	496f      	ldr	r1, [pc, #444]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006482:	4b6a      	ldr	r3, [pc, #424]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006488:	f023 020c 	bic.w	r2, r3, #12
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006490:	4966      	ldr	r1, [pc, #408]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006492:	4313      	orrs	r3, r2
 8006494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064a4:	4b61      	ldr	r3, [pc, #388]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b2:	495e      	ldr	r1, [pc, #376]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064c6:	4b59      	ldr	r3, [pc, #356]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d4:	4955      	ldr	r1, [pc, #340]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064e8:	4b50      	ldr	r3, [pc, #320]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f6:	494d      	ldr	r1, [pc, #308]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800650a:	4b48      	ldr	r3, [pc, #288]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006510:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006518:	4944      	ldr	r1, [pc, #272]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800652c:	4b3f      	ldr	r3, [pc, #252]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006532:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653a:	493c      	ldr	r1, [pc, #240]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800653c:	4313      	orrs	r3, r2
 800653e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800654e:	4b37      	ldr	r3, [pc, #220]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006554:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800655c:	4933      	ldr	r1, [pc, #204]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006570:	4b2e      	ldr	r3, [pc, #184]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800657e:	492b      	ldr	r1, [pc, #172]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d011      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006592:	4b26      	ldr	r3, [pc, #152]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006598:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065a0:	4922      	ldr	r1, [pc, #136]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b0:	d101      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80065b2:	2301      	movs	r3, #1
 80065b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80065c2:	2301      	movs	r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065d2:	4b16      	ldr	r3, [pc, #88]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e0:	4912      	ldr	r1, [pc, #72]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065f4:	4b0d      	ldr	r3, [pc, #52]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006604:	4909      	ldr	r1, [pc, #36]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d006      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80d9 	beq.w	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006620:	4b02      	ldr	r3, [pc, #8]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a01      	ldr	r2, [pc, #4]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800662a:	e001      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800662c:	40023800 	.word	0x40023800
 8006630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006632:	f7fb fbab 	bl	8001d8c <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006638:	e008      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800663a:	f7fb fba7 	bl	8001d8c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b64      	cmp	r3, #100	@ 0x64
 8006646:	d901      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e194      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800664c:	4b6c      	ldr	r3, [pc, #432]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d021      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11d      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800666c:	4b64      	ldr	r3, [pc, #400]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800666e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006672:	0c1b      	lsrs	r3, r3, #16
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800667a:	4b61      	ldr	r3, [pc, #388]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800667c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006680:	0e1b      	lsrs	r3, r3, #24
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	019a      	lsls	r2, r3, #6
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	431a      	orrs	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	061b      	lsls	r3, r3, #24
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	071b      	lsls	r3, r3, #28
 80066a0:	4957      	ldr	r1, [pc, #348]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066bc:	d00a      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d02e      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066d2:	d129      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066da:	0c1b      	lsrs	r3, r3, #16
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066e2:	4b47      	ldr	r3, [pc, #284]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e8:	0f1b      	lsrs	r3, r3, #28
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	019a      	lsls	r2, r3, #6
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	041b      	lsls	r3, r3, #16
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	061b      	lsls	r3, r3, #24
 8006702:	431a      	orrs	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	071b      	lsls	r3, r3, #28
 8006708:	493d      	ldr	r1, [pc, #244]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006710:	4b3b      	ldr	r3, [pc, #236]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006716:	f023 021f 	bic.w	r2, r3, #31
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671e:	3b01      	subs	r3, #1
 8006720:	4937      	ldr	r1, [pc, #220]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01d      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006734:	4b32      	ldr	r3, [pc, #200]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800673a:	0e1b      	lsrs	r3, r3, #24
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006742:	4b2f      	ldr	r3, [pc, #188]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006748:	0f1b      	lsrs	r3, r3, #28
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	019a      	lsls	r2, r3, #6
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	041b      	lsls	r3, r3, #16
 800675c:	431a      	orrs	r2, r3
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	431a      	orrs	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	071b      	lsls	r3, r3, #28
 8006768:	4925      	ldr	r1, [pc, #148]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d011      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	019a      	lsls	r2, r3, #6
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	061b      	lsls	r3, r3, #24
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	071b      	lsls	r3, r3, #28
 8006798:	4919      	ldr	r1, [pc, #100]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067a0:	4b17      	ldr	r3, [pc, #92]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ac:	f7fb faee 	bl	8001d8c <HAL_GetTick>
 80067b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067b4:	f7fb faea 	bl	8001d8c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b64      	cmp	r3, #100	@ 0x64
 80067c0:	d901      	bls.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e0d7      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	f040 80cd 	bne.w	8006974 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067da:	4b09      	ldr	r3, [pc, #36]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a08      	ldr	r2, [pc, #32]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e6:	f7fb fad1 	bl	8001d8c <HAL_GetTick>
 80067ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067ec:	e00a      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067ee:	f7fb facd 	bl	8001d8c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b64      	cmp	r3, #100	@ 0x64
 80067fa:	d903      	bls.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e0ba      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006800:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006804:	4b5e      	ldr	r3, [pc, #376]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800680c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006810:	d0ed      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800682e:	2b00      	cmp	r3, #0
 8006830:	d02e      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d12a      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800683a:	4b51      	ldr	r3, [pc, #324]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006848:	4b4d      	ldr	r3, [pc, #308]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684e:	0f1b      	lsrs	r3, r3, #28
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	019a      	lsls	r2, r3, #6
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	041b      	lsls	r3, r3, #16
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	061b      	lsls	r3, r3, #24
 8006868:	431a      	orrs	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	071b      	lsls	r3, r3, #28
 800686e:	4944      	ldr	r1, [pc, #272]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006876:	4b42      	ldr	r3, [pc, #264]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800687c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	493d      	ldr	r1, [pc, #244]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d022      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068a4:	d11d      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068a6:	4b36      	ldr	r3, [pc, #216]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ac:	0e1b      	lsrs	r3, r3, #24
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068b4:	4b32      	ldr	r3, [pc, #200]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ba:	0f1b      	lsrs	r3, r3, #28
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	019a      	lsls	r2, r3, #6
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	431a      	orrs	r2, r3
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	061b      	lsls	r3, r3, #24
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	071b      	lsls	r3, r3, #28
 80068da:	4929      	ldr	r1, [pc, #164]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d028      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068ee:	4b24      	ldr	r3, [pc, #144]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f4:	0e1b      	lsrs	r3, r3, #24
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068fc:	4b20      	ldr	r3, [pc, #128]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	019a      	lsls	r2, r3, #6
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	431a      	orrs	r2, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	061b      	lsls	r3, r3, #24
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	071b      	lsls	r3, r3, #28
 8006922:	4917      	ldr	r1, [pc, #92]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006924:	4313      	orrs	r3, r2
 8006926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800692a:	4b15      	ldr	r3, [pc, #84]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800692c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006930:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	4911      	ldr	r1, [pc, #68]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006940:	4b0f      	ldr	r3, [pc, #60]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a0e      	ldr	r2, [pc, #56]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800694a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800694c:	f7fb fa1e 	bl	8001d8c <HAL_GetTick>
 8006950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006954:	f7fb fa1a 	bl	8001d8c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	@ 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e007      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800696e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006972:	d1ef      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40023800 	.word	0x40023800

08006984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e09d      	b.n	8006ad2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069a6:	d009      	beq.n	80069bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	61da      	str	r2, [r3, #28]
 80069ae:	e005      	b.n	80069bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fa fb9e 	bl	8001118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069fc:	d902      	bls.n	8006a04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e002      	b.n	8006a0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006a12:	d007      	beq.n	8006a24 <HAL_SPI_Init+0xa0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a1c:	d002      	beq.n	8006a24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a66:	ea42 0103 	orr.w	r1, r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	f003 0204 	and.w	r2, r3, #4
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006aa0:	ea42 0103 	orr.w	r1, r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ac0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b088      	sub	sp, #32
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_SPI_Transmit+0x22>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e158      	b.n	8006dae <HAL_SPI_Transmit+0x2d4>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b04:	f7fb f942 	bl	8001d8c <HAL_GetTick>
 8006b08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d002      	beq.n	8006b20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b1e:	e13d      	b.n	8006d9c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <HAL_SPI_Transmit+0x52>
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b30:	e134      	b.n	8006d9c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b7c:	d10f      	bne.n	8006b9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	d007      	beq.n	8006bbc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bc4:	d94b      	bls.n	8006c5e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <HAL_SPI_Transmit+0xfa>
 8006bce:	8afb      	ldrh	r3, [r7, #22]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d13e      	bne.n	8006c52 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be4:	1c9a      	adds	r2, r3, #2
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bf8:	e02b      	b.n	8006c52 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d112      	bne.n	8006c2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c2c:	e011      	b.n	8006c52 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c2e:	f7fb f8ad 	bl	8001d8c <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d803      	bhi.n	8006c46 <HAL_SPI_Transmit+0x16c>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d102      	bne.n	8006c4c <HAL_SPI_Transmit+0x172>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c50:	e0a4      	b.n	8006d9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ce      	bne.n	8006bfa <HAL_SPI_Transmit+0x120>
 8006c5c:	e07c      	b.n	8006d58 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_SPI_Transmit+0x192>
 8006c66:	8afb      	ldrh	r3, [r7, #22]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d170      	bne.n	8006d4e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d912      	bls.n	8006c9c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c86:	1c9a      	adds	r2, r3, #2
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b02      	subs	r3, #2
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c9a:	e058      	b.n	8006d4e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006cc2:	e044      	b.n	8006d4e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d12b      	bne.n	8006d2a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d912      	bls.n	8006d02 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce0:	881a      	ldrh	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	1c9a      	adds	r2, r3, #2
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b02      	subs	r3, #2
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d00:	e025      	b.n	8006d4e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	7812      	ldrb	r2, [r2, #0]
 8006d0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d28:	e011      	b.n	8006d4e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d2a:	f7fb f82f 	bl	8001d8c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d803      	bhi.n	8006d42 <HAL_SPI_Transmit+0x268>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d102      	bne.n	8006d48 <HAL_SPI_Transmit+0x26e>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d4c:	e026      	b.n	8006d9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1b5      	bne.n	8006cc4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fd9b 	bl	8007898 <SPI_EndRxTxTransaction>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e000      	b.n	8006d9c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006d9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d110      	bne.n	8006df4 <HAL_SPI_Receive_IT+0x3c>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dda:	d10b      	bne.n	8006df4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2204      	movs	r2, #4
 8006de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f894 	bl	8006f18 <HAL_SPI_TransmitReceive_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	e089      	b.n	8006f08 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_SPI_Receive_IT+0x4a>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e082      	b.n	8006f08 <HAL_SPI_Receive_IT+0x150>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d002      	beq.n	8006e1c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006e16:	2302      	movs	r3, #2
 8006e18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e1a:	e070      	b.n	8006efe <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_SPI_Receive_IT+0x70>
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e2c:	e067      	b.n	8006efe <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2204      	movs	r2, #4
 8006e32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	88fa      	ldrh	r2, [r7, #6]
 8006e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e72:	d90b      	bls.n	8006e8c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e82:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a22      	ldr	r2, [pc, #136]	@ (8006f10 <HAL_SPI_Receive_IT+0x158>)
 8006e88:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006e8a:	e00a      	b.n	8006ea2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e9a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8006f14 <HAL_SPI_Receive_IT+0x15c>)
 8006ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eaa:	d10f      	bne.n	8006ecc <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006eca:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006eda:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d008      	beq.n	8006efc <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e000      	b.n	8006efe <HAL_SPI_Receive_IT+0x146>
  }

error :
 8006efc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	08007519 	.word	0x08007519
 8006f14:	080074c9 	.word	0x080074c9

08006f18 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_SPI_TransmitReceive_IT+0x20>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e091      	b.n	800705c <HAL_SPI_TransmitReceive_IT+0x144>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f46:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f4e:	7dbb      	ldrb	r3, [r7, #22]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d00d      	beq.n	8006f70 <HAL_SPI_TransmitReceive_IT+0x58>
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f5a:	d106      	bne.n	8006f6a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <HAL_SPI_TransmitReceive_IT+0x52>
 8006f64:	7dbb      	ldrb	r3, [r7, #22]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d002      	beq.n	8006f70 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f6e:	e070      	b.n	8007052 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f86:	e064      	b.n	8007052 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d003      	beq.n	8006f9c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2205      	movs	r2, #5
 8006f98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	887a      	ldrh	r2, [r7, #2]
 8006fac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	887a      	ldrh	r2, [r7, #2]
 8006fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	887a      	ldrh	r2, [r7, #2]
 8006fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	887a      	ldrh	r2, [r7, #2]
 8006fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fd2:	d906      	bls.n	8006fe2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a24      	ldr	r2, [pc, #144]	@ (8007068 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006fd8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4a23      	ldr	r2, [pc, #140]	@ (800706c <HAL_SPI_TransmitReceive_IT+0x154>)
 8006fde:	651a      	str	r2, [r3, #80]	@ 0x50
 8006fe0:	e005      	b.n	8006fee <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4a22      	ldr	r2, [pc, #136]	@ (8007070 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a22      	ldr	r2, [pc, #136]	@ (8007074 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006fec:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ff6:	d802      	bhi.n	8006ffe <HAL_SPI_TransmitReceive_IT+0xe6>
 8006ff8:	887b      	ldrh	r3, [r7, #2]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d908      	bls.n	8007010 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	e007      	b.n	8007020 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800702e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	d008      	beq.n	8007050 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e000      	b.n	8007052 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007050:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
}
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	08007403 	.word	0x08007403
 800706c:	08007469 	.word	0x08007469
 8007070:	080072b3 	.word	0x080072b3
 8007074:	08007371 	.word	0x08007371

08007078 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10e      	bne.n	80070b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
    return;
 80070b6:	e0ce      	b.n	8007256 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <HAL_SPI_IRQHandler+0x5e>
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	4798      	blx	r3
    return;
 80070d4:	e0bf      	b.n	8007256 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <HAL_SPI_IRQHandler+0x7e>
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80b0 	beq.w	8007256 <HAL_SPI_IRQHandler+0x1de>
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 80aa 	beq.w	8007256 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d023      	beq.n	8007154 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b03      	cmp	r3, #3
 8007116:	d011      	beq.n	800713c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711c:	f043 0204 	orr.w	r2, r3, #4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	e00b      	b.n	8007154 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800713c:	2300      	movs	r3, #0
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]
        return;
 8007152:	e080      	b.n	8007256 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d014      	beq.n	8007188 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007162:	f043 0201 	orr.w	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007196:	f043 0208 	orr.w	r2, r3, #8
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800719e:	2300      	movs	r3, #0
 80071a0:	60bb      	str	r3, [r7, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d04f      	beq.n	8007254 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <HAL_SPI_IRQHandler+0x168>
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d034      	beq.n	800724a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0203 	bic.w	r2, r2, #3
 80071ee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d011      	beq.n	800721c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071fc:	4a17      	ldr	r2, [pc, #92]	@ (800725c <HAL_SPI_IRQHandler+0x1e4>)
 80071fe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007204:	4618      	mov	r0, r3
 8007206:	f7fb fe65 	bl	8002ed4 <HAL_DMA_Abort_IT>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007214:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007220:	2b00      	cmp	r3, #0
 8007222:	d016      	beq.n	8007252 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007228:	4a0c      	ldr	r2, [pc, #48]	@ (800725c <HAL_SPI_IRQHandler+0x1e4>)
 800722a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	4618      	mov	r0, r3
 8007232:	f7fb fe4f 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007240:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007248:	e003      	b.n	8007252 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f812 	bl	8007274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007250:	e000      	b.n	8007254 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007252:	bf00      	nop
    return;
 8007254:	bf00      	nop
  }
}
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	08007289 	.word	0x08007289

08007260 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007294:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff ffe5 	bl	8007274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d923      	bls.n	800730e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d0:	b292      	uxth	r2, r2
 80072d2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	1c9a      	adds	r2, r3, #2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b02      	subs	r3, #2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d11f      	bne.n	800733c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	e016      	b.n	800733c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f103 020c 	add.w	r2, r3, #12
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10f      	bne.n	8007368 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007356:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fb02 	bl	800796c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b01      	cmp	r3, #1
 8007380:	d912      	bls.n	80073a8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007386:	881a      	ldrh	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007392:	1c9a      	adds	r2, r3, #2
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800739c:	b29b      	uxth	r3, r3
 800739e:	3b02      	subs	r3, #2
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073a6:	e012      	b.n	80073ce <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	7812      	ldrb	r2, [r2, #0]
 80073b4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d110      	bne.n	80073fa <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073e6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fab9 	bl	800796c <SPI_CloseRxTx_ISR>
    }
  }
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	b292      	uxth	r2, r2
 8007416:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	1c9a      	adds	r2, r3, #2
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10f      	bne.n	8007460 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800744e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa86 	bl	800796c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d110      	bne.n	80074c0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa56 	bl	800796c <SPI_CloseRxTx_ISR>
    }
  }
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f103 020c 	add.w	r2, r3, #12
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa70 	bl	80079f0 <SPI_CloseRx_ISR>
  }
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	b292      	uxth	r2, r2
 800752c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007532:	1c9a      	adds	r2, r3, #2
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d102      	bne.n	800755c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa4a 	bl	80079f0 <SPI_CloseRx_ISR>
  }
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007574:	f7fa fc0a 	bl	8001d8c <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4413      	add	r3, r2
 8007582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007584:	f7fa fc02 	bl	8001d8c <HAL_GetTick>
 8007588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800758a:	4b39      	ldr	r3, [pc, #228]	@ (8007670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	015b      	lsls	r3, r3, #5
 8007590:	0d1b      	lsrs	r3, r3, #20
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800759a:	e054      	b.n	8007646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d050      	beq.n	8007646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075a4:	f7fa fbf2 	bl	8001d8c <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d902      	bls.n	80075ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d13d      	bne.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075d2:	d111      	bne.n	80075f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075dc:	d004      	beq.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e6:	d107      	bne.n	80075f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007600:	d10f      	bne.n	8007622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e017      	b.n	8007666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	3b01      	subs	r3, #1
 8007644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4013      	ands	r3, r2
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	429a      	cmp	r2, r3
 8007654:	bf0c      	ite	eq
 8007656:	2301      	moveq	r3, #1
 8007658:	2300      	movne	r3, #0
 800765a:	b2db      	uxtb	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	429a      	cmp	r2, r3
 8007662:	d19b      	bne.n	800759c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000000 	.word	0x20000000

08007674 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	@ 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007686:	f7fa fb81 	bl	8001d8c <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	1a9b      	subs	r3, r3, r2
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	4413      	add	r3, r2
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007696:	f7fa fb79 	bl	8001d8c <HAL_GetTick>
 800769a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076a4:	4b3d      	ldr	r3, [pc, #244]	@ (800779c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	00da      	lsls	r2, r3, #3
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	0d1b      	lsrs	r3, r3, #20
 80076b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
 80076ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80076bc:	e060      	b.n	8007780 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80076c4:	d107      	bne.n	80076d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d050      	beq.n	8007780 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076de:	f7fa fb55 	bl	8001d8c <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d902      	bls.n	80076f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d13d      	bne.n	8007770 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007702:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800770c:	d111      	bne.n	8007732 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007716:	d004      	beq.n	8007722 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007720:	d107      	bne.n	8007732 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007730:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773a:	d10f      	bne.n	800775c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800775a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e010      	b.n	8007792 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	3b01      	subs	r3, #1
 800777e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4013      	ands	r3, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	429a      	cmp	r2, r3
 800778e:	d196      	bne.n	80076be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3728      	adds	r7, #40	@ 0x28
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000000 	.word	0x20000000

080077a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077b4:	d111      	bne.n	80077da <SPI_EndRxTransaction+0x3a>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077be:	d004      	beq.n	80077ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077c8:	d107      	bne.n	80077da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077e2:	d112      	bne.n	800780a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	2180      	movs	r1, #128	@ 0x80
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff feb8 	bl	8007564 <SPI_WaitFlagStateUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d021      	beq.n	800783e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077fe:	f043 0220 	orr.w	r2, r3, #32
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e03d      	b.n	8007886 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800780a:	4b21      	ldr	r3, [pc, #132]	@ (8007890 <SPI_EndRxTransaction+0xf0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a21      	ldr	r2, [pc, #132]	@ (8007894 <SPI_EndRxTransaction+0xf4>)
 8007810:	fba2 2303 	umull	r2, r3, r2, r3
 8007814:	0d5b      	lsrs	r3, r3, #21
 8007816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800781a:	fb02 f303 	mul.w	r3, r2, r3
 800781e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3b01      	subs	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007836:	2b80      	cmp	r3, #128	@ 0x80
 8007838:	d0f2      	beq.n	8007820 <SPI_EndRxTransaction+0x80>
 800783a:	e000      	b.n	800783e <SPI_EndRxTransaction+0x9e>
        break;
 800783c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007846:	d11d      	bne.n	8007884 <SPI_EndRxTransaction+0xe4>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007850:	d004      	beq.n	800785c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800785a:	d113      	bne.n	8007884 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2200      	movs	r2, #0
 8007864:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff ff03 	bl	8007674 <SPI_WaitFifoStateUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e000      	b.n	8007886 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000000 	.word	0x20000000
 8007894:	165e9f81 	.word	0x165e9f81

08007898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7ff fedf 	bl	8007674 <SPI_WaitFifoStateUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d007      	beq.n	80078cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c0:	f043 0220 	orr.w	r2, r3, #32
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e046      	b.n	800795a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078cc:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <SPI_EndRxTxTransaction+0xcc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a25      	ldr	r2, [pc, #148]	@ (8007968 <SPI_EndRxTxTransaction+0xd0>)
 80078d2:	fba2 2303 	umull	r2, r3, r2, r3
 80078d6:	0d5b      	lsrs	r3, r3, #21
 80078d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80078dc:	fb02 f303 	mul.w	r3, r2, r3
 80078e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078ea:	d112      	bne.n	8007912 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	2180      	movs	r1, #128	@ 0x80
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff fe34 	bl	8007564 <SPI_WaitFlagStateUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d016      	beq.n	8007930 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007906:	f043 0220 	orr.w	r2, r3, #32
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e023      	b.n	800795a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	3b01      	subs	r3, #1
 800791c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007928:	2b80      	cmp	r3, #128	@ 0x80
 800792a:	d0f2      	beq.n	8007912 <SPI_EndRxTxTransaction+0x7a>
 800792c:	e000      	b.n	8007930 <SPI_EndRxTxTransaction+0x98>
        break;
 800792e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fe99 	bl	8007674 <SPI_WaitFifoStateUntilTimeout>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800794c:	f043 0220 	orr.w	r2, r3, #32
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e000      	b.n	800795a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000000 	.word	0x20000000
 8007968:	165e9f81 	.word	0x165e9f81

0800796c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007974:	f7fa fa0a 	bl	8001d8c <HAL_GetTick>
 8007978:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0220 	bic.w	r2, r2, #32
 8007988:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	2164      	movs	r1, #100	@ 0x64
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff ff82 	bl	8007898 <SPI_EndRxTxTransaction>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800799e:	f043 0220 	orr.w	r2, r3, #32
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d115      	bne.n	80079da <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d107      	bne.n	80079ca <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f00d fc5e 	bl	8015284 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80079c8:	e00e      	b.n	80079e8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fc44 	bl	8007260 <HAL_SPI_TxRxCpltCallback>
}
 80079d8:	e006      	b.n	80079e8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff fc46 	bl	8007274 <HAL_SPI_ErrorCallback>
}
 80079e8:	bf00      	nop
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007a06:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007a08:	f7fa f9c0 	bl	8001d8c <HAL_GetTick>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	461a      	mov	r2, r3
 8007a10:	2164      	movs	r1, #100	@ 0x64
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fec4 	bl	80077a0 <SPI_EndRxTransaction>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a22:	f043 0220 	orr.w	r2, r3, #32
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f00d fc22 	bl	8015284 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007a40:	e002      	b.n	8007a48 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff fc16 	bl	8007274 <HAL_SPI_ErrorCallback>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e049      	b.n	8007af6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7f9 fc0e 	bl	8001298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	f000 faee 	bl	8008070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d001      	beq.n	8007b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e054      	b.n	8007bc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a26      	ldr	r2, [pc, #152]	@ (8007bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d022      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b42:	d01d      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a22      	ldr	r2, [pc, #136]	@ (8007bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d018      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a21      	ldr	r2, [pc, #132]	@ (8007bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d013      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00e      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1e      	ldr	r2, [pc, #120]	@ (8007be0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d009      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1c      	ldr	r2, [pc, #112]	@ (8007be4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d004      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007be8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d115      	bne.n	8007bac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	4b19      	ldr	r3, [pc, #100]	@ (8007bec <HAL_TIM_Base_Start_IT+0xec>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b06      	cmp	r3, #6
 8007b90:	d015      	beq.n	8007bbe <HAL_TIM_Base_Start_IT+0xbe>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b98:	d011      	beq.n	8007bbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0201 	orr.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007baa:	e008      	b.n	8007bbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	e000      	b.n	8007bc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40000c00 	.word	0x40000c00
 8007be0:	40010400 	.word	0x40010400
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40001800 	.word	0x40001800
 8007bec:	00010007 	.word	0x00010007

08007bf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0201 	bic.w	r2, r2, #1
 8007c06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6a1a      	ldr	r2, [r3, #32]
 8007c0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10f      	bne.n	8007c38 <HAL_TIM_Base_Stop_IT+0x48>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007c22:	4013      	ands	r3, r2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d107      	bne.n	8007c38 <HAL_TIM_Base_Stop_IT+0x48>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0201 	bic.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d122      	bne.n	8007caa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d11b      	bne.n	8007caa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f06f 0202 	mvn.w	r2, #2
 8007c7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9cf 	bl	8008034 <HAL_TIM_IC_CaptureCallback>
 8007c96:	e005      	b.n	8007ca4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f9c1 	bl	8008020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9d2 	bl	8008048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d122      	bne.n	8007cfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d11b      	bne.n	8007cfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f06f 0204 	mvn.w	r2, #4
 8007cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f9a5 	bl	8008034 <HAL_TIM_IC_CaptureCallback>
 8007cea:	e005      	b.n	8007cf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f997 	bl	8008020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f9a8 	bl	8008048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d122      	bne.n	8007d52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d11b      	bne.n	8007d52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f06f 0208 	mvn.w	r2, #8
 8007d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2204      	movs	r2, #4
 8007d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f97b 	bl	8008034 <HAL_TIM_IC_CaptureCallback>
 8007d3e:	e005      	b.n	8007d4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f96d 	bl	8008020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f97e 	bl	8008048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d122      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	2b10      	cmp	r3, #16
 8007d6c:	d11b      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f06f 0210 	mvn.w	r2, #16
 8007d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f951 	bl	8008034 <HAL_TIM_IC_CaptureCallback>
 8007d92:	e005      	b.n	8007da0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f943 	bl	8008020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f954 	bl	8008048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d10e      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d107      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f06f 0201 	mvn.w	r2, #1
 8007dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f00d fb17 	bl	8015400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ddc:	2b80      	cmp	r3, #128	@ 0x80
 8007dde:	d10e      	bne.n	8007dfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dea:	2b80      	cmp	r3, #128	@ 0x80
 8007dec:	d107      	bne.n	8007dfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fb0b 	bl	8008414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0c:	d10e      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e18:	2b80      	cmp	r3, #128	@ 0x80
 8007e1a:	d107      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fafe 	bl	8008428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e36:	2b40      	cmp	r3, #64	@ 0x40
 8007e38:	d10e      	bne.n	8007e58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e44:	2b40      	cmp	r3, #64	@ 0x40
 8007e46:	d107      	bne.n	8007e58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f902 	bl	800805c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b20      	cmp	r3, #32
 8007e64:	d10e      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f003 0320 	and.w	r3, r3, #32
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d107      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f06f 0220 	mvn.w	r2, #32
 8007e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fabe 	bl	8008400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e0b4      	b.n	8008012 <HAL_TIM_ConfigClockSource+0x186>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	4b56      	ldr	r3, [pc, #344]	@ (800801c <HAL_TIM_ConfigClockSource+0x190>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee0:	d03e      	beq.n	8007f60 <HAL_TIM_ConfigClockSource+0xd4>
 8007ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee6:	f200 8087 	bhi.w	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eee:	f000 8086 	beq.w	8007ffe <HAL_TIM_ConfigClockSource+0x172>
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef6:	d87f      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef8:	2b70      	cmp	r3, #112	@ 0x70
 8007efa:	d01a      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0xa6>
 8007efc:	2b70      	cmp	r3, #112	@ 0x70
 8007efe:	d87b      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f00:	2b60      	cmp	r3, #96	@ 0x60
 8007f02:	d050      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8007f04:	2b60      	cmp	r3, #96	@ 0x60
 8007f06:	d877      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f08:	2b50      	cmp	r3, #80	@ 0x50
 8007f0a:	d03c      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0xfa>
 8007f0c:	2b50      	cmp	r3, #80	@ 0x50
 8007f0e:	d873      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f10:	2b40      	cmp	r3, #64	@ 0x40
 8007f12:	d058      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8007f14:	2b40      	cmp	r3, #64	@ 0x40
 8007f16:	d86f      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f18:	2b30      	cmp	r3, #48	@ 0x30
 8007f1a:	d064      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f1c:	2b30      	cmp	r3, #48	@ 0x30
 8007f1e:	d86b      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d060      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	d867      	bhi.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d05c      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f2c:	2b10      	cmp	r3, #16
 8007f2e:	d05a      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f30:	e062      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f42:	f000 f9af 	bl	80082a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	609a      	str	r2, [r3, #8]
      break;
 8007f5e:	e04f      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f70:	f000 f998 	bl	80082a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f82:	609a      	str	r2, [r3, #8]
      break;
 8007f84:	e03c      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 f90c 	bl	80081b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2150      	movs	r1, #80	@ 0x50
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f965 	bl	800826e <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e02c      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 f92b 	bl	800820e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2160      	movs	r1, #96	@ 0x60
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f955 	bl	800826e <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e01c      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f000 f8ec 	bl	80081b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2140      	movs	r1, #64	@ 0x40
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f945 	bl	800826e <TIM_ITRx_SetConfig>
      break;
 8007fe4:	e00c      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f000 f93c 	bl	800826e <TIM_ITRx_SetConfig>
      break;
 8007ff6:	e003      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffc:	e000      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	fffeff88 	.word	0xfffeff88

08008020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a40      	ldr	r2, [pc, #256]	@ (8008184 <TIM_Base_SetConfig+0x114>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d013      	beq.n	80080b0 <TIM_Base_SetConfig+0x40>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800808e:	d00f      	beq.n	80080b0 <TIM_Base_SetConfig+0x40>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a3d      	ldr	r2, [pc, #244]	@ (8008188 <TIM_Base_SetConfig+0x118>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00b      	beq.n	80080b0 <TIM_Base_SetConfig+0x40>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a3c      	ldr	r2, [pc, #240]	@ (800818c <TIM_Base_SetConfig+0x11c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d007      	beq.n	80080b0 <TIM_Base_SetConfig+0x40>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a3b      	ldr	r2, [pc, #236]	@ (8008190 <TIM_Base_SetConfig+0x120>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d003      	beq.n	80080b0 <TIM_Base_SetConfig+0x40>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a3a      	ldr	r2, [pc, #232]	@ (8008194 <TIM_Base_SetConfig+0x124>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d108      	bne.n	80080c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008184 <TIM_Base_SetConfig+0x114>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d02b      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d0:	d027      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008188 <TIM_Base_SetConfig+0x118>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d023      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a2b      	ldr	r2, [pc, #172]	@ (800818c <TIM_Base_SetConfig+0x11c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d01f      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008190 <TIM_Base_SetConfig+0x120>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d01b      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a29      	ldr	r2, [pc, #164]	@ (8008194 <TIM_Base_SetConfig+0x124>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d017      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a28      	ldr	r2, [pc, #160]	@ (8008198 <TIM_Base_SetConfig+0x128>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d013      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a27      	ldr	r2, [pc, #156]	@ (800819c <TIM_Base_SetConfig+0x12c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00f      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a26      	ldr	r2, [pc, #152]	@ (80081a0 <TIM_Base_SetConfig+0x130>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00b      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a25      	ldr	r2, [pc, #148]	@ (80081a4 <TIM_Base_SetConfig+0x134>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d007      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a24      	ldr	r2, [pc, #144]	@ (80081a8 <TIM_Base_SetConfig+0x138>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d003      	beq.n	8008122 <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a23      	ldr	r2, [pc, #140]	@ (80081ac <TIM_Base_SetConfig+0x13c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d108      	bne.n	8008134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a0a      	ldr	r2, [pc, #40]	@ (8008184 <TIM_Base_SetConfig+0x114>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0xf8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a0c      	ldr	r2, [pc, #48]	@ (8008194 <TIM_Base_SetConfig+0x124>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d103      	bne.n	8008170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	615a      	str	r2, [r3, #20]
}
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40010000 	.word	0x40010000
 8008188:	40000400 	.word	0x40000400
 800818c:	40000800 	.word	0x40000800
 8008190:	40000c00 	.word	0x40000c00
 8008194:	40010400 	.word	0x40010400
 8008198:	40014000 	.word	0x40014000
 800819c:	40014400 	.word	0x40014400
 80081a0:	40014800 	.word	0x40014800
 80081a4:	40001800 	.word	0x40001800
 80081a8:	40001c00 	.word	0x40001c00
 80081ac:	40002000 	.word	0x40002000

080081b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f023 0201 	bic.w	r2, r3, #1
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f023 030a 	bic.w	r3, r3, #10
 80081ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	621a      	str	r2, [r3, #32]
}
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800820e:	b480      	push	{r7}
 8008210:	b087      	sub	sp, #28
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	f023 0210 	bic.w	r2, r3, #16
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800824a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	f043 0307 	orr.w	r3, r3, #7
 8008290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	609a      	str	r2, [r3, #8]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	021a      	lsls	r2, r3, #8
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	431a      	orrs	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	609a      	str	r2, [r3, #8]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e06d      	b.n	80083d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a30      	ldr	r2, [pc, #192]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a2f      	ldr	r2, [pc, #188]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d108      	bne.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4313      	orrs	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a20      	ldr	r2, [pc, #128]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d022      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800836e:	d01d      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1d      	ldr	r2, [pc, #116]	@ (80083ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d018      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1c      	ldr	r2, [pc, #112]	@ (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d013      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1a      	ldr	r2, [pc, #104]	@ (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00e      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a15      	ldr	r2, [pc, #84]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d009      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a16      	ldr	r2, [pc, #88]	@ (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d004      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a15      	ldr	r2, [pc, #84]	@ (80083fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d10c      	bne.n	80083c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	40010000 	.word	0x40010000
 80083e8:	40010400 	.word	0x40010400
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40014000 	.word	0x40014000
 80083fc:	40001800 	.word	0x40001800

08008400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e040      	b.n	80084d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d106      	bne.n	8008464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7f8 ff5a 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2224      	movs	r2, #36	@ 0x24
 8008468:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0201 	bic.w	r2, r2, #1
 8008478:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fca0 	bl	8008dc0 <UART_SetConfig>
 8008480:	4603      	mov	r3, r0
 8008482:	2b01      	cmp	r3, #1
 8008484:	d101      	bne.n	800848a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e022      	b.n	80084d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fef8 	bl	8009288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0201 	orr.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 ff7f 	bl	80093cc <UART_CheckIdleState>
 80084ce:	4603      	mov	r3, r0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	@ 0x28
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d171      	bne.n	80085d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <HAL_UART_Transmit+0x24>
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e06a      	b.n	80085d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2221      	movs	r2, #33	@ 0x21
 800850c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800850e:	f7f9 fc3d 	bl	8001d8c <HAL_GetTick>
 8008512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	88fa      	ldrh	r2, [r7, #6]
 8008518:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	88fa      	ldrh	r2, [r7, #6]
 8008520:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852c:	d108      	bne.n	8008540 <HAL_UART_Transmit+0x68>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	61bb      	str	r3, [r7, #24]
 800853e:	e003      	b.n	8008548 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008548:	e02c      	b.n	80085a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2200      	movs	r2, #0
 8008552:	2180      	movs	r1, #128	@ 0x80
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 ff70 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e038      	b.n	80085d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008578:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	3302      	adds	r3, #2
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	e007      	b.n	8008592 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	781a      	ldrb	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	3301      	adds	r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1cc      	bne.n	800854a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2200      	movs	r2, #0
 80085b8:	2140      	movs	r1, #64	@ 0x40
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 ff3d 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e005      	b.n	80085d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2220      	movs	r2, #32
 80085ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	e000      	b.n	80085d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80085d4:	2302      	movs	r3, #2
  }
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3720      	adds	r7, #32
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b08a      	sub	sp, #40	@ 0x28
 80085e2:	af02      	add	r7, sp, #8
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	603b      	str	r3, [r7, #0]
 80085ea:	4613      	mov	r3, r2
 80085ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	f040 80b1 	bne.w	800875c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <HAL_UART_Receive+0x28>
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e0a9      	b.n	800875e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2222      	movs	r2, #34	@ 0x22
 8008616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008620:	f7f9 fbb4 	bl	8001d8c <HAL_GetTick>
 8008624:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800863e:	d10e      	bne.n	800865e <HAL_UART_Receive+0x80>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d105      	bne.n	8008654 <HAL_UART_Receive+0x76>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800864e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008652:	e02d      	b.n	80086b0 <HAL_UART_Receive+0xd2>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	22ff      	movs	r2, #255	@ 0xff
 8008658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800865c:	e028      	b.n	80086b0 <HAL_UART_Receive+0xd2>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10d      	bne.n	8008682 <HAL_UART_Receive+0xa4>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d104      	bne.n	8008678 <HAL_UART_Receive+0x9a>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	22ff      	movs	r2, #255	@ 0xff
 8008672:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008676:	e01b      	b.n	80086b0 <HAL_UART_Receive+0xd2>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	227f      	movs	r2, #127	@ 0x7f
 800867c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008680:	e016      	b.n	80086b0 <HAL_UART_Receive+0xd2>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800868a:	d10d      	bne.n	80086a8 <HAL_UART_Receive+0xca>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <HAL_UART_Receive+0xc0>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	227f      	movs	r2, #127	@ 0x7f
 8008698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800869c:	e008      	b.n	80086b0 <HAL_UART_Receive+0xd2>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	223f      	movs	r2, #63	@ 0x3f
 80086a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80086a6:	e003      	b.n	80086b0 <HAL_UART_Receive+0xd2>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c0:	d108      	bne.n	80086d4 <HAL_UART_Receive+0xf6>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d104      	bne.n	80086d4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	e003      	b.n	80086dc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80086dc:	e032      	b.n	8008744 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2200      	movs	r2, #0
 80086e6:	2120      	movs	r1, #32
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fea6 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e032      	b.n	800875e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10c      	bne.n	8008718 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008704:	b29a      	uxth	r2, r3
 8008706:	8a7b      	ldrh	r3, [r7, #18]
 8008708:	4013      	ands	r3, r2
 800870a:	b29a      	uxth	r2, r3
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	3302      	adds	r3, #2
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	e00c      	b.n	8008732 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871e:	b2da      	uxtb	r2, r3
 8008720:	8a7b      	ldrh	r3, [r7, #18]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	4013      	ands	r3, r2
 8008726:	b2da      	uxtb	r2, r3
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	3301      	adds	r3, #1
 8008730:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1c6      	bne.n	80086de <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	e000      	b.n	800875e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800875c:	2302      	movs	r3, #2
  }
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b08a      	sub	sp, #40	@ 0x28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	4613      	mov	r3, r2
 8008772:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877a:	2b20      	cmp	r3, #32
 800877c:	d132      	bne.n	80087e4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_UART_Receive_IT+0x24>
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e02b      	b.n	80087e6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d018      	beq.n	80087d4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	613b      	str	r3, [r7, #16]
   return(result);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	623b      	str	r3, [r7, #32]
 80087c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	69f9      	ldr	r1, [r7, #28]
 80087c6:	6a3a      	ldr	r2, [r7, #32]
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087d4:	88fb      	ldrh	r3, [r7, #6]
 80087d6:	461a      	mov	r2, r3
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fef4 	bl	80095c8 <UART_Start_Receive_IT>
 80087e0:	4603      	mov	r3, r0
 80087e2:	e000      	b.n	80087e6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80087e4:	2302      	movs	r3, #2
  }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3728      	adds	r7, #40	@ 0x28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b0ba      	sub	sp, #232	@ 0xe8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008816:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800881a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800881e:	4013      	ands	r3, r2
 8008820:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d115      	bne.n	8008858 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800882c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00f      	beq.n	8008858 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800883c:	f003 0320 	and.w	r3, r3, #32
 8008840:	2b00      	cmp	r3, #0
 8008842:	d009      	beq.n	8008858 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 8297 	beq.w	8008d7c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
      }
      return;
 8008856:	e291      	b.n	8008d7c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 8117 	beq.w	8008a90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800886e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008872:	4b85      	ldr	r3, [pc, #532]	@ (8008a88 <HAL_UART_IRQHandler+0x298>)
 8008874:	4013      	ands	r3, r2
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 810a 	beq.w	8008a90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800887c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d011      	beq.n	80088ac <HAL_UART_IRQHandler+0xbc>
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800888c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2201      	movs	r2, #1
 800889a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088a2:	f043 0201 	orr.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d011      	beq.n	80088dc <HAL_UART_IRQHandler+0xec>
 80088b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2202      	movs	r2, #2
 80088ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088d2:	f043 0204 	orr.w	r2, r3, #4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d011      	beq.n	800890c <HAL_UART_IRQHandler+0x11c>
 80088e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2204      	movs	r2, #4
 80088fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008902:	f043 0202 	orr.w	r2, r3, #2
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d017      	beq.n	8008948 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800891c:	f003 0320 	and.w	r3, r3, #32
 8008920:	2b00      	cmp	r3, #0
 8008922:	d105      	bne.n	8008930 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008928:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2208      	movs	r2, #8
 8008936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800893e:	f043 0208 	orr.w	r2, r3, #8
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800894c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008950:	2b00      	cmp	r3, #0
 8008952:	d012      	beq.n	800897a <HAL_UART_IRQHandler+0x18a>
 8008954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008958:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00c      	beq.n	800897a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008970:	f043 0220 	orr.w	r2, r3, #32
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 81fd 	beq.w	8008d80 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00d      	beq.n	80089ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d007      	beq.n	80089ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c2:	2b40      	cmp	r3, #64	@ 0x40
 80089c4:	d005      	beq.n	80089d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80089c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d04f      	beq.n	8008a72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 febe 	bl	8009754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089e2:	2b40      	cmp	r3, #64	@ 0x40
 80089e4:	d141      	bne.n	8008a6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3308      	adds	r3, #8
 80089ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80089fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1d9      	bne.n	80089e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d013      	beq.n	8008a62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a3e:	4a13      	ldr	r2, [pc, #76]	@ (8008a8c <HAL_UART_IRQHandler+0x29c>)
 8008a40:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fa fa44 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d017      	beq.n	8008a82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a60:	e00f      	b.n	8008a82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f00c fec2 	bl	80157ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a68:	e00b      	b.n	8008a82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f00c febe 	bl	80157ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a70:	e007      	b.n	8008a82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f00c feba 	bl	80157ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008a80:	e17e      	b.n	8008d80 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a82:	bf00      	nop
    return;
 8008a84:	e17c      	b.n	8008d80 <HAL_UART_IRQHandler+0x590>
 8008a86:	bf00      	nop
 8008a88:	04000120 	.word	0x04000120
 8008a8c:	0800981d 	.word	0x0800981d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	f040 814c 	bne.w	8008d32 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a9e:	f003 0310 	and.w	r3, r3, #16
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8145 	beq.w	8008d32 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f003 0310 	and.w	r3, r3, #16
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 813e 	beq.w	8008d32 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2210      	movs	r2, #16
 8008abc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac8:	2b40      	cmp	r3, #64	@ 0x40
 8008aca:	f040 80b6 	bne.w	8008c3a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ada:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 8150 	beq.w	8008d84 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008aee:	429a      	cmp	r2, r3
 8008af0:	f080 8148 	bcs.w	8008d84 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008afa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b08:	f000 8086 	beq.w	8008c18 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1da      	bne.n	8008b0c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b68:	f023 0301 	bic.w	r3, r3, #1
 8008b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e1      	bne.n	8008b56 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3308      	adds	r3, #8
 8008bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e3      	bne.n	8008b92 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008be8:	f023 0310 	bic.w	r3, r3, #16
 8008bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e4      	bne.n	8008bd8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fa f8ee 	bl	8002df4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f8b8 	bl	8008da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c38:	e0a4      	b.n	8008d84 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 8096 	beq.w	8008d88 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8091 	beq.w	8008d88 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c90:	e841 2300 	strex	r3, r2, [r1]
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e4      	bne.n	8008c66 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	e853 3f00 	ldrex	r3, [r3]
 8008caa:	623b      	str	r3, [r7, #32]
   return(result);
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	f023 0301 	bic.w	r3, r3, #1
 8008cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008cc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e3      	bne.n	8008c9c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f023 0310 	bic.w	r3, r3, #16
 8008cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	69b9      	ldr	r1, [r7, #24]
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	617b      	str	r3, [r7, #20]
   return(result);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e4      	bne.n	8008ce8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2202      	movs	r2, #2
 8008d22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f83c 	bl	8008da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d30:	e02a      	b.n	8008d88 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00e      	beq.n	8008d5c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d008      	beq.n	8008d5c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d01c      	beq.n	8008d8c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
    }
    return;
 8008d5a:	e017      	b.n	8008d8c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d012      	beq.n	8008d8e <HAL_UART_IRQHandler+0x59e>
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00c      	beq.n	8008d8e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fd67 	bl	8009848 <UART_EndTransmit_IT>
    return;
 8008d7a:	e008      	b.n	8008d8e <HAL_UART_IRQHandler+0x59e>
      return;
 8008d7c:	bf00      	nop
 8008d7e:	e006      	b.n	8008d8e <HAL_UART_IRQHandler+0x59e>
    return;
 8008d80:	bf00      	nop
 8008d82:	e004      	b.n	8008d8e <HAL_UART_IRQHandler+0x59e>
      return;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <HAL_UART_IRQHandler+0x59e>
      return;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <HAL_UART_IRQHandler+0x59e>
    return;
 8008d8c:	bf00      	nop
  }

}
 8008d8e:	37e8      	adds	r7, #232	@ 0xe8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	4ba6      	ldr	r3, [pc, #664]	@ (8009084 <UART_SetConfig+0x2c4>)
 8008dec:	4013      	ands	r3, r2
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6812      	ldr	r2, [r2, #0]
 8008df2:	6979      	ldr	r1, [r7, #20]
 8008df4:	430b      	orrs	r3, r1
 8008df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a94      	ldr	r2, [pc, #592]	@ (8009088 <UART_SetConfig+0x2c8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d120      	bne.n	8008e7e <UART_SetConfig+0xbe>
 8008e3c:	4b93      	ldr	r3, [pc, #588]	@ (800908c <UART_SetConfig+0x2cc>)
 8008e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d816      	bhi.n	8008e78 <UART_SetConfig+0xb8>
 8008e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <UART_SetConfig+0x90>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008e6d 	.word	0x08008e6d
 8008e58:	08008e67 	.word	0x08008e67
 8008e5c:	08008e73 	.word	0x08008e73
 8008e60:	2301      	movs	r3, #1
 8008e62:	77fb      	strb	r3, [r7, #31]
 8008e64:	e150      	b.n	8009108 <UART_SetConfig+0x348>
 8008e66:	2302      	movs	r3, #2
 8008e68:	77fb      	strb	r3, [r7, #31]
 8008e6a:	e14d      	b.n	8009108 <UART_SetConfig+0x348>
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e14a      	b.n	8009108 <UART_SetConfig+0x348>
 8008e72:	2308      	movs	r3, #8
 8008e74:	77fb      	strb	r3, [r7, #31]
 8008e76:	e147      	b.n	8009108 <UART_SetConfig+0x348>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	77fb      	strb	r3, [r7, #31]
 8008e7c:	e144      	b.n	8009108 <UART_SetConfig+0x348>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a83      	ldr	r2, [pc, #524]	@ (8009090 <UART_SetConfig+0x2d0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d132      	bne.n	8008eee <UART_SetConfig+0x12e>
 8008e88:	4b80      	ldr	r3, [pc, #512]	@ (800908c <UART_SetConfig+0x2cc>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8e:	f003 030c 	and.w	r3, r3, #12
 8008e92:	2b0c      	cmp	r3, #12
 8008e94:	d828      	bhi.n	8008ee8 <UART_SetConfig+0x128>
 8008e96:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <UART_SetConfig+0xdc>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ed1 	.word	0x08008ed1
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008ee9 	.word	0x08008ee9
 8008ea8:	08008ee9 	.word	0x08008ee9
 8008eac:	08008edd 	.word	0x08008edd
 8008eb0:	08008ee9 	.word	0x08008ee9
 8008eb4:	08008ee9 	.word	0x08008ee9
 8008eb8:	08008ee9 	.word	0x08008ee9
 8008ebc:	08008ed7 	.word	0x08008ed7
 8008ec0:	08008ee9 	.word	0x08008ee9
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008ee9 	.word	0x08008ee9
 8008ecc:	08008ee3 	.word	0x08008ee3
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	77fb      	strb	r3, [r7, #31]
 8008ed4:	e118      	b.n	8009108 <UART_SetConfig+0x348>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	77fb      	strb	r3, [r7, #31]
 8008eda:	e115      	b.n	8009108 <UART_SetConfig+0x348>
 8008edc:	2304      	movs	r3, #4
 8008ede:	77fb      	strb	r3, [r7, #31]
 8008ee0:	e112      	b.n	8009108 <UART_SetConfig+0x348>
 8008ee2:	2308      	movs	r3, #8
 8008ee4:	77fb      	strb	r3, [r7, #31]
 8008ee6:	e10f      	b.n	8009108 <UART_SetConfig+0x348>
 8008ee8:	2310      	movs	r3, #16
 8008eea:	77fb      	strb	r3, [r7, #31]
 8008eec:	e10c      	b.n	8009108 <UART_SetConfig+0x348>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a68      	ldr	r2, [pc, #416]	@ (8009094 <UART_SetConfig+0x2d4>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d120      	bne.n	8008f3a <UART_SetConfig+0x17a>
 8008ef8:	4b64      	ldr	r3, [pc, #400]	@ (800908c <UART_SetConfig+0x2cc>)
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008efe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f02:	2b30      	cmp	r3, #48	@ 0x30
 8008f04:	d013      	beq.n	8008f2e <UART_SetConfig+0x16e>
 8008f06:	2b30      	cmp	r3, #48	@ 0x30
 8008f08:	d814      	bhi.n	8008f34 <UART_SetConfig+0x174>
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d009      	beq.n	8008f22 <UART_SetConfig+0x162>
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d810      	bhi.n	8008f34 <UART_SetConfig+0x174>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <UART_SetConfig+0x15c>
 8008f16:	2b10      	cmp	r3, #16
 8008f18:	d006      	beq.n	8008f28 <UART_SetConfig+0x168>
 8008f1a:	e00b      	b.n	8008f34 <UART_SetConfig+0x174>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	77fb      	strb	r3, [r7, #31]
 8008f20:	e0f2      	b.n	8009108 <UART_SetConfig+0x348>
 8008f22:	2302      	movs	r3, #2
 8008f24:	77fb      	strb	r3, [r7, #31]
 8008f26:	e0ef      	b.n	8009108 <UART_SetConfig+0x348>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	e0ec      	b.n	8009108 <UART_SetConfig+0x348>
 8008f2e:	2308      	movs	r3, #8
 8008f30:	77fb      	strb	r3, [r7, #31]
 8008f32:	e0e9      	b.n	8009108 <UART_SetConfig+0x348>
 8008f34:	2310      	movs	r3, #16
 8008f36:	77fb      	strb	r3, [r7, #31]
 8008f38:	e0e6      	b.n	8009108 <UART_SetConfig+0x348>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a56      	ldr	r2, [pc, #344]	@ (8009098 <UART_SetConfig+0x2d8>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d120      	bne.n	8008f86 <UART_SetConfig+0x1c6>
 8008f44:	4b51      	ldr	r3, [pc, #324]	@ (800908c <UART_SetConfig+0x2cc>)
 8008f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f50:	d013      	beq.n	8008f7a <UART_SetConfig+0x1ba>
 8008f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f54:	d814      	bhi.n	8008f80 <UART_SetConfig+0x1c0>
 8008f56:	2b80      	cmp	r3, #128	@ 0x80
 8008f58:	d009      	beq.n	8008f6e <UART_SetConfig+0x1ae>
 8008f5a:	2b80      	cmp	r3, #128	@ 0x80
 8008f5c:	d810      	bhi.n	8008f80 <UART_SetConfig+0x1c0>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <UART_SetConfig+0x1a8>
 8008f62:	2b40      	cmp	r3, #64	@ 0x40
 8008f64:	d006      	beq.n	8008f74 <UART_SetConfig+0x1b4>
 8008f66:	e00b      	b.n	8008f80 <UART_SetConfig+0x1c0>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e0cc      	b.n	8009108 <UART_SetConfig+0x348>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e0c9      	b.n	8009108 <UART_SetConfig+0x348>
 8008f74:	2304      	movs	r3, #4
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e0c6      	b.n	8009108 <UART_SetConfig+0x348>
 8008f7a:	2308      	movs	r3, #8
 8008f7c:	77fb      	strb	r3, [r7, #31]
 8008f7e:	e0c3      	b.n	8009108 <UART_SetConfig+0x348>
 8008f80:	2310      	movs	r3, #16
 8008f82:	77fb      	strb	r3, [r7, #31]
 8008f84:	e0c0      	b.n	8009108 <UART_SetConfig+0x348>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a44      	ldr	r2, [pc, #272]	@ (800909c <UART_SetConfig+0x2dc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d125      	bne.n	8008fdc <UART_SetConfig+0x21c>
 8008f90:	4b3e      	ldr	r3, [pc, #248]	@ (800908c <UART_SetConfig+0x2cc>)
 8008f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f9e:	d017      	beq.n	8008fd0 <UART_SetConfig+0x210>
 8008fa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fa4:	d817      	bhi.n	8008fd6 <UART_SetConfig+0x216>
 8008fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008faa:	d00b      	beq.n	8008fc4 <UART_SetConfig+0x204>
 8008fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb0:	d811      	bhi.n	8008fd6 <UART_SetConfig+0x216>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <UART_SetConfig+0x1fe>
 8008fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fba:	d006      	beq.n	8008fca <UART_SetConfig+0x20a>
 8008fbc:	e00b      	b.n	8008fd6 <UART_SetConfig+0x216>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	77fb      	strb	r3, [r7, #31]
 8008fc2:	e0a1      	b.n	8009108 <UART_SetConfig+0x348>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	77fb      	strb	r3, [r7, #31]
 8008fc8:	e09e      	b.n	8009108 <UART_SetConfig+0x348>
 8008fca:	2304      	movs	r3, #4
 8008fcc:	77fb      	strb	r3, [r7, #31]
 8008fce:	e09b      	b.n	8009108 <UART_SetConfig+0x348>
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	77fb      	strb	r3, [r7, #31]
 8008fd4:	e098      	b.n	8009108 <UART_SetConfig+0x348>
 8008fd6:	2310      	movs	r3, #16
 8008fd8:	77fb      	strb	r3, [r7, #31]
 8008fda:	e095      	b.n	8009108 <UART_SetConfig+0x348>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80090a0 <UART_SetConfig+0x2e0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d125      	bne.n	8009032 <UART_SetConfig+0x272>
 8008fe6:	4b29      	ldr	r3, [pc, #164]	@ (800908c <UART_SetConfig+0x2cc>)
 8008fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ff0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ff4:	d017      	beq.n	8009026 <UART_SetConfig+0x266>
 8008ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ffa:	d817      	bhi.n	800902c <UART_SetConfig+0x26c>
 8008ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009000:	d00b      	beq.n	800901a <UART_SetConfig+0x25a>
 8009002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009006:	d811      	bhi.n	800902c <UART_SetConfig+0x26c>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <UART_SetConfig+0x254>
 800900c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009010:	d006      	beq.n	8009020 <UART_SetConfig+0x260>
 8009012:	e00b      	b.n	800902c <UART_SetConfig+0x26c>
 8009014:	2301      	movs	r3, #1
 8009016:	77fb      	strb	r3, [r7, #31]
 8009018:	e076      	b.n	8009108 <UART_SetConfig+0x348>
 800901a:	2302      	movs	r3, #2
 800901c:	77fb      	strb	r3, [r7, #31]
 800901e:	e073      	b.n	8009108 <UART_SetConfig+0x348>
 8009020:	2304      	movs	r3, #4
 8009022:	77fb      	strb	r3, [r7, #31]
 8009024:	e070      	b.n	8009108 <UART_SetConfig+0x348>
 8009026:	2308      	movs	r3, #8
 8009028:	77fb      	strb	r3, [r7, #31]
 800902a:	e06d      	b.n	8009108 <UART_SetConfig+0x348>
 800902c:	2310      	movs	r3, #16
 800902e:	77fb      	strb	r3, [r7, #31]
 8009030:	e06a      	b.n	8009108 <UART_SetConfig+0x348>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a1b      	ldr	r2, [pc, #108]	@ (80090a4 <UART_SetConfig+0x2e4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d138      	bne.n	80090ae <UART_SetConfig+0x2ee>
 800903c:	4b13      	ldr	r3, [pc, #76]	@ (800908c <UART_SetConfig+0x2cc>)
 800903e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009042:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009046:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800904a:	d017      	beq.n	800907c <UART_SetConfig+0x2bc>
 800904c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009050:	d82a      	bhi.n	80090a8 <UART_SetConfig+0x2e8>
 8009052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009056:	d00b      	beq.n	8009070 <UART_SetConfig+0x2b0>
 8009058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800905c:	d824      	bhi.n	80090a8 <UART_SetConfig+0x2e8>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <UART_SetConfig+0x2aa>
 8009062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009066:	d006      	beq.n	8009076 <UART_SetConfig+0x2b6>
 8009068:	e01e      	b.n	80090a8 <UART_SetConfig+0x2e8>
 800906a:	2300      	movs	r3, #0
 800906c:	77fb      	strb	r3, [r7, #31]
 800906e:	e04b      	b.n	8009108 <UART_SetConfig+0x348>
 8009070:	2302      	movs	r3, #2
 8009072:	77fb      	strb	r3, [r7, #31]
 8009074:	e048      	b.n	8009108 <UART_SetConfig+0x348>
 8009076:	2304      	movs	r3, #4
 8009078:	77fb      	strb	r3, [r7, #31]
 800907a:	e045      	b.n	8009108 <UART_SetConfig+0x348>
 800907c:	2308      	movs	r3, #8
 800907e:	77fb      	strb	r3, [r7, #31]
 8009080:	e042      	b.n	8009108 <UART_SetConfig+0x348>
 8009082:	bf00      	nop
 8009084:	efff69f3 	.word	0xefff69f3
 8009088:	40011000 	.word	0x40011000
 800908c:	40023800 	.word	0x40023800
 8009090:	40004400 	.word	0x40004400
 8009094:	40004800 	.word	0x40004800
 8009098:	40004c00 	.word	0x40004c00
 800909c:	40005000 	.word	0x40005000
 80090a0:	40011400 	.word	0x40011400
 80090a4:	40007800 	.word	0x40007800
 80090a8:	2310      	movs	r3, #16
 80090aa:	77fb      	strb	r3, [r7, #31]
 80090ac:	e02c      	b.n	8009108 <UART_SetConfig+0x348>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a72      	ldr	r2, [pc, #456]	@ (800927c <UART_SetConfig+0x4bc>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d125      	bne.n	8009104 <UART_SetConfig+0x344>
 80090b8:	4b71      	ldr	r3, [pc, #452]	@ (8009280 <UART_SetConfig+0x4c0>)
 80090ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80090c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80090c6:	d017      	beq.n	80090f8 <UART_SetConfig+0x338>
 80090c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80090cc:	d817      	bhi.n	80090fe <UART_SetConfig+0x33e>
 80090ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090d2:	d00b      	beq.n	80090ec <UART_SetConfig+0x32c>
 80090d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090d8:	d811      	bhi.n	80090fe <UART_SetConfig+0x33e>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <UART_SetConfig+0x326>
 80090de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090e2:	d006      	beq.n	80090f2 <UART_SetConfig+0x332>
 80090e4:	e00b      	b.n	80090fe <UART_SetConfig+0x33e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	77fb      	strb	r3, [r7, #31]
 80090ea:	e00d      	b.n	8009108 <UART_SetConfig+0x348>
 80090ec:	2302      	movs	r3, #2
 80090ee:	77fb      	strb	r3, [r7, #31]
 80090f0:	e00a      	b.n	8009108 <UART_SetConfig+0x348>
 80090f2:	2304      	movs	r3, #4
 80090f4:	77fb      	strb	r3, [r7, #31]
 80090f6:	e007      	b.n	8009108 <UART_SetConfig+0x348>
 80090f8:	2308      	movs	r3, #8
 80090fa:	77fb      	strb	r3, [r7, #31]
 80090fc:	e004      	b.n	8009108 <UART_SetConfig+0x348>
 80090fe:	2310      	movs	r3, #16
 8009100:	77fb      	strb	r3, [r7, #31]
 8009102:	e001      	b.n	8009108 <UART_SetConfig+0x348>
 8009104:	2310      	movs	r3, #16
 8009106:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009110:	d15b      	bne.n	80091ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009112:	7ffb      	ldrb	r3, [r7, #31]
 8009114:	2b08      	cmp	r3, #8
 8009116:	d828      	bhi.n	800916a <UART_SetConfig+0x3aa>
 8009118:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <UART_SetConfig+0x360>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009145 	.word	0x08009145
 8009124:	0800914d 	.word	0x0800914d
 8009128:	08009155 	.word	0x08009155
 800912c:	0800916b 	.word	0x0800916b
 8009130:	0800915b 	.word	0x0800915b
 8009134:	0800916b 	.word	0x0800916b
 8009138:	0800916b 	.word	0x0800916b
 800913c:	0800916b 	.word	0x0800916b
 8009140:	08009163 	.word	0x08009163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009144:	f7fd f806 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8009148:	61b8      	str	r0, [r7, #24]
        break;
 800914a:	e013      	b.n	8009174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800914c:	f7fd f816 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 8009150:	61b8      	str	r0, [r7, #24]
        break;
 8009152:	e00f      	b.n	8009174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009154:	4b4b      	ldr	r3, [pc, #300]	@ (8009284 <UART_SetConfig+0x4c4>)
 8009156:	61bb      	str	r3, [r7, #24]
        break;
 8009158:	e00c      	b.n	8009174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800915a:	f7fc fee9 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 800915e:	61b8      	str	r0, [r7, #24]
        break;
 8009160:	e008      	b.n	8009174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009166:	61bb      	str	r3, [r7, #24]
        break;
 8009168:	e004      	b.n	8009174 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	77bb      	strb	r3, [r7, #30]
        break;
 8009172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d074      	beq.n	8009264 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	005a      	lsls	r2, r3, #1
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	085b      	lsrs	r3, r3, #1
 8009184:	441a      	add	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	fbb2 f3f3 	udiv	r3, r2, r3
 800918e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	2b0f      	cmp	r3, #15
 8009194:	d916      	bls.n	80091c4 <UART_SetConfig+0x404>
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800919c:	d212      	bcs.n	80091c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f023 030f 	bic.w	r3, r3, #15
 80091a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	89fb      	ldrh	r3, [r7, #14]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	89fa      	ldrh	r2, [r7, #14]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	e04f      	b.n	8009264 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	77bb      	strb	r3, [r7, #30]
 80091c8:	e04c      	b.n	8009264 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091ca:	7ffb      	ldrb	r3, [r7, #31]
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d828      	bhi.n	8009222 <UART_SetConfig+0x462>
 80091d0:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <UART_SetConfig+0x418>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	080091fd 	.word	0x080091fd
 80091dc:	08009205 	.word	0x08009205
 80091e0:	0800920d 	.word	0x0800920d
 80091e4:	08009223 	.word	0x08009223
 80091e8:	08009213 	.word	0x08009213
 80091ec:	08009223 	.word	0x08009223
 80091f0:	08009223 	.word	0x08009223
 80091f4:	08009223 	.word	0x08009223
 80091f8:	0800921b 	.word	0x0800921b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091fc:	f7fc ffaa 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8009200:	61b8      	str	r0, [r7, #24]
        break;
 8009202:	e013      	b.n	800922c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009204:	f7fc ffba 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 8009208:	61b8      	str	r0, [r7, #24]
        break;
 800920a:	e00f      	b.n	800922c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800920c:	4b1d      	ldr	r3, [pc, #116]	@ (8009284 <UART_SetConfig+0x4c4>)
 800920e:	61bb      	str	r3, [r7, #24]
        break;
 8009210:	e00c      	b.n	800922c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009212:	f7fc fe8d 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 8009216:	61b8      	str	r0, [r7, #24]
        break;
 8009218:	e008      	b.n	800922c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800921a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800921e:	61bb      	str	r3, [r7, #24]
        break;
 8009220:	e004      	b.n	800922c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	77bb      	strb	r3, [r7, #30]
        break;
 800922a:	bf00      	nop
    }

    if (pclk != 0U)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d018      	beq.n	8009264 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	085a      	lsrs	r2, r3, #1
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	441a      	add	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	fbb2 f3f3 	udiv	r3, r2, r3
 8009244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2b0f      	cmp	r3, #15
 800924a:	d909      	bls.n	8009260 <UART_SetConfig+0x4a0>
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009252:	d205      	bcs.n	8009260 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	b29a      	uxth	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	e001      	b.n	8009264 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009270:	7fbb      	ldrb	r3, [r7, #30]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	40007c00 	.word	0x40007c00
 8009280:	40023800 	.word	0x40023800
 8009284:	00f42400 	.word	0x00f42400

08009288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00a      	beq.n	80092f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fa:	f003 0308 	and.w	r3, r3, #8
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00a      	beq.n	800933a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01a      	beq.n	800939e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009386:	d10a      	bne.n	800939e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00a      	beq.n	80093c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	605a      	str	r2, [r3, #4]
  }
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093dc:	f7f8 fcd6 	bl	8001d8c <HAL_GetTick>
 80093e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0308 	and.w	r3, r3, #8
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d10e      	bne.n	800940e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f81b 	bl	800943a <UART_WaitOnFlagUntilTimeout>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e011      	b.n	8009432 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2220      	movs	r2, #32
 8009412:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b09c      	sub	sp, #112	@ 0x70
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	603b      	str	r3, [r7, #0]
 8009446:	4613      	mov	r3, r2
 8009448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944a:	e0a7      	b.n	800959c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800944c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	f000 80a3 	beq.w	800959c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009456:	f7f8 fc99 	bl	8001d8c <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009462:	429a      	cmp	r2, r3
 8009464:	d302      	bcc.n	800946c <UART_WaitOnFlagUntilTimeout+0x32>
 8009466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009468:	2b00      	cmp	r3, #0
 800946a:	d13f      	bne.n	80094ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800947a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800947c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009480:	667b      	str	r3, [r7, #100]	@ 0x64
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800948a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800948c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009490:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e6      	bne.n	800946c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3308      	adds	r3, #8
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b0:	f023 0301 	bic.w	r3, r3, #1
 80094b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80094be:	64ba      	str	r2, [r7, #72]	@ 0x48
 80094c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80094c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80094cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e5      	bne.n	800949e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2220      	movs	r2, #32
 80094dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e068      	b.n	80095be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d050      	beq.n	800959c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009508:	d148      	bne.n	800959c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009512:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009528:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
 8009534:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e6      	bne.n	8009514 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	613b      	str	r3, [r7, #16]
   return(result);
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f023 0301 	bic.w	r3, r3, #1
 800955c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3308      	adds	r3, #8
 8009564:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009566:	623a      	str	r2, [r7, #32]
 8009568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	69f9      	ldr	r1, [r7, #28]
 800956c:	6a3a      	ldr	r2, [r7, #32]
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	61bb      	str	r3, [r7, #24]
   return(result);
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e5      	bne.n	8009546 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2220      	movs	r2, #32
 800957e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2220      	movs	r2, #32
 8009584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2220      	movs	r2, #32
 800958c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e010      	b.n	80095be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69da      	ldr	r2, [r3, #28]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4013      	ands	r3, r2
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	bf0c      	ite	eq
 80095ac:	2301      	moveq	r3, #1
 80095ae:	2300      	movne	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	f43f af48 	beq.w	800944c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3770      	adds	r7, #112	@ 0x70
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b097      	sub	sp, #92	@ 0x5c
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4613      	mov	r3, r2
 80095d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095fa:	d10e      	bne.n	800961a <UART_Start_Receive_IT+0x52>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d105      	bne.n	8009610 <UART_Start_Receive_IT+0x48>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800960a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800960e:	e02d      	b.n	800966c <UART_Start_Receive_IT+0xa4>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	22ff      	movs	r2, #255	@ 0xff
 8009614:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009618:	e028      	b.n	800966c <UART_Start_Receive_IT+0xa4>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10d      	bne.n	800963e <UART_Start_Receive_IT+0x76>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <UART_Start_Receive_IT+0x6c>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	22ff      	movs	r2, #255	@ 0xff
 800962e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009632:	e01b      	b.n	800966c <UART_Start_Receive_IT+0xa4>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	227f      	movs	r2, #127	@ 0x7f
 8009638:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800963c:	e016      	b.n	800966c <UART_Start_Receive_IT+0xa4>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009646:	d10d      	bne.n	8009664 <UART_Start_Receive_IT+0x9c>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <UART_Start_Receive_IT+0x92>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	227f      	movs	r2, #127	@ 0x7f
 8009654:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009658:	e008      	b.n	800966c <UART_Start_Receive_IT+0xa4>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	223f      	movs	r2, #63	@ 0x3f
 800965e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009662:	e003      	b.n	800966c <UART_Start_Receive_IT+0xa4>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2222      	movs	r2, #34	@ 0x22
 8009678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	657b      	str	r3, [r7, #84]	@ 0x54
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3308      	adds	r3, #8
 800969a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800969c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800969e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80096aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e5      	bne.n	800967c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b8:	d107      	bne.n	80096ca <UART_Start_Receive_IT+0x102>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d103      	bne.n	80096ca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4a21      	ldr	r2, [pc, #132]	@ (800974c <UART_Start_Receive_IT+0x184>)
 80096c6:	669a      	str	r2, [r3, #104]	@ 0x68
 80096c8:	e002      	b.n	80096d0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4a20      	ldr	r2, [pc, #128]	@ (8009750 <UART_Start_Receive_IT+0x188>)
 80096ce:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d019      	beq.n	800970c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80096ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e6      	bne.n	80096d8 <UART_Start_Receive_IT+0x110>
 800970a:	e018      	b.n	800973e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	e853 3f00 	ldrex	r3, [r3]
 8009718:	613b      	str	r3, [r7, #16]
   return(result);
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f043 0320 	orr.w	r3, r3, #32
 8009720:	653b      	str	r3, [r7, #80]	@ 0x50
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800972a:	623b      	str	r3, [r7, #32]
 800972c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	69f9      	ldr	r1, [r7, #28]
 8009730:	6a3a      	ldr	r2, [r7, #32]
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	61bb      	str	r3, [r7, #24]
   return(result);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e6      	bne.n	800970c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	375c      	adds	r7, #92	@ 0x5c
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	08009a03 	.word	0x08009a03
 8009750:	0800989d 	.word	0x0800989d

08009754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009754:	b480      	push	{r7}
 8009756:	b095      	sub	sp, #84	@ 0x54
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800977a:	643b      	str	r3, [r7, #64]	@ 0x40
 800977c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e6      	bne.n	800975c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3308      	adds	r3, #8
 8009794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	61fb      	str	r3, [r7, #28]
   return(result);
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	f023 0301 	bic.w	r3, r3, #1
 80097a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3308      	adds	r3, #8
 80097ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e5      	bne.n	800978e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d118      	bne.n	80097fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f023 0310 	bic.w	r3, r3, #16
 80097de:	647b      	str	r3, [r7, #68]	@ 0x44
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e8:	61bb      	str	r3, [r7, #24]
 80097ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6979      	ldr	r1, [r7, #20]
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	613b      	str	r3, [r7, #16]
   return(result);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e6      	bne.n	80097ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009810:	bf00      	nop
 8009812:	3754      	adds	r7, #84	@ 0x54
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f00b ffd6 	bl	80157ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	60bb      	str	r3, [r7, #8]
   return(result);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6979      	ldr	r1, [r7, #20]
 8009874:	69ba      	ldr	r2, [r7, #24]
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	613b      	str	r3, [r7, #16]
   return(result);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e6      	bne.n	8009850 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2220      	movs	r2, #32
 8009886:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7ff fa80 	bl	8008d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009894:	bf00      	nop
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b096      	sub	sp, #88	@ 0x58
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b4:	2b22      	cmp	r3, #34	@ 0x22
 80098b6:	f040 8098 	bne.w	80099ea <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80098c8:	b2d9      	uxtb	r1, r3
 80098ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d4:	400a      	ands	r2, r1
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d17b      	bne.n	80099fa <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009912:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009916:	653b      	str	r3, [r7, #80]	@ 0x50
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009920:	647b      	str	r3, [r7, #68]	@ 0x44
 8009922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800992e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e6      	bne.n	8009902 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	623b      	str	r3, [r7, #32]
   return(result);
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	f023 0301 	bic.w	r3, r3, #1
 800994a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3308      	adds	r3, #8
 8009952:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009954:	633a      	str	r2, [r7, #48]	@ 0x30
 8009956:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800995a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e5      	bne.n	8009934 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009980:	2b01      	cmp	r3, #1
 8009982:	d12e      	bne.n	80099e2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	e853 3f00 	ldrex	r3, [r3]
 8009996:	60fb      	str	r3, [r7, #12]
   return(result);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f023 0310 	bic.w	r3, r3, #16
 800999e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	69b9      	ldr	r1, [r7, #24]
 80099ae:	69fa      	ldr	r2, [r7, #28]
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	617b      	str	r3, [r7, #20]
   return(result);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e6      	bne.n	800998a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	f003 0310 	and.w	r3, r3, #16
 80099c6:	2b10      	cmp	r3, #16
 80099c8:	d103      	bne.n	80099d2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2210      	movs	r2, #16
 80099d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7ff f9e4 	bl	8008da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099e0:	e00b      	b.n	80099fa <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f00b fede 	bl	80157a4 <HAL_UART_RxCpltCallback>
}
 80099e8:	e007      	b.n	80099fa <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	699a      	ldr	r2, [r3, #24]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0208 	orr.w	r2, r2, #8
 80099f8:	619a      	str	r2, [r3, #24]
}
 80099fa:	bf00      	nop
 80099fc:	3758      	adds	r7, #88	@ 0x58
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b096      	sub	sp, #88	@ 0x58
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a10:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1a:	2b22      	cmp	r3, #34	@ 0x22
 8009a1c:	f040 8098 	bne.w	8009b50 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a26:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a2e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a30:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009a34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009a38:	4013      	ands	r3, r2
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a3e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a44:	1c9a      	adds	r2, r3, #2
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d17b      	bne.n	8009b60 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e6      	bne.n	8009a68 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	f023 0301 	bic.w	r3, r3, #1
 8009ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e5      	bne.n	8009a9a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d12e      	bne.n	8009b48 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f023 0310 	bic.w	r3, r3, #16
 8009b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b0e:	61bb      	str	r3, [r7, #24]
 8009b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6979      	ldr	r1, [r7, #20]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e6      	bne.n	8009af0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	f003 0310 	and.w	r3, r3, #16
 8009b2c:	2b10      	cmp	r3, #16
 8009b2e:	d103      	bne.n	8009b38 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2210      	movs	r2, #16
 8009b36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff f931 	bl	8008da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b46:	e00b      	b.n	8009b60 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f00b fe2b 	bl	80157a4 <HAL_UART_RxCpltCallback>
}
 8009b4e:	e007      	b.n	8009b60 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f042 0208 	orr.w	r2, r2, #8
 8009b5e:	619a      	str	r2, [r3, #24]
}
 8009b60:	bf00      	nop
 8009b62:	3758      	adds	r7, #88	@ 0x58
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b68:	b084      	sub	sp, #16
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	f107 001c 	add.w	r0, r7, #28
 8009b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d120      	bne.n	8009bc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	4b20      	ldr	r3, [pc, #128]	@ (8009c14 <USB_CoreInit+0xac>)
 8009b92:	4013      	ands	r3, r2
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d105      	bne.n	8009bb6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fa96 	bl	800a0e8 <USB_CoreReset>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	73fb      	strb	r3, [r7, #15]
 8009bc0:	e010      	b.n	8009be4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa8a 	bl	800a0e8 <USB_CoreReset>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d10b      	bne.n	8009c02 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f043 0206 	orr.w	r2, r3, #6
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f043 0220 	orr.w	r2, r3, #32
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c0e:	b004      	add	sp, #16
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	ffbdffbf 	.word	0xffbdffbf

08009c18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f023 0201 	bic.w	r2, r3, #1
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c56:	78fb      	ldrb	r3, [r7, #3]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d115      	bne.n	8009c88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c68:	2001      	movs	r0, #1
 8009c6a:	f7f8 f89b 	bl	8001da4 <HAL_Delay>
      ms++;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3301      	adds	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fa29 	bl	800a0cc <USB_GetMode>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d01e      	beq.n	8009cbe <USB_SetCurrentMode+0x84>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2b31      	cmp	r3, #49	@ 0x31
 8009c84:	d9f0      	bls.n	8009c68 <USB_SetCurrentMode+0x2e>
 8009c86:	e01a      	b.n	8009cbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d115      	bne.n	8009cba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	f7f8 f882 	bl	8001da4 <HAL_Delay>
      ms++;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa10 	bl	800a0cc <USB_GetMode>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <USB_SetCurrentMode+0x84>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b31      	cmp	r3, #49	@ 0x31
 8009cb6:	d9f0      	bls.n	8009c9a <USB_SetCurrentMode+0x60>
 8009cb8:	e001      	b.n	8009cbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e005      	b.n	8009cca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b32      	cmp	r3, #50	@ 0x32
 8009cc2:	d101      	bne.n	8009cc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e000      	b.n	8009cca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b086      	sub	sp, #24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009cee:	2300      	movs	r3, #0
 8009cf0:	613b      	str	r3, [r7, #16]
 8009cf2:	e009      	b.n	8009d08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	3340      	adds	r3, #64	@ 0x40
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	2200      	movs	r2, #0
 8009d00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	3301      	adds	r3, #1
 8009d06:	613b      	str	r3, [r7, #16]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	2b0e      	cmp	r3, #14
 8009d0c:	d9f2      	bls.n	8009cf4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11c      	bne.n	8009d4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d22:	f043 0302 	orr.w	r3, r3, #2
 8009d26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	e005      	b.n	8009d5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d60:	461a      	mov	r2, r3
 8009d62:	2300      	movs	r3, #0
 8009d64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d74:	461a      	mov	r2, r3
 8009d76:	680b      	ldr	r3, [r1, #0]
 8009d78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d10c      	bne.n	8009d9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d104      	bne.n	8009d90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d86:	2100      	movs	r1, #0
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f965 	bl	800a058 <USB_SetDevSpeed>
 8009d8e:	e008      	b.n	8009da2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d90:	2101      	movs	r1, #1
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f960 	bl	800a058 <USB_SetDevSpeed>
 8009d98:	e003      	b.n	8009da2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d9a:	2103      	movs	r1, #3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f95b 	bl	800a058 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009da2:	2110      	movs	r1, #16
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f8f3 	bl	8009f90 <USB_FlushTxFifo>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f91f 	bl	8009ff8 <USB_FlushRxFifo>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dca:	461a      	mov	r2, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009de2:	461a      	mov	r2, r3
 8009de4:	2300      	movs	r3, #0
 8009de6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009de8:	2300      	movs	r3, #0
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	e043      	b.n	8009e76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e04:	d118      	bne.n	8009e38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	e013      	b.n	8009e4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	e008      	b.n	8009e4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e44:	461a      	mov	r2, r3
 8009e46:	2300      	movs	r3, #0
 8009e48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e56:	461a      	mov	r2, r3
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	3301      	adds	r3, #1
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d3b7      	bcc.n	8009dee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e7e:	2300      	movs	r3, #0
 8009e80:	613b      	str	r3, [r7, #16]
 8009e82:	e043      	b.n	8009f0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e9a:	d118      	bne.n	8009ece <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	e013      	b.n	8009ee0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	e008      	b.n	8009ee0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eda:	461a      	mov	r2, r3
 8009edc:	2300      	movs	r3, #0
 8009ede:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eec:	461a      	mov	r2, r3
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009efe:	461a      	mov	r2, r3
 8009f00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d3b7      	bcc.n	8009e84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009f34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d105      	bne.n	8009f48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	f043 0210 	orr.w	r2, r3, #16
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f88 <USB_DevInit+0x2b4>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f043 0208 	orr.w	r2, r3, #8
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d105      	bne.n	8009f78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	699a      	ldr	r2, [r3, #24]
 8009f70:	4b06      	ldr	r3, [pc, #24]	@ (8009f8c <USB_DevInit+0x2b8>)
 8009f72:	4313      	orrs	r3, r2
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f84:	b004      	add	sp, #16
 8009f86:	4770      	bx	lr
 8009f88:	803c3800 	.word	0x803c3800
 8009f8c:	40000004 	.word	0x40000004

08009f90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4a13      	ldr	r2, [pc, #76]	@ (8009ff4 <USB_FlushTxFifo+0x64>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d901      	bls.n	8009fb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e01b      	b.n	8009fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	daf2      	bge.n	8009f9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	019b      	lsls	r3, r3, #6
 8009fc0:	f043 0220 	orr.w	r2, r3, #32
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4a08      	ldr	r2, [pc, #32]	@ (8009ff4 <USB_FlushTxFifo+0x64>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d901      	bls.n	8009fda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e006      	b.n	8009fe8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	f003 0320 	and.w	r3, r3, #32
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	d0f0      	beq.n	8009fc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	00030d40 	.word	0x00030d40

08009ff8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3301      	adds	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4a11      	ldr	r2, [pc, #68]	@ (800a054 <USB_FlushRxFifo+0x5c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d901      	bls.n	800a016 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e018      	b.n	800a048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	daf2      	bge.n	800a004 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2210      	movs	r2, #16
 800a026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4a08      	ldr	r2, [pc, #32]	@ (800a054 <USB_FlushRxFifo+0x5c>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d901      	bls.n	800a03a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e006      	b.n	800a048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0310 	and.w	r3, r3, #16
 800a042:	2b10      	cmp	r3, #16
 800a044:	d0f0      	beq.n	800a028 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	00030d40 	.word	0x00030d40

0800a058 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	68f9      	ldr	r1, [r7, #12]
 800a074:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a078:	4313      	orrs	r3, r2
 800a07a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b085      	sub	sp, #20
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b8:	f043 0302 	orr.w	r3, r3, #2
 800a0bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	f003 0301 	and.w	r3, r3, #1
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4a13      	ldr	r2, [pc, #76]	@ (800a14c <USB_CoreReset+0x64>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d901      	bls.n	800a106 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e01b      	b.n	800a13e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	daf2      	bge.n	800a0f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	f043 0201 	orr.w	r2, r3, #1
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3301      	adds	r3, #1
 800a122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	4a09      	ldr	r2, [pc, #36]	@ (800a14c <USB_CoreReset+0x64>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d901      	bls.n	800a130 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e006      	b.n	800a13e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d0f0      	beq.n	800a11e <USB_CoreReset+0x36>

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	00030d40 	.word	0x00030d40

0800a150 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a156:	4b8d      	ldr	r3, [pc, #564]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a158:	22c0      	movs	r2, #192	@ 0xc0
 800a15a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a15c:	4b8b      	ldr	r3, [pc, #556]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a15e:	22a8      	movs	r2, #168	@ 0xa8
 800a160:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 800a162:	4b8a      	ldr	r3, [pc, #552]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a164:	2207      	movs	r2, #7
 800a166:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800a168:	4b88      	ldr	r3, [pc, #544]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a16a:	2202      	movs	r2, #2
 800a16c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a16e:	4b88      	ldr	r3, [pc, #544]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a170:	22ff      	movs	r2, #255	@ 0xff
 800a172:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a174:	4b86      	ldr	r3, [pc, #536]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a176:	22ff      	movs	r2, #255	@ 0xff
 800a178:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a17a:	4b85      	ldr	r3, [pc, #532]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a17c:	22ff      	movs	r2, #255	@ 0xff
 800a17e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a180:	4b83      	ldr	r3, [pc, #524]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a182:	2200      	movs	r2, #0
 800a184:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a186:	4b83      	ldr	r3, [pc, #524]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a188:	22c0      	movs	r2, #192	@ 0xc0
 800a18a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a18c:	4b81      	ldr	r3, [pc, #516]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a18e:	22a8      	movs	r2, #168	@ 0xa8
 800a190:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 7;
 800a192:	4b80      	ldr	r3, [pc, #512]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a194:	2207      	movs	r2, #7
 800a196:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a198:	4b7e      	ldr	r3, [pc, #504]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a19a:	2201      	movs	r2, #1
 800a19c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a19e:	f000 fd25 	bl	800abec <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a1a2:	4b7a      	ldr	r3, [pc, #488]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	061a      	lsls	r2, r3, #24
 800a1a8:	4b78      	ldr	r3, [pc, #480]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	041b      	lsls	r3, r3, #16
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	4b76      	ldr	r3, [pc, #472]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1b2:	789b      	ldrb	r3, [r3, #2]
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	4a74      	ldr	r2, [pc, #464]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1ba:	78d2      	ldrb	r2, [r2, #3]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	061a      	lsls	r2, r3, #24
 800a1c0:	4b72      	ldr	r3, [pc, #456]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	0619      	lsls	r1, r3, #24
 800a1c6:	4b71      	ldr	r3, [pc, #452]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	041b      	lsls	r3, r3, #16
 800a1cc:	4319      	orrs	r1, r3
 800a1ce:	4b6f      	ldr	r3, [pc, #444]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1d0:	789b      	ldrb	r3, [r3, #2]
 800a1d2:	021b      	lsls	r3, r3, #8
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	496d      	ldr	r1, [pc, #436]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1d8:	78c9      	ldrb	r1, [r1, #3]
 800a1da:	430b      	orrs	r3, r1
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	4b69      	ldr	r3, [pc, #420]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	0619      	lsls	r1, r3, #24
 800a1ea:	4b68      	ldr	r3, [pc, #416]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	041b      	lsls	r3, r3, #16
 800a1f0:	4319      	orrs	r1, r3
 800a1f2:	4b66      	ldr	r3, [pc, #408]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1f4:	789b      	ldrb	r3, [r3, #2]
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	430b      	orrs	r3, r1
 800a1fa:	4964      	ldr	r1, [pc, #400]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a1fc:	78c9      	ldrb	r1, [r1, #3]
 800a1fe:	430b      	orrs	r3, r1
 800a200:	0a1b      	lsrs	r3, r3, #8
 800a202:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a206:	431a      	orrs	r2, r3
 800a208:	4b60      	ldr	r3, [pc, #384]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	0619      	lsls	r1, r3, #24
 800a20e:	4b5f      	ldr	r3, [pc, #380]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a210:	785b      	ldrb	r3, [r3, #1]
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	4319      	orrs	r1, r3
 800a216:	4b5d      	ldr	r3, [pc, #372]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a218:	789b      	ldrb	r3, [r3, #2]
 800a21a:	021b      	lsls	r3, r3, #8
 800a21c:	430b      	orrs	r3, r1
 800a21e:	495b      	ldr	r1, [pc, #364]	@ (800a38c <MX_LWIP_Init+0x23c>)
 800a220:	78c9      	ldrb	r1, [r1, #3]
 800a222:	430b      	orrs	r3, r1
 800a224:	0e1b      	lsrs	r3, r3, #24
 800a226:	4313      	orrs	r3, r2
 800a228:	4a5b      	ldr	r2, [pc, #364]	@ (800a398 <MX_LWIP_Init+0x248>)
 800a22a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a22c:	4b58      	ldr	r3, [pc, #352]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	061a      	lsls	r2, r3, #24
 800a232:	4b57      	ldr	r3, [pc, #348]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	041b      	lsls	r3, r3, #16
 800a238:	431a      	orrs	r2, r3
 800a23a:	4b55      	ldr	r3, [pc, #340]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a23c:	789b      	ldrb	r3, [r3, #2]
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	4313      	orrs	r3, r2
 800a242:	4a53      	ldr	r2, [pc, #332]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a244:	78d2      	ldrb	r2, [r2, #3]
 800a246:	4313      	orrs	r3, r2
 800a248:	061a      	lsls	r2, r3, #24
 800a24a:	4b51      	ldr	r3, [pc, #324]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	0619      	lsls	r1, r3, #24
 800a250:	4b4f      	ldr	r3, [pc, #316]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a252:	785b      	ldrb	r3, [r3, #1]
 800a254:	041b      	lsls	r3, r3, #16
 800a256:	4319      	orrs	r1, r3
 800a258:	4b4d      	ldr	r3, [pc, #308]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a25a:	789b      	ldrb	r3, [r3, #2]
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	430b      	orrs	r3, r1
 800a260:	494b      	ldr	r1, [pc, #300]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a262:	78c9      	ldrb	r1, [r1, #3]
 800a264:	430b      	orrs	r3, r1
 800a266:	021b      	lsls	r3, r3, #8
 800a268:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a26c:	431a      	orrs	r2, r3
 800a26e:	4b48      	ldr	r3, [pc, #288]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	0619      	lsls	r1, r3, #24
 800a274:	4b46      	ldr	r3, [pc, #280]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	041b      	lsls	r3, r3, #16
 800a27a:	4319      	orrs	r1, r3
 800a27c:	4b44      	ldr	r3, [pc, #272]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a27e:	789b      	ldrb	r3, [r3, #2]
 800a280:	021b      	lsls	r3, r3, #8
 800a282:	430b      	orrs	r3, r1
 800a284:	4942      	ldr	r1, [pc, #264]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a286:	78c9      	ldrb	r1, [r1, #3]
 800a288:	430b      	orrs	r3, r1
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a290:	431a      	orrs	r2, r3
 800a292:	4b3f      	ldr	r3, [pc, #252]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	0619      	lsls	r1, r3, #24
 800a298:	4b3d      	ldr	r3, [pc, #244]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	041b      	lsls	r3, r3, #16
 800a29e:	4319      	orrs	r1, r3
 800a2a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a2a2:	789b      	ldrb	r3, [r3, #2]
 800a2a4:	021b      	lsls	r3, r3, #8
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	4939      	ldr	r1, [pc, #228]	@ (800a390 <MX_LWIP_Init+0x240>)
 800a2aa:	78c9      	ldrb	r1, [r1, #3]
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	0e1b      	lsrs	r3, r3, #24
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	4a3a      	ldr	r2, [pc, #232]	@ (800a39c <MX_LWIP_Init+0x24c>)
 800a2b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a2b6:	4b37      	ldr	r3, [pc, #220]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	061a      	lsls	r2, r3, #24
 800a2bc:	4b35      	ldr	r3, [pc, #212]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2be:	785b      	ldrb	r3, [r3, #1]
 800a2c0:	041b      	lsls	r3, r3, #16
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	4b33      	ldr	r3, [pc, #204]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2c6:	789b      	ldrb	r3, [r3, #2]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	4a31      	ldr	r2, [pc, #196]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2ce:	78d2      	ldrb	r2, [r2, #3]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	061a      	lsls	r2, r3, #24
 800a2d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	0619      	lsls	r1, r3, #24
 800a2da:	4b2e      	ldr	r3, [pc, #184]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	041b      	lsls	r3, r3, #16
 800a2e0:	4319      	orrs	r1, r3
 800a2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2e4:	789b      	ldrb	r3, [r3, #2]
 800a2e6:	021b      	lsls	r3, r3, #8
 800a2e8:	430b      	orrs	r3, r1
 800a2ea:	492a      	ldr	r1, [pc, #168]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2ec:	78c9      	ldrb	r1, [r1, #3]
 800a2ee:	430b      	orrs	r3, r1
 800a2f0:	021b      	lsls	r3, r3, #8
 800a2f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	4b26      	ldr	r3, [pc, #152]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	0619      	lsls	r1, r3, #24
 800a2fe:	4b25      	ldr	r3, [pc, #148]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a300:	785b      	ldrb	r3, [r3, #1]
 800a302:	041b      	lsls	r3, r3, #16
 800a304:	4319      	orrs	r1, r3
 800a306:	4b23      	ldr	r3, [pc, #140]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a308:	789b      	ldrb	r3, [r3, #2]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	430b      	orrs	r3, r1
 800a30e:	4921      	ldr	r1, [pc, #132]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a310:	78c9      	ldrb	r1, [r1, #3]
 800a312:	430b      	orrs	r3, r1
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a31a:	431a      	orrs	r2, r3
 800a31c:	4b1d      	ldr	r3, [pc, #116]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	0619      	lsls	r1, r3, #24
 800a322:	4b1c      	ldr	r3, [pc, #112]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a324:	785b      	ldrb	r3, [r3, #1]
 800a326:	041b      	lsls	r3, r3, #16
 800a328:	4319      	orrs	r1, r3
 800a32a:	4b1a      	ldr	r3, [pc, #104]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a32c:	789b      	ldrb	r3, [r3, #2]
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	430b      	orrs	r3, r1
 800a332:	4918      	ldr	r1, [pc, #96]	@ (800a394 <MX_LWIP_Init+0x244>)
 800a334:	78c9      	ldrb	r1, [r1, #3]
 800a336:	430b      	orrs	r3, r1
 800a338:	0e1b      	lsrs	r3, r3, #24
 800a33a:	4313      	orrs	r3, r2
 800a33c:	4a18      	ldr	r2, [pc, #96]	@ (800a3a0 <MX_LWIP_Init+0x250>)
 800a33e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a340:	4b18      	ldr	r3, [pc, #96]	@ (800a3a4 <MX_LWIP_Init+0x254>)
 800a342:	9302      	str	r3, [sp, #8]
 800a344:	4b18      	ldr	r3, [pc, #96]	@ (800a3a8 <MX_LWIP_Init+0x258>)
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	2300      	movs	r3, #0
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	4b14      	ldr	r3, [pc, #80]	@ (800a3a0 <MX_LWIP_Init+0x250>)
 800a34e:	4a13      	ldr	r2, [pc, #76]	@ (800a39c <MX_LWIP_Init+0x24c>)
 800a350:	4911      	ldr	r1, [pc, #68]	@ (800a398 <MX_LWIP_Init+0x248>)
 800a352:	4816      	ldr	r0, [pc, #88]	@ (800a3ac <MX_LWIP_Init+0x25c>)
 800a354:	f001 f936 	bl	800b5c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a358:	4814      	ldr	r0, [pc, #80]	@ (800a3ac <MX_LWIP_Init+0x25c>)
 800a35a:	f001 fae5 	bl	800b928 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a35e:	4b13      	ldr	r3, [pc, #76]	@ (800a3ac <MX_LWIP_Init+0x25c>)
 800a360:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a364:	089b      	lsrs	r3, r3, #2
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a370:	480e      	ldr	r0, [pc, #56]	@ (800a3ac <MX_LWIP_Init+0x25c>)
 800a372:	f001 fae9 	bl	800b948 <netif_set_up>
 800a376:	e002      	b.n	800a37e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a378:	480c      	ldr	r0, [pc, #48]	@ (800a3ac <MX_LWIP_Init+0x25c>)
 800a37a:	f001 fb51 	bl	800ba20 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a37e:	490c      	ldr	r1, [pc, #48]	@ (800a3b0 <MX_LWIP_Init+0x260>)
 800a380:	480a      	ldr	r0, [pc, #40]	@ (800a3ac <MX_LWIP_Init+0x25c>)
 800a382:	f001 fbe3 	bl	800bb4c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a386:	bf00      	nop
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000bf0 	.word	0x20000bf0
 800a390:	20000bf4 	.word	0x20000bf4
 800a394:	20000bf8 	.word	0x20000bf8
 800a398:	20000be4 	.word	0x20000be4
 800a39c:	20000be8 	.word	0x20000be8
 800a3a0:	20000bec 	.word	0x20000bec
 800a3a4:	08014a01 	.word	0x08014a01
 800a3a8:	0800a6c9 	.word	0x0800a6c9
 800a3ac:	20000bb0 	.word	0x20000bb0
 800a3b0:	0800a3b5 	.word	0x0800a3b5

0800a3b4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <SCB_InvalidateDCache_by_Addr>:
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a3da:	2320      	movs	r3, #32
 800a3dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3de:	f3bf 8f4f 	dsb	sy
}
 800a3e2:	bf00      	nop
    while (op_size > 0) {
 800a3e4:	e00b      	b.n	800a3fe <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a3e6:	4a0d      	ldr	r2, [pc, #52]	@ (800a41c <SCB_InvalidateDCache_by_Addr+0x54>)
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	dcf0      	bgt.n	800a3e6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a404:	f3bf 8f4f 	dsb	sy
}
 800a408:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a40a:	f3bf 8f6f 	isb	sy
}
 800a40e:	bf00      	nop
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	e000ed00 	.word	0xe000ed00

0800a420 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a42c:	4b40      	ldr	r3, [pc, #256]	@ (800a530 <low_level_init+0x110>)
 800a42e:	4a41      	ldr	r2, [pc, #260]	@ (800a534 <low_level_init+0x114>)
 800a430:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a432:	2300      	movs	r3, #0
 800a434:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a436:	2380      	movs	r3, #128	@ 0x80
 800a438:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a43a:	23e1      	movs	r3, #225	@ 0xe1
 800a43c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a43e:	2300      	movs	r3, #0
 800a440:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a442:	2300      	movs	r3, #0
 800a444:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a446:	2300      	movs	r3, #0
 800a448:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a44a:	4a39      	ldr	r2, [pc, #228]	@ (800a530 <low_level_init+0x110>)
 800a44c:	f107 0308 	add.w	r3, r7, #8
 800a450:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a452:	4b37      	ldr	r3, [pc, #220]	@ (800a530 <low_level_init+0x110>)
 800a454:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a458:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a45a:	4b35      	ldr	r3, [pc, #212]	@ (800a530 <low_level_init+0x110>)
 800a45c:	4a36      	ldr	r2, [pc, #216]	@ (800a538 <low_level_init+0x118>)
 800a45e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a460:	4b33      	ldr	r3, [pc, #204]	@ (800a530 <low_level_init+0x110>)
 800a462:	4a36      	ldr	r2, [pc, #216]	@ (800a53c <low_level_init+0x11c>)
 800a464:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a466:	4b32      	ldr	r3, [pc, #200]	@ (800a530 <low_level_init+0x110>)
 800a468:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a46c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a46e:	4830      	ldr	r0, [pc, #192]	@ (800a530 <low_level_init+0x110>)
 800a470:	f7f8 ff8e 	bl	8003390 <HAL_ETH_Init>
 800a474:	4603      	mov	r3, r0
 800a476:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a478:	2238      	movs	r2, #56	@ 0x38
 800a47a:	2100      	movs	r1, #0
 800a47c:	4830      	ldr	r0, [pc, #192]	@ (800a540 <low_level_init+0x120>)
 800a47e:	f00b fc5f 	bl	8015d40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a482:	4b2f      	ldr	r3, [pc, #188]	@ (800a540 <low_level_init+0x120>)
 800a484:	2221      	movs	r2, #33	@ 0x21
 800a486:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a488:	4b2d      	ldr	r3, [pc, #180]	@ (800a540 <low_level_init+0x120>)
 800a48a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a48e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a490:	4b2b      	ldr	r3, [pc, #172]	@ (800a540 <low_level_init+0x120>)
 800a492:	2200      	movs	r2, #0
 800a494:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a496:	482b      	ldr	r0, [pc, #172]	@ (800a544 <low_level_init+0x124>)
 800a498:	f000 ff5c 	bl	800b354 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2206      	movs	r2, #6
 800a4a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a4a4:	4b22      	ldr	r3, [pc, #136]	@ (800a530 <low_level_init+0x110>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	781a      	ldrb	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a4b0:	4b1f      	ldr	r3, [pc, #124]	@ (800a530 <low_level_init+0x110>)
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	785a      	ldrb	r2, [r3, #1]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a4bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a530 <low_level_init+0x110>)
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	789a      	ldrb	r2, [r3, #2]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a4c8:	4b19      	ldr	r3, [pc, #100]	@ (800a530 <low_level_init+0x110>)
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	78da      	ldrb	r2, [r3, #3]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a4d4:	4b16      	ldr	r3, [pc, #88]	@ (800a530 <low_level_init+0x110>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	791a      	ldrb	r2, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a4e0:	4b13      	ldr	r3, [pc, #76]	@ (800a530 <low_level_init+0x110>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	795a      	ldrb	r2, [r3, #5]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a4f2:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a4fa:	f043 030a 	orr.w	r3, r3, #10
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a506:	4910      	ldr	r1, [pc, #64]	@ (800a548 <low_level_init+0x128>)
 800a508:	4810      	ldr	r0, [pc, #64]	@ (800a54c <low_level_init+0x12c>)
 800a50a:	f7f7 fa8c 	bl	8001a26 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a50e:	480f      	ldr	r0, [pc, #60]	@ (800a54c <low_level_init+0x12c>)
 800a510:	f7f7 fabb 	bl	8001a8a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d103      	bne.n	800a522 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fa3a 	bl	800a994 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a520:	e001      	b.n	800a526 <low_level_init+0x106>
    Error_Handler();
 800a522:	f7f6 fc89 	bl	8000e38 <Error_Handler>
}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20005588 	.word	0x20005588
 800a534:	40028000 	.word	0x40028000
 800a538:	20000128 	.word	0x20000128
 800a53c:	20000088 	.word	0x20000088
 800a540:	20005638 	.word	0x20005638
 800a544:	08019b1c 	.word	0x08019b1c
 800a548:	2000000c 	.word	0x2000000c
 800a54c:	20005670 	.word	0x20005670

0800a550 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b092      	sub	sp, #72	@ 0x48
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a568:	f107 030c 	add.w	r3, r7, #12
 800a56c:	2230      	movs	r2, #48	@ 0x30
 800a56e:	2100      	movs	r1, #0
 800a570:	4618      	mov	r0, r3
 800a572:	f00b fbe5 	bl	8015d40 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a576:	f107 030c 	add.w	r3, r7, #12
 800a57a:	2230      	movs	r2, #48	@ 0x30
 800a57c:	2100      	movs	r1, #0
 800a57e:	4618      	mov	r0, r3
 800a580:	f00b fbde 	bl	8015d40 <memset>

  for(q = p; q != NULL; q = q->next)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	643b      	str	r3, [r7, #64]	@ 0x40
 800a588:	e045      	b.n	800a616 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a58a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	d902      	bls.n	800a596 <low_level_output+0x46>
      return ERR_IF;
 800a590:	f06f 030b 	mvn.w	r3, #11
 800a594:	e055      	b.n	800a642 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a598:	6859      	ldr	r1, [r3, #4]
 800a59a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a59c:	4613      	mov	r3, r2
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	3348      	adds	r3, #72	@ 0x48
 800a5a6:	443b      	add	r3, r7
 800a5a8:	3b3c      	subs	r3, #60	@ 0x3c
 800a5aa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a5ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ae:	895b      	ldrh	r3, [r3, #10]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	3348      	adds	r3, #72	@ 0x48
 800a5be:	443b      	add	r3, r7
 800a5c0:	3b38      	subs	r3, #56	@ 0x38
 800a5c2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a5c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d011      	beq.n	800a5ee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a5ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5cc:	1e5a      	subs	r2, r3, #1
 800a5ce:	f107 000c 	add.w	r0, r7, #12
 800a5d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	440b      	add	r3, r1
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	18c1      	adds	r1, r0, r3
 800a5de:	4613      	mov	r3, r2
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	4413      	add	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	3348      	adds	r3, #72	@ 0x48
 800a5e8:	443b      	add	r3, r7
 800a5ea:	3b34      	subs	r3, #52	@ 0x34
 800a5ec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a5ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d109      	bne.n	800a60a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a5f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	3348      	adds	r3, #72	@ 0x48
 800a602:	443b      	add	r3, r7
 800a604:	3b34      	subs	r3, #52	@ 0x34
 800a606:	2200      	movs	r2, #0
 800a608:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a60a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a60c:	3301      	adds	r3, #1
 800a60e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	643b      	str	r3, [r7, #64]	@ 0x40
 800a616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1b6      	bne.n	800a58a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	891b      	ldrh	r3, [r3, #8]
 800a620:	461a      	mov	r2, r3
 800a622:	4b0a      	ldr	r3, [pc, #40]	@ (800a64c <low_level_output+0xfc>)
 800a624:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a626:	4a09      	ldr	r2, [pc, #36]	@ (800a64c <low_level_output+0xfc>)
 800a628:	f107 030c 	add.w	r3, r7, #12
 800a62c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a62e:	4a07      	ldr	r2, [pc, #28]	@ (800a64c <low_level_output+0xfc>)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a634:	2214      	movs	r2, #20
 800a636:	4905      	ldr	r1, [pc, #20]	@ (800a64c <low_level_output+0xfc>)
 800a638:	4805      	ldr	r0, [pc, #20]	@ (800a650 <low_level_output+0x100>)
 800a63a:	f7f8 ffdd 	bl	80035f8 <HAL_ETH_Transmit>

  return errval;
 800a63e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a642:	4618      	mov	r0, r3
 800a644:	3748      	adds	r7, #72	@ 0x48
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20005638 	.word	0x20005638
 800a650:	20005588 	.word	0x20005588

0800a654 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a65c:	2300      	movs	r3, #0
 800a65e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a660:	4b07      	ldr	r3, [pc, #28]	@ (800a680 <low_level_input+0x2c>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d105      	bne.n	800a674 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a668:	f107 030c 	add.w	r3, r7, #12
 800a66c:	4619      	mov	r1, r3
 800a66e:	4805      	ldr	r0, [pc, #20]	@ (800a684 <low_level_input+0x30>)
 800a670:	f7f9 f856 	bl	8003720 <HAL_ETH_ReadData>
  }

  return p;
 800a674:	68fb      	ldr	r3, [r7, #12]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20005584 	.word	0x20005584
 800a684:	20005588 	.word	0x20005588

0800a688 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff ffdd 	bl	800a654 <low_level_input>
 800a69a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	4798      	blx	r3
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f001 fdca 	bl	800c24c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1ea      	bne.n	800a694 <ethernetif_input+0xc>
}
 800a6be:	bf00      	nop
 800a6c0:	bf00      	nop
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <ethernetif_init+0x1c>
 800a6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a710 <ethernetif_init+0x48>)
 800a6d8:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 800a6dc:	490d      	ldr	r1, [pc, #52]	@ (800a714 <ethernetif_init+0x4c>)
 800a6de:	480e      	ldr	r0, [pc, #56]	@ (800a718 <ethernetif_init+0x50>)
 800a6e0:	f00b f9d6 	bl	8015a90 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2273      	movs	r2, #115	@ 0x73
 800a6e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2274      	movs	r2, #116	@ 0x74
 800a6f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a09      	ldr	r2, [pc, #36]	@ (800a71c <ethernetif_init+0x54>)
 800a6f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a08      	ldr	r2, [pc, #32]	@ (800a720 <ethernetif_init+0x58>)
 800a6fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff fe8d 	bl	800a420 <low_level_init>

  return ERR_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	08016a08 	.word	0x08016a08
 800a714:	08016a24 	.word	0x08016a24
 800a718:	08016a34 	.word	0x08016a34
 800a71c:	08012eb9 	.word	0x08012eb9
 800a720:	0800a551 	.word	0x0800a551

0800a724 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a730:	68f9      	ldr	r1, [r7, #12]
 800a732:	4807      	ldr	r0, [pc, #28]	@ (800a750 <pbuf_free_custom+0x2c>)
 800a734:	f000 fef0 	bl	800b518 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a738:	4b06      	ldr	r3, [pc, #24]	@ (800a754 <pbuf_free_custom+0x30>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d102      	bne.n	800a746 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a740:	4b04      	ldr	r3, [pc, #16]	@ (800a754 <pbuf_free_custom+0x30>)
 800a742:	2200      	movs	r2, #0
 800a744:	701a      	strb	r2, [r3, #0]
  }
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	08019b1c 	.word	0x08019b1c
 800a754:	20005584 	.word	0x20005584

0800a758 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a75c:	f7f7 fb16 	bl	8001d8c <HAL_GetTick>
 800a760:	4603      	mov	r3, r0
}
 800a762:	4618      	mov	r0, r3
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08e      	sub	sp, #56	@ 0x38
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	605a      	str	r2, [r3, #4]
 800a77a:	609a      	str	r2, [r3, #8]
 800a77c:	60da      	str	r2, [r3, #12]
 800a77e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a56      	ldr	r2, [pc, #344]	@ (800a8e0 <HAL_ETH_MspInit+0x178>)
 800a786:	4293      	cmp	r3, r2
 800a788:	f040 80a6 	bne.w	800a8d8 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a78c:	4b55      	ldr	r3, [pc, #340]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a78e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a790:	4a54      	ldr	r2, [pc, #336]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a796:	6313      	str	r3, [r2, #48]	@ 0x30
 800a798:	4b52      	ldr	r3, [pc, #328]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7a0:	623b      	str	r3, [r7, #32]
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	4b4f      	ldr	r3, [pc, #316]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a8:	4a4e      	ldr	r2, [pc, #312]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a7ae:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7b0:	4b4c      	ldr	r3, [pc, #304]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a7b8:	61fb      	str	r3, [r7, #28]
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	4b49      	ldr	r3, [pc, #292]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7c0:	4a48      	ldr	r2, [pc, #288]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7c6:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7c8:	4b46      	ldr	r3, [pc, #280]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7d0:	61bb      	str	r3, [r7, #24]
 800a7d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7d4:	4b43      	ldr	r3, [pc, #268]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d8:	4a42      	ldr	r2, [pc, #264]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7da:	f043 0304 	orr.w	r3, r3, #4
 800a7de:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7e0:	4b40      	ldr	r3, [pc, #256]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7ec:	4b3d      	ldr	r3, [pc, #244]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7f0:	4a3c      	ldr	r2, [pc, #240]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7f8:	4b3a      	ldr	r3, [pc, #232]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	613b      	str	r3, [r7, #16]
 800a802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a804:	4b37      	ldr	r3, [pc, #220]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a808:	4a36      	ldr	r2, [pc, #216]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a80a:	f043 0302 	orr.w	r3, r3, #2
 800a80e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a810:	4b34      	ldr	r3, [pc, #208]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a814:	f003 0302 	and.w	r3, r3, #2
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a81c:	4b31      	ldr	r3, [pc, #196]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a820:	4a30      	ldr	r2, [pc, #192]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a826:	6313      	str	r3, [r2, #48]	@ 0x30
 800a828:	4b2e      	ldr	r3, [pc, #184]	@ (800a8e4 <HAL_ETH_MspInit+0x17c>)
 800a82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a830:	60bb      	str	r3, [r7, #8]
 800a832:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a834:	2332      	movs	r3, #50	@ 0x32
 800a836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a838:	2302      	movs	r3, #2
 800a83a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a83c:	2300      	movs	r3, #0
 800a83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a840:	2303      	movs	r3, #3
 800a842:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a844:	230b      	movs	r3, #11
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a84c:	4619      	mov	r1, r3
 800a84e:	4826      	ldr	r0, [pc, #152]	@ (800a8e8 <HAL_ETH_MspInit+0x180>)
 800a850:	f7f9 ff84 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a854:	2386      	movs	r3, #134	@ 0x86
 800a856:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a858:	2302      	movs	r3, #2
 800a85a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a860:	2303      	movs	r3, #3
 800a862:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a864:	230b      	movs	r3, #11
 800a866:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a86c:	4619      	mov	r1, r3
 800a86e:	481f      	ldr	r0, [pc, #124]	@ (800a8ec <HAL_ETH_MspInit+0x184>)
 800a870:	f7f9 ff74 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a87a:	2302      	movs	r3, #2
 800a87c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a87e:	2300      	movs	r3, #0
 800a880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a882:	2303      	movs	r3, #3
 800a884:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a886:	230b      	movs	r3, #11
 800a888:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a88a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a88e:	4619      	mov	r1, r3
 800a890:	4817      	ldr	r0, [pc, #92]	@ (800a8f0 <HAL_ETH_MspInit+0x188>)
 800a892:	f7f9 ff63 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a896:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a89a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a89c:	2302      	movs	r3, #2
 800a89e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8a8:	230b      	movs	r3, #11
 800a8aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a8ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4810      	ldr	r0, [pc, #64]	@ (800a8f4 <HAL_ETH_MspInit+0x18c>)
 800a8b4:	f7f9 ff52 	bl	800475c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	203d      	movs	r0, #61	@ 0x3d
 800a8be:	f7f8 f8d6 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a8c2:	203d      	movs	r0, #61	@ 0x3d
 800a8c4:	f7f8 f8ef 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	203e      	movs	r0, #62	@ 0x3e
 800a8ce:	f7f8 f8ce 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a8d2:	203e      	movs	r0, #62	@ 0x3e
 800a8d4:	f7f8 f8e7 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a8d8:	bf00      	nop
 800a8da:	3738      	adds	r7, #56	@ 0x38
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	40028000 	.word	0x40028000
 800a8e4:	40023800 	.word	0x40023800
 800a8e8:	40020800 	.word	0x40020800
 800a8ec:	40020000 	.word	0x40020000
 800a8f0:	40020400 	.word	0x40020400
 800a8f4:	40021800 	.word	0x40021800

0800a8f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a8fc:	4802      	ldr	r0, [pc, #8]	@ (800a908 <ETH_PHY_IO_Init+0x10>)
 800a8fe:	f7f9 fad3 	bl	8003ea8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20005588 	.word	0x20005588

0800a90c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0
  return 0;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	68f9      	ldr	r1, [r7, #12]
 800a92e:	4807      	ldr	r0, [pc, #28]	@ (800a94c <ETH_PHY_IO_ReadReg+0x30>)
 800a930:	f7f9 f922 	bl	8003b78 <HAL_ETH_ReadPHYRegister>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a93a:	f04f 33ff 	mov.w	r3, #4294967295
 800a93e:	e000      	b.n	800a942 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20005588 	.word	0x20005588

0800a950 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	68f9      	ldr	r1, [r7, #12]
 800a962:	4807      	ldr	r0, [pc, #28]	@ (800a980 <ETH_PHY_IO_WriteReg+0x30>)
 800a964:	f7f9 f953 	bl	8003c0e <HAL_ETH_WritePHYRegister>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a96e:	f04f 33ff 	mov.w	r3, #4294967295
 800a972:	e000      	b.n	800a976 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20005588 	.word	0x20005588

0800a984 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a988:	f7f7 fa00 	bl	8001d8c <HAL_GetTick>
 800a98c:	4603      	mov	r3, r0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b0a0      	sub	sp, #128	@ 0x80
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a99c:	f107 030c 	add.w	r3, r7, #12
 800a9a0:	2264      	movs	r2, #100	@ 0x64
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f00b f9cb 	bl	8015d40 <memset>
  int32_t PHYLinkState = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a9ba:	483a      	ldr	r0, [pc, #232]	@ (800aaa4 <ethernet_link_check_state+0x110>)
 800a9bc:	f7f7 f90d 	bl	8001bda <LAN8742_GetLinkState>
 800a9c0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a9c8:	089b      	lsrs	r3, r3, #2
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00c      	beq.n	800a9ee <ethernet_link_check_state+0x5a>
 800a9d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	dc09      	bgt.n	800a9ee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a9da:	4833      	ldr	r0, [pc, #204]	@ (800aaa8 <ethernet_link_check_state+0x114>)
 800a9dc:	f7f8 fdb3 	bl	8003546 <HAL_ETH_Stop>
    netif_set_down(netif);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 f81d 	bl	800ba20 <netif_set_down>
    netif_set_link_down(netif);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f001 f880 	bl	800baec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a9ec:	e055      	b.n	800aa9a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d14e      	bne.n	800aa9a <ethernet_link_check_state+0x106>
 800a9fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	dd4b      	ble.n	800aa9a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800aa02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa04:	3b02      	subs	r3, #2
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d82a      	bhi.n	800aa60 <ethernet_link_check_state+0xcc>
 800aa0a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa10 <ethernet_link_check_state+0x7c>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa21 	.word	0x0800aa21
 800aa14:	0800aa33 	.word	0x0800aa33
 800aa18:	0800aa43 	.word	0x0800aa43
 800aa1c:	0800aa53 	.word	0x0800aa53
      duplex = ETH_FULLDUPLEX_MODE;
 800aa20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800aa26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa2a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aa30:	e017      	b.n	800aa62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800aa36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aa40:	e00f      	b.n	800aa62 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800aa42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa46:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aa50:	e007      	b.n	800aa62 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800aa56:	2300      	movs	r3, #0
 800aa58:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aa5e:	e000      	b.n	800aa62 <ethernet_link_check_state+0xce>
      break;
 800aa60:	bf00      	nop
    if(linkchanged)
 800aa62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d018      	beq.n	800aa9a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aa68:	f107 030c 	add.w	r3, r7, #12
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	480e      	ldr	r0, [pc, #56]	@ (800aaa8 <ethernet_link_check_state+0x114>)
 800aa70:	f7f9 f916 	bl	8003ca0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aa74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa76:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800aa78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa7a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aa7c:	f107 030c 	add.w	r3, r7, #12
 800aa80:	4619      	mov	r1, r3
 800aa82:	4809      	ldr	r0, [pc, #36]	@ (800aaa8 <ethernet_link_check_state+0x114>)
 800aa84:	f7f9 f9f6 	bl	8003e74 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800aa88:	4807      	ldr	r0, [pc, #28]	@ (800aaa8 <ethernet_link_check_state+0x114>)
 800aa8a:	f7f8 fcfd 	bl	8003488 <HAL_ETH_Start>
      netif_set_up(netif);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 ff5a 	bl	800b948 <netif_set_up>
      netif_set_link_up(netif);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fff5 	bl	800ba84 <netif_set_link_up>
}
 800aa9a:	bf00      	nop
 800aa9c:	3780      	adds	r7, #128	@ 0x80
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	20005670 	.word	0x20005670
 800aaa8:	20005588 	.word	0x20005588

0800aaac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800aab4:	4812      	ldr	r0, [pc, #72]	@ (800ab00 <HAL_ETH_RxAllocateCallback+0x54>)
 800aab6:	f000 fcc1 	bl	800b43c <memp_malloc_pool>
 800aaba:	60f8      	str	r0, [r7, #12]
  if (p)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d014      	beq.n	800aaec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f103 0220 	add.w	r2, r3, #32
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a0d      	ldr	r2, [pc, #52]	@ (800ab04 <HAL_ETH_RxAllocateCallback+0x58>)
 800aad0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800aada:	9201      	str	r2, [sp, #4]
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2241      	movs	r2, #65	@ 0x41
 800aae2:	2100      	movs	r1, #0
 800aae4:	2000      	movs	r0, #0
 800aae6:	f001 f9f7 	bl	800bed8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800aaea:	e005      	b.n	800aaf8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800aaec:	4b06      	ldr	r3, [pc, #24]	@ (800ab08 <HAL_ETH_RxAllocateCallback+0x5c>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	08019b1c 	.word	0x08019b1c
 800ab04:	0800a725 	.word	0x0800a725
 800ab08:	20005584 	.word	0x20005584

0800ab0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3b20      	subs	r3, #32
 800ab2a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	2200      	movs	r2, #0
 800ab36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	887a      	ldrh	r2, [r7, #2]
 800ab3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d103      	bne.n	800ab4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	e003      	b.n	800ab56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	69fa      	ldr	r2, [r7, #28]
 800ab5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	61fb      	str	r3, [r7, #28]
 800ab62:	e009      	b.n	800ab78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	891a      	ldrh	r2, [r3, #8]
 800ab68:	887b      	ldrh	r3, [r7, #2]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1f2      	bne.n	800ab64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ab7e:	887b      	ldrh	r3, [r7, #2]
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff fc20 	bl	800a3c8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ab88:	bf00      	nop
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ab9a:	88fb      	ldrh	r3, [r7, #6]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	b21a      	sxth	r2, r3
 800aba0:	88fb      	ldrh	r3, [r7, #6]
 800aba2:	0a1b      	lsrs	r3, r3, #8
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	b21b      	sxth	r3, r3
 800aba8:	4313      	orrs	r3, r2
 800abaa:	b21b      	sxth	r3, r3
 800abac:	b29b      	uxth	r3, r3
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	061a      	lsls	r2, r3, #24
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	021b      	lsls	r3, r3, #8
 800abca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	0a1b      	lsrs	r3, r3, #8
 800abd4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800abd8:	431a      	orrs	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	0e1b      	lsrs	r3, r3, #24
 800abde:	4313      	orrs	r3, r2
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800abf6:	f000 f8d5 	bl	800ada4 <mem_init>
  memp_init();
 800abfa:	f000 fbdb 	bl	800b3b4 <memp_init>
  pbuf_init();
  netif_init();
 800abfe:	f000 fcd9 	bl	800b5b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ac02:	f007 f863 	bl	8011ccc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ac06:	f001 fdbf 	bl	800c788 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ac0a:	f006 ffd5 	bl	8011bb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ac0e:	bf00      	nop
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ac22:	4b05      	ldr	r3, [pc, #20]	@ (800ac38 <ptr_to_mem+0x20>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	88fb      	ldrh	r3, [r7, #6]
 800ac28:	4413      	add	r3, r2
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	20005cfc 	.word	0x20005cfc

0800ac3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ac44:	4b05      	ldr	r3, [pc, #20]	@ (800ac5c <mem_to_ptr+0x20>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	b29b      	uxth	r3, r3
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	20005cfc 	.word	0x20005cfc

0800ac60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ac60:	b590      	push	{r4, r7, lr}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ac68:	4b45      	ldr	r3, [pc, #276]	@ (800ad80 <plug_holes+0x120>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d206      	bcs.n	800ac80 <plug_holes+0x20>
 800ac72:	4b44      	ldr	r3, [pc, #272]	@ (800ad84 <plug_holes+0x124>)
 800ac74:	f240 12df 	movw	r2, #479	@ 0x1df
 800ac78:	4943      	ldr	r1, [pc, #268]	@ (800ad88 <plug_holes+0x128>)
 800ac7a:	4844      	ldr	r0, [pc, #272]	@ (800ad8c <plug_holes+0x12c>)
 800ac7c:	f00a ff08 	bl	8015a90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ac80:	4b43      	ldr	r3, [pc, #268]	@ (800ad90 <plug_holes+0x130>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d306      	bcc.n	800ac98 <plug_holes+0x38>
 800ac8a:	4b3e      	ldr	r3, [pc, #248]	@ (800ad84 <plug_holes+0x124>)
 800ac8c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ac90:	4940      	ldr	r1, [pc, #256]	@ (800ad94 <plug_holes+0x134>)
 800ac92:	483e      	ldr	r0, [pc, #248]	@ (800ad8c <plug_holes+0x12c>)
 800ac94:	f00a fefc 	bl	8015a90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	791b      	ldrb	r3, [r3, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d006      	beq.n	800acae <plug_holes+0x4e>
 800aca0:	4b38      	ldr	r3, [pc, #224]	@ (800ad84 <plug_holes+0x124>)
 800aca2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800aca6:	493c      	ldr	r1, [pc, #240]	@ (800ad98 <plug_holes+0x138>)
 800aca8:	4838      	ldr	r0, [pc, #224]	@ (800ad8c <plug_holes+0x12c>)
 800acaa:	f00a fef1 	bl	8015a90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800acb6:	d906      	bls.n	800acc6 <plug_holes+0x66>
 800acb8:	4b32      	ldr	r3, [pc, #200]	@ (800ad84 <plug_holes+0x124>)
 800acba:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800acbe:	4937      	ldr	r1, [pc, #220]	@ (800ad9c <plug_holes+0x13c>)
 800acc0:	4832      	ldr	r0, [pc, #200]	@ (800ad8c <plug_holes+0x12c>)
 800acc2:	f00a fee5 	bl	8015a90 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff ffa4 	bl	800ac18 <ptr_to_mem>
 800acd0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d024      	beq.n	800ad24 <plug_holes+0xc4>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	791b      	ldrb	r3, [r3, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d120      	bne.n	800ad24 <plug_holes+0xc4>
 800ace2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad90 <plug_holes+0x130>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d01b      	beq.n	800ad24 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800acec:	4b2c      	ldr	r3, [pc, #176]	@ (800ada0 <plug_holes+0x140>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d102      	bne.n	800acfc <plug_holes+0x9c>
      lfree = mem;
 800acf6:	4a2a      	ldr	r2, [pc, #168]	@ (800ada0 <plug_holes+0x140>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	881a      	ldrh	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ad0c:	d00a      	beq.n	800ad24 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff ff80 	bl	800ac18 <ptr_to_mem>
 800ad18:	4604      	mov	r4, r0
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff ff8e 	bl	800ac3c <mem_to_ptr>
 800ad20:	4603      	mov	r3, r0
 800ad22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	885b      	ldrh	r3, [r3, #2]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff ff75 	bl	800ac18 <ptr_to_mem>
 800ad2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d01f      	beq.n	800ad78 <plug_holes+0x118>
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	791b      	ldrb	r3, [r3, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d11b      	bne.n	800ad78 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ad40:	4b17      	ldr	r3, [pc, #92]	@ (800ada0 <plug_holes+0x140>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d102      	bne.n	800ad50 <plug_holes+0xf0>
      lfree = pmem;
 800ad4a:	4a15      	ldr	r2, [pc, #84]	@ (800ada0 <plug_holes+0x140>)
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	881a      	ldrh	r2, [r3, #0]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ad60:	d00a      	beq.n	800ad78 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff ff56 	bl	800ac18 <ptr_to_mem>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	68b8      	ldr	r0, [r7, #8]
 800ad70:	f7ff ff64 	bl	800ac3c <mem_to_ptr>
 800ad74:	4603      	mov	r3, r0
 800ad76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ad78:	bf00      	nop
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd90      	pop	{r4, r7, pc}
 800ad80:	20005cfc 	.word	0x20005cfc
 800ad84:	08016a5c 	.word	0x08016a5c
 800ad88:	08016a8c 	.word	0x08016a8c
 800ad8c:	08016aa4 	.word	0x08016aa4
 800ad90:	20005d00 	.word	0x20005d00
 800ad94:	08016acc 	.word	0x08016acc
 800ad98:	08016ae8 	.word	0x08016ae8
 800ad9c:	08016b04 	.word	0x08016b04
 800ada0:	20005d04 	.word	0x20005d04

0800ada4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800adaa:	4b18      	ldr	r3, [pc, #96]	@ (800ae0c <mem_init+0x68>)
 800adac:	3303      	adds	r3, #3
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	461a      	mov	r2, r3
 800adb4:	4b16      	ldr	r3, [pc, #88]	@ (800ae10 <mem_init+0x6c>)
 800adb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800adb8:	4b15      	ldr	r3, [pc, #84]	@ (800ae10 <mem_init+0x6c>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800adc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800add2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800add6:	f7ff ff1f 	bl	800ac18 <ptr_to_mem>
 800adda:	4603      	mov	r3, r0
 800addc:	4a0d      	ldr	r2, [pc, #52]	@ (800ae14 <mem_init+0x70>)
 800adde:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ade0:	4b0c      	ldr	r3, [pc, #48]	@ (800ae14 <mem_init+0x70>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2201      	movs	r2, #1
 800ade6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ade8:	4b0a      	ldr	r3, [pc, #40]	@ (800ae14 <mem_init+0x70>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800adf0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800adf2:	4b08      	ldr	r3, [pc, #32]	@ (800ae14 <mem_init+0x70>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800adfa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800adfc:	4b04      	ldr	r3, [pc, #16]	@ (800ae10 <mem_init+0x6c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a05      	ldr	r2, [pc, #20]	@ (800ae18 <mem_init+0x74>)
 800ae02:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	200056a8 	.word	0x200056a8
 800ae10:	20005cfc 	.word	0x20005cfc
 800ae14:	20005d00 	.word	0x20005d00
 800ae18:	20005d04 	.word	0x20005d04

0800ae1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff ff09 	bl	800ac3c <mem_to_ptr>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fef0 	bl	800ac18 <ptr_to_mem>
 800ae38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	885b      	ldrh	r3, [r3, #2]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff feea 	bl	800ac18 <ptr_to_mem>
 800ae44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ae4e:	d818      	bhi.n	800ae82 <mem_link_valid+0x66>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	885b      	ldrh	r3, [r3, #2]
 800ae54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ae58:	d813      	bhi.n	800ae82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae5e:	8afa      	ldrh	r2, [r7, #22]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d004      	beq.n	800ae6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	8afa      	ldrh	r2, [r7, #22]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d109      	bne.n	800ae82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae6e:	4b08      	ldr	r3, [pc, #32]	@ (800ae90 <mem_link_valid+0x74>)
 800ae70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d006      	beq.n	800ae86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	885b      	ldrh	r3, [r3, #2]
 800ae7c:	8afa      	ldrh	r2, [r7, #22]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d001      	beq.n	800ae86 <mem_link_valid+0x6a>
    return 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	e000      	b.n	800ae88 <mem_link_valid+0x6c>
  }
  return 1;
 800ae86:	2301      	movs	r3, #1
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20005d00 	.word	0x20005d00

0800ae94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d04c      	beq.n	800af3c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f003 0303 	and.w	r3, r3, #3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d007      	beq.n	800aebc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aeac:	4b25      	ldr	r3, [pc, #148]	@ (800af44 <mem_free+0xb0>)
 800aeae:	f240 2273 	movw	r2, #627	@ 0x273
 800aeb2:	4925      	ldr	r1, [pc, #148]	@ (800af48 <mem_free+0xb4>)
 800aeb4:	4825      	ldr	r0, [pc, #148]	@ (800af4c <mem_free+0xb8>)
 800aeb6:	f00a fdeb 	bl	8015a90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800aeba:	e040      	b.n	800af3e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3b08      	subs	r3, #8
 800aec0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800aec2:	4b23      	ldr	r3, [pc, #140]	@ (800af50 <mem_free+0xbc>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d306      	bcc.n	800aeda <mem_free+0x46>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f103 020c 	add.w	r2, r3, #12
 800aed2:	4b20      	ldr	r3, [pc, #128]	@ (800af54 <mem_free+0xc0>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d907      	bls.n	800aeea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aeda:	4b1a      	ldr	r3, [pc, #104]	@ (800af44 <mem_free+0xb0>)
 800aedc:	f240 227f 	movw	r2, #639	@ 0x27f
 800aee0:	491d      	ldr	r1, [pc, #116]	@ (800af58 <mem_free+0xc4>)
 800aee2:	481a      	ldr	r0, [pc, #104]	@ (800af4c <mem_free+0xb8>)
 800aee4:	f00a fdd4 	bl	8015a90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800aee8:	e029      	b.n	800af3e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	791b      	ldrb	r3, [r3, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d107      	bne.n	800af02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800aef2:	4b14      	ldr	r3, [pc, #80]	@ (800af44 <mem_free+0xb0>)
 800aef4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800aef8:	4918      	ldr	r1, [pc, #96]	@ (800af5c <mem_free+0xc8>)
 800aefa:	4814      	ldr	r0, [pc, #80]	@ (800af4c <mem_free+0xb8>)
 800aefc:	f00a fdc8 	bl	8015a90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800af00:	e01d      	b.n	800af3e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7ff ff8a 	bl	800ae1c <mem_link_valid>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d107      	bne.n	800af1e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800af0e:	4b0d      	ldr	r3, [pc, #52]	@ (800af44 <mem_free+0xb0>)
 800af10:	f240 2295 	movw	r2, #661	@ 0x295
 800af14:	4912      	ldr	r1, [pc, #72]	@ (800af60 <mem_free+0xcc>)
 800af16:	480d      	ldr	r0, [pc, #52]	@ (800af4c <mem_free+0xb8>)
 800af18:	f00a fdba 	bl	8015a90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800af1c:	e00f      	b.n	800af3e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800af24:	4b0f      	ldr	r3, [pc, #60]	@ (800af64 <mem_free+0xd0>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d202      	bcs.n	800af34 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800af2e:	4a0d      	ldr	r2, [pc, #52]	@ (800af64 <mem_free+0xd0>)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7ff fe93 	bl	800ac60 <plug_holes>
 800af3a:	e000      	b.n	800af3e <mem_free+0xaa>
    return;
 800af3c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	08016a5c 	.word	0x08016a5c
 800af48:	08016b30 	.word	0x08016b30
 800af4c:	08016aa4 	.word	0x08016aa4
 800af50:	20005cfc 	.word	0x20005cfc
 800af54:	20005d00 	.word	0x20005d00
 800af58:	08016b54 	.word	0x08016b54
 800af5c:	08016b70 	.word	0x08016b70
 800af60:	08016b98 	.word	0x08016b98
 800af64:	20005d04 	.word	0x20005d04

0800af68 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800af74:	887b      	ldrh	r3, [r7, #2]
 800af76:	3303      	adds	r3, #3
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800af80:	8bfb      	ldrh	r3, [r7, #30]
 800af82:	2b0b      	cmp	r3, #11
 800af84:	d801      	bhi.n	800af8a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800af86:	230c      	movs	r3, #12
 800af88:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800af8a:	8bfb      	ldrh	r3, [r7, #30]
 800af8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800af90:	d803      	bhi.n	800af9a <mem_trim+0x32>
 800af92:	8bfa      	ldrh	r2, [r7, #30]
 800af94:	887b      	ldrh	r3, [r7, #2]
 800af96:	429a      	cmp	r2, r3
 800af98:	d201      	bcs.n	800af9e <mem_trim+0x36>
    return NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	e0cc      	b.n	800b138 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800af9e:	4b68      	ldr	r3, [pc, #416]	@ (800b140 <mem_trim+0x1d8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d304      	bcc.n	800afb2 <mem_trim+0x4a>
 800afa8:	4b66      	ldr	r3, [pc, #408]	@ (800b144 <mem_trim+0x1dc>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d306      	bcc.n	800afc0 <mem_trim+0x58>
 800afb2:	4b65      	ldr	r3, [pc, #404]	@ (800b148 <mem_trim+0x1e0>)
 800afb4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800afb8:	4964      	ldr	r1, [pc, #400]	@ (800b14c <mem_trim+0x1e4>)
 800afba:	4865      	ldr	r0, [pc, #404]	@ (800b150 <mem_trim+0x1e8>)
 800afbc:	f00a fd68 	bl	8015a90 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800afc0:	4b5f      	ldr	r3, [pc, #380]	@ (800b140 <mem_trim+0x1d8>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d304      	bcc.n	800afd4 <mem_trim+0x6c>
 800afca:	4b5e      	ldr	r3, [pc, #376]	@ (800b144 <mem_trim+0x1dc>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d301      	bcc.n	800afd8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	e0af      	b.n	800b138 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3b08      	subs	r3, #8
 800afdc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800afde:	69b8      	ldr	r0, [r7, #24]
 800afe0:	f7ff fe2c 	bl	800ac3c <mem_to_ptr>
 800afe4:	4603      	mov	r3, r0
 800afe6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	881a      	ldrh	r2, [r3, #0]
 800afec:	8afb      	ldrh	r3, [r7, #22]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	3b08      	subs	r3, #8
 800aff4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aff6:	8bfa      	ldrh	r2, [r7, #30]
 800aff8:	8abb      	ldrh	r3, [r7, #20]
 800affa:	429a      	cmp	r2, r3
 800affc:	d906      	bls.n	800b00c <mem_trim+0xa4>
 800affe:	4b52      	ldr	r3, [pc, #328]	@ (800b148 <mem_trim+0x1e0>)
 800b000:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b004:	4953      	ldr	r1, [pc, #332]	@ (800b154 <mem_trim+0x1ec>)
 800b006:	4852      	ldr	r0, [pc, #328]	@ (800b150 <mem_trim+0x1e8>)
 800b008:	f00a fd42 	bl	8015a90 <iprintf>
  if (newsize > size) {
 800b00c:	8bfa      	ldrh	r2, [r7, #30]
 800b00e:	8abb      	ldrh	r3, [r7, #20]
 800b010:	429a      	cmp	r2, r3
 800b012:	d901      	bls.n	800b018 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b014:	2300      	movs	r3, #0
 800b016:	e08f      	b.n	800b138 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b018:	8bfa      	ldrh	r2, [r7, #30]
 800b01a:	8abb      	ldrh	r3, [r7, #20]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d101      	bne.n	800b024 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	e089      	b.n	800b138 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff fdf5 	bl	800ac18 <ptr_to_mem>
 800b02e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	791b      	ldrb	r3, [r3, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d13f      	bne.n	800b0b8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b040:	d106      	bne.n	800b050 <mem_trim+0xe8>
 800b042:	4b41      	ldr	r3, [pc, #260]	@ (800b148 <mem_trim+0x1e0>)
 800b044:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b048:	4943      	ldr	r1, [pc, #268]	@ (800b158 <mem_trim+0x1f0>)
 800b04a:	4841      	ldr	r0, [pc, #260]	@ (800b150 <mem_trim+0x1e8>)
 800b04c:	f00a fd20 	bl	8015a90 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b056:	8afa      	ldrh	r2, [r7, #22]
 800b058:	8bfb      	ldrh	r3, [r7, #30]
 800b05a:	4413      	add	r3, r2
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	3308      	adds	r3, #8
 800b060:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b062:	4b3e      	ldr	r3, [pc, #248]	@ (800b15c <mem_trim+0x1f4>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d106      	bne.n	800b07a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b06c:	89fb      	ldrh	r3, [r7, #14]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff fdd2 	bl	800ac18 <ptr_to_mem>
 800b074:	4603      	mov	r3, r0
 800b076:	4a39      	ldr	r2, [pc, #228]	@ (800b15c <mem_trim+0x1f4>)
 800b078:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b07a:	89fb      	ldrh	r3, [r7, #14]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fdcb 	bl	800ac18 <ptr_to_mem>
 800b082:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2200      	movs	r2, #0
 800b088:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	89ba      	ldrh	r2, [r7, #12]
 800b08e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	8afa      	ldrh	r2, [r7, #22]
 800b094:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	89fa      	ldrh	r2, [r7, #14]
 800b09a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b0a4:	d047      	beq.n	800b136 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff fdb4 	bl	800ac18 <ptr_to_mem>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	89fb      	ldrh	r3, [r7, #14]
 800b0b4:	8053      	strh	r3, [r2, #2]
 800b0b6:	e03e      	b.n	800b136 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b0b8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ba:	f103 0214 	add.w	r2, r3, #20
 800b0be:	8abb      	ldrh	r3, [r7, #20]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d838      	bhi.n	800b136 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b0c4:	8afa      	ldrh	r2, [r7, #22]
 800b0c6:	8bfb      	ldrh	r3, [r7, #30]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b0d8:	d106      	bne.n	800b0e8 <mem_trim+0x180>
 800b0da:	4b1b      	ldr	r3, [pc, #108]	@ (800b148 <mem_trim+0x1e0>)
 800b0dc:	f240 3216 	movw	r2, #790	@ 0x316
 800b0e0:	491d      	ldr	r1, [pc, #116]	@ (800b158 <mem_trim+0x1f0>)
 800b0e2:	481b      	ldr	r0, [pc, #108]	@ (800b150 <mem_trim+0x1e8>)
 800b0e4:	f00a fcd4 	bl	8015a90 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b0e8:	89fb      	ldrh	r3, [r7, #14]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff fd94 	bl	800ac18 <ptr_to_mem>
 800b0f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b0f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b15c <mem_trim+0x1f4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d202      	bcs.n	800b102 <mem_trim+0x19a>
      lfree = mem2;
 800b0fc:	4a17      	ldr	r2, [pc, #92]	@ (800b15c <mem_trim+0x1f4>)
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2200      	movs	r2, #0
 800b106:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	881a      	ldrh	r2, [r3, #0]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	8afa      	ldrh	r2, [r7, #22]
 800b114:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	89fa      	ldrh	r2, [r7, #14]
 800b11a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b124:	d007      	beq.n	800b136 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff fd74 	bl	800ac18 <ptr_to_mem>
 800b130:	4602      	mov	r2, r0
 800b132:	89fb      	ldrh	r3, [r7, #14]
 800b134:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b136:	687b      	ldr	r3, [r7, #4]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3720      	adds	r7, #32
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	20005cfc 	.word	0x20005cfc
 800b144:	20005d00 	.word	0x20005d00
 800b148:	08016a5c 	.word	0x08016a5c
 800b14c:	08016bcc 	.word	0x08016bcc
 800b150:	08016aa4 	.word	0x08016aa4
 800b154:	08016be4 	.word	0x08016be4
 800b158:	08016c04 	.word	0x08016c04
 800b15c:	20005d04 	.word	0x20005d04

0800b160 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <mem_malloc+0x14>
    return NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	e0d9      	b.n	800b328 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b174:	88fb      	ldrh	r3, [r7, #6]
 800b176:	3303      	adds	r3, #3
 800b178:	b29b      	uxth	r3, r3
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b180:	8bbb      	ldrh	r3, [r7, #28]
 800b182:	2b0b      	cmp	r3, #11
 800b184:	d801      	bhi.n	800b18a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b186:	230c      	movs	r3, #12
 800b188:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b18a:	8bbb      	ldrh	r3, [r7, #28]
 800b18c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b190:	d803      	bhi.n	800b19a <mem_malloc+0x3a>
 800b192:	8bba      	ldrh	r2, [r7, #28]
 800b194:	88fb      	ldrh	r3, [r7, #6]
 800b196:	429a      	cmp	r2, r3
 800b198:	d201      	bcs.n	800b19e <mem_malloc+0x3e>
    return NULL;
 800b19a:	2300      	movs	r3, #0
 800b19c:	e0c4      	b.n	800b328 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b19e:	4b64      	ldr	r3, [pc, #400]	@ (800b330 <mem_malloc+0x1d0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff fd4a 	bl	800ac3c <mem_to_ptr>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	83fb      	strh	r3, [r7, #30]
 800b1ac:	e0b4      	b.n	800b318 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b1ae:	8bfb      	ldrh	r3, [r7, #30]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7ff fd31 	bl	800ac18 <ptr_to_mem>
 800b1b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	791b      	ldrb	r3, [r3, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f040 80a4 	bne.w	800b30a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	8bfb      	ldrh	r3, [r7, #30]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	f1a3 0208 	sub.w	r2, r3, #8
 800b1d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	f0c0 8099 	bcc.w	800b30a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	8bfb      	ldrh	r3, [r7, #30]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	f1a3 0208 	sub.w	r2, r3, #8
 800b1e6:	8bbb      	ldrh	r3, [r7, #28]
 800b1e8:	3314      	adds	r3, #20
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d333      	bcc.n	800b256 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b1ee:	8bfa      	ldrh	r2, [r7, #30]
 800b1f0:	8bbb      	ldrh	r3, [r7, #28]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	3308      	adds	r3, #8
 800b1f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b1fa:	8a7b      	ldrh	r3, [r7, #18]
 800b1fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b200:	d106      	bne.n	800b210 <mem_malloc+0xb0>
 800b202:	4b4c      	ldr	r3, [pc, #304]	@ (800b334 <mem_malloc+0x1d4>)
 800b204:	f240 3287 	movw	r2, #903	@ 0x387
 800b208:	494b      	ldr	r1, [pc, #300]	@ (800b338 <mem_malloc+0x1d8>)
 800b20a:	484c      	ldr	r0, [pc, #304]	@ (800b33c <mem_malloc+0x1dc>)
 800b20c:	f00a fc40 	bl	8015a90 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b210:	8a7b      	ldrh	r3, [r7, #18]
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff fd00 	bl	800ac18 <ptr_to_mem>
 800b218:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	881a      	ldrh	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	8bfa      	ldrh	r2, [r7, #30]
 800b22c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	8a7a      	ldrh	r2, [r7, #18]
 800b232:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2201      	movs	r2, #1
 800b238:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b242:	d00b      	beq.n	800b25c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	881b      	ldrh	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff fce5 	bl	800ac18 <ptr_to_mem>
 800b24e:	4602      	mov	r2, r0
 800b250:	8a7b      	ldrh	r3, [r7, #18]
 800b252:	8053      	strh	r3, [r2, #2]
 800b254:	e002      	b.n	800b25c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2201      	movs	r2, #1
 800b25a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b25c:	4b34      	ldr	r3, [pc, #208]	@ (800b330 <mem_malloc+0x1d0>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	429a      	cmp	r2, r3
 800b264:	d127      	bne.n	800b2b6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b266:	4b32      	ldr	r3, [pc, #200]	@ (800b330 <mem_malloc+0x1d0>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b26c:	e005      	b.n	800b27a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fcd0 	bl	800ac18 <ptr_to_mem>
 800b278:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	791b      	ldrb	r3, [r3, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d004      	beq.n	800b28c <mem_malloc+0x12c>
 800b282:	4b2f      	ldr	r3, [pc, #188]	@ (800b340 <mem_malloc+0x1e0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	69ba      	ldr	r2, [r7, #24]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d1f0      	bne.n	800b26e <mem_malloc+0x10e>
          }
          lfree = cur;
 800b28c:	4a28      	ldr	r2, [pc, #160]	@ (800b330 <mem_malloc+0x1d0>)
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b292:	4b27      	ldr	r3, [pc, #156]	@ (800b330 <mem_malloc+0x1d0>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	4b2a      	ldr	r3, [pc, #168]	@ (800b340 <mem_malloc+0x1e0>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d00b      	beq.n	800b2b6 <mem_malloc+0x156>
 800b29e:	4b24      	ldr	r3, [pc, #144]	@ (800b330 <mem_malloc+0x1d0>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	791b      	ldrb	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d006      	beq.n	800b2b6 <mem_malloc+0x156>
 800b2a8:	4b22      	ldr	r3, [pc, #136]	@ (800b334 <mem_malloc+0x1d4>)
 800b2aa:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b2ae:	4925      	ldr	r1, [pc, #148]	@ (800b344 <mem_malloc+0x1e4>)
 800b2b0:	4822      	ldr	r0, [pc, #136]	@ (800b33c <mem_malloc+0x1dc>)
 800b2b2:	f00a fbed 	bl	8015a90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b2b6:	8bba      	ldrh	r2, [r7, #28]
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	3308      	adds	r3, #8
 800b2be:	4a20      	ldr	r2, [pc, #128]	@ (800b340 <mem_malloc+0x1e0>)
 800b2c0:	6812      	ldr	r2, [r2, #0]
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d906      	bls.n	800b2d4 <mem_malloc+0x174>
 800b2c6:	4b1b      	ldr	r3, [pc, #108]	@ (800b334 <mem_malloc+0x1d4>)
 800b2c8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b2cc:	491e      	ldr	r1, [pc, #120]	@ (800b348 <mem_malloc+0x1e8>)
 800b2ce:	481b      	ldr	r0, [pc, #108]	@ (800b33c <mem_malloc+0x1dc>)
 800b2d0:	f00a fbde 	bl	8015a90 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d006      	beq.n	800b2ec <mem_malloc+0x18c>
 800b2de:	4b15      	ldr	r3, [pc, #84]	@ (800b334 <mem_malloc+0x1d4>)
 800b2e0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b2e4:	4919      	ldr	r1, [pc, #100]	@ (800b34c <mem_malloc+0x1ec>)
 800b2e6:	4815      	ldr	r0, [pc, #84]	@ (800b33c <mem_malloc+0x1dc>)
 800b2e8:	f00a fbd2 	bl	8015a90 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d006      	beq.n	800b304 <mem_malloc+0x1a4>
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b334 <mem_malloc+0x1d4>)
 800b2f8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b2fc:	4914      	ldr	r1, [pc, #80]	@ (800b350 <mem_malloc+0x1f0>)
 800b2fe:	480f      	ldr	r0, [pc, #60]	@ (800b33c <mem_malloc+0x1dc>)
 800b300:	f00a fbc6 	bl	8015a90 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	3308      	adds	r3, #8
 800b308:	e00e      	b.n	800b328 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b30a:	8bfb      	ldrh	r3, [r7, #30]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff fc83 	bl	800ac18 <ptr_to_mem>
 800b312:	4603      	mov	r3, r0
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b318:	8bfa      	ldrh	r2, [r7, #30]
 800b31a:	8bbb      	ldrh	r3, [r7, #28]
 800b31c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800b320:	429a      	cmp	r2, r3
 800b322:	f4ff af44 	bcc.w	800b1ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3720      	adds	r7, #32
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20005d04 	.word	0x20005d04
 800b334:	08016a5c 	.word	0x08016a5c
 800b338:	08016c04 	.word	0x08016c04
 800b33c:	08016aa4 	.word	0x08016aa4
 800b340:	20005d00 	.word	0x20005d00
 800b344:	08016c18 	.word	0x08016c18
 800b348:	08016c34 	.word	0x08016c34
 800b34c:	08016c64 	.word	0x08016c64
 800b350:	08016c94 	.word	0x08016c94

0800b354 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	3303      	adds	r3, #3
 800b36a:	f023 0303 	bic.w	r3, r3, #3
 800b36e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	e011      	b.n	800b39a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	881b      	ldrh	r3, [r3, #0]
 800b38c:	461a      	mov	r2, r3
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	4413      	add	r3, r2
 800b392:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3301      	adds	r3, #1
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	dbe7      	blt.n	800b376 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b3a6:	bf00      	nop
 800b3a8:	bf00      	nop
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	80fb      	strh	r3, [r7, #6]
 800b3be:	e009      	b.n	800b3d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b3c0:	88fb      	ldrh	r3, [r7, #6]
 800b3c2:	4a08      	ldr	r2, [pc, #32]	@ (800b3e4 <memp_init+0x30>)
 800b3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7ff ffc3 	bl	800b354 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b3ce:	88fb      	ldrh	r3, [r7, #6]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	80fb      	strh	r3, [r7, #6]
 800b3d4:	88fb      	ldrh	r3, [r7, #6]
 800b3d6:	2b08      	cmp	r3, #8
 800b3d8:	d9f2      	bls.n	800b3c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b3da:	bf00      	nop
 800b3dc:	bf00      	nop
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	08019b94 	.word	0x08019b94

0800b3e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d012      	beq.n	800b424 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	6812      	ldr	r2, [r2, #0]
 800b406:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f003 0303 	and.w	r3, r3, #3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d006      	beq.n	800b420 <do_memp_malloc_pool+0x38>
 800b412:	4b07      	ldr	r3, [pc, #28]	@ (800b430 <do_memp_malloc_pool+0x48>)
 800b414:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b418:	4906      	ldr	r1, [pc, #24]	@ (800b434 <do_memp_malloc_pool+0x4c>)
 800b41a:	4807      	ldr	r0, [pc, #28]	@ (800b438 <do_memp_malloc_pool+0x50>)
 800b41c:	f00a fb38 	bl	8015a90 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	e000      	b.n	800b426 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	08016cb8 	.word	0x08016cb8
 800b434:	08016ce8 	.word	0x08016ce8
 800b438:	08016d0c 	.word	0x08016d0c

0800b43c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <memp_malloc_pool+0x1c>
 800b44a:	4b0a      	ldr	r3, [pc, #40]	@ (800b474 <memp_malloc_pool+0x38>)
 800b44c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b450:	4909      	ldr	r1, [pc, #36]	@ (800b478 <memp_malloc_pool+0x3c>)
 800b452:	480a      	ldr	r0, [pc, #40]	@ (800b47c <memp_malloc_pool+0x40>)
 800b454:	f00a fb1c 	bl	8015a90 <iprintf>
  if (desc == NULL) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <memp_malloc_pool+0x26>
    return NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	e003      	b.n	800b46a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff ffc0 	bl	800b3e8 <do_memp_malloc_pool>
 800b468:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	08016cb8 	.word	0x08016cb8
 800b478:	08016d34 	.word	0x08016d34
 800b47c:	08016d0c 	.word	0x08016d0c

0800b480 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b48a:	79fb      	ldrb	r3, [r7, #7]
 800b48c:	2b08      	cmp	r3, #8
 800b48e:	d908      	bls.n	800b4a2 <memp_malloc+0x22>
 800b490:	4b0a      	ldr	r3, [pc, #40]	@ (800b4bc <memp_malloc+0x3c>)
 800b492:	f240 1257 	movw	r2, #343	@ 0x157
 800b496:	490a      	ldr	r1, [pc, #40]	@ (800b4c0 <memp_malloc+0x40>)
 800b498:	480a      	ldr	r0, [pc, #40]	@ (800b4c4 <memp_malloc+0x44>)
 800b49a:	f00a faf9 	bl	8015a90 <iprintf>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e008      	b.n	800b4b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	4a08      	ldr	r2, [pc, #32]	@ (800b4c8 <memp_malloc+0x48>)
 800b4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff ff9c 	bl	800b3e8 <do_memp_malloc_pool>
 800b4b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	08016cb8 	.word	0x08016cb8
 800b4c0:	08016d48 	.word	0x08016d48
 800b4c4:	08016d0c 	.word	0x08016d0c
 800b4c8:	08019b94 	.word	0x08019b94

0800b4cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	f003 0303 	and.w	r3, r3, #3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d006      	beq.n	800b4ee <do_memp_free_pool+0x22>
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b50c <do_memp_free_pool+0x40>)
 800b4e2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b4e6:	490a      	ldr	r1, [pc, #40]	@ (800b510 <do_memp_free_pool+0x44>)
 800b4e8:	480a      	ldr	r0, [pc, #40]	@ (800b514 <do_memp_free_pool+0x48>)
 800b4ea:	f00a fad1 	bl	8015a90 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b504:	bf00      	nop
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	08016cb8 	.word	0x08016cb8
 800b510:	08016d68 	.word	0x08016d68
 800b514:	08016d0c 	.word	0x08016d0c

0800b518 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <memp_free_pool+0x1e>
 800b528:	4b0a      	ldr	r3, [pc, #40]	@ (800b554 <memp_free_pool+0x3c>)
 800b52a:	f240 1295 	movw	r2, #405	@ 0x195
 800b52e:	490a      	ldr	r1, [pc, #40]	@ (800b558 <memp_free_pool+0x40>)
 800b530:	480a      	ldr	r0, [pc, #40]	@ (800b55c <memp_free_pool+0x44>)
 800b532:	f00a faad 	bl	8015a90 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d007      	beq.n	800b54c <memp_free_pool+0x34>
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ffc1 	bl	800b4cc <do_memp_free_pool>
 800b54a:	e000      	b.n	800b54e <memp_free_pool+0x36>
    return;
 800b54c:	bf00      	nop
}
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	08016cb8 	.word	0x08016cb8
 800b558:	08016d34 	.word	0x08016d34
 800b55c:	08016d0c 	.word	0x08016d0c

0800b560 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d907      	bls.n	800b582 <memp_free+0x22>
 800b572:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a4 <memp_free+0x44>)
 800b574:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b578:	490b      	ldr	r1, [pc, #44]	@ (800b5a8 <memp_free+0x48>)
 800b57a:	480c      	ldr	r0, [pc, #48]	@ (800b5ac <memp_free+0x4c>)
 800b57c:	f00a fa88 	bl	8015a90 <iprintf>
 800b580:	e00c      	b.n	800b59c <memp_free+0x3c>

  if (mem == NULL) {
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d008      	beq.n	800b59a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	4a09      	ldr	r2, [pc, #36]	@ (800b5b0 <memp_free+0x50>)
 800b58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff ff9a 	bl	800b4cc <do_memp_free_pool>
 800b598:	e000      	b.n	800b59c <memp_free+0x3c>
    return;
 800b59a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08016cb8 	.word	0x08016cb8
 800b5a8:	08016d88 	.word	0x08016d88
 800b5ac:	08016d0c 	.word	0x08016d0c
 800b5b0:	08019b94 	.word	0x08019b94

0800b5b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b5b8:	bf00      	nop
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
	...

0800b5c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d108      	bne.n	800b5ea <netif_add+0x26>
 800b5d8:	4b57      	ldr	r3, [pc, #348]	@ (800b738 <netif_add+0x174>)
 800b5da:	f240 1227 	movw	r2, #295	@ 0x127
 800b5de:	4957      	ldr	r1, [pc, #348]	@ (800b73c <netif_add+0x178>)
 800b5e0:	4857      	ldr	r0, [pc, #348]	@ (800b740 <netif_add+0x17c>)
 800b5e2:	f00a fa55 	bl	8015a90 <iprintf>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e0a2      	b.n	800b730 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d108      	bne.n	800b602 <netif_add+0x3e>
 800b5f0:	4b51      	ldr	r3, [pc, #324]	@ (800b738 <netif_add+0x174>)
 800b5f2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b5f6:	4953      	ldr	r1, [pc, #332]	@ (800b744 <netif_add+0x180>)
 800b5f8:	4851      	ldr	r0, [pc, #324]	@ (800b740 <netif_add+0x17c>)
 800b5fa:	f00a fa49 	bl	8015a90 <iprintf>
 800b5fe:	2300      	movs	r3, #0
 800b600:	e096      	b.n	800b730 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b608:	4b4f      	ldr	r3, [pc, #316]	@ (800b748 <netif_add+0x184>)
 800b60a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b612:	4b4d      	ldr	r3, [pc, #308]	@ (800b748 <netif_add+0x184>)
 800b614:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b61c:	4b4a      	ldr	r3, [pc, #296]	@ (800b748 <netif_add+0x184>)
 800b61e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	4a45      	ldr	r2, [pc, #276]	@ (800b74c <netif_add+0x188>)
 800b636:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6a3a      	ldr	r2, [r7, #32]
 800b650:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b652:	4b3f      	ldr	r3, [pc, #252]	@ (800b750 <netif_add+0x18c>)
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b660:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	68b9      	ldr	r1, [r7, #8]
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f913 	bl	800b894 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	4798      	blx	r3
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <netif_add+0xba>
    return NULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	e058      	b.n	800b730 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b684:	2bff      	cmp	r3, #255	@ 0xff
 800b686:	d103      	bne.n	800b690 <netif_add+0xcc>
        netif->num = 0;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b694:	4b2f      	ldr	r3, [pc, #188]	@ (800b754 <netif_add+0x190>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	e02b      	b.n	800b6f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d106      	bne.n	800b6b2 <netif_add+0xee>
 800b6a4:	4b24      	ldr	r3, [pc, #144]	@ (800b738 <netif_add+0x174>)
 800b6a6:	f240 128b 	movw	r2, #395	@ 0x18b
 800b6aa:	492b      	ldr	r1, [pc, #172]	@ (800b758 <netif_add+0x194>)
 800b6ac:	4824      	ldr	r0, [pc, #144]	@ (800b740 <netif_add+0x17c>)
 800b6ae:	f00a f9ef 	bl	8015a90 <iprintf>
        num_netifs++;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2bff      	cmp	r3, #255	@ 0xff
 800b6bc:	dd06      	ble.n	800b6cc <netif_add+0x108>
 800b6be:	4b1e      	ldr	r3, [pc, #120]	@ (800b738 <netif_add+0x174>)
 800b6c0:	f240 128d 	movw	r2, #397	@ 0x18d
 800b6c4:	4925      	ldr	r1, [pc, #148]	@ (800b75c <netif_add+0x198>)
 800b6c6:	481e      	ldr	r0, [pc, #120]	@ (800b740 <netif_add+0x17c>)
 800b6c8:	f00a f9e2 	bl	8015a90 <iprintf>
        if (netif2->num == netif->num) {
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d108      	bne.n	800b6ee <netif_add+0x12a>
          netif->num++;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b6ec:	e005      	b.n	800b6fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1d0      	bne.n	800b69c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1be      	bne.n	800b67e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b706:	2bfe      	cmp	r3, #254	@ 0xfe
 800b708:	d103      	bne.n	800b712 <netif_add+0x14e>
    netif_num = 0;
 800b70a:	4b11      	ldr	r3, [pc, #68]	@ (800b750 <netif_add+0x18c>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	e006      	b.n	800b720 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b718:	3301      	adds	r3, #1
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	4b0c      	ldr	r3, [pc, #48]	@ (800b750 <netif_add+0x18c>)
 800b71e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b720:	4b0c      	ldr	r3, [pc, #48]	@ (800b754 <netif_add+0x190>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b728:	4a0a      	ldr	r2, [pc, #40]	@ (800b754 <netif_add+0x190>)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b72e:	68fb      	ldr	r3, [r7, #12]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	08016da4 	.word	0x08016da4
 800b73c:	08016e38 	.word	0x08016e38
 800b740:	08016df4 	.word	0x08016df4
 800b744:	08016e54 	.word	0x08016e54
 800b748:	08019bf8 	.word	0x08019bf8
 800b74c:	0800bb6f 	.word	0x0800bb6f
 800b750:	20008bfc 	.word	0x20008bfc
 800b754:	20008bf4 	.word	0x20008bf4
 800b758:	08016e78 	.word	0x08016e78
 800b75c:	08016e8c 	.word	0x08016e8c

0800b760 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f002 fb55 	bl	800de1c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f006 ff23 	bl	80125c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d106      	bne.n	800b7a4 <netif_do_set_ipaddr+0x20>
 800b796:	4b1d      	ldr	r3, [pc, #116]	@ (800b80c <netif_do_set_ipaddr+0x88>)
 800b798:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b79c:	491c      	ldr	r1, [pc, #112]	@ (800b810 <netif_do_set_ipaddr+0x8c>)
 800b79e:	481d      	ldr	r0, [pc, #116]	@ (800b814 <netif_do_set_ipaddr+0x90>)
 800b7a0:	f00a f976 	bl	8015a90 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <netif_do_set_ipaddr+0x34>
 800b7aa:	4b18      	ldr	r3, [pc, #96]	@ (800b80c <netif_do_set_ipaddr+0x88>)
 800b7ac:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b7b0:	4917      	ldr	r1, [pc, #92]	@ (800b810 <netif_do_set_ipaddr+0x8c>)
 800b7b2:	4818      	ldr	r0, [pc, #96]	@ (800b814 <netif_do_set_ipaddr+0x90>)
 800b7b4:	f00a f96c 	bl	8015a90 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d01c      	beq.n	800b800 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b7d6:	f107 0314 	add.w	r3, r7, #20
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ffbf 	bl	800b760 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <netif_do_set_ipaddr+0x6a>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	e000      	b.n	800b7f0 <netif_do_set_ipaddr+0x6c>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f000 f8d2 	bl	800b9a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e000      	b.n	800b802 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	08016da4 	.word	0x08016da4
 800b810:	08016ebc 	.word	0x08016ebc
 800b814:	08016df4 	.word	0x08016df4

0800b818 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3308      	adds	r3, #8
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d00a      	beq.n	800b848 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <netif_do_set_netmask+0x26>
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	e000      	b.n	800b840 <netif_do_set_netmask+0x28>
 800b83e:	2300      	movs	r3, #0
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b844:	2301      	movs	r3, #1
 800b846:	e000      	b.n	800b84a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b856:	b480      	push	{r7}
 800b858:	b085      	sub	sp, #20
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	330c      	adds	r3, #12
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d00a      	beq.n	800b886 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <netif_do_set_gw+0x26>
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	e000      	b.n	800b87e <netif_do_set_gw+0x28>
 800b87c:	2300      	movs	r3, #0
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b882:	2301      	movs	r3, #1
 800b884:	e000      	b.n	800b888 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b088      	sub	sp, #32
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b8b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b924 <netif_set_addr+0x90>)
 800b8b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b8ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b924 <netif_set_addr+0x90>)
 800b8bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b8c4:	4b17      	ldr	r3, [pc, #92]	@ (800b924 <netif_set_addr+0x90>)
 800b8c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <netif_set_addr+0x42>
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <netif_set_addr+0x46>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e000      	b.n	800b8dc <netif_set_addr+0x48>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d006      	beq.n	800b8f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b8e4:	f107 0310 	add.w	r3, r7, #16
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f7ff ff49 	bl	800b784 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	6879      	ldr	r1, [r7, #4]
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff ff8e 	bl	800b818 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b8fc:	69ba      	ldr	r2, [r7, #24]
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f7ff ffa8 	bl	800b856 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b90c:	f107 0310 	add.w	r3, r7, #16
 800b910:	461a      	mov	r2, r3
 800b912:	68b9      	ldr	r1, [r7, #8]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f7ff ff35 	bl	800b784 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b91a:	bf00      	nop
 800b91c:	3720      	adds	r7, #32
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	08019bf8 	.word	0x08019bf8

0800b928 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b930:	4a04      	ldr	r2, [pc, #16]	@ (800b944 <netif_set_default+0x1c>)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b936:	bf00      	nop
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20008bf8 	.word	0x20008bf8

0800b948 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d107      	bne.n	800b966 <netif_set_up+0x1e>
 800b956:	4b0f      	ldr	r3, [pc, #60]	@ (800b994 <netif_set_up+0x4c>)
 800b958:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b95c:	490e      	ldr	r1, [pc, #56]	@ (800b998 <netif_set_up+0x50>)
 800b95e:	480f      	ldr	r0, [pc, #60]	@ (800b99c <netif_set_up+0x54>)
 800b960:	f00a f896 	bl	8015a90 <iprintf>
 800b964:	e013      	b.n	800b98e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10c      	bne.n	800b98e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b97a:	f043 0301 	orr.w	r3, r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b986:	2103      	movs	r1, #3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f809 	bl	800b9a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	08016da4 	.word	0x08016da4
 800b998:	08016f2c 	.word	0x08016f2c
 800b99c:	08016df4 	.word	0x08016df4

0800b9a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <netif_issue_reports+0x20>
 800b9b2:	4b18      	ldr	r3, [pc, #96]	@ (800ba14 <netif_issue_reports+0x74>)
 800b9b4:	f240 326d 	movw	r2, #877	@ 0x36d
 800b9b8:	4917      	ldr	r1, [pc, #92]	@ (800ba18 <netif_issue_reports+0x78>)
 800b9ba:	4818      	ldr	r0, [pc, #96]	@ (800ba1c <netif_issue_reports+0x7c>)
 800b9bc:	f00a f868 	bl	8015a90 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b9c6:	f003 0304 	and.w	r3, r3, #4
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d01e      	beq.n	800ba0c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b9d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d017      	beq.n	800ba0c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d013      	beq.n	800ba0e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00e      	beq.n	800ba0e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b9f6:	f003 0308 	and.w	r3, r3, #8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d007      	beq.n	800ba0e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3304      	adds	r3, #4
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f007 fd45 	bl	8013494 <etharp_request>
 800ba0a:	e000      	b.n	800ba0e <netif_issue_reports+0x6e>
    return;
 800ba0c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	08016da4 	.word	0x08016da4
 800ba18:	08016f48 	.word	0x08016f48
 800ba1c:	08016df4 	.word	0x08016df4

0800ba20 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d107      	bne.n	800ba3e <netif_set_down+0x1e>
 800ba2e:	4b12      	ldr	r3, [pc, #72]	@ (800ba78 <netif_set_down+0x58>)
 800ba30:	f240 329b 	movw	r2, #923	@ 0x39b
 800ba34:	4911      	ldr	r1, [pc, #68]	@ (800ba7c <netif_set_down+0x5c>)
 800ba36:	4812      	ldr	r0, [pc, #72]	@ (800ba80 <netif_set_down+0x60>)
 800ba38:	f00a f82a 	bl	8015a90 <iprintf>
 800ba3c:	e019      	b.n	800ba72 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d012      	beq.n	800ba72 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba52:	f023 0301 	bic.w	r3, r3, #1
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba64:	f003 0308 	and.w	r3, r3, #8
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f007 f8cf 	bl	8012c10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	08016da4 	.word	0x08016da4
 800ba7c:	08016f6c 	.word	0x08016f6c
 800ba80:	08016df4 	.word	0x08016df4

0800ba84 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d107      	bne.n	800baa2 <netif_set_link_up+0x1e>
 800ba92:	4b13      	ldr	r3, [pc, #76]	@ (800bae0 <netif_set_link_up+0x5c>)
 800ba94:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ba98:	4912      	ldr	r1, [pc, #72]	@ (800bae4 <netif_set_link_up+0x60>)
 800ba9a:	4813      	ldr	r0, [pc, #76]	@ (800bae8 <netif_set_link_up+0x64>)
 800ba9c:	f009 fff8 	bl	8015a90 <iprintf>
 800baa0:	e01b      	b.n	800bada <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800baa8:	f003 0304 	and.w	r3, r3, #4
 800baac:	2b00      	cmp	r3, #0
 800baae:	d114      	bne.n	800bada <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bab6:	f043 0304 	orr.w	r3, r3, #4
 800baba:	b2da      	uxtb	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bac2:	2103      	movs	r1, #3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff ff6b 	bl	800b9a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <netif_set_link_up+0x56>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	08016da4 	.word	0x08016da4
 800bae4:	08016f8c 	.word	0x08016f8c
 800bae8:	08016df4 	.word	0x08016df4

0800baec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d107      	bne.n	800bb0a <netif_set_link_down+0x1e>
 800bafa:	4b11      	ldr	r3, [pc, #68]	@ (800bb40 <netif_set_link_down+0x54>)
 800bafc:	f240 4206 	movw	r2, #1030	@ 0x406
 800bb00:	4910      	ldr	r1, [pc, #64]	@ (800bb44 <netif_set_link_down+0x58>)
 800bb02:	4811      	ldr	r0, [pc, #68]	@ (800bb48 <netif_set_link_down+0x5c>)
 800bb04:	f009 ffc4 	bl	8015a90 <iprintf>
 800bb08:	e017      	b.n	800bb3a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb10:	f003 0304 	and.w	r3, r3, #4
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d010      	beq.n	800bb3a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb1e:	f023 0304 	bic.w	r3, r3, #4
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <netif_set_link_down+0x4e>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	08016da4 	.word	0x08016da4
 800bb44:	08016fb0 	.word	0x08016fb0
 800bb48:	08016df4 	.word	0x08016df4

0800bb4c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	61da      	str	r2, [r3, #28]
  }
}
 800bb62:	bf00      	nop
 800bb64:	370c      	adds	r7, #12
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b085      	sub	sp, #20
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	60f8      	str	r0, [r7, #12]
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bb7a:	f06f 030b 	mvn.w	r3, #11
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
	...

0800bb8c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bb96:	79fb      	ldrb	r3, [r7, #7]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d013      	beq.n	800bbc4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd4 <netif_get_by_index+0x48>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	e00c      	b.n	800bbbe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bbaa:	3301      	adds	r3, #1
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	79fa      	ldrb	r2, [r7, #7]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d101      	bne.n	800bbb8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	e006      	b.n	800bbc6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1ef      	bne.n	800bba4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	20008bf4 	.word	0x20008bf4

0800bbd8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bbde:	4b0c      	ldr	r3, [pc, #48]	@ (800bc10 <pbuf_free_ooseq+0x38>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bbe4:	4b0b      	ldr	r3, [pc, #44]	@ (800bc14 <pbuf_free_ooseq+0x3c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	e00a      	b.n	800bc02 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f002 f94f 	bl	800de98 <tcp_free_ooseq>
      return;
 800bbfa:	e005      	b.n	800bc08 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	607b      	str	r3, [r7, #4]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1f1      	bne.n	800bbec <pbuf_free_ooseq+0x14>
    }
  }
}
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20008bfd 	.word	0x20008bfd
 800bc14:	20008c0c 	.word	0x20008c0c

0800bc18 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bc1c:	4b03      	ldr	r3, [pc, #12]	@ (800bc2c <pbuf_pool_is_empty+0x14>)
 800bc1e:	2201      	movs	r2, #1
 800bc20:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bc22:	bf00      	nop
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	20008bfd 	.word	0x20008bfd

0800bc30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	460b      	mov	r3, r1
 800bc40:	80fb      	strh	r3, [r7, #6]
 800bc42:	4613      	mov	r3, r2
 800bc44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	88ba      	ldrh	r2, [r7, #4]
 800bc5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc5e:	8b3b      	ldrh	r3, [r7, #24]
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	7f3a      	ldrb	r2, [r7, #28]
 800bc6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	73da      	strb	r2, [r3, #15]
}
 800bc78:	bf00      	nop
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b08c      	sub	sp, #48	@ 0x30
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	71fb      	strb	r3, [r7, #7]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	80bb      	strh	r3, [r7, #4]
 800bc92:	4613      	mov	r3, r2
 800bc94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc96:	79fb      	ldrb	r3, [r7, #7]
 800bc98:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc9a:	887b      	ldrh	r3, [r7, #2]
 800bc9c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bca0:	d07f      	beq.n	800bda2 <pbuf_alloc+0x11e>
 800bca2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800bca6:	f300 80c8 	bgt.w	800be3a <pbuf_alloc+0x1b6>
 800bcaa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bcae:	d010      	beq.n	800bcd2 <pbuf_alloc+0x4e>
 800bcb0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800bcb4:	f300 80c1 	bgt.w	800be3a <pbuf_alloc+0x1b6>
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d002      	beq.n	800bcc2 <pbuf_alloc+0x3e>
 800bcbc:	2b41      	cmp	r3, #65	@ 0x41
 800bcbe:	f040 80bc 	bne.w	800be3a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bcc2:	887a      	ldrh	r2, [r7, #2]
 800bcc4:	88bb      	ldrh	r3, [r7, #4]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	2000      	movs	r0, #0
 800bcca:	f000 f8d1 	bl	800be70 <pbuf_alloc_reference>
 800bcce:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800bcd0:	e0bd      	b.n	800be4e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bcda:	88bb      	ldrh	r3, [r7, #4]
 800bcdc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bcde:	2008      	movs	r0, #8
 800bce0:	f7ff fbce 	bl	800b480 <memp_malloc>
 800bce4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d109      	bne.n	800bd00 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bcec:	f7ff ff94 	bl	800bc18 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <pbuf_alloc+0x78>
            pbuf_free(p);
 800bcf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcf8:	f000 faa8 	bl	800c24c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e0a7      	b.n	800be50 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bd00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bd02:	3303      	adds	r3, #3
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	f023 0303 	bic.w	r3, r3, #3
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	8b7a      	ldrh	r2, [r7, #26]
 800bd14:	4293      	cmp	r3, r2
 800bd16:	bf28      	it	cs
 800bd18:	4613      	movcs	r3, r2
 800bd1a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bd1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bd1e:	3310      	adds	r3, #16
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	4413      	add	r3, r2
 800bd24:	3303      	adds	r3, #3
 800bd26:	f023 0303 	bic.w	r3, r3, #3
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	89f9      	ldrh	r1, [r7, #14]
 800bd2e:	8b7a      	ldrh	r2, [r7, #26]
 800bd30:	2300      	movs	r3, #0
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	887b      	ldrh	r3, [r7, #2]
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	6938      	ldr	r0, [r7, #16]
 800bd3e:	f7ff ff77 	bl	800bc30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f003 0303 	and.w	r3, r3, #3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d006      	beq.n	800bd5c <pbuf_alloc+0xd8>
 800bd4e:	4b42      	ldr	r3, [pc, #264]	@ (800be58 <pbuf_alloc+0x1d4>)
 800bd50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bd54:	4941      	ldr	r1, [pc, #260]	@ (800be5c <pbuf_alloc+0x1d8>)
 800bd56:	4842      	ldr	r0, [pc, #264]	@ (800be60 <pbuf_alloc+0x1dc>)
 800bd58:	f009 fe9a 	bl	8015a90 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bd5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bd5e:	3303      	adds	r3, #3
 800bd60:	f023 0303 	bic.w	r3, r3, #3
 800bd64:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800bd68:	d106      	bne.n	800bd78 <pbuf_alloc+0xf4>
 800bd6a:	4b3b      	ldr	r3, [pc, #236]	@ (800be58 <pbuf_alloc+0x1d4>)
 800bd6c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800bd70:	493c      	ldr	r1, [pc, #240]	@ (800be64 <pbuf_alloc+0x1e0>)
 800bd72:	483b      	ldr	r0, [pc, #236]	@ (800be60 <pbuf_alloc+0x1dc>)
 800bd74:	f009 fe8c 	bl	8015a90 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d102      	bne.n	800bd84 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd82:	e002      	b.n	800bd8a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd8e:	8b7a      	ldrh	r2, [r7, #26]
 800bd90:	89fb      	ldrh	r3, [r7, #14]
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800bd9a:	8b7b      	ldrh	r3, [r7, #26]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d19e      	bne.n	800bcde <pbuf_alloc+0x5a>
      break;
 800bda0:	e055      	b.n	800be4e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bda2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bda4:	3303      	adds	r3, #3
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	f023 0303 	bic.w	r3, r3, #3
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	88bb      	ldrh	r3, [r7, #4]
 800bdb0:	3303      	adds	r3, #3
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	f023 0303 	bic.w	r3, r3, #3
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	4413      	add	r3, r2
 800bdbc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bdbe:	8b3b      	ldrh	r3, [r7, #24]
 800bdc0:	3310      	adds	r3, #16
 800bdc2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdc4:	8b3a      	ldrh	r2, [r7, #24]
 800bdc6:	88bb      	ldrh	r3, [r7, #4]
 800bdc8:	3303      	adds	r3, #3
 800bdca:	f023 0303 	bic.w	r3, r3, #3
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d306      	bcc.n	800bde0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bdd2:	8afa      	ldrh	r2, [r7, #22]
 800bdd4:	88bb      	ldrh	r3, [r7, #4]
 800bdd6:	3303      	adds	r3, #3
 800bdd8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d201      	bcs.n	800bde4 <pbuf_alloc+0x160>
        return NULL;
 800bde0:	2300      	movs	r3, #0
 800bde2:	e035      	b.n	800be50 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bde4:	8afb      	ldrh	r3, [r7, #22]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff f9ba 	bl	800b160 <mem_malloc>
 800bdec:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d101      	bne.n	800bdf8 <pbuf_alloc+0x174>
        return NULL;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	e02b      	b.n	800be50 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bdf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bdfa:	3310      	adds	r3, #16
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdfe:	4413      	add	r3, r2
 800be00:	3303      	adds	r3, #3
 800be02:	f023 0303 	bic.w	r3, r3, #3
 800be06:	4618      	mov	r0, r3
 800be08:	88b9      	ldrh	r1, [r7, #4]
 800be0a:	88ba      	ldrh	r2, [r7, #4]
 800be0c:	2300      	movs	r3, #0
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	887b      	ldrh	r3, [r7, #2]
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	460b      	mov	r3, r1
 800be16:	4601      	mov	r1, r0
 800be18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be1a:	f7ff ff09 	bl	800bc30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800be1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d010      	beq.n	800be4c <pbuf_alloc+0x1c8>
 800be2a:	4b0b      	ldr	r3, [pc, #44]	@ (800be58 <pbuf_alloc+0x1d4>)
 800be2c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800be30:	490d      	ldr	r1, [pc, #52]	@ (800be68 <pbuf_alloc+0x1e4>)
 800be32:	480b      	ldr	r0, [pc, #44]	@ (800be60 <pbuf_alloc+0x1dc>)
 800be34:	f009 fe2c 	bl	8015a90 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800be38:	e008      	b.n	800be4c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800be3a:	4b07      	ldr	r3, [pc, #28]	@ (800be58 <pbuf_alloc+0x1d4>)
 800be3c:	f240 1227 	movw	r2, #295	@ 0x127
 800be40:	490a      	ldr	r1, [pc, #40]	@ (800be6c <pbuf_alloc+0x1e8>)
 800be42:	4807      	ldr	r0, [pc, #28]	@ (800be60 <pbuf_alloc+0x1dc>)
 800be44:	f009 fe24 	bl	8015a90 <iprintf>
      return NULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	e001      	b.n	800be50 <pbuf_alloc+0x1cc>
      break;
 800be4c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be50:	4618      	mov	r0, r3
 800be52:	3728      	adds	r7, #40	@ 0x28
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	08016fd4 	.word	0x08016fd4
 800be5c:	08017004 	.word	0x08017004
 800be60:	08017034 	.word	0x08017034
 800be64:	0801705c 	.word	0x0801705c
 800be68:	08017090 	.word	0x08017090
 800be6c:	080170bc 	.word	0x080170bc

0800be70 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af02      	add	r7, sp, #8
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	807b      	strh	r3, [r7, #2]
 800be7c:	4613      	mov	r3, r2
 800be7e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be80:	883b      	ldrh	r3, [r7, #0]
 800be82:	2b41      	cmp	r3, #65	@ 0x41
 800be84:	d009      	beq.n	800be9a <pbuf_alloc_reference+0x2a>
 800be86:	883b      	ldrh	r3, [r7, #0]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d006      	beq.n	800be9a <pbuf_alloc_reference+0x2a>
 800be8c:	4b0f      	ldr	r3, [pc, #60]	@ (800becc <pbuf_alloc_reference+0x5c>)
 800be8e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800be92:	490f      	ldr	r1, [pc, #60]	@ (800bed0 <pbuf_alloc_reference+0x60>)
 800be94:	480f      	ldr	r0, [pc, #60]	@ (800bed4 <pbuf_alloc_reference+0x64>)
 800be96:	f009 fdfb 	bl	8015a90 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be9a:	2007      	movs	r0, #7
 800be9c:	f7ff faf0 	bl	800b480 <memp_malloc>
 800bea0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	e00b      	b.n	800bec4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800beac:	8879      	ldrh	r1, [r7, #2]
 800beae:	887a      	ldrh	r2, [r7, #2]
 800beb0:	2300      	movs	r3, #0
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	883b      	ldrh	r3, [r7, #0]
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	460b      	mov	r3, r1
 800beba:	6879      	ldr	r1, [r7, #4]
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7ff feb7 	bl	800bc30 <pbuf_init_alloced_pbuf>
  return p;
 800bec2:	68fb      	ldr	r3, [r7, #12]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	08016fd4 	.word	0x08016fd4
 800bed0:	080170d8 	.word	0x080170d8
 800bed4:	08017034 	.word	0x08017034

0800bed8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af02      	add	r7, sp, #8
 800bede:	607b      	str	r3, [r7, #4]
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]
 800bee4:	460b      	mov	r3, r1
 800bee6:	81bb      	strh	r3, [r7, #12]
 800bee8:	4613      	mov	r3, r2
 800beea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bef0:	8a7b      	ldrh	r3, [r7, #18]
 800bef2:	3303      	adds	r3, #3
 800bef4:	f023 0203 	bic.w	r2, r3, #3
 800bef8:	89bb      	ldrh	r3, [r7, #12]
 800befa:	441a      	add	r2, r3
 800befc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800befe:	429a      	cmp	r2, r3
 800bf00:	d901      	bls.n	800bf06 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bf02:	2300      	movs	r3, #0
 800bf04:	e018      	b.n	800bf38 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bf0c:	8a7b      	ldrh	r3, [r7, #18]
 800bf0e:	3303      	adds	r3, #3
 800bf10:	f023 0303 	bic.w	r3, r3, #3
 800bf14:	6a3a      	ldr	r2, [r7, #32]
 800bf16:	4413      	add	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]
 800bf1a:	e001      	b.n	800bf20 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	89b9      	ldrh	r1, [r7, #12]
 800bf24:	89ba      	ldrh	r2, [r7, #12]
 800bf26:	2302      	movs	r3, #2
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	897b      	ldrh	r3, [r7, #10]
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	460b      	mov	r3, r1
 800bf30:	6979      	ldr	r1, [r7, #20]
 800bf32:	f7ff fe7d 	bl	800bc30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bf36:	687b      	ldr	r3, [r7, #4]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <pbuf_realloc+0x20>
 800bf52:	4b3a      	ldr	r3, [pc, #232]	@ (800c03c <pbuf_realloc+0xfc>)
 800bf54:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800bf58:	4939      	ldr	r1, [pc, #228]	@ (800c040 <pbuf_realloc+0x100>)
 800bf5a:	483a      	ldr	r0, [pc, #232]	@ (800c044 <pbuf_realloc+0x104>)
 800bf5c:	f009 fd98 	bl	8015a90 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	891b      	ldrh	r3, [r3, #8]
 800bf64:	887a      	ldrh	r2, [r7, #2]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d263      	bcs.n	800c032 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	891a      	ldrh	r2, [r3, #8]
 800bf6e:	887b      	ldrh	r3, [r7, #2]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf74:	887b      	ldrh	r3, [r7, #2]
 800bf76:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf7c:	e018      	b.n	800bfb0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	895b      	ldrh	r3, [r3, #10]
 800bf82:	897a      	ldrh	r2, [r7, #10]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	891a      	ldrh	r2, [r3, #8]
 800bf8c:	893b      	ldrh	r3, [r7, #8]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d106      	bne.n	800bfb0 <pbuf_realloc+0x70>
 800bfa2:	4b26      	ldr	r3, [pc, #152]	@ (800c03c <pbuf_realloc+0xfc>)
 800bfa4:	f240 12af 	movw	r2, #431	@ 0x1af
 800bfa8:	4927      	ldr	r1, [pc, #156]	@ (800c048 <pbuf_realloc+0x108>)
 800bfaa:	4826      	ldr	r0, [pc, #152]	@ (800c044 <pbuf_realloc+0x104>)
 800bfac:	f009 fd70 	bl	8015a90 <iprintf>
  while (rem_len > q->len) {
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	895b      	ldrh	r3, [r3, #10]
 800bfb4:	897a      	ldrh	r2, [r7, #10]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d8e1      	bhi.n	800bf7e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	7b1b      	ldrb	r3, [r3, #12]
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d121      	bne.n	800c00a <pbuf_realloc+0xca>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	895b      	ldrh	r3, [r3, #10]
 800bfca:	897a      	ldrh	r2, [r7, #10]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d01c      	beq.n	800c00a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	7b5b      	ldrb	r3, [r3, #13]
 800bfd4:	f003 0302 	and.w	r3, r3, #2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d116      	bne.n	800c00a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	897b      	ldrh	r3, [r7, #10]
 800bfe8:	4413      	add	r3, r2
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4619      	mov	r1, r3
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f7fe ffba 	bl	800af68 <mem_trim>
 800bff4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d106      	bne.n	800c00a <pbuf_realloc+0xca>
 800bffc:	4b0f      	ldr	r3, [pc, #60]	@ (800c03c <pbuf_realloc+0xfc>)
 800bffe:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c002:	4912      	ldr	r1, [pc, #72]	@ (800c04c <pbuf_realloc+0x10c>)
 800c004:	480f      	ldr	r0, [pc, #60]	@ (800c044 <pbuf_realloc+0x104>)
 800c006:	f009 fd43 	bl	8015a90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	897a      	ldrh	r2, [r7, #10]
 800c00e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	895a      	ldrh	r2, [r3, #10]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d004      	beq.n	800c02a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f000 f911 	bl	800c24c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	e000      	b.n	800c034 <pbuf_realloc+0xf4>
    return;
 800c032:	bf00      	nop

}
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	08016fd4 	.word	0x08016fd4
 800c040:	080170ec 	.word	0x080170ec
 800c044:	08017034 	.word	0x08017034
 800c048:	08017104 	.word	0x08017104
 800c04c:	0801711c 	.word	0x0801711c

0800c050 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	4613      	mov	r3, r2
 800c05c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d106      	bne.n	800c072 <pbuf_add_header_impl+0x22>
 800c064:	4b2b      	ldr	r3, [pc, #172]	@ (800c114 <pbuf_add_header_impl+0xc4>)
 800c066:	f240 12df 	movw	r2, #479	@ 0x1df
 800c06a:	492b      	ldr	r1, [pc, #172]	@ (800c118 <pbuf_add_header_impl+0xc8>)
 800c06c:	482b      	ldr	r0, [pc, #172]	@ (800c11c <pbuf_add_header_impl+0xcc>)
 800c06e:	f009 fd0f 	bl	8015a90 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d003      	beq.n	800c080 <pbuf_add_header_impl+0x30>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c07e:	d301      	bcc.n	800c084 <pbuf_add_header_impl+0x34>
    return 1;
 800c080:	2301      	movs	r3, #1
 800c082:	e043      	b.n	800c10c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <pbuf_add_header_impl+0x3e>
    return 0;
 800c08a:	2300      	movs	r3, #0
 800c08c:	e03e      	b.n	800c10c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	891a      	ldrh	r2, [r3, #8]
 800c096:	8a7b      	ldrh	r3, [r7, #18]
 800c098:	4413      	add	r3, r2
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	8a7a      	ldrh	r2, [r7, #18]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d901      	bls.n	800c0a6 <pbuf_add_header_impl+0x56>
    return 1;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e032      	b.n	800c10c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	7b1b      	ldrb	r3, [r3, #12]
 800c0aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0ac:	8a3b      	ldrh	r3, [r7, #16]
 800c0ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00c      	beq.n	800c0d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	425b      	negs	r3, r3
 800c0be:	4413      	add	r3, r2
 800c0c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3310      	adds	r3, #16
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d20d      	bcs.n	800c0e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e01d      	b.n	800c10c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d006      	beq.n	800c0e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	425b      	negs	r3, r3
 800c0de:	4413      	add	r3, r2
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e001      	b.n	800c0e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e011      	b.n	800c10c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	895a      	ldrh	r2, [r3, #10]
 800c0f2:	8a7b      	ldrh	r3, [r7, #18]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	891a      	ldrh	r2, [r3, #8]
 800c100:	8a7b      	ldrh	r3, [r7, #18]
 800c102:	4413      	add	r3, r2
 800c104:	b29a      	uxth	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	811a      	strh	r2, [r3, #8]


  return 0;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	08016fd4 	.word	0x08016fd4
 800c118:	08017138 	.word	0x08017138
 800c11c:	08017034 	.word	0x08017034

0800c120 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c12a:	2200      	movs	r2, #0
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff ff8e 	bl	800c050 <pbuf_add_header_impl>
 800c134:	4603      	mov	r3, r0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
	...

0800c140 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d106      	bne.n	800c15e <pbuf_remove_header+0x1e>
 800c150:	4b20      	ldr	r3, [pc, #128]	@ (800c1d4 <pbuf_remove_header+0x94>)
 800c152:	f240 224b 	movw	r2, #587	@ 0x24b
 800c156:	4920      	ldr	r1, [pc, #128]	@ (800c1d8 <pbuf_remove_header+0x98>)
 800c158:	4820      	ldr	r0, [pc, #128]	@ (800c1dc <pbuf_remove_header+0x9c>)
 800c15a:	f009 fc99 	bl	8015a90 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d003      	beq.n	800c16c <pbuf_remove_header+0x2c>
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c16a:	d301      	bcc.n	800c170 <pbuf_remove_header+0x30>
    return 1;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e02c      	b.n	800c1ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <pbuf_remove_header+0x3a>
    return 0;
 800c176:	2300      	movs	r3, #0
 800c178:	e027      	b.n	800c1ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	895b      	ldrh	r3, [r3, #10]
 800c182:	89fa      	ldrh	r2, [r7, #14]
 800c184:	429a      	cmp	r2, r3
 800c186:	d908      	bls.n	800c19a <pbuf_remove_header+0x5a>
 800c188:	4b12      	ldr	r3, [pc, #72]	@ (800c1d4 <pbuf_remove_header+0x94>)
 800c18a:	f240 2255 	movw	r2, #597	@ 0x255
 800c18e:	4914      	ldr	r1, [pc, #80]	@ (800c1e0 <pbuf_remove_header+0xa0>)
 800c190:	4812      	ldr	r0, [pc, #72]	@ (800c1dc <pbuf_remove_header+0x9c>)
 800c192:	f009 fc7d 	bl	8015a90 <iprintf>
 800c196:	2301      	movs	r3, #1
 800c198:	e017      	b.n	800c1ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	441a      	add	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	895a      	ldrh	r2, [r3, #10]
 800c1b0:	89fb      	ldrh	r3, [r7, #14]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	891a      	ldrh	r2, [r3, #8]
 800c1be:	89fb      	ldrh	r3, [r7, #14]
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	08016fd4 	.word	0x08016fd4
 800c1d8:	08017138 	.word	0x08017138
 800c1dc:	08017034 	.word	0x08017034
 800c1e0:	08017144 	.word	0x08017144

0800c1e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	807b      	strh	r3, [r7, #2]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c1f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	da08      	bge.n	800c20e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c1fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c200:	425b      	negs	r3, r3
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7ff ff9b 	bl	800c140 <pbuf_remove_header>
 800c20a:	4603      	mov	r3, r0
 800c20c:	e007      	b.n	800c21e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c20e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c212:	787a      	ldrb	r2, [r7, #1]
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff ff1a 	bl	800c050 <pbuf_add_header_impl>
 800c21c:	4603      	mov	r3, r0
  }
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	460b      	mov	r3, r1
 800c230:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c232:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c236:	2201      	movs	r2, #1
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff ffd2 	bl	800c1e4 <pbuf_header_impl>
 800c240:	4603      	mov	r3, r0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d10b      	bne.n	800c272 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d106      	bne.n	800c26e <pbuf_free+0x22>
 800c260:	4b38      	ldr	r3, [pc, #224]	@ (800c344 <pbuf_free+0xf8>)
 800c262:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c266:	4938      	ldr	r1, [pc, #224]	@ (800c348 <pbuf_free+0xfc>)
 800c268:	4838      	ldr	r0, [pc, #224]	@ (800c34c <pbuf_free+0x100>)
 800c26a:	f009 fc11 	bl	8015a90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	e063      	b.n	800c33a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c276:	e05c      	b.n	800c332 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	7b9b      	ldrb	r3, [r3, #14]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d106      	bne.n	800c28e <pbuf_free+0x42>
 800c280:	4b30      	ldr	r3, [pc, #192]	@ (800c344 <pbuf_free+0xf8>)
 800c282:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c286:	4932      	ldr	r1, [pc, #200]	@ (800c350 <pbuf_free+0x104>)
 800c288:	4830      	ldr	r0, [pc, #192]	@ (800c34c <pbuf_free+0x100>)
 800c28a:	f009 fc01 	bl	8015a90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	7b9b      	ldrb	r3, [r3, #14]
 800c292:	3b01      	subs	r3, #1
 800c294:	b2da      	uxtb	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	739a      	strb	r2, [r3, #14]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	7b9b      	ldrb	r3, [r3, #14]
 800c29e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c2a0:	7dbb      	ldrb	r3, [r7, #22]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d143      	bne.n	800c32e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7b1b      	ldrb	r3, [r3, #12]
 800c2b0:	f003 030f 	and.w	r3, r3, #15
 800c2b4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	7b5b      	ldrb	r3, [r3, #13]
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d011      	beq.n	800c2e6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d106      	bne.n	800c2dc <pbuf_free+0x90>
 800c2ce:	4b1d      	ldr	r3, [pc, #116]	@ (800c344 <pbuf_free+0xf8>)
 800c2d0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c2d4:	491f      	ldr	r1, [pc, #124]	@ (800c354 <pbuf_free+0x108>)
 800c2d6:	481d      	ldr	r0, [pc, #116]	@ (800c34c <pbuf_free+0x100>)
 800c2d8:	f009 fbda 	bl	8015a90 <iprintf>
        pc->custom_free_function(p);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	4798      	blx	r3
 800c2e4:	e01d      	b.n	800c322 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d104      	bne.n	800c2f6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	2008      	movs	r0, #8
 800c2f0:	f7ff f936 	bl	800b560 <memp_free>
 800c2f4:	e015      	b.n	800c322 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d104      	bne.n	800c306 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c2fc:	6879      	ldr	r1, [r7, #4]
 800c2fe:	2007      	movs	r0, #7
 800c300:	f7ff f92e 	bl	800b560 <memp_free>
 800c304:	e00d      	b.n	800c322 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c306:	7bfb      	ldrb	r3, [r7, #15]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d103      	bne.n	800c314 <pbuf_free+0xc8>
          mem_free(p);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7fe fdc1 	bl	800ae94 <mem_free>
 800c312:	e006      	b.n	800c322 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c314:	4b0b      	ldr	r3, [pc, #44]	@ (800c344 <pbuf_free+0xf8>)
 800c316:	f240 320f 	movw	r2, #783	@ 0x30f
 800c31a:	490f      	ldr	r1, [pc, #60]	@ (800c358 <pbuf_free+0x10c>)
 800c31c:	480b      	ldr	r0, [pc, #44]	@ (800c34c <pbuf_free+0x100>)
 800c31e:	f009 fbb7 	bl	8015a90 <iprintf>
        }
      }
      count++;
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	3301      	adds	r3, #1
 800c326:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	607b      	str	r3, [r7, #4]
 800c32c:	e001      	b.n	800c332 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c32e:	2300      	movs	r3, #0
 800c330:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d19f      	bne.n	800c278 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c338:	7dfb      	ldrb	r3, [r7, #23]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3718      	adds	r7, #24
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	08016fd4 	.word	0x08016fd4
 800c348:	08017138 	.word	0x08017138
 800c34c:	08017034 	.word	0x08017034
 800c350:	08017164 	.word	0x08017164
 800c354:	0801717c 	.word	0x0801717c
 800c358:	080171a0 	.word	0x080171a0

0800c35c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c368:	e005      	b.n	800c376 <pbuf_clen+0x1a>
    ++len;
 800c36a:	89fb      	ldrh	r3, [r7, #14]
 800c36c:	3301      	adds	r3, #1
 800c36e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f6      	bne.n	800c36a <pbuf_clen+0xe>
  }
  return len;
 800c37c:	89fb      	ldrh	r3, [r7, #14]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
	...

0800c38c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d010      	beq.n	800c3bc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	7b9b      	ldrb	r3, [r3, #14]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	7b9b      	ldrb	r3, [r3, #14]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <pbuf_ref+0x30>
 800c3ae:	4b05      	ldr	r3, [pc, #20]	@ (800c3c4 <pbuf_ref+0x38>)
 800c3b0:	f240 3242 	movw	r2, #834	@ 0x342
 800c3b4:	4904      	ldr	r1, [pc, #16]	@ (800c3c8 <pbuf_ref+0x3c>)
 800c3b6:	4805      	ldr	r0, [pc, #20]	@ (800c3cc <pbuf_ref+0x40>)
 800c3b8:	f009 fb6a 	bl	8015a90 <iprintf>
  }
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	08016fd4 	.word	0x08016fd4
 800c3c8:	080171b4 	.word	0x080171b4
 800c3cc:	08017034 	.word	0x08017034

0800c3d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <pbuf_cat+0x16>
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d107      	bne.n	800c3f6 <pbuf_cat+0x26>
 800c3e6:	4b20      	ldr	r3, [pc, #128]	@ (800c468 <pbuf_cat+0x98>)
 800c3e8:	f240 3259 	movw	r2, #857	@ 0x359
 800c3ec:	491f      	ldr	r1, [pc, #124]	@ (800c46c <pbuf_cat+0x9c>)
 800c3ee:	4820      	ldr	r0, [pc, #128]	@ (800c470 <pbuf_cat+0xa0>)
 800c3f0:	f009 fb4e 	bl	8015a90 <iprintf>
 800c3f4:	e034      	b.n	800c460 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	e00a      	b.n	800c412 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	891a      	ldrh	r2, [r3, #8]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	891b      	ldrh	r3, [r3, #8]
 800c404:	4413      	add	r3, r2
 800c406:	b29a      	uxth	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	60fb      	str	r3, [r7, #12]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1f0      	bne.n	800c3fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	891a      	ldrh	r2, [r3, #8]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	895b      	ldrh	r3, [r3, #10]
 800c422:	429a      	cmp	r2, r3
 800c424:	d006      	beq.n	800c434 <pbuf_cat+0x64>
 800c426:	4b10      	ldr	r3, [pc, #64]	@ (800c468 <pbuf_cat+0x98>)
 800c428:	f240 3262 	movw	r2, #866	@ 0x362
 800c42c:	4911      	ldr	r1, [pc, #68]	@ (800c474 <pbuf_cat+0xa4>)
 800c42e:	4810      	ldr	r0, [pc, #64]	@ (800c470 <pbuf_cat+0xa0>)
 800c430:	f009 fb2e 	bl	8015a90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d006      	beq.n	800c44a <pbuf_cat+0x7a>
 800c43c:	4b0a      	ldr	r3, [pc, #40]	@ (800c468 <pbuf_cat+0x98>)
 800c43e:	f240 3263 	movw	r2, #867	@ 0x363
 800c442:	490d      	ldr	r1, [pc, #52]	@ (800c478 <pbuf_cat+0xa8>)
 800c444:	480a      	ldr	r0, [pc, #40]	@ (800c470 <pbuf_cat+0xa0>)
 800c446:	f009 fb23 	bl	8015a90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	891a      	ldrh	r2, [r3, #8]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	891b      	ldrh	r3, [r3, #8]
 800c452:	4413      	add	r3, r2
 800c454:	b29a      	uxth	r2, r3
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	08016fd4 	.word	0x08016fd4
 800c46c:	080171c8 	.word	0x080171c8
 800c470:	08017034 	.word	0x08017034
 800c474:	08017200 	.word	0x08017200
 800c478:	08017230 	.word	0x08017230

0800c47c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c486:	6839      	ldr	r1, [r7, #0]
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff ffa1 	bl	800c3d0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c48e:	6838      	ldr	r0, [r7, #0]
 800c490:	f7ff ff7c 	bl	800c38c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	617b      	str	r3, [r7, #20]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d008      	beq.n	800c4c6 <pbuf_copy+0x2a>
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d005      	beq.n	800c4c6 <pbuf_copy+0x2a>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	891a      	ldrh	r2, [r3, #8]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	891b      	ldrh	r3, [r3, #8]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d209      	bcs.n	800c4da <pbuf_copy+0x3e>
 800c4c6:	4b57      	ldr	r3, [pc, #348]	@ (800c624 <pbuf_copy+0x188>)
 800c4c8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c4cc:	4956      	ldr	r1, [pc, #344]	@ (800c628 <pbuf_copy+0x18c>)
 800c4ce:	4857      	ldr	r0, [pc, #348]	@ (800c62c <pbuf_copy+0x190>)
 800c4d0:	f009 fade 	bl	8015a90 <iprintf>
 800c4d4:	f06f 030f 	mvn.w	r3, #15
 800c4d8:	e09f      	b.n	800c61a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	895b      	ldrh	r3, [r3, #10]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	1ad2      	subs	r2, r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	895b      	ldrh	r3, [r3, #10]
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	1acb      	subs	r3, r1, r3
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d306      	bcc.n	800c500 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	895b      	ldrh	r3, [r3, #10]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e005      	b.n	800c50c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	895b      	ldrh	r3, [r3, #10]
 800c504:	461a      	mov	r2, r3
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	18d0      	adds	r0, r2, r3
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	4413      	add	r3, r2
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4619      	mov	r1, r3
 800c520:	f009 fcc3 	bl	8015eaa <memcpy>
    offset_to += len;
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	4413      	add	r3, r2
 800c52a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	4413      	add	r3, r2
 800c532:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	895b      	ldrh	r3, [r3, #10]
 800c538:	461a      	mov	r2, r3
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d906      	bls.n	800c54e <pbuf_copy+0xb2>
 800c540:	4b38      	ldr	r3, [pc, #224]	@ (800c624 <pbuf_copy+0x188>)
 800c542:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c546:	493a      	ldr	r1, [pc, #232]	@ (800c630 <pbuf_copy+0x194>)
 800c548:	4838      	ldr	r0, [pc, #224]	@ (800c62c <pbuf_copy+0x190>)
 800c54a:	f009 faa1 	bl	8015a90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	895b      	ldrh	r3, [r3, #10]
 800c552:	461a      	mov	r2, r3
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	4293      	cmp	r3, r2
 800c558:	d906      	bls.n	800c568 <pbuf_copy+0xcc>
 800c55a:	4b32      	ldr	r3, [pc, #200]	@ (800c624 <pbuf_copy+0x188>)
 800c55c:	f240 32da 	movw	r2, #986	@ 0x3da
 800c560:	4934      	ldr	r1, [pc, #208]	@ (800c634 <pbuf_copy+0x198>)
 800c562:	4832      	ldr	r0, [pc, #200]	@ (800c62c <pbuf_copy+0x190>)
 800c564:	f009 fa94 	bl	8015a90 <iprintf>
    if (offset_from >= p_from->len) {
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	895b      	ldrh	r3, [r3, #10]
 800c56c:	461a      	mov	r2, r3
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	4293      	cmp	r3, r2
 800c572:	d304      	bcc.n	800c57e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	895b      	ldrh	r3, [r3, #10]
 800c582:	461a      	mov	r2, r3
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	4293      	cmp	r3, r2
 800c588:	d114      	bne.n	800c5b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10c      	bne.n	800c5b4 <pbuf_copy+0x118>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d009      	beq.n	800c5b4 <pbuf_copy+0x118>
 800c5a0:	4b20      	ldr	r3, [pc, #128]	@ (800c624 <pbuf_copy+0x188>)
 800c5a2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c5a6:	4924      	ldr	r1, [pc, #144]	@ (800c638 <pbuf_copy+0x19c>)
 800c5a8:	4820      	ldr	r0, [pc, #128]	@ (800c62c <pbuf_copy+0x190>)
 800c5aa:	f009 fa71 	bl	8015a90 <iprintf>
 800c5ae:	f06f 030f 	mvn.w	r3, #15
 800c5b2:	e032      	b.n	800c61a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d013      	beq.n	800c5e2 <pbuf_copy+0x146>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	895a      	ldrh	r2, [r3, #10]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	891b      	ldrh	r3, [r3, #8]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d10d      	bne.n	800c5e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d009      	beq.n	800c5e2 <pbuf_copy+0x146>
 800c5ce:	4b15      	ldr	r3, [pc, #84]	@ (800c624 <pbuf_copy+0x188>)
 800c5d0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c5d4:	4919      	ldr	r1, [pc, #100]	@ (800c63c <pbuf_copy+0x1a0>)
 800c5d6:	4815      	ldr	r0, [pc, #84]	@ (800c62c <pbuf_copy+0x190>)
 800c5d8:	f009 fa5a 	bl	8015a90 <iprintf>
 800c5dc:	f06f 0305 	mvn.w	r3, #5
 800c5e0:	e01b      	b.n	800c61a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d013      	beq.n	800c610 <pbuf_copy+0x174>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	895a      	ldrh	r2, [r3, #10]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	891b      	ldrh	r3, [r3, #8]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d10d      	bne.n	800c610 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d009      	beq.n	800c610 <pbuf_copy+0x174>
 800c5fc:	4b09      	ldr	r3, [pc, #36]	@ (800c624 <pbuf_copy+0x188>)
 800c5fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c602:	490e      	ldr	r1, [pc, #56]	@ (800c63c <pbuf_copy+0x1a0>)
 800c604:	4809      	ldr	r0, [pc, #36]	@ (800c62c <pbuf_copy+0x190>)
 800c606:	f009 fa43 	bl	8015a90 <iprintf>
 800c60a:	f06f 0305 	mvn.w	r3, #5
 800c60e:	e004      	b.n	800c61a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f47f af61 	bne.w	800c4da <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	08016fd4 	.word	0x08016fd4
 800c628:	0801727c 	.word	0x0801727c
 800c62c:	08017034 	.word	0x08017034
 800c630:	080172ac 	.word	0x080172ac
 800c634:	080172c4 	.word	0x080172c4
 800c638:	080172e0 	.word	0x080172e0
 800c63c:	080172f0 	.word	0x080172f0

0800c640 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	4611      	mov	r1, r2
 800c64c:	461a      	mov	r2, r3
 800c64e:	460b      	mov	r3, r1
 800c650:	80fb      	strh	r3, [r7, #6]
 800c652:	4613      	mov	r3, r2
 800c654:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d108      	bne.n	800c676 <pbuf_copy_partial+0x36>
 800c664:	4b2b      	ldr	r3, [pc, #172]	@ (800c714 <pbuf_copy_partial+0xd4>)
 800c666:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c66a:	492b      	ldr	r1, [pc, #172]	@ (800c718 <pbuf_copy_partial+0xd8>)
 800c66c:	482b      	ldr	r0, [pc, #172]	@ (800c71c <pbuf_copy_partial+0xdc>)
 800c66e:	f009 fa0f 	bl	8015a90 <iprintf>
 800c672:	2300      	movs	r3, #0
 800c674:	e04a      	b.n	800c70c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d108      	bne.n	800c68e <pbuf_copy_partial+0x4e>
 800c67c:	4b25      	ldr	r3, [pc, #148]	@ (800c714 <pbuf_copy_partial+0xd4>)
 800c67e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c682:	4927      	ldr	r1, [pc, #156]	@ (800c720 <pbuf_copy_partial+0xe0>)
 800c684:	4825      	ldr	r0, [pc, #148]	@ (800c71c <pbuf_copy_partial+0xdc>)
 800c686:	f009 fa03 	bl	8015a90 <iprintf>
 800c68a:	2300      	movs	r3, #0
 800c68c:	e03e      	b.n	800c70c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	61fb      	str	r3, [r7, #28]
 800c692:	e034      	b.n	800c6fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c694:	88bb      	ldrh	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00a      	beq.n	800c6b0 <pbuf_copy_partial+0x70>
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	895b      	ldrh	r3, [r3, #10]
 800c69e:	88ba      	ldrh	r2, [r7, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d305      	bcc.n	800c6b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	895b      	ldrh	r3, [r3, #10]
 800c6a8:	88ba      	ldrh	r2, [r7, #4]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	80bb      	strh	r3, [r7, #4]
 800c6ae:	e023      	b.n	800c6f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	895a      	ldrh	r2, [r3, #10]
 800c6b4:	88bb      	ldrh	r3, [r7, #4]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c6ba:	8b3a      	ldrh	r2, [r7, #24]
 800c6bc:	88fb      	ldrh	r3, [r7, #6]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d901      	bls.n	800c6c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c6c2:	88fb      	ldrh	r3, [r7, #6]
 800c6c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c6c6:	8b7b      	ldrh	r3, [r7, #26]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	18d0      	adds	r0, r2, r3
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	88bb      	ldrh	r3, [r7, #4]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	8b3a      	ldrh	r2, [r7, #24]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	f009 fbe7 	bl	8015eaa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c6dc:	8afa      	ldrh	r2, [r7, #22]
 800c6de:	8b3b      	ldrh	r3, [r7, #24]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c6e4:	8b7a      	ldrh	r2, [r7, #26]
 800c6e6:	8b3b      	ldrh	r3, [r7, #24]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c6ec:	88fa      	ldrh	r2, [r7, #6]
 800c6ee:	8b3b      	ldrh	r3, [r7, #24]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	61fb      	str	r3, [r7, #28]
 800c6fe:	88fb      	ldrh	r3, [r7, #6]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <pbuf_copy_partial+0xca>
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1c4      	bne.n	800c694 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c70a:	8afb      	ldrh	r3, [r7, #22]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	08016fd4 	.word	0x08016fd4
 800c718:	0801731c 	.word	0x0801731c
 800c71c:	08017034 	.word	0x08017034
 800c720:	0801733c 	.word	0x0801733c

0800c724 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	603a      	str	r2, [r7, #0]
 800c72e:	71fb      	strb	r3, [r7, #7]
 800c730:	460b      	mov	r3, r1
 800c732:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	8919      	ldrh	r1, [r3, #8]
 800c738:	88ba      	ldrh	r2, [r7, #4]
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff faa1 	bl	800bc84 <pbuf_alloc>
 800c742:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d101      	bne.n	800c74e <pbuf_clone+0x2a>
    return NULL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	e011      	b.n	800c772 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7ff fea3 	bl	800c49c <pbuf_copy>
 800c756:	4603      	mov	r3, r0
 800c758:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c75a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d006      	beq.n	800c770 <pbuf_clone+0x4c>
 800c762:	4b06      	ldr	r3, [pc, #24]	@ (800c77c <pbuf_clone+0x58>)
 800c764:	f240 5224 	movw	r2, #1316	@ 0x524
 800c768:	4905      	ldr	r1, [pc, #20]	@ (800c780 <pbuf_clone+0x5c>)
 800c76a:	4806      	ldr	r0, [pc, #24]	@ (800c784 <pbuf_clone+0x60>)
 800c76c:	f009 f990 	bl	8015a90 <iprintf>
  return q;
 800c770:	68fb      	ldr	r3, [r7, #12]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	08016fd4 	.word	0x08016fd4
 800c780:	08017448 	.word	0x08017448
 800c784:	08017034 	.word	0x08017034

0800c788 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c78c:	f009 f880 	bl	8015890 <rand>
 800c790:	4603      	mov	r3, r0
 800c792:	b29b      	uxth	r3, r3
 800c794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	4b01      	ldr	r3, [pc, #4]	@ (800c7a8 <tcp_init+0x20>)
 800c7a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c7a4:	bf00      	nop
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	20000020 	.word	0x20000020

0800c7ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	7d1b      	ldrb	r3, [r3, #20]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d105      	bne.n	800c7c8 <tcp_free+0x1c>
 800c7bc:	4b06      	ldr	r3, [pc, #24]	@ (800c7d8 <tcp_free+0x2c>)
 800c7be:	22d4      	movs	r2, #212	@ 0xd4
 800c7c0:	4906      	ldr	r1, [pc, #24]	@ (800c7dc <tcp_free+0x30>)
 800c7c2:	4807      	ldr	r0, [pc, #28]	@ (800c7e0 <tcp_free+0x34>)
 800c7c4:	f009 f964 	bl	8015a90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	f7fe fec8 	bl	800b560 <memp_free>
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	080174d4 	.word	0x080174d4
 800c7dc:	08017504 	.word	0x08017504
 800c7e0:	08017518 	.word	0x08017518

0800c7e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7d1b      	ldrb	r3, [r3, #20]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d105      	bne.n	800c800 <tcp_free_listen+0x1c>
 800c7f4:	4b06      	ldr	r3, [pc, #24]	@ (800c810 <tcp_free_listen+0x2c>)
 800c7f6:	22df      	movs	r2, #223	@ 0xdf
 800c7f8:	4906      	ldr	r1, [pc, #24]	@ (800c814 <tcp_free_listen+0x30>)
 800c7fa:	4807      	ldr	r0, [pc, #28]	@ (800c818 <tcp_free_listen+0x34>)
 800c7fc:	f009 f948 	bl	8015a90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	2002      	movs	r0, #2
 800c804:	f7fe feac 	bl	800b560 <memp_free>
}
 800c808:	bf00      	nop
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	080174d4 	.word	0x080174d4
 800c814:	08017540 	.word	0x08017540
 800c818:	08017518 	.word	0x08017518

0800c81c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c820:	f000 fea4 	bl	800d56c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c824:	4b07      	ldr	r3, [pc, #28]	@ (800c844 <tcp_tmr+0x28>)
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	3301      	adds	r3, #1
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	4b05      	ldr	r3, [pc, #20]	@ (800c844 <tcp_tmr+0x28>)
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	4b04      	ldr	r3, [pc, #16]	@ (800c844 <tcp_tmr+0x28>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c83c:	f000 fb54 	bl	800cee8 <tcp_slowtmr>
  }
}
 800c840:	bf00      	nop
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20008c15 	.word	0x20008c15

0800c848 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d105      	bne.n	800c864 <tcp_remove_listener+0x1c>
 800c858:	4b0d      	ldr	r3, [pc, #52]	@ (800c890 <tcp_remove_listener+0x48>)
 800c85a:	22ff      	movs	r2, #255	@ 0xff
 800c85c:	490d      	ldr	r1, [pc, #52]	@ (800c894 <tcp_remove_listener+0x4c>)
 800c85e:	480e      	ldr	r0, [pc, #56]	@ (800c898 <tcp_remove_listener+0x50>)
 800c860:	f009 f916 	bl	8015a90 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	60fb      	str	r3, [r7, #12]
 800c868:	e00a      	b.n	800c880 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	429a      	cmp	r2, r3
 800c872:	d102      	bne.n	800c87a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1f1      	bne.n	800c86a <tcp_remove_listener+0x22>
    }
  }
}
 800c886:	bf00      	nop
 800c888:	bf00      	nop
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	080174d4 	.word	0x080174d4
 800c894:	0801755c 	.word	0x0801755c
 800c898:	08017518 	.word	0x08017518

0800c89c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <tcp_listen_closed+0x1c>
 800c8aa:	4b14      	ldr	r3, [pc, #80]	@ (800c8fc <tcp_listen_closed+0x60>)
 800c8ac:	f240 1211 	movw	r2, #273	@ 0x111
 800c8b0:	4913      	ldr	r1, [pc, #76]	@ (800c900 <tcp_listen_closed+0x64>)
 800c8b2:	4814      	ldr	r0, [pc, #80]	@ (800c904 <tcp_listen_closed+0x68>)
 800c8b4:	f009 f8ec 	bl	8015a90 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7d1b      	ldrb	r3, [r3, #20]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d006      	beq.n	800c8ce <tcp_listen_closed+0x32>
 800c8c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c8fc <tcp_listen_closed+0x60>)
 800c8c2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c8c6:	4910      	ldr	r1, [pc, #64]	@ (800c908 <tcp_listen_closed+0x6c>)
 800c8c8:	480e      	ldr	r0, [pc, #56]	@ (800c904 <tcp_listen_closed+0x68>)
 800c8ca:	f009 f8e1 	bl	8015a90 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	e00b      	b.n	800c8ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c8d4:	4a0d      	ldr	r2, [pc, #52]	@ (800c90c <tcp_listen_closed+0x70>)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	6879      	ldr	r1, [r7, #4]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff ffb1 	bl	800c848 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d9f0      	bls.n	800c8d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c8f2:	bf00      	nop
 800c8f4:	bf00      	nop
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	080174d4 	.word	0x080174d4
 800c900:	08017584 	.word	0x08017584
 800c904:	08017518 	.word	0x08017518
 800c908:	08017590 	.word	0x08017590
 800c90c:	08019bd0 	.word	0x08019bd0

0800c910 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c910:	b5b0      	push	{r4, r5, r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af04      	add	r7, sp, #16
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <tcp_close_shutdown+0x20>
 800c922:	4b63      	ldr	r3, [pc, #396]	@ (800cab0 <tcp_close_shutdown+0x1a0>)
 800c924:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c928:	4962      	ldr	r1, [pc, #392]	@ (800cab4 <tcp_close_shutdown+0x1a4>)
 800c92a:	4863      	ldr	r0, [pc, #396]	@ (800cab8 <tcp_close_shutdown+0x1a8>)
 800c92c:	f009 f8b0 	bl	8015a90 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d066      	beq.n	800ca04 <tcp_close_shutdown+0xf4>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	7d1b      	ldrb	r3, [r3, #20]
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d003      	beq.n	800c946 <tcp_close_shutdown+0x36>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	7d1b      	ldrb	r3, [r3, #20]
 800c942:	2b07      	cmp	r3, #7
 800c944:	d15e      	bne.n	800ca04 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d104      	bne.n	800c958 <tcp_close_shutdown+0x48>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c952:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c956:	d055      	beq.n	800ca04 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	8b5b      	ldrh	r3, [r3, #26]
 800c95c:	f003 0310 	and.w	r3, r3, #16
 800c960:	2b00      	cmp	r3, #0
 800c962:	d106      	bne.n	800c972 <tcp_close_shutdown+0x62>
 800c964:	4b52      	ldr	r3, [pc, #328]	@ (800cab0 <tcp_close_shutdown+0x1a0>)
 800c966:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c96a:	4954      	ldr	r1, [pc, #336]	@ (800cabc <tcp_close_shutdown+0x1ac>)
 800c96c:	4852      	ldr	r0, [pc, #328]	@ (800cab8 <tcp_close_shutdown+0x1a8>)
 800c96e:	f009 f88f 	bl	8015a90 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c97a:	687d      	ldr	r5, [r7, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	3304      	adds	r3, #4
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	8ad2      	ldrh	r2, [r2, #22]
 800c984:	6879      	ldr	r1, [r7, #4]
 800c986:	8b09      	ldrh	r1, [r1, #24]
 800c988:	9102      	str	r1, [sp, #8]
 800c98a:	9201      	str	r2, [sp, #4]
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	462b      	mov	r3, r5
 800c990:	4622      	mov	r2, r4
 800c992:	4601      	mov	r1, r0
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f004 fe8d 	bl	80116b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f001 f8c8 	bl	800db30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c9a0:	4b47      	ldr	r3, [pc, #284]	@ (800cac0 <tcp_close_shutdown+0x1b0>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d105      	bne.n	800c9b6 <tcp_close_shutdown+0xa6>
 800c9aa:	4b45      	ldr	r3, [pc, #276]	@ (800cac0 <tcp_close_shutdown+0x1b0>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	4a43      	ldr	r2, [pc, #268]	@ (800cac0 <tcp_close_shutdown+0x1b0>)
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	e013      	b.n	800c9de <tcp_close_shutdown+0xce>
 800c9b6:	4b42      	ldr	r3, [pc, #264]	@ (800cac0 <tcp_close_shutdown+0x1b0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	e00c      	b.n	800c9d8 <tcp_close_shutdown+0xc8>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d104      	bne.n	800c9d2 <tcp_close_shutdown+0xc2>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	68da      	ldr	r2, [r3, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	60da      	str	r2, [r3, #12]
 800c9d0:	e005      	b.n	800c9de <tcp_close_shutdown+0xce>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	60fb      	str	r3, [r7, #12]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1ef      	bne.n	800c9be <tcp_close_shutdown+0xae>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	60da      	str	r2, [r3, #12]
 800c9e4:	4b37      	ldr	r3, [pc, #220]	@ (800cac4 <tcp_close_shutdown+0x1b4>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c9ea:	4b37      	ldr	r3, [pc, #220]	@ (800cac8 <tcp_close_shutdown+0x1b8>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d102      	bne.n	800c9fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c9f4:	f003 fd5c 	bl	80104b0 <tcp_trigger_input_pcb_close>
 800c9f8:	e002      	b.n	800ca00 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff fed6 	bl	800c7ac <tcp_free>
      }
      return ERR_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	e050      	b.n	800caa6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	7d1b      	ldrb	r3, [r3, #20]
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d03b      	beq.n	800ca84 <tcp_close_shutdown+0x174>
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	dc44      	bgt.n	800ca9a <tcp_close_shutdown+0x18a>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <tcp_close_shutdown+0x10a>
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d02a      	beq.n	800ca6e <tcp_close_shutdown+0x15e>
 800ca18:	e03f      	b.n	800ca9a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	8adb      	ldrh	r3, [r3, #22]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d021      	beq.n	800ca66 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca22:	4b2a      	ldr	r3, [pc, #168]	@ (800cacc <tcp_close_shutdown+0x1bc>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d105      	bne.n	800ca38 <tcp_close_shutdown+0x128>
 800ca2c:	4b27      	ldr	r3, [pc, #156]	@ (800cacc <tcp_close_shutdown+0x1bc>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	4a26      	ldr	r2, [pc, #152]	@ (800cacc <tcp_close_shutdown+0x1bc>)
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	e013      	b.n	800ca60 <tcp_close_shutdown+0x150>
 800ca38:	4b24      	ldr	r3, [pc, #144]	@ (800cacc <tcp_close_shutdown+0x1bc>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	60bb      	str	r3, [r7, #8]
 800ca3e:	e00c      	b.n	800ca5a <tcp_close_shutdown+0x14a>
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d104      	bne.n	800ca54 <tcp_close_shutdown+0x144>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68da      	ldr	r2, [r3, #12]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	60da      	str	r2, [r3, #12]
 800ca52:	e005      	b.n	800ca60 <tcp_close_shutdown+0x150>
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	60bb      	str	r3, [r7, #8]
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1ef      	bne.n	800ca40 <tcp_close_shutdown+0x130>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff fea0 	bl	800c7ac <tcp_free>
      break;
 800ca6c:	e01a      	b.n	800caa4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff ff14 	bl	800c89c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca74:	6879      	ldr	r1, [r7, #4]
 800ca76:	4816      	ldr	r0, [pc, #88]	@ (800cad0 <tcp_close_shutdown+0x1c0>)
 800ca78:	f001 f8aa 	bl	800dbd0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff feb1 	bl	800c7e4 <tcp_free_listen>
      break;
 800ca82:	e00f      	b.n	800caa4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca84:	6879      	ldr	r1, [r7, #4]
 800ca86:	480e      	ldr	r0, [pc, #56]	@ (800cac0 <tcp_close_shutdown+0x1b0>)
 800ca88:	f001 f8a2 	bl	800dbd0 <tcp_pcb_remove>
 800ca8c:	4b0d      	ldr	r3, [pc, #52]	@ (800cac4 <tcp_close_shutdown+0x1b4>)
 800ca8e:	2201      	movs	r2, #1
 800ca90:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7ff fe8a 	bl	800c7ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ca98:	e004      	b.n	800caa4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f81a 	bl	800cad4 <tcp_close_shutdown_fin>
 800caa0:	4603      	mov	r3, r0
 800caa2:	e000      	b.n	800caa6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bdb0      	pop	{r4, r5, r7, pc}
 800caae:	bf00      	nop
 800cab0:	080174d4 	.word	0x080174d4
 800cab4:	080175a8 	.word	0x080175a8
 800cab8:	08017518 	.word	0x08017518
 800cabc:	080175c8 	.word	0x080175c8
 800cac0:	20008c0c 	.word	0x20008c0c
 800cac4:	20008c14 	.word	0x20008c14
 800cac8:	20008c4c 	.word	0x20008c4c
 800cacc:	20008c04 	.word	0x20008c04
 800cad0:	20008c08 	.word	0x20008c08

0800cad4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <tcp_close_shutdown_fin+0x1c>
 800cae2:	4b2e      	ldr	r3, [pc, #184]	@ (800cb9c <tcp_close_shutdown_fin+0xc8>)
 800cae4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800cae8:	492d      	ldr	r1, [pc, #180]	@ (800cba0 <tcp_close_shutdown_fin+0xcc>)
 800caea:	482e      	ldr	r0, [pc, #184]	@ (800cba4 <tcp_close_shutdown_fin+0xd0>)
 800caec:	f008 ffd0 	bl	8015a90 <iprintf>

  switch (pcb->state) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7d1b      	ldrb	r3, [r3, #20]
 800caf4:	2b07      	cmp	r3, #7
 800caf6:	d020      	beq.n	800cb3a <tcp_close_shutdown_fin+0x66>
 800caf8:	2b07      	cmp	r3, #7
 800cafa:	dc2b      	bgt.n	800cb54 <tcp_close_shutdown_fin+0x80>
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	d002      	beq.n	800cb06 <tcp_close_shutdown_fin+0x32>
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d00d      	beq.n	800cb20 <tcp_close_shutdown_fin+0x4c>
 800cb04:	e026      	b.n	800cb54 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f003 fee2 	bl	80108d0 <tcp_send_fin>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d11f      	bne.n	800cb58 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2205      	movs	r2, #5
 800cb1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb1e:	e01b      	b.n	800cb58 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f003 fed5 	bl	80108d0 <tcp_send_fin>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d114      	bne.n	800cb5c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2205      	movs	r2, #5
 800cb36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb38:	e010      	b.n	800cb5c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f003 fec8 	bl	80108d0 <tcp_send_fin>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d109      	bne.n	800cb60 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2209      	movs	r2, #9
 800cb50:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb52:	e005      	b.n	800cb60 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	e01c      	b.n	800cb92 <tcp_close_shutdown_fin+0xbe>
      break;
 800cb58:	bf00      	nop
 800cb5a:	e002      	b.n	800cb62 <tcp_close_shutdown_fin+0x8e>
      break;
 800cb5c:	bf00      	nop
 800cb5e:	e000      	b.n	800cb62 <tcp_close_shutdown_fin+0x8e>
      break;
 800cb60:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cb62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d103      	bne.n	800cb72 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f003 ffee 	bl	8010b4c <tcp_output>
 800cb70:	e00d      	b.n	800cb8e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cb72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7a:	d108      	bne.n	800cb8e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	8b5b      	ldrh	r3, [r3, #26]
 800cb80:	f043 0308 	orr.w	r3, r3, #8
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e001      	b.n	800cb92 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cb8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	080174d4 	.word	0x080174d4
 800cba0:	08017584 	.word	0x08017584
 800cba4:	08017518 	.word	0x08017518

0800cba8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d109      	bne.n	800cbca <tcp_close+0x22>
 800cbb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cbf4 <tcp_close+0x4c>)
 800cbb8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800cbbc:	490e      	ldr	r1, [pc, #56]	@ (800cbf8 <tcp_close+0x50>)
 800cbbe:	480f      	ldr	r0, [pc, #60]	@ (800cbfc <tcp_close+0x54>)
 800cbc0:	f008 ff66 	bl	8015a90 <iprintf>
 800cbc4:	f06f 030f 	mvn.w	r3, #15
 800cbc8:	e00f      	b.n	800cbea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	7d1b      	ldrb	r3, [r3, #20]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d006      	beq.n	800cbe0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	8b5b      	ldrh	r3, [r3, #26]
 800cbd6:	f043 0310 	orr.w	r3, r3, #16
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7ff fe94 	bl	800c910 <tcp_close_shutdown>
 800cbe8:	4603      	mov	r3, r0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	080174d4 	.word	0x080174d4
 800cbf8:	080175e4 	.word	0x080175e4
 800cbfc:	08017518 	.word	0x08017518

0800cc00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08e      	sub	sp, #56	@ 0x38
 800cc04:	af04      	add	r7, sp, #16
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d107      	bne.n	800cc20 <tcp_abandon+0x20>
 800cc10:	4b52      	ldr	r3, [pc, #328]	@ (800cd5c <tcp_abandon+0x15c>)
 800cc12:	f240 223d 	movw	r2, #573	@ 0x23d
 800cc16:	4952      	ldr	r1, [pc, #328]	@ (800cd60 <tcp_abandon+0x160>)
 800cc18:	4852      	ldr	r0, [pc, #328]	@ (800cd64 <tcp_abandon+0x164>)
 800cc1a:	f008 ff39 	bl	8015a90 <iprintf>
 800cc1e:	e099      	b.n	800cd54 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7d1b      	ldrb	r3, [r3, #20]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d106      	bne.n	800cc36 <tcp_abandon+0x36>
 800cc28:	4b4c      	ldr	r3, [pc, #304]	@ (800cd5c <tcp_abandon+0x15c>)
 800cc2a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800cc2e:	494e      	ldr	r1, [pc, #312]	@ (800cd68 <tcp_abandon+0x168>)
 800cc30:	484c      	ldr	r0, [pc, #304]	@ (800cd64 <tcp_abandon+0x164>)
 800cc32:	f008 ff2d 	bl	8015a90 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7d1b      	ldrb	r3, [r3, #20]
 800cc3a:	2b0a      	cmp	r3, #10
 800cc3c:	d107      	bne.n	800cc4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	484a      	ldr	r0, [pc, #296]	@ (800cd6c <tcp_abandon+0x16c>)
 800cc42:	f000 ffc5 	bl	800dbd0 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7ff fdb0 	bl	800c7ac <tcp_free>
 800cc4c:	e082      	b.n	800cd54 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7d1b      	ldrb	r3, [r3, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d126      	bne.n	800ccc6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	8adb      	ldrh	r3, [r3, #22]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d02e      	beq.n	800ccde <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc80:	4b3b      	ldr	r3, [pc, #236]	@ (800cd70 <tcp_abandon+0x170>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d105      	bne.n	800cc96 <tcp_abandon+0x96>
 800cc8a:	4b39      	ldr	r3, [pc, #228]	@ (800cd70 <tcp_abandon+0x170>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	4a37      	ldr	r2, [pc, #220]	@ (800cd70 <tcp_abandon+0x170>)
 800cc92:	6013      	str	r3, [r2, #0]
 800cc94:	e013      	b.n	800ccbe <tcp_abandon+0xbe>
 800cc96:	4b36      	ldr	r3, [pc, #216]	@ (800cd70 <tcp_abandon+0x170>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	61fb      	str	r3, [r7, #28]
 800cc9c:	e00c      	b.n	800ccb8 <tcp_abandon+0xb8>
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d104      	bne.n	800ccb2 <tcp_abandon+0xb2>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68da      	ldr	r2, [r3, #12]
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	60da      	str	r2, [r3, #12]
 800ccb0:	e005      	b.n	800ccbe <tcp_abandon+0xbe>
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	61fb      	str	r3, [r7, #28]
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1ef      	bne.n	800cc9e <tcp_abandon+0x9e>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	60da      	str	r2, [r3, #12]
 800ccc4:	e00b      	b.n	800ccde <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	8adb      	ldrh	r3, [r3, #22]
 800ccce:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	4828      	ldr	r0, [pc, #160]	@ (800cd74 <tcp_abandon+0x174>)
 800ccd4:	f000 ff7c 	bl	800dbd0 <tcp_pcb_remove>
 800ccd8:	4b27      	ldr	r3, [pc, #156]	@ (800cd78 <tcp_abandon+0x178>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d004      	beq.n	800ccf0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fd1e 	bl	800d72c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d004      	beq.n	800cd02 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fd15 	bl	800d72c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d004      	beq.n	800cd14 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fd0c 	bl	800d72c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00e      	beq.n	800cd38 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3304      	adds	r3, #4
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	8b12      	ldrh	r2, [r2, #24]
 800cd24:	9202      	str	r2, [sp, #8]
 800cd26:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cd28:	9201      	str	r2, [sp, #4]
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	69b9      	ldr	r1, [r7, #24]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f004 fcbe 	bl	80116b4 <tcp_rst>
    }
    last_state = pcb->state;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	7d1b      	ldrb	r3, [r3, #20]
 800cd3c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7ff fd34 	bl	800c7ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d004      	beq.n	800cd54 <tcp_abandon+0x154>
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	f06f 010c 	mvn.w	r1, #12
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	4798      	blx	r3
  }
}
 800cd54:	3728      	adds	r7, #40	@ 0x28
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	080174d4 	.word	0x080174d4
 800cd60:	08017618 	.word	0x08017618
 800cd64:	08017518 	.word	0x08017518
 800cd68:	08017634 	.word	0x08017634
 800cd6c:	20008c10 	.word	0x20008c10
 800cd70:	20008c04 	.word	0x20008c04
 800cd74:	20008c0c 	.word	0x20008c0c
 800cd78:	20008c14 	.word	0x20008c14

0800cd7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cd84:	2101      	movs	r1, #1
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff ff3a 	bl	800cc00 <tcp_abandon>
}
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d106      	bne.n	800cdb0 <tcp_update_rcv_ann_wnd+0x1c>
 800cda2:	4b25      	ldr	r3, [pc, #148]	@ (800ce38 <tcp_update_rcv_ann_wnd+0xa4>)
 800cda4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cda8:	4924      	ldr	r1, [pc, #144]	@ (800ce3c <tcp_update_rcv_ann_wnd+0xa8>)
 800cdaa:	4825      	ldr	r0, [pc, #148]	@ (800ce40 <tcp_update_rcv_ann_wnd+0xac>)
 800cdac:	f008 fe70 	bl	8015a90 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cdb8:	4413      	add	r3, r2
 800cdba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800cdc4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800cdc8:	bf28      	it	cs
 800cdca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800cdce:	b292      	uxth	r2, r2
 800cdd0:	4413      	add	r3, r2
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	1ad3      	subs	r3, r2, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	db08      	blt.n	800cdec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	e020      	b.n	800ce2e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf4:	1ad3      	subs	r3, r2, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	dd03      	ble.n	800ce02 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ce00:	e014      	b.n	800ce2c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce14:	d306      	bcc.n	800ce24 <tcp_update_rcv_ann_wnd+0x90>
 800ce16:	4b08      	ldr	r3, [pc, #32]	@ (800ce38 <tcp_update_rcv_ann_wnd+0xa4>)
 800ce18:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ce1c:	4909      	ldr	r1, [pc, #36]	@ (800ce44 <tcp_update_rcv_ann_wnd+0xb0>)
 800ce1e:	4808      	ldr	r0, [pc, #32]	@ (800ce40 <tcp_update_rcv_ann_wnd+0xac>)
 800ce20:	f008 fe36 	bl	8015a90 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ce2c:	2300      	movs	r3, #0
  }
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	080174d4 	.word	0x080174d4
 800ce3c:	08017730 	.word	0x08017730
 800ce40:	08017518 	.word	0x08017518
 800ce44:	08017754 	.word	0x08017754

0800ce48 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d107      	bne.n	800ce6a <tcp_recved+0x22>
 800ce5a:	4b1f      	ldr	r3, [pc, #124]	@ (800ced8 <tcp_recved+0x90>)
 800ce5c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ce60:	491e      	ldr	r1, [pc, #120]	@ (800cedc <tcp_recved+0x94>)
 800ce62:	481f      	ldr	r0, [pc, #124]	@ (800cee0 <tcp_recved+0x98>)
 800ce64:	f008 fe14 	bl	8015a90 <iprintf>
 800ce68:	e032      	b.n	800ced0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	7d1b      	ldrb	r3, [r3, #20]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d106      	bne.n	800ce80 <tcp_recved+0x38>
 800ce72:	4b19      	ldr	r3, [pc, #100]	@ (800ced8 <tcp_recved+0x90>)
 800ce74:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ce78:	491a      	ldr	r1, [pc, #104]	@ (800cee4 <tcp_recved+0x9c>)
 800ce7a:	4819      	ldr	r0, [pc, #100]	@ (800cee0 <tcp_recved+0x98>)
 800ce7c:	f008 fe08 	bl	8015a90 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ce84:	887b      	ldrh	r3, [r7, #2]
 800ce86:	4413      	add	r3, r2
 800ce88:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce8a:	89fb      	ldrh	r3, [r7, #14]
 800ce8c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ce90:	d804      	bhi.n	800ce9c <tcp_recved+0x54>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce96:	89fa      	ldrh	r2, [r7, #14]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d204      	bcs.n	800cea6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cea2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cea4:	e002      	b.n	800ceac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	89fa      	ldrh	r2, [r7, #14]
 800ceaa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7ff ff71 	bl	800cd94 <tcp_update_rcv_ann_wnd>
 800ceb2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ceba:	d309      	bcc.n	800ced0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	8b5b      	ldrh	r3, [r3, #26]
 800cec0:	f043 0302 	orr.w	r3, r3, #2
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f003 fe3e 	bl	8010b4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	080174d4 	.word	0x080174d4
 800cedc:	08017770 	.word	0x08017770
 800cee0:	08017518 	.word	0x08017518
 800cee4:	08017788 	.word	0x08017788

0800cee8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cee8:	b5b0      	push	{r4, r5, r7, lr}
 800ceea:	b090      	sub	sp, #64	@ 0x40
 800ceec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800cef4:	4b95      	ldr	r3, [pc, #596]	@ (800d14c <tcp_slowtmr+0x264>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3301      	adds	r3, #1
 800cefa:	4a94      	ldr	r2, [pc, #592]	@ (800d14c <tcp_slowtmr+0x264>)
 800cefc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cefe:	4b94      	ldr	r3, [pc, #592]	@ (800d150 <tcp_slowtmr+0x268>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	3301      	adds	r3, #1
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	4b92      	ldr	r3, [pc, #584]	@ (800d150 <tcp_slowtmr+0x268>)
 800cf08:	701a      	strb	r2, [r3, #0]
 800cf0a:	e000      	b.n	800cf0e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800cf0c:	bf00      	nop
  prev = NULL;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800cf12:	4b90      	ldr	r3, [pc, #576]	@ (800d154 <tcp_slowtmr+0x26c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cf18:	e29d      	b.n	800d456 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf1c:	7d1b      	ldrb	r3, [r3, #20]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <tcp_slowtmr+0x48>
 800cf22:	4b8d      	ldr	r3, [pc, #564]	@ (800d158 <tcp_slowtmr+0x270>)
 800cf24:	f240 42be 	movw	r2, #1214	@ 0x4be
 800cf28:	498c      	ldr	r1, [pc, #560]	@ (800d15c <tcp_slowtmr+0x274>)
 800cf2a:	488d      	ldr	r0, [pc, #564]	@ (800d160 <tcp_slowtmr+0x278>)
 800cf2c:	f008 fdb0 	bl	8015a90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf32:	7d1b      	ldrb	r3, [r3, #20]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d106      	bne.n	800cf46 <tcp_slowtmr+0x5e>
 800cf38:	4b87      	ldr	r3, [pc, #540]	@ (800d158 <tcp_slowtmr+0x270>)
 800cf3a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800cf3e:	4989      	ldr	r1, [pc, #548]	@ (800d164 <tcp_slowtmr+0x27c>)
 800cf40:	4887      	ldr	r0, [pc, #540]	@ (800d160 <tcp_slowtmr+0x278>)
 800cf42:	f008 fda5 	bl	8015a90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cf46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf48:	7d1b      	ldrb	r3, [r3, #20]
 800cf4a:	2b0a      	cmp	r3, #10
 800cf4c:	d106      	bne.n	800cf5c <tcp_slowtmr+0x74>
 800cf4e:	4b82      	ldr	r3, [pc, #520]	@ (800d158 <tcp_slowtmr+0x270>)
 800cf50:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800cf54:	4984      	ldr	r1, [pc, #528]	@ (800d168 <tcp_slowtmr+0x280>)
 800cf56:	4882      	ldr	r0, [pc, #520]	@ (800d160 <tcp_slowtmr+0x278>)
 800cf58:	f008 fd9a 	bl	8015a90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5e:	7f9a      	ldrb	r2, [r3, #30]
 800cf60:	4b7b      	ldr	r3, [pc, #492]	@ (800d150 <tcp_slowtmr+0x268>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d105      	bne.n	800cf74 <tcp_slowtmr+0x8c>
      prev = pcb;
 800cf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800cf72:	e270      	b.n	800d456 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800cf74:	4b76      	ldr	r3, [pc, #472]	@ (800d150 <tcp_slowtmr+0x268>)
 800cf76:	781a      	ldrb	r2, [r3, #0]
 800cf78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8a:	7d1b      	ldrb	r3, [r3, #20]
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d10a      	bne.n	800cfa6 <tcp_slowtmr+0xbe>
 800cf90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf96:	2b05      	cmp	r3, #5
 800cf98:	d905      	bls.n	800cfa6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800cf9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfa4:	e11e      	b.n	800d1e4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfac:	2b0b      	cmp	r3, #11
 800cfae:	d905      	bls.n	800cfbc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800cfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfba:	e113      	b.n	800d1e4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800cfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d075      	beq.n	800d0b2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d006      	beq.n	800cfdc <tcp_slowtmr+0xf4>
 800cfce:	4b62      	ldr	r3, [pc, #392]	@ (800d158 <tcp_slowtmr+0x270>)
 800cfd0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800cfd4:	4965      	ldr	r1, [pc, #404]	@ (800d16c <tcp_slowtmr+0x284>)
 800cfd6:	4862      	ldr	r0, [pc, #392]	@ (800d160 <tcp_slowtmr+0x278>)
 800cfd8:	f008 fd5a 	bl	8015a90 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d106      	bne.n	800cff2 <tcp_slowtmr+0x10a>
 800cfe4:	4b5c      	ldr	r3, [pc, #368]	@ (800d158 <tcp_slowtmr+0x270>)
 800cfe6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800cfea:	4961      	ldr	r1, [pc, #388]	@ (800d170 <tcp_slowtmr+0x288>)
 800cfec:	485c      	ldr	r0, [pc, #368]	@ (800d160 <tcp_slowtmr+0x278>)
 800cfee:	f008 fd4f 	bl	8015a90 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800cff8:	2b0b      	cmp	r3, #11
 800cffa:	d905      	bls.n	800d008 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800cffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d000:	3301      	adds	r3, #1
 800d002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d006:	e0ed      	b.n	800d1e4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d00e:	3b01      	subs	r3, #1
 800d010:	4a58      	ldr	r2, [pc, #352]	@ (800d174 <tcp_slowtmr+0x28c>)
 800d012:	5cd3      	ldrb	r3, [r2, r3]
 800d014:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d018:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d01c:	7c7a      	ldrb	r2, [r7, #17]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d907      	bls.n	800d032 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d024:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d028:	3301      	adds	r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d034:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d038:	7c7a      	ldrb	r2, [r7, #17]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	f200 80d2 	bhi.w	800d1e4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d040:	2301      	movs	r3, #1
 800d042:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d108      	bne.n	800d060 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d04e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d050:	f004 fc24 	bl	801189c <tcp_zero_window_probe>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d014      	beq.n	800d084 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d05a:	2300      	movs	r3, #0
 800d05c:	623b      	str	r3, [r7, #32]
 800d05e:	e011      	b.n	800d084 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d062:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d066:	4619      	mov	r1, r3
 800d068:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d06a:	f003 fae9 	bl	8010640 <tcp_split_unsent_seg>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d107      	bne.n	800d084 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d076:	f003 fd69 	bl	8010b4c <tcp_output>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 80ac 	beq.w	800d1e4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d096:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d09a:	2b06      	cmp	r3, #6
 800d09c:	f200 80a2 	bhi.w	800d1e4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d0b0:	e098      	b.n	800d1e4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	db0f      	blt.n	800d0dc <tcp_slowtmr+0x1f4>
 800d0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d0c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d008      	beq.n	800d0dc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	b21a      	sxth	r2, r3
 800d0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0da:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	db7b      	blt.n	800d1e4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d0ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0ee:	f004 f821 	bl	8011134 <tcp_rexmit_rto_prepare>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d007      	beq.n	800d108 <tcp_slowtmr+0x220>
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d171      	bne.n	800d1e4 <tcp_slowtmr+0x2fc>
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d104:	2b00      	cmp	r3, #0
 800d106:	d06d      	beq.n	800d1e4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d10a:	7d1b      	ldrb	r3, [r3, #20]
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	d03a      	beq.n	800d186 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d116:	2b0c      	cmp	r3, #12
 800d118:	bf28      	it	cs
 800d11a:	230c      	movcs	r3, #12
 800d11c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d120:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d124:	10db      	asrs	r3, r3, #3
 800d126:	b21b      	sxth	r3, r3
 800d128:	461a      	mov	r2, r3
 800d12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d130:	4413      	add	r3, r2
 800d132:	7efa      	ldrb	r2, [r7, #27]
 800d134:	4910      	ldr	r1, [pc, #64]	@ (800d178 <tcp_slowtmr+0x290>)
 800d136:	5c8a      	ldrb	r2, [r1, r2]
 800d138:	4093      	lsls	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d142:	4293      	cmp	r3, r2
 800d144:	dc1a      	bgt.n	800d17c <tcp_slowtmr+0x294>
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	b21a      	sxth	r2, r3
 800d14a:	e019      	b.n	800d180 <tcp_slowtmr+0x298>
 800d14c:	20008c00 	.word	0x20008c00
 800d150:	20008c16 	.word	0x20008c16
 800d154:	20008c0c 	.word	0x20008c0c
 800d158:	080174d4 	.word	0x080174d4
 800d15c:	08017818 	.word	0x08017818
 800d160:	08017518 	.word	0x08017518
 800d164:	08017844 	.word	0x08017844
 800d168:	08017870 	.word	0x08017870
 800d16c:	080178a0 	.word	0x080178a0
 800d170:	080178d4 	.word	0x080178d4
 800d174:	08019bc8 	.word	0x08019bc8
 800d178:	08019bb8 	.word	0x08019bb8
 800d17c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d188:	2200      	movs	r2, #0
 800d18a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d194:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d198:	4293      	cmp	r3, r2
 800d19a:	bf28      	it	cs
 800d19c:	4613      	movcs	r3, r2
 800d19e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d1a0:	8a7b      	ldrh	r3, [r7, #18]
 800d1a2:	085b      	lsrs	r3, r3, #1
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d206      	bcs.n	800d1cc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1c2:	005b      	lsls	r3, r3, #1
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ce:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d1de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1e0:	f004 f818 	bl	8011214 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e6:	7d1b      	ldrb	r3, [r3, #20]
 800d1e8:	2b06      	cmp	r3, #6
 800d1ea:	d111      	bne.n	800d210 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ee:	8b5b      	ldrh	r3, [r3, #26]
 800d1f0:	f003 0310 	and.w	r3, r3, #16
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00b      	beq.n	800d210 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1f8:	4b9c      	ldr	r3, [pc, #624]	@ (800d46c <tcp_slowtmr+0x584>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fe:	6a1b      	ldr	r3, [r3, #32]
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	2b28      	cmp	r3, #40	@ 0x28
 800d204:	d904      	bls.n	800d210 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d20a:	3301      	adds	r3, #1
 800d20c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	7a5b      	ldrb	r3, [r3, #9]
 800d214:	f003 0308 	and.w	r3, r3, #8
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d04a      	beq.n	800d2b2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d220:	2b04      	cmp	r3, #4
 800d222:	d003      	beq.n	800d22c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d226:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d228:	2b07      	cmp	r3, #7
 800d22a:	d142      	bne.n	800d2b2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d22c:	4b8f      	ldr	r3, [pc, #572]	@ (800d46c <tcp_slowtmr+0x584>)
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d238:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d23c:	4b8c      	ldr	r3, [pc, #560]	@ (800d470 <tcp_slowtmr+0x588>)
 800d23e:	440b      	add	r3, r1
 800d240:	498c      	ldr	r1, [pc, #560]	@ (800d474 <tcp_slowtmr+0x58c>)
 800d242:	fba1 1303 	umull	r1, r3, r1, r3
 800d246:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d248:	429a      	cmp	r2, r3
 800d24a:	d90a      	bls.n	800d262 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800d24c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d250:	3301      	adds	r3, #1
 800d252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d256:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d25a:	3301      	adds	r3, #1
 800d25c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d260:	e027      	b.n	800d2b2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d262:	4b82      	ldr	r3, [pc, #520]	@ (800d46c <tcp_slowtmr+0x584>)
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d278:	4618      	mov	r0, r3
 800d27a:	4b7f      	ldr	r3, [pc, #508]	@ (800d478 <tcp_slowtmr+0x590>)
 800d27c:	fb00 f303 	mul.w	r3, r0, r3
 800d280:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d282:	497c      	ldr	r1, [pc, #496]	@ (800d474 <tcp_slowtmr+0x58c>)
 800d284:	fba1 1303 	umull	r1, r3, r1, r3
 800d288:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d911      	bls.n	800d2b2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d28e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d290:	f004 fac4 	bl	801181c <tcp_keepalive>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d29a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d107      	bne.n	800d2b2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ae:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d011      	beq.n	800d2de <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d2ba:	4b6c      	ldr	r3, [pc, #432]	@ (800d46c <tcp_slowtmr+0x584>)
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	1ad2      	subs	r2, r2, r3
 800d2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	440b      	add	r3, r1
 800d2d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d302      	bcc.n	800d2de <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800d2d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2da:	f000 fddd 	bl	800de98 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e0:	7d1b      	ldrb	r3, [r3, #20]
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d10b      	bne.n	800d2fe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2e6:	4b61      	ldr	r3, [pc, #388]	@ (800d46c <tcp_slowtmr+0x584>)
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	2b28      	cmp	r3, #40	@ 0x28
 800d2f2:	d904      	bls.n	800d2fe <tcp_slowtmr+0x416>
        ++pcb_remove;
 800d2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d300:	7d1b      	ldrb	r3, [r3, #20]
 800d302:	2b09      	cmp	r3, #9
 800d304:	d10b      	bne.n	800d31e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d306:	4b59      	ldr	r3, [pc, #356]	@ (800d46c <tcp_slowtmr+0x584>)
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2bf0      	cmp	r3, #240	@ 0xf0
 800d312:	d904      	bls.n	800d31e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d318:	3301      	adds	r3, #1
 800d31a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d31e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d322:	2b00      	cmp	r3, #0
 800d324:	d060      	beq.n	800d3e8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800d326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d32c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d32e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d330:	f000 fbfe 	bl	800db30 <tcp_pcb_purge>
      if (prev != NULL) {
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	2b00      	cmp	r3, #0
 800d338:	d010      	beq.n	800d35c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d33a:	4b50      	ldr	r3, [pc, #320]	@ (800d47c <tcp_slowtmr+0x594>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d340:	429a      	cmp	r2, r3
 800d342:	d106      	bne.n	800d352 <tcp_slowtmr+0x46a>
 800d344:	4b4e      	ldr	r3, [pc, #312]	@ (800d480 <tcp_slowtmr+0x598>)
 800d346:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d34a:	494e      	ldr	r1, [pc, #312]	@ (800d484 <tcp_slowtmr+0x59c>)
 800d34c:	484e      	ldr	r0, [pc, #312]	@ (800d488 <tcp_slowtmr+0x5a0>)
 800d34e:	f008 fb9f 	bl	8015a90 <iprintf>
        prev->next = pcb->next;
 800d352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d354:	68da      	ldr	r2, [r3, #12]
 800d356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d358:	60da      	str	r2, [r3, #12]
 800d35a:	e00f      	b.n	800d37c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d35c:	4b47      	ldr	r3, [pc, #284]	@ (800d47c <tcp_slowtmr+0x594>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d362:	429a      	cmp	r2, r3
 800d364:	d006      	beq.n	800d374 <tcp_slowtmr+0x48c>
 800d366:	4b46      	ldr	r3, [pc, #280]	@ (800d480 <tcp_slowtmr+0x598>)
 800d368:	f240 5271 	movw	r2, #1393	@ 0x571
 800d36c:	4947      	ldr	r1, [pc, #284]	@ (800d48c <tcp_slowtmr+0x5a4>)
 800d36e:	4846      	ldr	r0, [pc, #280]	@ (800d488 <tcp_slowtmr+0x5a0>)
 800d370:	f008 fb8e 	bl	8015a90 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	4a40      	ldr	r2, [pc, #256]	@ (800d47c <tcp_slowtmr+0x594>)
 800d37a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d37c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d380:	2b00      	cmp	r3, #0
 800d382:	d013      	beq.n	800d3ac <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d386:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d38c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d390:	3304      	adds	r3, #4
 800d392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d394:	8ad2      	ldrh	r2, [r2, #22]
 800d396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d398:	8b09      	ldrh	r1, [r1, #24]
 800d39a:	9102      	str	r1, [sp, #8]
 800d39c:	9201      	str	r2, [sp, #4]
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	462b      	mov	r3, r5
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	4601      	mov	r1, r0
 800d3a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3a8:	f004 f984 	bl	80116b4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b4:	7d1b      	ldrb	r3, [r3, #20]
 800d3b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d3c2:	6838      	ldr	r0, [r7, #0]
 800d3c4:	f7ff f9f2 	bl	800c7ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d3c8:	4b31      	ldr	r3, [pc, #196]	@ (800d490 <tcp_slowtmr+0x5a8>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d004      	beq.n	800d3de <tcp_slowtmr+0x4f6>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f06f 010c 	mvn.w	r1, #12
 800d3da:	68b8      	ldr	r0, [r7, #8]
 800d3dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d3de:	4b2c      	ldr	r3, [pc, #176]	@ (800d490 <tcp_slowtmr+0x5a8>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d037      	beq.n	800d456 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d3e6:	e592      	b.n	800cf0e <tcp_slowtmr+0x26>
      prev = pcb;
 800d3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f4:	7f1b      	ldrb	r3, [r3, #28]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d400:	7f1a      	ldrb	r2, [r3, #28]
 800d402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d404:	7f5b      	ldrb	r3, [r3, #29]
 800d406:	429a      	cmp	r2, r3
 800d408:	d325      	bcc.n	800d456 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d40c:	2200      	movs	r2, #0
 800d40e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d410:	4b1f      	ldr	r3, [pc, #124]	@ (800d490 <tcp_slowtmr+0x5a8>)
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00b      	beq.n	800d438 <tcp_slowtmr+0x550>
 800d420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d428:	6912      	ldr	r2, [r2, #16]
 800d42a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d42c:	4610      	mov	r0, r2
 800d42e:	4798      	blx	r3
 800d430:	4603      	mov	r3, r0
 800d432:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d436:	e002      	b.n	800d43e <tcp_slowtmr+0x556>
 800d438:	2300      	movs	r3, #0
 800d43a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d43e:	4b14      	ldr	r3, [pc, #80]	@ (800d490 <tcp_slowtmr+0x5a8>)
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f47f ad62 	bne.w	800cf0c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d448:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d102      	bne.n	800d456 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d452:	f003 fb7b 	bl	8010b4c <tcp_output>
  while (pcb != NULL) {
 800d456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f47f ad5e 	bne.w	800cf1a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d45e:	2300      	movs	r3, #0
 800d460:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d462:	4b0c      	ldr	r3, [pc, #48]	@ (800d494 <tcp_slowtmr+0x5ac>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d468:	e069      	b.n	800d53e <tcp_slowtmr+0x656>
 800d46a:	bf00      	nop
 800d46c:	20008c00 	.word	0x20008c00
 800d470:	000a4cb8 	.word	0x000a4cb8
 800d474:	10624dd3 	.word	0x10624dd3
 800d478:	000124f8 	.word	0x000124f8
 800d47c:	20008c0c 	.word	0x20008c0c
 800d480:	080174d4 	.word	0x080174d4
 800d484:	0801790c 	.word	0x0801790c
 800d488:	08017518 	.word	0x08017518
 800d48c:	08017938 	.word	0x08017938
 800d490:	20008c14 	.word	0x20008c14
 800d494:	20008c10 	.word	0x20008c10
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49a:	7d1b      	ldrb	r3, [r3, #20]
 800d49c:	2b0a      	cmp	r3, #10
 800d49e:	d006      	beq.n	800d4ae <tcp_slowtmr+0x5c6>
 800d4a0:	4b2b      	ldr	r3, [pc, #172]	@ (800d550 <tcp_slowtmr+0x668>)
 800d4a2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d4a6:	492b      	ldr	r1, [pc, #172]	@ (800d554 <tcp_slowtmr+0x66c>)
 800d4a8:	482b      	ldr	r0, [pc, #172]	@ (800d558 <tcp_slowtmr+0x670>)
 800d4aa:	f008 faf1 	bl	8015a90 <iprintf>
    pcb_remove = 0;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d4b4:	4b29      	ldr	r3, [pc, #164]	@ (800d55c <tcp_slowtmr+0x674>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ba:	6a1b      	ldr	r3, [r3, #32]
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	2bf0      	cmp	r3, #240	@ 0xf0
 800d4c0:	d904      	bls.n	800d4cc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d02f      	beq.n	800d534 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d4d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4d6:	f000 fb2b 	bl	800db30 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d010      	beq.n	800d502 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d4e0:	4b1f      	ldr	r3, [pc, #124]	@ (800d560 <tcp_slowtmr+0x678>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d106      	bne.n	800d4f8 <tcp_slowtmr+0x610>
 800d4ea:	4b19      	ldr	r3, [pc, #100]	@ (800d550 <tcp_slowtmr+0x668>)
 800d4ec:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d4f0:	491c      	ldr	r1, [pc, #112]	@ (800d564 <tcp_slowtmr+0x67c>)
 800d4f2:	4819      	ldr	r0, [pc, #100]	@ (800d558 <tcp_slowtmr+0x670>)
 800d4f4:	f008 facc 	bl	8015a90 <iprintf>
        prev->next = pcb->next;
 800d4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fe:	60da      	str	r2, [r3, #12]
 800d500:	e00f      	b.n	800d522 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d502:	4b17      	ldr	r3, [pc, #92]	@ (800d560 <tcp_slowtmr+0x678>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d508:	429a      	cmp	r2, r3
 800d50a:	d006      	beq.n	800d51a <tcp_slowtmr+0x632>
 800d50c:	4b10      	ldr	r3, [pc, #64]	@ (800d550 <tcp_slowtmr+0x668>)
 800d50e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d512:	4915      	ldr	r1, [pc, #84]	@ (800d568 <tcp_slowtmr+0x680>)
 800d514:	4810      	ldr	r0, [pc, #64]	@ (800d558 <tcp_slowtmr+0x670>)
 800d516:	f008 fabb 	bl	8015a90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	4a10      	ldr	r2, [pc, #64]	@ (800d560 <tcp_slowtmr+0x678>)
 800d520:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d52c:	69f8      	ldr	r0, [r7, #28]
 800d52e:	f7ff f93d 	bl	800c7ac <tcp_free>
 800d532:	e004      	b.n	800d53e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1a9      	bne.n	800d498 <tcp_slowtmr+0x5b0>
    }
  }
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop
 800d548:	3730      	adds	r7, #48	@ 0x30
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bdb0      	pop	{r4, r5, r7, pc}
 800d54e:	bf00      	nop
 800d550:	080174d4 	.word	0x080174d4
 800d554:	08017964 	.word	0x08017964
 800d558:	08017518 	.word	0x08017518
 800d55c:	20008c00 	.word	0x20008c00
 800d560:	20008c10 	.word	0x20008c10
 800d564:	08017994 	.word	0x08017994
 800d568:	080179bc 	.word	0x080179bc

0800d56c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d572:	4b2d      	ldr	r3, [pc, #180]	@ (800d628 <tcp_fasttmr+0xbc>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	3301      	adds	r3, #1
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	4b2b      	ldr	r3, [pc, #172]	@ (800d628 <tcp_fasttmr+0xbc>)
 800d57c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d57e:	4b2b      	ldr	r3, [pc, #172]	@ (800d62c <tcp_fasttmr+0xc0>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d584:	e048      	b.n	800d618 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	7f9a      	ldrb	r2, [r3, #30]
 800d58a:	4b27      	ldr	r3, [pc, #156]	@ (800d628 <tcp_fasttmr+0xbc>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d03f      	beq.n	800d612 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d592:	4b25      	ldr	r3, [pc, #148]	@ (800d628 <tcp_fasttmr+0xbc>)
 800d594:	781a      	ldrb	r2, [r3, #0]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	8b5b      	ldrh	r3, [r3, #26]
 800d59e:	f003 0301 	and.w	r3, r3, #1
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d010      	beq.n	800d5c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	8b5b      	ldrh	r3, [r3, #26]
 800d5aa:	f043 0302 	orr.w	r3, r3, #2
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f003 fac9 	bl	8010b4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	8b5b      	ldrh	r3, [r3, #26]
 800d5be:	f023 0303 	bic.w	r3, r3, #3
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	8b5b      	ldrh	r3, [r3, #26]
 800d5cc:	f003 0308 	and.w	r3, r3, #8
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d009      	beq.n	800d5e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	8b5b      	ldrh	r3, [r3, #26]
 800d5d8:	f023 0308 	bic.w	r3, r3, #8
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7ff fa76 	bl	800cad4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00a      	beq.n	800d60c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d5f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d630 <tcp_fasttmr+0xc4>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 f819 	bl	800d634 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d602:	4b0b      	ldr	r3, [pc, #44]	@ (800d630 <tcp_fasttmr+0xc4>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d000      	beq.n	800d60c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d60a:	e7b8      	b.n	800d57e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	607b      	str	r3, [r7, #4]
 800d610:	e002      	b.n	800d618 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1b3      	bne.n	800d586 <tcp_fasttmr+0x1a>
    }
  }
}
 800d61e:	bf00      	nop
 800d620:	bf00      	nop
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20008c16 	.word	0x20008c16
 800d62c:	20008c0c 	.word	0x20008c0c
 800d630:	20008c14 	.word	0x20008c14

0800d634 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d634:	b590      	push	{r4, r7, lr}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d109      	bne.n	800d656 <tcp_process_refused_data+0x22>
 800d642:	4b37      	ldr	r3, [pc, #220]	@ (800d720 <tcp_process_refused_data+0xec>)
 800d644:	f240 6209 	movw	r2, #1545	@ 0x609
 800d648:	4936      	ldr	r1, [pc, #216]	@ (800d724 <tcp_process_refused_data+0xf0>)
 800d64a:	4837      	ldr	r0, [pc, #220]	@ (800d728 <tcp_process_refused_data+0xf4>)
 800d64c:	f008 fa20 	bl	8015a90 <iprintf>
 800d650:	f06f 030f 	mvn.w	r3, #15
 800d654:	e060      	b.n	800d718 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d65a:	7b5b      	ldrb	r3, [r3, #13]
 800d65c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d662:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00b      	beq.n	800d68c <tcp_process_refused_data+0x58>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6918      	ldr	r0, [r3, #16]
 800d67e:	2300      	movs	r3, #0
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	6879      	ldr	r1, [r7, #4]
 800d684:	47a0      	blx	r4
 800d686:	4603      	mov	r3, r0
 800d688:	73fb      	strb	r3, [r7, #15]
 800d68a:	e007      	b.n	800d69c <tcp_process_refused_data+0x68>
 800d68c:	2300      	movs	r3, #0
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	2000      	movs	r0, #0
 800d694:	f000 f8a4 	bl	800d7e0 <tcp_recv_null>
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d12a      	bne.n	800d6fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
 800d6a6:	f003 0320 	and.w	r3, r3, #32
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d033      	beq.n	800d716 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6b2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d6b6:	d005      	beq.n	800d6c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6bc:	3301      	adds	r3, #1
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00b      	beq.n	800d6e6 <tcp_process_refused_data+0xb2>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6918      	ldr	r0, [r3, #16]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	2200      	movs	r2, #0
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	47a0      	blx	r4
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73fb      	strb	r3, [r7, #15]
 800d6e4:	e001      	b.n	800d6ea <tcp_process_refused_data+0xb6>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ee:	f113 0f0d 	cmn.w	r3, #13
 800d6f2:	d110      	bne.n	800d716 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d6f4:	f06f 030c 	mvn.w	r3, #12
 800d6f8:	e00e      	b.n	800d718 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6fe:	f113 0f0d 	cmn.w	r3, #13
 800d702:	d102      	bne.n	800d70a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d704:	f06f 030c 	mvn.w	r3, #12
 800d708:	e006      	b.n	800d718 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d710:	f06f 0304 	mvn.w	r3, #4
 800d714:	e000      	b.n	800d718 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d716:	2300      	movs	r3, #0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd90      	pop	{r4, r7, pc}
 800d720:	080174d4 	.word	0x080174d4
 800d724:	080179e4 	.word	0x080179e4
 800d728:	08017518 	.word	0x08017518

0800d72c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d734:	e007      	b.n	800d746 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f80a 	bl	800d756 <tcp_seg_free>
    seg = next;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f4      	bne.n	800d736 <tcp_segs_free+0xa>
  }
}
 800d74c:	bf00      	nop
 800d74e:	bf00      	nop
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b082      	sub	sp, #8
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00c      	beq.n	800d77e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d004      	beq.n	800d776 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fd6b 	bl	800c24c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d776:	6879      	ldr	r1, [r7, #4]
 800d778:	2003      	movs	r0, #3
 800d77a:	f7fd fef1 	bl	800b560 <memp_free>
  }
}
 800d77e:	bf00      	nop
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d106      	bne.n	800d7a4 <tcp_seg_copy+0x1c>
 800d796:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d4 <tcp_seg_copy+0x4c>)
 800d798:	f240 6282 	movw	r2, #1666	@ 0x682
 800d79c:	490e      	ldr	r1, [pc, #56]	@ (800d7d8 <tcp_seg_copy+0x50>)
 800d79e:	480f      	ldr	r0, [pc, #60]	@ (800d7dc <tcp_seg_copy+0x54>)
 800d7a0:	f008 f976 	bl	8015a90 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d7a4:	2003      	movs	r0, #3
 800d7a6:	f7fd fe6b 	bl	800b480 <memp_malloc>
 800d7aa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d101      	bne.n	800d7b6 <tcp_seg_copy+0x2e>
    return NULL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	e00a      	b.n	800d7cc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d7b6:	2210      	movs	r2, #16
 800d7b8:	6879      	ldr	r1, [r7, #4]
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f008 fb75 	bl	8015eaa <memcpy>
  pbuf_ref(cseg->p);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fe fde1 	bl	800c38c <pbuf_ref>
  return cseg;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	080174d4 	.word	0x080174d4
 800d7d8:	08017a28 	.word	0x08017a28
 800d7dc:	08017518 	.word	0x08017518

0800d7e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
 800d7ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d109      	bne.n	800d808 <tcp_recv_null+0x28>
 800d7f4:	4b12      	ldr	r3, [pc, #72]	@ (800d840 <tcp_recv_null+0x60>)
 800d7f6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d7fa:	4912      	ldr	r1, [pc, #72]	@ (800d844 <tcp_recv_null+0x64>)
 800d7fc:	4812      	ldr	r0, [pc, #72]	@ (800d848 <tcp_recv_null+0x68>)
 800d7fe:	f008 f947 	bl	8015a90 <iprintf>
 800d802:	f06f 030f 	mvn.w	r3, #15
 800d806:	e016      	b.n	800d836 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d009      	beq.n	800d822 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	891b      	ldrh	r3, [r3, #8]
 800d812:	4619      	mov	r1, r3
 800d814:	68b8      	ldr	r0, [r7, #8]
 800d816:	f7ff fb17 	bl	800ce48 <tcp_recved>
    pbuf_free(p);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7fe fd16 	bl	800c24c <pbuf_free>
 800d820:	e008      	b.n	800d834 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d104      	bne.n	800d834 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d82a:	68b8      	ldr	r0, [r7, #8]
 800d82c:	f7ff f9bc 	bl	800cba8 <tcp_close>
 800d830:	4603      	mov	r3, r0
 800d832:	e000      	b.n	800d836 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	080174d4 	.word	0x080174d4
 800d844:	08017a44 	.word	0x08017a44
 800d848:	08017518 	.word	0x08017518

0800d84c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b086      	sub	sp, #24
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	db01      	blt.n	800d862 <tcp_kill_prio+0x16>
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	e000      	b.n	800d864 <tcp_kill_prio+0x18>
 800d862:	237f      	movs	r3, #127	@ 0x7f
 800d864:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d866:	7afb      	ldrb	r3, [r7, #11]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d034      	beq.n	800d8d6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d86c:	7afb      	ldrb	r3, [r7, #11]
 800d86e:	3b01      	subs	r3, #1
 800d870:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d876:	2300      	movs	r3, #0
 800d878:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d87a:	4b19      	ldr	r3, [pc, #100]	@ (800d8e0 <tcp_kill_prio+0x94>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	617b      	str	r3, [r7, #20]
 800d880:	e01f      	b.n	800d8c2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	7d5b      	ldrb	r3, [r3, #21]
 800d886:	7afa      	ldrb	r2, [r7, #11]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d80c      	bhi.n	800d8a6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d890:	7afa      	ldrb	r2, [r7, #11]
 800d892:	429a      	cmp	r2, r3
 800d894:	d112      	bne.n	800d8bc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d896:	4b13      	ldr	r3, [pc, #76]	@ (800d8e4 <tcp_kill_prio+0x98>)
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d80a      	bhi.n	800d8bc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d8e4 <tcp_kill_prio+0x98>)
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	7d5b      	ldrb	r3, [r3, #21]
 800d8ba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	617b      	str	r3, [r7, #20]
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1dc      	bne.n	800d882 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d004      	beq.n	800d8d8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d8ce:	6938      	ldr	r0, [r7, #16]
 800d8d0:	f7ff fa54 	bl	800cd7c <tcp_abort>
 800d8d4:	e000      	b.n	800d8d8 <tcp_kill_prio+0x8c>
    return;
 800d8d6:	bf00      	nop
  }
}
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20008c0c 	.word	0x20008c0c
 800d8e4:	20008c00 	.word	0x20008c00

0800d8e8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d8f2:	79fb      	ldrb	r3, [r7, #7]
 800d8f4:	2b08      	cmp	r3, #8
 800d8f6:	d009      	beq.n	800d90c <tcp_kill_state+0x24>
 800d8f8:	79fb      	ldrb	r3, [r7, #7]
 800d8fa:	2b09      	cmp	r3, #9
 800d8fc:	d006      	beq.n	800d90c <tcp_kill_state+0x24>
 800d8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d968 <tcp_kill_state+0x80>)
 800d900:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d904:	4919      	ldr	r1, [pc, #100]	@ (800d96c <tcp_kill_state+0x84>)
 800d906:	481a      	ldr	r0, [pc, #104]	@ (800d970 <tcp_kill_state+0x88>)
 800d908:	f008 f8c2 	bl	8015a90 <iprintf>

  inactivity = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d910:	2300      	movs	r3, #0
 800d912:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d914:	4b17      	ldr	r3, [pc, #92]	@ (800d974 <tcp_kill_state+0x8c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	617b      	str	r3, [r7, #20]
 800d91a:	e017      	b.n	800d94c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	7d1b      	ldrb	r3, [r3, #20]
 800d920:	79fa      	ldrb	r2, [r7, #7]
 800d922:	429a      	cmp	r2, r3
 800d924:	d10f      	bne.n	800d946 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d926:	4b14      	ldr	r3, [pc, #80]	@ (800d978 <tcp_kill_state+0x90>)
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	6a1b      	ldr	r3, [r3, #32]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	429a      	cmp	r2, r3
 800d934:	d807      	bhi.n	800d946 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d936:	4b10      	ldr	r3, [pc, #64]	@ (800d978 <tcp_kill_state+0x90>)
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	617b      	str	r3, [r7, #20]
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e4      	bne.n	800d91c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d003      	beq.n	800d960 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d958:	2100      	movs	r1, #0
 800d95a:	6938      	ldr	r0, [r7, #16]
 800d95c:	f7ff f950 	bl	800cc00 <tcp_abandon>
  }
}
 800d960:	bf00      	nop
 800d962:	3718      	adds	r7, #24
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	080174d4 	.word	0x080174d4
 800d96c:	08017a60 	.word	0x08017a60
 800d970:	08017518 	.word	0x08017518
 800d974:	20008c0c 	.word	0x20008c0c
 800d978:	20008c00 	.word	0x20008c00

0800d97c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d986:	2300      	movs	r3, #0
 800d988:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d98a:	4b12      	ldr	r3, [pc, #72]	@ (800d9d4 <tcp_kill_timewait+0x58>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	e012      	b.n	800d9b8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d992:	4b11      	ldr	r3, [pc, #68]	@ (800d9d8 <tcp_kill_timewait+0x5c>)
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6a1b      	ldr	r3, [r3, #32]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d807      	bhi.n	800d9b2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d8 <tcp_kill_timewait+0x5c>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	1ad3      	subs	r3, r2, r3
 800d9ac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	60fb      	str	r3, [r7, #12]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1e9      	bne.n	800d992 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d002      	beq.n	800d9ca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d9c4:	68b8      	ldr	r0, [r7, #8]
 800d9c6:	f7ff f9d9 	bl	800cd7c <tcp_abort>
  }
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20008c10 	.word	0x20008c10
 800d9d8:	20008c00 	.word	0x20008c00

0800d9dc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d9e2:	4b10      	ldr	r3, [pc, #64]	@ (800da24 <tcp_handle_closepend+0x48>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d9e8:	e014      	b.n	800da14 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	8b5b      	ldrh	r3, [r3, #26]
 800d9f4:	f003 0308 	and.w	r3, r3, #8
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d009      	beq.n	800da10 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	8b5b      	ldrh	r3, [r3, #26]
 800da00:	f023 0308 	bic.w	r3, r3, #8
 800da04:	b29a      	uxth	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff f862 	bl	800cad4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1e7      	bne.n	800d9ea <tcp_handle_closepend+0xe>
  }
}
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	20008c0c 	.word	0x20008c0c

0800da28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	4603      	mov	r3, r0
 800da30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da32:	2001      	movs	r0, #1
 800da34:	f7fd fd24 	bl	800b480 <memp_malloc>
 800da38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d126      	bne.n	800da8e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800da40:	f7ff ffcc 	bl	800d9dc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da44:	f7ff ff9a 	bl	800d97c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da48:	2001      	movs	r0, #1
 800da4a:	f7fd fd19 	bl	800b480 <memp_malloc>
 800da4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d11b      	bne.n	800da8e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da56:	2009      	movs	r0, #9
 800da58:	f7ff ff46 	bl	800d8e8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da5c:	2001      	movs	r0, #1
 800da5e:	f7fd fd0f 	bl	800b480 <memp_malloc>
 800da62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d111      	bne.n	800da8e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800da6a:	2008      	movs	r0, #8
 800da6c:	f7ff ff3c 	bl	800d8e8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da70:	2001      	movs	r0, #1
 800da72:	f7fd fd05 	bl	800b480 <memp_malloc>
 800da76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d107      	bne.n	800da8e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff fee3 	bl	800d84c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da86:	2001      	movs	r0, #1
 800da88:	f7fd fcfa 	bl	800b480 <memp_malloc>
 800da8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d03f      	beq.n	800db14 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800da94:	229c      	movs	r2, #156	@ 0x9c
 800da96:	2100      	movs	r1, #0
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f008 f951 	bl	8015d40 <memset>
    pcb->prio = prio;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	79fa      	ldrb	r2, [r7, #7]
 800daa2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800daaa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	22ff      	movs	r2, #255	@ 0xff
 800dac2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800daca:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2206      	movs	r2, #6
 800dad0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2206      	movs	r2, #6
 800dad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dae0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800daea:	4b0d      	ldr	r3, [pc, #52]	@ (800db20 <tcp_alloc+0xf8>)
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800daf2:	4b0c      	ldr	r3, [pc, #48]	@ (800db24 <tcp_alloc+0xfc>)
 800daf4:	781a      	ldrb	r2, [r3, #0]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800db00:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	4a08      	ldr	r2, [pc, #32]	@ (800db28 <tcp_alloc+0x100>)
 800db08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	4a07      	ldr	r2, [pc, #28]	@ (800db2c <tcp_alloc+0x104>)
 800db10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800db14:	68fb      	ldr	r3, [r7, #12]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20008c00 	.word	0x20008c00
 800db24:	20008c16 	.word	0x20008c16
 800db28:	0800d7e1 	.word	0x0800d7e1
 800db2c:	006ddd00 	.word	0x006ddd00

0800db30 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d107      	bne.n	800db4e <tcp_pcb_purge+0x1e>
 800db3e:	4b21      	ldr	r3, [pc, #132]	@ (800dbc4 <tcp_pcb_purge+0x94>)
 800db40:	f640 0251 	movw	r2, #2129	@ 0x851
 800db44:	4920      	ldr	r1, [pc, #128]	@ (800dbc8 <tcp_pcb_purge+0x98>)
 800db46:	4821      	ldr	r0, [pc, #132]	@ (800dbcc <tcp_pcb_purge+0x9c>)
 800db48:	f007 ffa2 	bl	8015a90 <iprintf>
 800db4c:	e037      	b.n	800dbbe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	7d1b      	ldrb	r3, [r3, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d033      	beq.n	800dbbe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800db5a:	2b0a      	cmp	r3, #10
 800db5c:	d02f      	beq.n	800dbbe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800db62:	2b01      	cmp	r3, #1
 800db64:	d02b      	beq.n	800dbbe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d007      	beq.n	800db7e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe fb6a 	bl	800c24c <pbuf_free>
      pcb->refused_data = NULL;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 f986 	bl	800de98 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db92:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fdc7 	bl	800d72c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff fdc2 	bl	800d72c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	080174d4 	.word	0x080174d4
 800dbc8:	08017b20 	.word	0x08017b20
 800dbcc:	08017518 	.word	0x08017518

0800dbd0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d106      	bne.n	800dbee <tcp_pcb_remove+0x1e>
 800dbe0:	4b3e      	ldr	r3, [pc, #248]	@ (800dcdc <tcp_pcb_remove+0x10c>)
 800dbe2:	f640 0283 	movw	r2, #2179	@ 0x883
 800dbe6:	493e      	ldr	r1, [pc, #248]	@ (800dce0 <tcp_pcb_remove+0x110>)
 800dbe8:	483e      	ldr	r0, [pc, #248]	@ (800dce4 <tcp_pcb_remove+0x114>)
 800dbea:	f007 ff51 	bl	8015a90 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <tcp_pcb_remove+0x32>
 800dbf4:	4b39      	ldr	r3, [pc, #228]	@ (800dcdc <tcp_pcb_remove+0x10c>)
 800dbf6:	f640 0284 	movw	r2, #2180	@ 0x884
 800dbfa:	493b      	ldr	r1, [pc, #236]	@ (800dce8 <tcp_pcb_remove+0x118>)
 800dbfc:	4839      	ldr	r0, [pc, #228]	@ (800dce4 <tcp_pcb_remove+0x114>)
 800dbfe:	f007 ff47 	bl	8015a90 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d105      	bne.n	800dc18 <tcp_pcb_remove+0x48>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68da      	ldr	r2, [r3, #12]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	e013      	b.n	800dc40 <tcp_pcb_remove+0x70>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	60fb      	str	r3, [r7, #12]
 800dc1e:	e00c      	b.n	800dc3a <tcp_pcb_remove+0x6a>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d104      	bne.n	800dc34 <tcp_pcb_remove+0x64>
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	68da      	ldr	r2, [r3, #12]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	60da      	str	r2, [r3, #12]
 800dc32:	e005      	b.n	800dc40 <tcp_pcb_remove+0x70>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	60fb      	str	r3, [r7, #12]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1ef      	bne.n	800dc20 <tcp_pcb_remove+0x50>
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	2200      	movs	r2, #0
 800dc44:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dc46:	6838      	ldr	r0, [r7, #0]
 800dc48:	f7ff ff72 	bl	800db30 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	7d1b      	ldrb	r3, [r3, #20]
 800dc50:	2b0a      	cmp	r3, #10
 800dc52:	d013      	beq.n	800dc7c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d00f      	beq.n	800dc7c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	8b5b      	ldrh	r3, [r3, #26]
 800dc60:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d009      	beq.n	800dc7c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	8b5b      	ldrh	r3, [r3, #26]
 800dc6c:	f043 0302 	orr.w	r3, r3, #2
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc76:	6838      	ldr	r0, [r7, #0]
 800dc78:	f002 ff68 	bl	8010b4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	7d1b      	ldrb	r3, [r3, #20]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d020      	beq.n	800dcc6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d006      	beq.n	800dc9a <tcp_pcb_remove+0xca>
 800dc8c:	4b13      	ldr	r3, [pc, #76]	@ (800dcdc <tcp_pcb_remove+0x10c>)
 800dc8e:	f640 0293 	movw	r2, #2195	@ 0x893
 800dc92:	4916      	ldr	r1, [pc, #88]	@ (800dcec <tcp_pcb_remove+0x11c>)
 800dc94:	4813      	ldr	r0, [pc, #76]	@ (800dce4 <tcp_pcb_remove+0x114>)
 800dc96:	f007 fefb 	bl	8015a90 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d006      	beq.n	800dcb0 <tcp_pcb_remove+0xe0>
 800dca2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcdc <tcp_pcb_remove+0x10c>)
 800dca4:	f640 0294 	movw	r2, #2196	@ 0x894
 800dca8:	4911      	ldr	r1, [pc, #68]	@ (800dcf0 <tcp_pcb_remove+0x120>)
 800dcaa:	480e      	ldr	r0, [pc, #56]	@ (800dce4 <tcp_pcb_remove+0x114>)
 800dcac:	f007 fef0 	bl	8015a90 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d006      	beq.n	800dcc6 <tcp_pcb_remove+0xf6>
 800dcb8:	4b08      	ldr	r3, [pc, #32]	@ (800dcdc <tcp_pcb_remove+0x10c>)
 800dcba:	f640 0296 	movw	r2, #2198	@ 0x896
 800dcbe:	490d      	ldr	r1, [pc, #52]	@ (800dcf4 <tcp_pcb_remove+0x124>)
 800dcc0:	4808      	ldr	r0, [pc, #32]	@ (800dce4 <tcp_pcb_remove+0x114>)
 800dcc2:	f007 fee5 	bl	8015a90 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dcd2:	bf00      	nop
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	080174d4 	.word	0x080174d4
 800dce0:	08017b3c 	.word	0x08017b3c
 800dce4:	08017518 	.word	0x08017518
 800dce8:	08017b58 	.word	0x08017b58
 800dcec:	08017b78 	.word	0x08017b78
 800dcf0:	08017b90 	.word	0x08017b90
 800dcf4:	08017bac 	.word	0x08017bac

0800dcf8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <tcp_next_iss+0x1c>
 800dd06:	4b0a      	ldr	r3, [pc, #40]	@ (800dd30 <tcp_next_iss+0x38>)
 800dd08:	f640 02af 	movw	r2, #2223	@ 0x8af
 800dd0c:	4909      	ldr	r1, [pc, #36]	@ (800dd34 <tcp_next_iss+0x3c>)
 800dd0e:	480a      	ldr	r0, [pc, #40]	@ (800dd38 <tcp_next_iss+0x40>)
 800dd10:	f007 febe 	bl	8015a90 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dd14:	4b09      	ldr	r3, [pc, #36]	@ (800dd3c <tcp_next_iss+0x44>)
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	4b09      	ldr	r3, [pc, #36]	@ (800dd40 <tcp_next_iss+0x48>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	4a07      	ldr	r2, [pc, #28]	@ (800dd3c <tcp_next_iss+0x44>)
 800dd20:	6013      	str	r3, [r2, #0]
  return iss;
 800dd22:	4b06      	ldr	r3, [pc, #24]	@ (800dd3c <tcp_next_iss+0x44>)
 800dd24:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	080174d4 	.word	0x080174d4
 800dd34:	08017bc4 	.word	0x08017bc4
 800dd38:	08017518 	.word	0x08017518
 800dd3c:	20000024 	.word	0x20000024
 800dd40:	20008c00 	.word	0x20008c00

0800dd44 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
 800dd50:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d106      	bne.n	800dd66 <tcp_eff_send_mss_netif+0x22>
 800dd58:	4b14      	ldr	r3, [pc, #80]	@ (800ddac <tcp_eff_send_mss_netif+0x68>)
 800dd5a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800dd5e:	4914      	ldr	r1, [pc, #80]	@ (800ddb0 <tcp_eff_send_mss_netif+0x6c>)
 800dd60:	4814      	ldr	r0, [pc, #80]	@ (800ddb4 <tcp_eff_send_mss_netif+0x70>)
 800dd62:	f007 fe95 	bl	8015a90 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d101      	bne.n	800dd70 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	e019      	b.n	800dda4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dd74:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dd76:	8afb      	ldrh	r3, [r7, #22]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d012      	beq.n	800dda2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dd7c:	2328      	movs	r3, #40	@ 0x28
 800dd7e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dd80:	8afa      	ldrh	r2, [r7, #22]
 800dd82:	8abb      	ldrh	r3, [r7, #20]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d904      	bls.n	800dd92 <tcp_eff_send_mss_netif+0x4e>
 800dd88:	8afa      	ldrh	r2, [r7, #22]
 800dd8a:	8abb      	ldrh	r3, [r7, #20]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	e000      	b.n	800dd94 <tcp_eff_send_mss_netif+0x50>
 800dd92:	2300      	movs	r3, #0
 800dd94:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dd96:	8a7a      	ldrh	r2, [r7, #18]
 800dd98:	89fb      	ldrh	r3, [r7, #14]
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	bf28      	it	cs
 800dd9e:	4613      	movcs	r3, r2
 800dda0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dda2:	89fb      	ldrh	r3, [r7, #14]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3718      	adds	r7, #24
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	080174d4 	.word	0x080174d4
 800ddb0:	08017be0 	.word	0x08017be0
 800ddb4:	08017518 	.word	0x08017518

0800ddb8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d119      	bne.n	800de00 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ddcc:	4b10      	ldr	r3, [pc, #64]	@ (800de10 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ddce:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ddd2:	4910      	ldr	r1, [pc, #64]	@ (800de14 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ddd4:	4810      	ldr	r0, [pc, #64]	@ (800de18 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ddd6:	f007 fe5b 	bl	8015a90 <iprintf>

  while (pcb != NULL) {
 800ddda:	e011      	b.n	800de00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d108      	bne.n	800ddfa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f7fe ffc4 	bl	800cd7c <tcp_abort>
      pcb = next;
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	60fb      	str	r3, [r7, #12]
 800ddf8:	e002      	b.n	800de00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1ea      	bne.n	800dddc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800de06:	bf00      	nop
 800de08:	bf00      	nop
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	080174d4 	.word	0x080174d4
 800de14:	08017c08 	.word	0x08017c08
 800de18:	08017518 	.word	0x08017518

0800de1c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d02a      	beq.n	800de82 <tcp_netif_ip_addr_changed+0x66>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d026      	beq.n	800de82 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800de34:	4b15      	ldr	r3, [pc, #84]	@ (800de8c <tcp_netif_ip_addr_changed+0x70>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4619      	mov	r1, r3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff ffbc 	bl	800ddb8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800de40:	4b13      	ldr	r3, [pc, #76]	@ (800de90 <tcp_netif_ip_addr_changed+0x74>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff ffb6 	bl	800ddb8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d017      	beq.n	800de82 <tcp_netif_ip_addr_changed+0x66>
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d013      	beq.n	800de82 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de5a:	4b0e      	ldr	r3, [pc, #56]	@ (800de94 <tcp_netif_ip_addr_changed+0x78>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	e00c      	b.n	800de7c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d103      	bne.n	800de76 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1ef      	bne.n	800de62 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800de82:	bf00      	nop
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20008c0c 	.word	0x20008c0c
 800de90:	20008c04 	.word	0x20008c04
 800de94:	20008c08 	.word	0x20008c08

0800de98 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d007      	beq.n	800deb8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deac:	4618      	mov	r0, r3
 800deae:	f7ff fc3d 	bl	800d72c <tcp_segs_free>
    pcb->ooseq = NULL;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dec0:	b590      	push	{r4, r7, lr}
 800dec2:	b08d      	sub	sp, #52	@ 0x34
 800dec4:	af04      	add	r7, sp, #16
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d105      	bne.n	800dedc <tcp_input+0x1c>
 800ded0:	4b9b      	ldr	r3, [pc, #620]	@ (800e140 <tcp_input+0x280>)
 800ded2:	2283      	movs	r2, #131	@ 0x83
 800ded4:	499b      	ldr	r1, [pc, #620]	@ (800e144 <tcp_input+0x284>)
 800ded6:	489c      	ldr	r0, [pc, #624]	@ (800e148 <tcp_input+0x288>)
 800ded8:	f007 fdda 	bl	8015a90 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	4a9a      	ldr	r2, [pc, #616]	@ (800e14c <tcp_input+0x28c>)
 800dee2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	895b      	ldrh	r3, [r3, #10]
 800dee8:	2b13      	cmp	r3, #19
 800deea:	f240 83d1 	bls.w	800e690 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800deee:	4b98      	ldr	r3, [pc, #608]	@ (800e150 <tcp_input+0x290>)
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	4a97      	ldr	r2, [pc, #604]	@ (800e150 <tcp_input+0x290>)
 800def4:	6812      	ldr	r2, [r2, #0]
 800def6:	4611      	mov	r1, r2
 800def8:	4618      	mov	r0, r3
 800defa:	f005 ff01 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	f040 83c7 	bne.w	800e694 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800df06:	4b92      	ldr	r3, [pc, #584]	@ (800e150 <tcp_input+0x290>)
 800df08:	695b      	ldr	r3, [r3, #20]
 800df0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df0e:	2be0      	cmp	r3, #224	@ 0xe0
 800df10:	f000 83c0 	beq.w	800e694 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800df14:	4b8d      	ldr	r3, [pc, #564]	@ (800e14c <tcp_input+0x28c>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	899b      	ldrh	r3, [r3, #12]
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fc fe37 	bl	800ab90 <lwip_htons>
 800df22:	4603      	mov	r3, r0
 800df24:	0b1b      	lsrs	r3, r3, #12
 800df26:	b29b      	uxth	r3, r3
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800df2e:	7cbb      	ldrb	r3, [r7, #18]
 800df30:	2b13      	cmp	r3, #19
 800df32:	f240 83b1 	bls.w	800e698 <tcp_input+0x7d8>
 800df36:	7cbb      	ldrb	r3, [r7, #18]
 800df38:	b29a      	uxth	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	891b      	ldrh	r3, [r3, #8]
 800df3e:	429a      	cmp	r2, r3
 800df40:	f200 83aa 	bhi.w	800e698 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800df44:	7cbb      	ldrb	r3, [r7, #18]
 800df46:	b29b      	uxth	r3, r3
 800df48:	3b14      	subs	r3, #20
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	4b81      	ldr	r3, [pc, #516]	@ (800e154 <tcp_input+0x294>)
 800df4e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800df50:	4b81      	ldr	r3, [pc, #516]	@ (800e158 <tcp_input+0x298>)
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	895a      	ldrh	r2, [r3, #10]
 800df5a:	7cbb      	ldrb	r3, [r7, #18]
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	429a      	cmp	r2, r3
 800df60:	d309      	bcc.n	800df76 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800df62:	4b7c      	ldr	r3, [pc, #496]	@ (800e154 <tcp_input+0x294>)
 800df64:	881a      	ldrh	r2, [r3, #0]
 800df66:	4b7d      	ldr	r3, [pc, #500]	@ (800e15c <tcp_input+0x29c>)
 800df68:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800df6a:	7cbb      	ldrb	r3, [r7, #18]
 800df6c:	4619      	mov	r1, r3
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7fe f8e6 	bl	800c140 <pbuf_remove_header>
 800df74:	e04e      	b.n	800e014 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d105      	bne.n	800df8a <tcp_input+0xca>
 800df7e:	4b70      	ldr	r3, [pc, #448]	@ (800e140 <tcp_input+0x280>)
 800df80:	22c2      	movs	r2, #194	@ 0xc2
 800df82:	4977      	ldr	r1, [pc, #476]	@ (800e160 <tcp_input+0x2a0>)
 800df84:	4870      	ldr	r0, [pc, #448]	@ (800e148 <tcp_input+0x288>)
 800df86:	f007 fd83 	bl	8015a90 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800df8a:	2114      	movs	r1, #20
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7fe f8d7 	bl	800c140 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	895a      	ldrh	r2, [r3, #10]
 800df96:	4b71      	ldr	r3, [pc, #452]	@ (800e15c <tcp_input+0x29c>)
 800df98:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800df9a:	4b6e      	ldr	r3, [pc, #440]	@ (800e154 <tcp_input+0x294>)
 800df9c:	881a      	ldrh	r2, [r3, #0]
 800df9e:	4b6f      	ldr	r3, [pc, #444]	@ (800e15c <tcp_input+0x29c>)
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	1ad3      	subs	r3, r2, r3
 800dfa4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dfa6:	4b6d      	ldr	r3, [pc, #436]	@ (800e15c <tcp_input+0x29c>)
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7fe f8c7 	bl	800c140 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	895b      	ldrh	r3, [r3, #10]
 800dfb8:	8a3a      	ldrh	r2, [r7, #16]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	f200 836e 	bhi.w	800e69c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	4a64      	ldr	r2, [pc, #400]	@ (800e158 <tcp_input+0x298>)
 800dfc8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	8a3a      	ldrh	r2, [r7, #16]
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe f8b4 	bl	800c140 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	891a      	ldrh	r2, [r3, #8]
 800dfdc:	8a3b      	ldrh	r3, [r7, #16]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	895b      	ldrh	r3, [r3, #10]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d005      	beq.n	800dffa <tcp_input+0x13a>
 800dfee:	4b54      	ldr	r3, [pc, #336]	@ (800e140 <tcp_input+0x280>)
 800dff0:	22df      	movs	r2, #223	@ 0xdf
 800dff2:	495c      	ldr	r1, [pc, #368]	@ (800e164 <tcp_input+0x2a4>)
 800dff4:	4854      	ldr	r0, [pc, #336]	@ (800e148 <tcp_input+0x288>)
 800dff6:	f007 fd4b 	bl	8015a90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	891a      	ldrh	r2, [r3, #8]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	891b      	ldrh	r3, [r3, #8]
 800e004:	429a      	cmp	r2, r3
 800e006:	d005      	beq.n	800e014 <tcp_input+0x154>
 800e008:	4b4d      	ldr	r3, [pc, #308]	@ (800e140 <tcp_input+0x280>)
 800e00a:	22e0      	movs	r2, #224	@ 0xe0
 800e00c:	4956      	ldr	r1, [pc, #344]	@ (800e168 <tcp_input+0x2a8>)
 800e00e:	484e      	ldr	r0, [pc, #312]	@ (800e148 <tcp_input+0x288>)
 800e010:	f007 fd3e 	bl	8015a90 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e014:	4b4d      	ldr	r3, [pc, #308]	@ (800e14c <tcp_input+0x28c>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4a4b      	ldr	r2, [pc, #300]	@ (800e14c <tcp_input+0x28c>)
 800e01e:	6814      	ldr	r4, [r2, #0]
 800e020:	4618      	mov	r0, r3
 800e022:	f7fc fdb5 	bl	800ab90 <lwip_htons>
 800e026:	4603      	mov	r3, r0
 800e028:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e02a:	4b48      	ldr	r3, [pc, #288]	@ (800e14c <tcp_input+0x28c>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	885b      	ldrh	r3, [r3, #2]
 800e030:	b29b      	uxth	r3, r3
 800e032:	4a46      	ldr	r2, [pc, #280]	@ (800e14c <tcp_input+0x28c>)
 800e034:	6814      	ldr	r4, [r2, #0]
 800e036:	4618      	mov	r0, r3
 800e038:	f7fc fdaa 	bl	800ab90 <lwip_htons>
 800e03c:	4603      	mov	r3, r0
 800e03e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e040:	4b42      	ldr	r3, [pc, #264]	@ (800e14c <tcp_input+0x28c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	4a41      	ldr	r2, [pc, #260]	@ (800e14c <tcp_input+0x28c>)
 800e048:	6814      	ldr	r4, [r2, #0]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fc fdb5 	bl	800abba <lwip_htonl>
 800e050:	4603      	mov	r3, r0
 800e052:	6063      	str	r3, [r4, #4]
 800e054:	6863      	ldr	r3, [r4, #4]
 800e056:	4a45      	ldr	r2, [pc, #276]	@ (800e16c <tcp_input+0x2ac>)
 800e058:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e05a:	4b3c      	ldr	r3, [pc, #240]	@ (800e14c <tcp_input+0x28c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	4a3a      	ldr	r2, [pc, #232]	@ (800e14c <tcp_input+0x28c>)
 800e062:	6814      	ldr	r4, [r2, #0]
 800e064:	4618      	mov	r0, r3
 800e066:	f7fc fda8 	bl	800abba <lwip_htonl>
 800e06a:	4603      	mov	r3, r0
 800e06c:	60a3      	str	r3, [r4, #8]
 800e06e:	68a3      	ldr	r3, [r4, #8]
 800e070:	4a3f      	ldr	r2, [pc, #252]	@ (800e170 <tcp_input+0x2b0>)
 800e072:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e074:	4b35      	ldr	r3, [pc, #212]	@ (800e14c <tcp_input+0x28c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	89db      	ldrh	r3, [r3, #14]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	4a33      	ldr	r2, [pc, #204]	@ (800e14c <tcp_input+0x28c>)
 800e07e:	6814      	ldr	r4, [r2, #0]
 800e080:	4618      	mov	r0, r3
 800e082:	f7fc fd85 	bl	800ab90 <lwip_htons>
 800e086:	4603      	mov	r3, r0
 800e088:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e08a:	4b30      	ldr	r3, [pc, #192]	@ (800e14c <tcp_input+0x28c>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	899b      	ldrh	r3, [r3, #12]
 800e090:	b29b      	uxth	r3, r3
 800e092:	4618      	mov	r0, r3
 800e094:	f7fc fd7c 	bl	800ab90 <lwip_htons>
 800e098:	4603      	mov	r3, r0
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	4b34      	ldr	r3, [pc, #208]	@ (800e174 <tcp_input+0x2b4>)
 800e0a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	891a      	ldrh	r2, [r3, #8]
 800e0aa:	4b33      	ldr	r3, [pc, #204]	@ (800e178 <tcp_input+0x2b8>)
 800e0ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e0ae:	4b31      	ldr	r3, [pc, #196]	@ (800e174 <tcp_input+0x2b4>)
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	f003 0303 	and.w	r3, r3, #3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00c      	beq.n	800e0d4 <tcp_input+0x214>
    tcplen++;
 800e0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e178 <tcp_input+0x2b8>)
 800e0bc:	881b      	ldrh	r3, [r3, #0]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	4b2d      	ldr	r3, [pc, #180]	@ (800e178 <tcp_input+0x2b8>)
 800e0c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	891a      	ldrh	r2, [r3, #8]
 800e0ca:	4b2b      	ldr	r3, [pc, #172]	@ (800e178 <tcp_input+0x2b8>)
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	f200 82e6 	bhi.w	800e6a0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0d8:	4b28      	ldr	r3, [pc, #160]	@ (800e17c <tcp_input+0x2bc>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	61fb      	str	r3, [r7, #28]
 800e0de:	e09d      	b.n	800e21c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	7d1b      	ldrb	r3, [r3, #20]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d105      	bne.n	800e0f4 <tcp_input+0x234>
 800e0e8:	4b15      	ldr	r3, [pc, #84]	@ (800e140 <tcp_input+0x280>)
 800e0ea:	22fb      	movs	r2, #251	@ 0xfb
 800e0ec:	4924      	ldr	r1, [pc, #144]	@ (800e180 <tcp_input+0x2c0>)
 800e0ee:	4816      	ldr	r0, [pc, #88]	@ (800e148 <tcp_input+0x288>)
 800e0f0:	f007 fcce 	bl	8015a90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	7d1b      	ldrb	r3, [r3, #20]
 800e0f8:	2b0a      	cmp	r3, #10
 800e0fa:	d105      	bne.n	800e108 <tcp_input+0x248>
 800e0fc:	4b10      	ldr	r3, [pc, #64]	@ (800e140 <tcp_input+0x280>)
 800e0fe:	22fc      	movs	r2, #252	@ 0xfc
 800e100:	4920      	ldr	r1, [pc, #128]	@ (800e184 <tcp_input+0x2c4>)
 800e102:	4811      	ldr	r0, [pc, #68]	@ (800e148 <tcp_input+0x288>)
 800e104:	f007 fcc4 	bl	8015a90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	7d1b      	ldrb	r3, [r3, #20]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d105      	bne.n	800e11c <tcp_input+0x25c>
 800e110:	4b0b      	ldr	r3, [pc, #44]	@ (800e140 <tcp_input+0x280>)
 800e112:	22fd      	movs	r2, #253	@ 0xfd
 800e114:	491c      	ldr	r1, [pc, #112]	@ (800e188 <tcp_input+0x2c8>)
 800e116:	480c      	ldr	r0, [pc, #48]	@ (800e148 <tcp_input+0x288>)
 800e118:	f007 fcba 	bl	8015a90 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	7a1b      	ldrb	r3, [r3, #8]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d033      	beq.n	800e18c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	7a1a      	ldrb	r2, [r3, #8]
 800e128:	4b09      	ldr	r3, [pc, #36]	@ (800e150 <tcp_input+0x290>)
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e130:	3301      	adds	r3, #1
 800e132:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e134:	429a      	cmp	r2, r3
 800e136:	d029      	beq.n	800e18c <tcp_input+0x2cc>
      prev = pcb;
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	61bb      	str	r3, [r7, #24]
      continue;
 800e13c:	e06b      	b.n	800e216 <tcp_input+0x356>
 800e13e:	bf00      	nop
 800e140:	08017c3c 	.word	0x08017c3c
 800e144:	08017c70 	.word	0x08017c70
 800e148:	08017c88 	.word	0x08017c88
 800e14c:	20008c28 	.word	0x20008c28
 800e150:	20005690 	.word	0x20005690
 800e154:	20008c2c 	.word	0x20008c2c
 800e158:	20008c30 	.word	0x20008c30
 800e15c:	20008c2e 	.word	0x20008c2e
 800e160:	08017cb0 	.word	0x08017cb0
 800e164:	08017cc0 	.word	0x08017cc0
 800e168:	08017ccc 	.word	0x08017ccc
 800e16c:	20008c38 	.word	0x20008c38
 800e170:	20008c3c 	.word	0x20008c3c
 800e174:	20008c44 	.word	0x20008c44
 800e178:	20008c42 	.word	0x20008c42
 800e17c:	20008c0c 	.word	0x20008c0c
 800e180:	08017cec 	.word	0x08017cec
 800e184:	08017d14 	.word	0x08017d14
 800e188:	08017d40 	.word	0x08017d40
    }

    if (pcb->remote_port == tcphdr->src &&
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	8b1a      	ldrh	r2, [r3, #24]
 800e190:	4b72      	ldr	r3, [pc, #456]	@ (800e35c <tcp_input+0x49c>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	b29b      	uxth	r3, r3
 800e198:	429a      	cmp	r2, r3
 800e19a:	d13a      	bne.n	800e212 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	8ada      	ldrh	r2, [r3, #22]
 800e1a0:	4b6e      	ldr	r3, [pc, #440]	@ (800e35c <tcp_input+0x49c>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	885b      	ldrh	r3, [r3, #2]
 800e1a6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d132      	bne.n	800e212 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	4b6b      	ldr	r3, [pc, #428]	@ (800e360 <tcp_input+0x4a0>)
 800e1b2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d12c      	bne.n	800e212 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	4b68      	ldr	r3, [pc, #416]	@ (800e360 <tcp_input+0x4a0>)
 800e1be:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d126      	bne.n	800e212 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	69fa      	ldr	r2, [r7, #28]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d106      	bne.n	800e1dc <tcp_input+0x31c>
 800e1ce:	4b65      	ldr	r3, [pc, #404]	@ (800e364 <tcp_input+0x4a4>)
 800e1d0:	f240 120d 	movw	r2, #269	@ 0x10d
 800e1d4:	4964      	ldr	r1, [pc, #400]	@ (800e368 <tcp_input+0x4a8>)
 800e1d6:	4865      	ldr	r0, [pc, #404]	@ (800e36c <tcp_input+0x4ac>)
 800e1d8:	f007 fc5a 	bl	8015a90 <iprintf>
      if (prev != NULL) {
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00a      	beq.n	800e1f8 <tcp_input+0x338>
        prev->next = pcb->next;
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	68da      	ldr	r2, [r3, #12]
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e1ea:	4b61      	ldr	r3, [pc, #388]	@ (800e370 <tcp_input+0x4b0>)
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e1f2:	4a5f      	ldr	r2, [pc, #380]	@ (800e370 <tcp_input+0x4b0>)
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	69fa      	ldr	r2, [r7, #28]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d111      	bne.n	800e226 <tcp_input+0x366>
 800e202:	4b58      	ldr	r3, [pc, #352]	@ (800e364 <tcp_input+0x4a4>)
 800e204:	f240 1215 	movw	r2, #277	@ 0x115
 800e208:	495a      	ldr	r1, [pc, #360]	@ (800e374 <tcp_input+0x4b4>)
 800e20a:	4858      	ldr	r0, [pc, #352]	@ (800e36c <tcp_input+0x4ac>)
 800e20c:	f007 fc40 	bl	8015a90 <iprintf>
      break;
 800e210:	e009      	b.n	800e226 <tcp_input+0x366>
    }
    prev = pcb;
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	61fb      	str	r3, [r7, #28]
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f47f af5e 	bne.w	800e0e0 <tcp_input+0x220>
 800e224:	e000      	b.n	800e228 <tcp_input+0x368>
      break;
 800e226:	bf00      	nop
  }

  if (pcb == NULL) {
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f040 80aa 	bne.w	800e384 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e230:	4b51      	ldr	r3, [pc, #324]	@ (800e378 <tcp_input+0x4b8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	61fb      	str	r3, [r7, #28]
 800e236:	e03f      	b.n	800e2b8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	7d1b      	ldrb	r3, [r3, #20]
 800e23c:	2b0a      	cmp	r3, #10
 800e23e:	d006      	beq.n	800e24e <tcp_input+0x38e>
 800e240:	4b48      	ldr	r3, [pc, #288]	@ (800e364 <tcp_input+0x4a4>)
 800e242:	f240 121f 	movw	r2, #287	@ 0x11f
 800e246:	494d      	ldr	r1, [pc, #308]	@ (800e37c <tcp_input+0x4bc>)
 800e248:	4848      	ldr	r0, [pc, #288]	@ (800e36c <tcp_input+0x4ac>)
 800e24a:	f007 fc21 	bl	8015a90 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	7a1b      	ldrb	r3, [r3, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d009      	beq.n	800e26a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	7a1a      	ldrb	r2, [r3, #8]
 800e25a:	4b41      	ldr	r3, [pc, #260]	@ (800e360 <tcp_input+0x4a0>)
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e262:	3301      	adds	r3, #1
 800e264:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e266:	429a      	cmp	r2, r3
 800e268:	d122      	bne.n	800e2b0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	8b1a      	ldrh	r2, [r3, #24]
 800e26e:	4b3b      	ldr	r3, [pc, #236]	@ (800e35c <tcp_input+0x49c>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	b29b      	uxth	r3, r3
 800e276:	429a      	cmp	r2, r3
 800e278:	d11b      	bne.n	800e2b2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	8ada      	ldrh	r2, [r3, #22]
 800e27e:	4b37      	ldr	r3, [pc, #220]	@ (800e35c <tcp_input+0x49c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	885b      	ldrh	r3, [r3, #2]
 800e284:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e286:	429a      	cmp	r2, r3
 800e288:	d113      	bne.n	800e2b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	685a      	ldr	r2, [r3, #4]
 800e28e:	4b34      	ldr	r3, [pc, #208]	@ (800e360 <tcp_input+0x4a0>)
 800e290:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e292:	429a      	cmp	r2, r3
 800e294:	d10d      	bne.n	800e2b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	4b31      	ldr	r3, [pc, #196]	@ (800e360 <tcp_input+0x4a0>)
 800e29c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d107      	bne.n	800e2b2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e2a2:	69f8      	ldr	r0, [r7, #28]
 800e2a4:	f000 fb56 	bl	800e954 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7fd ffcf 	bl	800c24c <pbuf_free>
        return;
 800e2ae:	e1fd      	b.n	800e6ac <tcp_input+0x7ec>
        continue;
 800e2b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	61fb      	str	r3, [r7, #28]
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1bc      	bne.n	800e238 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2c2:	4b2f      	ldr	r3, [pc, #188]	@ (800e380 <tcp_input+0x4c0>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	617b      	str	r3, [r7, #20]
 800e2c8:	e02a      	b.n	800e320 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	7a1b      	ldrb	r3, [r3, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00c      	beq.n	800e2ec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	7a1a      	ldrb	r2, [r3, #8]
 800e2d6:	4b22      	ldr	r3, [pc, #136]	@ (800e360 <tcp_input+0x4a0>)
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2de:	3301      	adds	r3, #1
 800e2e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d002      	beq.n	800e2ec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	61bb      	str	r3, [r7, #24]
        continue;
 800e2ea:	e016      	b.n	800e31a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	8ada      	ldrh	r2, [r3, #22]
 800e2f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e35c <tcp_input+0x49c>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	885b      	ldrh	r3, [r3, #2]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d10c      	bne.n	800e316 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	4b17      	ldr	r3, [pc, #92]	@ (800e360 <tcp_input+0x4a0>)
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	429a      	cmp	r2, r3
 800e306:	d00f      	beq.n	800e328 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00d      	beq.n	800e32a <tcp_input+0x46a>
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d009      	beq.n	800e32a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	617b      	str	r3, [r7, #20]
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1d1      	bne.n	800e2ca <tcp_input+0x40a>
 800e326:	e000      	b.n	800e32a <tcp_input+0x46a>
            break;
 800e328:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d029      	beq.n	800e384 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00a      	beq.n	800e34c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	68da      	ldr	r2, [r3, #12]
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e33e:	4b10      	ldr	r3, [pc, #64]	@ (800e380 <tcp_input+0x4c0>)
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e346:	4a0e      	ldr	r2, [pc, #56]	@ (800e380 <tcp_input+0x4c0>)
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e34c:	6978      	ldr	r0, [r7, #20]
 800e34e:	f000 fa03 	bl	800e758 <tcp_listen_input>
      }
      pbuf_free(p);
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f7fd ff7a 	bl	800c24c <pbuf_free>
      return;
 800e358:	e1a8      	b.n	800e6ac <tcp_input+0x7ec>
 800e35a:	bf00      	nop
 800e35c:	20008c28 	.word	0x20008c28
 800e360:	20005690 	.word	0x20005690
 800e364:	08017c3c 	.word	0x08017c3c
 800e368:	08017d68 	.word	0x08017d68
 800e36c:	08017c88 	.word	0x08017c88
 800e370:	20008c0c 	.word	0x20008c0c
 800e374:	08017d94 	.word	0x08017d94
 800e378:	20008c10 	.word	0x20008c10
 800e37c:	08017dc0 	.word	0x08017dc0
 800e380:	20008c08 	.word	0x20008c08
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 8158 	beq.w	800e63c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e38c:	4b95      	ldr	r3, [pc, #596]	@ (800e5e4 <tcp_input+0x724>)
 800e38e:	2200      	movs	r2, #0
 800e390:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	891a      	ldrh	r2, [r3, #8]
 800e396:	4b93      	ldr	r3, [pc, #588]	@ (800e5e4 <tcp_input+0x724>)
 800e398:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e39a:	4a92      	ldr	r2, [pc, #584]	@ (800e5e4 <tcp_input+0x724>)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e3a0:	4b91      	ldr	r3, [pc, #580]	@ (800e5e8 <tcp_input+0x728>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a8f      	ldr	r2, [pc, #572]	@ (800e5e4 <tcp_input+0x724>)
 800e3a6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e3a8:	4b90      	ldr	r3, [pc, #576]	@ (800e5ec <tcp_input+0x72c>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e3ae:	4b90      	ldr	r3, [pc, #576]	@ (800e5f0 <tcp_input+0x730>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e3b4:	4b8f      	ldr	r3, [pc, #572]	@ (800e5f4 <tcp_input+0x734>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e3ba:	4b8f      	ldr	r3, [pc, #572]	@ (800e5f8 <tcp_input+0x738>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	f003 0308 	and.w	r3, r3, #8
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d006      	beq.n	800e3d4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	7b5b      	ldrb	r3, [r3, #13]
 800e3ca:	f043 0301 	orr.w	r3, r3, #1
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d017      	beq.n	800e40c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3dc:	69f8      	ldr	r0, [r7, #28]
 800e3de:	f7ff f929 	bl	800d634 <tcp_process_refused_data>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	f113 0f0d 	cmn.w	r3, #13
 800e3e8:	d007      	beq.n	800e3fa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00c      	beq.n	800e40c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3f2:	4b82      	ldr	r3, [pc, #520]	@ (800e5fc <tcp_input+0x73c>)
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d008      	beq.n	800e40c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f040 80e3 	bne.w	800e5ca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e404:	69f8      	ldr	r0, [r7, #28]
 800e406:	f003 f9a7 	bl	8011758 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e40a:	e0de      	b.n	800e5ca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e40c:	4a7c      	ldr	r2, [pc, #496]	@ (800e600 <tcp_input+0x740>)
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e412:	69f8      	ldr	r0, [r7, #28]
 800e414:	f000 fb18 	bl	800ea48 <tcp_process>
 800e418:	4603      	mov	r3, r0
 800e41a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e41c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e420:	f113 0f0d 	cmn.w	r3, #13
 800e424:	f000 80d3 	beq.w	800e5ce <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e428:	4b71      	ldr	r3, [pc, #452]	@ (800e5f0 <tcp_input+0x730>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f003 0308 	and.w	r3, r3, #8
 800e430:	2b00      	cmp	r3, #0
 800e432:	d015      	beq.n	800e460 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d008      	beq.n	800e450 <tcp_input+0x590>
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e444:	69fa      	ldr	r2, [r7, #28]
 800e446:	6912      	ldr	r2, [r2, #16]
 800e448:	f06f 010d 	mvn.w	r1, #13
 800e44c:	4610      	mov	r0, r2
 800e44e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e450:	69f9      	ldr	r1, [r7, #28]
 800e452:	486c      	ldr	r0, [pc, #432]	@ (800e604 <tcp_input+0x744>)
 800e454:	f7ff fbbc 	bl	800dbd0 <tcp_pcb_remove>
        tcp_free(pcb);
 800e458:	69f8      	ldr	r0, [r7, #28]
 800e45a:	f7fe f9a7 	bl	800c7ac <tcp_free>
 800e45e:	e0da      	b.n	800e616 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e464:	4b63      	ldr	r3, [pc, #396]	@ (800e5f4 <tcp_input+0x734>)
 800e466:	881b      	ldrh	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d01d      	beq.n	800e4a8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e46c:	4b61      	ldr	r3, [pc, #388]	@ (800e5f4 <tcp_input+0x734>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00a      	beq.n	800e492 <tcp_input+0x5d2>
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e482:	69fa      	ldr	r2, [r7, #28]
 800e484:	6910      	ldr	r0, [r2, #16]
 800e486:	89fa      	ldrh	r2, [r7, #14]
 800e488:	69f9      	ldr	r1, [r7, #28]
 800e48a:	4798      	blx	r3
 800e48c:	4603      	mov	r3, r0
 800e48e:	74fb      	strb	r3, [r7, #19]
 800e490:	e001      	b.n	800e496 <tcp_input+0x5d6>
 800e492:	2300      	movs	r3, #0
 800e494:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e496:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e49a:	f113 0f0d 	cmn.w	r3, #13
 800e49e:	f000 8098 	beq.w	800e5d2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e4a2:	4b54      	ldr	r3, [pc, #336]	@ (800e5f4 <tcp_input+0x734>)
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e4a8:	69f8      	ldr	r0, [r7, #28]
 800e4aa:	f000 f915 	bl	800e6d8 <tcp_input_delayed_close>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f040 8090 	bne.w	800e5d6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e4b6:	4b4d      	ldr	r3, [pc, #308]	@ (800e5ec <tcp_input+0x72c>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d041      	beq.n	800e542 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d006      	beq.n	800e4d4 <tcp_input+0x614>
 800e4c6:	4b50      	ldr	r3, [pc, #320]	@ (800e608 <tcp_input+0x748>)
 800e4c8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e4cc:	494f      	ldr	r1, [pc, #316]	@ (800e60c <tcp_input+0x74c>)
 800e4ce:	4850      	ldr	r0, [pc, #320]	@ (800e610 <tcp_input+0x750>)
 800e4d0:	f007 fade 	bl	8015a90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	8b5b      	ldrh	r3, [r3, #26]
 800e4d8:	f003 0310 	and.w	r3, r3, #16
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d008      	beq.n	800e4f2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e4e0:	4b42      	ldr	r3, [pc, #264]	@ (800e5ec <tcp_input+0x72c>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fd feb1 	bl	800c24c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e4ea:	69f8      	ldr	r0, [r7, #28]
 800e4ec:	f7fe fc46 	bl	800cd7c <tcp_abort>
            goto aborted;
 800e4f0:	e091      	b.n	800e616 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00c      	beq.n	800e516 <tcp_input+0x656>
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	6918      	ldr	r0, [r3, #16]
 800e506:	4b39      	ldr	r3, [pc, #228]	@ (800e5ec <tcp_input+0x72c>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	2300      	movs	r3, #0
 800e50c:	69f9      	ldr	r1, [r7, #28]
 800e50e:	47a0      	blx	r4
 800e510:	4603      	mov	r3, r0
 800e512:	74fb      	strb	r3, [r7, #19]
 800e514:	e008      	b.n	800e528 <tcp_input+0x668>
 800e516:	4b35      	ldr	r3, [pc, #212]	@ (800e5ec <tcp_input+0x72c>)
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	2300      	movs	r3, #0
 800e51c:	69f9      	ldr	r1, [r7, #28]
 800e51e:	2000      	movs	r0, #0
 800e520:	f7ff f95e 	bl	800d7e0 <tcp_recv_null>
 800e524:	4603      	mov	r3, r0
 800e526:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e52c:	f113 0f0d 	cmn.w	r3, #13
 800e530:	d053      	beq.n	800e5da <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e53a:	4b2c      	ldr	r3, [pc, #176]	@ (800e5ec <tcp_input+0x72c>)
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	69fb      	ldr	r3, [r7, #28]
 800e540:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e542:	4b2b      	ldr	r3, [pc, #172]	@ (800e5f0 <tcp_input+0x730>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	f003 0320 	and.w	r3, r3, #32
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d030      	beq.n	800e5b0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e552:	2b00      	cmp	r3, #0
 800e554:	d009      	beq.n	800e56a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e55a:	7b5a      	ldrb	r2, [r3, #13]
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e560:	f042 0220 	orr.w	r2, r2, #32
 800e564:	b2d2      	uxtb	r2, r2
 800e566:	735a      	strb	r2, [r3, #13]
 800e568:	e022      	b.n	800e5b0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e56e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e572:	d005      	beq.n	800e580 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e578:	3301      	adds	r3, #1
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00b      	beq.n	800e5a2 <tcp_input+0x6e2>
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	6918      	ldr	r0, [r3, #16]
 800e594:	2300      	movs	r3, #0
 800e596:	2200      	movs	r2, #0
 800e598:	69f9      	ldr	r1, [r7, #28]
 800e59a:	47a0      	blx	r4
 800e59c:	4603      	mov	r3, r0
 800e59e:	74fb      	strb	r3, [r7, #19]
 800e5a0:	e001      	b.n	800e5a6 <tcp_input+0x6e6>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e5a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5aa:	f113 0f0d 	cmn.w	r3, #13
 800e5ae:	d016      	beq.n	800e5de <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e5b0:	4b13      	ldr	r3, [pc, #76]	@ (800e600 <tcp_input+0x740>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e5b6:	69f8      	ldr	r0, [r7, #28]
 800e5b8:	f000 f88e 	bl	800e6d8 <tcp_input_delayed_close>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d128      	bne.n	800e614 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e5c2:	69f8      	ldr	r0, [r7, #28]
 800e5c4:	f002 fac2 	bl	8010b4c <tcp_output>
 800e5c8:	e025      	b.n	800e616 <tcp_input+0x756>
        goto aborted;
 800e5ca:	bf00      	nop
 800e5cc:	e023      	b.n	800e616 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e5ce:	bf00      	nop
 800e5d0:	e021      	b.n	800e616 <tcp_input+0x756>
              goto aborted;
 800e5d2:	bf00      	nop
 800e5d4:	e01f      	b.n	800e616 <tcp_input+0x756>
          goto aborted;
 800e5d6:	bf00      	nop
 800e5d8:	e01d      	b.n	800e616 <tcp_input+0x756>
            goto aborted;
 800e5da:	bf00      	nop
 800e5dc:	e01b      	b.n	800e616 <tcp_input+0x756>
              goto aborted;
 800e5de:	bf00      	nop
 800e5e0:	e019      	b.n	800e616 <tcp_input+0x756>
 800e5e2:	bf00      	nop
 800e5e4:	20008c18 	.word	0x20008c18
 800e5e8:	20008c28 	.word	0x20008c28
 800e5ec:	20008c48 	.word	0x20008c48
 800e5f0:	20008c45 	.word	0x20008c45
 800e5f4:	20008c40 	.word	0x20008c40
 800e5f8:	20008c44 	.word	0x20008c44
 800e5fc:	20008c42 	.word	0x20008c42
 800e600:	20008c4c 	.word	0x20008c4c
 800e604:	20008c0c 	.word	0x20008c0c
 800e608:	08017c3c 	.word	0x08017c3c
 800e60c:	08017df0 	.word	0x08017df0
 800e610:	08017c88 	.word	0x08017c88
          goto aborted;
 800e614:	bf00      	nop
    tcp_input_pcb = NULL;
 800e616:	4b27      	ldr	r3, [pc, #156]	@ (800e6b4 <tcp_input+0x7f4>)
 800e618:	2200      	movs	r2, #0
 800e61a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e61c:	4b26      	ldr	r3, [pc, #152]	@ (800e6b8 <tcp_input+0x7f8>)
 800e61e:	2200      	movs	r2, #0
 800e620:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e622:	4b26      	ldr	r3, [pc, #152]	@ (800e6bc <tcp_input+0x7fc>)
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d03f      	beq.n	800e6aa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e62a:	4b24      	ldr	r3, [pc, #144]	@ (800e6bc <tcp_input+0x7fc>)
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fd fe0c 	bl	800c24c <pbuf_free>
      inseg.p = NULL;
 800e634:	4b21      	ldr	r3, [pc, #132]	@ (800e6bc <tcp_input+0x7fc>)
 800e636:	2200      	movs	r2, #0
 800e638:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e63a:	e036      	b.n	800e6aa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e63c:	4b20      	ldr	r3, [pc, #128]	@ (800e6c0 <tcp_input+0x800>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	899b      	ldrh	r3, [r3, #12]
 800e642:	b29b      	uxth	r3, r3
 800e644:	4618      	mov	r0, r3
 800e646:	f7fc faa3 	bl	800ab90 <lwip_htons>
 800e64a:	4603      	mov	r3, r0
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	f003 0304 	and.w	r3, r3, #4
 800e652:	2b00      	cmp	r3, #0
 800e654:	d118      	bne.n	800e688 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e656:	4b1b      	ldr	r3, [pc, #108]	@ (800e6c4 <tcp_input+0x804>)
 800e658:	6819      	ldr	r1, [r3, #0]
 800e65a:	4b1b      	ldr	r3, [pc, #108]	@ (800e6c8 <tcp_input+0x808>)
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	461a      	mov	r2, r3
 800e660:	4b1a      	ldr	r3, [pc, #104]	@ (800e6cc <tcp_input+0x80c>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e666:	4b16      	ldr	r3, [pc, #88]	@ (800e6c0 <tcp_input+0x800>)
 800e668:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e66a:	885b      	ldrh	r3, [r3, #2]
 800e66c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e66e:	4a14      	ldr	r2, [pc, #80]	@ (800e6c0 <tcp_input+0x800>)
 800e670:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e672:	8812      	ldrh	r2, [r2, #0]
 800e674:	b292      	uxth	r2, r2
 800e676:	9202      	str	r2, [sp, #8]
 800e678:	9301      	str	r3, [sp, #4]
 800e67a:	4b15      	ldr	r3, [pc, #84]	@ (800e6d0 <tcp_input+0x810>)
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	4b15      	ldr	r3, [pc, #84]	@ (800e6d4 <tcp_input+0x814>)
 800e680:	4602      	mov	r2, r0
 800e682:	2000      	movs	r0, #0
 800e684:	f003 f816 	bl	80116b4 <tcp_rst>
    pbuf_free(p);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7fd fddf 	bl	800c24c <pbuf_free>
  return;
 800e68e:	e00c      	b.n	800e6aa <tcp_input+0x7ea>
    goto dropped;
 800e690:	bf00      	nop
 800e692:	e006      	b.n	800e6a2 <tcp_input+0x7e2>
    goto dropped;
 800e694:	bf00      	nop
 800e696:	e004      	b.n	800e6a2 <tcp_input+0x7e2>
    goto dropped;
 800e698:	bf00      	nop
 800e69a:	e002      	b.n	800e6a2 <tcp_input+0x7e2>
      goto dropped;
 800e69c:	bf00      	nop
 800e69e:	e000      	b.n	800e6a2 <tcp_input+0x7e2>
      goto dropped;
 800e6a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7fd fdd2 	bl	800c24c <pbuf_free>
 800e6a8:	e000      	b.n	800e6ac <tcp_input+0x7ec>
  return;
 800e6aa:	bf00      	nop
}
 800e6ac:	3724      	adds	r7, #36	@ 0x24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd90      	pop	{r4, r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20008c4c 	.word	0x20008c4c
 800e6b8:	20008c48 	.word	0x20008c48
 800e6bc:	20008c18 	.word	0x20008c18
 800e6c0:	20008c28 	.word	0x20008c28
 800e6c4:	20008c3c 	.word	0x20008c3c
 800e6c8:	20008c42 	.word	0x20008c42
 800e6cc:	20008c38 	.word	0x20008c38
 800e6d0:	200056a0 	.word	0x200056a0
 800e6d4:	200056a4 	.word	0x200056a4

0800e6d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d106      	bne.n	800e6f4 <tcp_input_delayed_close+0x1c>
 800e6e6:	4b17      	ldr	r3, [pc, #92]	@ (800e744 <tcp_input_delayed_close+0x6c>)
 800e6e8:	f240 225a 	movw	r2, #602	@ 0x25a
 800e6ec:	4916      	ldr	r1, [pc, #88]	@ (800e748 <tcp_input_delayed_close+0x70>)
 800e6ee:	4817      	ldr	r0, [pc, #92]	@ (800e74c <tcp_input_delayed_close+0x74>)
 800e6f0:	f007 f9ce 	bl	8015a90 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e6f4:	4b16      	ldr	r3, [pc, #88]	@ (800e750 <tcp_input_delayed_close+0x78>)
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	f003 0310 	and.w	r3, r3, #16
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01c      	beq.n	800e73a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	8b5b      	ldrh	r3, [r3, #26]
 800e704:	f003 0310 	and.w	r3, r3, #16
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10d      	bne.n	800e728 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e712:	2b00      	cmp	r3, #0
 800e714:	d008      	beq.n	800e728 <tcp_input_delayed_close+0x50>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	6912      	ldr	r2, [r2, #16]
 800e720:	f06f 010e 	mvn.w	r1, #14
 800e724:	4610      	mov	r0, r2
 800e726:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e728:	6879      	ldr	r1, [r7, #4]
 800e72a:	480a      	ldr	r0, [pc, #40]	@ (800e754 <tcp_input_delayed_close+0x7c>)
 800e72c:	f7ff fa50 	bl	800dbd0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f7fe f83b 	bl	800c7ac <tcp_free>
    return 1;
 800e736:	2301      	movs	r3, #1
 800e738:	e000      	b.n	800e73c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	08017c3c 	.word	0x08017c3c
 800e748:	08017e0c 	.word	0x08017e0c
 800e74c:	08017c88 	.word	0x08017c88
 800e750:	20008c45 	.word	0x20008c45
 800e754:	20008c0c 	.word	0x20008c0c

0800e758 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b08b      	sub	sp, #44	@ 0x2c
 800e75c:	af04      	add	r7, sp, #16
 800e75e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e760:	4b6f      	ldr	r3, [pc, #444]	@ (800e920 <tcp_listen_input+0x1c8>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f003 0304 	and.w	r3, r3, #4
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f040 80d2 	bne.w	800e912 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d106      	bne.n	800e782 <tcp_listen_input+0x2a>
 800e774:	4b6b      	ldr	r3, [pc, #428]	@ (800e924 <tcp_listen_input+0x1cc>)
 800e776:	f240 2281 	movw	r2, #641	@ 0x281
 800e77a:	496b      	ldr	r1, [pc, #428]	@ (800e928 <tcp_listen_input+0x1d0>)
 800e77c:	486b      	ldr	r0, [pc, #428]	@ (800e92c <tcp_listen_input+0x1d4>)
 800e77e:	f007 f987 	bl	8015a90 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e782:	4b67      	ldr	r3, [pc, #412]	@ (800e920 <tcp_listen_input+0x1c8>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	f003 0310 	and.w	r3, r3, #16
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d019      	beq.n	800e7c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e78e:	4b68      	ldr	r3, [pc, #416]	@ (800e930 <tcp_listen_input+0x1d8>)
 800e790:	6819      	ldr	r1, [r3, #0]
 800e792:	4b68      	ldr	r3, [pc, #416]	@ (800e934 <tcp_listen_input+0x1dc>)
 800e794:	881b      	ldrh	r3, [r3, #0]
 800e796:	461a      	mov	r2, r3
 800e798:	4b67      	ldr	r3, [pc, #412]	@ (800e938 <tcp_listen_input+0x1e0>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e79e:	4b67      	ldr	r3, [pc, #412]	@ (800e93c <tcp_listen_input+0x1e4>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7a2:	885b      	ldrh	r3, [r3, #2]
 800e7a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7a6:	4a65      	ldr	r2, [pc, #404]	@ (800e93c <tcp_listen_input+0x1e4>)
 800e7a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7aa:	8812      	ldrh	r2, [r2, #0]
 800e7ac:	b292      	uxth	r2, r2
 800e7ae:	9202      	str	r2, [sp, #8]
 800e7b0:	9301      	str	r3, [sp, #4]
 800e7b2:	4b63      	ldr	r3, [pc, #396]	@ (800e940 <tcp_listen_input+0x1e8>)
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	4b63      	ldr	r3, [pc, #396]	@ (800e944 <tcp_listen_input+0x1ec>)
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f002 ff7a 	bl	80116b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e7c0:	e0a9      	b.n	800e916 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e7c2:	4b57      	ldr	r3, [pc, #348]	@ (800e920 <tcp_listen_input+0x1c8>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	f003 0302 	and.w	r3, r3, #2
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f000 80a3 	beq.w	800e916 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	7d5b      	ldrb	r3, [r3, #21]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7ff f927 	bl	800da28 <tcp_alloc>
 800e7da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d111      	bne.n	800e806 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00a      	beq.n	800e800 <tcp_listen_input+0xa8>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	6910      	ldr	r0, [r2, #16]
 800e7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	4798      	blx	r3
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	73bb      	strb	r3, [r7, #14]
      return;
 800e7fe:	e08b      	b.n	800e918 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e800:	23f0      	movs	r3, #240	@ 0xf0
 800e802:	73bb      	strb	r3, [r7, #14]
      return;
 800e804:	e088      	b.n	800e918 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e806:	4b50      	ldr	r3, [pc, #320]	@ (800e948 <tcp_listen_input+0x1f0>)
 800e808:	695a      	ldr	r2, [r3, #20]
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e80e:	4b4e      	ldr	r3, [pc, #312]	@ (800e948 <tcp_listen_input+0x1f0>)
 800e810:	691a      	ldr	r2, [r3, #16]
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	8ada      	ldrh	r2, [r3, #22]
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e81e:	4b47      	ldr	r3, [pc, #284]	@ (800e93c <tcp_listen_input+0x1e4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	881b      	ldrh	r3, [r3, #0]
 800e824:	b29a      	uxth	r2, r3
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	2203      	movs	r2, #3
 800e82e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e830:	4b41      	ldr	r3, [pc, #260]	@ (800e938 <tcp_listen_input+0x1e0>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	1c5a      	adds	r2, r3, #1
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e842:	6978      	ldr	r0, [r7, #20]
 800e844:	f7ff fa58 	bl	800dcf8 <tcp_next_iss>
 800e848:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	693a      	ldr	r2, [r7, #16]
 800e84e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	693a      	ldr	r2, [r7, #16]
 800e85a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e862:	4b35      	ldr	r3, [pc, #212]	@ (800e938 <tcp_listen_input+0x1e0>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	1e5a      	subs	r2, r3, #1
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	691a      	ldr	r2, [r3, #16]
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	7a5b      	ldrb	r3, [r3, #9]
 800e87e:	f003 030c 	and.w	r3, r3, #12
 800e882:	b2da      	uxtb	r2, r3
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	7a1a      	ldrb	r2, [r3, #8]
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e890:	4b2e      	ldr	r3, [pc, #184]	@ (800e94c <tcp_listen_input+0x1f4>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	60da      	str	r2, [r3, #12]
 800e898:	4a2c      	ldr	r2, [pc, #176]	@ (800e94c <tcp_listen_input+0x1f4>)
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	6013      	str	r3, [r2, #0]
 800e89e:	f003 f8cb 	bl	8011a38 <tcp_timer_needed>
 800e8a2:	4b2b      	ldr	r3, [pc, #172]	@ (800e950 <tcp_listen_input+0x1f8>)
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e8a8:	6978      	ldr	r0, [r7, #20]
 800e8aa:	f001 fd8b 	bl	80103c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e8ae:	4b23      	ldr	r3, [pc, #140]	@ (800e93c <tcp_listen_input+0x1e4>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	89db      	ldrh	r3, [r3, #14]
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f004 ff7f 	bl	80137d4 <ip4_route>
 800e8d6:	4601      	mov	r1, r0
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	3304      	adds	r3, #4
 800e8dc:	461a      	mov	r2, r3
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7ff fa30 	bl	800dd44 <tcp_eff_send_mss_netif>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e8ec:	2112      	movs	r1, #18
 800e8ee:	6978      	ldr	r0, [r7, #20]
 800e8f0:	f002 f83e 	bl	8010970 <tcp_enqueue_flags>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d004      	beq.n	800e90a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e900:	2100      	movs	r1, #0
 800e902:	6978      	ldr	r0, [r7, #20]
 800e904:	f7fe f97c 	bl	800cc00 <tcp_abandon>
      return;
 800e908:	e006      	b.n	800e918 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e90a:	6978      	ldr	r0, [r7, #20]
 800e90c:	f002 f91e 	bl	8010b4c <tcp_output>
  return;
 800e910:	e001      	b.n	800e916 <tcp_listen_input+0x1be>
    return;
 800e912:	bf00      	nop
 800e914:	e000      	b.n	800e918 <tcp_listen_input+0x1c0>
  return;
 800e916:	bf00      	nop
}
 800e918:	371c      	adds	r7, #28
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd90      	pop	{r4, r7, pc}
 800e91e:	bf00      	nop
 800e920:	20008c44 	.word	0x20008c44
 800e924:	08017c3c 	.word	0x08017c3c
 800e928:	08017e34 	.word	0x08017e34
 800e92c:	08017c88 	.word	0x08017c88
 800e930:	20008c3c 	.word	0x20008c3c
 800e934:	20008c42 	.word	0x20008c42
 800e938:	20008c38 	.word	0x20008c38
 800e93c:	20008c28 	.word	0x20008c28
 800e940:	200056a0 	.word	0x200056a0
 800e944:	200056a4 	.word	0x200056a4
 800e948:	20005690 	.word	0x20005690
 800e94c:	20008c0c 	.word	0x20008c0c
 800e950:	20008c14 	.word	0x20008c14

0800e954 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af04      	add	r7, sp, #16
 800e95a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e95c:	4b2f      	ldr	r3, [pc, #188]	@ (800ea1c <tcp_timewait_input+0xc8>)
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	f003 0304 	and.w	r3, r3, #4
 800e964:	2b00      	cmp	r3, #0
 800e966:	d153      	bne.n	800ea10 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d106      	bne.n	800e97c <tcp_timewait_input+0x28>
 800e96e:	4b2c      	ldr	r3, [pc, #176]	@ (800ea20 <tcp_timewait_input+0xcc>)
 800e970:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e974:	492b      	ldr	r1, [pc, #172]	@ (800ea24 <tcp_timewait_input+0xd0>)
 800e976:	482c      	ldr	r0, [pc, #176]	@ (800ea28 <tcp_timewait_input+0xd4>)
 800e978:	f007 f88a 	bl	8015a90 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e97c:	4b27      	ldr	r3, [pc, #156]	@ (800ea1c <tcp_timewait_input+0xc8>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	f003 0302 	and.w	r3, r3, #2
 800e984:	2b00      	cmp	r3, #0
 800e986:	d02a      	beq.n	800e9de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e988:	4b28      	ldr	r3, [pc, #160]	@ (800ea2c <tcp_timewait_input+0xd8>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	db2d      	blt.n	800e9f2 <tcp_timewait_input+0x9e>
 800e996:	4b25      	ldr	r3, [pc, #148]	@ (800ea2c <tcp_timewait_input+0xd8>)
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e99e:	6879      	ldr	r1, [r7, #4]
 800e9a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e9a2:	440b      	add	r3, r1
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	dc23      	bgt.n	800e9f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9aa:	4b21      	ldr	r3, [pc, #132]	@ (800ea30 <tcp_timewait_input+0xdc>)
 800e9ac:	6819      	ldr	r1, [r3, #0]
 800e9ae:	4b21      	ldr	r3, [pc, #132]	@ (800ea34 <tcp_timewait_input+0xe0>)
 800e9b0:	881b      	ldrh	r3, [r3, #0]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	4b1d      	ldr	r3, [pc, #116]	@ (800ea2c <tcp_timewait_input+0xd8>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9ba:	4b1f      	ldr	r3, [pc, #124]	@ (800ea38 <tcp_timewait_input+0xe4>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9be:	885b      	ldrh	r3, [r3, #2]
 800e9c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9c2:	4a1d      	ldr	r2, [pc, #116]	@ (800ea38 <tcp_timewait_input+0xe4>)
 800e9c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9c6:	8812      	ldrh	r2, [r2, #0]
 800e9c8:	b292      	uxth	r2, r2
 800e9ca:	9202      	str	r2, [sp, #8]
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	4b1b      	ldr	r3, [pc, #108]	@ (800ea3c <tcp_timewait_input+0xe8>)
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea40 <tcp_timewait_input+0xec>)
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f002 fe6c 	bl	80116b4 <tcp_rst>
      return;
 800e9dc:	e01b      	b.n	800ea16 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ea1c <tcp_timewait_input+0xc8>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	f003 0301 	and.w	r3, r3, #1
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d003      	beq.n	800e9f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e9ea:	4b16      	ldr	r3, [pc, #88]	@ (800ea44 <tcp_timewait_input+0xf0>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e9f2:	4b10      	ldr	r3, [pc, #64]	@ (800ea34 <tcp_timewait_input+0xe0>)
 800e9f4:	881b      	ldrh	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00c      	beq.n	800ea14 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	8b5b      	ldrh	r3, [r3, #26]
 800e9fe:	f043 0302 	orr.w	r3, r3, #2
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f002 f89f 	bl	8010b4c <tcp_output>
  }
  return;
 800ea0e:	e001      	b.n	800ea14 <tcp_timewait_input+0xc0>
    return;
 800ea10:	bf00      	nop
 800ea12:	e000      	b.n	800ea16 <tcp_timewait_input+0xc2>
  return;
 800ea14:	bf00      	nop
}
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20008c44 	.word	0x20008c44
 800ea20:	08017c3c 	.word	0x08017c3c
 800ea24:	08017e54 	.word	0x08017e54
 800ea28:	08017c88 	.word	0x08017c88
 800ea2c:	20008c38 	.word	0x20008c38
 800ea30:	20008c3c 	.word	0x20008c3c
 800ea34:	20008c42 	.word	0x20008c42
 800ea38:	20008c28 	.word	0x20008c28
 800ea3c:	200056a0 	.word	0x200056a0
 800ea40:	200056a4 	.word	0x200056a4
 800ea44:	20008c00 	.word	0x20008c00

0800ea48 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ea48:	b590      	push	{r4, r7, lr}
 800ea4a:	b08d      	sub	sp, #52	@ 0x34
 800ea4c:	af04      	add	r7, sp, #16
 800ea4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ea54:	2300      	movs	r3, #0
 800ea56:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <tcp_process+0x24>
 800ea5e:	4b9d      	ldr	r3, [pc, #628]	@ (800ecd4 <tcp_process+0x28c>)
 800ea60:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ea64:	499c      	ldr	r1, [pc, #624]	@ (800ecd8 <tcp_process+0x290>)
 800ea66:	489d      	ldr	r0, [pc, #628]	@ (800ecdc <tcp_process+0x294>)
 800ea68:	f007 f812 	bl	8015a90 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ea6c:	4b9c      	ldr	r3, [pc, #624]	@ (800ece0 <tcp_process+0x298>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	f003 0304 	and.w	r3, r3, #4
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d04e      	beq.n	800eb16 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7d1b      	ldrb	r3, [r3, #20]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d108      	bne.n	800ea92 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea84:	4b97      	ldr	r3, [pc, #604]	@ (800ece4 <tcp_process+0x29c>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d123      	bne.n	800ead4 <tcp_process+0x8c>
        acceptable = 1;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	76fb      	strb	r3, [r7, #27]
 800ea90:	e020      	b.n	800ead4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea96:	4b94      	ldr	r3, [pc, #592]	@ (800ece8 <tcp_process+0x2a0>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d102      	bne.n	800eaa4 <tcp_process+0x5c>
        acceptable = 1;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	76fb      	strb	r3, [r7, #27]
 800eaa2:	e017      	b.n	800ead4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eaa4:	4b90      	ldr	r3, [pc, #576]	@ (800ece8 <tcp_process+0x2a0>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	db10      	blt.n	800ead4 <tcp_process+0x8c>
 800eab2:	4b8d      	ldr	r3, [pc, #564]	@ (800ece8 <tcp_process+0x2a0>)
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaba:	6879      	ldr	r1, [r7, #4]
 800eabc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eabe:	440b      	add	r3, r1
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	dc06      	bgt.n	800ead4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	8b5b      	ldrh	r3, [r3, #26]
 800eaca:	f043 0302 	orr.w	r3, r3, #2
 800eace:	b29a      	uxth	r2, r3
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ead4:	7efb      	ldrb	r3, [r7, #27]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d01b      	beq.n	800eb12 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	7d1b      	ldrb	r3, [r3, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <tcp_process+0xa8>
 800eae2:	4b7c      	ldr	r3, [pc, #496]	@ (800ecd4 <tcp_process+0x28c>)
 800eae4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800eae8:	4980      	ldr	r1, [pc, #512]	@ (800ecec <tcp_process+0x2a4>)
 800eaea:	487c      	ldr	r0, [pc, #496]	@ (800ecdc <tcp_process+0x294>)
 800eaec:	f006 ffd0 	bl	8015a90 <iprintf>
      recv_flags |= TF_RESET;
 800eaf0:	4b7f      	ldr	r3, [pc, #508]	@ (800ecf0 <tcp_process+0x2a8>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	f043 0308 	orr.w	r3, r3, #8
 800eaf8:	b2da      	uxtb	r2, r3
 800eafa:	4b7d      	ldr	r3, [pc, #500]	@ (800ecf0 <tcp_process+0x2a8>)
 800eafc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8b5b      	ldrh	r3, [r3, #26]
 800eb02:	f023 0301 	bic.w	r3, r3, #1
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eb0c:	f06f 030d 	mvn.w	r3, #13
 800eb10:	e37a      	b.n	800f208 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	e378      	b.n	800f208 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eb16:	4b72      	ldr	r3, [pc, #456]	@ (800ece0 <tcp_process+0x298>)
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	f003 0302 	and.w	r3, r3, #2
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d010      	beq.n	800eb44 <tcp_process+0xfc>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	7d1b      	ldrb	r3, [r3, #20]
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d00c      	beq.n	800eb44 <tcp_process+0xfc>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	7d1b      	ldrb	r3, [r3, #20]
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d008      	beq.n	800eb44 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	8b5b      	ldrh	r3, [r3, #26]
 800eb36:	f043 0302 	orr.w	r3, r3, #2
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800eb40:	2300      	movs	r3, #0
 800eb42:	e361      	b.n	800f208 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	8b5b      	ldrh	r3, [r3, #26]
 800eb48:	f003 0310 	and.w	r3, r3, #16
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d103      	bne.n	800eb58 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eb50:	4b68      	ldr	r3, [pc, #416]	@ (800ecf4 <tcp_process+0x2ac>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f001 fc2b 	bl	80103c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	7d1b      	ldrb	r3, [r3, #20]
 800eb72:	3b02      	subs	r3, #2
 800eb74:	2b07      	cmp	r3, #7
 800eb76:	f200 8337 	bhi.w	800f1e8 <tcp_process+0x7a0>
 800eb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb80 <tcp_process+0x138>)
 800eb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb80:	0800eba1 	.word	0x0800eba1
 800eb84:	0800edd1 	.word	0x0800edd1
 800eb88:	0800ef49 	.word	0x0800ef49
 800eb8c:	0800ef73 	.word	0x0800ef73
 800eb90:	0800f097 	.word	0x0800f097
 800eb94:	0800ef49 	.word	0x0800ef49
 800eb98:	0800f123 	.word	0x0800f123
 800eb9c:	0800f1b3 	.word	0x0800f1b3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eba0:	4b4f      	ldr	r3, [pc, #316]	@ (800ece0 <tcp_process+0x298>)
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	f003 0310 	and.w	r3, r3, #16
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f000 80e4 	beq.w	800ed76 <tcp_process+0x32e>
 800ebae:	4b4c      	ldr	r3, [pc, #304]	@ (800ece0 <tcp_process+0x298>)
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	f003 0302 	and.w	r3, r3, #2
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f000 80dd 	beq.w	800ed76 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebc0:	1c5a      	adds	r2, r3, #1
 800ebc2:	4b48      	ldr	r3, [pc, #288]	@ (800ece4 <tcp_process+0x29c>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	f040 80d5 	bne.w	800ed76 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ebcc:	4b46      	ldr	r3, [pc, #280]	@ (800ece8 <tcp_process+0x2a0>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	1c5a      	adds	r2, r3, #1
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ebde:	4b41      	ldr	r3, [pc, #260]	@ (800ece4 <tcp_process+0x29c>)
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ebe6:	4b44      	ldr	r3, [pc, #272]	@ (800ecf8 <tcp_process+0x2b0>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	89db      	ldrh	r3, [r3, #14]
 800ebec:	b29a      	uxth	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ec00:	4b39      	ldr	r3, [pc, #228]	@ (800ece8 <tcp_process+0x2a0>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	1e5a      	subs	r2, r3, #1
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2204      	movs	r2, #4
 800ec0e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3304      	adds	r3, #4
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f004 fddb 	bl	80137d4 <ip4_route>
 800ec1e:	4601      	mov	r1, r0
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	3304      	adds	r3, #4
 800ec24:	461a      	mov	r2, r3
 800ec26:	4620      	mov	r0, r4
 800ec28:	f7ff f88c 	bl	800dd44 <tcp_eff_send_mss_netif>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	461a      	mov	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec38:	009a      	lsls	r2, r3, #2
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec3e:	005b      	lsls	r3, r3, #1
 800ec40:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ec44:	428b      	cmp	r3, r1
 800ec46:	bf38      	it	cc
 800ec48:	460b      	movcc	r3, r1
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d204      	bcs.n	800ec58 <tcp_process+0x210>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	e00d      	b.n	800ec74 <tcp_process+0x22c>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d904      	bls.n	800ec70 <tcp_process+0x228>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec6a:	005b      	lsls	r3, r3, #1
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	e001      	b.n	800ec74 <tcp_process+0x22c>
 800ec70:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d106      	bne.n	800ec92 <tcp_process+0x24a>
 800ec84:	4b13      	ldr	r3, [pc, #76]	@ (800ecd4 <tcp_process+0x28c>)
 800ec86:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ec8a:	491c      	ldr	r1, [pc, #112]	@ (800ecfc <tcp_process+0x2b4>)
 800ec8c:	4813      	ldr	r0, [pc, #76]	@ (800ecdc <tcp_process+0x294>)
 800ec8e:	f006 feff 	bl	8015a90 <iprintf>
        --pcb->snd_queuelen;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ec98:	3b01      	subs	r3, #1
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eca6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d12a      	bne.n	800ed04 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecb2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d106      	bne.n	800ecc8 <tcp_process+0x280>
 800ecba:	4b06      	ldr	r3, [pc, #24]	@ (800ecd4 <tcp_process+0x28c>)
 800ecbc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800ecc0:	490f      	ldr	r1, [pc, #60]	@ (800ed00 <tcp_process+0x2b8>)
 800ecc2:	4806      	ldr	r0, [pc, #24]	@ (800ecdc <tcp_process+0x294>)
 800ecc4:	f006 fee4 	bl	8015a90 <iprintf>
          pcb->unsent = rseg->next;
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ecd0:	e01c      	b.n	800ed0c <tcp_process+0x2c4>
 800ecd2:	bf00      	nop
 800ecd4:	08017c3c 	.word	0x08017c3c
 800ecd8:	08017e74 	.word	0x08017e74
 800ecdc:	08017c88 	.word	0x08017c88
 800ece0:	20008c44 	.word	0x20008c44
 800ece4:	20008c3c 	.word	0x20008c3c
 800ece8:	20008c38 	.word	0x20008c38
 800ecec:	08017e90 	.word	0x08017e90
 800ecf0:	20008c45 	.word	0x20008c45
 800ecf4:	20008c00 	.word	0x20008c00
 800ecf8:	20008c28 	.word	0x20008c28
 800ecfc:	08017eb0 	.word	0x08017eb0
 800ed00:	08017ec8 	.word	0x08017ec8
        } else {
          pcb->unacked = rseg->next;
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ed0c:	69f8      	ldr	r0, [r7, #28]
 800ed0e:	f7fe fd22 	bl	800d756 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d104      	bne.n	800ed24 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed20:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ed22:	e006      	b.n	800ed32 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00a      	beq.n	800ed52 <tcp_process+0x30a>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	6910      	ldr	r0, [r2, #16]
 800ed46:	2200      	movs	r2, #0
 800ed48:	6879      	ldr	r1, [r7, #4]
 800ed4a:	4798      	blx	r3
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	76bb      	strb	r3, [r7, #26]
 800ed50:	e001      	b.n	800ed56 <tcp_process+0x30e>
 800ed52:	2300      	movs	r3, #0
 800ed54:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ed56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed5a:	f113 0f0d 	cmn.w	r3, #13
 800ed5e:	d102      	bne.n	800ed66 <tcp_process+0x31e>
          return ERR_ABRT;
 800ed60:	f06f 030c 	mvn.w	r3, #12
 800ed64:	e250      	b.n	800f208 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	8b5b      	ldrh	r3, [r3, #26]
 800ed6a:	f043 0302 	orr.w	r3, r3, #2
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ed74:	e23a      	b.n	800f1ec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ed76:	4b98      	ldr	r3, [pc, #608]	@ (800efd8 <tcp_process+0x590>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	f003 0310 	and.w	r3, r3, #16
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f000 8234 	beq.w	800f1ec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed84:	4b95      	ldr	r3, [pc, #596]	@ (800efdc <tcp_process+0x594>)
 800ed86:	6819      	ldr	r1, [r3, #0]
 800ed88:	4b95      	ldr	r3, [pc, #596]	@ (800efe0 <tcp_process+0x598>)
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	4b95      	ldr	r3, [pc, #596]	@ (800efe4 <tcp_process+0x59c>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed94:	4b94      	ldr	r3, [pc, #592]	@ (800efe8 <tcp_process+0x5a0>)
 800ed96:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed98:	885b      	ldrh	r3, [r3, #2]
 800ed9a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed9c:	4a92      	ldr	r2, [pc, #584]	@ (800efe8 <tcp_process+0x5a0>)
 800ed9e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eda0:	8812      	ldrh	r2, [r2, #0]
 800eda2:	b292      	uxth	r2, r2
 800eda4:	9202      	str	r2, [sp, #8]
 800eda6:	9301      	str	r3, [sp, #4]
 800eda8:	4b90      	ldr	r3, [pc, #576]	@ (800efec <tcp_process+0x5a4>)
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	4b90      	ldr	r3, [pc, #576]	@ (800eff0 <tcp_process+0x5a8>)
 800edae:	4602      	mov	r2, r0
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f002 fc7f 	bl	80116b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800edbc:	2b05      	cmp	r3, #5
 800edbe:	f200 8215 	bhi.w	800f1ec <tcp_process+0x7a4>
          pcb->rtime = 0;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f002 fa4b 	bl	8011264 <tcp_rexmit_rto>
      break;
 800edce:	e20d      	b.n	800f1ec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800edd0:	4b81      	ldr	r3, [pc, #516]	@ (800efd8 <tcp_process+0x590>)
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	f003 0310 	and.w	r3, r3, #16
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 80a1 	beq.w	800ef20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800edde:	4b7f      	ldr	r3, [pc, #508]	@ (800efdc <tcp_process+0x594>)
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	3b01      	subs	r3, #1
 800edea:	2b00      	cmp	r3, #0
 800edec:	db7e      	blt.n	800eeec <tcp_process+0x4a4>
 800edee:	4b7b      	ldr	r3, [pc, #492]	@ (800efdc <tcp_process+0x594>)
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	dc77      	bgt.n	800eeec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2204      	movs	r2, #4
 800ee00:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d102      	bne.n	800ee10 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ee0a:	23fa      	movs	r3, #250	@ 0xfa
 800ee0c:	76bb      	strb	r3, [r7, #26]
 800ee0e:	e01d      	b.n	800ee4c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <tcp_process+0x3e0>
 800ee1a:	4b76      	ldr	r3, [pc, #472]	@ (800eff4 <tcp_process+0x5ac>)
 800ee1c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ee20:	4975      	ldr	r1, [pc, #468]	@ (800eff8 <tcp_process+0x5b0>)
 800ee22:	4876      	ldr	r0, [pc, #472]	@ (800effc <tcp_process+0x5b4>)
 800ee24:	f006 fe34 	bl	8015a90 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00a      	beq.n	800ee48 <tcp_process+0x400>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	6910      	ldr	r0, [r2, #16]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	4798      	blx	r3
 800ee42:	4603      	mov	r3, r0
 800ee44:	76bb      	strb	r3, [r7, #26]
 800ee46:	e001      	b.n	800ee4c <tcp_process+0x404>
 800ee48:	23f0      	movs	r3, #240	@ 0xf0
 800ee4a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ee4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00a      	beq.n	800ee6a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ee54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee58:	f113 0f0d 	cmn.w	r3, #13
 800ee5c:	d002      	beq.n	800ee64 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7fd ff8c 	bl	800cd7c <tcp_abort>
            }
            return ERR_ABRT;
 800ee64:	f06f 030c 	mvn.w	r3, #12
 800ee68:	e1ce      	b.n	800f208 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fae0 	bl	800f430 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ee70:	4b63      	ldr	r3, [pc, #396]	@ (800f000 <tcp_process+0x5b8>)
 800ee72:	881b      	ldrh	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d005      	beq.n	800ee84 <tcp_process+0x43c>
            recv_acked--;
 800ee78:	4b61      	ldr	r3, [pc, #388]	@ (800f000 <tcp_process+0x5b8>)
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	4b5f      	ldr	r3, [pc, #380]	@ (800f000 <tcp_process+0x5b8>)
 800ee82:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee88:	009a      	lsls	r2, r3, #2
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ee94:	428b      	cmp	r3, r1
 800ee96:	bf38      	it	cc
 800ee98:	460b      	movcc	r3, r1
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d204      	bcs.n	800eea8 <tcp_process+0x460>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	e00d      	b.n	800eec4 <tcp_process+0x47c>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	f241 121c 	movw	r2, #4380	@ 0x111c
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d904      	bls.n	800eec0 <tcp_process+0x478>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eeba:	005b      	lsls	r3, r3, #1
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	e001      	b.n	800eec4 <tcp_process+0x47c>
 800eec0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eeca:	4b4e      	ldr	r3, [pc, #312]	@ (800f004 <tcp_process+0x5bc>)
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	f003 0320 	and.w	r3, r3, #32
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d037      	beq.n	800ef46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	8b5b      	ldrh	r3, [r3, #26]
 800eeda:	f043 0302 	orr.w	r3, r3, #2
 800eede:	b29a      	uxth	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2207      	movs	r2, #7
 800eee8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eeea:	e02c      	b.n	800ef46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeec:	4b3b      	ldr	r3, [pc, #236]	@ (800efdc <tcp_process+0x594>)
 800eeee:	6819      	ldr	r1, [r3, #0]
 800eef0:	4b3b      	ldr	r3, [pc, #236]	@ (800efe0 <tcp_process+0x598>)
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	461a      	mov	r2, r3
 800eef6:	4b3b      	ldr	r3, [pc, #236]	@ (800efe4 <tcp_process+0x59c>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eefc:	4b3a      	ldr	r3, [pc, #232]	@ (800efe8 <tcp_process+0x5a0>)
 800eefe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef00:	885b      	ldrh	r3, [r3, #2]
 800ef02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef04:	4a38      	ldr	r2, [pc, #224]	@ (800efe8 <tcp_process+0x5a0>)
 800ef06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef08:	8812      	ldrh	r2, [r2, #0]
 800ef0a:	b292      	uxth	r2, r2
 800ef0c:	9202      	str	r2, [sp, #8]
 800ef0e:	9301      	str	r3, [sp, #4]
 800ef10:	4b36      	ldr	r3, [pc, #216]	@ (800efec <tcp_process+0x5a4>)
 800ef12:	9300      	str	r3, [sp, #0]
 800ef14:	4b36      	ldr	r3, [pc, #216]	@ (800eff0 <tcp_process+0x5a8>)
 800ef16:	4602      	mov	r2, r0
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f002 fbcb 	bl	80116b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ef1e:	e167      	b.n	800f1f0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ef20:	4b2d      	ldr	r3, [pc, #180]	@ (800efd8 <tcp_process+0x590>)
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	f003 0302 	and.w	r3, r3, #2
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 8161 	beq.w	800f1f0 <tcp_process+0x7a8>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef32:	1e5a      	subs	r2, r3, #1
 800ef34:	4b2b      	ldr	r3, [pc, #172]	@ (800efe4 <tcp_process+0x59c>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	f040 8159 	bne.w	800f1f0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f002 f9b2 	bl	80112a8 <tcp_rexmit>
      break;
 800ef44:	e154      	b.n	800f1f0 <tcp_process+0x7a8>
 800ef46:	e153      	b.n	800f1f0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 fa71 	bl	800f430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ef4e:	4b2d      	ldr	r3, [pc, #180]	@ (800f004 <tcp_process+0x5bc>)
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	f003 0320 	and.w	r3, r3, #32
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 814c 	beq.w	800f1f4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	8b5b      	ldrh	r3, [r3, #26]
 800ef60:	f043 0302 	orr.w	r3, r3, #2
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2207      	movs	r2, #7
 800ef6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef70:	e140      	b.n	800f1f4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 fa5c 	bl	800f430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef78:	4b22      	ldr	r3, [pc, #136]	@ (800f004 <tcp_process+0x5bc>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	f003 0320 	and.w	r3, r3, #32
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d071      	beq.n	800f068 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef84:	4b14      	ldr	r3, [pc, #80]	@ (800efd8 <tcp_process+0x590>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	f003 0310 	and.w	r3, r3, #16
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d060      	beq.n	800f052 <tcp_process+0x60a>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef94:	4b11      	ldr	r3, [pc, #68]	@ (800efdc <tcp_process+0x594>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d15a      	bne.n	800f052 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d156      	bne.n	800f052 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	8b5b      	ldrh	r3, [r3, #26]
 800efa8:	f043 0302 	orr.w	r3, r3, #2
 800efac:	b29a      	uxth	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7fe fdbc 	bl	800db30 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800efb8:	4b13      	ldr	r3, [pc, #76]	@ (800f008 <tcp_process+0x5c0>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d105      	bne.n	800efce <tcp_process+0x586>
 800efc2:	4b11      	ldr	r3, [pc, #68]	@ (800f008 <tcp_process+0x5c0>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	4a0f      	ldr	r2, [pc, #60]	@ (800f008 <tcp_process+0x5c0>)
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	e02e      	b.n	800f02c <tcp_process+0x5e4>
 800efce:	4b0e      	ldr	r3, [pc, #56]	@ (800f008 <tcp_process+0x5c0>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	617b      	str	r3, [r7, #20]
 800efd4:	e027      	b.n	800f026 <tcp_process+0x5de>
 800efd6:	bf00      	nop
 800efd8:	20008c44 	.word	0x20008c44
 800efdc:	20008c3c 	.word	0x20008c3c
 800efe0:	20008c42 	.word	0x20008c42
 800efe4:	20008c38 	.word	0x20008c38
 800efe8:	20008c28 	.word	0x20008c28
 800efec:	200056a0 	.word	0x200056a0
 800eff0:	200056a4 	.word	0x200056a4
 800eff4:	08017c3c 	.word	0x08017c3c
 800eff8:	08017edc 	.word	0x08017edc
 800effc:	08017c88 	.word	0x08017c88
 800f000:	20008c40 	.word	0x20008c40
 800f004:	20008c45 	.word	0x20008c45
 800f008:	20008c0c 	.word	0x20008c0c
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	429a      	cmp	r2, r3
 800f014:	d104      	bne.n	800f020 <tcp_process+0x5d8>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68da      	ldr	r2, [r3, #12]
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	60da      	str	r2, [r3, #12]
 800f01e:	e005      	b.n	800f02c <tcp_process+0x5e4>
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	617b      	str	r3, [r7, #20]
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1ef      	bne.n	800f00c <tcp_process+0x5c4>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	60da      	str	r2, [r3, #12]
 800f032:	4b77      	ldr	r3, [pc, #476]	@ (800f210 <tcp_process+0x7c8>)
 800f034:	2201      	movs	r2, #1
 800f036:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	220a      	movs	r2, #10
 800f03c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f03e:	4b75      	ldr	r3, [pc, #468]	@ (800f214 <tcp_process+0x7cc>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	60da      	str	r2, [r3, #12]
 800f046:	4a73      	ldr	r2, [pc, #460]	@ (800f214 <tcp_process+0x7cc>)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	f002 fcf4 	bl	8011a38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f050:	e0d2      	b.n	800f1f8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8b5b      	ldrh	r3, [r3, #26]
 800f056:	f043 0302 	orr.w	r3, r3, #2
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2208      	movs	r2, #8
 800f064:	751a      	strb	r2, [r3, #20]
      break;
 800f066:	e0c7      	b.n	800f1f8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f068:	4b6b      	ldr	r3, [pc, #428]	@ (800f218 <tcp_process+0x7d0>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	f003 0310 	and.w	r3, r3, #16
 800f070:	2b00      	cmp	r3, #0
 800f072:	f000 80c1 	beq.w	800f1f8 <tcp_process+0x7b0>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f07a:	4b68      	ldr	r3, [pc, #416]	@ (800f21c <tcp_process+0x7d4>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	429a      	cmp	r2, r3
 800f080:	f040 80ba 	bne.w	800f1f8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f040 80b5 	bne.w	800f1f8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2206      	movs	r2, #6
 800f092:	751a      	strb	r2, [r3, #20]
      break;
 800f094:	e0b0      	b.n	800f1f8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f9ca 	bl	800f430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f09c:	4b60      	ldr	r3, [pc, #384]	@ (800f220 <tcp_process+0x7d8>)
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	f003 0320 	and.w	r3, r3, #32
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 80a9 	beq.w	800f1fc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	8b5b      	ldrh	r3, [r3, #26]
 800f0ae:	f043 0302 	orr.w	r3, r3, #2
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7fe fd39 	bl	800db30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f0be:	4b59      	ldr	r3, [pc, #356]	@ (800f224 <tcp_process+0x7dc>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d105      	bne.n	800f0d4 <tcp_process+0x68c>
 800f0c8:	4b56      	ldr	r3, [pc, #344]	@ (800f224 <tcp_process+0x7dc>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	4a55      	ldr	r2, [pc, #340]	@ (800f224 <tcp_process+0x7dc>)
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	e013      	b.n	800f0fc <tcp_process+0x6b4>
 800f0d4:	4b53      	ldr	r3, [pc, #332]	@ (800f224 <tcp_process+0x7dc>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	613b      	str	r3, [r7, #16]
 800f0da:	e00c      	b.n	800f0f6 <tcp_process+0x6ae>
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d104      	bne.n	800f0f0 <tcp_process+0x6a8>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	68da      	ldr	r2, [r3, #12]
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	60da      	str	r2, [r3, #12]
 800f0ee:	e005      	b.n	800f0fc <tcp_process+0x6b4>
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	613b      	str	r3, [r7, #16]
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1ef      	bne.n	800f0dc <tcp_process+0x694>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	60da      	str	r2, [r3, #12]
 800f102:	4b43      	ldr	r3, [pc, #268]	@ (800f210 <tcp_process+0x7c8>)
 800f104:	2201      	movs	r2, #1
 800f106:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	220a      	movs	r2, #10
 800f10c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f10e:	4b41      	ldr	r3, [pc, #260]	@ (800f214 <tcp_process+0x7cc>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	60da      	str	r2, [r3, #12]
 800f116:	4a3f      	ldr	r2, [pc, #252]	@ (800f214 <tcp_process+0x7cc>)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6013      	str	r3, [r2, #0]
 800f11c:	f002 fc8c 	bl	8011a38 <tcp_timer_needed>
      }
      break;
 800f120:	e06c      	b.n	800f1fc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f984 	bl	800f430 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f128:	4b3b      	ldr	r3, [pc, #236]	@ (800f218 <tcp_process+0x7d0>)
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	f003 0310 	and.w	r3, r3, #16
 800f130:	2b00      	cmp	r3, #0
 800f132:	d065      	beq.n	800f200 <tcp_process+0x7b8>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f138:	4b38      	ldr	r3, [pc, #224]	@ (800f21c <tcp_process+0x7d4>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d15f      	bne.n	800f200 <tcp_process+0x7b8>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f144:	2b00      	cmp	r3, #0
 800f146:	d15b      	bne.n	800f200 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7fe fcf1 	bl	800db30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f14e:	4b35      	ldr	r3, [pc, #212]	@ (800f224 <tcp_process+0x7dc>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	429a      	cmp	r2, r3
 800f156:	d105      	bne.n	800f164 <tcp_process+0x71c>
 800f158:	4b32      	ldr	r3, [pc, #200]	@ (800f224 <tcp_process+0x7dc>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	4a31      	ldr	r2, [pc, #196]	@ (800f224 <tcp_process+0x7dc>)
 800f160:	6013      	str	r3, [r2, #0]
 800f162:	e013      	b.n	800f18c <tcp_process+0x744>
 800f164:	4b2f      	ldr	r3, [pc, #188]	@ (800f224 <tcp_process+0x7dc>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	60fb      	str	r3, [r7, #12]
 800f16a:	e00c      	b.n	800f186 <tcp_process+0x73e>
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	429a      	cmp	r2, r3
 800f174:	d104      	bne.n	800f180 <tcp_process+0x738>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68da      	ldr	r2, [r3, #12]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	60da      	str	r2, [r3, #12]
 800f17e:	e005      	b.n	800f18c <tcp_process+0x744>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	60fb      	str	r3, [r7, #12]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1ef      	bne.n	800f16c <tcp_process+0x724>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	60da      	str	r2, [r3, #12]
 800f192:	4b1f      	ldr	r3, [pc, #124]	@ (800f210 <tcp_process+0x7c8>)
 800f194:	2201      	movs	r2, #1
 800f196:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	220a      	movs	r2, #10
 800f19c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f19e:	4b1d      	ldr	r3, [pc, #116]	@ (800f214 <tcp_process+0x7cc>)
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	60da      	str	r2, [r3, #12]
 800f1a6:	4a1b      	ldr	r2, [pc, #108]	@ (800f214 <tcp_process+0x7cc>)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6013      	str	r3, [r2, #0]
 800f1ac:	f002 fc44 	bl	8011a38 <tcp_timer_needed>
      }
      break;
 800f1b0:	e026      	b.n	800f200 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 f93c 	bl	800f430 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f1b8:	4b17      	ldr	r3, [pc, #92]	@ (800f218 <tcp_process+0x7d0>)
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	f003 0310 	and.w	r3, r3, #16
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d01f      	beq.n	800f204 <tcp_process+0x7bc>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1c8:	4b14      	ldr	r3, [pc, #80]	@ (800f21c <tcp_process+0x7d4>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d119      	bne.n	800f204 <tcp_process+0x7bc>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d115      	bne.n	800f204 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f1d8:	4b11      	ldr	r3, [pc, #68]	@ (800f220 <tcp_process+0x7d8>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f043 0310 	orr.w	r3, r3, #16
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800f220 <tcp_process+0x7d8>)
 800f1e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f1e6:	e00d      	b.n	800f204 <tcp_process+0x7bc>
    default:
      break;
 800f1e8:	bf00      	nop
 800f1ea:	e00c      	b.n	800f206 <tcp_process+0x7be>
      break;
 800f1ec:	bf00      	nop
 800f1ee:	e00a      	b.n	800f206 <tcp_process+0x7be>
      break;
 800f1f0:	bf00      	nop
 800f1f2:	e008      	b.n	800f206 <tcp_process+0x7be>
      break;
 800f1f4:	bf00      	nop
 800f1f6:	e006      	b.n	800f206 <tcp_process+0x7be>
      break;
 800f1f8:	bf00      	nop
 800f1fa:	e004      	b.n	800f206 <tcp_process+0x7be>
      break;
 800f1fc:	bf00      	nop
 800f1fe:	e002      	b.n	800f206 <tcp_process+0x7be>
      break;
 800f200:	bf00      	nop
 800f202:	e000      	b.n	800f206 <tcp_process+0x7be>
      break;
 800f204:	bf00      	nop
  }
  return ERR_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3724      	adds	r7, #36	@ 0x24
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd90      	pop	{r4, r7, pc}
 800f210:	20008c14 	.word	0x20008c14
 800f214:	20008c10 	.word	0x20008c10
 800f218:	20008c44 	.word	0x20008c44
 800f21c:	20008c3c 	.word	0x20008c3c
 800f220:	20008c45 	.word	0x20008c45
 800f224:	20008c0c 	.word	0x20008c0c

0800f228 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f228:	b590      	push	{r4, r7, lr}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d106      	bne.n	800f246 <tcp_oos_insert_segment+0x1e>
 800f238:	4b3b      	ldr	r3, [pc, #236]	@ (800f328 <tcp_oos_insert_segment+0x100>)
 800f23a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f23e:	493b      	ldr	r1, [pc, #236]	@ (800f32c <tcp_oos_insert_segment+0x104>)
 800f240:	483b      	ldr	r0, [pc, #236]	@ (800f330 <tcp_oos_insert_segment+0x108>)
 800f242:	f006 fc25 	bl	8015a90 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	899b      	ldrh	r3, [r3, #12]
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fb fc9e 	bl	800ab90 <lwip_htons>
 800f254:	4603      	mov	r3, r0
 800f256:	b2db      	uxtb	r3, r3
 800f258:	f003 0301 	and.w	r3, r3, #1
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d028      	beq.n	800f2b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f260:	6838      	ldr	r0, [r7, #0]
 800f262:	f7fe fa63 	bl	800d72c <tcp_segs_free>
    next = NULL;
 800f266:	2300      	movs	r3, #0
 800f268:	603b      	str	r3, [r7, #0]
 800f26a:	e056      	b.n	800f31a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	899b      	ldrh	r3, [r3, #12]
 800f272:	b29b      	uxth	r3, r3
 800f274:	4618      	mov	r0, r3
 800f276:	f7fb fc8b 	bl	800ab90 <lwip_htons>
 800f27a:	4603      	mov	r3, r0
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	f003 0301 	and.w	r3, r3, #1
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00d      	beq.n	800f2a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	899b      	ldrh	r3, [r3, #12]
 800f28c:	b29c      	uxth	r4, r3
 800f28e:	2001      	movs	r0, #1
 800f290:	f7fb fc7e 	bl	800ab90 <lwip_htons>
 800f294:	4603      	mov	r3, r0
 800f296:	461a      	mov	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	4322      	orrs	r2, r4
 800f29e:	b292      	uxth	r2, r2
 800f2a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7fe fa52 	bl	800d756 <tcp_seg_free>
    while (next &&
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00e      	beq.n	800f2d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	891b      	ldrh	r3, [r3, #8]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	4b1d      	ldr	r3, [pc, #116]	@ (800f334 <tcp_oos_insert_segment+0x10c>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	441a      	add	r2, r3
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	8909      	ldrh	r1, [r1, #8]
 800f2ce:	440b      	add	r3, r1
 800f2d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	daca      	bge.n	800f26c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d01e      	beq.n	800f31a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	891b      	ldrh	r3, [r3, #8]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4b14      	ldr	r3, [pc, #80]	@ (800f334 <tcp_oos_insert_segment+0x10c>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	441a      	add	r2, r3
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	dd12      	ble.n	800f31a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f334 <tcp_oos_insert_segment+0x10c>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	b29b      	uxth	r3, r3
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	b29a      	uxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	891b      	ldrh	r3, [r3, #8]
 800f312:	4619      	mov	r1, r3
 800f314:	4610      	mov	r0, r2
 800f316:	f7fc fe13 	bl	800bf40 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	683a      	ldr	r2, [r7, #0]
 800f31e:	601a      	str	r2, [r3, #0]
}
 800f320:	bf00      	nop
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	bd90      	pop	{r4, r7, pc}
 800f328:	08017c3c 	.word	0x08017c3c
 800f32c:	08017efc 	.word	0x08017efc
 800f330:	08017c88 	.word	0x08017c88
 800f334:	20008c38 	.word	0x20008c38

0800f338 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f338:	b5b0      	push	{r4, r5, r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f346:	e03e      	b.n	800f3c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	4618      	mov	r0, r3
 800f358:	f7fd f800 	bl	800c35c <pbuf_clen>
 800f35c:	4603      	mov	r3, r0
 800f35e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f366:	8a7a      	ldrh	r2, [r7, #18]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d906      	bls.n	800f37a <tcp_free_acked_segments+0x42>
 800f36c:	4b2a      	ldr	r3, [pc, #168]	@ (800f418 <tcp_free_acked_segments+0xe0>)
 800f36e:	f240 4257 	movw	r2, #1111	@ 0x457
 800f372:	492a      	ldr	r1, [pc, #168]	@ (800f41c <tcp_free_acked_segments+0xe4>)
 800f374:	482a      	ldr	r0, [pc, #168]	@ (800f420 <tcp_free_acked_segments+0xe8>)
 800f376:	f006 fb8b 	bl	8015a90 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f380:	8a7b      	ldrh	r3, [r7, #18]
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	b29a      	uxth	r2, r3
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	891a      	ldrh	r2, [r3, #8]
 800f390:	4b24      	ldr	r3, [pc, #144]	@ (800f424 <tcp_free_acked_segments+0xec>)
 800f392:	881b      	ldrh	r3, [r3, #0]
 800f394:	4413      	add	r3, r2
 800f396:	b29a      	uxth	r2, r3
 800f398:	4b22      	ldr	r3, [pc, #136]	@ (800f424 <tcp_free_acked_segments+0xec>)
 800f39a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f39c:	6978      	ldr	r0, [r7, #20]
 800f39e:	f7fe f9da 	bl	800d756 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00c      	beq.n	800f3c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d109      	bne.n	800f3c6 <tcp_free_acked_segments+0x8e>
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d106      	bne.n	800f3c6 <tcp_free_acked_segments+0x8e>
 800f3b8:	4b17      	ldr	r3, [pc, #92]	@ (800f418 <tcp_free_acked_segments+0xe0>)
 800f3ba:	f240 4261 	movw	r2, #1121	@ 0x461
 800f3be:	491a      	ldr	r1, [pc, #104]	@ (800f428 <tcp_free_acked_segments+0xf0>)
 800f3c0:	4817      	ldr	r0, [pc, #92]	@ (800f420 <tcp_free_acked_segments+0xe8>)
 800f3c2:	f006 fb65 	bl	8015a90 <iprintf>
  while (seg_list != NULL &&
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d020      	beq.n	800f40e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fb fbf1 	bl	800abba <lwip_htonl>
 800f3d8:	4604      	mov	r4, r0
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	891b      	ldrh	r3, [r3, #8]
 800f3de:	461d      	mov	r5, r3
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	899b      	ldrh	r3, [r3, #12]
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fb fbd1 	bl	800ab90 <lwip_htons>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	f003 0303 	and.w	r3, r3, #3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d001      	beq.n	800f3fe <tcp_free_acked_segments+0xc6>
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e000      	b.n	800f400 <tcp_free_acked_segments+0xc8>
 800f3fe:	2300      	movs	r3, #0
 800f400:	442b      	add	r3, r5
 800f402:	18e2      	adds	r2, r4, r3
 800f404:	4b09      	ldr	r3, [pc, #36]	@ (800f42c <tcp_free_acked_segments+0xf4>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	dd9c      	ble.n	800f348 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f40e:	68bb      	ldr	r3, [r7, #8]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3718      	adds	r7, #24
 800f414:	46bd      	mov	sp, r7
 800f416:	bdb0      	pop	{r4, r5, r7, pc}
 800f418:	08017c3c 	.word	0x08017c3c
 800f41c:	08017f24 	.word	0x08017f24
 800f420:	08017c88 	.word	0x08017c88
 800f424:	20008c40 	.word	0x20008c40
 800f428:	08017f4c 	.word	0x08017f4c
 800f42c:	20008c3c 	.word	0x20008c3c

0800f430 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f430:	b5b0      	push	{r4, r5, r7, lr}
 800f432:	b094      	sub	sp, #80	@ 0x50
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f438:	2300      	movs	r3, #0
 800f43a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <tcp_receive+0x20>
 800f442:	4b91      	ldr	r3, [pc, #580]	@ (800f688 <tcp_receive+0x258>)
 800f444:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f448:	4990      	ldr	r1, [pc, #576]	@ (800f68c <tcp_receive+0x25c>)
 800f44a:	4891      	ldr	r0, [pc, #580]	@ (800f690 <tcp_receive+0x260>)
 800f44c:	f006 fb20 	bl	8015a90 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	7d1b      	ldrb	r3, [r3, #20]
 800f454:	2b03      	cmp	r3, #3
 800f456:	d806      	bhi.n	800f466 <tcp_receive+0x36>
 800f458:	4b8b      	ldr	r3, [pc, #556]	@ (800f688 <tcp_receive+0x258>)
 800f45a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f45e:	498d      	ldr	r1, [pc, #564]	@ (800f694 <tcp_receive+0x264>)
 800f460:	488b      	ldr	r0, [pc, #556]	@ (800f690 <tcp_receive+0x260>)
 800f462:	f006 fb15 	bl	8015a90 <iprintf>

  if (flags & TCP_ACK) {
 800f466:	4b8c      	ldr	r3, [pc, #560]	@ (800f698 <tcp_receive+0x268>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	f003 0310 	and.w	r3, r3, #16
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f000 8264 	beq.w	800f93c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f47a:	461a      	mov	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f480:	4413      	add	r3, r2
 800f482:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f488:	4b84      	ldr	r3, [pc, #528]	@ (800f69c <tcp_receive+0x26c>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	db1b      	blt.n	800f4ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f496:	4b81      	ldr	r3, [pc, #516]	@ (800f69c <tcp_receive+0x26c>)
 800f498:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d106      	bne.n	800f4ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f4a2:	4b7f      	ldr	r3, [pc, #508]	@ (800f6a0 <tcp_receive+0x270>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	1ad3      	subs	r3, r2, r3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	db0e      	blt.n	800f4ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f4b0:	4b7b      	ldr	r3, [pc, #492]	@ (800f6a0 <tcp_receive+0x270>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d125      	bne.n	800f504 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f4b8:	4b7a      	ldr	r3, [pc, #488]	@ (800f6a4 <tcp_receive+0x274>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	89db      	ldrh	r3, [r3, #14]
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d91c      	bls.n	800f504 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f4ca:	4b76      	ldr	r3, [pc, #472]	@ (800f6a4 <tcp_receive+0x274>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	89db      	ldrh	r3, [r3, #14]
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d205      	bcs.n	800f4f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f4f4:	4b69      	ldr	r3, [pc, #420]	@ (800f69c <tcp_receive+0x26c>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f4fc:	4b68      	ldr	r3, [pc, #416]	@ (800f6a0 <tcp_receive+0x270>)
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f504:	4b66      	ldr	r3, [pc, #408]	@ (800f6a0 <tcp_receive+0x270>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f50c:	1ad3      	subs	r3, r2, r3
 800f50e:	2b00      	cmp	r3, #0
 800f510:	dc58      	bgt.n	800f5c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f512:	4b65      	ldr	r3, [pc, #404]	@ (800f6a8 <tcp_receive+0x278>)
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d14b      	bne.n	800f5b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f524:	4413      	add	r3, r2
 800f526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f528:	429a      	cmp	r2, r3
 800f52a:	d142      	bne.n	800f5b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f532:	2b00      	cmp	r3, #0
 800f534:	db3d      	blt.n	800f5b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f53a:	4b59      	ldr	r3, [pc, #356]	@ (800f6a0 <tcp_receive+0x270>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d137      	bne.n	800f5b2 <tcp_receive+0x182>
              found_dupack = 1;
 800f542:	2301      	movs	r3, #1
 800f544:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f54c:	2bff      	cmp	r3, #255	@ 0xff
 800f54e:	d007      	beq.n	800f560 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f556:	3301      	adds	r3, #1
 800f558:	b2da      	uxtb	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f566:	2b03      	cmp	r3, #3
 800f568:	d91b      	bls.n	800f5a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f574:	4413      	add	r3, r2
 800f576:	b29a      	uxth	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f57e:	429a      	cmp	r2, r3
 800f580:	d30a      	bcc.n	800f598 <tcp_receive+0x168>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f58c:	4413      	add	r3, r2
 800f58e:	b29a      	uxth	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f596:	e004      	b.n	800f5a2 <tcp_receive+0x172>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f59e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d902      	bls.n	800f5b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f001 fee7 	bl	8011380 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f040 8161 	bne.w	800f87c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f5c2:	e15b      	b.n	800f87c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f5c4:	4b36      	ldr	r3, [pc, #216]	@ (800f6a0 <tcp_receive+0x270>)
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f2c0 814e 	blt.w	800f872 <tcp_receive+0x442>
 800f5d6:	4b32      	ldr	r3, [pc, #200]	@ (800f6a0 <tcp_receive+0x270>)
 800f5d8:	681a      	ldr	r2, [r3, #0]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5de:	1ad3      	subs	r3, r2, r3
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f300 8146 	bgt.w	800f872 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	8b5b      	ldrh	r3, [r3, #26]
 800f5ea:	f003 0304 	and.w	r3, r3, #4
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d010      	beq.n	800f614 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	8b5b      	ldrh	r3, [r3, #26]
 800f5f6:	f023 0304 	bic.w	r3, r3, #4
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f622:	10db      	asrs	r3, r3, #3
 800f624:	b21b      	sxth	r3, r3
 800f626:	b29a      	uxth	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f62e:	b29b      	uxth	r3, r3
 800f630:	4413      	add	r3, r2
 800f632:	b29b      	uxth	r3, r3
 800f634:	b21a      	sxth	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f63c:	4b18      	ldr	r3, [pc, #96]	@ (800f6a0 <tcp_receive+0x270>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	b29a      	uxth	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f646:	b29b      	uxth	r3, r3
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f654:	4b12      	ldr	r3, [pc, #72]	@ (800f6a0 <tcp_receive+0x270>)
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	7d1b      	ldrb	r3, [r3, #20]
 800f660:	2b03      	cmp	r3, #3
 800f662:	f240 8097 	bls.w	800f794 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f672:	429a      	cmp	r2, r3
 800f674:	d245      	bcs.n	800f702 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	8b5b      	ldrh	r3, [r3, #26]
 800f67a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d014      	beq.n	800f6ac <tcp_receive+0x27c>
 800f682:	2301      	movs	r3, #1
 800f684:	e013      	b.n	800f6ae <tcp_receive+0x27e>
 800f686:	bf00      	nop
 800f688:	08017c3c 	.word	0x08017c3c
 800f68c:	08017f6c 	.word	0x08017f6c
 800f690:	08017c88 	.word	0x08017c88
 800f694:	08017f88 	.word	0x08017f88
 800f698:	20008c44 	.word	0x20008c44
 800f69c:	20008c38 	.word	0x20008c38
 800f6a0:	20008c3c 	.word	0x20008c3c
 800f6a4:	20008c28 	.word	0x20008c28
 800f6a8:	20008c42 	.word	0x20008c42
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f6b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f6b6:	b29a      	uxth	r2, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f6bc:	fb12 f303 	smulbb	r3, r2, r3
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	bf28      	it	cs
 800f6c8:	4613      	movcs	r3, r2
 800f6ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f6d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f6d4:	4413      	add	r3, r2
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d309      	bcc.n	800f6f6 <tcp_receive+0x2c6>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f6e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f6ea:	4413      	add	r3, r2
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f6f4:	e04e      	b.n	800f794 <tcp_receive+0x364>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f700:	e048      	b.n	800f794 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f708:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f70a:	4413      	add	r3, r2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f714:	429a      	cmp	r2, r3
 800f716:	d309      	bcc.n	800f72c <tcp_receive+0x2fc>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f71e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f720:	4413      	add	r3, r2
 800f722:	b29a      	uxth	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f72a:	e004      	b.n	800f736 <tcp_receive+0x306>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f742:	429a      	cmp	r2, r3
 800f744:	d326      	bcc.n	800f794 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f752:	1ad3      	subs	r3, r2, r3
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f766:	4413      	add	r3, r2
 800f768:	b29a      	uxth	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f770:	429a      	cmp	r2, r3
 800f772:	d30a      	bcc.n	800f78a <tcp_receive+0x35a>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f77e:	4413      	add	r3, r2
 800f780:	b29a      	uxth	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f788:	e004      	b.n	800f794 <tcp_receive+0x364>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f790:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f79c:	4a98      	ldr	r2, [pc, #608]	@ (800fa00 <tcp_receive+0x5d0>)
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7ff fdca 	bl	800f338 <tcp_free_acked_segments>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7b2:	4a94      	ldr	r2, [pc, #592]	@ (800fa04 <tcp_receive+0x5d4>)
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7ff fdbf 	bl	800f338 <tcp_free_acked_segments>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d104      	bne.n	800f7d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7ce:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f7d0:	e002      	b.n	800f7d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d103      	bne.n	800f7ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f7f4:	4b84      	ldr	r3, [pc, #528]	@ (800fa08 <tcp_receive+0x5d8>)
 800f7f6:	881b      	ldrh	r3, [r3, #0]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	8b5b      	ldrh	r3, [r3, #26]
 800f806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d035      	beq.n	800f87a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f812:	2b00      	cmp	r3, #0
 800f814:	d118      	bne.n	800f848 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00c      	beq.n	800f838 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fb f9c5 	bl	800abba <lwip_htonl>
 800f830:	4603      	mov	r3, r0
 800f832:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f834:	2b00      	cmp	r3, #0
 800f836:	dc20      	bgt.n	800f87a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	8b5b      	ldrh	r3, [r3, #26]
 800f83c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f840:	b29a      	uxth	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f846:	e018      	b.n	800f87a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	4618      	mov	r0, r3
 800f856:	f7fb f9b0 	bl	800abba <lwip_htonl>
 800f85a:	4603      	mov	r3, r0
 800f85c:	1ae3      	subs	r3, r4, r3
 800f85e:	2b00      	cmp	r3, #0
 800f860:	dc0b      	bgt.n	800f87a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	8b5b      	ldrh	r3, [r3, #26]
 800f866:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f870:	e003      	b.n	800f87a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f001 ff70 	bl	8011758 <tcp_send_empty_ack>
 800f878:	e000      	b.n	800f87c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f87a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f880:	2b00      	cmp	r3, #0
 800f882:	d05b      	beq.n	800f93c <tcp_receive+0x50c>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f888:	4b60      	ldr	r3, [pc, #384]	@ (800fa0c <tcp_receive+0x5dc>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	da54      	bge.n	800f93c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f892:	4b5f      	ldr	r3, [pc, #380]	@ (800fa10 <tcp_receive+0x5e0>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	b29a      	uxth	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	1ad3      	subs	r3, r2, r3
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f8a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f8b0:	10db      	asrs	r3, r3, #3
 800f8b2:	b21b      	sxth	r3, r3
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	1ad3      	subs	r3, r2, r3
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f8ca:	4413      	add	r3, r2
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	b21a      	sxth	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f8d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	da05      	bge.n	800f8e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f8dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f8e0:	425b      	negs	r3, r3
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f8e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f8f2:	109b      	asrs	r3, r3, #2
 800f8f4:	b21b      	sxth	r3, r3
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f906:	b29a      	uxth	r2, r3
 800f908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f90c:	4413      	add	r3, r2
 800f90e:	b29b      	uxth	r3, r3
 800f910:	b21a      	sxth	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f91c:	10db      	asrs	r3, r3, #3
 800f91e:	b21b      	sxth	r3, r3
 800f920:	b29a      	uxth	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f928:	b29b      	uxth	r3, r3
 800f92a:	4413      	add	r3, r2
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	b21a      	sxth	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f93c:	4b35      	ldr	r3, [pc, #212]	@ (800fa14 <tcp_receive+0x5e4>)
 800f93e:	881b      	ldrh	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	f000 84df 	beq.w	8010304 <tcp_receive+0xed4>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	7d1b      	ldrb	r3, [r3, #20]
 800f94a:	2b06      	cmp	r3, #6
 800f94c:	f200 84da 	bhi.w	8010304 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f954:	4b30      	ldr	r3, [pc, #192]	@ (800fa18 <tcp_receive+0x5e8>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	1ad3      	subs	r3, r2, r3
 800f95a:	3b01      	subs	r3, #1
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f2c0 808f 	blt.w	800fa80 <tcp_receive+0x650>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f966:	4b2b      	ldr	r3, [pc, #172]	@ (800fa14 <tcp_receive+0x5e4>)
 800f968:	881b      	ldrh	r3, [r3, #0]
 800f96a:	4619      	mov	r1, r3
 800f96c:	4b2a      	ldr	r3, [pc, #168]	@ (800fa18 <tcp_receive+0x5e8>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	440b      	add	r3, r1
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	3301      	adds	r3, #1
 800f976:	2b00      	cmp	r3, #0
 800f978:	f300 8082 	bgt.w	800fa80 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f97c:	4b27      	ldr	r3, [pc, #156]	@ (800fa1c <tcp_receive+0x5ec>)
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f986:	4b24      	ldr	r3, [pc, #144]	@ (800fa18 <tcp_receive+0x5e8>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f98e:	4b23      	ldr	r3, [pc, #140]	@ (800fa1c <tcp_receive+0x5ec>)
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d106      	bne.n	800f9a4 <tcp_receive+0x574>
 800f996:	4b22      	ldr	r3, [pc, #136]	@ (800fa20 <tcp_receive+0x5f0>)
 800f998:	f240 5294 	movw	r2, #1428	@ 0x594
 800f99c:	4921      	ldr	r1, [pc, #132]	@ (800fa24 <tcp_receive+0x5f4>)
 800f99e:	4822      	ldr	r0, [pc, #136]	@ (800fa28 <tcp_receive+0x5f8>)
 800f9a0:	f006 f876 	bl	8015a90 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d906      	bls.n	800f9bc <tcp_receive+0x58c>
 800f9ae:	4b1c      	ldr	r3, [pc, #112]	@ (800fa20 <tcp_receive+0x5f0>)
 800f9b0:	f240 5295 	movw	r2, #1429	@ 0x595
 800f9b4:	491d      	ldr	r1, [pc, #116]	@ (800fa2c <tcp_receive+0x5fc>)
 800f9b6:	481c      	ldr	r0, [pc, #112]	@ (800fa28 <tcp_receive+0x5f8>)
 800f9b8:	f006 f86a 	bl	8015a90 <iprintf>
      off = (u16_t)off32;
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f9c2:	4b16      	ldr	r3, [pc, #88]	@ (800fa1c <tcp_receive+0x5ec>)
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	891b      	ldrh	r3, [r3, #8]
 800f9c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d906      	bls.n	800f9de <tcp_receive+0x5ae>
 800f9d0:	4b13      	ldr	r3, [pc, #76]	@ (800fa20 <tcp_receive+0x5f0>)
 800f9d2:	f240 5297 	movw	r2, #1431	@ 0x597
 800f9d6:	4916      	ldr	r1, [pc, #88]	@ (800fa30 <tcp_receive+0x600>)
 800f9d8:	4813      	ldr	r0, [pc, #76]	@ (800fa28 <tcp_receive+0x5f8>)
 800f9da:	f006 f859 	bl	8015a90 <iprintf>
      inseg.len -= off;
 800f9de:	4b0f      	ldr	r3, [pc, #60]	@ (800fa1c <tcp_receive+0x5ec>)
 800f9e0:	891a      	ldrh	r2, [r3, #8]
 800f9e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800fa1c <tcp_receive+0x5ec>)
 800f9ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800fa1c <tcp_receive+0x5ec>)
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	891a      	ldrh	r2, [r3, #8]
 800f9f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f9f8:	1ad3      	subs	r3, r2, r3
 800f9fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f9fc:	e02a      	b.n	800fa54 <tcp_receive+0x624>
 800f9fe:	bf00      	nop
 800fa00:	08017fa4 	.word	0x08017fa4
 800fa04:	08017fac 	.word	0x08017fac
 800fa08:	20008c40 	.word	0x20008c40
 800fa0c:	20008c3c 	.word	0x20008c3c
 800fa10:	20008c00 	.word	0x20008c00
 800fa14:	20008c42 	.word	0x20008c42
 800fa18:	20008c38 	.word	0x20008c38
 800fa1c:	20008c18 	.word	0x20008c18
 800fa20:	08017c3c 	.word	0x08017c3c
 800fa24:	08017fb4 	.word	0x08017fb4
 800fa28:	08017c88 	.word	0x08017c88
 800fa2c:	08017fc4 	.word	0x08017fc4
 800fa30:	08017fd4 	.word	0x08017fd4
        off -= p->len;
 800fa34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa36:	895b      	ldrh	r3, [r3, #10]
 800fa38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fa3c:	1ad3      	subs	r3, r2, r3
 800fa3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fa42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa44:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fa46:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fa48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fa4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800fa54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa56:	895b      	ldrh	r3, [r3, #10]
 800fa58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d8e9      	bhi.n	800fa34 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fa60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa64:	4619      	mov	r1, r3
 800fa66:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa68:	f7fc fb6a 	bl	800c140 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa70:	4a90      	ldr	r2, [pc, #576]	@ (800fcb4 <tcp_receive+0x884>)
 800fa72:	6013      	str	r3, [r2, #0]
 800fa74:	4b90      	ldr	r3, [pc, #576]	@ (800fcb8 <tcp_receive+0x888>)
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	4a8e      	ldr	r2, [pc, #568]	@ (800fcb4 <tcp_receive+0x884>)
 800fa7a:	6812      	ldr	r2, [r2, #0]
 800fa7c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fa7e:	e00d      	b.n	800fa9c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fa80:	4b8c      	ldr	r3, [pc, #560]	@ (800fcb4 <tcp_receive+0x884>)
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa88:	1ad3      	subs	r3, r2, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	da06      	bge.n	800fa9c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	8b5b      	ldrh	r3, [r3, #26]
 800fa92:	f043 0302 	orr.w	r3, r3, #2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fa9c:	4b85      	ldr	r3, [pc, #532]	@ (800fcb4 <tcp_receive+0x884>)
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f2c0 8427 	blt.w	80102fa <tcp_receive+0xeca>
 800faac:	4b81      	ldr	r3, [pc, #516]	@ (800fcb4 <tcp_receive+0x884>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fab4:	6879      	ldr	r1, [r7, #4]
 800fab6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fab8:	440b      	add	r3, r1
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	3301      	adds	r3, #1
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f300 841b 	bgt.w	80102fa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fac8:	4b7a      	ldr	r3, [pc, #488]	@ (800fcb4 <tcp_receive+0x884>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	429a      	cmp	r2, r3
 800face:	f040 8298 	bne.w	8010002 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fad2:	4b79      	ldr	r3, [pc, #484]	@ (800fcb8 <tcp_receive+0x888>)
 800fad4:	891c      	ldrh	r4, [r3, #8]
 800fad6:	4b78      	ldr	r3, [pc, #480]	@ (800fcb8 <tcp_receive+0x888>)
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	899b      	ldrh	r3, [r3, #12]
 800fadc:	b29b      	uxth	r3, r3
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fb f856 	bl	800ab90 <lwip_htons>
 800fae4:	4603      	mov	r3, r0
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	f003 0303 	and.w	r3, r3, #3
 800faec:	2b00      	cmp	r3, #0
 800faee:	d001      	beq.n	800faf4 <tcp_receive+0x6c4>
 800faf0:	2301      	movs	r3, #1
 800faf2:	e000      	b.n	800faf6 <tcp_receive+0x6c6>
 800faf4:	2300      	movs	r3, #0
 800faf6:	4423      	add	r3, r4
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	4b70      	ldr	r3, [pc, #448]	@ (800fcbc <tcp_receive+0x88c>)
 800fafc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fb02:	4b6e      	ldr	r3, [pc, #440]	@ (800fcbc <tcp_receive+0x88c>)
 800fb04:	881b      	ldrh	r3, [r3, #0]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d274      	bcs.n	800fbf4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb0a:	4b6b      	ldr	r3, [pc, #428]	@ (800fcb8 <tcp_receive+0x888>)
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	899b      	ldrh	r3, [r3, #12]
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fb f83c 	bl	800ab90 <lwip_htons>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	f003 0301 	and.w	r3, r3, #1
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d01e      	beq.n	800fb62 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fb24:	4b64      	ldr	r3, [pc, #400]	@ (800fcb8 <tcp_receive+0x888>)
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	899b      	ldrh	r3, [r3, #12]
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	b21b      	sxth	r3, r3
 800fb2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fb32:	b21c      	sxth	r4, r3
 800fb34:	4b60      	ldr	r3, [pc, #384]	@ (800fcb8 <tcp_receive+0x888>)
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	899b      	ldrh	r3, [r3, #12]
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fb f827 	bl	800ab90 <lwip_htons>
 800fb42:	4603      	mov	r3, r0
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fb f81f 	bl	800ab90 <lwip_htons>
 800fb52:	4603      	mov	r3, r0
 800fb54:	b21b      	sxth	r3, r3
 800fb56:	4323      	orrs	r3, r4
 800fb58:	b21a      	sxth	r2, r3
 800fb5a:	4b57      	ldr	r3, [pc, #348]	@ (800fcb8 <tcp_receive+0x888>)
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	b292      	uxth	r2, r2
 800fb60:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fb66:	4b54      	ldr	r3, [pc, #336]	@ (800fcb8 <tcp_receive+0x888>)
 800fb68:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb6a:	4b53      	ldr	r3, [pc, #332]	@ (800fcb8 <tcp_receive+0x888>)
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	899b      	ldrh	r3, [r3, #12]
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fb f80c 	bl	800ab90 <lwip_htons>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	f003 0302 	and.w	r3, r3, #2
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d005      	beq.n	800fb90 <tcp_receive+0x760>
            inseg.len -= 1;
 800fb84:	4b4c      	ldr	r3, [pc, #304]	@ (800fcb8 <tcp_receive+0x888>)
 800fb86:	891b      	ldrh	r3, [r3, #8]
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	b29a      	uxth	r2, r3
 800fb8c:	4b4a      	ldr	r3, [pc, #296]	@ (800fcb8 <tcp_receive+0x888>)
 800fb8e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fb90:	4b49      	ldr	r3, [pc, #292]	@ (800fcb8 <tcp_receive+0x888>)
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	4a48      	ldr	r2, [pc, #288]	@ (800fcb8 <tcp_receive+0x888>)
 800fb96:	8912      	ldrh	r2, [r2, #8]
 800fb98:	4611      	mov	r1, r2
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fc f9d0 	bl	800bf40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fba0:	4b45      	ldr	r3, [pc, #276]	@ (800fcb8 <tcp_receive+0x888>)
 800fba2:	891c      	ldrh	r4, [r3, #8]
 800fba4:	4b44      	ldr	r3, [pc, #272]	@ (800fcb8 <tcp_receive+0x888>)
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	899b      	ldrh	r3, [r3, #12]
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fa ffef 	bl	800ab90 <lwip_htons>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	f003 0303 	and.w	r3, r3, #3
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d001      	beq.n	800fbc2 <tcp_receive+0x792>
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	e000      	b.n	800fbc4 <tcp_receive+0x794>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	4423      	add	r3, r4
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	4b3c      	ldr	r3, [pc, #240]	@ (800fcbc <tcp_receive+0x88c>)
 800fbca:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fbcc:	4b3b      	ldr	r3, [pc, #236]	@ (800fcbc <tcp_receive+0x88c>)
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	4b38      	ldr	r3, [pc, #224]	@ (800fcb4 <tcp_receive+0x884>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	441a      	add	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbdc:	6879      	ldr	r1, [r7, #4]
 800fbde:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fbe0:	440b      	add	r3, r1
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d006      	beq.n	800fbf4 <tcp_receive+0x7c4>
 800fbe6:	4b36      	ldr	r3, [pc, #216]	@ (800fcc0 <tcp_receive+0x890>)
 800fbe8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800fbec:	4935      	ldr	r1, [pc, #212]	@ (800fcc4 <tcp_receive+0x894>)
 800fbee:	4836      	ldr	r0, [pc, #216]	@ (800fcc8 <tcp_receive+0x898>)
 800fbf0:	f005 ff4e 	bl	8015a90 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 80e6 	beq.w	800fdca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fbfe:	4b2e      	ldr	r3, [pc, #184]	@ (800fcb8 <tcp_receive+0x888>)
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	899b      	ldrh	r3, [r3, #12]
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fa ffc2 	bl	800ab90 <lwip_htons>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	f003 0301 	and.w	r3, r3, #1
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d010      	beq.n	800fc3a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fc18:	e00a      	b.n	800fc30 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc1e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f7fd fd93 	bl	800d756 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d1f0      	bne.n	800fc1a <tcp_receive+0x7ea>
 800fc38:	e0c7      	b.n	800fdca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fc40:	e051      	b.n	800fce6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc44:	68db      	ldr	r3, [r3, #12]
 800fc46:	899b      	ldrh	r3, [r3, #12]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fa ffa0 	bl	800ab90 <lwip_htons>
 800fc50:	4603      	mov	r3, r0
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	f003 0301 	and.w	r3, r3, #1
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d03c      	beq.n	800fcd6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fc5c:	4b16      	ldr	r3, [pc, #88]	@ (800fcb8 <tcp_receive+0x888>)
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	899b      	ldrh	r3, [r3, #12]
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fa ff93 	bl	800ab90 <lwip_htons>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d12f      	bne.n	800fcd6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fc76:	4b10      	ldr	r3, [pc, #64]	@ (800fcb8 <tcp_receive+0x888>)
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	899b      	ldrh	r3, [r3, #12]
 800fc7c:	b29c      	uxth	r4, r3
 800fc7e:	2001      	movs	r0, #1
 800fc80:	f7fa ff86 	bl	800ab90 <lwip_htons>
 800fc84:	4603      	mov	r3, r0
 800fc86:	461a      	mov	r2, r3
 800fc88:	4b0b      	ldr	r3, [pc, #44]	@ (800fcb8 <tcp_receive+0x888>)
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	4322      	orrs	r2, r4
 800fc8e:	b292      	uxth	r2, r2
 800fc90:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fc92:	4b09      	ldr	r3, [pc, #36]	@ (800fcb8 <tcp_receive+0x888>)
 800fc94:	891c      	ldrh	r4, [r3, #8]
 800fc96:	4b08      	ldr	r3, [pc, #32]	@ (800fcb8 <tcp_receive+0x888>)
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	899b      	ldrh	r3, [r3, #12]
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fa ff76 	bl	800ab90 <lwip_htons>
 800fca4:	4603      	mov	r3, r0
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	f003 0303 	and.w	r3, r3, #3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00d      	beq.n	800fccc <tcp_receive+0x89c>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e00c      	b.n	800fcce <tcp_receive+0x89e>
 800fcb4:	20008c38 	.word	0x20008c38
 800fcb8:	20008c18 	.word	0x20008c18
 800fcbc:	20008c42 	.word	0x20008c42
 800fcc0:	08017c3c 	.word	0x08017c3c
 800fcc4:	08017fe4 	.word	0x08017fe4
 800fcc8:	08017c88 	.word	0x08017c88
 800fccc:	2300      	movs	r3, #0
 800fcce:	4423      	add	r3, r4
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	4b98      	ldr	r3, [pc, #608]	@ (800ff34 <tcp_receive+0xb04>)
 800fcd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fcd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fcda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800fce0:	6938      	ldr	r0, [r7, #16]
 800fce2:	f7fd fd38 	bl	800d756 <tcp_seg_free>
            while (next &&
 800fce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00e      	beq.n	800fd0a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fcec:	4b91      	ldr	r3, [pc, #580]	@ (800ff34 <tcp_receive+0xb04>)
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	4b91      	ldr	r3, [pc, #580]	@ (800ff38 <tcp_receive+0xb08>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	441a      	add	r2, r3
 800fcf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fd00:	8909      	ldrh	r1, [r1, #8]
 800fd02:	440b      	add	r3, r1
 800fd04:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	da9b      	bge.n	800fc42 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fd0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d059      	beq.n	800fdc4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fd10:	4b88      	ldr	r3, [pc, #544]	@ (800ff34 <tcp_receive+0xb04>)
 800fd12:	881b      	ldrh	r3, [r3, #0]
 800fd14:	461a      	mov	r2, r3
 800fd16:	4b88      	ldr	r3, [pc, #544]	@ (800ff38 <tcp_receive+0xb08>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	441a      	add	r2, r3
 800fd1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	dd4d      	ble.n	800fdc4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	4b81      	ldr	r3, [pc, #516]	@ (800ff38 <tcp_receive+0xb08>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	4b80      	ldr	r3, [pc, #512]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd3e:	4b7f      	ldr	r3, [pc, #508]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	899b      	ldrh	r3, [r3, #12]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fa ff22 	bl	800ab90 <lwip_htons>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	f003 0302 	and.w	r3, r3, #2
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d005      	beq.n	800fd64 <tcp_receive+0x934>
                inseg.len -= 1;
 800fd58:	4b78      	ldr	r3, [pc, #480]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd5a:	891b      	ldrh	r3, [r3, #8]
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	4b76      	ldr	r3, [pc, #472]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fd64:	4b75      	ldr	r3, [pc, #468]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	4a74      	ldr	r2, [pc, #464]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd6a:	8912      	ldrh	r2, [r2, #8]
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fc f8e6 	bl	800bf40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fd74:	4b71      	ldr	r3, [pc, #452]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd76:	891c      	ldrh	r4, [r3, #8]
 800fd78:	4b70      	ldr	r3, [pc, #448]	@ (800ff3c <tcp_receive+0xb0c>)
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	899b      	ldrh	r3, [r3, #12]
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fa ff05 	bl	800ab90 <lwip_htons>
 800fd86:	4603      	mov	r3, r0
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	f003 0303 	and.w	r3, r3, #3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <tcp_receive+0x966>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <tcp_receive+0x968>
 800fd96:	2300      	movs	r3, #0
 800fd98:	4423      	add	r3, r4
 800fd9a:	b29a      	uxth	r2, r3
 800fd9c:	4b65      	ldr	r3, [pc, #404]	@ (800ff34 <tcp_receive+0xb04>)
 800fd9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fda0:	4b64      	ldr	r3, [pc, #400]	@ (800ff34 <tcp_receive+0xb04>)
 800fda2:	881b      	ldrh	r3, [r3, #0]
 800fda4:	461a      	mov	r2, r3
 800fda6:	4b64      	ldr	r3, [pc, #400]	@ (800ff38 <tcp_receive+0xb08>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	441a      	add	r2, r3
 800fdac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d006      	beq.n	800fdc4 <tcp_receive+0x994>
 800fdb6:	4b62      	ldr	r3, [pc, #392]	@ (800ff40 <tcp_receive+0xb10>)
 800fdb8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800fdbc:	4961      	ldr	r1, [pc, #388]	@ (800ff44 <tcp_receive+0xb14>)
 800fdbe:	4862      	ldr	r0, [pc, #392]	@ (800ff48 <tcp_receive+0xb18>)
 800fdc0:	f005 fe66 	bl	8015a90 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fdc8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fdca:	4b5a      	ldr	r3, [pc, #360]	@ (800ff34 <tcp_receive+0xb04>)
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	461a      	mov	r2, r3
 800fdd0:	4b59      	ldr	r3, [pc, #356]	@ (800ff38 <tcp_receive+0xb08>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	441a      	add	r2, r3
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fdde:	4b55      	ldr	r3, [pc, #340]	@ (800ff34 <tcp_receive+0xb04>)
 800fde0:	881b      	ldrh	r3, [r3, #0]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d206      	bcs.n	800fdf4 <tcp_receive+0x9c4>
 800fde6:	4b56      	ldr	r3, [pc, #344]	@ (800ff40 <tcp_receive+0xb10>)
 800fde8:	f240 6207 	movw	r2, #1543	@ 0x607
 800fdec:	4957      	ldr	r1, [pc, #348]	@ (800ff4c <tcp_receive+0xb1c>)
 800fdee:	4856      	ldr	r0, [pc, #344]	@ (800ff48 <tcp_receive+0xb18>)
 800fdf0:	f005 fe4e 	bl	8015a90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fdf8:	4b4e      	ldr	r3, [pc, #312]	@ (800ff34 <tcp_receive+0xb04>)
 800fdfa:	881b      	ldrh	r3, [r3, #0]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7fc ffc5 	bl	800cd94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fe0a:	4b4c      	ldr	r3, [pc, #304]	@ (800ff3c <tcp_receive+0xb0c>)
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	891b      	ldrh	r3, [r3, #8]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d006      	beq.n	800fe22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fe14:	4b49      	ldr	r3, [pc, #292]	@ (800ff3c <tcp_receive+0xb0c>)
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	4a4d      	ldr	r2, [pc, #308]	@ (800ff50 <tcp_receive+0xb20>)
 800fe1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fe1c:	4b47      	ldr	r3, [pc, #284]	@ (800ff3c <tcp_receive+0xb0c>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe22:	4b46      	ldr	r3, [pc, #280]	@ (800ff3c <tcp_receive+0xb0c>)
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	899b      	ldrh	r3, [r3, #12]
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fa feb0 	bl	800ab90 <lwip_htons>
 800fe30:	4603      	mov	r3, r0
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 80b8 	beq.w	800ffae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fe3e:	4b45      	ldr	r3, [pc, #276]	@ (800ff54 <tcp_receive+0xb24>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	f043 0320 	orr.w	r3, r3, #32
 800fe46:	b2da      	uxtb	r2, r3
 800fe48:	4b42      	ldr	r3, [pc, #264]	@ (800ff54 <tcp_receive+0xb24>)
 800fe4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fe4c:	e0af      	b.n	800ffae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	4a36      	ldr	r2, [pc, #216]	@ (800ff38 <tcp_receive+0xb08>)
 800fe5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	461c      	mov	r4, r3
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	899b      	ldrh	r3, [r3, #12]
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fa fe8e 	bl	800ab90 <lwip_htons>
 800fe74:	4603      	mov	r3, r0
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	f003 0303 	and.w	r3, r3, #3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d001      	beq.n	800fe84 <tcp_receive+0xa54>
 800fe80:	2301      	movs	r3, #1
 800fe82:	e000      	b.n	800fe86 <tcp_receive+0xa56>
 800fe84:	2300      	movs	r3, #0
 800fe86:	191a      	adds	r2, r3, r4
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8c:	441a      	add	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe96:	461c      	mov	r4, r3
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	891b      	ldrh	r3, [r3, #8]
 800fe9c:	461d      	mov	r5, r3
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	899b      	ldrh	r3, [r3, #12]
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fa fe72 	bl	800ab90 <lwip_htons>
 800feac:	4603      	mov	r3, r0
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	f003 0303 	and.w	r3, r3, #3
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d001      	beq.n	800febc <tcp_receive+0xa8c>
 800feb8:	2301      	movs	r3, #1
 800feba:	e000      	b.n	800febe <tcp_receive+0xa8e>
 800febc:	2300      	movs	r3, #0
 800febe:	442b      	add	r3, r5
 800fec0:	429c      	cmp	r4, r3
 800fec2:	d206      	bcs.n	800fed2 <tcp_receive+0xaa2>
 800fec4:	4b1e      	ldr	r3, [pc, #120]	@ (800ff40 <tcp_receive+0xb10>)
 800fec6:	f240 622b 	movw	r2, #1579	@ 0x62b
 800feca:	4923      	ldr	r1, [pc, #140]	@ (800ff58 <tcp_receive+0xb28>)
 800fecc:	481e      	ldr	r0, [pc, #120]	@ (800ff48 <tcp_receive+0xb18>)
 800fece:	f005 fddf 	bl	8015a90 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	891b      	ldrh	r3, [r3, #8]
 800fed6:	461c      	mov	r4, r3
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	899b      	ldrh	r3, [r3, #12]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fa fe55 	bl	800ab90 <lwip_htons>
 800fee6:	4603      	mov	r3, r0
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	f003 0303 	and.w	r3, r3, #3
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <tcp_receive+0xac6>
 800fef2:	2301      	movs	r3, #1
 800fef4:	e000      	b.n	800fef8 <tcp_receive+0xac8>
 800fef6:	2300      	movs	r3, #0
 800fef8:	1919      	adds	r1, r3, r4
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fefe:	b28b      	uxth	r3, r1
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7fc ff43 	bl	800cd94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	891b      	ldrh	r3, [r3, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d028      	beq.n	800ff6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ff18:	4b0d      	ldr	r3, [pc, #52]	@ (800ff50 <tcp_receive+0xb20>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d01d      	beq.n	800ff5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ff20:	4b0b      	ldr	r3, [pc, #44]	@ (800ff50 <tcp_receive+0xb20>)
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	4610      	mov	r0, r2
 800ff2c:	f7fc fa50 	bl	800c3d0 <pbuf_cat>
 800ff30:	e018      	b.n	800ff64 <tcp_receive+0xb34>
 800ff32:	bf00      	nop
 800ff34:	20008c42 	.word	0x20008c42
 800ff38:	20008c38 	.word	0x20008c38
 800ff3c:	20008c18 	.word	0x20008c18
 800ff40:	08017c3c 	.word	0x08017c3c
 800ff44:	0801801c 	.word	0x0801801c
 800ff48:	08017c88 	.word	0x08017c88
 800ff4c:	08018058 	.word	0x08018058
 800ff50:	20008c48 	.word	0x20008c48
 800ff54:	20008c45 	.word	0x20008c45
 800ff58:	08018078 	.word	0x08018078
            } else {
              recv_data = cseg->p;
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	4a70      	ldr	r2, [pc, #448]	@ (8010124 <tcp_receive+0xcf4>)
 800ff62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	2200      	movs	r2, #0
 800ff68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	899b      	ldrh	r3, [r3, #12]
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fa fe0c 	bl	800ab90 <lwip_htons>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	f003 0301 	and.w	r3, r3, #1
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00d      	beq.n	800ffa0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ff84:	4b68      	ldr	r3, [pc, #416]	@ (8010128 <tcp_receive+0xcf8>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f043 0320 	orr.w	r3, r3, #32
 800ff8c:	b2da      	uxtb	r2, r3
 800ff8e:	4b66      	ldr	r3, [pc, #408]	@ (8010128 <tcp_receive+0xcf8>)
 800ff90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	7d1b      	ldrb	r3, [r3, #20]
 800ff96:	2b04      	cmp	r3, #4
 800ff98:	d102      	bne.n	800ffa0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2207      	movs	r2, #7
 800ff9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ffa8:	68b8      	ldr	r0, [r7, #8]
 800ffaa:	f7fd fbd4 	bl	800d756 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d008      	beq.n	800ffc8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	685a      	ldr	r2, [r3, #4]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	f43f af43 	beq.w	800fe4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	8b5b      	ldrh	r3, [r3, #26]
 800ffcc:	f003 0301 	and.w	r3, r3, #1
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00e      	beq.n	800fff2 <tcp_receive+0xbc2>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	8b5b      	ldrh	r3, [r3, #26]
 800ffd8:	f023 0301 	bic.w	r3, r3, #1
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	835a      	strh	r2, [r3, #26]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	8b5b      	ldrh	r3, [r3, #26]
 800ffe6:	f043 0302 	orr.w	r3, r3, #2
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fff0:	e187      	b.n	8010302 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	8b5b      	ldrh	r3, [r3, #26]
 800fff6:	f043 0301 	orr.w	r3, r3, #1
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010000:	e17f      	b.n	8010302 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010006:	2b00      	cmp	r3, #0
 8010008:	d106      	bne.n	8010018 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801000a:	4848      	ldr	r0, [pc, #288]	@ (801012c <tcp_receive+0xcfc>)
 801000c:	f7fd fbbc 	bl	800d788 <tcp_seg_copy>
 8010010:	4602      	mov	r2, r0
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	675a      	str	r2, [r3, #116]	@ 0x74
 8010016:	e16c      	b.n	80102f2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010018:	2300      	movs	r3, #0
 801001a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010020:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010022:	e156      	b.n	80102d2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	685a      	ldr	r2, [r3, #4]
 801002a:	4b41      	ldr	r3, [pc, #260]	@ (8010130 <tcp_receive+0xd00>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	429a      	cmp	r2, r3
 8010030:	d11d      	bne.n	801006e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010032:	4b3e      	ldr	r3, [pc, #248]	@ (801012c <tcp_receive+0xcfc>)
 8010034:	891a      	ldrh	r2, [r3, #8]
 8010036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010038:	891b      	ldrh	r3, [r3, #8]
 801003a:	429a      	cmp	r2, r3
 801003c:	f240 814e 	bls.w	80102dc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010040:	483a      	ldr	r0, [pc, #232]	@ (801012c <tcp_receive+0xcfc>)
 8010042:	f7fd fba1 	bl	800d788 <tcp_seg_copy>
 8010046:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2b00      	cmp	r3, #0
 801004c:	f000 8148 	beq.w	80102e0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010052:	2b00      	cmp	r3, #0
 8010054:	d003      	beq.n	801005e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010058:	697a      	ldr	r2, [r7, #20]
 801005a:	601a      	str	r2, [r3, #0]
 801005c:	e002      	b.n	8010064 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	697a      	ldr	r2, [r7, #20]
 8010062:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010064:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010066:	6978      	ldr	r0, [r7, #20]
 8010068:	f7ff f8de 	bl	800f228 <tcp_oos_insert_segment>
                }
                break;
 801006c:	e138      	b.n	80102e0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801006e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010070:	2b00      	cmp	r3, #0
 8010072:	d117      	bne.n	80100a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010074:	4b2e      	ldr	r3, [pc, #184]	@ (8010130 <tcp_receive+0xd00>)
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	2b00      	cmp	r3, #0
 8010082:	da57      	bge.n	8010134 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010084:	4829      	ldr	r0, [pc, #164]	@ (801012c <tcp_receive+0xcfc>)
 8010086:	f7fd fb7f 	bl	800d788 <tcp_seg_copy>
 801008a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	2b00      	cmp	r3, #0
 8010090:	f000 8128 	beq.w	80102e4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	69ba      	ldr	r2, [r7, #24]
 8010098:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801009a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801009c:	69b8      	ldr	r0, [r7, #24]
 801009e:	f7ff f8c3 	bl	800f228 <tcp_oos_insert_segment>
                  }
                  break;
 80100a2:	e11f      	b.n	80102e4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80100a4:	4b22      	ldr	r3, [pc, #136]	@ (8010130 <tcp_receive+0xd00>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	3b01      	subs	r3, #1
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	db3e      	blt.n	8010134 <tcp_receive+0xd04>
 80100b6:	4b1e      	ldr	r3, [pc, #120]	@ (8010130 <tcp_receive+0xd00>)
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	1ad3      	subs	r3, r2, r3
 80100c2:	3301      	adds	r3, #1
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	dc35      	bgt.n	8010134 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80100c8:	4818      	ldr	r0, [pc, #96]	@ (801012c <tcp_receive+0xcfc>)
 80100ca:	f7fd fb5d 	bl	800d788 <tcp_seg_copy>
 80100ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f000 8108 	beq.w	80102e8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80100d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100e0:	8912      	ldrh	r2, [r2, #8]
 80100e2:	441a      	add	r2, r3
 80100e4:	4b12      	ldr	r3, [pc, #72]	@ (8010130 <tcp_receive+0xd00>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	dd12      	ble.n	8010114 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80100ee:	4b10      	ldr	r3, [pc, #64]	@ (8010130 <tcp_receive+0xd00>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	b29a      	uxth	r2, r3
 8010100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010102:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801010a:	891b      	ldrh	r3, [r3, #8]
 801010c:	4619      	mov	r1, r3
 801010e:	4610      	mov	r0, r2
 8010110:	f7fb ff16 	bl	800bf40 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010116:	69fa      	ldr	r2, [r7, #28]
 8010118:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801011a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801011c:	69f8      	ldr	r0, [r7, #28]
 801011e:	f7ff f883 	bl	800f228 <tcp_oos_insert_segment>
                  }
                  break;
 8010122:	e0e1      	b.n	80102e8 <tcp_receive+0xeb8>
 8010124:	20008c48 	.word	0x20008c48
 8010128:	20008c45 	.word	0x20008c45
 801012c:	20008c18 	.word	0x20008c18
 8010130:	20008c38 	.word	0x20008c38
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010136:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f040 80c5 	bne.w	80102cc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010142:	4b7f      	ldr	r3, [pc, #508]	@ (8010340 <tcp_receive+0xf10>)
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801014e:	2b00      	cmp	r3, #0
 8010150:	f340 80bc 	ble.w	80102cc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	899b      	ldrh	r3, [r3, #12]
 801015a:	b29b      	uxth	r3, r3
 801015c:	4618      	mov	r0, r3
 801015e:	f7fa fd17 	bl	800ab90 <lwip_htons>
 8010162:	4603      	mov	r3, r0
 8010164:	b2db      	uxtb	r3, r3
 8010166:	f003 0301 	and.w	r3, r3, #1
 801016a:	2b00      	cmp	r3, #0
 801016c:	f040 80be 	bne.w	80102ec <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010170:	4874      	ldr	r0, [pc, #464]	@ (8010344 <tcp_receive+0xf14>)
 8010172:	f7fd fb09 	bl	800d788 <tcp_seg_copy>
 8010176:	4602      	mov	r2, r0
 8010178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801017c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	f000 80b5 	beq.w	80102f0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801018e:	8912      	ldrh	r2, [r2, #8]
 8010190:	441a      	add	r2, r3
 8010192:	4b6b      	ldr	r3, [pc, #428]	@ (8010340 <tcp_receive+0xf10>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	2b00      	cmp	r3, #0
 801019a:	dd12      	ble.n	80101c2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801019c:	4b68      	ldr	r3, [pc, #416]	@ (8010340 <tcp_receive+0xf10>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	1ad3      	subs	r3, r2, r3
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80101b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b4:	685a      	ldr	r2, [r3, #4]
 80101b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b8:	891b      	ldrh	r3, [r3, #8]
 80101ba:	4619      	mov	r1, r3
 80101bc:	4610      	mov	r0, r2
 80101be:	f7fb febf 	bl	800bf40 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80101c2:	4b61      	ldr	r3, [pc, #388]	@ (8010348 <tcp_receive+0xf18>)
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	461a      	mov	r2, r3
 80101c8:	4b5d      	ldr	r3, [pc, #372]	@ (8010340 <tcp_receive+0xf10>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	441a      	add	r2, r3
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d2:	6879      	ldr	r1, [r7, #4]
 80101d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80101d6:	440b      	add	r3, r1
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f340 8088 	ble.w	80102f0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80101e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	899b      	ldrh	r3, [r3, #12]
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fa fcd0 	bl	800ab90 <lwip_htons>
 80101f0:	4603      	mov	r3, r0
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d021      	beq.n	8010240 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80101fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	899b      	ldrh	r3, [r3, #12]
 8010204:	b29b      	uxth	r3, r3
 8010206:	b21b      	sxth	r3, r3
 8010208:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801020c:	b21c      	sxth	r4, r3
 801020e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	899b      	ldrh	r3, [r3, #12]
 8010216:	b29b      	uxth	r3, r3
 8010218:	4618      	mov	r0, r3
 801021a:	f7fa fcb9 	bl	800ab90 <lwip_htons>
 801021e:	4603      	mov	r3, r0
 8010220:	b2db      	uxtb	r3, r3
 8010222:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010226:	b29b      	uxth	r3, r3
 8010228:	4618      	mov	r0, r3
 801022a:	f7fa fcb1 	bl	800ab90 <lwip_htons>
 801022e:	4603      	mov	r3, r0
 8010230:	b21b      	sxth	r3, r3
 8010232:	4323      	orrs	r3, r4
 8010234:	b21a      	sxth	r2, r3
 8010236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	b292      	uxth	r2, r2
 801023e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010244:	b29a      	uxth	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801024a:	4413      	add	r3, r2
 801024c:	b299      	uxth	r1, r3
 801024e:	4b3c      	ldr	r3, [pc, #240]	@ (8010340 <tcp_receive+0xf10>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	b29a      	uxth	r2, r3
 8010254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	1a8a      	subs	r2, r1, r2
 801025a:	b292      	uxth	r2, r2
 801025c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801025e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	685a      	ldr	r2, [r3, #4]
 8010264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	891b      	ldrh	r3, [r3, #8]
 801026a:	4619      	mov	r1, r3
 801026c:	4610      	mov	r0, r2
 801026e:	f7fb fe67 	bl	800bf40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	891c      	ldrh	r4, [r3, #8]
 8010278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	68db      	ldr	r3, [r3, #12]
 801027e:	899b      	ldrh	r3, [r3, #12]
 8010280:	b29b      	uxth	r3, r3
 8010282:	4618      	mov	r0, r3
 8010284:	f7fa fc84 	bl	800ab90 <lwip_htons>
 8010288:	4603      	mov	r3, r0
 801028a:	b2db      	uxtb	r3, r3
 801028c:	f003 0303 	and.w	r3, r3, #3
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <tcp_receive+0xe68>
 8010294:	2301      	movs	r3, #1
 8010296:	e000      	b.n	801029a <tcp_receive+0xe6a>
 8010298:	2300      	movs	r3, #0
 801029a:	4423      	add	r3, r4
 801029c:	b29a      	uxth	r2, r3
 801029e:	4b2a      	ldr	r3, [pc, #168]	@ (8010348 <tcp_receive+0xf18>)
 80102a0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80102a2:	4b29      	ldr	r3, [pc, #164]	@ (8010348 <tcp_receive+0xf18>)
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	461a      	mov	r2, r3
 80102a8:	4b25      	ldr	r3, [pc, #148]	@ (8010340 <tcp_receive+0xf10>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	441a      	add	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102b2:	6879      	ldr	r1, [r7, #4]
 80102b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80102b6:	440b      	add	r3, r1
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d019      	beq.n	80102f0 <tcp_receive+0xec0>
 80102bc:	4b23      	ldr	r3, [pc, #140]	@ (801034c <tcp_receive+0xf1c>)
 80102be:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80102c2:	4923      	ldr	r1, [pc, #140]	@ (8010350 <tcp_receive+0xf20>)
 80102c4:	4823      	ldr	r0, [pc, #140]	@ (8010354 <tcp_receive+0xf24>)
 80102c6:	f005 fbe3 	bl	8015a90 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80102ca:	e011      	b.n	80102f0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80102cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80102d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f47f aea5 	bne.w	8010024 <tcp_receive+0xbf4>
 80102da:	e00a      	b.n	80102f2 <tcp_receive+0xec2>
                break;
 80102dc:	bf00      	nop
 80102de:	e008      	b.n	80102f2 <tcp_receive+0xec2>
                break;
 80102e0:	bf00      	nop
 80102e2:	e006      	b.n	80102f2 <tcp_receive+0xec2>
                  break;
 80102e4:	bf00      	nop
 80102e6:	e004      	b.n	80102f2 <tcp_receive+0xec2>
                  break;
 80102e8:	bf00      	nop
 80102ea:	e002      	b.n	80102f2 <tcp_receive+0xec2>
                  break;
 80102ec:	bf00      	nop
 80102ee:	e000      	b.n	80102f2 <tcp_receive+0xec2>
                break;
 80102f0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f001 fa30 	bl	8011758 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80102f8:	e003      	b.n	8010302 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f001 fa2c 	bl	8011758 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010300:	e01a      	b.n	8010338 <tcp_receive+0xf08>
 8010302:	e019      	b.n	8010338 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010304:	4b0e      	ldr	r3, [pc, #56]	@ (8010340 <tcp_receive+0xf10>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801030c:	1ad3      	subs	r3, r2, r3
 801030e:	2b00      	cmp	r3, #0
 8010310:	db0a      	blt.n	8010328 <tcp_receive+0xef8>
 8010312:	4b0b      	ldr	r3, [pc, #44]	@ (8010340 <tcp_receive+0xf10>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031a:	6879      	ldr	r1, [r7, #4]
 801031c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801031e:	440b      	add	r3, r1
 8010320:	1ad3      	subs	r3, r2, r3
 8010322:	3301      	adds	r3, #1
 8010324:	2b00      	cmp	r3, #0
 8010326:	dd07      	ble.n	8010338 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	8b5b      	ldrh	r3, [r3, #26]
 801032c:	f043 0302 	orr.w	r3, r3, #2
 8010330:	b29a      	uxth	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010336:	e7ff      	b.n	8010338 <tcp_receive+0xf08>
 8010338:	bf00      	nop
 801033a:	3750      	adds	r7, #80	@ 0x50
 801033c:	46bd      	mov	sp, r7
 801033e:	bdb0      	pop	{r4, r5, r7, pc}
 8010340:	20008c38 	.word	0x20008c38
 8010344:	20008c18 	.word	0x20008c18
 8010348:	20008c42 	.word	0x20008c42
 801034c:	08017c3c 	.word	0x08017c3c
 8010350:	08017fe4 	.word	0x08017fe4
 8010354:	08017c88 	.word	0x08017c88

08010358 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801035e:	4b15      	ldr	r3, [pc, #84]	@ (80103b4 <tcp_get_next_optbyte+0x5c>)
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	b291      	uxth	r1, r2
 8010366:	4a13      	ldr	r2, [pc, #76]	@ (80103b4 <tcp_get_next_optbyte+0x5c>)
 8010368:	8011      	strh	r1, [r2, #0]
 801036a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801036c:	4b12      	ldr	r3, [pc, #72]	@ (80103b8 <tcp_get_next_optbyte+0x60>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d004      	beq.n	801037e <tcp_get_next_optbyte+0x26>
 8010374:	4b11      	ldr	r3, [pc, #68]	@ (80103bc <tcp_get_next_optbyte+0x64>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	88fa      	ldrh	r2, [r7, #6]
 801037a:	429a      	cmp	r2, r3
 801037c:	d208      	bcs.n	8010390 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801037e:	4b10      	ldr	r3, [pc, #64]	@ (80103c0 <tcp_get_next_optbyte+0x68>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	3314      	adds	r3, #20
 8010384:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010386:	88fb      	ldrh	r3, [r7, #6]
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	4413      	add	r3, r2
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	e00b      	b.n	80103a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010390:	88fb      	ldrh	r3, [r7, #6]
 8010392:	b2da      	uxtb	r2, r3
 8010394:	4b09      	ldr	r3, [pc, #36]	@ (80103bc <tcp_get_next_optbyte+0x64>)
 8010396:	881b      	ldrh	r3, [r3, #0]
 8010398:	b2db      	uxtb	r3, r3
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801039e:	4b06      	ldr	r3, [pc, #24]	@ (80103b8 <tcp_get_next_optbyte+0x60>)
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	797b      	ldrb	r3, [r7, #5]
 80103a4:	4413      	add	r3, r2
 80103a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	20008c34 	.word	0x20008c34
 80103b8:	20008c30 	.word	0x20008c30
 80103bc:	20008c2e 	.word	0x20008c2e
 80103c0:	20008c28 	.word	0x20008c28

080103c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d106      	bne.n	80103e0 <tcp_parseopt+0x1c>
 80103d2:	4b32      	ldr	r3, [pc, #200]	@ (801049c <tcp_parseopt+0xd8>)
 80103d4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80103d8:	4931      	ldr	r1, [pc, #196]	@ (80104a0 <tcp_parseopt+0xdc>)
 80103da:	4832      	ldr	r0, [pc, #200]	@ (80104a4 <tcp_parseopt+0xe0>)
 80103dc:	f005 fb58 	bl	8015a90 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80103e0:	4b31      	ldr	r3, [pc, #196]	@ (80104a8 <tcp_parseopt+0xe4>)
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d056      	beq.n	8010496 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80103e8:	4b30      	ldr	r3, [pc, #192]	@ (80104ac <tcp_parseopt+0xe8>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	801a      	strh	r2, [r3, #0]
 80103ee:	e046      	b.n	801047e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80103f0:	f7ff ffb2 	bl	8010358 <tcp_get_next_optbyte>
 80103f4:	4603      	mov	r3, r0
 80103f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	2b02      	cmp	r3, #2
 80103fc:	d006      	beq.n	801040c <tcp_parseopt+0x48>
 80103fe:	2b02      	cmp	r3, #2
 8010400:	dc2a      	bgt.n	8010458 <tcp_parseopt+0x94>
 8010402:	2b00      	cmp	r3, #0
 8010404:	d042      	beq.n	801048c <tcp_parseopt+0xc8>
 8010406:	2b01      	cmp	r3, #1
 8010408:	d038      	beq.n	801047c <tcp_parseopt+0xb8>
 801040a:	e025      	b.n	8010458 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801040c:	f7ff ffa4 	bl	8010358 <tcp_get_next_optbyte>
 8010410:	4603      	mov	r3, r0
 8010412:	2b04      	cmp	r3, #4
 8010414:	d13c      	bne.n	8010490 <tcp_parseopt+0xcc>
 8010416:	4b25      	ldr	r3, [pc, #148]	@ (80104ac <tcp_parseopt+0xe8>)
 8010418:	881b      	ldrh	r3, [r3, #0]
 801041a:	3301      	adds	r3, #1
 801041c:	4a22      	ldr	r2, [pc, #136]	@ (80104a8 <tcp_parseopt+0xe4>)
 801041e:	8812      	ldrh	r2, [r2, #0]
 8010420:	4293      	cmp	r3, r2
 8010422:	da35      	bge.n	8010490 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010424:	f7ff ff98 	bl	8010358 <tcp_get_next_optbyte>
 8010428:	4603      	mov	r3, r0
 801042a:	021b      	lsls	r3, r3, #8
 801042c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801042e:	f7ff ff93 	bl	8010358 <tcp_get_next_optbyte>
 8010432:	4603      	mov	r3, r0
 8010434:	461a      	mov	r2, r3
 8010436:	89bb      	ldrh	r3, [r7, #12]
 8010438:	4313      	orrs	r3, r2
 801043a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801043c:	89bb      	ldrh	r3, [r7, #12]
 801043e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010442:	d804      	bhi.n	801044e <tcp_parseopt+0x8a>
 8010444:	89bb      	ldrh	r3, [r7, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <tcp_parseopt+0x8a>
 801044a:	89ba      	ldrh	r2, [r7, #12]
 801044c:	e001      	b.n	8010452 <tcp_parseopt+0x8e>
 801044e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010456:	e012      	b.n	801047e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010458:	f7ff ff7e 	bl	8010358 <tcp_get_next_optbyte>
 801045c:	4603      	mov	r3, r0
 801045e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010460:	7afb      	ldrb	r3, [r7, #11]
 8010462:	2b01      	cmp	r3, #1
 8010464:	d916      	bls.n	8010494 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010466:	7afb      	ldrb	r3, [r7, #11]
 8010468:	b29a      	uxth	r2, r3
 801046a:	4b10      	ldr	r3, [pc, #64]	@ (80104ac <tcp_parseopt+0xe8>)
 801046c:	881b      	ldrh	r3, [r3, #0]
 801046e:	4413      	add	r3, r2
 8010470:	b29b      	uxth	r3, r3
 8010472:	3b02      	subs	r3, #2
 8010474:	b29a      	uxth	r2, r3
 8010476:	4b0d      	ldr	r3, [pc, #52]	@ (80104ac <tcp_parseopt+0xe8>)
 8010478:	801a      	strh	r2, [r3, #0]
 801047a:	e000      	b.n	801047e <tcp_parseopt+0xba>
          break;
 801047c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801047e:	4b0b      	ldr	r3, [pc, #44]	@ (80104ac <tcp_parseopt+0xe8>)
 8010480:	881a      	ldrh	r2, [r3, #0]
 8010482:	4b09      	ldr	r3, [pc, #36]	@ (80104a8 <tcp_parseopt+0xe4>)
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	429a      	cmp	r2, r3
 8010488:	d3b2      	bcc.n	80103f0 <tcp_parseopt+0x2c>
 801048a:	e004      	b.n	8010496 <tcp_parseopt+0xd2>
          return;
 801048c:	bf00      	nop
 801048e:	e002      	b.n	8010496 <tcp_parseopt+0xd2>
            return;
 8010490:	bf00      	nop
 8010492:	e000      	b.n	8010496 <tcp_parseopt+0xd2>
            return;
 8010494:	bf00      	nop
      }
    }
  }
}
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	08017c3c 	.word	0x08017c3c
 80104a0:	080180a0 	.word	0x080180a0
 80104a4:	08017c88 	.word	0x08017c88
 80104a8:	20008c2c 	.word	0x20008c2c
 80104ac:	20008c34 	.word	0x20008c34

080104b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80104b4:	4b05      	ldr	r3, [pc, #20]	@ (80104cc <tcp_trigger_input_pcb_close+0x1c>)
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	f043 0310 	orr.w	r3, r3, #16
 80104bc:	b2da      	uxtb	r2, r3
 80104be:	4b03      	ldr	r3, [pc, #12]	@ (80104cc <tcp_trigger_input_pcb_close+0x1c>)
 80104c0:	701a      	strb	r2, [r3, #0]
}
 80104c2:	bf00      	nop
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr
 80104cc:	20008c45 	.word	0x20008c45

080104d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00a      	beq.n	80104f8 <tcp_route+0x28>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	7a1b      	ldrb	r3, [r3, #8]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d006      	beq.n	80104f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	7a1b      	ldrb	r3, [r3, #8]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fb fb4c 	bl	800bb8c <netif_get_by_index>
 80104f4:	4603      	mov	r3, r0
 80104f6:	e003      	b.n	8010500 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f003 f96b 	bl	80137d4 <ip4_route>
 80104fe:	4603      	mov	r3, r0
  }
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010508:	b590      	push	{r4, r7, lr}
 801050a:	b087      	sub	sp, #28
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	603b      	str	r3, [r7, #0]
 8010514:	4613      	mov	r3, r2
 8010516:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d105      	bne.n	801052a <tcp_create_segment+0x22>
 801051e:	4b43      	ldr	r3, [pc, #268]	@ (801062c <tcp_create_segment+0x124>)
 8010520:	22a3      	movs	r2, #163	@ 0xa3
 8010522:	4943      	ldr	r1, [pc, #268]	@ (8010630 <tcp_create_segment+0x128>)
 8010524:	4843      	ldr	r0, [pc, #268]	@ (8010634 <tcp_create_segment+0x12c>)
 8010526:	f005 fab3 	bl	8015a90 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d105      	bne.n	801053c <tcp_create_segment+0x34>
 8010530:	4b3e      	ldr	r3, [pc, #248]	@ (801062c <tcp_create_segment+0x124>)
 8010532:	22a4      	movs	r2, #164	@ 0xa4
 8010534:	4940      	ldr	r1, [pc, #256]	@ (8010638 <tcp_create_segment+0x130>)
 8010536:	483f      	ldr	r0, [pc, #252]	@ (8010634 <tcp_create_segment+0x12c>)
 8010538:	f005 faaa 	bl	8015a90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801053c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	b2db      	uxtb	r3, r3
 8010544:	f003 0304 	and.w	r3, r3, #4
 8010548:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801054a:	2003      	movs	r0, #3
 801054c:	f7fa ff98 	bl	800b480 <memp_malloc>
 8010550:	6138      	str	r0, [r7, #16]
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d104      	bne.n	8010562 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010558:	68b8      	ldr	r0, [r7, #8]
 801055a:	f7fb fe77 	bl	800c24c <pbuf_free>
    return NULL;
 801055e:	2300      	movs	r3, #0
 8010560:	e060      	b.n	8010624 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010568:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	2200      	movs	r2, #0
 801056e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	891a      	ldrh	r2, [r3, #8]
 801057a:	7dfb      	ldrb	r3, [r7, #23]
 801057c:	b29b      	uxth	r3, r3
 801057e:	429a      	cmp	r2, r3
 8010580:	d205      	bcs.n	801058e <tcp_create_segment+0x86>
 8010582:	4b2a      	ldr	r3, [pc, #168]	@ (801062c <tcp_create_segment+0x124>)
 8010584:	22b0      	movs	r2, #176	@ 0xb0
 8010586:	492d      	ldr	r1, [pc, #180]	@ (801063c <tcp_create_segment+0x134>)
 8010588:	482a      	ldr	r0, [pc, #168]	@ (8010634 <tcp_create_segment+0x12c>)
 801058a:	f005 fa81 	bl	8015a90 <iprintf>
  seg->len = p->tot_len - optlen;
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	891a      	ldrh	r2, [r3, #8]
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	b29b      	uxth	r3, r3
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	b29a      	uxth	r2, r3
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801059e:	2114      	movs	r1, #20
 80105a0:	68b8      	ldr	r0, [r7, #8]
 80105a2:	f7fb fdbd 	bl	800c120 <pbuf_add_header>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d004      	beq.n	80105b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80105ac:	6938      	ldr	r0, [r7, #16]
 80105ae:	f7fd f8d2 	bl	800d756 <tcp_seg_free>
    return NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e036      	b.n	8010624 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	8ada      	ldrh	r2, [r3, #22]
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	68dc      	ldr	r4, [r3, #12]
 80105c8:	4610      	mov	r0, r2
 80105ca:	f7fa fae1 	bl	800ab90 <lwip_htons>
 80105ce:	4603      	mov	r3, r0
 80105d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	8b1a      	ldrh	r2, [r3, #24]
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	68dc      	ldr	r4, [r3, #12]
 80105da:	4610      	mov	r0, r2
 80105dc:	f7fa fad8 	bl	800ab90 <lwip_htons>
 80105e0:	4603      	mov	r3, r0
 80105e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	68dc      	ldr	r4, [r3, #12]
 80105e8:	6838      	ldr	r0, [r7, #0]
 80105ea:	f7fa fae6 	bl	800abba <lwip_htonl>
 80105ee:	4603      	mov	r3, r0
 80105f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80105f2:	7dfb      	ldrb	r3, [r7, #23]
 80105f4:	089b      	lsrs	r3, r3, #2
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	3305      	adds	r3, #5
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	031b      	lsls	r3, r3, #12
 80105fe:	b29a      	uxth	r2, r3
 8010600:	79fb      	ldrb	r3, [r7, #7]
 8010602:	b29b      	uxth	r3, r3
 8010604:	4313      	orrs	r3, r2
 8010606:	b29a      	uxth	r2, r3
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	68dc      	ldr	r4, [r3, #12]
 801060c:	4610      	mov	r0, r2
 801060e:	f7fa fabf 	bl	800ab90 <lwip_htons>
 8010612:	4603      	mov	r3, r0
 8010614:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	2200      	movs	r2, #0
 801061c:	749a      	strb	r2, [r3, #18]
 801061e:	2200      	movs	r2, #0
 8010620:	74da      	strb	r2, [r3, #19]
  return seg;
 8010622:	693b      	ldr	r3, [r7, #16]
}
 8010624:	4618      	mov	r0, r3
 8010626:	371c      	adds	r7, #28
 8010628:	46bd      	mov	sp, r7
 801062a:	bd90      	pop	{r4, r7, pc}
 801062c:	080180bc 	.word	0x080180bc
 8010630:	080180f0 	.word	0x080180f0
 8010634:	08018110 	.word	0x08018110
 8010638:	08018138 	.word	0x08018138
 801063c:	0801815c 	.word	0x0801815c

08010640 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010640:	b590      	push	{r4, r7, lr}
 8010642:	b08b      	sub	sp, #44	@ 0x2c
 8010644:	af02      	add	r7, sp, #8
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	460b      	mov	r3, r1
 801064a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801064c:	2300      	movs	r3, #0
 801064e:	61fb      	str	r3, [r7, #28]
 8010650:	2300      	movs	r3, #0
 8010652:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010654:	2300      	movs	r3, #0
 8010656:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d106      	bne.n	801066c <tcp_split_unsent_seg+0x2c>
 801065e:	4b95      	ldr	r3, [pc, #596]	@ (80108b4 <tcp_split_unsent_seg+0x274>)
 8010660:	f240 324b 	movw	r2, #843	@ 0x34b
 8010664:	4994      	ldr	r1, [pc, #592]	@ (80108b8 <tcp_split_unsent_seg+0x278>)
 8010666:	4895      	ldr	r0, [pc, #596]	@ (80108bc <tcp_split_unsent_seg+0x27c>)
 8010668:	f005 fa12 	bl	8015a90 <iprintf>

  useg = pcb->unsent;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010670:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d102      	bne.n	801067e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010678:	f04f 33ff 	mov.w	r3, #4294967295
 801067c:	e116      	b.n	80108ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801067e:	887b      	ldrh	r3, [r7, #2]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d109      	bne.n	8010698 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010684:	4b8b      	ldr	r3, [pc, #556]	@ (80108b4 <tcp_split_unsent_seg+0x274>)
 8010686:	f240 3253 	movw	r2, #851	@ 0x353
 801068a:	498d      	ldr	r1, [pc, #564]	@ (80108c0 <tcp_split_unsent_seg+0x280>)
 801068c:	488b      	ldr	r0, [pc, #556]	@ (80108bc <tcp_split_unsent_seg+0x27c>)
 801068e:	f005 f9ff 	bl	8015a90 <iprintf>
    return ERR_VAL;
 8010692:	f06f 0305 	mvn.w	r3, #5
 8010696:	e109      	b.n	80108ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	891b      	ldrh	r3, [r3, #8]
 801069c:	887a      	ldrh	r2, [r7, #2]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d301      	bcc.n	80106a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80106a2:	2300      	movs	r3, #0
 80106a4:	e102      	b.n	80108ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106aa:	887a      	ldrh	r2, [r7, #2]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d906      	bls.n	80106be <tcp_split_unsent_seg+0x7e>
 80106b0:	4b80      	ldr	r3, [pc, #512]	@ (80108b4 <tcp_split_unsent_seg+0x274>)
 80106b2:	f240 325b 	movw	r2, #859	@ 0x35b
 80106b6:	4983      	ldr	r1, [pc, #524]	@ (80108c4 <tcp_split_unsent_seg+0x284>)
 80106b8:	4880      	ldr	r0, [pc, #512]	@ (80108bc <tcp_split_unsent_seg+0x27c>)
 80106ba:	f005 f9e9 	bl	8015a90 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	891b      	ldrh	r3, [r3, #8]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d106      	bne.n	80106d4 <tcp_split_unsent_seg+0x94>
 80106c6:	4b7b      	ldr	r3, [pc, #492]	@ (80108b4 <tcp_split_unsent_seg+0x274>)
 80106c8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80106cc:	497e      	ldr	r1, [pc, #504]	@ (80108c8 <tcp_split_unsent_seg+0x288>)
 80106ce:	487b      	ldr	r0, [pc, #492]	@ (80108bc <tcp_split_unsent_seg+0x27c>)
 80106d0:	f005 f9de 	bl	8015a90 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	7a9b      	ldrb	r3, [r3, #10]
 80106d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80106da:	7bfb      	ldrb	r3, [r7, #15]
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	f003 0304 	and.w	r3, r3, #4
 80106e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	891a      	ldrh	r2, [r3, #8]
 80106ea:	887b      	ldrh	r3, [r7, #2]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80106f0:	7bbb      	ldrb	r3, [r7, #14]
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	89bb      	ldrh	r3, [r7, #12]
 80106f6:	4413      	add	r3, r2
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80106fe:	4619      	mov	r1, r3
 8010700:	2036      	movs	r0, #54	@ 0x36
 8010702:	f7fb fabf 	bl	800bc84 <pbuf_alloc>
 8010706:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	2b00      	cmp	r3, #0
 801070c:	f000 80b7 	beq.w	801087e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	891a      	ldrh	r2, [r3, #8]
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	891b      	ldrh	r3, [r3, #8]
 801071a:	1ad3      	subs	r3, r2, r3
 801071c:	b29a      	uxth	r2, r3
 801071e:	887b      	ldrh	r3, [r7, #2]
 8010720:	4413      	add	r3, r2
 8010722:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	6858      	ldr	r0, [r3, #4]
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	685a      	ldr	r2, [r3, #4]
 801072c:	7bbb      	ldrb	r3, [r7, #14]
 801072e:	18d1      	adds	r1, r2, r3
 8010730:	897b      	ldrh	r3, [r7, #10]
 8010732:	89ba      	ldrh	r2, [r7, #12]
 8010734:	f7fb ff84 	bl	800c640 <pbuf_copy_partial>
 8010738:	4603      	mov	r3, r0
 801073a:	461a      	mov	r2, r3
 801073c:	89bb      	ldrh	r3, [r7, #12]
 801073e:	4293      	cmp	r3, r2
 8010740:	f040 809f 	bne.w	8010882 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	899b      	ldrh	r3, [r3, #12]
 801074a:	b29b      	uxth	r3, r3
 801074c:	4618      	mov	r0, r3
 801074e:	f7fa fa1f 	bl	800ab90 <lwip_htons>
 8010752:	4603      	mov	r3, r0
 8010754:	b2db      	uxtb	r3, r3
 8010756:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801075a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801075c:	2300      	movs	r3, #0
 801075e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010760:	7efb      	ldrb	r3, [r7, #27]
 8010762:	f003 0308 	and.w	r3, r3, #8
 8010766:	2b00      	cmp	r3, #0
 8010768:	d007      	beq.n	801077a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801076a:	7efb      	ldrb	r3, [r7, #27]
 801076c:	f023 0308 	bic.w	r3, r3, #8
 8010770:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010772:	7ebb      	ldrb	r3, [r7, #26]
 8010774:	f043 0308 	orr.w	r3, r3, #8
 8010778:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801077a:	7efb      	ldrb	r3, [r7, #27]
 801077c:	f003 0301 	and.w	r3, r3, #1
 8010780:	2b00      	cmp	r3, #0
 8010782:	d007      	beq.n	8010794 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010784:	7efb      	ldrb	r3, [r7, #27]
 8010786:	f023 0301 	bic.w	r3, r3, #1
 801078a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801078c:	7ebb      	ldrb	r3, [r7, #26]
 801078e:	f043 0301 	orr.w	r3, r3, #1
 8010792:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	4618      	mov	r0, r3
 801079c:	f7fa fa0d 	bl	800abba <lwip_htonl>
 80107a0:	4602      	mov	r2, r0
 80107a2:	887b      	ldrh	r3, [r7, #2]
 80107a4:	18d1      	adds	r1, r2, r3
 80107a6:	7eba      	ldrb	r2, [r7, #26]
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	460b      	mov	r3, r1
 80107ae:	6939      	ldr	r1, [r7, #16]
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7ff fea9 	bl	8010508 <tcp_create_segment>
 80107b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d063      	beq.n	8010886 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fb fdca 	bl	800c35c <pbuf_clen>
 80107c8:	4603      	mov	r3, r0
 80107ca:	461a      	mov	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	6858      	ldr	r0, [r3, #4]
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	891a      	ldrh	r2, [r3, #8]
 80107e6:	89bb      	ldrh	r3, [r7, #12]
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	4619      	mov	r1, r3
 80107ee:	f7fb fba7 	bl	800bf40 <pbuf_realloc>
  useg->len -= remainder;
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	891a      	ldrh	r2, [r3, #8]
 80107f6:	89bb      	ldrh	r3, [r7, #12]
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	899b      	ldrh	r3, [r3, #12]
 8010806:	b29c      	uxth	r4, r3
 8010808:	7efb      	ldrb	r3, [r7, #27]
 801080a:	b29b      	uxth	r3, r3
 801080c:	4618      	mov	r0, r3
 801080e:	f7fa f9bf 	bl	800ab90 <lwip_htons>
 8010812:	4603      	mov	r3, r0
 8010814:	461a      	mov	r2, r3
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	4322      	orrs	r2, r4
 801081c:	b292      	uxth	r2, r2
 801081e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	4618      	mov	r0, r3
 8010826:	f7fb fd99 	bl	800c35c <pbuf_clen>
 801082a:	4603      	mov	r3, r0
 801082c:	461a      	mov	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010834:	4413      	add	r3, r2
 8010836:	b29a      	uxth	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	4618      	mov	r0, r3
 8010844:	f7fb fd8a 	bl	800c35c <pbuf_clen>
 8010848:	4603      	mov	r3, r0
 801084a:	461a      	mov	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010852:	4413      	add	r3, r2
 8010854:	b29a      	uxth	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	69fa      	ldr	r2, [r7, #28]
 8010868:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d103      	bne.n	801087a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801087a:	2300      	movs	r3, #0
 801087c:	e016      	b.n	80108ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801087e:	bf00      	nop
 8010880:	e002      	b.n	8010888 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010882:	bf00      	nop
 8010884:	e000      	b.n	8010888 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010886:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d006      	beq.n	801089c <tcp_split_unsent_seg+0x25c>
 801088e:	4b09      	ldr	r3, [pc, #36]	@ (80108b4 <tcp_split_unsent_seg+0x274>)
 8010890:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010894:	490d      	ldr	r1, [pc, #52]	@ (80108cc <tcp_split_unsent_seg+0x28c>)
 8010896:	4809      	ldr	r0, [pc, #36]	@ (80108bc <tcp_split_unsent_seg+0x27c>)
 8010898:	f005 f8fa 	bl	8015a90 <iprintf>
  if (p != NULL) {
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d002      	beq.n	80108a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80108a2:	6938      	ldr	r0, [r7, #16]
 80108a4:	f7fb fcd2 	bl	800c24c <pbuf_free>
  }

  return ERR_MEM;
 80108a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3724      	adds	r7, #36	@ 0x24
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd90      	pop	{r4, r7, pc}
 80108b4:	080180bc 	.word	0x080180bc
 80108b8:	08018450 	.word	0x08018450
 80108bc:	08018110 	.word	0x08018110
 80108c0:	08018474 	.word	0x08018474
 80108c4:	08018498 	.word	0x08018498
 80108c8:	080184a8 	.word	0x080184a8
 80108cc:	080184b8 	.word	0x080184b8

080108d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80108d0:	b590      	push	{r4, r7, lr}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d106      	bne.n	80108ec <tcp_send_fin+0x1c>
 80108de:	4b21      	ldr	r3, [pc, #132]	@ (8010964 <tcp_send_fin+0x94>)
 80108e0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80108e4:	4920      	ldr	r1, [pc, #128]	@ (8010968 <tcp_send_fin+0x98>)
 80108e6:	4821      	ldr	r0, [pc, #132]	@ (801096c <tcp_send_fin+0x9c>)
 80108e8:	f005 f8d2 	bl	8015a90 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d02e      	beq.n	8010952 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108f8:	60fb      	str	r3, [r7, #12]
 80108fa:	e002      	b.n	8010902 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d1f8      	bne.n	80108fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	899b      	ldrh	r3, [r3, #12]
 8010910:	b29b      	uxth	r3, r3
 8010912:	4618      	mov	r0, r3
 8010914:	f7fa f93c 	bl	800ab90 <lwip_htons>
 8010918:	4603      	mov	r3, r0
 801091a:	b2db      	uxtb	r3, r3
 801091c:	f003 0307 	and.w	r3, r3, #7
 8010920:	2b00      	cmp	r3, #0
 8010922:	d116      	bne.n	8010952 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	899b      	ldrh	r3, [r3, #12]
 801092a:	b29c      	uxth	r4, r3
 801092c:	2001      	movs	r0, #1
 801092e:	f7fa f92f 	bl	800ab90 <lwip_htons>
 8010932:	4603      	mov	r3, r0
 8010934:	461a      	mov	r2, r3
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	4322      	orrs	r2, r4
 801093c:	b292      	uxth	r2, r2
 801093e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	8b5b      	ldrh	r3, [r3, #26]
 8010944:	f043 0320 	orr.w	r3, r3, #32
 8010948:	b29a      	uxth	r2, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801094e:	2300      	movs	r3, #0
 8010950:	e004      	b.n	801095c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010952:	2101      	movs	r1, #1
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 f80b 	bl	8010970 <tcp_enqueue_flags>
 801095a:	4603      	mov	r3, r0
}
 801095c:	4618      	mov	r0, r3
 801095e:	3714      	adds	r7, #20
 8010960:	46bd      	mov	sp, r7
 8010962:	bd90      	pop	{r4, r7, pc}
 8010964:	080180bc 	.word	0x080180bc
 8010968:	080184c4 	.word	0x080184c4
 801096c:	08018110 	.word	0x08018110

08010970 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b08a      	sub	sp, #40	@ 0x28
 8010974:	af02      	add	r7, sp, #8
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	460b      	mov	r3, r1
 801097a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801097c:	2300      	movs	r3, #0
 801097e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010980:	2300      	movs	r3, #0
 8010982:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010984:	78fb      	ldrb	r3, [r7, #3]
 8010986:	f003 0303 	and.w	r3, r3, #3
 801098a:	2b00      	cmp	r3, #0
 801098c:	d106      	bne.n	801099c <tcp_enqueue_flags+0x2c>
 801098e:	4b67      	ldr	r3, [pc, #412]	@ (8010b2c <tcp_enqueue_flags+0x1bc>)
 8010990:	f240 4211 	movw	r2, #1041	@ 0x411
 8010994:	4966      	ldr	r1, [pc, #408]	@ (8010b30 <tcp_enqueue_flags+0x1c0>)
 8010996:	4867      	ldr	r0, [pc, #412]	@ (8010b34 <tcp_enqueue_flags+0x1c4>)
 8010998:	f005 f87a 	bl	8015a90 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d106      	bne.n	80109b0 <tcp_enqueue_flags+0x40>
 80109a2:	4b62      	ldr	r3, [pc, #392]	@ (8010b2c <tcp_enqueue_flags+0x1bc>)
 80109a4:	f240 4213 	movw	r2, #1043	@ 0x413
 80109a8:	4963      	ldr	r1, [pc, #396]	@ (8010b38 <tcp_enqueue_flags+0x1c8>)
 80109aa:	4862      	ldr	r0, [pc, #392]	@ (8010b34 <tcp_enqueue_flags+0x1c4>)
 80109ac:	f005 f870 	bl	8015a90 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80109b0:	78fb      	ldrb	r3, [r7, #3]
 80109b2:	f003 0302 	and.w	r3, r3, #2
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d001      	beq.n	80109be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80109ba:	2301      	movs	r3, #1
 80109bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80109be:	7ffb      	ldrb	r3, [r7, #31]
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	f003 0304 	and.w	r3, r3, #4
 80109c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80109ca:	7dfb      	ldrb	r3, [r7, #23]
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80109d2:	4619      	mov	r1, r3
 80109d4:	2036      	movs	r0, #54	@ 0x36
 80109d6:	f7fb f955 	bl	800bc84 <pbuf_alloc>
 80109da:	6138      	str	r0, [r7, #16]
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d109      	bne.n	80109f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8b5b      	ldrh	r3, [r3, #26]
 80109e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80109f0:	f04f 33ff 	mov.w	r3, #4294967295
 80109f4:	e095      	b.n	8010b22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	895a      	ldrh	r2, [r3, #10]
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d206      	bcs.n	8010a10 <tcp_enqueue_flags+0xa0>
 8010a02:	4b4a      	ldr	r3, [pc, #296]	@ (8010b2c <tcp_enqueue_flags+0x1bc>)
 8010a04:	f240 4239 	movw	r2, #1081	@ 0x439
 8010a08:	494c      	ldr	r1, [pc, #304]	@ (8010b3c <tcp_enqueue_flags+0x1cc>)
 8010a0a:	484a      	ldr	r0, [pc, #296]	@ (8010b34 <tcp_enqueue_flags+0x1c4>)
 8010a0c:	f005 f840 	bl	8015a90 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010a14:	78fa      	ldrb	r2, [r7, #3]
 8010a16:	7ffb      	ldrb	r3, [r7, #31]
 8010a18:	9300      	str	r3, [sp, #0]
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	6939      	ldr	r1, [r7, #16]
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff fd72 	bl	8010508 <tcp_create_segment>
 8010a24:	60f8      	str	r0, [r7, #12]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d109      	bne.n	8010a40 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	8b5b      	ldrh	r3, [r3, #26]
 8010a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a3e:	e070      	b.n	8010b22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	f003 0303 	and.w	r3, r3, #3
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d006      	beq.n	8010a5a <tcp_enqueue_flags+0xea>
 8010a4c:	4b37      	ldr	r3, [pc, #220]	@ (8010b2c <tcp_enqueue_flags+0x1bc>)
 8010a4e:	f240 4242 	movw	r2, #1090	@ 0x442
 8010a52:	493b      	ldr	r1, [pc, #236]	@ (8010b40 <tcp_enqueue_flags+0x1d0>)
 8010a54:	4837      	ldr	r0, [pc, #220]	@ (8010b34 <tcp_enqueue_flags+0x1c4>)
 8010a56:	f005 f81b 	bl	8015a90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	891b      	ldrh	r3, [r3, #8]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d006      	beq.n	8010a70 <tcp_enqueue_flags+0x100>
 8010a62:	4b32      	ldr	r3, [pc, #200]	@ (8010b2c <tcp_enqueue_flags+0x1bc>)
 8010a64:	f240 4243 	movw	r2, #1091	@ 0x443
 8010a68:	4936      	ldr	r1, [pc, #216]	@ (8010b44 <tcp_enqueue_flags+0x1d4>)
 8010a6a:	4832      	ldr	r0, [pc, #200]	@ (8010b34 <tcp_enqueue_flags+0x1c4>)
 8010a6c:	f005 f810 	bl	8015a90 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d103      	bne.n	8010a80 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010a7e:	e00d      	b.n	8010a9c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a84:	61bb      	str	r3, [r7, #24]
 8010a86:	e002      	b.n	8010a8e <tcp_enqueue_flags+0x11e>
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	61bb      	str	r3, [r7, #24]
 8010a8e:	69bb      	ldr	r3, [r7, #24]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1f8      	bne.n	8010a88 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	68fa      	ldr	r2, [r7, #12]
 8010a9a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010aa4:	78fb      	ldrb	r3, [r7, #3]
 8010aa6:	f003 0302 	and.w	r3, r3, #2
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d104      	bne.n	8010ab8 <tcp_enqueue_flags+0x148>
 8010aae:	78fb      	ldrb	r3, [r7, #3]
 8010ab0:	f003 0301 	and.w	r3, r3, #1
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d004      	beq.n	8010ac2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010abc:	1c5a      	adds	r2, r3, #1
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010ac2:	78fb      	ldrb	r3, [r7, #3]
 8010ac4:	f003 0301 	and.w	r3, r3, #1
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d006      	beq.n	8010ada <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	8b5b      	ldrh	r3, [r3, #26]
 8010ad0:	f043 0320 	orr.w	r3, r3, #32
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7fb fc3c 	bl	800c35c <pbuf_clen>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010aee:	4413      	add	r3, r2
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00e      	beq.n	8010b20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d10a      	bne.n	8010b20 <tcp_enqueue_flags+0x1b0>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d106      	bne.n	8010b20 <tcp_enqueue_flags+0x1b0>
 8010b12:	4b06      	ldr	r3, [pc, #24]	@ (8010b2c <tcp_enqueue_flags+0x1bc>)
 8010b14:	f240 4265 	movw	r2, #1125	@ 0x465
 8010b18:	490b      	ldr	r1, [pc, #44]	@ (8010b48 <tcp_enqueue_flags+0x1d8>)
 8010b1a:	4806      	ldr	r0, [pc, #24]	@ (8010b34 <tcp_enqueue_flags+0x1c4>)
 8010b1c:	f004 ffb8 	bl	8015a90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3720      	adds	r7, #32
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	080180bc 	.word	0x080180bc
 8010b30:	080184e0 	.word	0x080184e0
 8010b34:	08018110 	.word	0x08018110
 8010b38:	08018538 	.word	0x08018538
 8010b3c:	08018558 	.word	0x08018558
 8010b40:	08018594 	.word	0x08018594
 8010b44:	080185ac 	.word	0x080185ac
 8010b48:	080185d8 	.word	0x080185d8

08010b4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010b4c:	b5b0      	push	{r4, r5, r7, lr}
 8010b4e:	b08a      	sub	sp, #40	@ 0x28
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d106      	bne.n	8010b68 <tcp_output+0x1c>
 8010b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8010d84 <tcp_output+0x238>)
 8010b5c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010b60:	4989      	ldr	r1, [pc, #548]	@ (8010d88 <tcp_output+0x23c>)
 8010b62:	488a      	ldr	r0, [pc, #552]	@ (8010d8c <tcp_output+0x240>)
 8010b64:	f004 ff94 	bl	8015a90 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	7d1b      	ldrb	r3, [r3, #20]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d106      	bne.n	8010b7e <tcp_output+0x32>
 8010b70:	4b84      	ldr	r3, [pc, #528]	@ (8010d84 <tcp_output+0x238>)
 8010b72:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010b76:	4986      	ldr	r1, [pc, #536]	@ (8010d90 <tcp_output+0x244>)
 8010b78:	4884      	ldr	r0, [pc, #528]	@ (8010d8c <tcp_output+0x240>)
 8010b7a:	f004 ff89 	bl	8015a90 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010b7e:	4b85      	ldr	r3, [pc, #532]	@ (8010d94 <tcp_output+0x248>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d101      	bne.n	8010b8c <tcp_output+0x40>
    return ERR_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	e1ce      	b.n	8010f2a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	bf28      	it	cs
 8010b9c:	4613      	movcs	r3, r2
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ba6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d10b      	bne.n	8010bc6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	8b5b      	ldrh	r3, [r3, #26]
 8010bb2:	f003 0302 	and.w	r3, r3, #2
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f000 81aa 	beq.w	8010f10 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fdcb 	bl	8011758 <tcp_send_empty_ack>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	e1b1      	b.n	8010f2a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	3304      	adds	r3, #4
 8010bcc:	461a      	mov	r2, r3
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f7ff fc7e 	bl	80104d0 <tcp_route>
 8010bd4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <tcp_output+0x96>
    return ERR_RTE;
 8010bdc:	f06f 0303 	mvn.w	r3, #3
 8010be0:	e1a3      	b.n	8010f2a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d003      	beq.n	8010bf0 <tcp_output+0xa4>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d111      	bne.n	8010c14 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d002      	beq.n	8010bfc <tcp_output+0xb0>
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	e000      	b.n	8010bfe <tcp_output+0xb2>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d102      	bne.n	8010c0c <tcp_output+0xc0>
      return ERR_RTE;
 8010c06:	f06f 0303 	mvn.w	r3, #3
 8010c0a:	e18e      	b.n	8010f2a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7f9 ffcd 	bl	800abba <lwip_htonl>
 8010c20:	4602      	mov	r2, r0
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c2a:	8912      	ldrh	r2, [r2, #8]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	69ba      	ldr	r2, [r7, #24]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d227      	bcs.n	8010c84 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d114      	bne.n	8010c6c <tcp_output+0x120>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d110      	bne.n	8010c6c <tcp_output+0x120>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d10b      	bne.n	8010c6c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2201      	movs	r2, #1
 8010c60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	8b5b      	ldrh	r3, [r3, #26]
 8010c70:	f003 0302 	and.w	r3, r3, #2
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	f000 814d 	beq.w	8010f14 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fd6c 	bl	8011758 <tcp_send_empty_ack>
 8010c80:	4603      	mov	r3, r0
 8010c82:	e152      	b.n	8010f2a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c90:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f000 811c 	beq.w	8010ed2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010c9a:	e002      	b.n	8010ca2 <tcp_output+0x156>
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	623b      	str	r3, [r7, #32]
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d1f8      	bne.n	8010c9c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010caa:	e112      	b.n	8010ed2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	899b      	ldrh	r3, [r3, #12]
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7f9 ff6b 	bl	800ab90 <lwip_htons>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	f003 0304 	and.w	r3, r3, #4
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d006      	beq.n	8010cd4 <tcp_output+0x188>
 8010cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8010d84 <tcp_output+0x238>)
 8010cc8:	f240 5236 	movw	r2, #1334	@ 0x536
 8010ccc:	4932      	ldr	r1, [pc, #200]	@ (8010d98 <tcp_output+0x24c>)
 8010cce:	482f      	ldr	r0, [pc, #188]	@ (8010d8c <tcp_output+0x240>)
 8010cd0:	f004 fede 	bl	8015a90 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d01f      	beq.n	8010d1c <tcp_output+0x1d0>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	8b5b      	ldrh	r3, [r3, #26]
 8010ce0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d119      	bne.n	8010d1c <tcp_output+0x1d0>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d00b      	beq.n	8010d08 <tcp_output+0x1bc>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d110      	bne.n	8010d1c <tcp_output+0x1d0>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cfe:	891a      	ldrh	r2, [r3, #8]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d209      	bcs.n	8010d1c <tcp_output+0x1d0>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d004      	beq.n	8010d1c <tcp_output+0x1d0>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d18:	2b08      	cmp	r3, #8
 8010d1a:	d901      	bls.n	8010d20 <tcp_output+0x1d4>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e000      	b.n	8010d22 <tcp_output+0x1d6>
 8010d20:	2300      	movs	r3, #0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d106      	bne.n	8010d34 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8b5b      	ldrh	r3, [r3, #26]
 8010d2a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	f000 80e4 	beq.w	8010efc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	7d1b      	ldrb	r3, [r3, #20]
 8010d38:	2b02      	cmp	r3, #2
 8010d3a:	d00d      	beq.n	8010d58 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	899b      	ldrh	r3, [r3, #12]
 8010d42:	b29c      	uxth	r4, r3
 8010d44:	2010      	movs	r0, #16
 8010d46:	f7f9 ff23 	bl	800ab90 <lwip_htons>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	4322      	orrs	r2, r4
 8010d54:	b292      	uxth	r2, r2
 8010d56:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010d58:	697a      	ldr	r2, [r7, #20]
 8010d5a:	6879      	ldr	r1, [r7, #4]
 8010d5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010d5e:	f000 f909 	bl	8010f74 <tcp_output_segment>
 8010d62:	4603      	mov	r3, r0
 8010d64:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d016      	beq.n	8010d9c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	8b5b      	ldrh	r3, [r3, #26]
 8010d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	835a      	strh	r2, [r3, #26]
      return err;
 8010d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d80:	e0d3      	b.n	8010f2a <tcp_output+0x3de>
 8010d82:	bf00      	nop
 8010d84:	080180bc 	.word	0x080180bc
 8010d88:	08018600 	.word	0x08018600
 8010d8c:	08018110 	.word	0x08018110
 8010d90:	08018618 	.word	0x08018618
 8010d94:	20008c4c 	.word	0x20008c4c
 8010d98:	08018640 	.word	0x08018640
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7d1b      	ldrb	r3, [r3, #20]
 8010da8:	2b02      	cmp	r3, #2
 8010daa:	d006      	beq.n	8010dba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	8b5b      	ldrh	r3, [r3, #26]
 8010db0:	f023 0303 	bic.w	r3, r3, #3
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7f9 fefa 	bl	800abba <lwip_htonl>
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dca:	891b      	ldrh	r3, [r3, #8]
 8010dcc:	461d      	mov	r5, r3
 8010dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	899b      	ldrh	r3, [r3, #12]
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7f9 feda 	bl	800ab90 <lwip_htons>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	f003 0303 	and.w	r3, r3, #3
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <tcp_output+0x2a0>
 8010de8:	2301      	movs	r3, #1
 8010dea:	e000      	b.n	8010dee <tcp_output+0x2a2>
 8010dec:	2300      	movs	r3, #0
 8010dee:	442b      	add	r3, r5
 8010df0:	4423      	add	r3, r4
 8010df2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	1ad3      	subs	r3, r2, r3
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	da02      	bge.n	8010e06 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	68ba      	ldr	r2, [r7, #8]
 8010e04:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e08:	891b      	ldrh	r3, [r3, #8]
 8010e0a:	461c      	mov	r4, r3
 8010e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	899b      	ldrh	r3, [r3, #12]
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7f9 febb 	bl	800ab90 <lwip_htons>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	f003 0303 	and.w	r3, r3, #3
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d001      	beq.n	8010e2a <tcp_output+0x2de>
 8010e26:	2301      	movs	r3, #1
 8010e28:	e000      	b.n	8010e2c <tcp_output+0x2e0>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	4423      	add	r3, r4
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d049      	beq.n	8010ec6 <tcp_output+0x37a>
      seg->next = NULL;
 8010e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e34:	2200      	movs	r2, #0
 8010e36:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d105      	bne.n	8010e4c <tcp_output+0x300>
        pcb->unacked = seg;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e44:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e48:	623b      	str	r3, [r7, #32]
 8010e4a:	e03f      	b.n	8010ecc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f9 feb1 	bl	800abba <lwip_htonl>
 8010e58:	4604      	mov	r4, r0
 8010e5a:	6a3b      	ldr	r3, [r7, #32]
 8010e5c:	68db      	ldr	r3, [r3, #12]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7f9 feaa 	bl	800abba <lwip_htonl>
 8010e66:	4603      	mov	r3, r0
 8010e68:	1ae3      	subs	r3, r4, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	da24      	bge.n	8010eb8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	3370      	adds	r3, #112	@ 0x70
 8010e72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010e74:	e002      	b.n	8010e7c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d011      	beq.n	8010ea8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7f9 fe94 	bl	800abba <lwip_htonl>
 8010e92:	4604      	mov	r4, r0
 8010e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7f9 fe8d 	bl	800abba <lwip_htonl>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	dbe6      	blt.n	8010e76 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010eb4:	601a      	str	r2, [r3, #0]
 8010eb6:	e009      	b.n	8010ecc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010eb8:	6a3b      	ldr	r3, [r7, #32]
 8010eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ebc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010ebe:	6a3b      	ldr	r3, [r7, #32]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	623b      	str	r3, [r7, #32]
 8010ec4:	e002      	b.n	8010ecc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010ec6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ec8:	f7fc fc45 	bl	800d756 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d012      	beq.n	8010efe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7f9 fe6b 	bl	800abba <lwip_htonl>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010eea:	1ad3      	subs	r3, r2, r3
 8010eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010eee:	8912      	ldrh	r2, [r2, #8]
 8010ef0:	4413      	add	r3, r2
  while (seg != NULL &&
 8010ef2:	69ba      	ldr	r2, [r7, #24]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	f4bf aed9 	bcs.w	8010cac <tcp_output+0x160>
 8010efa:	e000      	b.n	8010efe <tcp_output+0x3b2>
      break;
 8010efc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d108      	bne.n	8010f18 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010f0e:	e004      	b.n	8010f1a <tcp_output+0x3ce>
    goto output_done;
 8010f10:	bf00      	nop
 8010f12:	e002      	b.n	8010f1a <tcp_output+0x3ce>
    goto output_done;
 8010f14:	bf00      	nop
 8010f16:	e000      	b.n	8010f1a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010f18:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	8b5b      	ldrh	r3, [r3, #26]
 8010f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010f28:	2300      	movs	r3, #0
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3728      	adds	r7, #40	@ 0x28
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bdb0      	pop	{r4, r5, r7, pc}
 8010f32:	bf00      	nop

08010f34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d106      	bne.n	8010f50 <tcp_output_segment_busy+0x1c>
 8010f42:	4b09      	ldr	r3, [pc, #36]	@ (8010f68 <tcp_output_segment_busy+0x34>)
 8010f44:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010f48:	4908      	ldr	r1, [pc, #32]	@ (8010f6c <tcp_output_segment_busy+0x38>)
 8010f4a:	4809      	ldr	r0, [pc, #36]	@ (8010f70 <tcp_output_segment_busy+0x3c>)
 8010f4c:	f004 fda0 	bl	8015a90 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	7b9b      	ldrb	r3, [r3, #14]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d001      	beq.n	8010f5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e000      	b.n	8010f60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010f5e:	2300      	movs	r3, #0
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	080180bc 	.word	0x080180bc
 8010f6c:	08018658 	.word	0x08018658
 8010f70:	08018110 	.word	0x08018110

08010f74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010f74:	b5b0      	push	{r4, r5, r7, lr}
 8010f76:	b08c      	sub	sp, #48	@ 0x30
 8010f78:	af04      	add	r7, sp, #16
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d106      	bne.n	8010f94 <tcp_output_segment+0x20>
 8010f86:	4b64      	ldr	r3, [pc, #400]	@ (8011118 <tcp_output_segment+0x1a4>)
 8010f88:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8010f8c:	4963      	ldr	r1, [pc, #396]	@ (801111c <tcp_output_segment+0x1a8>)
 8010f8e:	4864      	ldr	r0, [pc, #400]	@ (8011120 <tcp_output_segment+0x1ac>)
 8010f90:	f004 fd7e 	bl	8015a90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d106      	bne.n	8010fa8 <tcp_output_segment+0x34>
 8010f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8011118 <tcp_output_segment+0x1a4>)
 8010f9c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010fa0:	4960      	ldr	r1, [pc, #384]	@ (8011124 <tcp_output_segment+0x1b0>)
 8010fa2:	485f      	ldr	r0, [pc, #380]	@ (8011120 <tcp_output_segment+0x1ac>)
 8010fa4:	f004 fd74 	bl	8015a90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d106      	bne.n	8010fbc <tcp_output_segment+0x48>
 8010fae:	4b5a      	ldr	r3, [pc, #360]	@ (8011118 <tcp_output_segment+0x1a4>)
 8010fb0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010fb4:	495c      	ldr	r1, [pc, #368]	@ (8011128 <tcp_output_segment+0x1b4>)
 8010fb6:	485a      	ldr	r0, [pc, #360]	@ (8011120 <tcp_output_segment+0x1ac>)
 8010fb8:	f004 fd6a 	bl	8015a90 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010fbc:	68f8      	ldr	r0, [r7, #12]
 8010fbe:	f7ff ffb9 	bl	8010f34 <tcp_output_segment_busy>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e0a1      	b.n	8011110 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	68dc      	ldr	r4, [r3, #12]
 8010fd4:	4610      	mov	r0, r2
 8010fd6:	f7f9 fdf0 	bl	800abba <lwip_htonl>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68dc      	ldr	r4, [r3, #12]
 8010fe6:	4610      	mov	r0, r2
 8010fe8:	f7f9 fdd2 	bl	800ab90 <lwip_htons>
 8010fec:	4603      	mov	r3, r0
 8010fee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010ff8:	441a      	add	r2, r3
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	68db      	ldr	r3, [r3, #12]
 8011002:	3314      	adds	r3, #20
 8011004:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	7a9b      	ldrb	r3, [r3, #10]
 801100a:	f003 0301 	and.w	r3, r3, #1
 801100e:	2b00      	cmp	r3, #0
 8011010:	d015      	beq.n	801103e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	3304      	adds	r3, #4
 8011016:	461a      	mov	r2, r3
 8011018:	6879      	ldr	r1, [r7, #4]
 801101a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801101e:	f7fc fe91 	bl	800dd44 <tcp_eff_send_mss_netif>
 8011022:	4603      	mov	r3, r0
 8011024:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011026:	8b7b      	ldrh	r3, [r7, #26]
 8011028:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801102c:	4618      	mov	r0, r3
 801102e:	f7f9 fdc4 	bl	800abba <lwip_htonl>
 8011032:	4602      	mov	r2, r0
 8011034:	69fb      	ldr	r3, [r7, #28]
 8011036:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	3304      	adds	r3, #4
 801103c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011044:	2b00      	cmp	r3, #0
 8011046:	da02      	bge.n	801104e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	2200      	movs	r2, #0
 801104c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011052:	2b00      	cmp	r3, #0
 8011054:	d10c      	bne.n	8011070 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011056:	4b35      	ldr	r3, [pc, #212]	@ (801112c <tcp_output_segment+0x1b8>)
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	4618      	mov	r0, r3
 8011066:	f7f9 fda8 	bl	800abba <lwip_htonl>
 801106a:	4602      	mov	r2, r0
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	68da      	ldr	r2, [r3, #12]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	1ad3      	subs	r3, r2, r3
 801107c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	8959      	ldrh	r1, [r3, #10]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	8b3a      	ldrh	r2, [r7, #24]
 801108a:	1a8a      	subs	r2, r1, r2
 801108c:	b292      	uxth	r2, r2
 801108e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	8919      	ldrh	r1, [r3, #8]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	8b3a      	ldrh	r2, [r7, #24]
 801109c:	1a8a      	subs	r2, r1, r2
 801109e:	b292      	uxth	r2, r2
 80110a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	68fa      	ldr	r2, [r7, #12]
 80110a8:	68d2      	ldr	r2, [r2, #12]
 80110aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	2200      	movs	r2, #0
 80110b2:	741a      	strb	r2, [r3, #16]
 80110b4:	2200      	movs	r2, #0
 80110b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	68da      	ldr	r2, [r3, #12]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	7a9b      	ldrb	r3, [r3, #10]
 80110c0:	f003 0301 	and.w	r3, r3, #1
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <tcp_output_segment+0x158>
 80110c8:	2318      	movs	r3, #24
 80110ca:	e000      	b.n	80110ce <tcp_output_segment+0x15a>
 80110cc:	2314      	movs	r3, #20
 80110ce:	4413      	add	r3, r2
 80110d0:	69fa      	ldr	r2, [r7, #28]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d006      	beq.n	80110e4 <tcp_output_segment+0x170>
 80110d6:	4b10      	ldr	r3, [pc, #64]	@ (8011118 <tcp_output_segment+0x1a4>)
 80110d8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80110dc:	4914      	ldr	r1, [pc, #80]	@ (8011130 <tcp_output_segment+0x1bc>)
 80110de:	4810      	ldr	r0, [pc, #64]	@ (8011120 <tcp_output_segment+0x1ac>)
 80110e0:	f004 fcd6 	bl	8015a90 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	6858      	ldr	r0, [r3, #4]
 80110e8:	68b9      	ldr	r1, [r7, #8]
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	1d1c      	adds	r4, r3, #4
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	7add      	ldrb	r5, [r3, #11]
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	7a9b      	ldrb	r3, [r3, #10]
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	9202      	str	r2, [sp, #8]
 80110fa:	2206      	movs	r2, #6
 80110fc:	9201      	str	r2, [sp, #4]
 80110fe:	9300      	str	r3, [sp, #0]
 8011100:	462b      	mov	r3, r5
 8011102:	4622      	mov	r2, r4
 8011104:	f002 fd24 	bl	8013b50 <ip4_output_if>
 8011108:	4603      	mov	r3, r0
 801110a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801110c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011110:	4618      	mov	r0, r3
 8011112:	3720      	adds	r7, #32
 8011114:	46bd      	mov	sp, r7
 8011116:	bdb0      	pop	{r4, r5, r7, pc}
 8011118:	080180bc 	.word	0x080180bc
 801111c:	08018680 	.word	0x08018680
 8011120:	08018110 	.word	0x08018110
 8011124:	080186a0 	.word	0x080186a0
 8011128:	080186c0 	.word	0x080186c0
 801112c:	20008c00 	.word	0x20008c00
 8011130:	080186e4 	.word	0x080186e4

08011134 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011134:	b5b0      	push	{r4, r5, r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d106      	bne.n	8011150 <tcp_rexmit_rto_prepare+0x1c>
 8011142:	4b31      	ldr	r3, [pc, #196]	@ (8011208 <tcp_rexmit_rto_prepare+0xd4>)
 8011144:	f240 6263 	movw	r2, #1635	@ 0x663
 8011148:	4930      	ldr	r1, [pc, #192]	@ (801120c <tcp_rexmit_rto_prepare+0xd8>)
 801114a:	4831      	ldr	r0, [pc, #196]	@ (8011210 <tcp_rexmit_rto_prepare+0xdc>)
 801114c:	f004 fca0 	bl	8015a90 <iprintf>

  if (pcb->unacked == NULL) {
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011154:	2b00      	cmp	r3, #0
 8011156:	d102      	bne.n	801115e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011158:	f06f 0305 	mvn.w	r3, #5
 801115c:	e050      	b.n	8011200 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011162:	60fb      	str	r3, [r7, #12]
 8011164:	e00b      	b.n	801117e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f7ff fee4 	bl	8010f34 <tcp_output_segment_busy>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d002      	beq.n	8011178 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011172:	f06f 0305 	mvn.w	r3, #5
 8011176:	e043      	b.n	8011200 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	60fb      	str	r3, [r7, #12]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d1ef      	bne.n	8011166 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f7ff fed4 	bl	8010f34 <tcp_output_segment_busy>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d002      	beq.n	8011198 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011192:	f06f 0305 	mvn.w	r3, #5
 8011196:	e033      	b.n	8011200 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	8b5b      	ldrh	r3, [r3, #26]
 80111b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7f9 fcf9 	bl	800abba <lwip_htonl>
 80111c8:	4604      	mov	r4, r0
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	891b      	ldrh	r3, [r3, #8]
 80111ce:	461d      	mov	r5, r3
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	899b      	ldrh	r3, [r3, #12]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f9 fcd9 	bl	800ab90 <lwip_htons>
 80111de:	4603      	mov	r3, r0
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	f003 0303 	and.w	r3, r3, #3
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d001      	beq.n	80111ee <tcp_rexmit_rto_prepare+0xba>
 80111ea:	2301      	movs	r3, #1
 80111ec:	e000      	b.n	80111f0 <tcp_rexmit_rto_prepare+0xbc>
 80111ee:	2300      	movs	r3, #0
 80111f0:	442b      	add	r3, r5
 80111f2:	18e2      	adds	r2, r4, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80111fe:	2300      	movs	r3, #0
}
 8011200:	4618      	mov	r0, r3
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bdb0      	pop	{r4, r5, r7, pc}
 8011208:	080180bc 	.word	0x080180bc
 801120c:	080186f8 	.word	0x080186f8
 8011210:	08018110 	.word	0x08018110

08011214 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d106      	bne.n	8011230 <tcp_rexmit_rto_commit+0x1c>
 8011222:	4b0d      	ldr	r3, [pc, #52]	@ (8011258 <tcp_rexmit_rto_commit+0x44>)
 8011224:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011228:	490c      	ldr	r1, [pc, #48]	@ (801125c <tcp_rexmit_rto_commit+0x48>)
 801122a:	480d      	ldr	r0, [pc, #52]	@ (8011260 <tcp_rexmit_rto_commit+0x4c>)
 801122c:	f004 fc30 	bl	8015a90 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011236:	2bff      	cmp	r3, #255	@ 0xff
 8011238:	d007      	beq.n	801124a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011240:	3301      	adds	r3, #1
 8011242:	b2da      	uxtb	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f7ff fc7e 	bl	8010b4c <tcp_output>
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	080180bc 	.word	0x080180bc
 801125c:	0801871c 	.word	0x0801871c
 8011260:	08018110 	.word	0x08018110

08011264 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d106      	bne.n	8011280 <tcp_rexmit_rto+0x1c>
 8011272:	4b0a      	ldr	r3, [pc, #40]	@ (801129c <tcp_rexmit_rto+0x38>)
 8011274:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011278:	4909      	ldr	r1, [pc, #36]	@ (80112a0 <tcp_rexmit_rto+0x3c>)
 801127a:	480a      	ldr	r0, [pc, #40]	@ (80112a4 <tcp_rexmit_rto+0x40>)
 801127c:	f004 fc08 	bl	8015a90 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ff ff57 	bl	8011134 <tcp_rexmit_rto_prepare>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d102      	bne.n	8011292 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7ff ffc1 	bl	8011214 <tcp_rexmit_rto_commit>
  }
}
 8011292:	bf00      	nop
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	080180bc 	.word	0x080180bc
 80112a0:	08018740 	.word	0x08018740
 80112a4:	08018110 	.word	0x08018110

080112a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80112a8:	b590      	push	{r4, r7, lr}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d106      	bne.n	80112c4 <tcp_rexmit+0x1c>
 80112b6:	4b2f      	ldr	r3, [pc, #188]	@ (8011374 <tcp_rexmit+0xcc>)
 80112b8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80112bc:	492e      	ldr	r1, [pc, #184]	@ (8011378 <tcp_rexmit+0xd0>)
 80112be:	482f      	ldr	r0, [pc, #188]	@ (801137c <tcp_rexmit+0xd4>)
 80112c0:	f004 fbe6 	bl	8015a90 <iprintf>

  if (pcb->unacked == NULL) {
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80112cc:	f06f 0305 	mvn.w	r3, #5
 80112d0:	e04c      	b.n	801136c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80112d8:	68b8      	ldr	r0, [r7, #8]
 80112da:	f7ff fe2b 	bl	8010f34 <tcp_output_segment_busy>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80112e4:	f06f 0305 	mvn.w	r3, #5
 80112e8:	e040      	b.n	801136c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	336c      	adds	r3, #108	@ 0x6c
 80112f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80112f8:	e002      	b.n	8011300 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d011      	beq.n	801132c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	4618      	mov	r0, r3
 8011312:	f7f9 fc52 	bl	800abba <lwip_htonl>
 8011316:	4604      	mov	r4, r0
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	4618      	mov	r0, r3
 8011320:	f7f9 fc4b 	bl	800abba <lwip_htonl>
 8011324:	4603      	mov	r3, r0
 8011326:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011328:	2b00      	cmp	r3, #0
 801132a:	dbe6      	blt.n	80112fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d103      	bne.n	801134a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011350:	2bff      	cmp	r3, #255	@ 0xff
 8011352:	d007      	beq.n	8011364 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801135a:	3301      	adds	r3, #1
 801135c:	b2da      	uxtb	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2200      	movs	r2, #0
 8011368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	3714      	adds	r7, #20
 8011370:	46bd      	mov	sp, r7
 8011372:	bd90      	pop	{r4, r7, pc}
 8011374:	080180bc 	.word	0x080180bc
 8011378:	0801875c 	.word	0x0801875c
 801137c:	08018110 	.word	0x08018110

08011380 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d106      	bne.n	801139c <tcp_rexmit_fast+0x1c>
 801138e:	4b2a      	ldr	r3, [pc, #168]	@ (8011438 <tcp_rexmit_fast+0xb8>)
 8011390:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011394:	4929      	ldr	r1, [pc, #164]	@ (801143c <tcp_rexmit_fast+0xbc>)
 8011396:	482a      	ldr	r0, [pc, #168]	@ (8011440 <tcp_rexmit_fast+0xc0>)
 8011398:	f004 fb7a 	bl	8015a90 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d045      	beq.n	8011430 <tcp_rexmit_fast+0xb0>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	8b5b      	ldrh	r3, [r3, #26]
 80113a8:	f003 0304 	and.w	r3, r3, #4
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d13f      	bne.n	8011430 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7ff ff79 	bl	80112a8 <tcp_rexmit>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d139      	bne.n	8011430 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80113c8:	4293      	cmp	r3, r2
 80113ca:	bf28      	it	cs
 80113cc:	4613      	movcs	r3, r2
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	da00      	bge.n	80113d6 <tcp_rexmit_fast+0x56>
 80113d4:	3301      	adds	r3, #1
 80113d6:	105b      	asrs	r3, r3, #1
 80113d8:	b29a      	uxth	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80113e6:	461a      	mov	r2, r3
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113ec:	005b      	lsls	r3, r3, #1
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d206      	bcs.n	8011400 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801140a:	4619      	mov	r1, r3
 801140c:	0049      	lsls	r1, r1, #1
 801140e:	440b      	add	r3, r1
 8011410:	b29b      	uxth	r3, r3
 8011412:	4413      	add	r3, r2
 8011414:	b29a      	uxth	r2, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	8b5b      	ldrh	r3, [r3, #26]
 8011420:	f043 0304 	orr.w	r3, r3, #4
 8011424:	b29a      	uxth	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2200      	movs	r2, #0
 801142e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	080180bc 	.word	0x080180bc
 801143c:	08018774 	.word	0x08018774
 8011440:	08018110 	.word	0x08018110

08011444 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b086      	sub	sp, #24
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	607b      	str	r3, [r7, #4]
 801144e:	460b      	mov	r3, r1
 8011450:	817b      	strh	r3, [r7, #10]
 8011452:	4613      	mov	r3, r2
 8011454:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011456:	897a      	ldrh	r2, [r7, #10]
 8011458:	893b      	ldrh	r3, [r7, #8]
 801145a:	4413      	add	r3, r2
 801145c:	b29b      	uxth	r3, r3
 801145e:	3314      	adds	r3, #20
 8011460:	b29b      	uxth	r3, r3
 8011462:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011466:	4619      	mov	r1, r3
 8011468:	2022      	movs	r0, #34	@ 0x22
 801146a:	f7fa fc0b 	bl	800bc84 <pbuf_alloc>
 801146e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d04d      	beq.n	8011512 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011476:	897b      	ldrh	r3, [r7, #10]
 8011478:	3313      	adds	r3, #19
 801147a:	697a      	ldr	r2, [r7, #20]
 801147c:	8952      	ldrh	r2, [r2, #10]
 801147e:	4293      	cmp	r3, r2
 8011480:	db06      	blt.n	8011490 <tcp_output_alloc_header_common+0x4c>
 8011482:	4b26      	ldr	r3, [pc, #152]	@ (801151c <tcp_output_alloc_header_common+0xd8>)
 8011484:	f240 7223 	movw	r2, #1827	@ 0x723
 8011488:	4925      	ldr	r1, [pc, #148]	@ (8011520 <tcp_output_alloc_header_common+0xdc>)
 801148a:	4826      	ldr	r0, [pc, #152]	@ (8011524 <tcp_output_alloc_header_common+0xe0>)
 801148c:	f004 fb00 	bl	8015a90 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011496:	8c3b      	ldrh	r3, [r7, #32]
 8011498:	4618      	mov	r0, r3
 801149a:	f7f9 fb79 	bl	800ab90 <lwip_htons>
 801149e:	4603      	mov	r3, r0
 80114a0:	461a      	mov	r2, r3
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80114a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7f9 fb71 	bl	800ab90 <lwip_htons>
 80114ae:	4603      	mov	r3, r0
 80114b0:	461a      	mov	r2, r3
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	687a      	ldr	r2, [r7, #4]
 80114ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	f7f9 fb7c 	bl	800abba <lwip_htonl>
 80114c2:	4602      	mov	r2, r0
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80114c8:	897b      	ldrh	r3, [r7, #10]
 80114ca:	089b      	lsrs	r3, r3, #2
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	3305      	adds	r3, #5
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	031b      	lsls	r3, r3, #12
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80114da:	b29b      	uxth	r3, r3
 80114dc:	4313      	orrs	r3, r2
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7f9 fb55 	bl	800ab90 <lwip_htons>
 80114e6:	4603      	mov	r3, r0
 80114e8:	461a      	mov	r2, r3
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80114ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7f9 fb4d 	bl	800ab90 <lwip_htons>
 80114f6:	4603      	mov	r3, r0
 80114f8:	461a      	mov	r2, r3
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	2200      	movs	r2, #0
 8011502:	741a      	strb	r2, [r3, #16]
 8011504:	2200      	movs	r2, #0
 8011506:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	2200      	movs	r2, #0
 801150c:	749a      	strb	r2, [r3, #18]
 801150e:	2200      	movs	r2, #0
 8011510:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011512:	697b      	ldr	r3, [r7, #20]
}
 8011514:	4618      	mov	r0, r3
 8011516:	3718      	adds	r7, #24
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	080180bc 	.word	0x080180bc
 8011520:	08018794 	.word	0x08018794
 8011524:	08018110 	.word	0x08018110

08011528 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011528:	b5b0      	push	{r4, r5, r7, lr}
 801152a:	b08a      	sub	sp, #40	@ 0x28
 801152c:	af04      	add	r7, sp, #16
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	607b      	str	r3, [r7, #4]
 8011532:	460b      	mov	r3, r1
 8011534:	817b      	strh	r3, [r7, #10]
 8011536:	4613      	mov	r3, r2
 8011538:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d106      	bne.n	801154e <tcp_output_alloc_header+0x26>
 8011540:	4b15      	ldr	r3, [pc, #84]	@ (8011598 <tcp_output_alloc_header+0x70>)
 8011542:	f240 7242 	movw	r2, #1858	@ 0x742
 8011546:	4915      	ldr	r1, [pc, #84]	@ (801159c <tcp_output_alloc_header+0x74>)
 8011548:	4815      	ldr	r0, [pc, #84]	@ (80115a0 <tcp_output_alloc_header+0x78>)
 801154a:	f004 faa1 	bl	8015a90 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	8adb      	ldrh	r3, [r3, #22]
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	8b12      	ldrh	r2, [r2, #24]
 801155a:	68f9      	ldr	r1, [r7, #12]
 801155c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801155e:	893d      	ldrh	r5, [r7, #8]
 8011560:	897c      	ldrh	r4, [r7, #10]
 8011562:	9103      	str	r1, [sp, #12]
 8011564:	2110      	movs	r1, #16
 8011566:	9102      	str	r1, [sp, #8]
 8011568:	9201      	str	r2, [sp, #4]
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	462a      	mov	r2, r5
 8011570:	4621      	mov	r1, r4
 8011572:	f7ff ff67 	bl	8011444 <tcp_output_alloc_header_common>
 8011576:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d006      	beq.n	801158c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011582:	68fa      	ldr	r2, [r7, #12]
 8011584:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011586:	441a      	add	r2, r3
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801158c:	697b      	ldr	r3, [r7, #20]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3718      	adds	r7, #24
 8011592:	46bd      	mov	sp, r7
 8011594:	bdb0      	pop	{r4, r5, r7, pc}
 8011596:	bf00      	nop
 8011598:	080180bc 	.word	0x080180bc
 801159c:	080187c4 	.word	0x080187c4
 80115a0:	08018110 	.word	0x08018110

080115a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b088      	sub	sp, #32
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	60b9      	str	r1, [r7, #8]
 80115ae:	4611      	mov	r1, r2
 80115b0:	461a      	mov	r2, r3
 80115b2:	460b      	mov	r3, r1
 80115b4:	71fb      	strb	r3, [r7, #7]
 80115b6:	4613      	mov	r3, r2
 80115b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d106      	bne.n	80115d2 <tcp_output_fill_options+0x2e>
 80115c4:	4b12      	ldr	r3, [pc, #72]	@ (8011610 <tcp_output_fill_options+0x6c>)
 80115c6:	f240 7256 	movw	r2, #1878	@ 0x756
 80115ca:	4912      	ldr	r1, [pc, #72]	@ (8011614 <tcp_output_fill_options+0x70>)
 80115cc:	4812      	ldr	r0, [pc, #72]	@ (8011618 <tcp_output_fill_options+0x74>)
 80115ce:	f004 fa5f 	bl	8015a90 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	3314      	adds	r3, #20
 80115dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80115de:	8bfb      	ldrh	r3, [r7, #30]
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	461a      	mov	r2, r3
 80115e4:	79fb      	ldrb	r3, [r7, #7]
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	f003 0304 	and.w	r3, r3, #4
 80115ec:	4413      	add	r3, r2
 80115ee:	3314      	adds	r3, #20
 80115f0:	69ba      	ldr	r2, [r7, #24]
 80115f2:	4413      	add	r3, r2
 80115f4:	697a      	ldr	r2, [r7, #20]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d006      	beq.n	8011608 <tcp_output_fill_options+0x64>
 80115fa:	4b05      	ldr	r3, [pc, #20]	@ (8011610 <tcp_output_fill_options+0x6c>)
 80115fc:	f240 7275 	movw	r2, #1909	@ 0x775
 8011600:	4906      	ldr	r1, [pc, #24]	@ (801161c <tcp_output_fill_options+0x78>)
 8011602:	4805      	ldr	r0, [pc, #20]	@ (8011618 <tcp_output_fill_options+0x74>)
 8011604:	f004 fa44 	bl	8015a90 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011608:	bf00      	nop
 801160a:	3720      	adds	r7, #32
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	080180bc 	.word	0x080180bc
 8011614:	080187ec 	.word	0x080187ec
 8011618:	08018110 	.word	0x08018110
 801161c:	080186e4 	.word	0x080186e4

08011620 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b08a      	sub	sp, #40	@ 0x28
 8011624:	af04      	add	r7, sp, #16
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	607a      	str	r2, [r7, #4]
 801162c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d106      	bne.n	8011642 <tcp_output_control_segment+0x22>
 8011634:	4b1c      	ldr	r3, [pc, #112]	@ (80116a8 <tcp_output_control_segment+0x88>)
 8011636:	f240 7287 	movw	r2, #1927	@ 0x787
 801163a:	491c      	ldr	r1, [pc, #112]	@ (80116ac <tcp_output_control_segment+0x8c>)
 801163c:	481c      	ldr	r0, [pc, #112]	@ (80116b0 <tcp_output_control_segment+0x90>)
 801163e:	f004 fa27 	bl	8015a90 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011642:	683a      	ldr	r2, [r7, #0]
 8011644:	6879      	ldr	r1, [r7, #4]
 8011646:	68f8      	ldr	r0, [r7, #12]
 8011648:	f7fe ff42 	bl	80104d0 <tcp_route>
 801164c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d102      	bne.n	801165a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011654:	23fc      	movs	r3, #252	@ 0xfc
 8011656:	75fb      	strb	r3, [r7, #23]
 8011658:	e01c      	b.n	8011694 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d006      	beq.n	801166e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	7adb      	ldrb	r3, [r3, #11]
 8011664:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	7a9b      	ldrb	r3, [r3, #10]
 801166a:	757b      	strb	r3, [r7, #21]
 801166c:	e003      	b.n	8011676 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801166e:	23ff      	movs	r3, #255	@ 0xff
 8011670:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011672:	2300      	movs	r3, #0
 8011674:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011676:	7dba      	ldrb	r2, [r7, #22]
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	9302      	str	r3, [sp, #8]
 801167c:	2306      	movs	r3, #6
 801167e:	9301      	str	r3, [sp, #4]
 8011680:	7d7b      	ldrb	r3, [r7, #21]
 8011682:	9300      	str	r3, [sp, #0]
 8011684:	4613      	mov	r3, r2
 8011686:	683a      	ldr	r2, [r7, #0]
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	68b8      	ldr	r0, [r7, #8]
 801168c:	f002 fa60 	bl	8013b50 <ip4_output_if>
 8011690:	4603      	mov	r3, r0
 8011692:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011694:	68b8      	ldr	r0, [r7, #8]
 8011696:	f7fa fdd9 	bl	800c24c <pbuf_free>
  return err;
 801169a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3718      	adds	r7, #24
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	080180bc 	.word	0x080180bc
 80116ac:	08018814 	.word	0x08018814
 80116b0:	08018110 	.word	0x08018110

080116b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80116b4:	b590      	push	{r4, r7, lr}
 80116b6:	b08b      	sub	sp, #44	@ 0x2c
 80116b8:	af04      	add	r7, sp, #16
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
 80116c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d106      	bne.n	80116d6 <tcp_rst+0x22>
 80116c8:	4b1f      	ldr	r3, [pc, #124]	@ (8011748 <tcp_rst+0x94>)
 80116ca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80116ce:	491f      	ldr	r1, [pc, #124]	@ (801174c <tcp_rst+0x98>)
 80116d0:	481f      	ldr	r0, [pc, #124]	@ (8011750 <tcp_rst+0x9c>)
 80116d2:	f004 f9dd 	bl	8015a90 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80116d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d106      	bne.n	80116ea <tcp_rst+0x36>
 80116dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011748 <tcp_rst+0x94>)
 80116de:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80116e2:	491c      	ldr	r1, [pc, #112]	@ (8011754 <tcp_rst+0xa0>)
 80116e4:	481a      	ldr	r0, [pc, #104]	@ (8011750 <tcp_rst+0x9c>)
 80116e6:	f004 f9d3 	bl	8015a90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80116ea:	2300      	movs	r3, #0
 80116ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80116ee:	f246 0308 	movw	r3, #24584	@ 0x6008
 80116f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
 80116f6:	b29c      	uxth	r4, r3
 80116f8:	68b8      	ldr	r0, [r7, #8]
 80116fa:	f7f9 fa5e 	bl	800abba <lwip_htonl>
 80116fe:	4602      	mov	r2, r0
 8011700:	8abb      	ldrh	r3, [r7, #20]
 8011702:	9303      	str	r3, [sp, #12]
 8011704:	2314      	movs	r3, #20
 8011706:	9302      	str	r3, [sp, #8]
 8011708:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801170a:	9301      	str	r3, [sp, #4]
 801170c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801170e:	9300      	str	r3, [sp, #0]
 8011710:	4613      	mov	r3, r2
 8011712:	2200      	movs	r2, #0
 8011714:	4621      	mov	r1, r4
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff fe94 	bl	8011444 <tcp_output_alloc_header_common>
 801171c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00c      	beq.n	801173e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011724:	7dfb      	ldrb	r3, [r7, #23]
 8011726:	2200      	movs	r2, #0
 8011728:	6939      	ldr	r1, [r7, #16]
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f7ff ff3a 	bl	80115a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	6939      	ldr	r1, [r7, #16]
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f7ff ff72 	bl	8011620 <tcp_output_control_segment>
 801173c:	e000      	b.n	8011740 <tcp_rst+0x8c>
    return;
 801173e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011740:	371c      	adds	r7, #28
 8011742:	46bd      	mov	sp, r7
 8011744:	bd90      	pop	{r4, r7, pc}
 8011746:	bf00      	nop
 8011748:	080180bc 	.word	0x080180bc
 801174c:	08018840 	.word	0x08018840
 8011750:	08018110 	.word	0x08018110
 8011754:	0801885c 	.word	0x0801885c

08011758 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011758:	b590      	push	{r4, r7, lr}
 801175a:	b087      	sub	sp, #28
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011764:	2300      	movs	r3, #0
 8011766:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d106      	bne.n	801177c <tcp_send_empty_ack+0x24>
 801176e:	4b28      	ldr	r3, [pc, #160]	@ (8011810 <tcp_send_empty_ack+0xb8>)
 8011770:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011774:	4927      	ldr	r1, [pc, #156]	@ (8011814 <tcp_send_empty_ack+0xbc>)
 8011776:	4828      	ldr	r0, [pc, #160]	@ (8011818 <tcp_send_empty_ack+0xc0>)
 8011778:	f004 f98a 	bl	8015a90 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801177c:	7dfb      	ldrb	r3, [r7, #23]
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	b2db      	uxtb	r3, r3
 8011782:	f003 0304 	and.w	r3, r3, #4
 8011786:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011788:	7d7b      	ldrb	r3, [r7, #21]
 801178a:	b29c      	uxth	r4, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011790:	4618      	mov	r0, r3
 8011792:	f7f9 fa12 	bl	800abba <lwip_htonl>
 8011796:	4603      	mov	r3, r0
 8011798:	2200      	movs	r2, #0
 801179a:	4621      	mov	r1, r4
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7ff fec3 	bl	8011528 <tcp_output_alloc_header>
 80117a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d109      	bne.n	80117be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	8b5b      	ldrh	r3, [r3, #26]
 80117ae:	f043 0303 	orr.w	r3, r3, #3
 80117b2:	b29a      	uxth	r2, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80117b8:	f06f 0301 	mvn.w	r3, #1
 80117bc:	e023      	b.n	8011806 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80117be:	7dbb      	ldrb	r3, [r7, #22]
 80117c0:	7dfa      	ldrb	r2, [r7, #23]
 80117c2:	6939      	ldr	r1, [r7, #16]
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff feed 	bl	80115a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3304      	adds	r3, #4
 80117d0:	6939      	ldr	r1, [r7, #16]
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7ff ff24 	bl	8011620 <tcp_output_control_segment>
 80117d8:	4603      	mov	r3, r0
 80117da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80117dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d007      	beq.n	80117f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	8b5b      	ldrh	r3, [r3, #26]
 80117e8:	f043 0303 	orr.w	r3, r3, #3
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	835a      	strh	r2, [r3, #26]
 80117f2:	e006      	b.n	8011802 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	8b5b      	ldrh	r3, [r3, #26]
 80117f8:	f023 0303 	bic.w	r3, r3, #3
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011802:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011806:	4618      	mov	r0, r3
 8011808:	371c      	adds	r7, #28
 801180a:	46bd      	mov	sp, r7
 801180c:	bd90      	pop	{r4, r7, pc}
 801180e:	bf00      	nop
 8011810:	080180bc 	.word	0x080180bc
 8011814:	08018878 	.word	0x08018878
 8011818:	08018110 	.word	0x08018110

0801181c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801181c:	b590      	push	{r4, r7, lr}
 801181e:	b087      	sub	sp, #28
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011824:	2300      	movs	r3, #0
 8011826:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d106      	bne.n	801183c <tcp_keepalive+0x20>
 801182e:	4b18      	ldr	r3, [pc, #96]	@ (8011890 <tcp_keepalive+0x74>)
 8011830:	f640 0224 	movw	r2, #2084	@ 0x824
 8011834:	4917      	ldr	r1, [pc, #92]	@ (8011894 <tcp_keepalive+0x78>)
 8011836:	4818      	ldr	r0, [pc, #96]	@ (8011898 <tcp_keepalive+0x7c>)
 8011838:	f004 f92a 	bl	8015a90 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801183c:	7dfb      	ldrb	r3, [r7, #23]
 801183e:	b29c      	uxth	r4, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011844:	3b01      	subs	r3, #1
 8011846:	4618      	mov	r0, r3
 8011848:	f7f9 f9b7 	bl	800abba <lwip_htonl>
 801184c:	4603      	mov	r3, r0
 801184e:	2200      	movs	r2, #0
 8011850:	4621      	mov	r1, r4
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f7ff fe68 	bl	8011528 <tcp_output_alloc_header>
 8011858:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d102      	bne.n	8011866 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011860:	f04f 33ff 	mov.w	r3, #4294967295
 8011864:	e010      	b.n	8011888 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011866:	7dfb      	ldrb	r3, [r7, #23]
 8011868:	2200      	movs	r2, #0
 801186a:	6939      	ldr	r1, [r7, #16]
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f7ff fe99 	bl	80115a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	3304      	adds	r3, #4
 8011878:	6939      	ldr	r1, [r7, #16]
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7ff fed0 	bl	8011620 <tcp_output_control_segment>
 8011880:	4603      	mov	r3, r0
 8011882:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011888:	4618      	mov	r0, r3
 801188a:	371c      	adds	r7, #28
 801188c:	46bd      	mov	sp, r7
 801188e:	bd90      	pop	{r4, r7, pc}
 8011890:	080180bc 	.word	0x080180bc
 8011894:	08018898 	.word	0x08018898
 8011898:	08018110 	.word	0x08018110

0801189c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801189c:	b590      	push	{r4, r7, lr}
 801189e:	b08b      	sub	sp, #44	@ 0x2c
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118a4:	2300      	movs	r3, #0
 80118a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d106      	bne.n	80118be <tcp_zero_window_probe+0x22>
 80118b0:	4b4c      	ldr	r3, [pc, #304]	@ (80119e4 <tcp_zero_window_probe+0x148>)
 80118b2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80118b6:	494c      	ldr	r1, [pc, #304]	@ (80119e8 <tcp_zero_window_probe+0x14c>)
 80118b8:	484c      	ldr	r0, [pc, #304]	@ (80119ec <tcp_zero_window_probe+0x150>)
 80118ba:	f004 f8e9 	bl	8015a90 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80118c4:	6a3b      	ldr	r3, [r7, #32]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d101      	bne.n	80118ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80118ca:	2300      	movs	r3, #0
 80118cc:	e086      	b.n	80119dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80118d4:	2bff      	cmp	r3, #255	@ 0xff
 80118d6:	d007      	beq.n	80118e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80118de:	3301      	adds	r3, #1
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80118e8:	6a3b      	ldr	r3, [r7, #32]
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	899b      	ldrh	r3, [r3, #12]
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7f9 f94d 	bl	800ab90 <lwip_htons>
 80118f6:	4603      	mov	r3, r0
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	f003 0301 	and.w	r3, r3, #1
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d005      	beq.n	801190e <tcp_zero_window_probe+0x72>
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	891b      	ldrh	r3, [r3, #8]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d101      	bne.n	801190e <tcp_zero_window_probe+0x72>
 801190a:	2301      	movs	r3, #1
 801190c:	e000      	b.n	8011910 <tcp_zero_window_probe+0x74>
 801190e:	2300      	movs	r3, #0
 8011910:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011912:	7ffb      	ldrb	r3, [r7, #31]
 8011914:	2b00      	cmp	r3, #0
 8011916:	bf0c      	ite	eq
 8011918:	2301      	moveq	r3, #1
 801191a:	2300      	movne	r3, #0
 801191c:	b2db      	uxtb	r3, r3
 801191e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011924:	b299      	uxth	r1, r3
 8011926:	6a3b      	ldr	r3, [r7, #32]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	8bba      	ldrh	r2, [r7, #28]
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fdfa 	bl	8011528 <tcp_output_alloc_header>
 8011934:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011936:	69bb      	ldr	r3, [r7, #24]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d102      	bne.n	8011942 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801193c:	f04f 33ff 	mov.w	r3, #4294967295
 8011940:	e04c      	b.n	80119dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011948:	7ffb      	ldrb	r3, [r7, #31]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d011      	beq.n	8011972 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	899b      	ldrh	r3, [r3, #12]
 8011952:	b29b      	uxth	r3, r3
 8011954:	b21b      	sxth	r3, r3
 8011956:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801195a:	b21c      	sxth	r4, r3
 801195c:	2011      	movs	r0, #17
 801195e:	f7f9 f917 	bl	800ab90 <lwip_htons>
 8011962:	4603      	mov	r3, r0
 8011964:	b21b      	sxth	r3, r3
 8011966:	4323      	orrs	r3, r4
 8011968:	b21b      	sxth	r3, r3
 801196a:	b29a      	uxth	r2, r3
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	819a      	strh	r2, [r3, #12]
 8011970:	e010      	b.n	8011994 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	3314      	adds	r3, #20
 8011978:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801197a:	6a3b      	ldr	r3, [r7, #32]
 801197c:	6858      	ldr	r0, [r3, #4]
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	891a      	ldrh	r2, [r3, #8]
 8011984:	6a3b      	ldr	r3, [r7, #32]
 8011986:	891b      	ldrh	r3, [r3, #8]
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	b29b      	uxth	r3, r3
 801198c:	2201      	movs	r2, #1
 801198e:	6939      	ldr	r1, [r7, #16]
 8011990:	f7fa fe56 	bl	800c640 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011994:	6a3b      	ldr	r3, [r7, #32]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	685b      	ldr	r3, [r3, #4]
 801199a:	4618      	mov	r0, r3
 801199c:	f7f9 f90d 	bl	800abba <lwip_htonl>
 80119a0:	4603      	mov	r3, r0
 80119a2:	3301      	adds	r3, #1
 80119a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	1ad3      	subs	r3, r2, r3
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	da02      	bge.n	80119b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119bc:	2200      	movs	r2, #0
 80119be:	69b9      	ldr	r1, [r7, #24]
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7ff fdef 	bl	80115a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	3304      	adds	r3, #4
 80119cc:	69b9      	ldr	r1, [r7, #24]
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7ff fe26 	bl	8011620 <tcp_output_control_segment>
 80119d4:	4603      	mov	r3, r0
 80119d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80119d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80119dc:	4618      	mov	r0, r3
 80119de:	372c      	adds	r7, #44	@ 0x2c
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd90      	pop	{r4, r7, pc}
 80119e4:	080180bc 	.word	0x080180bc
 80119e8:	080188b4 	.word	0x080188b4
 80119ec:	08018110 	.word	0x08018110

080119f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80119f8:	f7fa ff10 	bl	800c81c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80119fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011a28 <tcpip_tcp_timer+0x38>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d103      	bne.n	8011a0c <tcpip_tcp_timer+0x1c>
 8011a04:	4b09      	ldr	r3, [pc, #36]	@ (8011a2c <tcpip_tcp_timer+0x3c>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d005      	beq.n	8011a18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	4908      	ldr	r1, [pc, #32]	@ (8011a30 <tcpip_tcp_timer+0x40>)
 8011a10:	20fa      	movs	r0, #250	@ 0xfa
 8011a12:	f000 f8f3 	bl	8011bfc <sys_timeout>
 8011a16:	e003      	b.n	8011a20 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011a18:	4b06      	ldr	r3, [pc, #24]	@ (8011a34 <tcpip_tcp_timer+0x44>)
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	601a      	str	r2, [r3, #0]
  }
}
 8011a1e:	bf00      	nop
 8011a20:	bf00      	nop
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	20008c0c 	.word	0x20008c0c
 8011a2c:	20008c10 	.word	0x20008c10
 8011a30:	080119f1 	.word	0x080119f1
 8011a34:	20008c58 	.word	0x20008c58

08011a38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a68 <tcp_timer_needed+0x30>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10f      	bne.n	8011a64 <tcp_timer_needed+0x2c>
 8011a44:	4b09      	ldr	r3, [pc, #36]	@ (8011a6c <tcp_timer_needed+0x34>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d103      	bne.n	8011a54 <tcp_timer_needed+0x1c>
 8011a4c:	4b08      	ldr	r3, [pc, #32]	@ (8011a70 <tcp_timer_needed+0x38>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d007      	beq.n	8011a64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011a54:	4b04      	ldr	r3, [pc, #16]	@ (8011a68 <tcp_timer_needed+0x30>)
 8011a56:	2201      	movs	r2, #1
 8011a58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4905      	ldr	r1, [pc, #20]	@ (8011a74 <tcp_timer_needed+0x3c>)
 8011a5e:	20fa      	movs	r0, #250	@ 0xfa
 8011a60:	f000 f8cc 	bl	8011bfc <sys_timeout>
  }
}
 8011a64:	bf00      	nop
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	20008c58 	.word	0x20008c58
 8011a6c:	20008c0c 	.word	0x20008c0c
 8011a70:	20008c10 	.word	0x20008c10
 8011a74:	080119f1 	.word	0x080119f1

08011a78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b086      	sub	sp, #24
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011a84:	2006      	movs	r0, #6
 8011a86:	f7f9 fcfb 	bl	800b480 <memp_malloc>
 8011a8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d109      	bne.n	8011aa6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d151      	bne.n	8011b3c <sys_timeout_abs+0xc4>
 8011a98:	4b2a      	ldr	r3, [pc, #168]	@ (8011b44 <sys_timeout_abs+0xcc>)
 8011a9a:	22be      	movs	r2, #190	@ 0xbe
 8011a9c:	492a      	ldr	r1, [pc, #168]	@ (8011b48 <sys_timeout_abs+0xd0>)
 8011a9e:	482b      	ldr	r0, [pc, #172]	@ (8011b4c <sys_timeout_abs+0xd4>)
 8011aa0:	f003 fff6 	bl	8015a90 <iprintf>
    return;
 8011aa4:	e04a      	b.n	8011b3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	68ba      	ldr	r2, [r7, #8]
 8011ab0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	68fa      	ldr	r2, [r7, #12]
 8011abc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011abe:	4b24      	ldr	r3, [pc, #144]	@ (8011b50 <sys_timeout_abs+0xd8>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d103      	bne.n	8011ace <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011ac6:	4a22      	ldr	r2, [pc, #136]	@ (8011b50 <sys_timeout_abs+0xd8>)
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	6013      	str	r3, [r2, #0]
    return;
 8011acc:	e037      	b.n	8011b3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	685a      	ldr	r2, [r3, #4]
 8011ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8011b50 <sys_timeout_abs+0xd8>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	1ad3      	subs	r3, r2, r3
 8011ada:	0fdb      	lsrs	r3, r3, #31
 8011adc:	f003 0301 	and.w	r3, r3, #1
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d007      	beq.n	8011af6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8011b50 <sys_timeout_abs+0xd8>)
 8011ae8:	681a      	ldr	r2, [r3, #0]
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011aee:	4a18      	ldr	r2, [pc, #96]	@ (8011b50 <sys_timeout_abs+0xd8>)
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	6013      	str	r3, [r2, #0]
 8011af4:	e023      	b.n	8011b3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011af6:	4b16      	ldr	r3, [pc, #88]	@ (8011b50 <sys_timeout_abs+0xd8>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	617b      	str	r3, [r7, #20]
 8011afc:	e01a      	b.n	8011b34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d00b      	beq.n	8011b1e <sys_timeout_abs+0xa6>
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	685a      	ldr	r2, [r3, #4]
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	1ad3      	subs	r3, r2, r3
 8011b12:	0fdb      	lsrs	r3, r3, #31
 8011b14:	f003 0301 	and.w	r3, r3, #1
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d007      	beq.n	8011b2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	693a      	ldr	r2, [r7, #16]
 8011b2a:	601a      	str	r2, [r3, #0]
        break;
 8011b2c:	e007      	b.n	8011b3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	617b      	str	r3, [r7, #20]
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d1e1      	bne.n	8011afe <sys_timeout_abs+0x86>
 8011b3a:	e000      	b.n	8011b3e <sys_timeout_abs+0xc6>
    return;
 8011b3c:	bf00      	nop
      }
    }
  }
}
 8011b3e:	3718      	adds	r7, #24
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	080188d8 	.word	0x080188d8
 8011b48:	0801890c 	.word	0x0801890c
 8011b4c:	0801894c 	.word	0x0801894c
 8011b50:	20008c50 	.word	0x20008c50

08011b54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	4798      	blx	r3

  now = sys_now();
 8011b66:	f7f8 fdf7 	bl	800a758 <sys_now>
 8011b6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	4b0f      	ldr	r3, [pc, #60]	@ (8011bb0 <lwip_cyclic_timer+0x5c>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4413      	add	r3, r2
 8011b76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	0fdb      	lsrs	r3, r3, #31
 8011b80:	f003 0301 	and.w	r3, r3, #1
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d009      	beq.n	8011b9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	4413      	add	r3, r2
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	4907      	ldr	r1, [pc, #28]	@ (8011bb4 <lwip_cyclic_timer+0x60>)
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff ff6e 	bl	8011a78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011b9c:	e004      	b.n	8011ba8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	4904      	ldr	r1, [pc, #16]	@ (8011bb4 <lwip_cyclic_timer+0x60>)
 8011ba2:	68f8      	ldr	r0, [r7, #12]
 8011ba4:	f7ff ff68 	bl	8011a78 <sys_timeout_abs>
}
 8011ba8:	bf00      	nop
 8011baa:	3718      	adds	r7, #24
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	20008c54 	.word	0x20008c54
 8011bb4:	08011b55 	.word	0x08011b55

08011bb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	607b      	str	r3, [r7, #4]
 8011bc2:	e00e      	b.n	8011be2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8011bf4 <sys_timeouts_init+0x3c>)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	00db      	lsls	r3, r3, #3
 8011bd0:	4a08      	ldr	r2, [pc, #32]	@ (8011bf4 <sys_timeouts_init+0x3c>)
 8011bd2:	4413      	add	r3, r2
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	4908      	ldr	r1, [pc, #32]	@ (8011bf8 <sys_timeouts_init+0x40>)
 8011bd8:	f000 f810 	bl	8011bfc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	3301      	adds	r3, #1
 8011be0:	607b      	str	r3, [r7, #4]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d9ed      	bls.n	8011bc4 <sys_timeouts_init+0xc>
  }
}
 8011be8:	bf00      	nop
 8011bea:	bf00      	nop
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	08019be0 	.word	0x08019be0
 8011bf8:	08011b55 	.word	0x08011b55

08011bfc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b086      	sub	sp, #24
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	60f8      	str	r0, [r7, #12]
 8011c04:	60b9      	str	r1, [r7, #8]
 8011c06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c0e:	d306      	bcc.n	8011c1e <sys_timeout+0x22>
 8011c10:	4b0a      	ldr	r3, [pc, #40]	@ (8011c3c <sys_timeout+0x40>)
 8011c12:	f240 1229 	movw	r2, #297	@ 0x129
 8011c16:	490a      	ldr	r1, [pc, #40]	@ (8011c40 <sys_timeout+0x44>)
 8011c18:	480a      	ldr	r0, [pc, #40]	@ (8011c44 <sys_timeout+0x48>)
 8011c1a:	f003 ff39 	bl	8015a90 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011c1e:	f7f8 fd9b 	bl	800a758 <sys_now>
 8011c22:	4602      	mov	r2, r0
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	4413      	add	r3, r2
 8011c28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	68b9      	ldr	r1, [r7, #8]
 8011c2e:	6978      	ldr	r0, [r7, #20]
 8011c30:	f7ff ff22 	bl	8011a78 <sys_timeout_abs>
#endif
}
 8011c34:	bf00      	nop
 8011c36:	3718      	adds	r7, #24
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	080188d8 	.word	0x080188d8
 8011c40:	08018974 	.word	0x08018974
 8011c44:	0801894c 	.word	0x0801894c

08011c48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011c4e:	f7f8 fd83 	bl	800a758 <sys_now>
 8011c52:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011c54:	4b1a      	ldr	r3, [pc, #104]	@ (8011cc0 <sys_check_timeouts+0x78>)
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <sys_check_timeouts+0x1a>
 8011c5e:	f7f9 ffbb 	bl	800bbd8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011c62:	4b18      	ldr	r3, [pc, #96]	@ (8011cc4 <sys_check_timeouts+0x7c>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d022      	beq.n	8011cb4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	1ad3      	subs	r3, r2, r3
 8011c76:	0fdb      	lsrs	r3, r3, #31
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d11a      	bne.n	8011cb8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4a0f      	ldr	r2, [pc, #60]	@ (8011cc4 <sys_check_timeouts+0x7c>)
 8011c88:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8011cc8 <sys_check_timeouts+0x80>)
 8011c9c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011c9e:	68b9      	ldr	r1, [r7, #8]
 8011ca0:	2006      	movs	r0, #6
 8011ca2:	f7f9 fc5d 	bl	800b560 <memp_free>
    if (handler != NULL) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d0d3      	beq.n	8011c54 <sys_check_timeouts+0xc>
      handler(arg);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6838      	ldr	r0, [r7, #0]
 8011cb0:	4798      	blx	r3
  do {
 8011cb2:	e7cf      	b.n	8011c54 <sys_check_timeouts+0xc>
      return;
 8011cb4:	bf00      	nop
 8011cb6:	e000      	b.n	8011cba <sys_check_timeouts+0x72>
      return;
 8011cb8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011cba:	3710      	adds	r7, #16
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	20008bfd 	.word	0x20008bfd
 8011cc4:	20008c50 	.word	0x20008c50
 8011cc8:	20008c54 	.word	0x20008c54

08011ccc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011cd0:	f003 fdde 	bl	8015890 <rand>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	4b01      	ldr	r3, [pc, #4]	@ (8011cec <udp_init+0x20>)
 8011ce6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011ce8:	bf00      	nop
 8011cea:	bd80      	pop	{r7, pc}
 8011cec:	20000028 	.word	0x20000028

08011cf0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011cfa:	4b17      	ldr	r3, [pc, #92]	@ (8011d58 <udp_new_port+0x68>)
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	1c5a      	adds	r2, r3, #1
 8011d00:	b291      	uxth	r1, r2
 8011d02:	4a15      	ldr	r2, [pc, #84]	@ (8011d58 <udp_new_port+0x68>)
 8011d04:	8011      	strh	r1, [r2, #0]
 8011d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d103      	bne.n	8011d16 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011d0e:	4b12      	ldr	r3, [pc, #72]	@ (8011d58 <udp_new_port+0x68>)
 8011d10:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011d14:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d16:	4b11      	ldr	r3, [pc, #68]	@ (8011d5c <udp_new_port+0x6c>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	603b      	str	r3, [r7, #0]
 8011d1c:	e011      	b.n	8011d42 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	8a5a      	ldrh	r2, [r3, #18]
 8011d22:	4b0d      	ldr	r3, [pc, #52]	@ (8011d58 <udp_new_port+0x68>)
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d108      	bne.n	8011d3c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011d2a:	88fb      	ldrh	r3, [r7, #6]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	80fb      	strh	r3, [r7, #6]
 8011d30:	88fb      	ldrh	r3, [r7, #6]
 8011d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011d36:	d3e0      	bcc.n	8011cfa <udp_new_port+0xa>
        return 0;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	e007      	b.n	8011d4c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	68db      	ldr	r3, [r3, #12]
 8011d40:	603b      	str	r3, [r7, #0]
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d1ea      	bne.n	8011d1e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011d48:	4b03      	ldr	r3, [pc, #12]	@ (8011d58 <udp_new_port+0x68>)
 8011d4a:	881b      	ldrh	r3, [r3, #0]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr
 8011d58:	20000028 	.word	0x20000028
 8011d5c:	20008c5c 	.word	0x20008c5c

08011d60 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	4613      	mov	r3, r2
 8011d6c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d105      	bne.n	8011d80 <udp_input_local_match+0x20>
 8011d74:	4b27      	ldr	r3, [pc, #156]	@ (8011e14 <udp_input_local_match+0xb4>)
 8011d76:	2287      	movs	r2, #135	@ 0x87
 8011d78:	4927      	ldr	r1, [pc, #156]	@ (8011e18 <udp_input_local_match+0xb8>)
 8011d7a:	4828      	ldr	r0, [pc, #160]	@ (8011e1c <udp_input_local_match+0xbc>)
 8011d7c:	f003 fe88 	bl	8015a90 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d105      	bne.n	8011d92 <udp_input_local_match+0x32>
 8011d86:	4b23      	ldr	r3, [pc, #140]	@ (8011e14 <udp_input_local_match+0xb4>)
 8011d88:	2288      	movs	r2, #136	@ 0x88
 8011d8a:	4925      	ldr	r1, [pc, #148]	@ (8011e20 <udp_input_local_match+0xc0>)
 8011d8c:	4823      	ldr	r0, [pc, #140]	@ (8011e1c <udp_input_local_match+0xbc>)
 8011d8e:	f003 fe7f 	bl	8015a90 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	7a1b      	ldrb	r3, [r3, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00b      	beq.n	8011db2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	7a1a      	ldrb	r2, [r3, #8]
 8011d9e:	4b21      	ldr	r3, [pc, #132]	@ (8011e24 <udp_input_local_match+0xc4>)
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011da6:	3301      	adds	r3, #1
 8011da8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d001      	beq.n	8011db2 <udp_input_local_match+0x52>
    return 0;
 8011dae:	2300      	movs	r3, #0
 8011db0:	e02b      	b.n	8011e0a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011db2:	79fb      	ldrb	r3, [r7, #7]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d018      	beq.n	8011dea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d013      	beq.n	8011de6 <udp_input_local_match+0x86>
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d00f      	beq.n	8011de6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011dc6:	4b17      	ldr	r3, [pc, #92]	@ (8011e24 <udp_input_local_match+0xc4>)
 8011dc8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dce:	d00a      	beq.n	8011de6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	4b13      	ldr	r3, [pc, #76]	@ (8011e24 <udp_input_local_match+0xc4>)
 8011dd6:	695b      	ldr	r3, [r3, #20]
 8011dd8:	405a      	eors	r2, r3
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	3308      	adds	r3, #8
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d110      	bne.n	8011e08 <udp_input_local_match+0xa8>
          return 1;
 8011de6:	2301      	movs	r3, #1
 8011de8:	e00f      	b.n	8011e0a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d009      	beq.n	8011e04 <udp_input_local_match+0xa4>
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d005      	beq.n	8011e04 <udp_input_local_match+0xa4>
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	4b09      	ldr	r3, [pc, #36]	@ (8011e24 <udp_input_local_match+0xc4>)
 8011dfe:	695b      	ldr	r3, [r3, #20]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d101      	bne.n	8011e08 <udp_input_local_match+0xa8>
        return 1;
 8011e04:	2301      	movs	r3, #1
 8011e06:	e000      	b.n	8011e0a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011e08:	2300      	movs	r3, #0
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	080189c0 	.word	0x080189c0
 8011e18:	080189f0 	.word	0x080189f0
 8011e1c:	08018a14 	.word	0x08018a14
 8011e20:	08018a3c 	.word	0x08018a3c
 8011e24:	20005690 	.word	0x20005690

08011e28 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011e28:	b590      	push	{r4, r7, lr}
 8011e2a:	b08d      	sub	sp, #52	@ 0x34
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011e32:	2300      	movs	r3, #0
 8011e34:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d105      	bne.n	8011e48 <udp_input+0x20>
 8011e3c:	4b7c      	ldr	r3, [pc, #496]	@ (8012030 <udp_input+0x208>)
 8011e3e:	22cf      	movs	r2, #207	@ 0xcf
 8011e40:	497c      	ldr	r1, [pc, #496]	@ (8012034 <udp_input+0x20c>)
 8011e42:	487d      	ldr	r0, [pc, #500]	@ (8012038 <udp_input+0x210>)
 8011e44:	f003 fe24 	bl	8015a90 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d105      	bne.n	8011e5a <udp_input+0x32>
 8011e4e:	4b78      	ldr	r3, [pc, #480]	@ (8012030 <udp_input+0x208>)
 8011e50:	22d0      	movs	r2, #208	@ 0xd0
 8011e52:	497a      	ldr	r1, [pc, #488]	@ (801203c <udp_input+0x214>)
 8011e54:	4878      	ldr	r0, [pc, #480]	@ (8012038 <udp_input+0x210>)
 8011e56:	f003 fe1b 	bl	8015a90 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	895b      	ldrh	r3, [r3, #10]
 8011e5e:	2b07      	cmp	r3, #7
 8011e60:	d803      	bhi.n	8011e6a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7fa f9f2 	bl	800c24c <pbuf_free>
    goto end;
 8011e68:	e0de      	b.n	8012028 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011e70:	4b73      	ldr	r3, [pc, #460]	@ (8012040 <udp_input+0x218>)
 8011e72:	695b      	ldr	r3, [r3, #20]
 8011e74:	4a72      	ldr	r2, [pc, #456]	@ (8012040 <udp_input+0x218>)
 8011e76:	6812      	ldr	r2, [r2, #0]
 8011e78:	4611      	mov	r1, r2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f001 ff40 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 8011e80:	4603      	mov	r3, r0
 8011e82:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	881b      	ldrh	r3, [r3, #0]
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7f8 fe80 	bl	800ab90 <lwip_htons>
 8011e90:	4603      	mov	r3, r0
 8011e92:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	885b      	ldrh	r3, [r3, #2]
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7f8 fe78 	bl	800ab90 <lwip_htons>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011eac:	2300      	movs	r3, #0
 8011eae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011eb0:	4b64      	ldr	r3, [pc, #400]	@ (8012044 <udp_input+0x21c>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011eb6:	e054      	b.n	8011f62 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eba:	8a5b      	ldrh	r3, [r3, #18]
 8011ebc:	89fa      	ldrh	r2, [r7, #14]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d14a      	bne.n	8011f58 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011ec2:	7cfb      	ldrb	r3, [r7, #19]
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	6839      	ldr	r1, [r7, #0]
 8011ec8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011eca:	f7ff ff49 	bl	8011d60 <udp_input_local_match>
 8011ece:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d041      	beq.n	8011f58 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed6:	7c1b      	ldrb	r3, [r3, #16]
 8011ed8:	f003 0304 	and.w	r3, r3, #4
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d11d      	bne.n	8011f1c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d102      	bne.n	8011eec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee8:	61fb      	str	r3, [r7, #28]
 8011eea:	e017      	b.n	8011f1c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011eec:	7cfb      	ldrb	r3, [r7, #19]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d014      	beq.n	8011f1c <udp_input+0xf4>
 8011ef2:	4b53      	ldr	r3, [pc, #332]	@ (8012040 <udp_input+0x218>)
 8011ef4:	695b      	ldr	r3, [r3, #20]
 8011ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011efa:	d10f      	bne.n	8011f1c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	3304      	adds	r3, #4
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d008      	beq.n	8011f1c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	3304      	adds	r3, #4
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d101      	bne.n	8011f1c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f1a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f1e:	8a9b      	ldrh	r3, [r3, #20]
 8011f20:	8a3a      	ldrh	r2, [r7, #16]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d118      	bne.n	8011f58 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f28:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d005      	beq.n	8011f3a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f30:	685a      	ldr	r2, [r3, #4]
 8011f32:	4b43      	ldr	r3, [pc, #268]	@ (8012040 <udp_input+0x218>)
 8011f34:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d10e      	bne.n	8011f58 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011f3a:	6a3b      	ldr	r3, [r7, #32]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d014      	beq.n	8011f6a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f42:	68da      	ldr	r2, [r3, #12]
 8011f44:	6a3b      	ldr	r3, [r7, #32]
 8011f46:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011f48:	4b3e      	ldr	r3, [pc, #248]	@ (8012044 <udp_input+0x21c>)
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f4e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011f50:	4a3c      	ldr	r2, [pc, #240]	@ (8012044 <udp_input+0x21c>)
 8011f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f54:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011f56:	e008      	b.n	8011f6a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f5a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1a7      	bne.n	8011eb8 <udp_input+0x90>
 8011f68:	e000      	b.n	8011f6c <udp_input+0x144>
        break;
 8011f6a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d101      	bne.n	8011f76 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d002      	beq.n	8011f82 <udp_input+0x15a>
    for_us = 1;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	76fb      	strb	r3, [r7, #27]
 8011f80:	e00a      	b.n	8011f98 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	3304      	adds	r3, #4
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	4b2d      	ldr	r3, [pc, #180]	@ (8012040 <udp_input+0x218>)
 8011f8a:	695b      	ldr	r3, [r3, #20]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	bf0c      	ite	eq
 8011f90:	2301      	moveq	r3, #1
 8011f92:	2300      	movne	r3, #0
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011f98:	7efb      	ldrb	r3, [r7, #27]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d041      	beq.n	8012022 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011f9e:	2108      	movs	r1, #8
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f7fa f8cd 	bl	800c140 <pbuf_remove_header>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d00a      	beq.n	8011fc2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011fac:	4b20      	ldr	r3, [pc, #128]	@ (8012030 <udp_input+0x208>)
 8011fae:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011fb2:	4925      	ldr	r1, [pc, #148]	@ (8012048 <udp_input+0x220>)
 8011fb4:	4820      	ldr	r0, [pc, #128]	@ (8012038 <udp_input+0x210>)
 8011fb6:	f003 fd6b 	bl	8015a90 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7fa f946 	bl	800c24c <pbuf_free>
      goto end;
 8011fc0:	e032      	b.n	8012028 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d012      	beq.n	8011fee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fca:	699b      	ldr	r3, [r3, #24]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d00a      	beq.n	8011fe6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fd2:	699c      	ldr	r4, [r3, #24]
 8011fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fd6:	69d8      	ldr	r0, [r3, #28]
 8011fd8:	8a3b      	ldrh	r3, [r7, #16]
 8011fda:	9300      	str	r3, [sp, #0]
 8011fdc:	4b1b      	ldr	r3, [pc, #108]	@ (801204c <udp_input+0x224>)
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011fe2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011fe4:	e021      	b.n	801202a <udp_input+0x202>
        pbuf_free(p);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f7fa f930 	bl	800c24c <pbuf_free>
        goto end;
 8011fec:	e01c      	b.n	8012028 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011fee:	7cfb      	ldrb	r3, [r7, #19]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d112      	bne.n	801201a <udp_input+0x1f2>
 8011ff4:	4b12      	ldr	r3, [pc, #72]	@ (8012040 <udp_input+0x218>)
 8011ff6:	695b      	ldr	r3, [r3, #20]
 8011ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011ffc:	2be0      	cmp	r3, #224	@ 0xe0
 8011ffe:	d00c      	beq.n	801201a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012000:	4b0f      	ldr	r3, [pc, #60]	@ (8012040 <udp_input+0x218>)
 8012002:	899b      	ldrh	r3, [r3, #12]
 8012004:	3308      	adds	r3, #8
 8012006:	b29b      	uxth	r3, r3
 8012008:	b21b      	sxth	r3, r3
 801200a:	4619      	mov	r1, r3
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7fa f90a 	bl	800c226 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012012:	2103      	movs	r1, #3
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f001 fb53 	bl	80136c0 <icmp_dest_unreach>
      pbuf_free(p);
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f7fa f916 	bl	800c24c <pbuf_free>
  return;
 8012020:	e003      	b.n	801202a <udp_input+0x202>
    pbuf_free(p);
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7fa f912 	bl	800c24c <pbuf_free>
  return;
 8012028:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801202a:	372c      	adds	r7, #44	@ 0x2c
 801202c:	46bd      	mov	sp, r7
 801202e:	bd90      	pop	{r4, r7, pc}
 8012030:	080189c0 	.word	0x080189c0
 8012034:	08018a64 	.word	0x08018a64
 8012038:	08018a14 	.word	0x08018a14
 801203c:	08018a7c 	.word	0x08018a7c
 8012040:	20005690 	.word	0x20005690
 8012044:	20008c5c 	.word	0x20008c5c
 8012048:	08018a98 	.word	0x08018a98
 801204c:	200056a0 	.word	0x200056a0

08012050 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b088      	sub	sp, #32
 8012054:	af02      	add	r7, sp, #8
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
 801205c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d109      	bne.n	8012078 <udp_sendto+0x28>
 8012064:	4b23      	ldr	r3, [pc, #140]	@ (80120f4 <udp_sendto+0xa4>)
 8012066:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801206a:	4923      	ldr	r1, [pc, #140]	@ (80120f8 <udp_sendto+0xa8>)
 801206c:	4823      	ldr	r0, [pc, #140]	@ (80120fc <udp_sendto+0xac>)
 801206e:	f003 fd0f 	bl	8015a90 <iprintf>
 8012072:	f06f 030f 	mvn.w	r3, #15
 8012076:	e038      	b.n	80120ea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d109      	bne.n	8012092 <udp_sendto+0x42>
 801207e:	4b1d      	ldr	r3, [pc, #116]	@ (80120f4 <udp_sendto+0xa4>)
 8012080:	f240 2219 	movw	r2, #537	@ 0x219
 8012084:	491e      	ldr	r1, [pc, #120]	@ (8012100 <udp_sendto+0xb0>)
 8012086:	481d      	ldr	r0, [pc, #116]	@ (80120fc <udp_sendto+0xac>)
 8012088:	f003 fd02 	bl	8015a90 <iprintf>
 801208c:	f06f 030f 	mvn.w	r3, #15
 8012090:	e02b      	b.n	80120ea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d109      	bne.n	80120ac <udp_sendto+0x5c>
 8012098:	4b16      	ldr	r3, [pc, #88]	@ (80120f4 <udp_sendto+0xa4>)
 801209a:	f240 221a 	movw	r2, #538	@ 0x21a
 801209e:	4919      	ldr	r1, [pc, #100]	@ (8012104 <udp_sendto+0xb4>)
 80120a0:	4816      	ldr	r0, [pc, #88]	@ (80120fc <udp_sendto+0xac>)
 80120a2:	f003 fcf5 	bl	8015a90 <iprintf>
 80120a6:	f06f 030f 	mvn.w	r3, #15
 80120aa:	e01e      	b.n	80120ea <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	7a1b      	ldrb	r3, [r3, #8]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d006      	beq.n	80120c2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	7a1b      	ldrb	r3, [r3, #8]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7f9 fd67 	bl	800bb8c <netif_get_by_index>
 80120be:	6178      	str	r0, [r7, #20]
 80120c0:	e003      	b.n	80120ca <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f001 fb86 	bl	80137d4 <ip4_route>
 80120c8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d102      	bne.n	80120d6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80120d0:	f06f 0303 	mvn.w	r3, #3
 80120d4:	e009      	b.n	80120ea <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80120d6:	887a      	ldrh	r2, [r7, #2]
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	9300      	str	r3, [sp, #0]
 80120dc:	4613      	mov	r3, r2
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	68b9      	ldr	r1, [r7, #8]
 80120e2:	68f8      	ldr	r0, [r7, #12]
 80120e4:	f000 f810 	bl	8012108 <udp_sendto_if>
 80120e8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	080189c0 	.word	0x080189c0
 80120f8:	08018ae4 	.word	0x08018ae4
 80120fc:	08018a14 	.word	0x08018a14
 8012100:	08018afc 	.word	0x08018afc
 8012104:	08018b18 	.word	0x08018b18

08012108 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b088      	sub	sp, #32
 801210c:	af02      	add	r7, sp, #8
 801210e:	60f8      	str	r0, [r7, #12]
 8012110:	60b9      	str	r1, [r7, #8]
 8012112:	607a      	str	r2, [r7, #4]
 8012114:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d109      	bne.n	8012130 <udp_sendto_if+0x28>
 801211c:	4b2e      	ldr	r3, [pc, #184]	@ (80121d8 <udp_sendto_if+0xd0>)
 801211e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012122:	492e      	ldr	r1, [pc, #184]	@ (80121dc <udp_sendto_if+0xd4>)
 8012124:	482e      	ldr	r0, [pc, #184]	@ (80121e0 <udp_sendto_if+0xd8>)
 8012126:	f003 fcb3 	bl	8015a90 <iprintf>
 801212a:	f06f 030f 	mvn.w	r3, #15
 801212e:	e04f      	b.n	80121d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d109      	bne.n	801214a <udp_sendto_if+0x42>
 8012136:	4b28      	ldr	r3, [pc, #160]	@ (80121d8 <udp_sendto_if+0xd0>)
 8012138:	f240 2281 	movw	r2, #641	@ 0x281
 801213c:	4929      	ldr	r1, [pc, #164]	@ (80121e4 <udp_sendto_if+0xdc>)
 801213e:	4828      	ldr	r0, [pc, #160]	@ (80121e0 <udp_sendto_if+0xd8>)
 8012140:	f003 fca6 	bl	8015a90 <iprintf>
 8012144:	f06f 030f 	mvn.w	r3, #15
 8012148:	e042      	b.n	80121d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d109      	bne.n	8012164 <udp_sendto_if+0x5c>
 8012150:	4b21      	ldr	r3, [pc, #132]	@ (80121d8 <udp_sendto_if+0xd0>)
 8012152:	f240 2282 	movw	r2, #642	@ 0x282
 8012156:	4924      	ldr	r1, [pc, #144]	@ (80121e8 <udp_sendto_if+0xe0>)
 8012158:	4821      	ldr	r0, [pc, #132]	@ (80121e0 <udp_sendto_if+0xd8>)
 801215a:	f003 fc99 	bl	8015a90 <iprintf>
 801215e:	f06f 030f 	mvn.w	r3, #15
 8012162:	e035      	b.n	80121d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012164:	6a3b      	ldr	r3, [r7, #32]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d109      	bne.n	801217e <udp_sendto_if+0x76>
 801216a:	4b1b      	ldr	r3, [pc, #108]	@ (80121d8 <udp_sendto_if+0xd0>)
 801216c:	f240 2283 	movw	r2, #643	@ 0x283
 8012170:	491e      	ldr	r1, [pc, #120]	@ (80121ec <udp_sendto_if+0xe4>)
 8012172:	481b      	ldr	r0, [pc, #108]	@ (80121e0 <udp_sendto_if+0xd8>)
 8012174:	f003 fc8c 	bl	8015a90 <iprintf>
 8012178:	f06f 030f 	mvn.w	r3, #15
 801217c:	e028      	b.n	80121d0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d009      	beq.n	8012198 <udp_sendto_if+0x90>
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d005      	beq.n	8012198 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012194:	2be0      	cmp	r3, #224	@ 0xe0
 8012196:	d103      	bne.n	80121a0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012198:	6a3b      	ldr	r3, [r7, #32]
 801219a:	3304      	adds	r3, #4
 801219c:	617b      	str	r3, [r7, #20]
 801219e:	e00b      	b.n	80121b8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	6a3b      	ldr	r3, [r7, #32]
 80121a6:	3304      	adds	r3, #4
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d002      	beq.n	80121b4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80121ae:	f06f 0303 	mvn.w	r3, #3
 80121b2:	e00d      	b.n	80121d0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80121b8:	887a      	ldrh	r2, [r7, #2]
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	9301      	str	r3, [sp, #4]
 80121be:	6a3b      	ldr	r3, [r7, #32]
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	4613      	mov	r3, r2
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	68b9      	ldr	r1, [r7, #8]
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	f000 f811 	bl	80121f0 <udp_sendto_if_src>
 80121ce:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3718      	adds	r7, #24
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	080189c0 	.word	0x080189c0
 80121dc:	08018b34 	.word	0x08018b34
 80121e0:	08018a14 	.word	0x08018a14
 80121e4:	08018b50 	.word	0x08018b50
 80121e8:	08018b6c 	.word	0x08018b6c
 80121ec:	08018b8c 	.word	0x08018b8c

080121f0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b08c      	sub	sp, #48	@ 0x30
 80121f4:	af04      	add	r7, sp, #16
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	607a      	str	r2, [r7, #4]
 80121fc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d109      	bne.n	8012218 <udp_sendto_if_src+0x28>
 8012204:	4b65      	ldr	r3, [pc, #404]	@ (801239c <udp_sendto_if_src+0x1ac>)
 8012206:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801220a:	4965      	ldr	r1, [pc, #404]	@ (80123a0 <udp_sendto_if_src+0x1b0>)
 801220c:	4865      	ldr	r0, [pc, #404]	@ (80123a4 <udp_sendto_if_src+0x1b4>)
 801220e:	f003 fc3f 	bl	8015a90 <iprintf>
 8012212:	f06f 030f 	mvn.w	r3, #15
 8012216:	e0bc      	b.n	8012392 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d109      	bne.n	8012232 <udp_sendto_if_src+0x42>
 801221e:	4b5f      	ldr	r3, [pc, #380]	@ (801239c <udp_sendto_if_src+0x1ac>)
 8012220:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8012224:	4960      	ldr	r1, [pc, #384]	@ (80123a8 <udp_sendto_if_src+0x1b8>)
 8012226:	485f      	ldr	r0, [pc, #380]	@ (80123a4 <udp_sendto_if_src+0x1b4>)
 8012228:	f003 fc32 	bl	8015a90 <iprintf>
 801222c:	f06f 030f 	mvn.w	r3, #15
 8012230:	e0af      	b.n	8012392 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d109      	bne.n	801224c <udp_sendto_if_src+0x5c>
 8012238:	4b58      	ldr	r3, [pc, #352]	@ (801239c <udp_sendto_if_src+0x1ac>)
 801223a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801223e:	495b      	ldr	r1, [pc, #364]	@ (80123ac <udp_sendto_if_src+0x1bc>)
 8012240:	4858      	ldr	r0, [pc, #352]	@ (80123a4 <udp_sendto_if_src+0x1b4>)
 8012242:	f003 fc25 	bl	8015a90 <iprintf>
 8012246:	f06f 030f 	mvn.w	r3, #15
 801224a:	e0a2      	b.n	8012392 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801224e:	2b00      	cmp	r3, #0
 8012250:	d109      	bne.n	8012266 <udp_sendto_if_src+0x76>
 8012252:	4b52      	ldr	r3, [pc, #328]	@ (801239c <udp_sendto_if_src+0x1ac>)
 8012254:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8012258:	4955      	ldr	r1, [pc, #340]	@ (80123b0 <udp_sendto_if_src+0x1c0>)
 801225a:	4852      	ldr	r0, [pc, #328]	@ (80123a4 <udp_sendto_if_src+0x1b4>)
 801225c:	f003 fc18 	bl	8015a90 <iprintf>
 8012260:	f06f 030f 	mvn.w	r3, #15
 8012264:	e095      	b.n	8012392 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012268:	2b00      	cmp	r3, #0
 801226a:	d109      	bne.n	8012280 <udp_sendto_if_src+0x90>
 801226c:	4b4b      	ldr	r3, [pc, #300]	@ (801239c <udp_sendto_if_src+0x1ac>)
 801226e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8012272:	4950      	ldr	r1, [pc, #320]	@ (80123b4 <udp_sendto_if_src+0x1c4>)
 8012274:	484b      	ldr	r0, [pc, #300]	@ (80123a4 <udp_sendto_if_src+0x1b4>)
 8012276:	f003 fc0b 	bl	8015a90 <iprintf>
 801227a:	f06f 030f 	mvn.w	r3, #15
 801227e:	e088      	b.n	8012392 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	8a5b      	ldrh	r3, [r3, #18]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d10f      	bne.n	80122a8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012288:	68f9      	ldr	r1, [r7, #12]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	8a5b      	ldrh	r3, [r3, #18]
 801228e:	461a      	mov	r2, r3
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f000 f893 	bl	80123bc <udp_bind>
 8012296:	4603      	mov	r3, r0
 8012298:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801229a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d002      	beq.n	80122a8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80122a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80122a6:	e074      	b.n	8012392 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	891b      	ldrh	r3, [r3, #8]
 80122ac:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d902      	bls.n	80122ba <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80122b4:	f04f 33ff 	mov.w	r3, #4294967295
 80122b8:	e06b      	b.n	8012392 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80122ba:	2108      	movs	r1, #8
 80122bc:	68b8      	ldr	r0, [r7, #8]
 80122be:	f7f9 ff2f 	bl	800c120 <pbuf_add_header>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d015      	beq.n	80122f4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80122c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80122cc:	2108      	movs	r1, #8
 80122ce:	2022      	movs	r0, #34	@ 0x22
 80122d0:	f7f9 fcd8 	bl	800bc84 <pbuf_alloc>
 80122d4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d102      	bne.n	80122e2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80122dc:	f04f 33ff 	mov.w	r3, #4294967295
 80122e0:	e057      	b.n	8012392 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	891b      	ldrh	r3, [r3, #8]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d006      	beq.n	80122f8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80122ea:	68b9      	ldr	r1, [r7, #8]
 80122ec:	69f8      	ldr	r0, [r7, #28]
 80122ee:	f7fa f8c5 	bl	800c47c <pbuf_chain>
 80122f2:	e001      	b.n	80122f8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	895b      	ldrh	r3, [r3, #10]
 80122fc:	2b07      	cmp	r3, #7
 80122fe:	d806      	bhi.n	801230e <udp_sendto_if_src+0x11e>
 8012300:	4b26      	ldr	r3, [pc, #152]	@ (801239c <udp_sendto_if_src+0x1ac>)
 8012302:	f240 320d 	movw	r2, #781	@ 0x30d
 8012306:	492c      	ldr	r1, [pc, #176]	@ (80123b8 <udp_sendto_if_src+0x1c8>)
 8012308:	4826      	ldr	r0, [pc, #152]	@ (80123a4 <udp_sendto_if_src+0x1b4>)
 801230a:	f003 fbc1 	bl	8015a90 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	8a5b      	ldrh	r3, [r3, #18]
 8012318:	4618      	mov	r0, r3
 801231a:	f7f8 fc39 	bl	800ab90 <lwip_htons>
 801231e:	4603      	mov	r3, r0
 8012320:	461a      	mov	r2, r3
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012326:	887b      	ldrh	r3, [r7, #2]
 8012328:	4618      	mov	r0, r3
 801232a:	f7f8 fc31 	bl	800ab90 <lwip_htons>
 801232e:	4603      	mov	r3, r0
 8012330:	461a      	mov	r2, r3
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	2200      	movs	r2, #0
 801233a:	719a      	strb	r2, [r3, #6]
 801233c:	2200      	movs	r2, #0
 801233e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	891b      	ldrh	r3, [r3, #8]
 8012344:	4618      	mov	r0, r3
 8012346:	f7f8 fc23 	bl	800ab90 <lwip_htons>
 801234a:	4603      	mov	r3, r0
 801234c:	461a      	mov	r2, r3
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012352:	2311      	movs	r3, #17
 8012354:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	7adb      	ldrb	r3, [r3, #11]
 801235a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	7a9b      	ldrb	r3, [r3, #10]
 8012360:	7cb9      	ldrb	r1, [r7, #18]
 8012362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012364:	9202      	str	r2, [sp, #8]
 8012366:	7cfa      	ldrb	r2, [r7, #19]
 8012368:	9201      	str	r2, [sp, #4]
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	460b      	mov	r3, r1
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012372:	69f8      	ldr	r0, [r7, #28]
 8012374:	f001 fc16 	bl	8013ba4 <ip4_output_if_src>
 8012378:	4603      	mov	r3, r0
 801237a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801237c:	69fa      	ldr	r2, [r7, #28]
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	429a      	cmp	r2, r3
 8012382:	d004      	beq.n	801238e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012384:	69f8      	ldr	r0, [r7, #28]
 8012386:	f7f9 ff61 	bl	800c24c <pbuf_free>
    q = NULL;
 801238a:	2300      	movs	r3, #0
 801238c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801238e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012392:	4618      	mov	r0, r3
 8012394:	3720      	adds	r7, #32
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	080189c0 	.word	0x080189c0
 80123a0:	08018bac 	.word	0x08018bac
 80123a4:	08018a14 	.word	0x08018a14
 80123a8:	08018bcc 	.word	0x08018bcc
 80123ac:	08018bec 	.word	0x08018bec
 80123b0:	08018c10 	.word	0x08018c10
 80123b4:	08018c34 	.word	0x08018c34
 80123b8:	08018c58 	.word	0x08018c58

080123bc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	4613      	mov	r3, r2
 80123c8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d101      	bne.n	80123d4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80123d0:	4b39      	ldr	r3, [pc, #228]	@ (80124b8 <udp_bind+0xfc>)
 80123d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d109      	bne.n	80123ee <udp_bind+0x32>
 80123da:	4b38      	ldr	r3, [pc, #224]	@ (80124bc <udp_bind+0x100>)
 80123dc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80123e0:	4937      	ldr	r1, [pc, #220]	@ (80124c0 <udp_bind+0x104>)
 80123e2:	4838      	ldr	r0, [pc, #224]	@ (80124c4 <udp_bind+0x108>)
 80123e4:	f003 fb54 	bl	8015a90 <iprintf>
 80123e8:	f06f 030f 	mvn.w	r3, #15
 80123ec:	e060      	b.n	80124b0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123f2:	4b35      	ldr	r3, [pc, #212]	@ (80124c8 <udp_bind+0x10c>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	617b      	str	r3, [r7, #20]
 80123f8:	e009      	b.n	801240e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	429a      	cmp	r2, r3
 8012400:	d102      	bne.n	8012408 <udp_bind+0x4c>
      rebind = 1;
 8012402:	2301      	movs	r3, #1
 8012404:	74fb      	strb	r3, [r7, #19]
      break;
 8012406:	e005      	b.n	8012414 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	617b      	str	r3, [r7, #20]
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d1f2      	bne.n	80123fa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012414:	88fb      	ldrh	r3, [r7, #6]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d109      	bne.n	801242e <udp_bind+0x72>
    port = udp_new_port();
 801241a:	f7ff fc69 	bl	8011cf0 <udp_new_port>
 801241e:	4603      	mov	r3, r0
 8012420:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012422:	88fb      	ldrh	r3, [r7, #6]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d12c      	bne.n	8012482 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012428:	f06f 0307 	mvn.w	r3, #7
 801242c:	e040      	b.n	80124b0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801242e:	4b26      	ldr	r3, [pc, #152]	@ (80124c8 <udp_bind+0x10c>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	617b      	str	r3, [r7, #20]
 8012434:	e022      	b.n	801247c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	429a      	cmp	r2, r3
 801243c:	d01b      	beq.n	8012476 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	8a5b      	ldrh	r3, [r3, #18]
 8012442:	88fa      	ldrh	r2, [r7, #6]
 8012444:	429a      	cmp	r2, r3
 8012446:	d116      	bne.n	8012476 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012450:	429a      	cmp	r2, r3
 8012452:	d00d      	beq.n	8012470 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00a      	beq.n	8012470 <udp_bind+0xb4>
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d006      	beq.n	8012470 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012462:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012464:	2b00      	cmp	r3, #0
 8012466:	d003      	beq.n	8012470 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d102      	bne.n	8012476 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012470:	f06f 0307 	mvn.w	r3, #7
 8012474:	e01c      	b.n	80124b0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	617b      	str	r3, [r7, #20]
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d1d9      	bne.n	8012436 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d002      	beq.n	801248e <udp_bind+0xd2>
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	e000      	b.n	8012490 <udp_bind+0xd4>
 801248e:	2300      	movs	r3, #0
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	88fa      	ldrh	r2, [r7, #6]
 8012498:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801249a:	7cfb      	ldrb	r3, [r7, #19]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d106      	bne.n	80124ae <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80124a0:	4b09      	ldr	r3, [pc, #36]	@ (80124c8 <udp_bind+0x10c>)
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80124a8:	4a07      	ldr	r2, [pc, #28]	@ (80124c8 <udp_bind+0x10c>)
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80124ae:	2300      	movs	r3, #0
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3718      	adds	r7, #24
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}
 80124b8:	08019bf8 	.word	0x08019bf8
 80124bc:	080189c0 	.word	0x080189c0
 80124c0:	08018c88 	.word	0x08018c88
 80124c4:	08018a14 	.word	0x08018a14
 80124c8:	20008c5c 	.word	0x20008c5c

080124cc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d107      	bne.n	80124ee <udp_recv+0x22>
 80124de:	4b08      	ldr	r3, [pc, #32]	@ (8012500 <udp_recv+0x34>)
 80124e0:	f240 428a 	movw	r2, #1162	@ 0x48a
 80124e4:	4907      	ldr	r1, [pc, #28]	@ (8012504 <udp_recv+0x38>)
 80124e6:	4808      	ldr	r0, [pc, #32]	@ (8012508 <udp_recv+0x3c>)
 80124e8:	f003 fad2 	bl	8015a90 <iprintf>
 80124ec:	e005      	b.n	80124fa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	68ba      	ldr	r2, [r7, #8]
 80124f2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	61da      	str	r2, [r3, #28]
}
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	080189c0 	.word	0x080189c0
 8012504:	08018cf4 	.word	0x08018cf4
 8012508:	08018a14 	.word	0x08018a14

0801250c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b084      	sub	sp, #16
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d107      	bne.n	801252a <udp_remove+0x1e>
 801251a:	4b19      	ldr	r3, [pc, #100]	@ (8012580 <udp_remove+0x74>)
 801251c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012520:	4918      	ldr	r1, [pc, #96]	@ (8012584 <udp_remove+0x78>)
 8012522:	4819      	ldr	r0, [pc, #100]	@ (8012588 <udp_remove+0x7c>)
 8012524:	f003 fab4 	bl	8015a90 <iprintf>
 8012528:	e026      	b.n	8012578 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801252a:	4b18      	ldr	r3, [pc, #96]	@ (801258c <udp_remove+0x80>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	429a      	cmp	r2, r3
 8012532:	d105      	bne.n	8012540 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012534:	4b15      	ldr	r3, [pc, #84]	@ (801258c <udp_remove+0x80>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	4a14      	ldr	r2, [pc, #80]	@ (801258c <udp_remove+0x80>)
 801253c:	6013      	str	r3, [r2, #0]
 801253e:	e017      	b.n	8012570 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012540:	4b12      	ldr	r3, [pc, #72]	@ (801258c <udp_remove+0x80>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	60fb      	str	r3, [r7, #12]
 8012546:	e010      	b.n	801256a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d009      	beq.n	8012564 <udp_remove+0x58>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	429a      	cmp	r2, r3
 8012558:	d104      	bne.n	8012564 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	68da      	ldr	r2, [r3, #12]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	60da      	str	r2, [r3, #12]
        break;
 8012562:	e005      	b.n	8012570 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	68db      	ldr	r3, [r3, #12]
 8012568:	60fb      	str	r3, [r7, #12]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d1eb      	bne.n	8012548 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012570:	6879      	ldr	r1, [r7, #4]
 8012572:	2000      	movs	r0, #0
 8012574:	f7f8 fff4 	bl	800b560 <memp_free>
}
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	080189c0 	.word	0x080189c0
 8012584:	08018d0c 	.word	0x08018d0c
 8012588:	08018a14 	.word	0x08018a14
 801258c:	20008c5c 	.word	0x20008c5c

08012590 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012596:	2000      	movs	r0, #0
 8012598:	f7f8 ff72 	bl	800b480 <memp_malloc>
 801259c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d007      	beq.n	80125b4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80125a4:	2220      	movs	r2, #32
 80125a6:	2100      	movs	r1, #0
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f003 fbc9 	bl	8015d40 <memset>
    pcb->ttl = UDP_TTL;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	22ff      	movs	r2, #255	@ 0xff
 80125b2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80125b4:	687b      	ldr	r3, [r7, #4]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
	...

080125c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d01e      	beq.n	801260e <udp_netif_ip_addr_changed+0x4e>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d01a      	beq.n	801260e <udp_netif_ip_addr_changed+0x4e>
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d017      	beq.n	801260e <udp_netif_ip_addr_changed+0x4e>
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d013      	beq.n	801260e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80125e6:	4b0d      	ldr	r3, [pc, #52]	@ (801261c <udp_netif_ip_addr_changed+0x5c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	60fb      	str	r3, [r7, #12]
 80125ec:	e00c      	b.n	8012608 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681a      	ldr	r2, [r3, #0]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d103      	bne.n	8012602 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	68db      	ldr	r3, [r3, #12]
 8012606:	60fb      	str	r3, [r7, #12]
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d1ef      	bne.n	80125ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801260e:	bf00      	nop
 8012610:	3714      	adds	r7, #20
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop
 801261c:	20008c5c 	.word	0x20008c5c

08012620 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012628:	4915      	ldr	r1, [pc, #84]	@ (8012680 <etharp_free_entry+0x60>)
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	4613      	mov	r3, r2
 801262e:	005b      	lsls	r3, r3, #1
 8012630:	4413      	add	r3, r2
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	440b      	add	r3, r1
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d013      	beq.n	8012664 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801263c:	4910      	ldr	r1, [pc, #64]	@ (8012680 <etharp_free_entry+0x60>)
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	4613      	mov	r3, r2
 8012642:	005b      	lsls	r3, r3, #1
 8012644:	4413      	add	r3, r2
 8012646:	00db      	lsls	r3, r3, #3
 8012648:	440b      	add	r3, r1
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4618      	mov	r0, r3
 801264e:	f7f9 fdfd 	bl	800c24c <pbuf_free>
    arp_table[i].q = NULL;
 8012652:	490b      	ldr	r1, [pc, #44]	@ (8012680 <etharp_free_entry+0x60>)
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	4613      	mov	r3, r2
 8012658:	005b      	lsls	r3, r3, #1
 801265a:	4413      	add	r3, r2
 801265c:	00db      	lsls	r3, r3, #3
 801265e:	440b      	add	r3, r1
 8012660:	2200      	movs	r2, #0
 8012662:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012664:	4906      	ldr	r1, [pc, #24]	@ (8012680 <etharp_free_entry+0x60>)
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	4613      	mov	r3, r2
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	4413      	add	r3, r2
 801266e:	00db      	lsls	r3, r3, #3
 8012670:	440b      	add	r3, r1
 8012672:	3314      	adds	r3, #20
 8012674:	2200      	movs	r2, #0
 8012676:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	20008c60 	.word	0x20008c60

08012684 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801268a:	2300      	movs	r3, #0
 801268c:	607b      	str	r3, [r7, #4]
 801268e:	e096      	b.n	80127be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012690:	494f      	ldr	r1, [pc, #316]	@ (80127d0 <etharp_tmr+0x14c>)
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	4613      	mov	r3, r2
 8012696:	005b      	lsls	r3, r3, #1
 8012698:	4413      	add	r3, r2
 801269a:	00db      	lsls	r3, r3, #3
 801269c:	440b      	add	r3, r1
 801269e:	3314      	adds	r3, #20
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80126a4:	78fb      	ldrb	r3, [r7, #3]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	f000 8086 	beq.w	80127b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80126ac:	4948      	ldr	r1, [pc, #288]	@ (80127d0 <etharp_tmr+0x14c>)
 80126ae:	687a      	ldr	r2, [r7, #4]
 80126b0:	4613      	mov	r3, r2
 80126b2:	005b      	lsls	r3, r3, #1
 80126b4:	4413      	add	r3, r2
 80126b6:	00db      	lsls	r3, r3, #3
 80126b8:	440b      	add	r3, r1
 80126ba:	3312      	adds	r3, #18
 80126bc:	881b      	ldrh	r3, [r3, #0]
 80126be:	3301      	adds	r3, #1
 80126c0:	b298      	uxth	r0, r3
 80126c2:	4943      	ldr	r1, [pc, #268]	@ (80127d0 <etharp_tmr+0x14c>)
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	4613      	mov	r3, r2
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	4413      	add	r3, r2
 80126cc:	00db      	lsls	r3, r3, #3
 80126ce:	440b      	add	r3, r1
 80126d0:	3312      	adds	r3, #18
 80126d2:	4602      	mov	r2, r0
 80126d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80126d6:	493e      	ldr	r1, [pc, #248]	@ (80127d0 <etharp_tmr+0x14c>)
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	4613      	mov	r3, r2
 80126dc:	005b      	lsls	r3, r3, #1
 80126de:	4413      	add	r3, r2
 80126e0:	00db      	lsls	r3, r3, #3
 80126e2:	440b      	add	r3, r1
 80126e4:	3312      	adds	r3, #18
 80126e6:	881b      	ldrh	r3, [r3, #0]
 80126e8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80126ec:	d215      	bcs.n	801271a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80126ee:	4938      	ldr	r1, [pc, #224]	@ (80127d0 <etharp_tmr+0x14c>)
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	4613      	mov	r3, r2
 80126f4:	005b      	lsls	r3, r3, #1
 80126f6:	4413      	add	r3, r2
 80126f8:	00db      	lsls	r3, r3, #3
 80126fa:	440b      	add	r3, r1
 80126fc:	3314      	adds	r3, #20
 80126fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012700:	2b01      	cmp	r3, #1
 8012702:	d10e      	bne.n	8012722 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012704:	4932      	ldr	r1, [pc, #200]	@ (80127d0 <etharp_tmr+0x14c>)
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	4613      	mov	r3, r2
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	4413      	add	r3, r2
 801270e:	00db      	lsls	r3, r3, #3
 8012710:	440b      	add	r3, r1
 8012712:	3312      	adds	r3, #18
 8012714:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012716:	2b04      	cmp	r3, #4
 8012718:	d903      	bls.n	8012722 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7ff ff80 	bl	8012620 <etharp_free_entry>
 8012720:	e04a      	b.n	80127b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012722:	492b      	ldr	r1, [pc, #172]	@ (80127d0 <etharp_tmr+0x14c>)
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	4613      	mov	r3, r2
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	4413      	add	r3, r2
 801272c:	00db      	lsls	r3, r3, #3
 801272e:	440b      	add	r3, r1
 8012730:	3314      	adds	r3, #20
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	2b03      	cmp	r3, #3
 8012736:	d10a      	bne.n	801274e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012738:	4925      	ldr	r1, [pc, #148]	@ (80127d0 <etharp_tmr+0x14c>)
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	4613      	mov	r3, r2
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	4413      	add	r3, r2
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	440b      	add	r3, r1
 8012746:	3314      	adds	r3, #20
 8012748:	2204      	movs	r2, #4
 801274a:	701a      	strb	r2, [r3, #0]
 801274c:	e034      	b.n	80127b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801274e:	4920      	ldr	r1, [pc, #128]	@ (80127d0 <etharp_tmr+0x14c>)
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	4613      	mov	r3, r2
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	4413      	add	r3, r2
 8012758:	00db      	lsls	r3, r3, #3
 801275a:	440b      	add	r3, r1
 801275c:	3314      	adds	r3, #20
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	2b04      	cmp	r3, #4
 8012762:	d10a      	bne.n	801277a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012764:	491a      	ldr	r1, [pc, #104]	@ (80127d0 <etharp_tmr+0x14c>)
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	4613      	mov	r3, r2
 801276a:	005b      	lsls	r3, r3, #1
 801276c:	4413      	add	r3, r2
 801276e:	00db      	lsls	r3, r3, #3
 8012770:	440b      	add	r3, r1
 8012772:	3314      	adds	r3, #20
 8012774:	2202      	movs	r2, #2
 8012776:	701a      	strb	r2, [r3, #0]
 8012778:	e01e      	b.n	80127b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801277a:	4915      	ldr	r1, [pc, #84]	@ (80127d0 <etharp_tmr+0x14c>)
 801277c:	687a      	ldr	r2, [r7, #4]
 801277e:	4613      	mov	r3, r2
 8012780:	005b      	lsls	r3, r3, #1
 8012782:	4413      	add	r3, r2
 8012784:	00db      	lsls	r3, r3, #3
 8012786:	440b      	add	r3, r1
 8012788:	3314      	adds	r3, #20
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d113      	bne.n	80127b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012790:	490f      	ldr	r1, [pc, #60]	@ (80127d0 <etharp_tmr+0x14c>)
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	4613      	mov	r3, r2
 8012796:	005b      	lsls	r3, r3, #1
 8012798:	4413      	add	r3, r2
 801279a:	00db      	lsls	r3, r3, #3
 801279c:	440b      	add	r3, r1
 801279e:	3308      	adds	r3, #8
 80127a0:	6818      	ldr	r0, [r3, #0]
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4613      	mov	r3, r2
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	4413      	add	r3, r2
 80127aa:	00db      	lsls	r3, r3, #3
 80127ac:	4a08      	ldr	r2, [pc, #32]	@ (80127d0 <etharp_tmr+0x14c>)
 80127ae:	4413      	add	r3, r2
 80127b0:	3304      	adds	r3, #4
 80127b2:	4619      	mov	r1, r3
 80127b4:	f000 fe6e 	bl	8013494 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	3301      	adds	r3, #1
 80127bc:	607b      	str	r3, [r7, #4]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2b09      	cmp	r3, #9
 80127c2:	f77f af65 	ble.w	8012690 <etharp_tmr+0xc>
      }
    }
  }
}
 80127c6:	bf00      	nop
 80127c8:	bf00      	nop
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	20008c60 	.word	0x20008c60

080127d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b08a      	sub	sp, #40	@ 0x28
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	460b      	mov	r3, r1
 80127de:	607a      	str	r2, [r7, #4]
 80127e0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80127e2:	230a      	movs	r3, #10
 80127e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80127e6:	230a      	movs	r3, #10
 80127e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80127ea:	230a      	movs	r3, #10
 80127ec:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80127ee:	2300      	movs	r3, #0
 80127f0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80127f2:	230a      	movs	r3, #10
 80127f4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80127f6:	2300      	movs	r3, #0
 80127f8:	83bb      	strh	r3, [r7, #28]
 80127fa:	2300      	movs	r3, #0
 80127fc:	837b      	strh	r3, [r7, #26]
 80127fe:	2300      	movs	r3, #0
 8012800:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012802:	2300      	movs	r3, #0
 8012804:	843b      	strh	r3, [r7, #32]
 8012806:	e0ae      	b.n	8012966 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801280c:	49a6      	ldr	r1, [pc, #664]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 801280e:	4613      	mov	r3, r2
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	4413      	add	r3, r2
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	440b      	add	r3, r1
 8012818:	3314      	adds	r3, #20
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801281e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012822:	2b0a      	cmp	r3, #10
 8012824:	d105      	bne.n	8012832 <etharp_find_entry+0x5e>
 8012826:	7dfb      	ldrb	r3, [r7, #23]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d102      	bne.n	8012832 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801282c:	8c3b      	ldrh	r3, [r7, #32]
 801282e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012830:	e095      	b.n	801295e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012832:	7dfb      	ldrb	r3, [r7, #23]
 8012834:	2b00      	cmp	r3, #0
 8012836:	f000 8092 	beq.w	801295e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801283a:	7dfb      	ldrb	r3, [r7, #23]
 801283c:	2b01      	cmp	r3, #1
 801283e:	d009      	beq.n	8012854 <etharp_find_entry+0x80>
 8012840:	7dfb      	ldrb	r3, [r7, #23]
 8012842:	2b01      	cmp	r3, #1
 8012844:	d806      	bhi.n	8012854 <etharp_find_entry+0x80>
 8012846:	4b99      	ldr	r3, [pc, #612]	@ (8012aac <etharp_find_entry+0x2d8>)
 8012848:	f240 1223 	movw	r2, #291	@ 0x123
 801284c:	4998      	ldr	r1, [pc, #608]	@ (8012ab0 <etharp_find_entry+0x2dc>)
 801284e:	4899      	ldr	r0, [pc, #612]	@ (8012ab4 <etharp_find_entry+0x2e0>)
 8012850:	f003 f91e 	bl	8015a90 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d020      	beq.n	801289c <etharp_find_entry+0xc8>
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	6819      	ldr	r1, [r3, #0]
 801285e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012862:	4891      	ldr	r0, [pc, #580]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012864:	4613      	mov	r3, r2
 8012866:	005b      	lsls	r3, r3, #1
 8012868:	4413      	add	r3, r2
 801286a:	00db      	lsls	r3, r3, #3
 801286c:	4403      	add	r3, r0
 801286e:	3304      	adds	r3, #4
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	4299      	cmp	r1, r3
 8012874:	d112      	bne.n	801289c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d00c      	beq.n	8012896 <etharp_find_entry+0xc2>
 801287c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012880:	4989      	ldr	r1, [pc, #548]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012882:	4613      	mov	r3, r2
 8012884:	005b      	lsls	r3, r3, #1
 8012886:	4413      	add	r3, r2
 8012888:	00db      	lsls	r3, r3, #3
 801288a:	440b      	add	r3, r1
 801288c:	3308      	adds	r3, #8
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	429a      	cmp	r2, r3
 8012894:	d102      	bne.n	801289c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012896:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801289a:	e100      	b.n	8012a9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801289c:	7dfb      	ldrb	r3, [r7, #23]
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d140      	bne.n	8012924 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80128a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128a6:	4980      	ldr	r1, [pc, #512]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 80128a8:	4613      	mov	r3, r2
 80128aa:	005b      	lsls	r3, r3, #1
 80128ac:	4413      	add	r3, r2
 80128ae:	00db      	lsls	r3, r3, #3
 80128b0:	440b      	add	r3, r1
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d01a      	beq.n	80128ee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80128b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128bc:	497a      	ldr	r1, [pc, #488]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 80128be:	4613      	mov	r3, r2
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	4413      	add	r3, r2
 80128c4:	00db      	lsls	r3, r3, #3
 80128c6:	440b      	add	r3, r1
 80128c8:	3312      	adds	r3, #18
 80128ca:	881b      	ldrh	r3, [r3, #0]
 80128cc:	8bba      	ldrh	r2, [r7, #28]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d845      	bhi.n	801295e <etharp_find_entry+0x18a>
            old_queue = i;
 80128d2:	8c3b      	ldrh	r3, [r7, #32]
 80128d4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80128d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128da:	4973      	ldr	r1, [pc, #460]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 80128dc:	4613      	mov	r3, r2
 80128de:	005b      	lsls	r3, r3, #1
 80128e0:	4413      	add	r3, r2
 80128e2:	00db      	lsls	r3, r3, #3
 80128e4:	440b      	add	r3, r1
 80128e6:	3312      	adds	r3, #18
 80128e8:	881b      	ldrh	r3, [r3, #0]
 80128ea:	83bb      	strh	r3, [r7, #28]
 80128ec:	e037      	b.n	801295e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80128ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128f2:	496d      	ldr	r1, [pc, #436]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 80128f4:	4613      	mov	r3, r2
 80128f6:	005b      	lsls	r3, r3, #1
 80128f8:	4413      	add	r3, r2
 80128fa:	00db      	lsls	r3, r3, #3
 80128fc:	440b      	add	r3, r1
 80128fe:	3312      	adds	r3, #18
 8012900:	881b      	ldrh	r3, [r3, #0]
 8012902:	8b7a      	ldrh	r2, [r7, #26]
 8012904:	429a      	cmp	r2, r3
 8012906:	d82a      	bhi.n	801295e <etharp_find_entry+0x18a>
            old_pending = i;
 8012908:	8c3b      	ldrh	r3, [r7, #32]
 801290a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801290c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012910:	4965      	ldr	r1, [pc, #404]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012912:	4613      	mov	r3, r2
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	4413      	add	r3, r2
 8012918:	00db      	lsls	r3, r3, #3
 801291a:	440b      	add	r3, r1
 801291c:	3312      	adds	r3, #18
 801291e:	881b      	ldrh	r3, [r3, #0]
 8012920:	837b      	strh	r3, [r7, #26]
 8012922:	e01c      	b.n	801295e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012924:	7dfb      	ldrb	r3, [r7, #23]
 8012926:	2b01      	cmp	r3, #1
 8012928:	d919      	bls.n	801295e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801292a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801292e:	495e      	ldr	r1, [pc, #376]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012930:	4613      	mov	r3, r2
 8012932:	005b      	lsls	r3, r3, #1
 8012934:	4413      	add	r3, r2
 8012936:	00db      	lsls	r3, r3, #3
 8012938:	440b      	add	r3, r1
 801293a:	3312      	adds	r3, #18
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	8b3a      	ldrh	r2, [r7, #24]
 8012940:	429a      	cmp	r2, r3
 8012942:	d80c      	bhi.n	801295e <etharp_find_entry+0x18a>
            old_stable = i;
 8012944:	8c3b      	ldrh	r3, [r7, #32]
 8012946:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012948:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801294c:	4956      	ldr	r1, [pc, #344]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 801294e:	4613      	mov	r3, r2
 8012950:	005b      	lsls	r3, r3, #1
 8012952:	4413      	add	r3, r2
 8012954:	00db      	lsls	r3, r3, #3
 8012956:	440b      	add	r3, r1
 8012958:	3312      	adds	r3, #18
 801295a:	881b      	ldrh	r3, [r3, #0]
 801295c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801295e:	8c3b      	ldrh	r3, [r7, #32]
 8012960:	3301      	adds	r3, #1
 8012962:	b29b      	uxth	r3, r3
 8012964:	843b      	strh	r3, [r7, #32]
 8012966:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801296a:	2b09      	cmp	r3, #9
 801296c:	f77f af4c 	ble.w	8012808 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012970:	7afb      	ldrb	r3, [r7, #11]
 8012972:	f003 0302 	and.w	r3, r3, #2
 8012976:	2b00      	cmp	r3, #0
 8012978:	d108      	bne.n	801298c <etharp_find_entry+0x1b8>
 801297a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801297e:	2b0a      	cmp	r3, #10
 8012980:	d107      	bne.n	8012992 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012982:	7afb      	ldrb	r3, [r7, #11]
 8012984:	f003 0301 	and.w	r3, r3, #1
 8012988:	2b00      	cmp	r3, #0
 801298a:	d102      	bne.n	8012992 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801298c:	f04f 33ff 	mov.w	r3, #4294967295
 8012990:	e085      	b.n	8012a9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012992:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012996:	2b09      	cmp	r3, #9
 8012998:	dc02      	bgt.n	80129a0 <etharp_find_entry+0x1cc>
    i = empty;
 801299a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801299c:	843b      	strh	r3, [r7, #32]
 801299e:	e039      	b.n	8012a14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80129a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80129a4:	2b09      	cmp	r3, #9
 80129a6:	dc14      	bgt.n	80129d2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80129a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129aa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80129ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129b0:	493d      	ldr	r1, [pc, #244]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 80129b2:	4613      	mov	r3, r2
 80129b4:	005b      	lsls	r3, r3, #1
 80129b6:	4413      	add	r3, r2
 80129b8:	00db      	lsls	r3, r3, #3
 80129ba:	440b      	add	r3, r1
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d018      	beq.n	80129f4 <etharp_find_entry+0x220>
 80129c2:	4b3a      	ldr	r3, [pc, #232]	@ (8012aac <etharp_find_entry+0x2d8>)
 80129c4:	f240 126d 	movw	r2, #365	@ 0x16d
 80129c8:	493b      	ldr	r1, [pc, #236]	@ (8012ab8 <etharp_find_entry+0x2e4>)
 80129ca:	483a      	ldr	r0, [pc, #232]	@ (8012ab4 <etharp_find_entry+0x2e0>)
 80129cc:	f003 f860 	bl	8015a90 <iprintf>
 80129d0:	e010      	b.n	80129f4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80129d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80129d6:	2b09      	cmp	r3, #9
 80129d8:	dc02      	bgt.n	80129e0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80129da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80129dc:	843b      	strh	r3, [r7, #32]
 80129de:	e009      	b.n	80129f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80129e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80129e4:	2b09      	cmp	r3, #9
 80129e6:	dc02      	bgt.n	80129ee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80129e8:	8bfb      	ldrh	r3, [r7, #30]
 80129ea:	843b      	strh	r3, [r7, #32]
 80129ec:	e002      	b.n	80129f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80129ee:	f04f 33ff 	mov.w	r3, #4294967295
 80129f2:	e054      	b.n	8012a9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80129f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129f8:	2b09      	cmp	r3, #9
 80129fa:	dd06      	ble.n	8012a0a <etharp_find_entry+0x236>
 80129fc:	4b2b      	ldr	r3, [pc, #172]	@ (8012aac <etharp_find_entry+0x2d8>)
 80129fe:	f240 127f 	movw	r2, #383	@ 0x17f
 8012a02:	492e      	ldr	r1, [pc, #184]	@ (8012abc <etharp_find_entry+0x2e8>)
 8012a04:	482b      	ldr	r0, [pc, #172]	@ (8012ab4 <etharp_find_entry+0x2e0>)
 8012a06:	f003 f843 	bl	8015a90 <iprintf>
    etharp_free_entry(i);
 8012a0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ff fe06 	bl	8012620 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012a14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a18:	2b09      	cmp	r3, #9
 8012a1a:	dd06      	ble.n	8012a2a <etharp_find_entry+0x256>
 8012a1c:	4b23      	ldr	r3, [pc, #140]	@ (8012aac <etharp_find_entry+0x2d8>)
 8012a1e:	f240 1283 	movw	r2, #387	@ 0x183
 8012a22:	4926      	ldr	r1, [pc, #152]	@ (8012abc <etharp_find_entry+0x2e8>)
 8012a24:	4823      	ldr	r0, [pc, #140]	@ (8012ab4 <etharp_find_entry+0x2e0>)
 8012a26:	f003 f833 	bl	8015a90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012a2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a2e:	491e      	ldr	r1, [pc, #120]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012a30:	4613      	mov	r3, r2
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	4413      	add	r3, r2
 8012a36:	00db      	lsls	r3, r3, #3
 8012a38:	440b      	add	r3, r1
 8012a3a:	3314      	adds	r3, #20
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d006      	beq.n	8012a50 <etharp_find_entry+0x27c>
 8012a42:	4b1a      	ldr	r3, [pc, #104]	@ (8012aac <etharp_find_entry+0x2d8>)
 8012a44:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012a48:	491d      	ldr	r1, [pc, #116]	@ (8012ac0 <etharp_find_entry+0x2ec>)
 8012a4a:	481a      	ldr	r0, [pc, #104]	@ (8012ab4 <etharp_find_entry+0x2e0>)
 8012a4c:	f003 f820 	bl	8015a90 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00b      	beq.n	8012a6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012a56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6819      	ldr	r1, [r3, #0]
 8012a5e:	4812      	ldr	r0, [pc, #72]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	4413      	add	r3, r2
 8012a66:	00db      	lsls	r3, r3, #3
 8012a68:	4403      	add	r3, r0
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012a6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a72:	490d      	ldr	r1, [pc, #52]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012a74:	4613      	mov	r3, r2
 8012a76:	005b      	lsls	r3, r3, #1
 8012a78:	4413      	add	r3, r2
 8012a7a:	00db      	lsls	r3, r3, #3
 8012a7c:	440b      	add	r3, r1
 8012a7e:	3312      	adds	r3, #18
 8012a80:	2200      	movs	r2, #0
 8012a82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012a84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a88:	4907      	ldr	r1, [pc, #28]	@ (8012aa8 <etharp_find_entry+0x2d4>)
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	4413      	add	r3, r2
 8012a90:	00db      	lsls	r3, r3, #3
 8012a92:	440b      	add	r3, r1
 8012a94:	3308      	adds	r3, #8
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012a9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3728      	adds	r7, #40	@ 0x28
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	20008c60 	.word	0x20008c60
 8012aac:	08018d24 	.word	0x08018d24
 8012ab0:	08018d5c 	.word	0x08018d5c
 8012ab4:	08018d9c 	.word	0x08018d9c
 8012ab8:	08018dc4 	.word	0x08018dc4
 8012abc:	08018ddc 	.word	0x08018ddc
 8012ac0:	08018df0 	.word	0x08018df0

08012ac4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b088      	sub	sp, #32
 8012ac8:	af02      	add	r7, sp, #8
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	607a      	str	r2, [r7, #4]
 8012ad0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012ad8:	2b06      	cmp	r3, #6
 8012ada:	d006      	beq.n	8012aea <etharp_update_arp_entry+0x26>
 8012adc:	4b48      	ldr	r3, [pc, #288]	@ (8012c00 <etharp_update_arp_entry+0x13c>)
 8012ade:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012ae2:	4948      	ldr	r1, [pc, #288]	@ (8012c04 <etharp_update_arp_entry+0x140>)
 8012ae4:	4848      	ldr	r0, [pc, #288]	@ (8012c08 <etharp_update_arp_entry+0x144>)
 8012ae6:	f002 ffd3 	bl	8015a90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d012      	beq.n	8012b16 <etharp_update_arp_entry+0x52>
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d00e      	beq.n	8012b16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	68f9      	ldr	r1, [r7, #12]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f001 f8fe 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 8012b04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d105      	bne.n	8012b16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b12:	2be0      	cmp	r3, #224	@ 0xe0
 8012b14:	d102      	bne.n	8012b1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b16:	f06f 030f 	mvn.w	r3, #15
 8012b1a:	e06c      	b.n	8012bf6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012b1c:	78fb      	ldrb	r3, [r7, #3]
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	4619      	mov	r1, r3
 8012b22:	68b8      	ldr	r0, [r7, #8]
 8012b24:	f7ff fe56 	bl	80127d4 <etharp_find_entry>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012b2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	da02      	bge.n	8012b3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012b34:	8afb      	ldrh	r3, [r7, #22]
 8012b36:	b25b      	sxtb	r3, r3
 8012b38:	e05d      	b.n	8012bf6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012b3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b3e:	4933      	ldr	r1, [pc, #204]	@ (8012c0c <etharp_update_arp_entry+0x148>)
 8012b40:	4613      	mov	r3, r2
 8012b42:	005b      	lsls	r3, r3, #1
 8012b44:	4413      	add	r3, r2
 8012b46:	00db      	lsls	r3, r3, #3
 8012b48:	440b      	add	r3, r1
 8012b4a:	3314      	adds	r3, #20
 8012b4c:	2202      	movs	r2, #2
 8012b4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012b50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b54:	492d      	ldr	r1, [pc, #180]	@ (8012c0c <etharp_update_arp_entry+0x148>)
 8012b56:	4613      	mov	r3, r2
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	4413      	add	r3, r2
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	440b      	add	r3, r1
 8012b60:	3308      	adds	r3, #8
 8012b62:	68fa      	ldr	r2, [r7, #12]
 8012b64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012b66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	005b      	lsls	r3, r3, #1
 8012b6e:	4413      	add	r3, r2
 8012b70:	00db      	lsls	r3, r3, #3
 8012b72:	3308      	adds	r3, #8
 8012b74:	4a25      	ldr	r2, [pc, #148]	@ (8012c0c <etharp_update_arp_entry+0x148>)
 8012b76:	4413      	add	r3, r2
 8012b78:	3304      	adds	r3, #4
 8012b7a:	2206      	movs	r2, #6
 8012b7c:	6879      	ldr	r1, [r7, #4]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f003 f993 	bl	8015eaa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012b84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b88:	4920      	ldr	r1, [pc, #128]	@ (8012c0c <etharp_update_arp_entry+0x148>)
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	4413      	add	r3, r2
 8012b90:	00db      	lsls	r3, r3, #3
 8012b92:	440b      	add	r3, r1
 8012b94:	3312      	adds	r3, #18
 8012b96:	2200      	movs	r2, #0
 8012b98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012b9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b9e:	491b      	ldr	r1, [pc, #108]	@ (8012c0c <etharp_update_arp_entry+0x148>)
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	005b      	lsls	r3, r3, #1
 8012ba4:	4413      	add	r3, r2
 8012ba6:	00db      	lsls	r3, r3, #3
 8012ba8:	440b      	add	r3, r1
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d021      	beq.n	8012bf4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012bb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012bb4:	4915      	ldr	r1, [pc, #84]	@ (8012c0c <etharp_update_arp_entry+0x148>)
 8012bb6:	4613      	mov	r3, r2
 8012bb8:	005b      	lsls	r3, r3, #1
 8012bba:	4413      	add	r3, r2
 8012bbc:	00db      	lsls	r3, r3, #3
 8012bbe:	440b      	add	r3, r1
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012bc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012bc8:	4910      	ldr	r1, [pc, #64]	@ (8012c0c <etharp_update_arp_entry+0x148>)
 8012bca:	4613      	mov	r3, r2
 8012bcc:	005b      	lsls	r3, r3, #1
 8012bce:	4413      	add	r3, r2
 8012bd0:	00db      	lsls	r3, r3, #3
 8012bd2:	440b      	add	r3, r1
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012bde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6939      	ldr	r1, [r7, #16]
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f001 ff97 	bl	8014b1c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012bee:	6938      	ldr	r0, [r7, #16]
 8012bf0:	f7f9 fb2c 	bl	800c24c <pbuf_free>
  }
  return ERR_OK;
 8012bf4:	2300      	movs	r3, #0
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3718      	adds	r7, #24
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	08018d24 	.word	0x08018d24
 8012c04:	08018e1c 	.word	0x08018e1c
 8012c08:	08018d9c 	.word	0x08018d9c
 8012c0c:	20008c60 	.word	0x20008c60

08012c10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c18:	2300      	movs	r3, #0
 8012c1a:	60fb      	str	r3, [r7, #12]
 8012c1c:	e01e      	b.n	8012c5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012c1e:	4913      	ldr	r1, [pc, #76]	@ (8012c6c <etharp_cleanup_netif+0x5c>)
 8012c20:	68fa      	ldr	r2, [r7, #12]
 8012c22:	4613      	mov	r3, r2
 8012c24:	005b      	lsls	r3, r3, #1
 8012c26:	4413      	add	r3, r2
 8012c28:	00db      	lsls	r3, r3, #3
 8012c2a:	440b      	add	r3, r1
 8012c2c:	3314      	adds	r3, #20
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012c32:	7afb      	ldrb	r3, [r7, #11]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d00e      	beq.n	8012c56 <etharp_cleanup_netif+0x46>
 8012c38:	490c      	ldr	r1, [pc, #48]	@ (8012c6c <etharp_cleanup_netif+0x5c>)
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	4613      	mov	r3, r2
 8012c3e:	005b      	lsls	r3, r3, #1
 8012c40:	4413      	add	r3, r2
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	440b      	add	r3, r1
 8012c46:	3308      	adds	r3, #8
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d102      	bne.n	8012c56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012c50:	68f8      	ldr	r0, [r7, #12]
 8012c52:	f7ff fce5 	bl	8012620 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	3301      	adds	r3, #1
 8012c5a:	60fb      	str	r3, [r7, #12]
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2b09      	cmp	r3, #9
 8012c60:	dddd      	ble.n	8012c1e <etharp_cleanup_netif+0xe>
    }
  }
}
 8012c62:	bf00      	nop
 8012c64:	bf00      	nop
 8012c66:	3710      	adds	r7, #16
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	20008c60 	.word	0x20008c60

08012c70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012c70:	b5b0      	push	{r4, r5, r7, lr}
 8012c72:	b08a      	sub	sp, #40	@ 0x28
 8012c74:	af04      	add	r7, sp, #16
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d107      	bne.n	8012c90 <etharp_input+0x20>
 8012c80:	4b3d      	ldr	r3, [pc, #244]	@ (8012d78 <etharp_input+0x108>)
 8012c82:	f240 228a 	movw	r2, #650	@ 0x28a
 8012c86:	493d      	ldr	r1, [pc, #244]	@ (8012d7c <etharp_input+0x10c>)
 8012c88:	483d      	ldr	r0, [pc, #244]	@ (8012d80 <etharp_input+0x110>)
 8012c8a:	f002 ff01 	bl	8015a90 <iprintf>
 8012c8e:	e06f      	b.n	8012d70 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	881b      	ldrh	r3, [r3, #0]
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ca0:	d10c      	bne.n	8012cbc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ca6:	2b06      	cmp	r3, #6
 8012ca8:	d108      	bne.n	8012cbc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012cae:	2b04      	cmp	r3, #4
 8012cb0:	d104      	bne.n	8012cbc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	885b      	ldrh	r3, [r3, #2]
 8012cb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012cb8:	2b08      	cmp	r3, #8
 8012cba:	d003      	beq.n	8012cc4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7f9 fac5 	bl	800c24c <pbuf_free>
    return;
 8012cc2:	e055      	b.n	8012d70 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	330e      	adds	r3, #14
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	3318      	adds	r3, #24
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	3304      	adds	r3, #4
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d102      	bne.n	8012ce4 <etharp_input+0x74>
    for_us = 0;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	75fb      	strb	r3, [r7, #23]
 8012ce2:	e009      	b.n	8012cf8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	3304      	adds	r3, #4
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	bf0c      	ite	eq
 8012cf0:	2301      	moveq	r3, #1
 8012cf2:	2300      	movne	r3, #0
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	f103 0208 	add.w	r2, r3, #8
 8012cfe:	7dfb      	ldrb	r3, [r7, #23]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d001      	beq.n	8012d08 <etharp_input+0x98>
 8012d04:	2301      	movs	r3, #1
 8012d06:	e000      	b.n	8012d0a <etharp_input+0x9a>
 8012d08:	2302      	movs	r3, #2
 8012d0a:	f107 010c 	add.w	r1, r7, #12
 8012d0e:	6838      	ldr	r0, [r7, #0]
 8012d10:	f7ff fed8 	bl	8012ac4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	88db      	ldrh	r3, [r3, #6]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d1e:	d003      	beq.n	8012d28 <etharp_input+0xb8>
 8012d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d24:	d01e      	beq.n	8012d64 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012d26:	e020      	b.n	8012d6a <etharp_input+0xfa>
      if (for_us) {
 8012d28:	7dfb      	ldrb	r3, [r7, #23]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d01c      	beq.n	8012d68 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012d44:	693a      	ldr	r2, [r7, #16]
 8012d46:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012d48:	2102      	movs	r1, #2
 8012d4a:	9103      	str	r1, [sp, #12]
 8012d4c:	f107 010c 	add.w	r1, r7, #12
 8012d50:	9102      	str	r1, [sp, #8]
 8012d52:	9201      	str	r2, [sp, #4]
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	462b      	mov	r3, r5
 8012d58:	4622      	mov	r2, r4
 8012d5a:	4601      	mov	r1, r0
 8012d5c:	6838      	ldr	r0, [r7, #0]
 8012d5e:	f000 faeb 	bl	8013338 <etharp_raw>
      break;
 8012d62:	e001      	b.n	8012d68 <etharp_input+0xf8>
      break;
 8012d64:	bf00      	nop
 8012d66:	e000      	b.n	8012d6a <etharp_input+0xfa>
      break;
 8012d68:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f7f9 fa6e 	bl	800c24c <pbuf_free>
}
 8012d70:	3718      	adds	r7, #24
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bdb0      	pop	{r4, r5, r7, pc}
 8012d76:	bf00      	nop
 8012d78:	08018d24 	.word	0x08018d24
 8012d7c:	08018e74 	.word	0x08018e74
 8012d80:	08018d9c 	.word	0x08018d9c

08012d84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b086      	sub	sp, #24
 8012d88:	af02      	add	r7, sp, #8
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	4613      	mov	r3, r2
 8012d90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012d92:	79fa      	ldrb	r2, [r7, #7]
 8012d94:	4944      	ldr	r1, [pc, #272]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012d96:	4613      	mov	r3, r2
 8012d98:	005b      	lsls	r3, r3, #1
 8012d9a:	4413      	add	r3, r2
 8012d9c:	00db      	lsls	r3, r3, #3
 8012d9e:	440b      	add	r3, r1
 8012da0:	3314      	adds	r3, #20
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	2b01      	cmp	r3, #1
 8012da6:	d806      	bhi.n	8012db6 <etharp_output_to_arp_index+0x32>
 8012da8:	4b40      	ldr	r3, [pc, #256]	@ (8012eac <etharp_output_to_arp_index+0x128>)
 8012daa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012dae:	4940      	ldr	r1, [pc, #256]	@ (8012eb0 <etharp_output_to_arp_index+0x12c>)
 8012db0:	4840      	ldr	r0, [pc, #256]	@ (8012eb4 <etharp_output_to_arp_index+0x130>)
 8012db2:	f002 fe6d 	bl	8015a90 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012db6:	79fa      	ldrb	r2, [r7, #7]
 8012db8:	493b      	ldr	r1, [pc, #236]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012dba:	4613      	mov	r3, r2
 8012dbc:	005b      	lsls	r3, r3, #1
 8012dbe:	4413      	add	r3, r2
 8012dc0:	00db      	lsls	r3, r3, #3
 8012dc2:	440b      	add	r3, r1
 8012dc4:	3314      	adds	r3, #20
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d153      	bne.n	8012e74 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012dcc:	79fa      	ldrb	r2, [r7, #7]
 8012dce:	4936      	ldr	r1, [pc, #216]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012dd0:	4613      	mov	r3, r2
 8012dd2:	005b      	lsls	r3, r3, #1
 8012dd4:	4413      	add	r3, r2
 8012dd6:	00db      	lsls	r3, r3, #3
 8012dd8:	440b      	add	r3, r1
 8012dda:	3312      	adds	r3, #18
 8012ddc:	881b      	ldrh	r3, [r3, #0]
 8012dde:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012de2:	d919      	bls.n	8012e18 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012de4:	79fa      	ldrb	r2, [r7, #7]
 8012de6:	4613      	mov	r3, r2
 8012de8:	005b      	lsls	r3, r3, #1
 8012dea:	4413      	add	r3, r2
 8012dec:	00db      	lsls	r3, r3, #3
 8012dee:	4a2e      	ldr	r2, [pc, #184]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012df0:	4413      	add	r3, r2
 8012df2:	3304      	adds	r3, #4
 8012df4:	4619      	mov	r1, r3
 8012df6:	68f8      	ldr	r0, [r7, #12]
 8012df8:	f000 fb4c 	bl	8013494 <etharp_request>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d138      	bne.n	8012e74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e02:	79fa      	ldrb	r2, [r7, #7]
 8012e04:	4928      	ldr	r1, [pc, #160]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012e06:	4613      	mov	r3, r2
 8012e08:	005b      	lsls	r3, r3, #1
 8012e0a:	4413      	add	r3, r2
 8012e0c:	00db      	lsls	r3, r3, #3
 8012e0e:	440b      	add	r3, r1
 8012e10:	3314      	adds	r3, #20
 8012e12:	2203      	movs	r2, #3
 8012e14:	701a      	strb	r2, [r3, #0]
 8012e16:	e02d      	b.n	8012e74 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012e18:	79fa      	ldrb	r2, [r7, #7]
 8012e1a:	4923      	ldr	r1, [pc, #140]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012e1c:	4613      	mov	r3, r2
 8012e1e:	005b      	lsls	r3, r3, #1
 8012e20:	4413      	add	r3, r2
 8012e22:	00db      	lsls	r3, r3, #3
 8012e24:	440b      	add	r3, r1
 8012e26:	3312      	adds	r3, #18
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012e2e:	d321      	bcc.n	8012e74 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012e30:	79fa      	ldrb	r2, [r7, #7]
 8012e32:	4613      	mov	r3, r2
 8012e34:	005b      	lsls	r3, r3, #1
 8012e36:	4413      	add	r3, r2
 8012e38:	00db      	lsls	r3, r3, #3
 8012e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012e3c:	4413      	add	r3, r2
 8012e3e:	1d19      	adds	r1, r3, #4
 8012e40:	79fa      	ldrb	r2, [r7, #7]
 8012e42:	4613      	mov	r3, r2
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	4413      	add	r3, r2
 8012e48:	00db      	lsls	r3, r3, #3
 8012e4a:	3308      	adds	r3, #8
 8012e4c:	4a16      	ldr	r2, [pc, #88]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012e4e:	4413      	add	r3, r2
 8012e50:	3304      	adds	r3, #4
 8012e52:	461a      	mov	r2, r3
 8012e54:	68f8      	ldr	r0, [r7, #12]
 8012e56:	f000 fafb 	bl	8013450 <etharp_request_dst>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d109      	bne.n	8012e74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e60:	79fa      	ldrb	r2, [r7, #7]
 8012e62:	4911      	ldr	r1, [pc, #68]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012e64:	4613      	mov	r3, r2
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	4413      	add	r3, r2
 8012e6a:	00db      	lsls	r3, r3, #3
 8012e6c:	440b      	add	r3, r1
 8012e6e:	3314      	adds	r3, #20
 8012e70:	2203      	movs	r2, #3
 8012e72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012e7a:	79fa      	ldrb	r2, [r7, #7]
 8012e7c:	4613      	mov	r3, r2
 8012e7e:	005b      	lsls	r3, r3, #1
 8012e80:	4413      	add	r3, r2
 8012e82:	00db      	lsls	r3, r3, #3
 8012e84:	3308      	adds	r3, #8
 8012e86:	4a08      	ldr	r2, [pc, #32]	@ (8012ea8 <etharp_output_to_arp_index+0x124>)
 8012e88:	4413      	add	r3, r2
 8012e8a:	3304      	adds	r3, #4
 8012e8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012e90:	9200      	str	r2, [sp, #0]
 8012e92:	460a      	mov	r2, r1
 8012e94:	68b9      	ldr	r1, [r7, #8]
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	f001 fe40 	bl	8014b1c <ethernet_output>
 8012e9c:	4603      	mov	r3, r0
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	20008c60 	.word	0x20008c60
 8012eac:	08018d24 	.word	0x08018d24
 8012eb0:	08018e94 	.word	0x08018e94
 8012eb4:	08018d9c 	.word	0x08018d9c

08012eb8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b08a      	sub	sp, #40	@ 0x28
 8012ebc:	af02      	add	r7, sp, #8
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d106      	bne.n	8012edc <etharp_output+0x24>
 8012ece:	4b73      	ldr	r3, [pc, #460]	@ (801309c <etharp_output+0x1e4>)
 8012ed0:	f240 321e 	movw	r2, #798	@ 0x31e
 8012ed4:	4972      	ldr	r1, [pc, #456]	@ (80130a0 <etharp_output+0x1e8>)
 8012ed6:	4873      	ldr	r0, [pc, #460]	@ (80130a4 <etharp_output+0x1ec>)
 8012ed8:	f002 fdda 	bl	8015a90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d106      	bne.n	8012ef0 <etharp_output+0x38>
 8012ee2:	4b6e      	ldr	r3, [pc, #440]	@ (801309c <etharp_output+0x1e4>)
 8012ee4:	f240 321f 	movw	r2, #799	@ 0x31f
 8012ee8:	496f      	ldr	r1, [pc, #444]	@ (80130a8 <etharp_output+0x1f0>)
 8012eea:	486e      	ldr	r0, [pc, #440]	@ (80130a4 <etharp_output+0x1ec>)
 8012eec:	f002 fdd0 	bl	8015a90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d106      	bne.n	8012f04 <etharp_output+0x4c>
 8012ef6:	4b69      	ldr	r3, [pc, #420]	@ (801309c <etharp_output+0x1e4>)
 8012ef8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012efc:	496b      	ldr	r1, [pc, #428]	@ (80130ac <etharp_output+0x1f4>)
 8012efe:	4869      	ldr	r0, [pc, #420]	@ (80130a4 <etharp_output+0x1ec>)
 8012f00:	f002 fdc6 	bl	8015a90 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	68f9      	ldr	r1, [r7, #12]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f000 fef8 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 8012f10:	4603      	mov	r3, r0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d002      	beq.n	8012f1c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012f16:	4b66      	ldr	r3, [pc, #408]	@ (80130b0 <etharp_output+0x1f8>)
 8012f18:	61fb      	str	r3, [r7, #28]
 8012f1a:	e0af      	b.n	801307c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012f24:	2be0      	cmp	r3, #224	@ 0xe0
 8012f26:	d118      	bne.n	8012f5a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012f30:	235e      	movs	r3, #94	@ 0x5e
 8012f32:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	3301      	adds	r3, #1
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f3e:	b2db      	uxtb	r3, r3
 8012f40:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	3302      	adds	r3, #2
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	3303      	adds	r3, #3
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012f52:	f107 0310 	add.w	r3, r7, #16
 8012f56:	61fb      	str	r3, [r7, #28]
 8012f58:	e090      	b.n	801307c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	3304      	adds	r3, #4
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	405a      	eors	r2, r3
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	3308      	adds	r3, #8
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d012      	beq.n	8012f98 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f78:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d00b      	beq.n	8012f98 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	330c      	adds	r3, #12
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d003      	beq.n	8012f92 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	330c      	adds	r3, #12
 8012f8e:	61bb      	str	r3, [r7, #24]
 8012f90:	e002      	b.n	8012f98 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012f92:	f06f 0303 	mvn.w	r3, #3
 8012f96:	e07d      	b.n	8013094 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012f98:	4b46      	ldr	r3, [pc, #280]	@ (80130b4 <etharp_output+0x1fc>)
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	4a46      	ldr	r2, [pc, #280]	@ (80130b8 <etharp_output+0x200>)
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	005b      	lsls	r3, r3, #1
 8012fa4:	440b      	add	r3, r1
 8012fa6:	00db      	lsls	r3, r3, #3
 8012fa8:	4413      	add	r3, r2
 8012faa:	3314      	adds	r3, #20
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	d925      	bls.n	8012ffe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012fb2:	4b40      	ldr	r3, [pc, #256]	@ (80130b4 <etharp_output+0x1fc>)
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	4a3f      	ldr	r2, [pc, #252]	@ (80130b8 <etharp_output+0x200>)
 8012fba:	460b      	mov	r3, r1
 8012fbc:	005b      	lsls	r3, r3, #1
 8012fbe:	440b      	add	r3, r1
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	4413      	add	r3, r2
 8012fc4:	3308      	adds	r3, #8
 8012fc6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012fc8:	68fa      	ldr	r2, [r7, #12]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d117      	bne.n	8012ffe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012fce:	69bb      	ldr	r3, [r7, #24]
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	4b38      	ldr	r3, [pc, #224]	@ (80130b4 <etharp_output+0x1fc>)
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	4937      	ldr	r1, [pc, #220]	@ (80130b8 <etharp_output+0x200>)
 8012fda:	4603      	mov	r3, r0
 8012fdc:	005b      	lsls	r3, r3, #1
 8012fde:	4403      	add	r3, r0
 8012fe0:	00db      	lsls	r3, r3, #3
 8012fe2:	440b      	add	r3, r1
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d108      	bne.n	8012ffe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012fec:	4b31      	ldr	r3, [pc, #196]	@ (80130b4 <etharp_output+0x1fc>)
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	68b9      	ldr	r1, [r7, #8]
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f7ff fec5 	bl	8012d84 <etharp_output_to_arp_index>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	e04a      	b.n	8013094 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012ffe:	2300      	movs	r3, #0
 8013000:	75fb      	strb	r3, [r7, #23]
 8013002:	e031      	b.n	8013068 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013004:	7dfa      	ldrb	r2, [r7, #23]
 8013006:	492c      	ldr	r1, [pc, #176]	@ (80130b8 <etharp_output+0x200>)
 8013008:	4613      	mov	r3, r2
 801300a:	005b      	lsls	r3, r3, #1
 801300c:	4413      	add	r3, r2
 801300e:	00db      	lsls	r3, r3, #3
 8013010:	440b      	add	r3, r1
 8013012:	3314      	adds	r3, #20
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d923      	bls.n	8013062 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801301a:	7dfa      	ldrb	r2, [r7, #23]
 801301c:	4926      	ldr	r1, [pc, #152]	@ (80130b8 <etharp_output+0x200>)
 801301e:	4613      	mov	r3, r2
 8013020:	005b      	lsls	r3, r3, #1
 8013022:	4413      	add	r3, r2
 8013024:	00db      	lsls	r3, r3, #3
 8013026:	440b      	add	r3, r1
 8013028:	3308      	adds	r3, #8
 801302a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801302c:	68fa      	ldr	r2, [r7, #12]
 801302e:	429a      	cmp	r2, r3
 8013030:	d117      	bne.n	8013062 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013032:	69bb      	ldr	r3, [r7, #24]
 8013034:	6819      	ldr	r1, [r3, #0]
 8013036:	7dfa      	ldrb	r2, [r7, #23]
 8013038:	481f      	ldr	r0, [pc, #124]	@ (80130b8 <etharp_output+0x200>)
 801303a:	4613      	mov	r3, r2
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	4413      	add	r3, r2
 8013040:	00db      	lsls	r3, r3, #3
 8013042:	4403      	add	r3, r0
 8013044:	3304      	adds	r3, #4
 8013046:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013048:	4299      	cmp	r1, r3
 801304a:	d10a      	bne.n	8013062 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801304c:	4a19      	ldr	r2, [pc, #100]	@ (80130b4 <etharp_output+0x1fc>)
 801304e:	7dfb      	ldrb	r3, [r7, #23]
 8013050:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013052:	7dfb      	ldrb	r3, [r7, #23]
 8013054:	461a      	mov	r2, r3
 8013056:	68b9      	ldr	r1, [r7, #8]
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	f7ff fe93 	bl	8012d84 <etharp_output_to_arp_index>
 801305e:	4603      	mov	r3, r0
 8013060:	e018      	b.n	8013094 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013062:	7dfb      	ldrb	r3, [r7, #23]
 8013064:	3301      	adds	r3, #1
 8013066:	75fb      	strb	r3, [r7, #23]
 8013068:	7dfb      	ldrb	r3, [r7, #23]
 801306a:	2b09      	cmp	r3, #9
 801306c:	d9ca      	bls.n	8013004 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801306e:	68ba      	ldr	r2, [r7, #8]
 8013070:	69b9      	ldr	r1, [r7, #24]
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f000 f822 	bl	80130bc <etharp_query>
 8013078:	4603      	mov	r3, r0
 801307a:	e00b      	b.n	8013094 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013082:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	68b9      	ldr	r1, [r7, #8]
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f001 fd45 	bl	8014b1c <ethernet_output>
 8013092:	4603      	mov	r3, r0
}
 8013094:	4618      	mov	r0, r3
 8013096:	3720      	adds	r7, #32
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	08018d24 	.word	0x08018d24
 80130a0:	08018e74 	.word	0x08018e74
 80130a4:	08018d9c 	.word	0x08018d9c
 80130a8:	08018ec4 	.word	0x08018ec4
 80130ac:	08018e64 	.word	0x08018e64
 80130b0:	08019bfc 	.word	0x08019bfc
 80130b4:	20008d50 	.word	0x20008d50
 80130b8:	20008c60 	.word	0x20008c60

080130bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b08c      	sub	sp, #48	@ 0x30
 80130c0:	af02      	add	r7, sp, #8
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	3326      	adds	r3, #38	@ 0x26
 80130cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80130ce:	23ff      	movs	r3, #255	@ 0xff
 80130d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80130d4:	2300      	movs	r3, #0
 80130d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	68f9      	ldr	r1, [r7, #12]
 80130de:	4618      	mov	r0, r3
 80130e0:	f000 fe0e 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d10c      	bne.n	8013104 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80130f2:	2be0      	cmp	r3, #224	@ 0xe0
 80130f4:	d006      	beq.n	8013104 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d003      	beq.n	8013104 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d102      	bne.n	801310a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013104:	f06f 030f 	mvn.w	r3, #15
 8013108:	e101      	b.n	801330e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801310a:	68fa      	ldr	r2, [r7, #12]
 801310c:	2101      	movs	r1, #1
 801310e:	68b8      	ldr	r0, [r7, #8]
 8013110:	f7ff fb60 	bl	80127d4 <etharp_find_entry>
 8013114:	4603      	mov	r3, r0
 8013116:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013118:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801311c:	2b00      	cmp	r3, #0
 801311e:	da02      	bge.n	8013126 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013120:	8a7b      	ldrh	r3, [r7, #18]
 8013122:	b25b      	sxtb	r3, r3
 8013124:	e0f3      	b.n	801330e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013126:	8a7b      	ldrh	r3, [r7, #18]
 8013128:	2b7e      	cmp	r3, #126	@ 0x7e
 801312a:	d906      	bls.n	801313a <etharp_query+0x7e>
 801312c:	4b7a      	ldr	r3, [pc, #488]	@ (8013318 <etharp_query+0x25c>)
 801312e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013132:	497a      	ldr	r1, [pc, #488]	@ (801331c <etharp_query+0x260>)
 8013134:	487a      	ldr	r0, [pc, #488]	@ (8013320 <etharp_query+0x264>)
 8013136:	f002 fcab 	bl	8015a90 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801313a:	8a7b      	ldrh	r3, [r7, #18]
 801313c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801313e:	7c7a      	ldrb	r2, [r7, #17]
 8013140:	4978      	ldr	r1, [pc, #480]	@ (8013324 <etharp_query+0x268>)
 8013142:	4613      	mov	r3, r2
 8013144:	005b      	lsls	r3, r3, #1
 8013146:	4413      	add	r3, r2
 8013148:	00db      	lsls	r3, r3, #3
 801314a:	440b      	add	r3, r1
 801314c:	3314      	adds	r3, #20
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d115      	bne.n	8013180 <etharp_query+0xc4>
    is_new_entry = 1;
 8013154:	2301      	movs	r3, #1
 8013156:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013158:	7c7a      	ldrb	r2, [r7, #17]
 801315a:	4972      	ldr	r1, [pc, #456]	@ (8013324 <etharp_query+0x268>)
 801315c:	4613      	mov	r3, r2
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	4413      	add	r3, r2
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	440b      	add	r3, r1
 8013166:	3314      	adds	r3, #20
 8013168:	2201      	movs	r2, #1
 801316a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801316c:	7c7a      	ldrb	r2, [r7, #17]
 801316e:	496d      	ldr	r1, [pc, #436]	@ (8013324 <etharp_query+0x268>)
 8013170:	4613      	mov	r3, r2
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	4413      	add	r3, r2
 8013176:	00db      	lsls	r3, r3, #3
 8013178:	440b      	add	r3, r1
 801317a:	3308      	adds	r3, #8
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013180:	7c7a      	ldrb	r2, [r7, #17]
 8013182:	4968      	ldr	r1, [pc, #416]	@ (8013324 <etharp_query+0x268>)
 8013184:	4613      	mov	r3, r2
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	4413      	add	r3, r2
 801318a:	00db      	lsls	r3, r3, #3
 801318c:	440b      	add	r3, r1
 801318e:	3314      	adds	r3, #20
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	2b01      	cmp	r3, #1
 8013194:	d011      	beq.n	80131ba <etharp_query+0xfe>
 8013196:	7c7a      	ldrb	r2, [r7, #17]
 8013198:	4962      	ldr	r1, [pc, #392]	@ (8013324 <etharp_query+0x268>)
 801319a:	4613      	mov	r3, r2
 801319c:	005b      	lsls	r3, r3, #1
 801319e:	4413      	add	r3, r2
 80131a0:	00db      	lsls	r3, r3, #3
 80131a2:	440b      	add	r3, r1
 80131a4:	3314      	adds	r3, #20
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d806      	bhi.n	80131ba <etharp_query+0xfe>
 80131ac:	4b5a      	ldr	r3, [pc, #360]	@ (8013318 <etharp_query+0x25c>)
 80131ae:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80131b2:	495d      	ldr	r1, [pc, #372]	@ (8013328 <etharp_query+0x26c>)
 80131b4:	485a      	ldr	r0, [pc, #360]	@ (8013320 <etharp_query+0x264>)
 80131b6:	f002 fc6b 	bl	8015a90 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80131ba:	6a3b      	ldr	r3, [r7, #32]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d102      	bne.n	80131c6 <etharp_query+0x10a>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d10c      	bne.n	80131e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80131c6:	68b9      	ldr	r1, [r7, #8]
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f000 f963 	bl	8013494 <etharp_request>
 80131ce:	4603      	mov	r3, r0
 80131d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d102      	bne.n	80131e0 <etharp_query+0x124>
      return result;
 80131da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80131de:	e096      	b.n	801330e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d106      	bne.n	80131f4 <etharp_query+0x138>
 80131e6:	4b4c      	ldr	r3, [pc, #304]	@ (8013318 <etharp_query+0x25c>)
 80131e8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80131ec:	494f      	ldr	r1, [pc, #316]	@ (801332c <etharp_query+0x270>)
 80131ee:	484c      	ldr	r0, [pc, #304]	@ (8013320 <etharp_query+0x264>)
 80131f0:	f002 fc4e 	bl	8015a90 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80131f4:	7c7a      	ldrb	r2, [r7, #17]
 80131f6:	494b      	ldr	r1, [pc, #300]	@ (8013324 <etharp_query+0x268>)
 80131f8:	4613      	mov	r3, r2
 80131fa:	005b      	lsls	r3, r3, #1
 80131fc:	4413      	add	r3, r2
 80131fe:	00db      	lsls	r3, r3, #3
 8013200:	440b      	add	r3, r1
 8013202:	3314      	adds	r3, #20
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d917      	bls.n	801323a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801320a:	4a49      	ldr	r2, [pc, #292]	@ (8013330 <etharp_query+0x274>)
 801320c:	7c7b      	ldrb	r3, [r7, #17]
 801320e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013210:	7c7a      	ldrb	r2, [r7, #17]
 8013212:	4613      	mov	r3, r2
 8013214:	005b      	lsls	r3, r3, #1
 8013216:	4413      	add	r3, r2
 8013218:	00db      	lsls	r3, r3, #3
 801321a:	3308      	adds	r3, #8
 801321c:	4a41      	ldr	r2, [pc, #260]	@ (8013324 <etharp_query+0x268>)
 801321e:	4413      	add	r3, r2
 8013220:	3304      	adds	r3, #4
 8013222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013226:	9200      	str	r2, [sp, #0]
 8013228:	697a      	ldr	r2, [r7, #20]
 801322a:	6879      	ldr	r1, [r7, #4]
 801322c:	68f8      	ldr	r0, [r7, #12]
 801322e:	f001 fc75 	bl	8014b1c <ethernet_output>
 8013232:	4603      	mov	r3, r0
 8013234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013238:	e067      	b.n	801330a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801323a:	7c7a      	ldrb	r2, [r7, #17]
 801323c:	4939      	ldr	r1, [pc, #228]	@ (8013324 <etharp_query+0x268>)
 801323e:	4613      	mov	r3, r2
 8013240:	005b      	lsls	r3, r3, #1
 8013242:	4413      	add	r3, r2
 8013244:	00db      	lsls	r3, r3, #3
 8013246:	440b      	add	r3, r1
 8013248:	3314      	adds	r3, #20
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	2b01      	cmp	r3, #1
 801324e:	d15c      	bne.n	801330a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013250:	2300      	movs	r3, #0
 8013252:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013258:	e01c      	b.n	8013294 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801325a:	69fb      	ldr	r3, [r7, #28]
 801325c:	895a      	ldrh	r2, [r3, #10]
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	891b      	ldrh	r3, [r3, #8]
 8013262:	429a      	cmp	r2, r3
 8013264:	d10a      	bne.n	801327c <etharp_query+0x1c0>
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d006      	beq.n	801327c <etharp_query+0x1c0>
 801326e:	4b2a      	ldr	r3, [pc, #168]	@ (8013318 <etharp_query+0x25c>)
 8013270:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8013274:	492f      	ldr	r1, [pc, #188]	@ (8013334 <etharp_query+0x278>)
 8013276:	482a      	ldr	r0, [pc, #168]	@ (8013320 <etharp_query+0x264>)
 8013278:	f002 fc0a 	bl	8015a90 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	7b1b      	ldrb	r3, [r3, #12]
 8013280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013284:	2b00      	cmp	r3, #0
 8013286:	d002      	beq.n	801328e <etharp_query+0x1d2>
        copy_needed = 1;
 8013288:	2301      	movs	r3, #1
 801328a:	61bb      	str	r3, [r7, #24]
        break;
 801328c:	e005      	b.n	801329a <etharp_query+0x1de>
      }
      p = p->next;
 801328e:	69fb      	ldr	r3, [r7, #28]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d1df      	bne.n	801325a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d007      	beq.n	80132b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80132a6:	200e      	movs	r0, #14
 80132a8:	f7f9 fa3c 	bl	800c724 <pbuf_clone>
 80132ac:	61f8      	str	r0, [r7, #28]
 80132ae:	e004      	b.n	80132ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80132b4:	69f8      	ldr	r0, [r7, #28]
 80132b6:	f7f9 f869 	bl	800c38c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d021      	beq.n	8013304 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80132c0:	7c7a      	ldrb	r2, [r7, #17]
 80132c2:	4918      	ldr	r1, [pc, #96]	@ (8013324 <etharp_query+0x268>)
 80132c4:	4613      	mov	r3, r2
 80132c6:	005b      	lsls	r3, r3, #1
 80132c8:	4413      	add	r3, r2
 80132ca:	00db      	lsls	r3, r3, #3
 80132cc:	440b      	add	r3, r1
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d00a      	beq.n	80132ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80132d4:	7c7a      	ldrb	r2, [r7, #17]
 80132d6:	4913      	ldr	r1, [pc, #76]	@ (8013324 <etharp_query+0x268>)
 80132d8:	4613      	mov	r3, r2
 80132da:	005b      	lsls	r3, r3, #1
 80132dc:	4413      	add	r3, r2
 80132de:	00db      	lsls	r3, r3, #3
 80132e0:	440b      	add	r3, r1
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7f8 ffb1 	bl	800c24c <pbuf_free>
      }
      arp_table[i].q = p;
 80132ea:	7c7a      	ldrb	r2, [r7, #17]
 80132ec:	490d      	ldr	r1, [pc, #52]	@ (8013324 <etharp_query+0x268>)
 80132ee:	4613      	mov	r3, r2
 80132f0:	005b      	lsls	r3, r3, #1
 80132f2:	4413      	add	r3, r2
 80132f4:	00db      	lsls	r3, r3, #3
 80132f6:	440b      	add	r3, r1
 80132f8:	69fa      	ldr	r2, [r7, #28]
 80132fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80132fc:	2300      	movs	r3, #0
 80132fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013302:	e002      	b.n	801330a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013304:	23ff      	movs	r3, #255	@ 0xff
 8013306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801330a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801330e:	4618      	mov	r0, r3
 8013310:	3728      	adds	r7, #40	@ 0x28
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	08018d24 	.word	0x08018d24
 801331c:	08018ed0 	.word	0x08018ed0
 8013320:	08018d9c 	.word	0x08018d9c
 8013324:	20008c60 	.word	0x20008c60
 8013328:	08018ee0 	.word	0x08018ee0
 801332c:	08018ec4 	.word	0x08018ec4
 8013330:	20008d50 	.word	0x20008d50
 8013334:	08018f08 	.word	0x08018f08

08013338 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b08a      	sub	sp, #40	@ 0x28
 801333c:	af02      	add	r7, sp, #8
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
 8013344:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013346:	2300      	movs	r3, #0
 8013348:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d106      	bne.n	801335e <etharp_raw+0x26>
 8013350:	4b3a      	ldr	r3, [pc, #232]	@ (801343c <etharp_raw+0x104>)
 8013352:	f240 4257 	movw	r2, #1111	@ 0x457
 8013356:	493a      	ldr	r1, [pc, #232]	@ (8013440 <etharp_raw+0x108>)
 8013358:	483a      	ldr	r0, [pc, #232]	@ (8013444 <etharp_raw+0x10c>)
 801335a:	f002 fb99 	bl	8015a90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801335e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013362:	211c      	movs	r1, #28
 8013364:	200e      	movs	r0, #14
 8013366:	f7f8 fc8d 	bl	800bc84 <pbuf_alloc>
 801336a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d102      	bne.n	8013378 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013372:	f04f 33ff 	mov.w	r3, #4294967295
 8013376:	e05d      	b.n	8013434 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	895b      	ldrh	r3, [r3, #10]
 801337c:	2b1b      	cmp	r3, #27
 801337e:	d806      	bhi.n	801338e <etharp_raw+0x56>
 8013380:	4b2e      	ldr	r3, [pc, #184]	@ (801343c <etharp_raw+0x104>)
 8013382:	f240 4262 	movw	r2, #1122	@ 0x462
 8013386:	4930      	ldr	r1, [pc, #192]	@ (8013448 <etharp_raw+0x110>)
 8013388:	482e      	ldr	r0, [pc, #184]	@ (8013444 <etharp_raw+0x10c>)
 801338a:	f002 fb81 	bl	8015a90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013394:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013396:	4618      	mov	r0, r3
 8013398:	f7f7 fbfa 	bl	800ab90 <lwip_htons>
 801339c:	4603      	mov	r3, r0
 801339e:	461a      	mov	r2, r3
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80133aa:	2b06      	cmp	r3, #6
 80133ac:	d006      	beq.n	80133bc <etharp_raw+0x84>
 80133ae:	4b23      	ldr	r3, [pc, #140]	@ (801343c <etharp_raw+0x104>)
 80133b0:	f240 4269 	movw	r2, #1129	@ 0x469
 80133b4:	4925      	ldr	r1, [pc, #148]	@ (801344c <etharp_raw+0x114>)
 80133b6:	4823      	ldr	r0, [pc, #140]	@ (8013444 <etharp_raw+0x10c>)
 80133b8:	f002 fb6a 	bl	8015a90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	3308      	adds	r3, #8
 80133c0:	2206      	movs	r2, #6
 80133c2:	6839      	ldr	r1, [r7, #0]
 80133c4:	4618      	mov	r0, r3
 80133c6:	f002 fd70 	bl	8015eaa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	3312      	adds	r3, #18
 80133ce:	2206      	movs	r2, #6
 80133d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133d2:	4618      	mov	r0, r3
 80133d4:	f002 fd69 	bl	8015eaa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	330e      	adds	r3, #14
 80133dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133de:	6812      	ldr	r2, [r2, #0]
 80133e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	3318      	adds	r3, #24
 80133e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133e8:	6812      	ldr	r2, [r2, #0]
 80133ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	2200      	movs	r2, #0
 80133f0:	701a      	strb	r2, [r3, #0]
 80133f2:	2200      	movs	r2, #0
 80133f4:	f042 0201 	orr.w	r2, r2, #1
 80133f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	2200      	movs	r2, #0
 80133fe:	f042 0208 	orr.w	r2, r2, #8
 8013402:	709a      	strb	r2, [r3, #2]
 8013404:	2200      	movs	r2, #0
 8013406:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	2206      	movs	r2, #6
 801340c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	2204      	movs	r2, #4
 8013412:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013414:	f640 0306 	movw	r3, #2054	@ 0x806
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	68ba      	ldr	r2, [r7, #8]
 801341e:	69b9      	ldr	r1, [r7, #24]
 8013420:	68f8      	ldr	r0, [r7, #12]
 8013422:	f001 fb7b 	bl	8014b1c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013426:	69b8      	ldr	r0, [r7, #24]
 8013428:	f7f8 ff10 	bl	800c24c <pbuf_free>
  p = NULL;
 801342c:	2300      	movs	r3, #0
 801342e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013430:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013434:	4618      	mov	r0, r3
 8013436:	3720      	adds	r7, #32
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}
 801343c:	08018d24 	.word	0x08018d24
 8013440:	08018e74 	.word	0x08018e74
 8013444:	08018d9c 	.word	0x08018d9c
 8013448:	08018f24 	.word	0x08018f24
 801344c:	08018f58 	.word	0x08018f58

08013450 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b088      	sub	sp, #32
 8013454:	af04      	add	r7, sp, #16
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801346c:	2201      	movs	r2, #1
 801346e:	9203      	str	r2, [sp, #12]
 8013470:	68ba      	ldr	r2, [r7, #8]
 8013472:	9202      	str	r2, [sp, #8]
 8013474:	4a06      	ldr	r2, [pc, #24]	@ (8013490 <etharp_request_dst+0x40>)
 8013476:	9201      	str	r2, [sp, #4]
 8013478:	9300      	str	r3, [sp, #0]
 801347a:	4603      	mov	r3, r0
 801347c:	687a      	ldr	r2, [r7, #4]
 801347e:	68f8      	ldr	r0, [r7, #12]
 8013480:	f7ff ff5a 	bl	8013338 <etharp_raw>
 8013484:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013486:	4618      	mov	r0, r3
 8013488:	3710      	adds	r7, #16
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	08019c04 	.word	0x08019c04

08013494 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
 801349c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801349e:	4a05      	ldr	r2, [pc, #20]	@ (80134b4 <etharp_request+0x20>)
 80134a0:	6839      	ldr	r1, [r7, #0]
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f7ff ffd4 	bl	8013450 <etharp_request_dst>
 80134a8:	4603      	mov	r3, r0
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	08019bfc 	.word	0x08019bfc

080134b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b08e      	sub	sp, #56	@ 0x38
 80134bc:	af04      	add	r7, sp, #16
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80134c2:	4b79      	ldr	r3, [pc, #484]	@ (80136a8 <icmp_input+0x1f0>)
 80134c4:	689b      	ldr	r3, [r3, #8]
 80134c6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80134c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	f003 030f 	and.w	r3, r3, #15
 80134d0:	b2db      	uxtb	r3, r3
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80134d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80134da:	2b13      	cmp	r3, #19
 80134dc:	f240 80cd 	bls.w	801367a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	895b      	ldrh	r3, [r3, #10]
 80134e4:	2b03      	cmp	r3, #3
 80134e6:	f240 80ca 	bls.w	801367e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80134f4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 80b7 	beq.w	801366c <icmp_input+0x1b4>
 80134fe:	2b08      	cmp	r3, #8
 8013500:	f040 80b7 	bne.w	8013672 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013504:	4b69      	ldr	r3, [pc, #420]	@ (80136ac <icmp_input+0x1f4>)
 8013506:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013508:	4b67      	ldr	r3, [pc, #412]	@ (80136a8 <icmp_input+0x1f0>)
 801350a:	695b      	ldr	r3, [r3, #20]
 801350c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013510:	2be0      	cmp	r3, #224	@ 0xe0
 8013512:	f000 80bb 	beq.w	801368c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013516:	4b64      	ldr	r3, [pc, #400]	@ (80136a8 <icmp_input+0x1f0>)
 8013518:	695b      	ldr	r3, [r3, #20]
 801351a:	4a63      	ldr	r2, [pc, #396]	@ (80136a8 <icmp_input+0x1f0>)
 801351c:	6812      	ldr	r2, [r2, #0]
 801351e:	4611      	mov	r1, r2
 8013520:	4618      	mov	r0, r3
 8013522:	f000 fbed 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	f040 80b1 	bne.w	8013690 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	891b      	ldrh	r3, [r3, #8]
 8013532:	2b07      	cmp	r3, #7
 8013534:	f240 80a5 	bls.w	8013682 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013538:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801353a:	330e      	adds	r3, #14
 801353c:	4619      	mov	r1, r3
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f7f8 fdee 	bl	800c120 <pbuf_add_header>
 8013544:	4603      	mov	r3, r0
 8013546:	2b00      	cmp	r3, #0
 8013548:	d04b      	beq.n	80135e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	891a      	ldrh	r2, [r3, #8]
 801354e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013550:	4413      	add	r3, r2
 8013552:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	891b      	ldrh	r3, [r3, #8]
 8013558:	8b7a      	ldrh	r2, [r7, #26]
 801355a:	429a      	cmp	r2, r3
 801355c:	f0c0 809a 	bcc.w	8013694 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013560:	8b7b      	ldrh	r3, [r7, #26]
 8013562:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013566:	4619      	mov	r1, r3
 8013568:	200e      	movs	r0, #14
 801356a:	f7f8 fb8b 	bl	800bc84 <pbuf_alloc>
 801356e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	2b00      	cmp	r3, #0
 8013574:	f000 8090 	beq.w	8013698 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	895b      	ldrh	r3, [r3, #10]
 801357c:	461a      	mov	r2, r3
 801357e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013580:	3308      	adds	r3, #8
 8013582:	429a      	cmp	r2, r3
 8013584:	d203      	bcs.n	801358e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013586:	6978      	ldr	r0, [r7, #20]
 8013588:	f7f8 fe60 	bl	800c24c <pbuf_free>
          goto icmperr;
 801358c:	e085      	b.n	801369a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013596:	4618      	mov	r0, r3
 8013598:	f002 fc87 	bl	8015eaa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801359c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801359e:	4619      	mov	r1, r3
 80135a0:	6978      	ldr	r0, [r7, #20]
 80135a2:	f7f8 fdcd 	bl	800c140 <pbuf_remove_header>
 80135a6:	4603      	mov	r3, r0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d009      	beq.n	80135c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80135ac:	4b40      	ldr	r3, [pc, #256]	@ (80136b0 <icmp_input+0x1f8>)
 80135ae:	22b6      	movs	r2, #182	@ 0xb6
 80135b0:	4940      	ldr	r1, [pc, #256]	@ (80136b4 <icmp_input+0x1fc>)
 80135b2:	4841      	ldr	r0, [pc, #260]	@ (80136b8 <icmp_input+0x200>)
 80135b4:	f002 fa6c 	bl	8015a90 <iprintf>
          pbuf_free(r);
 80135b8:	6978      	ldr	r0, [r7, #20]
 80135ba:	f7f8 fe47 	bl	800c24c <pbuf_free>
          goto icmperr;
 80135be:	e06c      	b.n	801369a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80135c0:	6879      	ldr	r1, [r7, #4]
 80135c2:	6978      	ldr	r0, [r7, #20]
 80135c4:	f7f8 ff6a 	bl	800c49c <pbuf_copy>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d003      	beq.n	80135d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80135ce:	6978      	ldr	r0, [r7, #20]
 80135d0:	f7f8 fe3c 	bl	800c24c <pbuf_free>
          goto icmperr;
 80135d4:	e061      	b.n	801369a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7f8 fe38 	bl	800c24c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	607b      	str	r3, [r7, #4]
 80135e0:	e00f      	b.n	8013602 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80135e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135e4:	330e      	adds	r3, #14
 80135e6:	4619      	mov	r1, r3
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7f8 fda9 	bl	800c140 <pbuf_remove_header>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d006      	beq.n	8013602 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80135f4:	4b2e      	ldr	r3, [pc, #184]	@ (80136b0 <icmp_input+0x1f8>)
 80135f6:	22c7      	movs	r2, #199	@ 0xc7
 80135f8:	4930      	ldr	r1, [pc, #192]	@ (80136bc <icmp_input+0x204>)
 80135fa:	482f      	ldr	r0, [pc, #188]	@ (80136b8 <icmp_input+0x200>)
 80135fc:	f002 fa48 	bl	8015a90 <iprintf>
          goto icmperr;
 8013600:	e04b      	b.n	801369a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013608:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801360a:	4619      	mov	r1, r3
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7f8 fd87 	bl	800c120 <pbuf_add_header>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d12b      	bne.n	8013670 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013626:	4b20      	ldr	r3, [pc, #128]	@ (80136a8 <icmp_input+0x1f0>)
 8013628:	691a      	ldr	r2, [r3, #16]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	2200      	movs	r2, #0
 8013632:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	2200      	movs	r2, #0
 8013638:	709a      	strb	r2, [r3, #2]
 801363a:	2200      	movs	r2, #0
 801363c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	22ff      	movs	r2, #255	@ 0xff
 8013642:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2200      	movs	r2, #0
 8013648:	729a      	strb	r2, [r3, #10]
 801364a:	2200      	movs	r2, #0
 801364c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	9302      	str	r3, [sp, #8]
 8013652:	2301      	movs	r3, #1
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	2300      	movs	r3, #0
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	23ff      	movs	r3, #255	@ 0xff
 801365c:	2200      	movs	r2, #0
 801365e:	69f9      	ldr	r1, [r7, #28]
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 fa75 	bl	8013b50 <ip4_output_if>
 8013666:	4603      	mov	r3, r0
 8013668:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801366a:	e001      	b.n	8013670 <icmp_input+0x1b8>
      break;
 801366c:	bf00      	nop
 801366e:	e000      	b.n	8013672 <icmp_input+0x1ba>
      break;
 8013670:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f7f8 fdea 	bl	800c24c <pbuf_free>
  return;
 8013678:	e013      	b.n	80136a2 <icmp_input+0x1ea>
    goto lenerr;
 801367a:	bf00      	nop
 801367c:	e002      	b.n	8013684 <icmp_input+0x1cc>
    goto lenerr;
 801367e:	bf00      	nop
 8013680:	e000      	b.n	8013684 <icmp_input+0x1cc>
        goto lenerr;
 8013682:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7f8 fde1 	bl	800c24c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801368a:	e00a      	b.n	80136a2 <icmp_input+0x1ea>
        goto icmperr;
 801368c:	bf00      	nop
 801368e:	e004      	b.n	801369a <icmp_input+0x1e2>
        goto icmperr;
 8013690:	bf00      	nop
 8013692:	e002      	b.n	801369a <icmp_input+0x1e2>
          goto icmperr;
 8013694:	bf00      	nop
 8013696:	e000      	b.n	801369a <icmp_input+0x1e2>
          goto icmperr;
 8013698:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f7f8 fdd6 	bl	800c24c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80136a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80136a2:	3728      	adds	r7, #40	@ 0x28
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	20005690 	.word	0x20005690
 80136ac:	200056a4 	.word	0x200056a4
 80136b0:	08018f9c 	.word	0x08018f9c
 80136b4:	08018fd4 	.word	0x08018fd4
 80136b8:	0801900c 	.word	0x0801900c
 80136bc:	08019034 	.word	0x08019034

080136c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	460b      	mov	r3, r1
 80136ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80136cc:	78fb      	ldrb	r3, [r7, #3]
 80136ce:	461a      	mov	r2, r3
 80136d0:	2103      	movs	r1, #3
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 f814 	bl	8013700 <icmp_send_response>
}
 80136d8:	bf00      	nop
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	460b      	mov	r3, r1
 80136ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80136ec:	78fb      	ldrb	r3, [r7, #3]
 80136ee:	461a      	mov	r2, r3
 80136f0:	210b      	movs	r1, #11
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f000 f804 	bl	8013700 <icmp_send_response>
}
 80136f8:	bf00      	nop
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b08c      	sub	sp, #48	@ 0x30
 8013704:	af04      	add	r7, sp, #16
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	460b      	mov	r3, r1
 801370a:	70fb      	strb	r3, [r7, #3]
 801370c:	4613      	mov	r3, r2
 801370e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013710:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013714:	2124      	movs	r1, #36	@ 0x24
 8013716:	2022      	movs	r0, #34	@ 0x22
 8013718:	f7f8 fab4 	bl	800bc84 <pbuf_alloc>
 801371c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d04c      	beq.n	80137be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	895b      	ldrh	r3, [r3, #10]
 8013728:	2b23      	cmp	r3, #35	@ 0x23
 801372a:	d806      	bhi.n	801373a <icmp_send_response+0x3a>
 801372c:	4b26      	ldr	r3, [pc, #152]	@ (80137c8 <icmp_send_response+0xc8>)
 801372e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013732:	4926      	ldr	r1, [pc, #152]	@ (80137cc <icmp_send_response+0xcc>)
 8013734:	4826      	ldr	r0, [pc, #152]	@ (80137d0 <icmp_send_response+0xd0>)
 8013736:	f002 f9ab 	bl	8015a90 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	78fa      	ldrb	r2, [r7, #3]
 801374a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	78ba      	ldrb	r2, [r7, #2]
 8013750:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	2200      	movs	r2, #0
 8013756:	711a      	strb	r2, [r3, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	2200      	movs	r2, #0
 8013760:	719a      	strb	r2, [r3, #6]
 8013762:	2200      	movs	r2, #0
 8013764:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	f103 0008 	add.w	r0, r3, #8
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	221c      	movs	r2, #28
 8013774:	4619      	mov	r1, r3
 8013776:	f002 fb98 	bl	8015eaa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	68db      	ldr	r3, [r3, #12]
 801377e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013780:	f107 030c 	add.w	r3, r7, #12
 8013784:	4618      	mov	r0, r3
 8013786:	f000 f825 	bl	80137d4 <ip4_route>
 801378a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d011      	beq.n	80137b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	2200      	movs	r2, #0
 8013796:	709a      	strb	r2, [r3, #2]
 8013798:	2200      	movs	r2, #0
 801379a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801379c:	f107 020c 	add.w	r2, r7, #12
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	9302      	str	r3, [sp, #8]
 80137a4:	2301      	movs	r3, #1
 80137a6:	9301      	str	r3, [sp, #4]
 80137a8:	2300      	movs	r3, #0
 80137aa:	9300      	str	r3, [sp, #0]
 80137ac:	23ff      	movs	r3, #255	@ 0xff
 80137ae:	2100      	movs	r1, #0
 80137b0:	69f8      	ldr	r0, [r7, #28]
 80137b2:	f000 f9cd 	bl	8013b50 <ip4_output_if>
  }
  pbuf_free(q);
 80137b6:	69f8      	ldr	r0, [r7, #28]
 80137b8:	f7f8 fd48 	bl	800c24c <pbuf_free>
 80137bc:	e000      	b.n	80137c0 <icmp_send_response+0xc0>
    return;
 80137be:	bf00      	nop
}
 80137c0:	3720      	adds	r7, #32
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	08018f9c 	.word	0x08018f9c
 80137cc:	08019068 	.word	0x08019068
 80137d0:	0801900c 	.word	0x0801900c

080137d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80137d4:	b480      	push	{r7}
 80137d6:	b085      	sub	sp, #20
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80137dc:	4b33      	ldr	r3, [pc, #204]	@ (80138ac <ip4_route+0xd8>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	60fb      	str	r3, [r7, #12]
 80137e2:	e036      	b.n	8013852 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137ea:	f003 0301 	and.w	r3, r3, #1
 80137ee:	b2db      	uxtb	r3, r3
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d02b      	beq.n	801384c <ip4_route+0x78>
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137fa:	089b      	lsrs	r3, r3, #2
 80137fc:	f003 0301 	and.w	r3, r3, #1
 8013800:	b2db      	uxtb	r3, r3
 8013802:	2b00      	cmp	r3, #0
 8013804:	d022      	beq.n	801384c <ip4_route+0x78>
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	3304      	adds	r3, #4
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d01d      	beq.n	801384c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681a      	ldr	r2, [r3, #0]
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	3304      	adds	r3, #4
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	405a      	eors	r2, r3
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	3308      	adds	r3, #8
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	4013      	ands	r3, r2
 8013824:	2b00      	cmp	r3, #0
 8013826:	d101      	bne.n	801382c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	e038      	b.n	801389e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013832:	f003 0302 	and.w	r3, r3, #2
 8013836:	2b00      	cmp	r3, #0
 8013838:	d108      	bne.n	801384c <ip4_route+0x78>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	330c      	adds	r3, #12
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	429a      	cmp	r2, r3
 8013846:	d101      	bne.n	801384c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	e028      	b.n	801389e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	60fb      	str	r3, [r7, #12]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d1c5      	bne.n	80137e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013858:	4b15      	ldr	r3, [pc, #84]	@ (80138b0 <ip4_route+0xdc>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d01a      	beq.n	8013896 <ip4_route+0xc2>
 8013860:	4b13      	ldr	r3, [pc, #76]	@ (80138b0 <ip4_route+0xdc>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013868:	f003 0301 	and.w	r3, r3, #1
 801386c:	2b00      	cmp	r3, #0
 801386e:	d012      	beq.n	8013896 <ip4_route+0xc2>
 8013870:	4b0f      	ldr	r3, [pc, #60]	@ (80138b0 <ip4_route+0xdc>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013878:	f003 0304 	and.w	r3, r3, #4
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00a      	beq.n	8013896 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013880:	4b0b      	ldr	r3, [pc, #44]	@ (80138b0 <ip4_route+0xdc>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	3304      	adds	r3, #4
 8013886:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013888:	2b00      	cmp	r3, #0
 801388a:	d004      	beq.n	8013896 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	b2db      	uxtb	r3, r3
 8013892:	2b7f      	cmp	r3, #127	@ 0x7f
 8013894:	d101      	bne.n	801389a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013896:	2300      	movs	r3, #0
 8013898:	e001      	b.n	801389e <ip4_route+0xca>
  }

  return netif_default;
 801389a:	4b05      	ldr	r3, [pc, #20]	@ (80138b0 <ip4_route+0xdc>)
 801389c:	681b      	ldr	r3, [r3, #0]
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	20008bf4 	.word	0x20008bf4
 80138b0:	20008bf8 	.word	0x20008bf8

080138b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80138c2:	f003 0301 	and.w	r3, r3, #1
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d016      	beq.n	80138fa <ip4_input_accept+0x46>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	3304      	adds	r3, #4
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d011      	beq.n	80138fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80138d6:	4b0b      	ldr	r3, [pc, #44]	@ (8013904 <ip4_input_accept+0x50>)
 80138d8:	695a      	ldr	r2, [r3, #20]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	3304      	adds	r3, #4
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d008      	beq.n	80138f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80138e4:	4b07      	ldr	r3, [pc, #28]	@ (8013904 <ip4_input_accept+0x50>)
 80138e6:	695b      	ldr	r3, [r3, #20]
 80138e8:	6879      	ldr	r1, [r7, #4]
 80138ea:	4618      	mov	r0, r3
 80138ec:	f000 fa08 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 80138f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d001      	beq.n	80138fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80138f6:	2301      	movs	r3, #1
 80138f8:	e000      	b.n	80138fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80138fa:	2300      	movs	r3, #0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	20005690 	.word	0x20005690

08013908 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b086      	sub	sp, #24
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	091b      	lsrs	r3, r3, #4
 801391e:	b2db      	uxtb	r3, r3
 8013920:	2b04      	cmp	r3, #4
 8013922:	d004      	beq.n	801392e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7f8 fc91 	bl	800c24c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801392a:	2300      	movs	r3, #0
 801392c:	e107      	b.n	8013b3e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	f003 030f 	and.w	r3, r3, #15
 8013936:	b2db      	uxtb	r3, r3
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	b2db      	uxtb	r3, r3
 801393c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	885b      	ldrh	r3, [r3, #2]
 8013942:	b29b      	uxth	r3, r3
 8013944:	4618      	mov	r0, r3
 8013946:	f7f7 f923 	bl	800ab90 <lwip_htons>
 801394a:	4603      	mov	r3, r0
 801394c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	891b      	ldrh	r3, [r3, #8]
 8013952:	89ba      	ldrh	r2, [r7, #12]
 8013954:	429a      	cmp	r2, r3
 8013956:	d204      	bcs.n	8013962 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013958:	89bb      	ldrh	r3, [r7, #12]
 801395a:	4619      	mov	r1, r3
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7f8 faef 	bl	800bf40 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	895b      	ldrh	r3, [r3, #10]
 8013966:	89fa      	ldrh	r2, [r7, #14]
 8013968:	429a      	cmp	r2, r3
 801396a:	d807      	bhi.n	801397c <ip4_input+0x74>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	891b      	ldrh	r3, [r3, #8]
 8013970:	89ba      	ldrh	r2, [r7, #12]
 8013972:	429a      	cmp	r2, r3
 8013974:	d802      	bhi.n	801397c <ip4_input+0x74>
 8013976:	89fb      	ldrh	r3, [r7, #14]
 8013978:	2b13      	cmp	r3, #19
 801397a:	d804      	bhi.n	8013986 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f7f8 fc65 	bl	800c24c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013982:	2300      	movs	r3, #0
 8013984:	e0db      	b.n	8013b3e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	691b      	ldr	r3, [r3, #16]
 801398a:	4a6f      	ldr	r2, [pc, #444]	@ (8013b48 <ip4_input+0x240>)
 801398c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	68db      	ldr	r3, [r3, #12]
 8013992:	4a6d      	ldr	r2, [pc, #436]	@ (8013b48 <ip4_input+0x240>)
 8013994:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013996:	4b6c      	ldr	r3, [pc, #432]	@ (8013b48 <ip4_input+0x240>)
 8013998:	695b      	ldr	r3, [r3, #20]
 801399a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801399e:	2be0      	cmp	r3, #224	@ 0xe0
 80139a0:	d112      	bne.n	80139c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139a8:	f003 0301 	and.w	r3, r3, #1
 80139ac:	b2db      	uxtb	r3, r3
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d007      	beq.n	80139c2 <ip4_input+0xba>
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	3304      	adds	r3, #4
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d002      	beq.n	80139c2 <ip4_input+0xba>
      netif = inp;
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	613b      	str	r3, [r7, #16]
 80139c0:	e02a      	b.n	8013a18 <ip4_input+0x110>
    } else {
      netif = NULL;
 80139c2:	2300      	movs	r3, #0
 80139c4:	613b      	str	r3, [r7, #16]
 80139c6:	e027      	b.n	8013a18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80139c8:	6838      	ldr	r0, [r7, #0]
 80139ca:	f7ff ff73 	bl	80138b4 <ip4_input_accept>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d002      	beq.n	80139da <ip4_input+0xd2>
      netif = inp;
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	613b      	str	r3, [r7, #16]
 80139d8:	e01e      	b.n	8013a18 <ip4_input+0x110>
    } else {
      netif = NULL;
 80139da:	2300      	movs	r3, #0
 80139dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80139de:	4b5a      	ldr	r3, [pc, #360]	@ (8013b48 <ip4_input+0x240>)
 80139e0:	695b      	ldr	r3, [r3, #20]
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80139e6:	d017      	beq.n	8013a18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80139e8:	4b58      	ldr	r3, [pc, #352]	@ (8013b4c <ip4_input+0x244>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	613b      	str	r3, [r7, #16]
 80139ee:	e00e      	b.n	8013a0e <ip4_input+0x106>
          if (netif == inp) {
 80139f0:	693a      	ldr	r2, [r7, #16]
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d006      	beq.n	8013a06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80139f8:	6938      	ldr	r0, [r7, #16]
 80139fa:	f7ff ff5b 	bl	80138b4 <ip4_input_accept>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d108      	bne.n	8013a16 <ip4_input+0x10e>
 8013a04:	e000      	b.n	8013a08 <ip4_input+0x100>
            continue;
 8013a06:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	613b      	str	r3, [r7, #16]
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d1ed      	bne.n	80139f0 <ip4_input+0xe8>
 8013a14:	e000      	b.n	8013a18 <ip4_input+0x110>
            break;
 8013a16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a18:	4b4b      	ldr	r3, [pc, #300]	@ (8013b48 <ip4_input+0x240>)
 8013a1a:	691b      	ldr	r3, [r3, #16]
 8013a1c:	6839      	ldr	r1, [r7, #0]
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f000 f96e 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d105      	bne.n	8013a36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013a2a:	4b47      	ldr	r3, [pc, #284]	@ (8013b48 <ip4_input+0x240>)
 8013a2c:	691b      	ldr	r3, [r3, #16]
 8013a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a32:	2be0      	cmp	r3, #224	@ 0xe0
 8013a34:	d104      	bne.n	8013a40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013a36:	6878      	ldr	r0, [r7, #4]
 8013a38:	f7f8 fc08 	bl	800c24c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	e07e      	b.n	8013b3e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d104      	bne.n	8013a50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f7f8 fc00 	bl	800c24c <pbuf_free>
    return ERR_OK;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	e076      	b.n	8013b3e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	88db      	ldrh	r3, [r3, #6]
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	461a      	mov	r2, r3
 8013a58:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013a5c:	4013      	ands	r3, r2
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d00b      	beq.n	8013a7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f000 fc92 	bl	801438c <ip4_reass>
 8013a68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d101      	bne.n	8013a74 <ip4_input+0x16c>
      return ERR_OK;
 8013a70:	2300      	movs	r3, #0
 8013a72:	e064      	b.n	8013b3e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013a7a:	4a33      	ldr	r2, [pc, #204]	@ (8013b48 <ip4_input+0x240>)
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013a80:	4a31      	ldr	r2, [pc, #196]	@ (8013b48 <ip4_input+0x240>)
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013a86:	4a30      	ldr	r2, [pc, #192]	@ (8013b48 <ip4_input+0x240>)
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	f003 030f 	and.w	r3, r3, #15
 8013a94:	b2db      	uxtb	r3, r3
 8013a96:	009b      	lsls	r3, r3, #2
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8013b48 <ip4_input+0x240>)
 8013a9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013aa0:	89fb      	ldrh	r3, [r7, #14]
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7f8 fb4b 	bl	800c140 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	7a5b      	ldrb	r3, [r3, #9]
 8013aae:	2b11      	cmp	r3, #17
 8013ab0:	d006      	beq.n	8013ac0 <ip4_input+0x1b8>
 8013ab2:	2b11      	cmp	r3, #17
 8013ab4:	dc13      	bgt.n	8013ade <ip4_input+0x1d6>
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d00c      	beq.n	8013ad4 <ip4_input+0x1cc>
 8013aba:	2b06      	cmp	r3, #6
 8013abc:	d005      	beq.n	8013aca <ip4_input+0x1c2>
 8013abe:	e00e      	b.n	8013ade <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013ac0:	6839      	ldr	r1, [r7, #0]
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f7fe f9b0 	bl	8011e28 <udp_input>
        break;
 8013ac8:	e026      	b.n	8013b18 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013aca:	6839      	ldr	r1, [r7, #0]
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7fa f9f7 	bl	800dec0 <tcp_input>
        break;
 8013ad2:	e021      	b.n	8013b18 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013ad4:	6839      	ldr	r1, [r7, #0]
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f7ff fcee 	bl	80134b8 <icmp_input>
        break;
 8013adc:	e01c      	b.n	8013b18 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013ade:	4b1a      	ldr	r3, [pc, #104]	@ (8013b48 <ip4_input+0x240>)
 8013ae0:	695b      	ldr	r3, [r3, #20]
 8013ae2:	6939      	ldr	r1, [r7, #16]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f000 f90b 	bl	8013d00 <ip4_addr_isbroadcast_u32>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d10f      	bne.n	8013b10 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013af0:	4b15      	ldr	r3, [pc, #84]	@ (8013b48 <ip4_input+0x240>)
 8013af2:	695b      	ldr	r3, [r3, #20]
 8013af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013af8:	2be0      	cmp	r3, #224	@ 0xe0
 8013afa:	d009      	beq.n	8013b10 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013b00:	4619      	mov	r1, r3
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f7f8 fb8f 	bl	800c226 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013b08:	2102      	movs	r1, #2
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f7ff fdd8 	bl	80136c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7f8 fb9b 	bl	800c24c <pbuf_free>
        break;
 8013b16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013b18:	4b0b      	ldr	r3, [pc, #44]	@ (8013b48 <ip4_input+0x240>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8013b48 <ip4_input+0x240>)
 8013b20:	2200      	movs	r2, #0
 8013b22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013b24:	4b08      	ldr	r3, [pc, #32]	@ (8013b48 <ip4_input+0x240>)
 8013b26:	2200      	movs	r2, #0
 8013b28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013b2a:	4b07      	ldr	r3, [pc, #28]	@ (8013b48 <ip4_input+0x240>)
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013b30:	4b05      	ldr	r3, [pc, #20]	@ (8013b48 <ip4_input+0x240>)
 8013b32:	2200      	movs	r2, #0
 8013b34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013b36:	4b04      	ldr	r3, [pc, #16]	@ (8013b48 <ip4_input+0x240>)
 8013b38:	2200      	movs	r2, #0
 8013b3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013b3c:	2300      	movs	r3, #0
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3718      	adds	r7, #24
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	20005690 	.word	0x20005690
 8013b4c:	20008bf4 	.word	0x20008bf4

08013b50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b08a      	sub	sp, #40	@ 0x28
 8013b54:	af04      	add	r7, sp, #16
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
 8013b5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d009      	beq.n	8013b7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d003      	beq.n	8013b76 <ip4_output_if+0x26>
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d102      	bne.n	8013b7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b78:	3304      	adds	r3, #4
 8013b7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013b7c:	78fa      	ldrb	r2, [r7, #3]
 8013b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b80:	9302      	str	r3, [sp, #8]
 8013b82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013b86:	9301      	str	r3, [sp, #4]
 8013b88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013b8c:	9300      	str	r3, [sp, #0]
 8013b8e:	4613      	mov	r3, r2
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	6979      	ldr	r1, [r7, #20]
 8013b94:	68f8      	ldr	r0, [r7, #12]
 8013b96:	f000 f805 	bl	8013ba4 <ip4_output_if_src>
 8013b9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3718      	adds	r7, #24
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b088      	sub	sp, #32
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
 8013bb0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	7b9b      	ldrb	r3, [r3, #14]
 8013bb6:	2b01      	cmp	r3, #1
 8013bb8:	d006      	beq.n	8013bc8 <ip4_output_if_src+0x24>
 8013bba:	4b4b      	ldr	r3, [pc, #300]	@ (8013ce8 <ip4_output_if_src+0x144>)
 8013bbc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013bc0:	494a      	ldr	r1, [pc, #296]	@ (8013cec <ip4_output_if_src+0x148>)
 8013bc2:	484b      	ldr	r0, [pc, #300]	@ (8013cf0 <ip4_output_if_src+0x14c>)
 8013bc4:	f001 ff64 	bl	8015a90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d060      	beq.n	8013c90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013bce:	2314      	movs	r3, #20
 8013bd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013bd2:	2114      	movs	r1, #20
 8013bd4:	68f8      	ldr	r0, [r7, #12]
 8013bd6:	f7f8 faa3 	bl	800c120 <pbuf_add_header>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d002      	beq.n	8013be6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013be0:	f06f 0301 	mvn.w	r3, #1
 8013be4:	e07c      	b.n	8013ce0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	895b      	ldrh	r3, [r3, #10]
 8013bf0:	2b13      	cmp	r3, #19
 8013bf2:	d806      	bhi.n	8013c02 <ip4_output_if_src+0x5e>
 8013bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8013ce8 <ip4_output_if_src+0x144>)
 8013bf6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013bfa:	493e      	ldr	r1, [pc, #248]	@ (8013cf4 <ip4_output_if_src+0x150>)
 8013bfc:	483c      	ldr	r0, [pc, #240]	@ (8013cf0 <ip4_output_if_src+0x14c>)
 8013bfe:	f001 ff47 	bl	8015a90 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	78fa      	ldrb	r2, [r7, #3]
 8013c06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013c0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681a      	ldr	r2, [r3, #0]
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013c18:	8b7b      	ldrh	r3, [r7, #26]
 8013c1a:	089b      	lsrs	r3, r3, #2
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c24:	b2da      	uxtb	r2, r3
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013c2a:	69fb      	ldr	r3, [r7, #28]
 8013c2c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013c30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	891b      	ldrh	r3, [r3, #8]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7f6 ffaa 	bl	800ab90 <lwip_htons>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	461a      	mov	r2, r3
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	2200      	movs	r2, #0
 8013c48:	719a      	strb	r2, [r3, #6]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8013cf8 <ip4_output_if_src+0x154>)
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7f6 ff9c 	bl	800ab90 <lwip_htons>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013c60:	4b25      	ldr	r3, [pc, #148]	@ (8013cf8 <ip4_output_if_src+0x154>)
 8013c62:	881b      	ldrh	r3, [r3, #0]
 8013c64:	3301      	adds	r3, #1
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	4b23      	ldr	r3, [pc, #140]	@ (8013cf8 <ip4_output_if_src+0x154>)
 8013c6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d104      	bne.n	8013c7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013c72:	4b22      	ldr	r3, [pc, #136]	@ (8013cfc <ip4_output_if_src+0x158>)
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	69fb      	ldr	r3, [r7, #28]
 8013c78:	60da      	str	r2, [r3, #12]
 8013c7a:	e003      	b.n	8013c84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013c84:	69fb      	ldr	r3, [r7, #28]
 8013c86:	2200      	movs	r2, #0
 8013c88:	729a      	strb	r2, [r3, #10]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	72da      	strb	r2, [r3, #11]
 8013c8e:	e00f      	b.n	8013cb0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	895b      	ldrh	r3, [r3, #10]
 8013c94:	2b13      	cmp	r3, #19
 8013c96:	d802      	bhi.n	8013c9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013c98:	f06f 0301 	mvn.w	r3, #1
 8013c9c:	e020      	b.n	8013ce0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013ca4:	69fb      	ldr	r3, [r7, #28]
 8013ca6:	691b      	ldr	r3, [r3, #16]
 8013ca8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013caa:	f107 0314 	add.w	r3, r7, #20
 8013cae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00c      	beq.n	8013cd2 <ip4_output_if_src+0x12e>
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	891a      	ldrh	r2, [r3, #8]
 8013cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d906      	bls.n	8013cd2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013cc8:	68f8      	ldr	r0, [r7, #12]
 8013cca:	f000 fd53 	bl	8014774 <ip4_frag>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	e006      	b.n	8013ce0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd4:	695b      	ldr	r3, [r3, #20]
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	68f9      	ldr	r1, [r7, #12]
 8013cda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013cdc:	4798      	blx	r3
 8013cde:	4603      	mov	r3, r0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3720      	adds	r7, #32
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	08019094 	.word	0x08019094
 8013cec:	080190c8 	.word	0x080190c8
 8013cf0:	080190d4 	.word	0x080190d4
 8013cf4:	080190fc 	.word	0x080190fc
 8013cf8:	20008d52 	.word	0x20008d52
 8013cfc:	08019bf8 	.word	0x08019bf8

08013d00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b085      	sub	sp, #20
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d14:	d002      	beq.n	8013d1c <ip4_addr_isbroadcast_u32+0x1c>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d101      	bne.n	8013d20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	e02a      	b.n	8013d76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d26:	f003 0302 	and.w	r3, r3, #2
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d101      	bne.n	8013d32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	e021      	b.n	8013d76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	3304      	adds	r3, #4
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d101      	bne.n	8013d42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e019      	b.n	8013d76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	3304      	adds	r3, #4
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	405a      	eors	r2, r3
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	3308      	adds	r3, #8
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	4013      	ands	r3, r2
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d10d      	bne.n	8013d74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	3308      	adds	r3, #8
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	43da      	mvns	r2, r3
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	3308      	adds	r3, #8
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d101      	bne.n	8013d74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013d70:	2301      	movs	r3, #1
 8013d72:	e000      	b.n	8013d76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013d74:	2300      	movs	r3, #0
  }
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3714      	adds	r7, #20
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr
	...

08013d84 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013d8e:	4b12      	ldr	r3, [pc, #72]	@ (8013dd8 <ip_reass_tmr+0x54>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013d94:	e018      	b.n	8013dc8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	7fdb      	ldrb	r3, [r3, #31]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00b      	beq.n	8013db6 <ip_reass_tmr+0x32>
      r->timer--;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	7fdb      	ldrb	r3, [r3, #31]
 8013da2:	3b01      	subs	r3, #1
 8013da4:	b2da      	uxtb	r2, r3
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	e008      	b.n	8013dc8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013dc0:	68b9      	ldr	r1, [r7, #8]
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f000 f80a 	bl	8013ddc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d1e3      	bne.n	8013d96 <ip_reass_tmr+0x12>
    }
  }
}
 8013dce:	bf00      	nop
 8013dd0:	bf00      	nop
 8013dd2:	3710      	adds	r7, #16
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20008d54 	.word	0x20008d54

08013ddc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b088      	sub	sp, #32
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013dea:	683a      	ldr	r2, [r7, #0]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d105      	bne.n	8013dfe <ip_reass_free_complete_datagram+0x22>
 8013df2:	4b45      	ldr	r3, [pc, #276]	@ (8013f08 <ip_reass_free_complete_datagram+0x12c>)
 8013df4:	22ab      	movs	r2, #171	@ 0xab
 8013df6:	4945      	ldr	r1, [pc, #276]	@ (8013f0c <ip_reass_free_complete_datagram+0x130>)
 8013df8:	4845      	ldr	r0, [pc, #276]	@ (8013f10 <ip_reass_free_complete_datagram+0x134>)
 8013dfa:	f001 fe49 	bl	8015a90 <iprintf>
  if (prev != NULL) {
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d00a      	beq.n	8013e1a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d005      	beq.n	8013e1a <ip_reass_free_complete_datagram+0x3e>
 8013e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8013f08 <ip_reass_free_complete_datagram+0x12c>)
 8013e10:	22ad      	movs	r2, #173	@ 0xad
 8013e12:	4940      	ldr	r1, [pc, #256]	@ (8013f14 <ip_reass_free_complete_datagram+0x138>)
 8013e14:	483e      	ldr	r0, [pc, #248]	@ (8013f10 <ip_reass_free_complete_datagram+0x134>)
 8013e16:	f001 fe3b 	bl	8015a90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	685b      	ldr	r3, [r3, #4]
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	889b      	ldrh	r3, [r3, #4]
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d12a      	bne.n	8013e82 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	681a      	ldr	r2, [r3, #0]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	6858      	ldr	r0, [r3, #4]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	3308      	adds	r3, #8
 8013e42:	2214      	movs	r2, #20
 8013e44:	4619      	mov	r1, r3
 8013e46:	f002 f830 	bl	8015eaa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013e4a:	2101      	movs	r1, #1
 8013e4c:	69b8      	ldr	r0, [r7, #24]
 8013e4e:	f7ff fc47 	bl	80136e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013e52:	69b8      	ldr	r0, [r7, #24]
 8013e54:	f7f8 fa82 	bl	800c35c <pbuf_clen>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013e5c:	8bfa      	ldrh	r2, [r7, #30]
 8013e5e:	8a7b      	ldrh	r3, [r7, #18]
 8013e60:	4413      	add	r3, r2
 8013e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e66:	db05      	blt.n	8013e74 <ip_reass_free_complete_datagram+0x98>
 8013e68:	4b27      	ldr	r3, [pc, #156]	@ (8013f08 <ip_reass_free_complete_datagram+0x12c>)
 8013e6a:	22bc      	movs	r2, #188	@ 0xbc
 8013e6c:	492a      	ldr	r1, [pc, #168]	@ (8013f18 <ip_reass_free_complete_datagram+0x13c>)
 8013e6e:	4828      	ldr	r0, [pc, #160]	@ (8013f10 <ip_reass_free_complete_datagram+0x134>)
 8013e70:	f001 fe0e 	bl	8015a90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013e74:	8bfa      	ldrh	r2, [r7, #30]
 8013e76:	8a7b      	ldrh	r3, [r7, #18]
 8013e78:	4413      	add	r3, r2
 8013e7a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013e7c:	69b8      	ldr	r0, [r7, #24]
 8013e7e:	f7f8 f9e5 	bl	800c24c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013e88:	e01f      	b.n	8013eca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013e9a:	68f8      	ldr	r0, [r7, #12]
 8013e9c:	f7f8 fa5e 	bl	800c35c <pbuf_clen>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013ea4:	8bfa      	ldrh	r2, [r7, #30]
 8013ea6:	8a7b      	ldrh	r3, [r7, #18]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013eae:	db05      	blt.n	8013ebc <ip_reass_free_complete_datagram+0xe0>
 8013eb0:	4b15      	ldr	r3, [pc, #84]	@ (8013f08 <ip_reass_free_complete_datagram+0x12c>)
 8013eb2:	22cc      	movs	r2, #204	@ 0xcc
 8013eb4:	4918      	ldr	r1, [pc, #96]	@ (8013f18 <ip_reass_free_complete_datagram+0x13c>)
 8013eb6:	4816      	ldr	r0, [pc, #88]	@ (8013f10 <ip_reass_free_complete_datagram+0x134>)
 8013eb8:	f001 fdea 	bl	8015a90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013ebc:	8bfa      	ldrh	r2, [r7, #30]
 8013ebe:	8a7b      	ldrh	r3, [r7, #18]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f7f8 f9c1 	bl	800c24c <pbuf_free>
  while (p != NULL) {
 8013eca:	69bb      	ldr	r3, [r7, #24]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d1dc      	bne.n	8013e8a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013ed0:	6839      	ldr	r1, [r7, #0]
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f000 f8c2 	bl	801405c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013ed8:	4b10      	ldr	r3, [pc, #64]	@ (8013f1c <ip_reass_free_complete_datagram+0x140>)
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	8bfa      	ldrh	r2, [r7, #30]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d905      	bls.n	8013eee <ip_reass_free_complete_datagram+0x112>
 8013ee2:	4b09      	ldr	r3, [pc, #36]	@ (8013f08 <ip_reass_free_complete_datagram+0x12c>)
 8013ee4:	22d2      	movs	r2, #210	@ 0xd2
 8013ee6:	490e      	ldr	r1, [pc, #56]	@ (8013f20 <ip_reass_free_complete_datagram+0x144>)
 8013ee8:	4809      	ldr	r0, [pc, #36]	@ (8013f10 <ip_reass_free_complete_datagram+0x134>)
 8013eea:	f001 fdd1 	bl	8015a90 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013eee:	4b0b      	ldr	r3, [pc, #44]	@ (8013f1c <ip_reass_free_complete_datagram+0x140>)
 8013ef0:	881a      	ldrh	r2, [r3, #0]
 8013ef2:	8bfb      	ldrh	r3, [r7, #30]
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	4b08      	ldr	r3, [pc, #32]	@ (8013f1c <ip_reass_free_complete_datagram+0x140>)
 8013efa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013efc:	8bfb      	ldrh	r3, [r7, #30]
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3720      	adds	r7, #32
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	0801912c 	.word	0x0801912c
 8013f0c:	08019168 	.word	0x08019168
 8013f10:	08019174 	.word	0x08019174
 8013f14:	0801919c 	.word	0x0801919c
 8013f18:	080191b0 	.word	0x080191b0
 8013f1c:	20008d58 	.word	0x20008d58
 8013f20:	080191d0 	.word	0x080191d0

08013f24 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b08a      	sub	sp, #40	@ 0x28
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
 8013f2c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013f32:	2300      	movs	r3, #0
 8013f34:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013f36:	2300      	movs	r3, #0
 8013f38:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013f42:	4b28      	ldr	r3, [pc, #160]	@ (8013fe4 <ip_reass_remove_oldest_datagram+0xc0>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013f48:	e030      	b.n	8013fac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f4c:	695a      	ldr	r2, [r3, #20]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d10c      	bne.n	8013f70 <ip_reass_remove_oldest_datagram+0x4c>
 8013f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f58:	699a      	ldr	r2, [r3, #24]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	691b      	ldr	r3, [r3, #16]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d106      	bne.n	8013f70 <ip_reass_remove_oldest_datagram+0x4c>
 8013f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f64:	899a      	ldrh	r2, [r3, #12]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	889b      	ldrh	r3, [r3, #4]
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d014      	beq.n	8013f9a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	3301      	adds	r3, #1
 8013f74:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013f76:	6a3b      	ldr	r3, [r7, #32]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d104      	bne.n	8013f86 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f7e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	61bb      	str	r3, [r7, #24]
 8013f84:	e009      	b.n	8013f9a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f88:	7fda      	ldrb	r2, [r3, #31]
 8013f8a:	6a3b      	ldr	r3, [r7, #32]
 8013f8c:	7fdb      	ldrb	r3, [r3, #31]
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d803      	bhi.n	8013f9a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f94:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d001      	beq.n	8013fa6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d1cb      	bne.n	8013f4a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013fb2:	6a3b      	ldr	r3, [r7, #32]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d008      	beq.n	8013fca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013fb8:	69b9      	ldr	r1, [r7, #24]
 8013fba:	6a38      	ldr	r0, [r7, #32]
 8013fbc:	f7ff ff0e 	bl	8013ddc <ip_reass_free_complete_datagram>
 8013fc0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013fc2:	697a      	ldr	r2, [r7, #20]
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013fca:	697a      	ldr	r2, [r7, #20]
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	da02      	bge.n	8013fd8 <ip_reass_remove_oldest_datagram+0xb4>
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	2b01      	cmp	r3, #1
 8013fd6:	dcac      	bgt.n	8013f32 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013fd8:	697b      	ldr	r3, [r7, #20]
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3728      	adds	r7, #40	@ 0x28
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	20008d54 	.word	0x20008d54

08013fe8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013ff2:	2004      	movs	r0, #4
 8013ff4:	f7f7 fa44 	bl	800b480 <memp_malloc>
 8013ff8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d110      	bne.n	8014022 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014000:	6839      	ldr	r1, [r7, #0]
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f7ff ff8e 	bl	8013f24 <ip_reass_remove_oldest_datagram>
 8014008:	4602      	mov	r2, r0
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	4293      	cmp	r3, r2
 801400e:	dc03      	bgt.n	8014018 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014010:	2004      	movs	r0, #4
 8014012:	f7f7 fa35 	bl	800b480 <memp_malloc>
 8014016:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d101      	bne.n	8014022 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801401e:	2300      	movs	r3, #0
 8014020:	e016      	b.n	8014050 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014022:	2220      	movs	r2, #32
 8014024:	2100      	movs	r1, #0
 8014026:	68f8      	ldr	r0, [r7, #12]
 8014028:	f001 fe8a 	bl	8015d40 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	220f      	movs	r2, #15
 8014030:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014032:	4b09      	ldr	r3, [pc, #36]	@ (8014058 <ip_reass_enqueue_new_datagram+0x70>)
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801403a:	4a07      	ldr	r2, [pc, #28]	@ (8014058 <ip_reass_enqueue_new_datagram+0x70>)
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	3308      	adds	r3, #8
 8014044:	2214      	movs	r2, #20
 8014046:	6879      	ldr	r1, [r7, #4]
 8014048:	4618      	mov	r0, r3
 801404a:	f001 ff2e 	bl	8015eaa <memcpy>
  return ipr;
 801404e:	68fb      	ldr	r3, [r7, #12]
}
 8014050:	4618      	mov	r0, r3
 8014052:	3710      	adds	r7, #16
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	20008d54 	.word	0x20008d54

0801405c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014066:	4b10      	ldr	r3, [pc, #64]	@ (80140a8 <ip_reass_dequeue_datagram+0x4c>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	429a      	cmp	r2, r3
 801406e:	d104      	bne.n	801407a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	4a0c      	ldr	r2, [pc, #48]	@ (80140a8 <ip_reass_dequeue_datagram+0x4c>)
 8014076:	6013      	str	r3, [r2, #0]
 8014078:	e00d      	b.n	8014096 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d106      	bne.n	801408e <ip_reass_dequeue_datagram+0x32>
 8014080:	4b0a      	ldr	r3, [pc, #40]	@ (80140ac <ip_reass_dequeue_datagram+0x50>)
 8014082:	f240 1245 	movw	r2, #325	@ 0x145
 8014086:	490a      	ldr	r1, [pc, #40]	@ (80140b0 <ip_reass_dequeue_datagram+0x54>)
 8014088:	480a      	ldr	r0, [pc, #40]	@ (80140b4 <ip_reass_dequeue_datagram+0x58>)
 801408a:	f001 fd01 	bl	8015a90 <iprintf>
    prev->next = ipr->next;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014096:	6879      	ldr	r1, [r7, #4]
 8014098:	2004      	movs	r0, #4
 801409a:	f7f7 fa61 	bl	800b560 <memp_free>
}
 801409e:	bf00      	nop
 80140a0:	3708      	adds	r7, #8
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}
 80140a6:	bf00      	nop
 80140a8:	20008d54 	.word	0x20008d54
 80140ac:	0801912c 	.word	0x0801912c
 80140b0:	080191f4 	.word	0x080191f4
 80140b4:	08019174 	.word	0x08019174

080140b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b08c      	sub	sp, #48	@ 0x30
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	60b9      	str	r1, [r7, #8]
 80140c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80140c4:	2300      	movs	r3, #0
 80140c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80140c8:	2301      	movs	r3, #1
 80140ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	885b      	ldrh	r3, [r3, #2]
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	4618      	mov	r0, r3
 80140da:	f7f6 fd59 	bl	800ab90 <lwip_htons>
 80140de:	4603      	mov	r3, r0
 80140e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80140e2:	69fb      	ldr	r3, [r7, #28]
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	f003 030f 	and.w	r3, r3, #15
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80140f0:	7e7b      	ldrb	r3, [r7, #25]
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	8b7a      	ldrh	r2, [r7, #26]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d202      	bcs.n	8014100 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140fa:	f04f 33ff 	mov.w	r3, #4294967295
 80140fe:	e135      	b.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014100:	7e7b      	ldrb	r3, [r7, #25]
 8014102:	b29b      	uxth	r3, r3
 8014104:	8b7a      	ldrh	r2, [r7, #26]
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	88db      	ldrh	r3, [r3, #6]
 801410e:	b29b      	uxth	r3, r3
 8014110:	4618      	mov	r0, r3
 8014112:	f7f6 fd3d 	bl	800ab90 <lwip_htons>
 8014116:	4603      	mov	r3, r0
 8014118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801411c:	b29b      	uxth	r3, r3
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	685b      	ldr	r3, [r3, #4]
 8014126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8014128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801412a:	2200      	movs	r2, #0
 801412c:	701a      	strb	r2, [r3, #0]
 801412e:	2200      	movs	r2, #0
 8014130:	705a      	strb	r2, [r3, #1]
 8014132:	2200      	movs	r2, #0
 8014134:	709a      	strb	r2, [r3, #2]
 8014136:	2200      	movs	r2, #0
 8014138:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801413a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801413c:	8afa      	ldrh	r2, [r7, #22]
 801413e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014140:	8afa      	ldrh	r2, [r7, #22]
 8014142:	8b7b      	ldrh	r3, [r7, #26]
 8014144:	4413      	add	r3, r2
 8014146:	b29a      	uxth	r2, r3
 8014148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801414a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801414e:	88db      	ldrh	r3, [r3, #6]
 8014150:	b29b      	uxth	r3, r3
 8014152:	8afa      	ldrh	r2, [r7, #22]
 8014154:	429a      	cmp	r2, r3
 8014156:	d902      	bls.n	801415e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014158:	f04f 33ff 	mov.w	r3, #4294967295
 801415c:	e106      	b.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	627b      	str	r3, [r7, #36]	@ 0x24
 8014164:	e068      	b.n	8014238 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801416e:	889b      	ldrh	r3, [r3, #4]
 8014170:	b29a      	uxth	r2, r3
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	889b      	ldrh	r3, [r3, #4]
 8014176:	b29b      	uxth	r3, r3
 8014178:	429a      	cmp	r2, r3
 801417a:	d235      	bcs.n	80141e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801417c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801417e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014180:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014184:	2b00      	cmp	r3, #0
 8014186:	d020      	beq.n	80141ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418a:	889b      	ldrh	r3, [r3, #4]
 801418c:	b29a      	uxth	r2, r3
 801418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014190:	88db      	ldrh	r3, [r3, #6]
 8014192:	b29b      	uxth	r3, r3
 8014194:	429a      	cmp	r2, r3
 8014196:	d307      	bcc.n	80141a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801419a:	88db      	ldrh	r3, [r3, #6]
 801419c:	b29a      	uxth	r2, r3
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	889b      	ldrh	r3, [r3, #4]
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d902      	bls.n	80141ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141a8:	f04f 33ff 	mov.w	r3, #4294967295
 80141ac:	e0de      	b.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80141ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b0:	68ba      	ldr	r2, [r7, #8]
 80141b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80141b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b6:	88db      	ldrh	r3, [r3, #6]
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141bc:	889b      	ldrh	r3, [r3, #4]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d03d      	beq.n	8014240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80141c4:	2300      	movs	r3, #0
 80141c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80141c8:	e03a      	b.n	8014240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80141ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141cc:	88db      	ldrh	r3, [r3, #6]
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	889b      	ldrh	r3, [r3, #4]
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d902      	bls.n	80141e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141da:	f04f 33ff 	mov.w	r3, #4294967295
 80141de:	e0c5      	b.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	68ba      	ldr	r2, [r7, #8]
 80141e4:	605a      	str	r2, [r3, #4]
      break;
 80141e6:	e02b      	b.n	8014240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80141e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ea:	889b      	ldrh	r3, [r3, #4]
 80141ec:	b29a      	uxth	r2, r3
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	889b      	ldrh	r3, [r3, #4]
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d102      	bne.n	80141fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141f8:	f04f 33ff 	mov.w	r3, #4294967295
 80141fc:	e0b6      	b.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80141fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014200:	889b      	ldrh	r3, [r3, #4]
 8014202:	b29a      	uxth	r2, r3
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	88db      	ldrh	r3, [r3, #6]
 8014208:	b29b      	uxth	r3, r3
 801420a:	429a      	cmp	r2, r3
 801420c:	d202      	bcs.n	8014214 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801420e:	f04f 33ff 	mov.w	r3, #4294967295
 8014212:	e0ab      	b.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014216:	2b00      	cmp	r3, #0
 8014218:	d009      	beq.n	801422e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421c:	88db      	ldrh	r3, [r3, #6]
 801421e:	b29a      	uxth	r2, r3
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	889b      	ldrh	r3, [r3, #4]
 8014224:	b29b      	uxth	r3, r3
 8014226:	429a      	cmp	r2, r3
 8014228:	d001      	beq.n	801422e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801422a:	2300      	movs	r3, #0
 801422c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8014238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801423a:	2b00      	cmp	r3, #0
 801423c:	d193      	bne.n	8014166 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801423e:	e000      	b.n	8014242 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014240:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014244:	2b00      	cmp	r3, #0
 8014246:	d12d      	bne.n	80142a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801424a:	2b00      	cmp	r3, #0
 801424c:	d01c      	beq.n	8014288 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014250:	88db      	ldrh	r3, [r3, #6]
 8014252:	b29a      	uxth	r2, r3
 8014254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014256:	889b      	ldrh	r3, [r3, #4]
 8014258:	b29b      	uxth	r3, r3
 801425a:	429a      	cmp	r2, r3
 801425c:	d906      	bls.n	801426c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801425e:	4b45      	ldr	r3, [pc, #276]	@ (8014374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014260:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8014264:	4944      	ldr	r1, [pc, #272]	@ (8014378 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014266:	4845      	ldr	r0, [pc, #276]	@ (801437c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014268:	f001 fc12 	bl	8015a90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801426e:	68ba      	ldr	r2, [r7, #8]
 8014270:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014274:	88db      	ldrh	r3, [r3, #6]
 8014276:	b29a      	uxth	r2, r3
 8014278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801427a:	889b      	ldrh	r3, [r3, #4]
 801427c:	b29b      	uxth	r3, r3
 801427e:	429a      	cmp	r2, r3
 8014280:	d010      	beq.n	80142a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014282:	2300      	movs	r3, #0
 8014284:	623b      	str	r3, [r7, #32]
 8014286:	e00d      	b.n	80142a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	685b      	ldr	r3, [r3, #4]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d006      	beq.n	801429e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014290:	4b38      	ldr	r3, [pc, #224]	@ (8014374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014292:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8014296:	493a      	ldr	r1, [pc, #232]	@ (8014380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014298:	4838      	ldr	r0, [pc, #224]	@ (801437c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801429a:	f001 fbf9 	bl	8015a90 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d105      	bne.n	80142b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	7f9b      	ldrb	r3, [r3, #30]
 80142ae:	f003 0301 	and.w	r3, r3, #1
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d059      	beq.n	801436a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80142b6:	6a3b      	ldr	r3, [r7, #32]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d04f      	beq.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d006      	beq.n	80142d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	889b      	ldrh	r3, [r3, #4]
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d002      	beq.n	80142d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80142d2:	2300      	movs	r3, #0
 80142d4:	623b      	str	r3, [r7, #32]
 80142d6:	e041      	b.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80142d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142da:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80142dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80142e2:	e012      	b.n	801430a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80142e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80142ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ec:	88db      	ldrh	r3, [r3, #6]
 80142ee:	b29a      	uxth	r2, r3
 80142f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f2:	889b      	ldrh	r3, [r3, #4]
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d002      	beq.n	8014300 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80142fa:	2300      	movs	r3, #0
 80142fc:	623b      	str	r3, [r7, #32]
            break;
 80142fe:	e007      	b.n	8014310 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014302:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801430c:	2b00      	cmp	r3, #0
 801430e:	d1e9      	bne.n	80142e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014310:	6a3b      	ldr	r3, [r7, #32]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d022      	beq.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d106      	bne.n	801432c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801431e:	4b15      	ldr	r3, [pc, #84]	@ (8014374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014320:	f240 12df 	movw	r2, #479	@ 0x1df
 8014324:	4917      	ldr	r1, [pc, #92]	@ (8014384 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014326:	4815      	ldr	r0, [pc, #84]	@ (801437c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014328:	f001 fbb2 	bl	8015a90 <iprintf>
          LWIP_ASSERT("sanity check",
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014334:	429a      	cmp	r2, r3
 8014336:	d106      	bne.n	8014346 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014338:	4b0e      	ldr	r3, [pc, #56]	@ (8014374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801433a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801433e:	4911      	ldr	r1, [pc, #68]	@ (8014384 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014340:	480e      	ldr	r0, [pc, #56]	@ (801437c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014342:	f001 fba5 	bl	8015a90 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d006      	beq.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801434e:	4b09      	ldr	r3, [pc, #36]	@ (8014374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014350:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8014354:	490c      	ldr	r1, [pc, #48]	@ (8014388 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014356:	4809      	ldr	r0, [pc, #36]	@ (801437c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014358:	f001 fb9a 	bl	8015a90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801435c:	6a3b      	ldr	r3, [r7, #32]
 801435e:	2b00      	cmp	r3, #0
 8014360:	bf14      	ite	ne
 8014362:	2301      	movne	r3, #1
 8014364:	2300      	moveq	r3, #0
 8014366:	b2db      	uxtb	r3, r3
 8014368:	e000      	b.n	801436c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801436a:	2300      	movs	r3, #0
}
 801436c:	4618      	mov	r0, r3
 801436e:	3730      	adds	r7, #48	@ 0x30
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}
 8014374:	0801912c 	.word	0x0801912c
 8014378:	08019210 	.word	0x08019210
 801437c:	08019174 	.word	0x08019174
 8014380:	08019230 	.word	0x08019230
 8014384:	08019268 	.word	0x08019268
 8014388:	08019278 	.word	0x08019278

0801438c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b08e      	sub	sp, #56	@ 0x38
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	f003 030f 	and.w	r3, r3, #15
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	2b14      	cmp	r3, #20
 80143aa:	f040 8171 	bne.w	8014690 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80143ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b0:	88db      	ldrh	r3, [r3, #6]
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7f6 fbeb 	bl	800ab90 <lwip_htons>
 80143ba:	4603      	mov	r3, r0
 80143bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	00db      	lsls	r3, r3, #3
 80143c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80143c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143c8:	885b      	ldrh	r3, [r3, #2]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7f6 fbdf 	bl	800ab90 <lwip_htons>
 80143d2:	4603      	mov	r3, r0
 80143d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80143d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	f003 030f 	and.w	r3, r3, #15
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	009b      	lsls	r3, r3, #2
 80143e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80143e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80143ea:	b29b      	uxth	r3, r3
 80143ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80143ee:	429a      	cmp	r2, r3
 80143f0:	f0c0 8150 	bcc.w	8014694 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80143f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80143fc:	1ad3      	subs	r3, r2, r3
 80143fe:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f7f7 ffab 	bl	800c35c <pbuf_clen>
 8014406:	4603      	mov	r3, r0
 8014408:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801440a:	4b8c      	ldr	r3, [pc, #560]	@ (801463c <ip4_reass+0x2b0>)
 801440c:	881b      	ldrh	r3, [r3, #0]
 801440e:	461a      	mov	r2, r3
 8014410:	8c3b      	ldrh	r3, [r7, #32]
 8014412:	4413      	add	r3, r2
 8014414:	2b0a      	cmp	r3, #10
 8014416:	dd10      	ble.n	801443a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014418:	8c3b      	ldrh	r3, [r7, #32]
 801441a:	4619      	mov	r1, r3
 801441c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801441e:	f7ff fd81 	bl	8013f24 <ip_reass_remove_oldest_datagram>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	f000 8137 	beq.w	8014698 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801442a:	4b84      	ldr	r3, [pc, #528]	@ (801463c <ip4_reass+0x2b0>)
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	461a      	mov	r2, r3
 8014430:	8c3b      	ldrh	r3, [r7, #32]
 8014432:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014434:	2b0a      	cmp	r3, #10
 8014436:	f300 812f 	bgt.w	8014698 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801443a:	4b81      	ldr	r3, [pc, #516]	@ (8014640 <ip4_reass+0x2b4>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014440:	e015      	b.n	801446e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014444:	695a      	ldr	r2, [r3, #20]
 8014446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	429a      	cmp	r2, r3
 801444c:	d10c      	bne.n	8014468 <ip4_reass+0xdc>
 801444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014450:	699a      	ldr	r2, [r3, #24]
 8014452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014454:	691b      	ldr	r3, [r3, #16]
 8014456:	429a      	cmp	r2, r3
 8014458:	d106      	bne.n	8014468 <ip4_reass+0xdc>
 801445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801445c:	899a      	ldrh	r2, [r3, #12]
 801445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014460:	889b      	ldrh	r3, [r3, #4]
 8014462:	b29b      	uxth	r3, r3
 8014464:	429a      	cmp	r2, r3
 8014466:	d006      	beq.n	8014476 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	633b      	str	r3, [r7, #48]	@ 0x30
 801446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014470:	2b00      	cmp	r3, #0
 8014472:	d1e6      	bne.n	8014442 <ip4_reass+0xb6>
 8014474:	e000      	b.n	8014478 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014476:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801447a:	2b00      	cmp	r3, #0
 801447c:	d109      	bne.n	8014492 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801447e:	8c3b      	ldrh	r3, [r7, #32]
 8014480:	4619      	mov	r1, r3
 8014482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014484:	f7ff fdb0 	bl	8013fe8 <ip_reass_enqueue_new_datagram>
 8014488:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801448c:	2b00      	cmp	r3, #0
 801448e:	d11c      	bne.n	80144ca <ip4_reass+0x13e>
      goto nullreturn;
 8014490:	e105      	b.n	801469e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014494:	88db      	ldrh	r3, [r3, #6]
 8014496:	b29b      	uxth	r3, r3
 8014498:	4618      	mov	r0, r3
 801449a:	f7f6 fb79 	bl	800ab90 <lwip_htons>
 801449e:	4603      	mov	r3, r0
 80144a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d110      	bne.n	80144ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80144a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144aa:	89db      	ldrh	r3, [r3, #14]
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7f6 fb6f 	bl	800ab90 <lwip_htons>
 80144b2:	4603      	mov	r3, r0
 80144b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d006      	beq.n	80144ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80144bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144be:	3308      	adds	r3, #8
 80144c0:	2214      	movs	r2, #20
 80144c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80144c4:	4618      	mov	r0, r3
 80144c6:	f001 fcf0 	bl	8015eaa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80144ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144cc:	88db      	ldrh	r3, [r3, #6]
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	f003 0320 	and.w	r3, r3, #32
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	bf0c      	ite	eq
 80144d8:	2301      	moveq	r3, #1
 80144da:	2300      	movne	r3, #0
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d00e      	beq.n	8014504 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80144e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80144e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144ea:	4413      	add	r3, r2
 80144ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80144ee:	8b7a      	ldrh	r2, [r7, #26]
 80144f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80144f2:	429a      	cmp	r2, r3
 80144f4:	f0c0 80a0 	bcc.w	8014638 <ip4_reass+0x2ac>
 80144f8:	8b7b      	ldrh	r3, [r7, #26]
 80144fa:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80144fe:	4293      	cmp	r3, r2
 8014500:	f200 809a 	bhi.w	8014638 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014504:	69fa      	ldr	r2, [r7, #28]
 8014506:	6879      	ldr	r1, [r7, #4]
 8014508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801450a:	f7ff fdd5 	bl	80140b8 <ip_reass_chain_frag_into_datagram_and_validate>
 801450e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014516:	f000 809b 	beq.w	8014650 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801451a:	4b48      	ldr	r3, [pc, #288]	@ (801463c <ip4_reass+0x2b0>)
 801451c:	881a      	ldrh	r2, [r3, #0]
 801451e:	8c3b      	ldrh	r3, [r7, #32]
 8014520:	4413      	add	r3, r2
 8014522:	b29a      	uxth	r2, r3
 8014524:	4b45      	ldr	r3, [pc, #276]	@ (801463c <ip4_reass+0x2b0>)
 8014526:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00d      	beq.n	801454a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801452e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014530:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014532:	4413      	add	r3, r2
 8014534:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014538:	8a7a      	ldrh	r2, [r7, #18]
 801453a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801453e:	7f9b      	ldrb	r3, [r3, #30]
 8014540:	f043 0301 	orr.w	r3, r3, #1
 8014544:	b2da      	uxtb	r2, r3
 8014546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014548:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	2b01      	cmp	r3, #1
 801454e:	d171      	bne.n	8014634 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014552:	8b9b      	ldrh	r3, [r3, #28]
 8014554:	3314      	adds	r3, #20
 8014556:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801456c:	3308      	adds	r3, #8
 801456e:	2214      	movs	r2, #20
 8014570:	4619      	mov	r1, r3
 8014572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014574:	f001 fc99 	bl	8015eaa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014578:	8a3b      	ldrh	r3, [r7, #16]
 801457a:	4618      	mov	r0, r3
 801457c:	f7f6 fb08 	bl	800ab90 <lwip_htons>
 8014580:	4603      	mov	r3, r0
 8014582:	461a      	mov	r2, r3
 8014584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014586:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801458a:	2200      	movs	r2, #0
 801458c:	719a      	strb	r2, [r3, #6]
 801458e:	2200      	movs	r2, #0
 8014590:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014594:	2200      	movs	r2, #0
 8014596:	729a      	strb	r2, [r3, #10]
 8014598:	2200      	movs	r2, #0
 801459a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80145a2:	e00d      	b.n	80145c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80145a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145a6:	685b      	ldr	r3, [r3, #4]
 80145a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80145aa:	2114      	movs	r1, #20
 80145ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80145ae:	f7f7 fdc7 	bl	800c140 <pbuf_remove_header>
      pbuf_cat(p, r);
 80145b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f7f7 ff0b 	bl	800c3d0 <pbuf_cat>
      r = iprh->next_pbuf;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80145c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1ee      	bne.n	80145a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80145c6:	4b1e      	ldr	r3, [pc, #120]	@ (8014640 <ip4_reass+0x2b4>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d102      	bne.n	80145d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80145d0:	2300      	movs	r3, #0
 80145d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145d4:	e010      	b.n	80145f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80145d6:	4b1a      	ldr	r3, [pc, #104]	@ (8014640 <ip4_reass+0x2b4>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145dc:	e007      	b.n	80145ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80145de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d006      	beq.n	80145f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80145e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d1f4      	bne.n	80145de <ip4_reass+0x252>
 80145f4:	e000      	b.n	80145f8 <ip4_reass+0x26c>
          break;
 80145f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80145f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80145fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145fc:	f7ff fd2e 	bl	801405c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7f7 feab 	bl	800c35c <pbuf_clen>
 8014606:	4603      	mov	r3, r0
 8014608:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801460a:	4b0c      	ldr	r3, [pc, #48]	@ (801463c <ip4_reass+0x2b0>)
 801460c:	881b      	ldrh	r3, [r3, #0]
 801460e:	8c3a      	ldrh	r2, [r7, #32]
 8014610:	429a      	cmp	r2, r3
 8014612:	d906      	bls.n	8014622 <ip4_reass+0x296>
 8014614:	4b0b      	ldr	r3, [pc, #44]	@ (8014644 <ip4_reass+0x2b8>)
 8014616:	f240 229b 	movw	r2, #667	@ 0x29b
 801461a:	490b      	ldr	r1, [pc, #44]	@ (8014648 <ip4_reass+0x2bc>)
 801461c:	480b      	ldr	r0, [pc, #44]	@ (801464c <ip4_reass+0x2c0>)
 801461e:	f001 fa37 	bl	8015a90 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014622:	4b06      	ldr	r3, [pc, #24]	@ (801463c <ip4_reass+0x2b0>)
 8014624:	881a      	ldrh	r2, [r3, #0]
 8014626:	8c3b      	ldrh	r3, [r7, #32]
 8014628:	1ad3      	subs	r3, r2, r3
 801462a:	b29a      	uxth	r2, r3
 801462c:	4b03      	ldr	r3, [pc, #12]	@ (801463c <ip4_reass+0x2b0>)
 801462e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	e038      	b.n	80146a6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014634:	2300      	movs	r3, #0
 8014636:	e036      	b.n	80146a6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014638:	bf00      	nop
 801463a:	e00a      	b.n	8014652 <ip4_reass+0x2c6>
 801463c:	20008d58 	.word	0x20008d58
 8014640:	20008d54 	.word	0x20008d54
 8014644:	0801912c 	.word	0x0801912c
 8014648:	0801929c 	.word	0x0801929c
 801464c:	08019174 	.word	0x08019174
    goto nullreturn_ipr;
 8014650:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014654:	2b00      	cmp	r3, #0
 8014656:	d106      	bne.n	8014666 <ip4_reass+0x2da>
 8014658:	4b15      	ldr	r3, [pc, #84]	@ (80146b0 <ip4_reass+0x324>)
 801465a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801465e:	4915      	ldr	r1, [pc, #84]	@ (80146b4 <ip4_reass+0x328>)
 8014660:	4815      	ldr	r0, [pc, #84]	@ (80146b8 <ip4_reass+0x32c>)
 8014662:	f001 fa15 	bl	8015a90 <iprintf>
  if (ipr->p == NULL) {
 8014666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014668:	685b      	ldr	r3, [r3, #4]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d116      	bne.n	801469c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801466e:	4b13      	ldr	r3, [pc, #76]	@ (80146bc <ip4_reass+0x330>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014674:	429a      	cmp	r2, r3
 8014676:	d006      	beq.n	8014686 <ip4_reass+0x2fa>
 8014678:	4b0d      	ldr	r3, [pc, #52]	@ (80146b0 <ip4_reass+0x324>)
 801467a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801467e:	4910      	ldr	r1, [pc, #64]	@ (80146c0 <ip4_reass+0x334>)
 8014680:	480d      	ldr	r0, [pc, #52]	@ (80146b8 <ip4_reass+0x32c>)
 8014682:	f001 fa05 	bl	8015a90 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014686:	2100      	movs	r1, #0
 8014688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801468a:	f7ff fce7 	bl	801405c <ip_reass_dequeue_datagram>
 801468e:	e006      	b.n	801469e <ip4_reass+0x312>
    goto nullreturn;
 8014690:	bf00      	nop
 8014692:	e004      	b.n	801469e <ip4_reass+0x312>
    goto nullreturn;
 8014694:	bf00      	nop
 8014696:	e002      	b.n	801469e <ip4_reass+0x312>
      goto nullreturn;
 8014698:	bf00      	nop
 801469a:	e000      	b.n	801469e <ip4_reass+0x312>
  }

nullreturn:
 801469c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f7f7 fdd4 	bl	800c24c <pbuf_free>
  return NULL;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3738      	adds	r7, #56	@ 0x38
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	0801912c 	.word	0x0801912c
 80146b4:	080192b8 	.word	0x080192b8
 80146b8:	08019174 	.word	0x08019174
 80146bc:	20008d54 	.word	0x20008d54
 80146c0:	080192c4 	.word	0x080192c4

080146c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80146c8:	2005      	movs	r0, #5
 80146ca:	f7f6 fed9 	bl	800b480 <memp_malloc>
 80146ce:	4603      	mov	r3, r0
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d106      	bne.n	80146f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80146e2:	4b07      	ldr	r3, [pc, #28]	@ (8014700 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80146e4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80146e8:	4906      	ldr	r1, [pc, #24]	@ (8014704 <ip_frag_free_pbuf_custom_ref+0x30>)
 80146ea:	4807      	ldr	r0, [pc, #28]	@ (8014708 <ip_frag_free_pbuf_custom_ref+0x34>)
 80146ec:	f001 f9d0 	bl	8015a90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80146f0:	6879      	ldr	r1, [r7, #4]
 80146f2:	2005      	movs	r0, #5
 80146f4:	f7f6 ff34 	bl	800b560 <memp_free>
}
 80146f8:	bf00      	nop
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	0801912c 	.word	0x0801912c
 8014704:	080192e4 	.word	0x080192e4
 8014708:	08019174 	.word	0x08019174

0801470c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d106      	bne.n	801472c <ipfrag_free_pbuf_custom+0x20>
 801471e:	4b11      	ldr	r3, [pc, #68]	@ (8014764 <ipfrag_free_pbuf_custom+0x58>)
 8014720:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014724:	4910      	ldr	r1, [pc, #64]	@ (8014768 <ipfrag_free_pbuf_custom+0x5c>)
 8014726:	4811      	ldr	r0, [pc, #68]	@ (801476c <ipfrag_free_pbuf_custom+0x60>)
 8014728:	f001 f9b2 	bl	8015a90 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801472c:	68fa      	ldr	r2, [r7, #12]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	429a      	cmp	r2, r3
 8014732:	d006      	beq.n	8014742 <ipfrag_free_pbuf_custom+0x36>
 8014734:	4b0b      	ldr	r3, [pc, #44]	@ (8014764 <ipfrag_free_pbuf_custom+0x58>)
 8014736:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801473a:	490d      	ldr	r1, [pc, #52]	@ (8014770 <ipfrag_free_pbuf_custom+0x64>)
 801473c:	480b      	ldr	r0, [pc, #44]	@ (801476c <ipfrag_free_pbuf_custom+0x60>)
 801473e:	f001 f9a7 	bl	8015a90 <iprintf>
  if (pcr->original != NULL) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	695b      	ldr	r3, [r3, #20]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d004      	beq.n	8014754 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	695b      	ldr	r3, [r3, #20]
 801474e:	4618      	mov	r0, r3
 8014750:	f7f7 fd7c 	bl	800c24c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f7ff ffbd 	bl	80146d4 <ip_frag_free_pbuf_custom_ref>
}
 801475a:	bf00      	nop
 801475c:	3710      	adds	r7, #16
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}
 8014762:	bf00      	nop
 8014764:	0801912c 	.word	0x0801912c
 8014768:	080192f0 	.word	0x080192f0
 801476c:	08019174 	.word	0x08019174
 8014770:	080192fc 	.word	0x080192fc

08014774 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b094      	sub	sp, #80	@ 0x50
 8014778:	af02      	add	r7, sp, #8
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014780:	2300      	movs	r3, #0
 8014782:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801478a:	3b14      	subs	r3, #20
 801478c:	2b00      	cmp	r3, #0
 801478e:	da00      	bge.n	8014792 <ip4_frag+0x1e>
 8014790:	3307      	adds	r3, #7
 8014792:	10db      	asrs	r3, r3, #3
 8014794:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014796:	2314      	movs	r3, #20
 8014798:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80147a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80147a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	f003 030f 	and.w	r3, r3, #15
 80147ac:	b2db      	uxtb	r3, r3
 80147ae:	009b      	lsls	r3, r3, #2
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	2b14      	cmp	r3, #20
 80147b4:	d002      	beq.n	80147bc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80147b6:	f06f 0305 	mvn.w	r3, #5
 80147ba:	e110      	b.n	80149de <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	895b      	ldrh	r3, [r3, #10]
 80147c0:	2b13      	cmp	r3, #19
 80147c2:	d809      	bhi.n	80147d8 <ip4_frag+0x64>
 80147c4:	4b88      	ldr	r3, [pc, #544]	@ (80149e8 <ip4_frag+0x274>)
 80147c6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80147ca:	4988      	ldr	r1, [pc, #544]	@ (80149ec <ip4_frag+0x278>)
 80147cc:	4888      	ldr	r0, [pc, #544]	@ (80149f0 <ip4_frag+0x27c>)
 80147ce:	f001 f95f 	bl	8015a90 <iprintf>
 80147d2:	f06f 0305 	mvn.w	r3, #5
 80147d6:	e102      	b.n	80149de <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80147d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147da:	88db      	ldrh	r3, [r3, #6]
 80147dc:	b29b      	uxth	r3, r3
 80147de:	4618      	mov	r0, r3
 80147e0:	f7f6 f9d6 	bl	800ab90 <lwip_htons>
 80147e4:	4603      	mov	r3, r0
 80147e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80147e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80147ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80147ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80147f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80147f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80147f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	891b      	ldrh	r3, [r3, #8]
 80147fe:	3b14      	subs	r3, #20
 8014800:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014804:	e0e1      	b.n	80149ca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014806:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014808:	00db      	lsls	r3, r3, #3
 801480a:	b29b      	uxth	r3, r3
 801480c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014810:	4293      	cmp	r3, r2
 8014812:	bf28      	it	cs
 8014814:	4613      	movcs	r3, r2
 8014816:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014818:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801481c:	2114      	movs	r1, #20
 801481e:	200e      	movs	r0, #14
 8014820:	f7f7 fa30 	bl	800bc84 <pbuf_alloc>
 8014824:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014828:	2b00      	cmp	r3, #0
 801482a:	f000 80d5 	beq.w	80149d8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014830:	895b      	ldrh	r3, [r3, #10]
 8014832:	2b13      	cmp	r3, #19
 8014834:	d806      	bhi.n	8014844 <ip4_frag+0xd0>
 8014836:	4b6c      	ldr	r3, [pc, #432]	@ (80149e8 <ip4_frag+0x274>)
 8014838:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801483c:	496d      	ldr	r1, [pc, #436]	@ (80149f4 <ip4_frag+0x280>)
 801483e:	486c      	ldr	r0, [pc, #432]	@ (80149f0 <ip4_frag+0x27c>)
 8014840:	f001 f926 	bl	8015a90 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	2214      	movs	r2, #20
 801484a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801484c:	4618      	mov	r0, r3
 801484e:	f001 fb2c 	bl	8015eaa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014858:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801485a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801485e:	e064      	b.n	801492a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	895a      	ldrh	r2, [r3, #10]
 8014864:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	895b      	ldrh	r3, [r3, #10]
 801486e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014870:	429a      	cmp	r2, r3
 8014872:	d906      	bls.n	8014882 <ip4_frag+0x10e>
 8014874:	4b5c      	ldr	r3, [pc, #368]	@ (80149e8 <ip4_frag+0x274>)
 8014876:	f240 322d 	movw	r2, #813	@ 0x32d
 801487a:	495f      	ldr	r1, [pc, #380]	@ (80149f8 <ip4_frag+0x284>)
 801487c:	485c      	ldr	r0, [pc, #368]	@ (80149f0 <ip4_frag+0x27c>)
 801487e:	f001 f907 	bl	8015a90 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014882:	8bfa      	ldrh	r2, [r7, #30]
 8014884:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014888:	4293      	cmp	r3, r2
 801488a:	bf28      	it	cs
 801488c:	4613      	movcs	r3, r2
 801488e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014892:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014896:	2b00      	cmp	r3, #0
 8014898:	d105      	bne.n	80148a6 <ip4_frag+0x132>
        poff = 0;
 801489a:	2300      	movs	r3, #0
 801489c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	60fb      	str	r3, [r7, #12]
        continue;
 80148a4:	e041      	b.n	801492a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80148a6:	f7ff ff0d 	bl	80146c4 <ip_frag_alloc_pbuf_custom_ref>
 80148aa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80148ac:	69bb      	ldr	r3, [r7, #24]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d103      	bne.n	80148ba <ip4_frag+0x146>
        pbuf_free(rambuf);
 80148b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80148b4:	f7f7 fcca 	bl	800c24c <pbuf_free>
        goto memerr;
 80148b8:	e08f      	b.n	80149da <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80148ba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80148c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80148c2:	4413      	add	r3, r2
 80148c4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80148c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80148cc:	9201      	str	r2, [sp, #4]
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	4603      	mov	r3, r0
 80148d2:	2241      	movs	r2, #65	@ 0x41
 80148d4:	2000      	movs	r0, #0
 80148d6:	f7f7 faff 	bl	800bed8 <pbuf_alloced_custom>
 80148da:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d106      	bne.n	80148f0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80148e2:	69b8      	ldr	r0, [r7, #24]
 80148e4:	f7ff fef6 	bl	80146d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80148e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80148ea:	f7f7 fcaf 	bl	800c24c <pbuf_free>
        goto memerr;
 80148ee:	e074      	b.n	80149da <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80148f0:	68f8      	ldr	r0, [r7, #12]
 80148f2:	f7f7 fd4b 	bl	800c38c <pbuf_ref>
      pcr->original = p;
 80148f6:	69bb      	ldr	r3, [r7, #24]
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80148fc:	69bb      	ldr	r3, [r7, #24]
 80148fe:	4a3f      	ldr	r2, [pc, #252]	@ (80149fc <ip4_frag+0x288>)
 8014900:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014902:	6979      	ldr	r1, [r7, #20]
 8014904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014906:	f7f7 fd63 	bl	800c3d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801490a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801490e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014918:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801491c:	2b00      	cmp	r3, #0
 801491e:	d004      	beq.n	801492a <ip4_frag+0x1b6>
        poff = 0;
 8014920:	2300      	movs	r3, #0
 8014922:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801492a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801492e:	2b00      	cmp	r3, #0
 8014930:	d196      	bne.n	8014860 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014932:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014934:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014938:	4413      	add	r3, r2
 801493a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014940:	f1a3 0213 	sub.w	r2, r3, #19
 8014944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014948:	429a      	cmp	r2, r3
 801494a:	bfcc      	ite	gt
 801494c:	2301      	movgt	r3, #1
 801494e:	2300      	movle	r3, #0
 8014950:	b2db      	uxtb	r3, r3
 8014952:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014954:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801495c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801495e:	6a3b      	ldr	r3, [r7, #32]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d002      	beq.n	801496a <ip4_frag+0x1f6>
 8014964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014966:	2b00      	cmp	r3, #0
 8014968:	d003      	beq.n	8014972 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801496a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801496c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014970:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014972:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014974:	4618      	mov	r0, r3
 8014976:	f7f6 f90b 	bl	800ab90 <lwip_htons>
 801497a:	4603      	mov	r3, r0
 801497c:	461a      	mov	r2, r3
 801497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014980:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014982:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014984:	3314      	adds	r3, #20
 8014986:	b29b      	uxth	r3, r3
 8014988:	4618      	mov	r0, r3
 801498a:	f7f6 f901 	bl	800ab90 <lwip_htons>
 801498e:	4603      	mov	r3, r0
 8014990:	461a      	mov	r2, r3
 8014992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014994:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014998:	2200      	movs	r2, #0
 801499a:	729a      	strb	r2, [r3, #10]
 801499c:	2200      	movs	r2, #0
 801499e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	695b      	ldr	r3, [r3, #20]
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80149a8:	68b8      	ldr	r0, [r7, #8]
 80149aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80149ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149ae:	f7f7 fc4d 	bl	800c24c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80149b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80149b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80149b8:	1ad3      	subs	r3, r2, r3
 80149ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80149be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80149c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80149c4:	4413      	add	r3, r2
 80149c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80149ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	f47f af19 	bne.w	8014806 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80149d4:	2300      	movs	r3, #0
 80149d6:	e002      	b.n	80149de <ip4_frag+0x26a>
      goto memerr;
 80149d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80149da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3748      	adds	r7, #72	@ 0x48
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	0801912c 	.word	0x0801912c
 80149ec:	08019308 	.word	0x08019308
 80149f0:	08019174 	.word	0x08019174
 80149f4:	08019324 	.word	0x08019324
 80149f8:	08019344 	.word	0x08019344
 80149fc:	0801470d 	.word	0x0801470d

08014a00 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b086      	sub	sp, #24
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014a0a:	230e      	movs	r3, #14
 8014a0c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	895b      	ldrh	r3, [r3, #10]
 8014a12:	2b0e      	cmp	r3, #14
 8014a14:	d96e      	bls.n	8014af4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	7bdb      	ldrb	r3, [r3, #15]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d106      	bne.n	8014a2c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a24:	3301      	adds	r3, #1
 8014a26:	b2da      	uxtb	r2, r3
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014a32:	693b      	ldr	r3, [r7, #16]
 8014a34:	7b1a      	ldrb	r2, [r3, #12]
 8014a36:	7b5b      	ldrb	r3, [r3, #13]
 8014a38:	021b      	lsls	r3, r3, #8
 8014a3a:	4313      	orrs	r3, r2
 8014a3c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	f003 0301 	and.w	r3, r3, #1
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d023      	beq.n	8014a92 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	d10f      	bne.n	8014a72 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	785b      	ldrb	r3, [r3, #1]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d11b      	bne.n	8014a92 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014a5e:	2b5e      	cmp	r3, #94	@ 0x5e
 8014a60:	d117      	bne.n	8014a92 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	7b5b      	ldrb	r3, [r3, #13]
 8014a66:	f043 0310 	orr.w	r3, r3, #16
 8014a6a:	b2da      	uxtb	r2, r3
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	735a      	strb	r2, [r3, #13]
 8014a70:	e00f      	b.n	8014a92 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014a72:	693b      	ldr	r3, [r7, #16]
 8014a74:	2206      	movs	r2, #6
 8014a76:	4928      	ldr	r1, [pc, #160]	@ (8014b18 <ethernet_input+0x118>)
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f001 f951 	bl	8015d20 <memcmp>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d106      	bne.n	8014a92 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	7b5b      	ldrb	r3, [r3, #13]
 8014a88:	f043 0308 	orr.w	r3, r3, #8
 8014a8c:	b2da      	uxtb	r2, r3
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014a92:	89fb      	ldrh	r3, [r7, #14]
 8014a94:	2b08      	cmp	r3, #8
 8014a96:	d003      	beq.n	8014aa0 <ethernet_input+0xa0>
 8014a98:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014a9c:	d014      	beq.n	8014ac8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014a9e:	e032      	b.n	8014b06 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014aa6:	f003 0308 	and.w	r3, r3, #8
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d024      	beq.n	8014af8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014aae:	8afb      	ldrh	r3, [r7, #22]
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f7f7 fb44 	bl	800c140 <pbuf_remove_header>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d11e      	bne.n	8014afc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014abe:	6839      	ldr	r1, [r7, #0]
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f7fe ff21 	bl	8013908 <ip4_input>
      break;
 8014ac6:	e013      	b.n	8014af0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ace:	f003 0308 	and.w	r3, r3, #8
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d014      	beq.n	8014b00 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014ad6:	8afb      	ldrh	r3, [r7, #22]
 8014ad8:	4619      	mov	r1, r3
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f7f7 fb30 	bl	800c140 <pbuf_remove_header>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d10e      	bne.n	8014b04 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014ae6:	6839      	ldr	r1, [r7, #0]
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f7fe f8c1 	bl	8012c70 <etharp_input>
      break;
 8014aee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014af0:	2300      	movs	r3, #0
 8014af2:	e00c      	b.n	8014b0e <ethernet_input+0x10e>
    goto free_and_return;
 8014af4:	bf00      	nop
 8014af6:	e006      	b.n	8014b06 <ethernet_input+0x106>
        goto free_and_return;
 8014af8:	bf00      	nop
 8014afa:	e004      	b.n	8014b06 <ethernet_input+0x106>
        goto free_and_return;
 8014afc:	bf00      	nop
 8014afe:	e002      	b.n	8014b06 <ethernet_input+0x106>
        goto free_and_return;
 8014b00:	bf00      	nop
 8014b02:	e000      	b.n	8014b06 <ethernet_input+0x106>
        goto free_and_return;
 8014b04:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f7f7 fba0 	bl	800c24c <pbuf_free>
  return ERR_OK;
 8014b0c:	2300      	movs	r3, #0
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3718      	adds	r7, #24
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	08019bfc 	.word	0x08019bfc

08014b1c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b086      	sub	sp, #24
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	60f8      	str	r0, [r7, #12]
 8014b24:	60b9      	str	r1, [r7, #8]
 8014b26:	607a      	str	r2, [r7, #4]
 8014b28:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014b2a:	8c3b      	ldrh	r3, [r7, #32]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7f6 f82f 	bl	800ab90 <lwip_htons>
 8014b32:	4603      	mov	r3, r0
 8014b34:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014b36:	210e      	movs	r1, #14
 8014b38:	68b8      	ldr	r0, [r7, #8]
 8014b3a:	f7f7 faf1 	bl	800c120 <pbuf_add_header>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d125      	bne.n	8014b90 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	8afa      	ldrh	r2, [r7, #22]
 8014b4e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014b50:	693b      	ldr	r3, [r7, #16]
 8014b52:	2206      	movs	r2, #6
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f001 f9a7 	bl	8015eaa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014b5c:	693b      	ldr	r3, [r7, #16]
 8014b5e:	3306      	adds	r3, #6
 8014b60:	2206      	movs	r2, #6
 8014b62:	6879      	ldr	r1, [r7, #4]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f001 f9a0 	bl	8015eaa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014b70:	2b06      	cmp	r3, #6
 8014b72:	d006      	beq.n	8014b82 <ethernet_output+0x66>
 8014b74:	4b0a      	ldr	r3, [pc, #40]	@ (8014ba0 <ethernet_output+0x84>)
 8014b76:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014b7a:	490a      	ldr	r1, [pc, #40]	@ (8014ba4 <ethernet_output+0x88>)
 8014b7c:	480a      	ldr	r0, [pc, #40]	@ (8014ba8 <ethernet_output+0x8c>)
 8014b7e:	f000 ff87 	bl	8015a90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	699b      	ldr	r3, [r3, #24]
 8014b86:	68b9      	ldr	r1, [r7, #8]
 8014b88:	68f8      	ldr	r0, [r7, #12]
 8014b8a:	4798      	blx	r3
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	e002      	b.n	8014b96 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014b90:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014b92:	f06f 0301 	mvn.w	r3, #1
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3718      	adds	r7, #24
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	08019354 	.word	0x08019354
 8014ba4:	0801938c 	.word	0x0801938c
 8014ba8:	080193c0 	.word	0x080193c0

08014bac <rtg_main>:
u16_t dest_port = 0;
struct udp_pcb *upcb;
uint8_t incomming_buffer[MAX_BUF_LEN] = {0};
u16_t incomming_len = 0;

void rtg_main() {
 8014bac:	b580      	push	{r7, lr}
 8014bae:	af00      	add	r7, sp, #0
    printf("UDP Server is running...\r\n");
 8014bb0:	480a      	ldr	r0, [pc, #40]	@ (8014bdc <rtg_main+0x30>)
 8014bb2:	f000 ffd5 	bl	8015b60 <puts>
    udpServer_init();
 8014bb6:	f000 f96b 	bl	8014e90 <udpServer_init>

    while (1) {
        ethernetif_input(&gnetif);
 8014bba:	4809      	ldr	r0, [pc, #36]	@ (8014be0 <rtg_main+0x34>)
 8014bbc:	f7f5 fd64 	bl	800a688 <ethernetif_input>
        sys_check_timeouts();
 8014bc0:	f7fd f842 	bl	8011c48 <sys_check_timeouts>

        if (callback_flag == 1) {
 8014bc4:	4b07      	ldr	r3, [pc, #28]	@ (8014be4 <rtg_main+0x38>)
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d1f6      	bne.n	8014bba <rtg_main+0xe>
            printf("Received command for testing\r\n");
 8014bcc:	4806      	ldr	r0, [pc, #24]	@ (8014be8 <rtg_main+0x3c>)
 8014bce:	f000 ffc7 	bl	8015b60 <puts>
            callback_flag = 0;
 8014bd2:	4b04      	ldr	r3, [pc, #16]	@ (8014be4 <rtg_main+0x38>)
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	701a      	strb	r2, [r3, #0]
        ethernetif_input(&gnetif);
 8014bd8:	e7ef      	b.n	8014bba <rtg_main+0xe>
 8014bda:	bf00      	nop
 8014bdc:	080193e8 	.word	0x080193e8
 8014be0:	20000bb0 	.word	0x20000bb0
 8014be4:	20008d5a 	.word	0x20008d5a
 8014be8:	08019404 	.word	0x08019404

08014bec <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	b29a      	uxth	r2, r3
 8014bfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014c00:	68b9      	ldr	r1, [r7, #8]
 8014c02:	4804      	ldr	r0, [pc, #16]	@ (8014c14 <_write+0x28>)
 8014c04:	f7f3 fc68 	bl	80084d8 <HAL_UART_Transmit>
	return len;
 8014c08:	687b      	ldr	r3, [r7, #4]
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3710      	adds	r7, #16
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	bf00      	nop
 8014c14:	20000558 	.word	0x20000558

08014c18 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8014c22:	1df9      	adds	r1, r7, #7
 8014c24:	f04f 33ff 	mov.w	r3, #4294967295
 8014c28:	2201      	movs	r2, #1
 8014c2a:	4807      	ldr	r0, [pc, #28]	@ (8014c48 <__io_getchar+0x30>)
 8014c2c:	f7f3 fcd7 	bl	80085de <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8014c30:	1df9      	adds	r1, r7, #7
 8014c32:	f04f 33ff 	mov.w	r3, #4294967295
 8014c36:	2201      	movs	r2, #1
 8014c38:	4803      	ldr	r0, [pc, #12]	@ (8014c48 <__io_getchar+0x30>)
 8014c3a:	f7f3 fc4d 	bl	80084d8 <HAL_UART_Transmit>
	return ch;
 8014c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3708      	adds	r7, #8
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}
 8014c48:	20000558 	.word	0x20000558

08014c4c <_read>:

int _read(int file, char *ptr, int len) {
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b086      	sub	sp, #24
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	617b      	str	r3, [r7, #20]
	char ch;

	for (; DataIdx < len; DataIdx++) {
 8014c5c:	e016      	b.n	8014c8c <_read+0x40>
		ch = __io_getchar();
 8014c5e:	f7ff ffdb 	bl	8014c18 <__io_getchar>
 8014c62:	4603      	mov	r3, r0
 8014c64:	74fb      	strb	r3, [r7, #19]
		*ptr = ch;
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	7cfa      	ldrb	r2, [r7, #19]
 8014c6a:	701a      	strb	r2, [r3, #0]
		ptr++;
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	3301      	adds	r3, #1
 8014c70:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8014c72:	7cfb      	ldrb	r3, [r7, #19]
 8014c74:	2b0d      	cmp	r3, #13
 8014c76:	d002      	beq.n	8014c7e <_read+0x32>
 8014c78:	7cfb      	ldrb	r3, [r7, #19]
 8014c7a:	2b0a      	cmp	r3, #10
 8014c7c:	d103      	bne.n	8014c86 <_read+0x3a>
			*(ptr) = 0;
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	2200      	movs	r2, #0
 8014c82:	701a      	strb	r2, [r3, #0]
			break;
 8014c84:	e006      	b.n	8014c94 <_read+0x48>
	for (; DataIdx < len; DataIdx++) {
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	617b      	str	r3, [r7, #20]
 8014c8c:	697a      	ldr	r2, [r7, #20]
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	429a      	cmp	r2, r3
 8014c92:	dbe4      	blt.n	8014c5e <_read+0x12>
		}
	}
	return DataIdx + 1;
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	3301      	adds	r3, #1
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3718      	adds	r7, #24
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <execute_test>:
#include "ADC_test.h"
#include "Timer_test.h"
#include "SPI_test.h"
#include "I2C_test.h"

static uint8_t execute_test(TestCommand* command) {
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
    printf("Executing test for Peripheral: %u, Test-ID: %u\r\n",
           (unsigned int)command->peripheral,
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	791b      	ldrb	r3, [r3, #4]
    printf("Executing test for Peripheral: %u, Test-ID: %u\r\n",
 8014cac:	4619      	mov	r1, r3
           (unsigned int)command->test_id);
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
    printf("Executing test for Peripheral: %u, Test-ID: %u\r\n",
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	4833      	ldr	r0, [pc, #204]	@ (8014d84 <execute_test+0xe4>)
 8014cb6:	f000 feeb 	bl	8015a90 <iprintf>

    switch (command->peripheral) {
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	791b      	ldrb	r3, [r3, #4]
 8014cbe:	3b01      	subs	r3, #1
 8014cc0:	2b0f      	cmp	r3, #15
 8014cc2:	d853      	bhi.n	8014d6c <execute_test+0xcc>
 8014cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8014ccc <execute_test+0x2c>)
 8014cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cca:	bf00      	nop
 8014ccc:	08014d31 	.word	0x08014d31
 8014cd0:	08014d0d 	.word	0x08014d0d
 8014cd4:	08014d6d 	.word	0x08014d6d
 8014cd8:	08014d3f 	.word	0x08014d3f
 8014cdc:	08014d6d 	.word	0x08014d6d
 8014ce0:	08014d6d 	.word	0x08014d6d
 8014ce4:	08014d6d 	.word	0x08014d6d
 8014ce8:	08014d57 	.word	0x08014d57
 8014cec:	08014d6d 	.word	0x08014d6d
 8014cf0:	08014d6d 	.word	0x08014d6d
 8014cf4:	08014d6d 	.word	0x08014d6d
 8014cf8:	08014d6d 	.word	0x08014d6d
 8014cfc:	08014d6d 	.word	0x08014d6d
 8014d00:	08014d6d 	.word	0x08014d6d
 8014d04:	08014d6d 	.word	0x08014d6d
 8014d08:	08014d23 	.word	0x08014d23
        case TEST_PERIPHERAL_UART:
            return test_uart(command->bit_pattern, command->pattern_length, command->iterations);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	1dd8      	adds	r0, r3, #7
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	7999      	ldrb	r1, [r3, #6]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	795b      	ldrb	r3, [r3, #5]
 8014d18:	461a      	mov	r2, r3
 8014d1a:	f000 fbb7 	bl	801548c <test_uart>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	e02b      	b.n	8014d7a <execute_test+0xda>
        case TEST_PERIPHERAL_ADC:
            return test_adc(command->iterations);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	795b      	ldrb	r3, [r3, #5]
 8014d26:	4618      	mov	r0, r3
 8014d28:	f000 f8e4 	bl	8014ef4 <test_adc>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	e024      	b.n	8014d7a <execute_test+0xda>
        case TEST_PERIPHERAL_TIMER:
            return test_timer(command->iterations);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	795b      	ldrb	r3, [r3, #5]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f000 fabb 	bl	80152b0 <test_timer>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	e01d      	b.n	8014d7a <execute_test+0xda>
        case TEST_PERIPHERAL_SPI:
            return test_spi(command->bit_pattern, command->pattern_length, command->iterations);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	1dd8      	adds	r0, r3, #7
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	799b      	ldrb	r3, [r3, #6]
 8014d46:	4619      	mov	r1, r3
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	795b      	ldrb	r3, [r3, #5]
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	f000 f9f5 	bl	801513c <test_spi>
 8014d52:	4603      	mov	r3, r0
 8014d54:	e011      	b.n	8014d7a <execute_test+0xda>
        case TEST_PERIPHERAL_I2C:
            return test_i2c(command->bit_pattern, command->pattern_length, command->iterations);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	1dd8      	adds	r0, r3, #7
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	7999      	ldrb	r1, [r3, #6]
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	795b      	ldrb	r3, [r3, #5]
 8014d62:	461a      	mov	r2, r3
 8014d64:	f000 f958 	bl	8015018 <test_i2c>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	e006      	b.n	8014d7a <execute_test+0xda>
        default:
            printf("Invalid peripheral for testing: %d\r\n", command->peripheral);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	791b      	ldrb	r3, [r3, #4]
 8014d70:	4619      	mov	r1, r3
 8014d72:	4805      	ldr	r0, [pc, #20]	@ (8014d88 <execute_test+0xe8>)
 8014d74:	f000 fe8c 	bl	8015a90 <iprintf>
            return 0xFF;
 8014d78:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3708      	adds	r7, #8
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}
 8014d82:	bf00      	nop
 8014d84:	08019424 	.word	0x08019424
 8014d88:	08019458 	.word	0x08019458

08014d8c <udp_receive_callback>:

void udp_receive_callback(void* arg, struct udp_pcb* upcb, struct pbuf* p, const ip_addr_t* addr, u16_t port) {
 8014d8c:	b590      	push	{r4, r7, lr}
 8014d8e:	b0a5      	sub	sp, #148	@ 0x94
 8014d90:	af02      	add	r7, sp, #8
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
 8014d98:	603b      	str	r3, [r7, #0]
    TestCommand command;
    TestResult result;

    // Parse incoming command
    memcpy(&command, p->payload, sizeof(TestCommand));
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6859      	ldr	r1, [r3, #4]
 8014d9e:	f107 031c 	add.w	r3, r7, #28
 8014da2:	226c      	movs	r2, #108	@ 0x6c
 8014da4:	4618      	mov	r0, r3
 8014da6:	f001 f880 	bl	8015eaa <memcpy>
    pbuf_free(p);
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7f7 fa4e 	bl	800c24c <pbuf_free>

    // Validate pattern length
       if (command.pattern_length != strlen(command.bit_pattern)) {
 8014db0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014db4:	461c      	mov	r4, r3
 8014db6:	f107 031c 	add.w	r3, r7, #28
 8014dba:	3307      	adds	r3, #7
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7eb fa27 	bl	8000210 <strlen>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	429c      	cmp	r4, r3
 8014dc6:	d01c      	beq.n	8014e02 <udp_receive_callback+0x76>
           printf("Pattern length mismatch. Expected: %d, Received: %d\r\n", (int)strlen(command.bit_pattern), command.pattern_length);
 8014dc8:	f107 031c 	add.w	r3, r7, #28
 8014dcc:	3307      	adds	r3, #7
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7eb fa1e 	bl	8000210 <strlen>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014ddc:	461a      	mov	r2, r3
 8014dde:	4814      	ldr	r0, [pc, #80]	@ (8014e30 <udp_receive_callback+0xa4>)
 8014de0:	f000 fe56 	bl	8015a90 <iprintf>
           result.result = 0xFF;  // Indicate error
 8014de4:	23ff      	movs	r3, #255	@ 0xff
 8014de6:	763b      	strb	r3, [r7, #24]
           result.test_id = command.test_id;
 8014de8:	69fb      	ldr	r3, [r7, #28]
 8014dea:	617b      	str	r3, [r7, #20]
           send_packet(upcb, &result, sizeof(TestResult), addr, port);
 8014dec:	f107 0114 	add.w	r1, r7, #20
 8014df0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8014df4:	9300      	str	r3, [sp, #0]
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	2208      	movs	r2, #8
 8014dfa:	68b8      	ldr	r0, [r7, #8]
 8014dfc:	f000 f81a 	bl	8014e34 <send_packet>
 8014e00:	e012      	b.n	8014e28 <udp_receive_callback+0x9c>
           return;
       }

    // Execute the test
    result.test_id = command.test_id;
 8014e02:	69fb      	ldr	r3, [r7, #28]
 8014e04:	617b      	str	r3, [r7, #20]
    result.result = execute_test(&command);
 8014e06:	f107 031c 	add.w	r3, r7, #28
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7ff ff48 	bl	8014ca0 <execute_test>
 8014e10:	4603      	mov	r3, r0
 8014e12:	763b      	strb	r3, [r7, #24]

    // Send the result back to the client
    send_packet(upcb, &result, sizeof(TestResult), addr, port);
 8014e14:	f107 0114 	add.w	r1, r7, #20
 8014e18:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8014e1c:	9300      	str	r3, [sp, #0]
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	2208      	movs	r2, #8
 8014e22:	68b8      	ldr	r0, [r7, #8]
 8014e24:	f000 f806 	bl	8014e34 <send_packet>
}
 8014e28:	378c      	adds	r7, #140	@ 0x8c
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd90      	pop	{r4, r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	08019480 	.word	0x08019480

08014e34 <send_packet>:



err_t send_packet(struct udp_pcb* pcb, const void* payload, u16_t payload_len, const ip_addr_t* ipaddr, u16_t port)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b086      	sub	sp, #24
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	603b      	str	r3, [r7, #0]
 8014e40:	4613      	mov	r3, r2
 8014e42:	80fb      	strh	r3, [r7, #6]
    err_t err;
    struct pbuf* p;

    // allocate a pbuf for the payload
    p = pbuf_alloc(PBUF_TRANSPORT, payload_len, PBUF_RAM);
 8014e44:	88fb      	ldrh	r3, [r7, #6]
 8014e46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	2036      	movs	r0, #54	@ 0x36
 8014e4e:	f7f6 ff19 	bl	800bc84 <pbuf_alloc>
 8014e52:	6178      	str	r0, [r7, #20]
    if (!p) {
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d102      	bne.n	8014e60 <send_packet+0x2c>
        // failed to allocate pbuf
        return ERR_MEM;
 8014e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e5e:	e013      	b.n	8014e88 <send_packet+0x54>
    }

    // copy the payload into the pbuf
    memcpy(p->payload, payload, payload_len);
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	88fa      	ldrh	r2, [r7, #6]
 8014e66:	68b9      	ldr	r1, [r7, #8]
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f001 f81e 	bl	8015eaa <memcpy>

    // send the packet
    err = udp_sendto(pcb, p, ipaddr, port);
 8014e6e:	8c3b      	ldrh	r3, [r7, #32]
 8014e70:	683a      	ldr	r2, [r7, #0]
 8014e72:	6979      	ldr	r1, [r7, #20]
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f7fd f8eb 	bl	8012050 <udp_sendto>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	74fb      	strb	r3, [r7, #19]

    // free the pbuf
    pbuf_free(p);
 8014e7e:	6978      	ldr	r0, [r7, #20]
 8014e80:	f7f7 f9e4 	bl	800c24c <pbuf_free>

    return err;
 8014e84:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3718      	adds	r7, #24
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <udpServer_init>:


void udpServer_init(void) {
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   upcb = udp_new();
 8014e96:	f7fd fb7b 	bl	8012590 <udp_new>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	4a11      	ldr	r2, [pc, #68]	@ (8014ee4 <udpServer_init+0x54>)
 8014e9e:	6013      	str	r3, [r2, #0]
   callback_flag = 0;
 8014ea0:	4b11      	ldr	r3, [pc, #68]	@ (8014ee8 <udpServer_init+0x58>)
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	701a      	strb	r2, [r3, #0]
   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);  // 50,007 is the server UDP port
 8014ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8014ee4 <udpServer_init+0x54>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	f24c 3257 	movw	r2, #50007	@ 0xc357
 8014eae:	490f      	ldr	r1, [pc, #60]	@ (8014eec <udpServer_init+0x5c>)
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fd fa83 	bl	80123bc <udp_bind>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	71fb      	strb	r3, [r7, #7]

   /* 3. Set a receive callback for the upcb */
   if (err == ERR_OK) {
 8014eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d107      	bne.n	8014ed2 <udpServer_init+0x42>
	   udp_recv(upcb, udp_receive_callback, NULL);
 8014ec2:	4b08      	ldr	r3, [pc, #32]	@ (8014ee4 <udpServer_init+0x54>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	4909      	ldr	r1, [pc, #36]	@ (8014ef0 <udpServer_init+0x60>)
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fd fafe 	bl	80124cc <udp_recv>
   }
   else {
	   udp_remove(upcb);
   }
}
 8014ed0:	e004      	b.n	8014edc <udpServer_init+0x4c>
	   udp_remove(upcb);
 8014ed2:	4b04      	ldr	r3, [pc, #16]	@ (8014ee4 <udpServer_init+0x54>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f7fd fb18 	bl	801250c <udp_remove>
}
 8014edc:	bf00      	nop
 8014ede:	3708      	adds	r7, #8
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	20008d5c 	.word	0x20008d5c
 8014ee8:	20008d5a 	.word	0x20008d5a
 8014eec:	08019bf8 	.word	0x08019bf8
 8014ef0:	08014d8d 	.word	0x08014d8d

08014ef4 <test_adc>:
 * Perform ADC test.
 *
 * @param iterations Number of iterations to sample ADC.
 * @return 1 for success, 0 for failure.
 */
uint8_t test_adc(uint16_t iterations) {
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b088      	sub	sp, #32
 8014ef8:	af02      	add	r7, sp, #8
 8014efa:	4603      	mov	r3, r0
 8014efc:	80fb      	strh	r3, [r7, #6]
    printf("Starting ADC Test with %u iterations...\r\n", iterations);
 8014efe:	88fb      	ldrh	r3, [r7, #6]
 8014f00:	4619      	mov	r1, r3
 8014f02:	483b      	ldr	r0, [pc, #236]	@ (8014ff0 <test_adc+0xfc>)
 8014f04:	f000 fdc4 	bl	8015a90 <iprintf>

    uint32_t adc_value = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	60fb      	str	r3, [r7, #12]
    uint32_t success = 1;
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < iterations; i++) {
 8014f10:	2300      	movs	r3, #0
 8014f12:	827b      	strh	r3, [r7, #18]
 8014f14:	e04f      	b.n	8014fb6 <test_adc+0xc2>
        // Start ADC conversion
        HAL_ADC_Start(&hadc1);
 8014f16:	4837      	ldr	r0, [pc, #220]	@ (8014ff4 <test_adc+0x100>)
 8014f18:	f7ec ffac 	bl	8001e74 <HAL_ADC_Start>

        // Wait for ADC conversion to complete
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8014f1c:	2164      	movs	r1, #100	@ 0x64
 8014f1e:	4835      	ldr	r0, [pc, #212]	@ (8014ff4 <test_adc+0x100>)
 8014f20:	f7ed f8aa 	bl	8002078 <HAL_ADC_PollForConversion>
 8014f24:	4603      	mov	r3, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d131      	bne.n	8014f8e <test_adc+0x9a>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8014f2a:	4832      	ldr	r0, [pc, #200]	@ (8014ff4 <test_adc+0x100>)
 8014f2c:	f7ed fa3f 	bl	80023ae <HAL_ADC_GetValue>
 8014f30:	60f8      	str	r0, [r7, #12]

            printf("Iteration %u: ADC Value = %lu (Expected: %lu ± %lu)\r\n",i + 1, adc_value, known_adc_values[i], acceptable_offset);
 8014f32:	8a7b      	ldrh	r3, [r7, #18]
 8014f34:	1c59      	adds	r1, r3, #1
 8014f36:	8a7b      	ldrh	r3, [r7, #18]
 8014f38:	4a2f      	ldr	r2, [pc, #188]	@ (8014ff8 <test_adc+0x104>)
 8014f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f3e:	2296      	movs	r2, #150	@ 0x96
 8014f40:	9200      	str	r2, [sp, #0]
 8014f42:	68fa      	ldr	r2, [r7, #12]
 8014f44:	482d      	ldr	r0, [pc, #180]	@ (8014ffc <test_adc+0x108>)
 8014f46:	f000 fda3 	bl	8015a90 <iprintf>


            // Validate the ADC value within the acceptable range
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 8014f4a:	8a7b      	ldrh	r3, [r7, #18]
 8014f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8014ff8 <test_adc+0x104>)
 8014f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f52:	2296      	movs	r2, #150	@ 0x96
 8014f54:	1a9b      	subs	r3, r3, r2
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d308      	bcc.n	8014f6e <test_adc+0x7a>
                adc_value > known_adc_values[i] + acceptable_offset) {
 8014f5c:	8a7b      	ldrh	r3, [r7, #18]
 8014f5e:	4a26      	ldr	r2, [pc, #152]	@ (8014ff8 <test_adc+0x104>)
 8014f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f64:	2296      	movs	r2, #150	@ 0x96
 8014f66:	4413      	add	r3, r2
            if (adc_value < known_adc_values[i] - acceptable_offset ||
 8014f68:	68fa      	ldr	r2, [r7, #12]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d91a      	bls.n	8014fa4 <test_adc+0xb0>
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 8014f6e:	8a7b      	ldrh	r3, [r7, #18]
 8014f70:	1c59      	adds	r1, r3, #1
 8014f72:	8a7b      	ldrh	r3, [r7, #18]
                       i + 1, known_adc_values[i], acceptable_offset, adc_value);
 8014f74:	4a20      	ldr	r2, [pc, #128]	@ (8014ff8 <test_adc+0x104>)
 8014f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                printf("Mismatch at iteration %u. Expected: %lu ± %lu, Got: %lu\r\n",
 8014f7a:	2096      	movs	r0, #150	@ 0x96
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	9300      	str	r3, [sp, #0]
 8014f80:	4603      	mov	r3, r0
 8014f82:	481f      	ldr	r0, [pc, #124]	@ (8015000 <test_adc+0x10c>)
 8014f84:	f000 fd84 	bl	8015a90 <iprintf>
                success = 0; // Mark as failure
 8014f88:	2300      	movs	r3, #0
 8014f8a:	617b      	str	r3, [r7, #20]
 8014f8c:	e00a      	b.n	8014fa4 <test_adc+0xb0>
            }
        } else {
            printf("ADC conversion timeout on iteration %u.\r\n", i + 1);
 8014f8e:	8a7b      	ldrh	r3, [r7, #18]
 8014f90:	3301      	adds	r3, #1
 8014f92:	4619      	mov	r1, r3
 8014f94:	481b      	ldr	r0, [pc, #108]	@ (8015004 <test_adc+0x110>)
 8014f96:	f000 fd7b 	bl	8015a90 <iprintf>
            HAL_ADC_Stop(&hadc1);
 8014f9a:	4816      	ldr	r0, [pc, #88]	@ (8014ff4 <test_adc+0x100>)
 8014f9c:	f7ed f838 	bl	8002010 <HAL_ADC_Stop>
            return 0xFF; // Failure
 8014fa0:	23ff      	movs	r3, #255	@ 0xff
 8014fa2:	e020      	b.n	8014fe6 <test_adc+0xf2>
        }

        // Stop ADC conversion
        HAL_ADC_Stop(&hadc1);
 8014fa4:	4813      	ldr	r0, [pc, #76]	@ (8014ff4 <test_adc+0x100>)
 8014fa6:	f7ed f833 	bl	8002010 <HAL_ADC_Stop>

        // Add delay between iterations
        HAL_Delay(100);
 8014faa:	2064      	movs	r0, #100	@ 0x64
 8014fac:	f7ec fefa 	bl	8001da4 <HAL_Delay>
    for (uint16_t i = 0; i < iterations; i++) {
 8014fb0:	8a7b      	ldrh	r3, [r7, #18]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	827b      	strh	r3, [r7, #18]
 8014fb6:	8a7a      	ldrh	r2, [r7, #18]
 8014fb8:	88fb      	ldrh	r3, [r7, #6]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d3ab      	bcc.n	8014f16 <test_adc+0x22>
    }

    if (success) {
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00c      	beq.n	8014fde <test_adc+0xea>
        printf("ADC Test Passed for all %u iterations.\r\n", iterations);
 8014fc4:	88fb      	ldrh	r3, [r7, #6]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	480f      	ldr	r0, [pc, #60]	@ (8015008 <test_adc+0x114>)
 8014fca:	f000 fd61 	bl	8015a90 <iprintf>
    } else {
        printf("ADC Test Failed.\r\n");
        return 0xFF;
    }
    printf("***********************\r\n");
 8014fce:	480f      	ldr	r0, [pc, #60]	@ (801500c <test_adc+0x118>)
 8014fd0:	f000 fdc6 	bl	8015b60 <puts>
    printf("\nADC Test complete.\r\n");
 8014fd4:	480e      	ldr	r0, [pc, #56]	@ (8015010 <test_adc+0x11c>)
 8014fd6:	f000 fdc3 	bl	8015b60 <puts>
    return 1;
 8014fda:	2301      	movs	r3, #1
 8014fdc:	e003      	b.n	8014fe6 <test_adc+0xf2>
        printf("ADC Test Failed.\r\n");
 8014fde:	480d      	ldr	r0, [pc, #52]	@ (8015014 <test_adc+0x120>)
 8014fe0:	f000 fdbe 	bl	8015b60 <puts>
        return 0xFF;
 8014fe4:	23ff      	movs	r3, #255	@ 0xff
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3718      	adds	r7, #24
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	080194b8 	.word	0x080194b8
 8014ff4:	200001e4 	.word	0x200001e4
 8014ff8:	08019c0c 	.word	0x08019c0c
 8014ffc:	080194e4 	.word	0x080194e4
 8015000:	0801951c 	.word	0x0801951c
 8015004:	08019558 	.word	0x08019558
 8015008:	08019584 	.word	0x08019584
 801500c:	080195c4 	.word	0x080195c4
 8015010:	080195e0 	.word	0x080195e0
 8015014:	080195b0 	.word	0x080195b0

08015018 <test_i2c>:
#include "I2C_test.h"

unsigned char data_from_i2c4;


uint8_t test_i2c(uint8_t *bit_pattern, uint8_t pattern_length, uint16_t iterations) {
 8015018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801501c:	b089      	sub	sp, #36	@ 0x24
 801501e:	af02      	add	r7, sp, #8
 8015020:	6078      	str	r0, [r7, #4]
 8015022:	460b      	mov	r3, r1
 8015024:	70fb      	strb	r3, [r7, #3]
 8015026:	4613      	mov	r3, r2
 8015028:	803b      	strh	r3, [r7, #0]
 801502a:	466b      	mov	r3, sp
 801502c:	461e      	mov	r6, r3
    uint8_t received_data[pattern_length];
 801502e:	78f9      	ldrb	r1, [r7, #3]
 8015030:	460b      	mov	r3, r1
 8015032:	3b01      	subs	r3, #1
 8015034:	613b      	str	r3, [r7, #16]
 8015036:	b2cb      	uxtb	r3, r1
 8015038:	2200      	movs	r2, #0
 801503a:	4698      	mov	r8, r3
 801503c:	4691      	mov	r9, r2
 801503e:	f04f 0200 	mov.w	r2, #0
 8015042:	f04f 0300 	mov.w	r3, #0
 8015046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801504a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801504e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8015052:	b2cb      	uxtb	r3, r1
 8015054:	2200      	movs	r2, #0
 8015056:	461c      	mov	r4, r3
 8015058:	4615      	mov	r5, r2
 801505a:	f04f 0200 	mov.w	r2, #0
 801505e:	f04f 0300 	mov.w	r3, #0
 8015062:	00eb      	lsls	r3, r5, #3
 8015064:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8015068:	00e2      	lsls	r2, r4, #3
 801506a:	460b      	mov	r3, r1
 801506c:	3307      	adds	r3, #7
 801506e:	08db      	lsrs	r3, r3, #3
 8015070:	00db      	lsls	r3, r3, #3
 8015072:	ebad 0d03 	sub.w	sp, sp, r3
 8015076:	ab02      	add	r3, sp, #8
 8015078:	3300      	adds	r3, #0
 801507a:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef status;

    // Check if slave device is ready
    if (HAL_I2C_IsDeviceReady(I2C_4, 44 << 1, 3, HAL_MAX_DELAY) != HAL_OK) {
 801507c:	f04f 33ff 	mov.w	r3, #4294967295
 8015080:	2203      	movs	r2, #3
 8015082:	2158      	movs	r1, #88	@ 0x58
 8015084:	4826      	ldr	r0, [pc, #152]	@ (8015120 <test_i2c+0x108>)
 8015086:	f7ef feb3 	bl	8004df0 <HAL_I2C_IsDeviceReady>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	d004      	beq.n	801509a <test_i2c+0x82>
        printf("Slave device at address 44 is not ready.\r\n");
 8015090:	4824      	ldr	r0, [pc, #144]	@ (8015124 <test_i2c+0x10c>)
 8015092:	f000 fd65 	bl	8015b60 <puts>
        return 0xFF; // Error
 8015096:	23ff      	movs	r3, #255	@ 0xff
 8015098:	e03c      	b.n	8015114 <test_i2c+0xfc>
    }

    for (uint16_t i = 0; i < iterations; i++) {
 801509a:	2300      	movs	r3, #0
 801509c:	82fb      	strh	r3, [r7, #22]
 801509e:	e02e      	b.n	80150fe <test_i2c+0xe6>
        printf("Iteration %d/%d\r\n", i + 1, iterations);
 80150a0:	8afb      	ldrh	r3, [r7, #22]
 80150a2:	3301      	adds	r3, #1
 80150a4:	883a      	ldrh	r2, [r7, #0]
 80150a6:	4619      	mov	r1, r3
 80150a8:	481f      	ldr	r0, [pc, #124]	@ (8015128 <test_i2c+0x110>)
 80150aa:	f000 fcf1 	bl	8015a90 <iprintf>

        // Master transmits bit pattern to slave
        status = HAL_I2C_Master_Transmit(I2C_4, 44 << 1,(uint8_t *) bit_pattern, pattern_length, HAL_MAX_DELAY);
 80150ae:	78fb      	ldrb	r3, [r7, #3]
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	f04f 32ff 	mov.w	r2, #4294967295
 80150b6:	9200      	str	r2, [sp, #0]
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	2158      	movs	r1, #88	@ 0x58
 80150bc:	4818      	ldr	r0, [pc, #96]	@ (8015120 <test_i2c+0x108>)
 80150be:	f7ef fda3 	bl	8004c08 <HAL_I2C_Master_Transmit>
 80150c2:	4603      	mov	r3, r0
 80150c4:	72fb      	strb	r3, [r7, #11]
        if (status != HAL_OK) {
 80150c6:	7afb      	ldrb	r3, [r7, #11]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d00c      	beq.n	80150e6 <test_i2c+0xce>
            printf("Transmission failed at iteration %d. Error: %ld\r\n", i + 1, HAL_I2C_GetError(I2C_4));
 80150cc:	8afb      	ldrh	r3, [r7, #22]
 80150ce:	1c5c      	adds	r4, r3, #1
 80150d0:	4813      	ldr	r0, [pc, #76]	@ (8015120 <test_i2c+0x108>)
 80150d2:	f7ef ffaf 	bl	8005034 <HAL_I2C_GetError>
 80150d6:	4603      	mov	r3, r0
 80150d8:	461a      	mov	r2, r3
 80150da:	4621      	mov	r1, r4
 80150dc:	4813      	ldr	r0, [pc, #76]	@ (801512c <test_i2c+0x114>)
 80150de:	f000 fcd7 	bl	8015a90 <iprintf>
            return 0xFF; // Error
 80150e2:	23ff      	movs	r3, #255	@ 0xff
 80150e4:	e016      	b.n	8015114 <test_i2c+0xfc>
        }

        HAL_Delay(100); // Small delay for slave to process the data
 80150e6:	2064      	movs	r0, #100	@ 0x64
 80150e8:	f7ec fe5c 	bl	8001da4 <HAL_Delay>

        // Verify data (for simplicity, skip comparison for now)
        printf("Iteration %d successful.\r\n", i + 1);
 80150ec:	8afb      	ldrh	r3, [r7, #22]
 80150ee:	3301      	adds	r3, #1
 80150f0:	4619      	mov	r1, r3
 80150f2:	480f      	ldr	r0, [pc, #60]	@ (8015130 <test_i2c+0x118>)
 80150f4:	f000 fccc 	bl	8015a90 <iprintf>
    for (uint16_t i = 0; i < iterations; i++) {
 80150f8:	8afb      	ldrh	r3, [r7, #22]
 80150fa:	3301      	adds	r3, #1
 80150fc:	82fb      	strh	r3, [r7, #22]
 80150fe:	8afa      	ldrh	r2, [r7, #22]
 8015100:	883b      	ldrh	r3, [r7, #0]
 8015102:	429a      	cmp	r2, r3
 8015104:	d3cc      	bcc.n	80150a0 <test_i2c+0x88>
    }
    printf("***********************\r\n");
 8015106:	480b      	ldr	r0, [pc, #44]	@ (8015134 <test_i2c+0x11c>)
 8015108:	f000 fd2a 	bl	8015b60 <puts>
    printf("\nI2C test completed successfully.\r\n");
 801510c:	480a      	ldr	r0, [pc, #40]	@ (8015138 <test_i2c+0x120>)
 801510e:	f000 fd27 	bl	8015b60 <puts>
    return 1; // Success
 8015112:	2301      	movs	r3, #1
 8015114:	46b5      	mov	sp, r6
}
 8015116:	4618      	mov	r0, r3
 8015118:	371c      	adds	r7, #28
 801511a:	46bd      	mov	sp, r7
 801511c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015120:	20000294 	.word	0x20000294
 8015124:	080195f8 	.word	0x080195f8
 8015128:	08019624 	.word	0x08019624
 801512c:	08019638 	.word	0x08019638
 8015130:	0801966c 	.word	0x0801966c
 8015134:	08019688 	.word	0x08019688
 8015138:	080196a4 	.word	0x080196a4

0801513c <test_spi>:

#include "SPI_test.h"

static  uint8_t data_from_spi1 = 0;  // Data received from slave

uint8_t test_spi(const char *bit_pattern, size_t pattern_length, int iterations) {
 801513c:	b580      	push	{r7, lr}
 801513e:	b086      	sub	sp, #24
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	607a      	str	r2, [r7, #4]

    uint8_t data_to_spi2 = 0;    // Data sent to slave
 8015148:	2300      	movs	r3, #0
 801514a:	74fb      	strb	r3, [r7, #19]

    printf("Starting SPI Test with pattern: %s, length: %d, iterations: %d\n\r",
 801514c:	68ba      	ldr	r2, [r7, #8]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	68f9      	ldr	r1, [r7, #12]
 8015152:	483d      	ldr	r0, [pc, #244]	@ (8015248 <test_spi+0x10c>)
 8015154:	f000 fc9c 	bl	8015a90 <iprintf>
           bit_pattern, (int)pattern_length, iterations);
	HAL_SPI_Receive_IT(SPI_2, &data_from_spi1, 1);
 8015158:	2201      	movs	r2, #1
 801515a:	493c      	ldr	r1, [pc, #240]	@ (801524c <test_spi+0x110>)
 801515c:	483c      	ldr	r0, [pc, #240]	@ (8015250 <test_spi+0x114>)
 801515e:	f7f1 fe2b 	bl	8006db8 <HAL_SPI_Receive_IT>
    for (int i = 0; i < iterations; i++) {
 8015162:	2300      	movs	r3, #0
 8015164:	617b      	str	r3, [r7, #20]
 8015166:	e060      	b.n	801522a <test_spi+0xee>
        printf("\nIteration %d:\r\n", i + 1);
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	3301      	adds	r3, #1
 801516c:	4619      	mov	r1, r3
 801516e:	4839      	ldr	r0, [pc, #228]	@ (8015254 <test_spi+0x118>)
 8015170:	f000 fc8e 	bl	8015a90 <iprintf>
		data_to_spi2++;
 8015174:	7cfb      	ldrb	r3, [r7, #19]
 8015176:	3301      	adds	r3, #1
 8015178:	b2db      	uxtb	r3, r3
 801517a:	74fb      	strb	r3, [r7, #19]
		data_to_spi2 %= 255;
 801517c:	7cfa      	ldrb	r2, [r7, #19]
 801517e:	4b36      	ldr	r3, [pc, #216]	@ (8015258 <test_spi+0x11c>)
 8015180:	fba3 1302 	umull	r1, r3, r3, r2
 8015184:	09d9      	lsrs	r1, r3, #7
 8015186:	460b      	mov	r3, r1
 8015188:	021b      	lsls	r3, r3, #8
 801518a:	1a5b      	subs	r3, r3, r1
 801518c:	1ad3      	subs	r3, r2, r3
 801518e:	b2db      	uxtb	r3, r3
 8015190:	74fb      	strb	r3, [r7, #19]
        HAL_Delay(100);  // Delay for readability
 8015192:	2064      	movs	r0, #100	@ 0x64
 8015194:	f7ec fe06 	bl	8001da4 <HAL_Delay>
        // Transmit data from Master (SPI1) to Slave (SPI2)
        if (HAL_SPI_Transmit(SPI_1, &data_to_spi2, 1, 100) == HAL_OK) {
 8015198:	f107 0113 	add.w	r1, r7, #19
 801519c:	2364      	movs	r3, #100	@ 0x64
 801519e:	2201      	movs	r2, #1
 80151a0:	482e      	ldr	r0, [pc, #184]	@ (801525c <test_spi+0x120>)
 80151a2:	f7f1 fc9a 	bl	8006ada <HAL_SPI_Transmit>
 80151a6:	4603      	mov	r3, r0
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d10d      	bne.n	80151c8 <test_spi+0x8c>
            printf("Master sent: 0x%02X\n\r", data_to_spi2);
 80151ac:	7cfb      	ldrb	r3, [r7, #19]
 80151ae:	4619      	mov	r1, r3
 80151b0:	482b      	ldr	r0, [pc, #172]	@ (8015260 <test_spi+0x124>)
 80151b2:	f000 fc6d 	bl	8015a90 <iprintf>
            printf("Master Transmit Error! Returning 0xFF\n\r");
            return 0xFF;  // Return failure code
        }

        // Receive data from Slave (SPI2)
        if (HAL_SPI_Receive_IT(SPI_1, &data_from_spi1, 1) == HAL_OK) {
 80151b6:	2201      	movs	r2, #1
 80151b8:	4924      	ldr	r1, [pc, #144]	@ (801524c <test_spi+0x110>)
 80151ba:	4828      	ldr	r0, [pc, #160]	@ (801525c <test_spi+0x120>)
 80151bc:	f7f1 fdfc 	bl	8006db8 <HAL_SPI_Receive_IT>
 80151c0:	4603      	mov	r3, r0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d111      	bne.n	80151ea <test_spi+0xae>
 80151c6:	e004      	b.n	80151d2 <test_spi+0x96>
            printf("Master Transmit Error! Returning 0xFF\n\r");
 80151c8:	4826      	ldr	r0, [pc, #152]	@ (8015264 <test_spi+0x128>)
 80151ca:	f000 fc61 	bl	8015a90 <iprintf>
            return 0xFF;  // Return failure code
 80151ce:	23ff      	movs	r3, #255	@ 0xff
 80151d0:	e036      	b.n	8015240 <test_spi+0x104>
            printf("Master received: 0x%02X\n\r", data_from_spi1);
 80151d2:	4b1e      	ldr	r3, [pc, #120]	@ (801524c <test_spi+0x110>)
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	4619      	mov	r1, r3
 80151d8:	4823      	ldr	r0, [pc, #140]	@ (8015268 <test_spi+0x12c>)
 80151da:	f000 fc59 	bl	8015a90 <iprintf>
            printf("Master Receive Error! Returning 0xFF\n\r");
            return 0xFF;  // Return failure code
        }

        // Compare transmitted and received data
        if (data_to_spi2 != data_from_spi1) {
 80151de:	7cfa      	ldrb	r2, [r7, #19]
 80151e0:	4b1a      	ldr	r3, [pc, #104]	@ (801524c <test_spi+0x110>)
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d00f      	beq.n	8015208 <test_spi+0xcc>
 80151e8:	e004      	b.n	80151f4 <test_spi+0xb8>
            printf("Master Receive Error! Returning 0xFF\n\r");
 80151ea:	4820      	ldr	r0, [pc, #128]	@ (801526c <test_spi+0x130>)
 80151ec:	f000 fc50 	bl	8015a90 <iprintf>
            return 0xFF;  // Return failure code
 80151f0:	23ff      	movs	r3, #255	@ 0xff
 80151f2:	e025      	b.n	8015240 <test_spi+0x104>
            printf("Mismatch! Sent: 0x%02X, Received: 0x%02X\n\r", data_to_spi2, data_from_spi1);
 80151f4:	7cfb      	ldrb	r3, [r7, #19]
 80151f6:	4619      	mov	r1, r3
 80151f8:	4b14      	ldr	r3, [pc, #80]	@ (801524c <test_spi+0x110>)
 80151fa:	781b      	ldrb	r3, [r3, #0]
 80151fc:	461a      	mov	r2, r3
 80151fe:	481c      	ldr	r0, [pc, #112]	@ (8015270 <test_spi+0x134>)
 8015200:	f000 fc46 	bl	8015a90 <iprintf>
           return 0xFF;  // Return failure if mismatch
 8015204:	23ff      	movs	r3, #255	@ 0xff
 8015206:	e01b      	b.n	8015240 <test_spi+0x104>
        } else {
            printf("Match! Sent: 0x%02X, Received: 0x%02X\n\r", data_to_spi2, data_from_spi1);
 8015208:	7cfb      	ldrb	r3, [r7, #19]
 801520a:	4619      	mov	r1, r3
 801520c:	4b0f      	ldr	r3, [pc, #60]	@ (801524c <test_spi+0x110>)
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	461a      	mov	r2, r3
 8015212:	4818      	ldr	r0, [pc, #96]	@ (8015274 <test_spi+0x138>)
 8015214:	f000 fc3c 	bl	8015a90 <iprintf>
            printf("Iteration %d passed\r\n", i + 1);
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	3301      	adds	r3, #1
 801521c:	4619      	mov	r1, r3
 801521e:	4816      	ldr	r0, [pc, #88]	@ (8015278 <test_spi+0x13c>)
 8015220:	f000 fc36 	bl	8015a90 <iprintf>
    for (int i = 0; i < iterations; i++) {
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	3301      	adds	r3, #1
 8015228:	617b      	str	r3, [r7, #20]
 801522a:	697a      	ldr	r2, [r7, #20]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	429a      	cmp	r2, r3
 8015230:	db9a      	blt.n	8015168 <test_spi+0x2c>
        }
    }
    printf("***********************\r\n");
 8015232:	4812      	ldr	r0, [pc, #72]	@ (801527c <test_spi+0x140>)
 8015234:	f000 fc94 	bl	8015b60 <puts>
    printf("\nSPI test complete.\r\n");
 8015238:	4811      	ldr	r0, [pc, #68]	@ (8015280 <test_spi+0x144>)
 801523a:	f000 fc91 	bl	8015b60 <puts>
    return 1;  // Return success code
 801523e:	2301      	movs	r3, #1
}
 8015240:	4618      	mov	r0, r3
 8015242:	3718      	adds	r7, #24
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	080196c8 	.word	0x080196c8
 801524c:	20008d60 	.word	0x20008d60
 8015250:	2000034c 	.word	0x2000034c
 8015254:	0801970c 	.word	0x0801970c
 8015258:	80808081 	.word	0x80808081
 801525c:	200002e8 	.word	0x200002e8
 8015260:	08019720 	.word	0x08019720
 8015264:	08019738 	.word	0x08019738
 8015268:	08019760 	.word	0x08019760
 801526c:	0801977c 	.word	0x0801977c
 8015270:	080197a4 	.word	0x080197a4
 8015274:	080197d0 	.word	0x080197d0
 8015278:	080197f8 	.word	0x080197f8
 801527c:	08019810 	.word	0x08019810
 8015280:	0801982c 	.word	0x0801982c

08015284 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
    if (hspi == SPI_2) {
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	4a06      	ldr	r2, [pc, #24]	@ (80152a8 <HAL_SPI_RxCpltCallback+0x24>)
 8015290:	4293      	cmp	r3, r2
 8015292:	d104      	bne.n	801529e <HAL_SPI_RxCpltCallback+0x1a>
        HAL_SPI_Receive_IT(SPI_2, &data_from_spi1, sizeof(data_from_spi1));
 8015294:	2201      	movs	r2, #1
 8015296:	4905      	ldr	r1, [pc, #20]	@ (80152ac <HAL_SPI_RxCpltCallback+0x28>)
 8015298:	4803      	ldr	r0, [pc, #12]	@ (80152a8 <HAL_SPI_RxCpltCallback+0x24>)
 801529a:	f7f1 fd8d 	bl	8006db8 <HAL_SPI_Receive_IT>
    }
}
 801529e:	bf00      	nop
 80152a0:	3708      	adds	r7, #8
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	2000034c 	.word	0x2000034c
 80152ac:	20008d60 	.word	0x20008d60

080152b0 <test_timer>:
volatile uint8_t tim3_done = 0;
volatile uint8_t tim2_done = 0;
volatile uint32_t random_duration = 0;


uint8_t test_timer(uint16_t iterations) {
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	80fb      	strh	r3, [r7, #6]
    printf("Starting Timer Test with %u iterations...\r\n", iterations);
 80152ba:	88fb      	ldrh	r3, [r7, #6]
 80152bc:	4619      	mov	r1, r3
 80152be:	4840      	ldr	r0, [pc, #256]	@ (80153c0 <test_timer+0x110>)
 80152c0:	f000 fbe6 	bl	8015a90 <iprintf>
    srand(time(NULL));
 80152c4:	2000      	movs	r0, #0
 80152c6:	f000 fd55 	bl	8015d74 <time>
 80152ca:	4602      	mov	r2, r0
 80152cc:	460b      	mov	r3, r1
 80152ce:	4613      	mov	r3, r2
 80152d0:	4618      	mov	r0, r3
 80152d2:	f000 faaf 	bl	8015834 <srand>
    for (uint16_t i = 0; i < iterations; i++) {
 80152d6:	2300      	movs	r3, #0
 80152d8:	81fb      	strh	r3, [r7, #14]
 80152da:	e062      	b.n	80153a2 <test_timer+0xf2>
    	printf("\nIteration %d:\r\n", i + 1);
 80152dc:	89fb      	ldrh	r3, [r7, #14]
 80152de:	3301      	adds	r3, #1
 80152e0:	4619      	mov	r1, r3
 80152e2:	4838      	ldr	r0, [pc, #224]	@ (80153c4 <test_timer+0x114>)
 80152e4:	f000 fbd4 	bl	8015a90 <iprintf>
    // Generate a random time duration between 1 and 10 seconds
    random_duration = (rand() % 10) + 1;
 80152e8:	f000 fad2 	bl	8015890 <rand>
 80152ec:	4601      	mov	r1, r0
 80152ee:	4b36      	ldr	r3, [pc, #216]	@ (80153c8 <test_timer+0x118>)
 80152f0:	fb83 2301 	smull	r2, r3, r3, r1
 80152f4:	109a      	asrs	r2, r3, #2
 80152f6:	17cb      	asrs	r3, r1, #31
 80152f8:	1ad2      	subs	r2, r2, r3
 80152fa:	4613      	mov	r3, r2
 80152fc:	009b      	lsls	r3, r3, #2
 80152fe:	4413      	add	r3, r2
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	1aca      	subs	r2, r1, r3
 8015304:	1c53      	adds	r3, r2, #1
 8015306:	461a      	mov	r2, r3
 8015308:	4b30      	ldr	r3, [pc, #192]	@ (80153cc <test_timer+0x11c>)
 801530a:	601a      	str	r2, [r3, #0]
    printf("Random duration: %lu seconds\r\n", random_duration);
 801530c:	4b2f      	ldr	r3, [pc, #188]	@ (80153cc <test_timer+0x11c>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4619      	mov	r1, r3
 8015312:	482f      	ldr	r0, [pc, #188]	@ (80153d0 <test_timer+0x120>)
 8015314:	f000 fbbc 	bl	8015a90 <iprintf>

    HAL_TIM_Base_Start_IT(TIM3A); //needs to be done by the developer
 8015318:	482e      	ldr	r0, [pc, #184]	@ (80153d4 <test_timer+0x124>)
 801531a:	f7f2 fbf1 	bl	8007b00 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(TIM2A); //needs to be done by the developer
 801531e:	482e      	ldr	r0, [pc, #184]	@ (80153d8 <test_timer+0x128>)
 8015320:	f7f2 fbee 	bl	8007b00 <HAL_TIM_Base_Start_IT>

    // Reset flags and counters
    tim3_seconds = 0;
 8015324:	4b2d      	ldr	r3, [pc, #180]	@ (80153dc <test_timer+0x12c>)
 8015326:	2200      	movs	r2, #0
 8015328:	601a      	str	r2, [r3, #0]
    tim2_seconds = 0;
 801532a:	4b2d      	ldr	r3, [pc, #180]	@ (80153e0 <test_timer+0x130>)
 801532c:	2200      	movs	r2, #0
 801532e:	601a      	str	r2, [r3, #0]
    tim3_done = 0;
 8015330:	4b2c      	ldr	r3, [pc, #176]	@ (80153e4 <test_timer+0x134>)
 8015332:	2200      	movs	r2, #0
 8015334:	701a      	strb	r2, [r3, #0]
    tim2_done = 0;
 8015336:	4b2c      	ldr	r3, [pc, #176]	@ (80153e8 <test_timer+0x138>)
 8015338:	2200      	movs	r2, #0
 801533a:	701a      	strb	r2, [r3, #0]

    // Wait for both timers to complete the random duration
    while (!tim3_done || !tim2_done) {
 801533c:	bf00      	nop
 801533e:	4b29      	ldr	r3, [pc, #164]	@ (80153e4 <test_timer+0x134>)
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	b2db      	uxtb	r3, r3
 8015344:	2b00      	cmp	r3, #0
 8015346:	d0fa      	beq.n	801533e <test_timer+0x8e>
 8015348:	4b27      	ldr	r3, [pc, #156]	@ (80153e8 <test_timer+0x138>)
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	b2db      	uxtb	r3, r3
 801534e:	2b00      	cmp	r3, #0
 8015350:	d0f5      	beq.n	801533e <test_timer+0x8e>

    }
    // Compare the timers
    if (tim3_seconds == random_duration && tim2_seconds == random_duration) {
 8015352:	4b22      	ldr	r3, [pc, #136]	@ (80153dc <test_timer+0x12c>)
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	4b1d      	ldr	r3, [pc, #116]	@ (80153cc <test_timer+0x11c>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	429a      	cmp	r2, r3
 801535c:	d117      	bne.n	801538e <test_timer+0xde>
 801535e:	4b20      	ldr	r3, [pc, #128]	@ (80153e0 <test_timer+0x130>)
 8015360:	681a      	ldr	r2, [r3, #0]
 8015362:	4b1a      	ldr	r3, [pc, #104]	@ (80153cc <test_timer+0x11c>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	429a      	cmp	r2, r3
 8015368:	d111      	bne.n	801538e <test_timer+0xde>
        printf("Timers are synchronized: TIM3 = %lu, TIM2 = %lu\r\n", tim3_seconds, tim2_seconds);
 801536a:	4b1c      	ldr	r3, [pc, #112]	@ (80153dc <test_timer+0x12c>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	4a1c      	ldr	r2, [pc, #112]	@ (80153e0 <test_timer+0x130>)
 8015370:	6812      	ldr	r2, [r2, #0]
 8015372:	4619      	mov	r1, r3
 8015374:	481d      	ldr	r0, [pc, #116]	@ (80153ec <test_timer+0x13c>)
 8015376:	f000 fb8b 	bl	8015a90 <iprintf>
        printf("Iteration %d passed\r\n", i + 1);
 801537a:	89fb      	ldrh	r3, [r7, #14]
 801537c:	3301      	adds	r3, #1
 801537e:	4619      	mov	r1, r3
 8015380:	481b      	ldr	r0, [pc, #108]	@ (80153f0 <test_timer+0x140>)
 8015382:	f000 fb85 	bl	8015a90 <iprintf>
    for (uint16_t i = 0; i < iterations; i++) {
 8015386:	89fb      	ldrh	r3, [r7, #14]
 8015388:	3301      	adds	r3, #1
 801538a:	81fb      	strh	r3, [r7, #14]
 801538c:	e009      	b.n	80153a2 <test_timer+0xf2>
    } else {
        printf("Timers mismatch: TIM3 = %lu, TIM2 = %lu\r\n", tim3_seconds, tim2_seconds);
 801538e:	4b13      	ldr	r3, [pc, #76]	@ (80153dc <test_timer+0x12c>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	4a13      	ldr	r2, [pc, #76]	@ (80153e0 <test_timer+0x130>)
 8015394:	6812      	ldr	r2, [r2, #0]
 8015396:	4619      	mov	r1, r3
 8015398:	4816      	ldr	r0, [pc, #88]	@ (80153f4 <test_timer+0x144>)
 801539a:	f000 fb79 	bl	8015a90 <iprintf>
        return 0xFF; // Failure
 801539e:	23ff      	movs	r3, #255	@ 0xff
 80153a0:	e00a      	b.n	80153b8 <test_timer+0x108>
    for (uint16_t i = 0; i < iterations; i++) {
 80153a2:	89fa      	ldrh	r2, [r7, #14]
 80153a4:	88fb      	ldrh	r3, [r7, #6]
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d398      	bcc.n	80152dc <test_timer+0x2c>
    }
    }
    printf("***********************\r\n");
 80153aa:	4813      	ldr	r0, [pc, #76]	@ (80153f8 <test_timer+0x148>)
 80153ac:	f000 fbd8 	bl	8015b60 <puts>
    printf("\nTimer Test complete.\r\n");
 80153b0:	4812      	ldr	r0, [pc, #72]	@ (80153fc <test_timer+0x14c>)
 80153b2:	f000 fbd5 	bl	8015b60 <puts>
    return 1;
 80153b6:	2301      	movs	r3, #1
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3710      	adds	r7, #16
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	08019844 	.word	0x08019844
 80153c4:	08019870 	.word	0x08019870
 80153c8:	66666667 	.word	0x66666667
 80153cc:	20008d70 	.word	0x20008d70
 80153d0:	08019884 	.word	0x08019884
 80153d4:	200003fc 	.word	0x200003fc
 80153d8:	200003b0 	.word	0x200003b0
 80153dc:	20008d64 	.word	0x20008d64
 80153e0:	20008d68 	.word	0x20008d68
 80153e4:	20008d6c 	.word	0x20008d6c
 80153e8:	20008d6d 	.word	0x20008d6d
 80153ec:	080198a4 	.word	0x080198a4
 80153f0:	080198d8 	.word	0x080198d8
 80153f4:	080198f0 	.word	0x080198f0
 80153f8:	0801991c 	.word	0x0801991c
 80153fc:	08019938 	.word	0x08019938

08015400 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	4a17      	ldr	r2, [pc, #92]	@ (801546c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 801540e:	4293      	cmp	r3, r2
 8015410:	d111      	bne.n	8015436 <HAL_TIM_PeriodElapsedCallback+0x36>
        tim3_seconds++;
 8015412:	4b17      	ldr	r3, [pc, #92]	@ (8015470 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	3301      	adds	r3, #1
 8015418:	4a15      	ldr	r2, [pc, #84]	@ (8015470 <HAL_TIM_PeriodElapsedCallback+0x70>)
 801541a:	6013      	str	r3, [r2, #0]
        if (tim3_seconds >= random_duration) {
 801541c:	4b14      	ldr	r3, [pc, #80]	@ (8015470 <HAL_TIM_PeriodElapsedCallback+0x70>)
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	4b14      	ldr	r3, [pc, #80]	@ (8015474 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	429a      	cmp	r2, r3
 8015426:	d31c      	bcc.n	8015462 <HAL_TIM_PeriodElapsedCallback+0x62>
            tim3_done = 1;
 8015428:	4b13      	ldr	r3, [pc, #76]	@ (8015478 <HAL_TIM_PeriodElapsedCallback+0x78>)
 801542a:	2201      	movs	r2, #1
 801542c:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(TIM3A); // Stop TIM1
 801542e:	4813      	ldr	r0, [pc, #76]	@ (801547c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8015430:	f7f2 fbde 	bl	8007bf0 <HAL_TIM_Base_Stop_IT>
        if (tim2_seconds >= random_duration) {
            tim2_done = 1;
            HAL_TIM_Base_Stop_IT(TIM2A); // Stop TIM2
        }
    }
}
 8015434:	e015      	b.n	8015462 <HAL_TIM_PeriodElapsedCallback+0x62>
    } else if (htim->Instance == TIM2) {
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801543e:	d110      	bne.n	8015462 <HAL_TIM_PeriodElapsedCallback+0x62>
        tim2_seconds++;
 8015440:	4b0f      	ldr	r3, [pc, #60]	@ (8015480 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	3301      	adds	r3, #1
 8015446:	4a0e      	ldr	r2, [pc, #56]	@ (8015480 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8015448:	6013      	str	r3, [r2, #0]
        if (tim2_seconds >= random_duration) {
 801544a:	4b0d      	ldr	r3, [pc, #52]	@ (8015480 <HAL_TIM_PeriodElapsedCallback+0x80>)
 801544c:	681a      	ldr	r2, [r3, #0]
 801544e:	4b09      	ldr	r3, [pc, #36]	@ (8015474 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	429a      	cmp	r2, r3
 8015454:	d305      	bcc.n	8015462 <HAL_TIM_PeriodElapsedCallback+0x62>
            tim2_done = 1;
 8015456:	4b0b      	ldr	r3, [pc, #44]	@ (8015484 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8015458:	2201      	movs	r2, #1
 801545a:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(TIM2A); // Stop TIM2
 801545c:	480a      	ldr	r0, [pc, #40]	@ (8015488 <HAL_TIM_PeriodElapsedCallback+0x88>)
 801545e:	f7f2 fbc7 	bl	8007bf0 <HAL_TIM_Base_Stop_IT>
}
 8015462:	bf00      	nop
 8015464:	3708      	adds	r7, #8
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	40000400 	.word	0x40000400
 8015470:	20008d64 	.word	0x20008d64
 8015474:	20008d70 	.word	0x20008d70
 8015478:	20008d6c 	.word	0x20008d6c
 801547c:	200003fc 	.word	0x200003fc
 8015480:	20008d68 	.word	0x20008d68
 8015484:	20008d6d 	.word	0x20008d6d
 8015488:	200003b0 	.word	0x200003b0

0801548c <test_uart>:
volatile uint8_t Uart_5_ErrorCallback_Flag = 0;
volatile uint8_t Uart_2_ErrorCallback_Flag = 0;

volatile HAL_StatusTypeDef status2tx, status2rx, status5tx, status5rx;

uint8_t test_uart(const char* bit_pattern, uint8_t pattern_length, uint8_t iterations) {
 801548c:	b580      	push	{r7, lr}
 801548e:	b0c4      	sub	sp, #272	@ 0x110
 8015490:	af00      	add	r7, sp, #0
 8015492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015496:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801549a:	6018      	str	r0, [r3, #0]
 801549c:	4608      	mov	r0, r1
 801549e:	4611      	mov	r1, r2
 80154a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154a4:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80154a8:	4602      	mov	r2, r0
 80154aa:	701a      	strb	r2, [r3, #0]
 80154ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154b0:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80154b4:	460a      	mov	r2, r1
 80154b6:	701a      	strb	r2, [r3, #0]
    uint8_t recv_msg5_rx[128] = {0};
 80154b8:	2300      	movs	r3, #0
 80154ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80154be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80154c2:	227c      	movs	r2, #124	@ 0x7c
 80154c4:	2100      	movs	r1, #0
 80154c6:	4618      	mov	r0, r3
 80154c8:	f000 fc3a 	bl	8015d40 <memset>
    uint8_t recv_msg2_rx[128] = {0};
 80154cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80154d4:	2200      	movs	r2, #0
 80154d6:	601a      	str	r2, [r3, #0]
 80154d8:	3304      	adds	r3, #4
 80154da:	227c      	movs	r2, #124	@ 0x7c
 80154dc:	2100      	movs	r1, #0
 80154de:	4618      	mov	r0, r3
 80154e0:	f000 fc2e 	bl	8015d40 <memset>

    for (uint8_t i = 0; i < iterations; ++i) {
 80154e4:	2300      	movs	r3, #0
 80154e6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80154ea:	e117      	b.n	801571c <test_uart+0x290>
        printf("\nIteration %d:\r\n", i + 1);
 80154ec:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80154f0:	3301      	adds	r3, #1
 80154f2:	4619      	mov	r1, r3
 80154f4:	4894      	ldr	r0, [pc, #592]	@ (8015748 <test_uart+0x2bc>)
 80154f6:	f000 facb 	bl	8015a90 <iprintf>

        uint32_t iteration_start_time = HAL_GetTick(); // Track total time for the iteration
 80154fa:	f7ec fc47 	bl	8001d8c <HAL_GetTick>
 80154fe:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 8015502:	e0ea      	b.n	80156da <test_uart+0x24e>
            // UART2 Transmission
            status2tx = HAL_UART_Transmit(UART_2, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 8015504:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015508:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	b29b      	uxth	r3, r3
 8015510:	3301      	adds	r3, #1
 8015512:	b29a      	uxth	r2, r3
 8015514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015518:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 801551c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015520:	6809      	ldr	r1, [r1, #0]
 8015522:	488a      	ldr	r0, [pc, #552]	@ (801574c <test_uart+0x2c0>)
 8015524:	f7f2 ffd8 	bl	80084d8 <HAL_UART_Transmit>
 8015528:	4603      	mov	r3, r0
 801552a:	461a      	mov	r2, r3
 801552c:	4b88      	ldr	r3, [pc, #544]	@ (8015750 <test_uart+0x2c4>)
 801552e:	701a      	strb	r2, [r3, #0]
            if (status2tx != HAL_OK) {
 8015530:	4b87      	ldr	r3, [pc, #540]	@ (8015750 <test_uart+0x2c4>)
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	b2db      	uxtb	r3, r3
 8015536:	2b00      	cmp	r3, #0
 8015538:	d008      	beq.n	801554c <test_uart+0xc0>
                printf("UART2 TX failed with status: %d\r\n", status2tx);
 801553a:	4b85      	ldr	r3, [pc, #532]	@ (8015750 <test_uart+0x2c4>)
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	b2db      	uxtb	r3, r3
 8015540:	4619      	mov	r1, r3
 8015542:	4884      	ldr	r0, [pc, #528]	@ (8015754 <test_uart+0x2c8>)
 8015544:	f000 faa4 	bl	8015a90 <iprintf>
                return 0xFF;
 8015548:	23ff      	movs	r3, #255	@ 0xff
 801554a:	e0f8      	b.n	801573e <test_uart+0x2b2>
            }
            HAL_Delay(100);
 801554c:	2064      	movs	r0, #100	@ 0x64
 801554e:	f7ec fc29 	bl	8001da4 <HAL_Delay>

            // UART5 Transmission
            status5tx = HAL_UART_Transmit(UART_5, (uint8_t*)bit_pattern, pattern_length + 1, SHORT_TIMEOUT);
 8015552:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015556:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	b29b      	uxth	r3, r3
 801555e:	3301      	adds	r3, #1
 8015560:	b29a      	uxth	r2, r3
 8015562:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015566:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 801556a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801556e:	6809      	ldr	r1, [r1, #0]
 8015570:	4879      	ldr	r0, [pc, #484]	@ (8015758 <test_uart+0x2cc>)
 8015572:	f7f2 ffb1 	bl	80084d8 <HAL_UART_Transmit>
 8015576:	4603      	mov	r3, r0
 8015578:	461a      	mov	r2, r3
 801557a:	4b78      	ldr	r3, [pc, #480]	@ (801575c <test_uart+0x2d0>)
 801557c:	701a      	strb	r2, [r3, #0]
            if (status5tx != HAL_OK) {
 801557e:	4b77      	ldr	r3, [pc, #476]	@ (801575c <test_uart+0x2d0>)
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	b2db      	uxtb	r3, r3
 8015584:	2b00      	cmp	r3, #0
 8015586:	d008      	beq.n	801559a <test_uart+0x10e>
                printf("UART5 TX failed with status: %d\r\n", status5tx);
 8015588:	4b74      	ldr	r3, [pc, #464]	@ (801575c <test_uart+0x2d0>)
 801558a:	781b      	ldrb	r3, [r3, #0]
 801558c:	b2db      	uxtb	r3, r3
 801558e:	4619      	mov	r1, r3
 8015590:	4873      	ldr	r0, [pc, #460]	@ (8015760 <test_uart+0x2d4>)
 8015592:	f000 fa7d 	bl	8015a90 <iprintf>
                return 0xFF;
 8015596:	23ff      	movs	r3, #255	@ 0xff
 8015598:	e0d1      	b.n	801573e <test_uart+0x2b2>
            }
            HAL_Delay(100);
 801559a:	2064      	movs	r0, #100	@ 0x64
 801559c:	f7ec fc02 	bl	8001da4 <HAL_Delay>

            // UART5 Reception
            status5rx = HAL_UART_Receive_IT(UART_5, recv_msg5_rx, pattern_length + 1);
 80155a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80155a4:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	3301      	adds	r3, #1
 80155ae:	b29a      	uxth	r2, r3
 80155b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80155b4:	4619      	mov	r1, r3
 80155b6:	4868      	ldr	r0, [pc, #416]	@ (8015758 <test_uart+0x2cc>)
 80155b8:	f7f3 f8d5 	bl	8008766 <HAL_UART_Receive_IT>
 80155bc:	4603      	mov	r3, r0
 80155be:	461a      	mov	r2, r3
 80155c0:	4b68      	ldr	r3, [pc, #416]	@ (8015764 <test_uart+0x2d8>)
 80155c2:	701a      	strb	r2, [r3, #0]
            if (status5rx != HAL_OK) {
 80155c4:	4b67      	ldr	r3, [pc, #412]	@ (8015764 <test_uart+0x2d8>)
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d008      	beq.n	80155e0 <test_uart+0x154>
                printf("UART5 RX failed with status: %d\r\n", status5rx);
 80155ce:	4b65      	ldr	r3, [pc, #404]	@ (8015764 <test_uart+0x2d8>)
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	4619      	mov	r1, r3
 80155d6:	4864      	ldr	r0, [pc, #400]	@ (8015768 <test_uart+0x2dc>)
 80155d8:	f000 fa5a 	bl	8015a90 <iprintf>
                return 0xFF;
 80155dc:	23ff      	movs	r3, #255	@ 0xff
 80155de:	e0ae      	b.n	801573e <test_uart+0x2b2>
            }

            // UART2 Reception
            status2rx = HAL_UART_Receive_IT(UART_2, recv_msg2_rx, pattern_length + 1);
 80155e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80155e4:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	3301      	adds	r3, #1
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	f107 0308 	add.w	r3, r7, #8
 80155f4:	4619      	mov	r1, r3
 80155f6:	4855      	ldr	r0, [pc, #340]	@ (801574c <test_uart+0x2c0>)
 80155f8:	f7f3 f8b5 	bl	8008766 <HAL_UART_Receive_IT>
 80155fc:	4603      	mov	r3, r0
 80155fe:	461a      	mov	r2, r3
 8015600:	4b5a      	ldr	r3, [pc, #360]	@ (801576c <test_uart+0x2e0>)
 8015602:	701a      	strb	r2, [r3, #0]
            if (status2rx != HAL_OK) {
 8015604:	4b59      	ldr	r3, [pc, #356]	@ (801576c <test_uart+0x2e0>)
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	b2db      	uxtb	r3, r3
 801560a:	2b00      	cmp	r3, #0
 801560c:	d008      	beq.n	8015620 <test_uart+0x194>
                printf("UART2 RX failed with status: %d\r\n", status2rx);
 801560e:	4b57      	ldr	r3, [pc, #348]	@ (801576c <test_uart+0x2e0>)
 8015610:	781b      	ldrb	r3, [r3, #0]
 8015612:	b2db      	uxtb	r3, r3
 8015614:	4619      	mov	r1, r3
 8015616:	4856      	ldr	r0, [pc, #344]	@ (8015770 <test_uart+0x2e4>)
 8015618:	f000 fa3a 	bl	8015a90 <iprintf>
                return 0xFF;
 801561c:	23ff      	movs	r3, #255	@ 0xff
 801561e:	e08e      	b.n	801573e <test_uart+0x2b2>
            }

            // Error Handling and Data Verification
            if (Uart_5_ErrorCallback_Flag == 1 || Uart_2_ErrorCallback_Flag == 1) {
 8015620:	4b54      	ldr	r3, [pc, #336]	@ (8015774 <test_uart+0x2e8>)
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	b2db      	uxtb	r3, r3
 8015626:	2b01      	cmp	r3, #1
 8015628:	d004      	beq.n	8015634 <test_uart+0x1a8>
 801562a:	4b53      	ldr	r3, [pc, #332]	@ (8015778 <test_uart+0x2ec>)
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	b2db      	uxtb	r3, r3
 8015630:	2b01      	cmp	r3, #1
 8015632:	d109      	bne.n	8015648 <test_uart+0x1bc>
                printf("Error detected in UART5 or UART2\r\n");
 8015634:	4851      	ldr	r0, [pc, #324]	@ (801577c <test_uart+0x2f0>)
 8015636:	f000 fa93 	bl	8015b60 <puts>
                Uart_5_ErrorCallback_Flag = 0;
 801563a:	4b4e      	ldr	r3, [pc, #312]	@ (8015774 <test_uart+0x2e8>)
 801563c:	2200      	movs	r2, #0
 801563e:	701a      	strb	r2, [r3, #0]
                Uart_2_ErrorCallback_Flag = 0;
 8015640:	4b4d      	ldr	r3, [pc, #308]	@ (8015778 <test_uart+0x2ec>)
 8015642:	2200      	movs	r2, #0
 8015644:	701a      	strb	r2, [r3, #0]
 8015646:	e048      	b.n	80156da <test_uart+0x24e>
            } else {
                if (UART_5_RX_Complete_Callback_Flag == 1) {
 8015648:	4b4d      	ldr	r3, [pc, #308]	@ (8015780 <test_uart+0x2f4>)
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	b2db      	uxtb	r3, r3
 801564e:	2b01      	cmp	r3, #1
 8015650:	d108      	bne.n	8015664 <test_uart+0x1d8>
                    printf("Received message by UART5 RX: %s\r\n", recv_msg5_rx);
 8015652:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8015656:	4619      	mov	r1, r3
 8015658:	484a      	ldr	r0, [pc, #296]	@ (8015784 <test_uart+0x2f8>)
 801565a:	f000 fa19 	bl	8015a90 <iprintf>
                    UART_5_RX_Complete_Callback_Flag = 0;
 801565e:	4b48      	ldr	r3, [pc, #288]	@ (8015780 <test_uart+0x2f4>)
 8015660:	2200      	movs	r2, #0
 8015662:	701a      	strb	r2, [r3, #0]
                }
                if (UART_2_RX_Complete_Callback_Flag == 1) {
 8015664:	4b48      	ldr	r3, [pc, #288]	@ (8015788 <test_uart+0x2fc>)
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	b2db      	uxtb	r3, r3
 801566a:	2b01      	cmp	r3, #1
 801566c:	d108      	bne.n	8015680 <test_uart+0x1f4>
                    printf("Received message by UART2 RX: %s\r\n", recv_msg2_rx);
 801566e:	f107 0308 	add.w	r3, r7, #8
 8015672:	4619      	mov	r1, r3
 8015674:	4845      	ldr	r0, [pc, #276]	@ (801578c <test_uart+0x300>)
 8015676:	f000 fa0b 	bl	8015a90 <iprintf>
                    UART_2_RX_Complete_Callback_Flag = 0;
 801567a:	4b43      	ldr	r3, [pc, #268]	@ (8015788 <test_uart+0x2fc>)
 801567c:	2200      	movs	r2, #0
 801567e:	701a      	strb	r2, [r3, #0]
                }

                // Compare received data
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 8015680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015684:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8015688:	781a      	ldrb	r2, [r3, #0]
 801568a:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 801568e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015692:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015696:	6818      	ldr	r0, [r3, #0]
 8015698:	f000 fb5a 	bl	8015d50 <strncmp>
 801569c:	4603      	mov	r3, r0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d118      	bne.n	80156d4 <test_uart+0x248>
                    strncmp(bit_pattern, (char*)recv_msg2_rx, pattern_length) == 0) {
 80156a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80156a6:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80156aa:	781a      	ldrb	r2, [r3, #0]
 80156ac:	f107 0108 	add.w	r1, r7, #8
 80156b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80156b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80156b8:	6818      	ldr	r0, [r3, #0]
 80156ba:	f000 fb49 	bl	8015d50 <strncmp>
 80156be:	4603      	mov	r3, r0
                if (strncmp(bit_pattern, (char*)recv_msg5_rx, pattern_length) == 0 &&
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d107      	bne.n	80156d4 <test_uart+0x248>
                    printf("Iteration %d passed\r\n", i + 1);
 80156c4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80156c8:	3301      	adds	r3, #1
 80156ca:	4619      	mov	r1, r3
 80156cc:	4830      	ldr	r0, [pc, #192]	@ (8015790 <test_uart+0x304>)
 80156ce:	f000 f9df 	bl	8015a90 <iprintf>
                    break; // Exit while loop once successful
 80156d2:	e00c      	b.n	80156ee <test_uart+0x262>
                } else {
                    printf("Data mismatch detected. Retrying...\r\n");
 80156d4:	482f      	ldr	r0, [pc, #188]	@ (8015794 <test_uart+0x308>)
 80156d6:	f000 fa43 	bl	8015b60 <puts>
        while (HAL_GetTick() - iteration_start_time < SHORT_TIMEOUT) { // Limit to SHORT_TIMEOUT per iteration
 80156da:	f7ec fb57 	bl	8001d8c <HAL_GetTick>
 80156de:	4602      	mov	r2, r0
 80156e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80156e4:	1ad3      	subs	r3, r2, r3
 80156e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80156ea:	f4ff af0b 	bcc.w	8015504 <test_uart+0x78>
                }
            }
        }

        if (HAL_GetTick() - iteration_start_time >= SHORT_TIMEOUT) {
 80156ee:	f7ec fb4d 	bl	8001d8c <HAL_GetTick>
 80156f2:	4602      	mov	r2, r0
 80156f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80156f8:	1ad3      	subs	r3, r2, r3
 80156fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80156fe:	d308      	bcc.n	8015712 <test_uart+0x286>
            printf("Iteration %d failed due to timeout\r\n", i + 1);
 8015700:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8015704:	3301      	adds	r3, #1
 8015706:	4619      	mov	r1, r3
 8015708:	4823      	ldr	r0, [pc, #140]	@ (8015798 <test_uart+0x30c>)
 801570a:	f000 f9c1 	bl	8015a90 <iprintf>
            return 0xFF;
 801570e:	23ff      	movs	r3, #255	@ 0xff
 8015710:	e015      	b.n	801573e <test_uart+0x2b2>
    for (uint8_t i = 0; i < iterations; ++i) {
 8015712:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8015716:	3301      	adds	r3, #1
 8015718:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 801571c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015720:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8015724:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	429a      	cmp	r2, r3
 801572c:	f4ff aede 	bcc.w	80154ec <test_uart+0x60>
        }
    }
    printf("***********************\r\n");
 8015730:	481a      	ldr	r0, [pc, #104]	@ (801579c <test_uart+0x310>)
 8015732:	f000 fa15 	bl	8015b60 <puts>
    printf("\nUART test complete\r\n");
 8015736:	481a      	ldr	r0, [pc, #104]	@ (80157a0 <test_uart+0x314>)
 8015738:	f000 fa12 	bl	8015b60 <puts>
    return 1;
 801573c:	2301      	movs	r3, #1
}
 801573e:	4618      	mov	r0, r3
 8015740:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	08019950 	.word	0x08019950
 801574c:	200004d0 	.word	0x200004d0
 8015750:	20008d78 	.word	0x20008d78
 8015754:	08019964 	.word	0x08019964
 8015758:	20000448 	.word	0x20000448
 801575c:	20008d7a 	.word	0x20008d7a
 8015760:	08019988 	.word	0x08019988
 8015764:	20008d7b 	.word	0x20008d7b
 8015768:	080199ac 	.word	0x080199ac
 801576c:	20008d79 	.word	0x20008d79
 8015770:	080199d0 	.word	0x080199d0
 8015774:	20008d76 	.word	0x20008d76
 8015778:	20008d77 	.word	0x20008d77
 801577c:	080199f4 	.word	0x080199f4
 8015780:	20008d74 	.word	0x20008d74
 8015784:	08019a18 	.word	0x08019a18
 8015788:	20008d75 	.word	0x20008d75
 801578c:	08019a3c 	.word	0x08019a3c
 8015790:	08019a60 	.word	0x08019a60
 8015794:	08019a78 	.word	0x08019a78
 8015798:	08019aa0 	.word	0x08019aa0
 801579c:	08019ac8 	.word	0x08019ac8
 80157a0:	08019ae4 	.word	0x08019ae4

080157a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	4a0a      	ldr	r2, [pc, #40]	@ (80157dc <HAL_UART_RxCpltCallback+0x38>)
 80157b2:	4293      	cmp	r3, r2
 80157b4:	d103      	bne.n	80157be <HAL_UART_RxCpltCallback+0x1a>
        UART_5_RX_Complete_Callback_Flag = 1;
 80157b6:	4b0a      	ldr	r3, [pc, #40]	@ (80157e0 <HAL_UART_RxCpltCallback+0x3c>)
 80157b8:	2201      	movs	r2, #1
 80157ba:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        UART_2_RX_Complete_Callback_Flag = 1;
    }
}
 80157bc:	e007      	b.n	80157ce <HAL_UART_RxCpltCallback+0x2a>
    } else if (huart->Instance == USART2) {
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	4a08      	ldr	r2, [pc, #32]	@ (80157e4 <HAL_UART_RxCpltCallback+0x40>)
 80157c4:	4293      	cmp	r3, r2
 80157c6:	d102      	bne.n	80157ce <HAL_UART_RxCpltCallback+0x2a>
        UART_2_RX_Complete_Callback_Flag = 1;
 80157c8:	4b07      	ldr	r3, [pc, #28]	@ (80157e8 <HAL_UART_RxCpltCallback+0x44>)
 80157ca:	2201      	movs	r2, #1
 80157cc:	701a      	strb	r2, [r3, #0]
}
 80157ce:	bf00      	nop
 80157d0:	370c      	adds	r7, #12
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr
 80157da:	bf00      	nop
 80157dc:	40005000 	.word	0x40005000
 80157e0:	20008d74 	.word	0x20008d74
 80157e4:	40004400 	.word	0x40004400
 80157e8:	20008d75 	.word	0x20008d75

080157ec <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 80157ec:	b480      	push	{r7}
 80157ee:	b083      	sub	sp, #12
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	4a0a      	ldr	r2, [pc, #40]	@ (8015824 <HAL_UART_ErrorCallback+0x38>)
 80157fa:	4293      	cmp	r3, r2
 80157fc:	d103      	bne.n	8015806 <HAL_UART_ErrorCallback+0x1a>
        Uart_5_ErrorCallback_Flag = 1;
 80157fe:	4b0a      	ldr	r3, [pc, #40]	@ (8015828 <HAL_UART_ErrorCallback+0x3c>)
 8015800:	2201      	movs	r2, #1
 8015802:	701a      	strb	r2, [r3, #0]
    } else if (huart->Instance == USART2) {
        Uart_2_ErrorCallback_Flag = 1;
    }
}
 8015804:	e007      	b.n	8015816 <HAL_UART_ErrorCallback+0x2a>
    } else if (huart->Instance == USART2) {
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	4a08      	ldr	r2, [pc, #32]	@ (801582c <HAL_UART_ErrorCallback+0x40>)
 801580c:	4293      	cmp	r3, r2
 801580e:	d102      	bne.n	8015816 <HAL_UART_ErrorCallback+0x2a>
        Uart_2_ErrorCallback_Flag = 1;
 8015810:	4b07      	ldr	r3, [pc, #28]	@ (8015830 <HAL_UART_ErrorCallback+0x44>)
 8015812:	2201      	movs	r2, #1
 8015814:	701a      	strb	r2, [r3, #0]
}
 8015816:	bf00      	nop
 8015818:	370c      	adds	r7, #12
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr
 8015822:	bf00      	nop
 8015824:	40005000 	.word	0x40005000
 8015828:	20008d76 	.word	0x20008d76
 801582c:	40004400 	.word	0x40004400
 8015830:	20008d77 	.word	0x20008d77

08015834 <srand>:
 8015834:	b538      	push	{r3, r4, r5, lr}
 8015836:	4b10      	ldr	r3, [pc, #64]	@ (8015878 <srand+0x44>)
 8015838:	681d      	ldr	r5, [r3, #0]
 801583a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801583c:	4604      	mov	r4, r0
 801583e:	b9b3      	cbnz	r3, 801586e <srand+0x3a>
 8015840:	2018      	movs	r0, #24
 8015842:	f000 fba9 	bl	8015f98 <malloc>
 8015846:	4602      	mov	r2, r0
 8015848:	6328      	str	r0, [r5, #48]	@ 0x30
 801584a:	b920      	cbnz	r0, 8015856 <srand+0x22>
 801584c:	4b0b      	ldr	r3, [pc, #44]	@ (801587c <srand+0x48>)
 801584e:	480c      	ldr	r0, [pc, #48]	@ (8015880 <srand+0x4c>)
 8015850:	2146      	movs	r1, #70	@ 0x46
 8015852:	f000 fb39 	bl	8015ec8 <__assert_func>
 8015856:	490b      	ldr	r1, [pc, #44]	@ (8015884 <srand+0x50>)
 8015858:	4b0b      	ldr	r3, [pc, #44]	@ (8015888 <srand+0x54>)
 801585a:	e9c0 1300 	strd	r1, r3, [r0]
 801585e:	4b0b      	ldr	r3, [pc, #44]	@ (801588c <srand+0x58>)
 8015860:	6083      	str	r3, [r0, #8]
 8015862:	230b      	movs	r3, #11
 8015864:	8183      	strh	r3, [r0, #12]
 8015866:	2100      	movs	r1, #0
 8015868:	2001      	movs	r0, #1
 801586a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801586e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015870:	2200      	movs	r2, #0
 8015872:	611c      	str	r4, [r3, #16]
 8015874:	615a      	str	r2, [r3, #20]
 8015876:	bd38      	pop	{r3, r4, r5, pc}
 8015878:	20000038 	.word	0x20000038
 801587c:	08019c20 	.word	0x08019c20
 8015880:	08019c37 	.word	0x08019c37
 8015884:	abcd330e 	.word	0xabcd330e
 8015888:	e66d1234 	.word	0xe66d1234
 801588c:	0005deec 	.word	0x0005deec

08015890 <rand>:
 8015890:	4b16      	ldr	r3, [pc, #88]	@ (80158ec <rand+0x5c>)
 8015892:	b510      	push	{r4, lr}
 8015894:	681c      	ldr	r4, [r3, #0]
 8015896:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015898:	b9b3      	cbnz	r3, 80158c8 <rand+0x38>
 801589a:	2018      	movs	r0, #24
 801589c:	f000 fb7c 	bl	8015f98 <malloc>
 80158a0:	4602      	mov	r2, r0
 80158a2:	6320      	str	r0, [r4, #48]	@ 0x30
 80158a4:	b920      	cbnz	r0, 80158b0 <rand+0x20>
 80158a6:	4b12      	ldr	r3, [pc, #72]	@ (80158f0 <rand+0x60>)
 80158a8:	4812      	ldr	r0, [pc, #72]	@ (80158f4 <rand+0x64>)
 80158aa:	2152      	movs	r1, #82	@ 0x52
 80158ac:	f000 fb0c 	bl	8015ec8 <__assert_func>
 80158b0:	4911      	ldr	r1, [pc, #68]	@ (80158f8 <rand+0x68>)
 80158b2:	4b12      	ldr	r3, [pc, #72]	@ (80158fc <rand+0x6c>)
 80158b4:	e9c0 1300 	strd	r1, r3, [r0]
 80158b8:	4b11      	ldr	r3, [pc, #68]	@ (8015900 <rand+0x70>)
 80158ba:	6083      	str	r3, [r0, #8]
 80158bc:	230b      	movs	r3, #11
 80158be:	8183      	strh	r3, [r0, #12]
 80158c0:	2100      	movs	r1, #0
 80158c2:	2001      	movs	r0, #1
 80158c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80158c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80158ca:	480e      	ldr	r0, [pc, #56]	@ (8015904 <rand+0x74>)
 80158cc:	690b      	ldr	r3, [r1, #16]
 80158ce:	694c      	ldr	r4, [r1, #20]
 80158d0:	4a0d      	ldr	r2, [pc, #52]	@ (8015908 <rand+0x78>)
 80158d2:	4358      	muls	r0, r3
 80158d4:	fb02 0004 	mla	r0, r2, r4, r0
 80158d8:	fba3 3202 	umull	r3, r2, r3, r2
 80158dc:	3301      	adds	r3, #1
 80158de:	eb40 0002 	adc.w	r0, r0, r2
 80158e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80158e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80158ea:	bd10      	pop	{r4, pc}
 80158ec:	20000038 	.word	0x20000038
 80158f0:	08019c20 	.word	0x08019c20
 80158f4:	08019c37 	.word	0x08019c37
 80158f8:	abcd330e 	.word	0xabcd330e
 80158fc:	e66d1234 	.word	0xe66d1234
 8015900:	0005deec 	.word	0x0005deec
 8015904:	5851f42d 	.word	0x5851f42d
 8015908:	4c957f2d 	.word	0x4c957f2d

0801590c <std>:
 801590c:	2300      	movs	r3, #0
 801590e:	b510      	push	{r4, lr}
 8015910:	4604      	mov	r4, r0
 8015912:	e9c0 3300 	strd	r3, r3, [r0]
 8015916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801591a:	6083      	str	r3, [r0, #8]
 801591c:	8181      	strh	r1, [r0, #12]
 801591e:	6643      	str	r3, [r0, #100]	@ 0x64
 8015920:	81c2      	strh	r2, [r0, #14]
 8015922:	6183      	str	r3, [r0, #24]
 8015924:	4619      	mov	r1, r3
 8015926:	2208      	movs	r2, #8
 8015928:	305c      	adds	r0, #92	@ 0x5c
 801592a:	f000 fa09 	bl	8015d40 <memset>
 801592e:	4b0d      	ldr	r3, [pc, #52]	@ (8015964 <std+0x58>)
 8015930:	6263      	str	r3, [r4, #36]	@ 0x24
 8015932:	4b0d      	ldr	r3, [pc, #52]	@ (8015968 <std+0x5c>)
 8015934:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015936:	4b0d      	ldr	r3, [pc, #52]	@ (801596c <std+0x60>)
 8015938:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801593a:	4b0d      	ldr	r3, [pc, #52]	@ (8015970 <std+0x64>)
 801593c:	6323      	str	r3, [r4, #48]	@ 0x30
 801593e:	4b0d      	ldr	r3, [pc, #52]	@ (8015974 <std+0x68>)
 8015940:	6224      	str	r4, [r4, #32]
 8015942:	429c      	cmp	r4, r3
 8015944:	d006      	beq.n	8015954 <std+0x48>
 8015946:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801594a:	4294      	cmp	r4, r2
 801594c:	d002      	beq.n	8015954 <std+0x48>
 801594e:	33d0      	adds	r3, #208	@ 0xd0
 8015950:	429c      	cmp	r4, r3
 8015952:	d105      	bne.n	8015960 <std+0x54>
 8015954:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801595c:	f000 baa2 	b.w	8015ea4 <__retarget_lock_init_recursive>
 8015960:	bd10      	pop	{r4, pc}
 8015962:	bf00      	nop
 8015964:	08015b71 	.word	0x08015b71
 8015968:	08015b93 	.word	0x08015b93
 801596c:	08015bcb 	.word	0x08015bcb
 8015970:	08015bef 	.word	0x08015bef
 8015974:	20008d7c 	.word	0x20008d7c

08015978 <stdio_exit_handler>:
 8015978:	4a02      	ldr	r2, [pc, #8]	@ (8015984 <stdio_exit_handler+0xc>)
 801597a:	4903      	ldr	r1, [pc, #12]	@ (8015988 <stdio_exit_handler+0x10>)
 801597c:	4803      	ldr	r0, [pc, #12]	@ (801598c <stdio_exit_handler+0x14>)
 801597e:	f000 b869 	b.w	8015a54 <_fwalk_sglue>
 8015982:	bf00      	nop
 8015984:	2000002c 	.word	0x2000002c
 8015988:	080167ad 	.word	0x080167ad
 801598c:	2000003c 	.word	0x2000003c

08015990 <cleanup_stdio>:
 8015990:	6841      	ldr	r1, [r0, #4]
 8015992:	4b0c      	ldr	r3, [pc, #48]	@ (80159c4 <cleanup_stdio+0x34>)
 8015994:	4299      	cmp	r1, r3
 8015996:	b510      	push	{r4, lr}
 8015998:	4604      	mov	r4, r0
 801599a:	d001      	beq.n	80159a0 <cleanup_stdio+0x10>
 801599c:	f000 ff06 	bl	80167ac <_fflush_r>
 80159a0:	68a1      	ldr	r1, [r4, #8]
 80159a2:	4b09      	ldr	r3, [pc, #36]	@ (80159c8 <cleanup_stdio+0x38>)
 80159a4:	4299      	cmp	r1, r3
 80159a6:	d002      	beq.n	80159ae <cleanup_stdio+0x1e>
 80159a8:	4620      	mov	r0, r4
 80159aa:	f000 feff 	bl	80167ac <_fflush_r>
 80159ae:	68e1      	ldr	r1, [r4, #12]
 80159b0:	4b06      	ldr	r3, [pc, #24]	@ (80159cc <cleanup_stdio+0x3c>)
 80159b2:	4299      	cmp	r1, r3
 80159b4:	d004      	beq.n	80159c0 <cleanup_stdio+0x30>
 80159b6:	4620      	mov	r0, r4
 80159b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159bc:	f000 bef6 	b.w	80167ac <_fflush_r>
 80159c0:	bd10      	pop	{r4, pc}
 80159c2:	bf00      	nop
 80159c4:	20008d7c 	.word	0x20008d7c
 80159c8:	20008de4 	.word	0x20008de4
 80159cc:	20008e4c 	.word	0x20008e4c

080159d0 <global_stdio_init.part.0>:
 80159d0:	b510      	push	{r4, lr}
 80159d2:	4b0b      	ldr	r3, [pc, #44]	@ (8015a00 <global_stdio_init.part.0+0x30>)
 80159d4:	4c0b      	ldr	r4, [pc, #44]	@ (8015a04 <global_stdio_init.part.0+0x34>)
 80159d6:	4a0c      	ldr	r2, [pc, #48]	@ (8015a08 <global_stdio_init.part.0+0x38>)
 80159d8:	601a      	str	r2, [r3, #0]
 80159da:	4620      	mov	r0, r4
 80159dc:	2200      	movs	r2, #0
 80159de:	2104      	movs	r1, #4
 80159e0:	f7ff ff94 	bl	801590c <std>
 80159e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80159e8:	2201      	movs	r2, #1
 80159ea:	2109      	movs	r1, #9
 80159ec:	f7ff ff8e 	bl	801590c <std>
 80159f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80159f4:	2202      	movs	r2, #2
 80159f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159fa:	2112      	movs	r1, #18
 80159fc:	f7ff bf86 	b.w	801590c <std>
 8015a00:	20008eb4 	.word	0x20008eb4
 8015a04:	20008d7c 	.word	0x20008d7c
 8015a08:	08015979 	.word	0x08015979

08015a0c <__sfp_lock_acquire>:
 8015a0c:	4801      	ldr	r0, [pc, #4]	@ (8015a14 <__sfp_lock_acquire+0x8>)
 8015a0e:	f000 ba4a 	b.w	8015ea6 <__retarget_lock_acquire_recursive>
 8015a12:	bf00      	nop
 8015a14:	20008ebd 	.word	0x20008ebd

08015a18 <__sfp_lock_release>:
 8015a18:	4801      	ldr	r0, [pc, #4]	@ (8015a20 <__sfp_lock_release+0x8>)
 8015a1a:	f000 ba45 	b.w	8015ea8 <__retarget_lock_release_recursive>
 8015a1e:	bf00      	nop
 8015a20:	20008ebd 	.word	0x20008ebd

08015a24 <__sinit>:
 8015a24:	b510      	push	{r4, lr}
 8015a26:	4604      	mov	r4, r0
 8015a28:	f7ff fff0 	bl	8015a0c <__sfp_lock_acquire>
 8015a2c:	6a23      	ldr	r3, [r4, #32]
 8015a2e:	b11b      	cbz	r3, 8015a38 <__sinit+0x14>
 8015a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a34:	f7ff bff0 	b.w	8015a18 <__sfp_lock_release>
 8015a38:	4b04      	ldr	r3, [pc, #16]	@ (8015a4c <__sinit+0x28>)
 8015a3a:	6223      	str	r3, [r4, #32]
 8015a3c:	4b04      	ldr	r3, [pc, #16]	@ (8015a50 <__sinit+0x2c>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d1f5      	bne.n	8015a30 <__sinit+0xc>
 8015a44:	f7ff ffc4 	bl	80159d0 <global_stdio_init.part.0>
 8015a48:	e7f2      	b.n	8015a30 <__sinit+0xc>
 8015a4a:	bf00      	nop
 8015a4c:	08015991 	.word	0x08015991
 8015a50:	20008eb4 	.word	0x20008eb4

08015a54 <_fwalk_sglue>:
 8015a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a58:	4607      	mov	r7, r0
 8015a5a:	4688      	mov	r8, r1
 8015a5c:	4614      	mov	r4, r2
 8015a5e:	2600      	movs	r6, #0
 8015a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a64:	f1b9 0901 	subs.w	r9, r9, #1
 8015a68:	d505      	bpl.n	8015a76 <_fwalk_sglue+0x22>
 8015a6a:	6824      	ldr	r4, [r4, #0]
 8015a6c:	2c00      	cmp	r4, #0
 8015a6e:	d1f7      	bne.n	8015a60 <_fwalk_sglue+0xc>
 8015a70:	4630      	mov	r0, r6
 8015a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a76:	89ab      	ldrh	r3, [r5, #12]
 8015a78:	2b01      	cmp	r3, #1
 8015a7a:	d907      	bls.n	8015a8c <_fwalk_sglue+0x38>
 8015a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a80:	3301      	adds	r3, #1
 8015a82:	d003      	beq.n	8015a8c <_fwalk_sglue+0x38>
 8015a84:	4629      	mov	r1, r5
 8015a86:	4638      	mov	r0, r7
 8015a88:	47c0      	blx	r8
 8015a8a:	4306      	orrs	r6, r0
 8015a8c:	3568      	adds	r5, #104	@ 0x68
 8015a8e:	e7e9      	b.n	8015a64 <_fwalk_sglue+0x10>

08015a90 <iprintf>:
 8015a90:	b40f      	push	{r0, r1, r2, r3}
 8015a92:	b507      	push	{r0, r1, r2, lr}
 8015a94:	4906      	ldr	r1, [pc, #24]	@ (8015ab0 <iprintf+0x20>)
 8015a96:	ab04      	add	r3, sp, #16
 8015a98:	6808      	ldr	r0, [r1, #0]
 8015a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a9e:	6881      	ldr	r1, [r0, #8]
 8015aa0:	9301      	str	r3, [sp, #4]
 8015aa2:	f000 fb59 	bl	8016158 <_vfiprintf_r>
 8015aa6:	b003      	add	sp, #12
 8015aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015aac:	b004      	add	sp, #16
 8015aae:	4770      	bx	lr
 8015ab0:	20000038 	.word	0x20000038

08015ab4 <_puts_r>:
 8015ab4:	6a03      	ldr	r3, [r0, #32]
 8015ab6:	b570      	push	{r4, r5, r6, lr}
 8015ab8:	6884      	ldr	r4, [r0, #8]
 8015aba:	4605      	mov	r5, r0
 8015abc:	460e      	mov	r6, r1
 8015abe:	b90b      	cbnz	r3, 8015ac4 <_puts_r+0x10>
 8015ac0:	f7ff ffb0 	bl	8015a24 <__sinit>
 8015ac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015ac6:	07db      	lsls	r3, r3, #31
 8015ac8:	d405      	bmi.n	8015ad6 <_puts_r+0x22>
 8015aca:	89a3      	ldrh	r3, [r4, #12]
 8015acc:	0598      	lsls	r0, r3, #22
 8015ace:	d402      	bmi.n	8015ad6 <_puts_r+0x22>
 8015ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015ad2:	f000 f9e8 	bl	8015ea6 <__retarget_lock_acquire_recursive>
 8015ad6:	89a3      	ldrh	r3, [r4, #12]
 8015ad8:	0719      	lsls	r1, r3, #28
 8015ada:	d502      	bpl.n	8015ae2 <_puts_r+0x2e>
 8015adc:	6923      	ldr	r3, [r4, #16]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d135      	bne.n	8015b4e <_puts_r+0x9a>
 8015ae2:	4621      	mov	r1, r4
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	f000 f8c5 	bl	8015c74 <__swsetup_r>
 8015aea:	b380      	cbz	r0, 8015b4e <_puts_r+0x9a>
 8015aec:	f04f 35ff 	mov.w	r5, #4294967295
 8015af0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015af2:	07da      	lsls	r2, r3, #31
 8015af4:	d405      	bmi.n	8015b02 <_puts_r+0x4e>
 8015af6:	89a3      	ldrh	r3, [r4, #12]
 8015af8:	059b      	lsls	r3, r3, #22
 8015afa:	d402      	bmi.n	8015b02 <_puts_r+0x4e>
 8015afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015afe:	f000 f9d3 	bl	8015ea8 <__retarget_lock_release_recursive>
 8015b02:	4628      	mov	r0, r5
 8015b04:	bd70      	pop	{r4, r5, r6, pc}
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	da04      	bge.n	8015b14 <_puts_r+0x60>
 8015b0a:	69a2      	ldr	r2, [r4, #24]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	dc17      	bgt.n	8015b40 <_puts_r+0x8c>
 8015b10:	290a      	cmp	r1, #10
 8015b12:	d015      	beq.n	8015b40 <_puts_r+0x8c>
 8015b14:	6823      	ldr	r3, [r4, #0]
 8015b16:	1c5a      	adds	r2, r3, #1
 8015b18:	6022      	str	r2, [r4, #0]
 8015b1a:	7019      	strb	r1, [r3, #0]
 8015b1c:	68a3      	ldr	r3, [r4, #8]
 8015b1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b22:	3b01      	subs	r3, #1
 8015b24:	60a3      	str	r3, [r4, #8]
 8015b26:	2900      	cmp	r1, #0
 8015b28:	d1ed      	bne.n	8015b06 <_puts_r+0x52>
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	da11      	bge.n	8015b52 <_puts_r+0x9e>
 8015b2e:	4622      	mov	r2, r4
 8015b30:	210a      	movs	r1, #10
 8015b32:	4628      	mov	r0, r5
 8015b34:	f000 f85f 	bl	8015bf6 <__swbuf_r>
 8015b38:	3001      	adds	r0, #1
 8015b3a:	d0d7      	beq.n	8015aec <_puts_r+0x38>
 8015b3c:	250a      	movs	r5, #10
 8015b3e:	e7d7      	b.n	8015af0 <_puts_r+0x3c>
 8015b40:	4622      	mov	r2, r4
 8015b42:	4628      	mov	r0, r5
 8015b44:	f000 f857 	bl	8015bf6 <__swbuf_r>
 8015b48:	3001      	adds	r0, #1
 8015b4a:	d1e7      	bne.n	8015b1c <_puts_r+0x68>
 8015b4c:	e7ce      	b.n	8015aec <_puts_r+0x38>
 8015b4e:	3e01      	subs	r6, #1
 8015b50:	e7e4      	b.n	8015b1c <_puts_r+0x68>
 8015b52:	6823      	ldr	r3, [r4, #0]
 8015b54:	1c5a      	adds	r2, r3, #1
 8015b56:	6022      	str	r2, [r4, #0]
 8015b58:	220a      	movs	r2, #10
 8015b5a:	701a      	strb	r2, [r3, #0]
 8015b5c:	e7ee      	b.n	8015b3c <_puts_r+0x88>
	...

08015b60 <puts>:
 8015b60:	4b02      	ldr	r3, [pc, #8]	@ (8015b6c <puts+0xc>)
 8015b62:	4601      	mov	r1, r0
 8015b64:	6818      	ldr	r0, [r3, #0]
 8015b66:	f7ff bfa5 	b.w	8015ab4 <_puts_r>
 8015b6a:	bf00      	nop
 8015b6c:	20000038 	.word	0x20000038

08015b70 <__sread>:
 8015b70:	b510      	push	{r4, lr}
 8015b72:	460c      	mov	r4, r1
 8015b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b78:	f000 f94c 	bl	8015e14 <_read_r>
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	bfab      	itete	ge
 8015b80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015b82:	89a3      	ldrhlt	r3, [r4, #12]
 8015b84:	181b      	addge	r3, r3, r0
 8015b86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015b8a:	bfac      	ite	ge
 8015b8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015b8e:	81a3      	strhlt	r3, [r4, #12]
 8015b90:	bd10      	pop	{r4, pc}

08015b92 <__swrite>:
 8015b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b96:	461f      	mov	r7, r3
 8015b98:	898b      	ldrh	r3, [r1, #12]
 8015b9a:	05db      	lsls	r3, r3, #23
 8015b9c:	4605      	mov	r5, r0
 8015b9e:	460c      	mov	r4, r1
 8015ba0:	4616      	mov	r6, r2
 8015ba2:	d505      	bpl.n	8015bb0 <__swrite+0x1e>
 8015ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ba8:	2302      	movs	r3, #2
 8015baa:	2200      	movs	r2, #0
 8015bac:	f000 f920 	bl	8015df0 <_lseek_r>
 8015bb0:	89a3      	ldrh	r3, [r4, #12]
 8015bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015bba:	81a3      	strh	r3, [r4, #12]
 8015bbc:	4632      	mov	r2, r6
 8015bbe:	463b      	mov	r3, r7
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc6:	f000 b937 	b.w	8015e38 <_write_r>

08015bca <__sseek>:
 8015bca:	b510      	push	{r4, lr}
 8015bcc:	460c      	mov	r4, r1
 8015bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bd2:	f000 f90d 	bl	8015df0 <_lseek_r>
 8015bd6:	1c43      	adds	r3, r0, #1
 8015bd8:	89a3      	ldrh	r3, [r4, #12]
 8015bda:	bf15      	itete	ne
 8015bdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015bde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015be2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015be6:	81a3      	strheq	r3, [r4, #12]
 8015be8:	bf18      	it	ne
 8015bea:	81a3      	strhne	r3, [r4, #12]
 8015bec:	bd10      	pop	{r4, pc}

08015bee <__sclose>:
 8015bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bf2:	f000 b8db 	b.w	8015dac <_close_r>

08015bf6 <__swbuf_r>:
 8015bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bf8:	460e      	mov	r6, r1
 8015bfa:	4614      	mov	r4, r2
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	b118      	cbz	r0, 8015c08 <__swbuf_r+0x12>
 8015c00:	6a03      	ldr	r3, [r0, #32]
 8015c02:	b90b      	cbnz	r3, 8015c08 <__swbuf_r+0x12>
 8015c04:	f7ff ff0e 	bl	8015a24 <__sinit>
 8015c08:	69a3      	ldr	r3, [r4, #24]
 8015c0a:	60a3      	str	r3, [r4, #8]
 8015c0c:	89a3      	ldrh	r3, [r4, #12]
 8015c0e:	071a      	lsls	r2, r3, #28
 8015c10:	d501      	bpl.n	8015c16 <__swbuf_r+0x20>
 8015c12:	6923      	ldr	r3, [r4, #16]
 8015c14:	b943      	cbnz	r3, 8015c28 <__swbuf_r+0x32>
 8015c16:	4621      	mov	r1, r4
 8015c18:	4628      	mov	r0, r5
 8015c1a:	f000 f82b 	bl	8015c74 <__swsetup_r>
 8015c1e:	b118      	cbz	r0, 8015c28 <__swbuf_r+0x32>
 8015c20:	f04f 37ff 	mov.w	r7, #4294967295
 8015c24:	4638      	mov	r0, r7
 8015c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c28:	6823      	ldr	r3, [r4, #0]
 8015c2a:	6922      	ldr	r2, [r4, #16]
 8015c2c:	1a98      	subs	r0, r3, r2
 8015c2e:	6963      	ldr	r3, [r4, #20]
 8015c30:	b2f6      	uxtb	r6, r6
 8015c32:	4283      	cmp	r3, r0
 8015c34:	4637      	mov	r7, r6
 8015c36:	dc05      	bgt.n	8015c44 <__swbuf_r+0x4e>
 8015c38:	4621      	mov	r1, r4
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	f000 fdb6 	bl	80167ac <_fflush_r>
 8015c40:	2800      	cmp	r0, #0
 8015c42:	d1ed      	bne.n	8015c20 <__swbuf_r+0x2a>
 8015c44:	68a3      	ldr	r3, [r4, #8]
 8015c46:	3b01      	subs	r3, #1
 8015c48:	60a3      	str	r3, [r4, #8]
 8015c4a:	6823      	ldr	r3, [r4, #0]
 8015c4c:	1c5a      	adds	r2, r3, #1
 8015c4e:	6022      	str	r2, [r4, #0]
 8015c50:	701e      	strb	r6, [r3, #0]
 8015c52:	6962      	ldr	r2, [r4, #20]
 8015c54:	1c43      	adds	r3, r0, #1
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d004      	beq.n	8015c64 <__swbuf_r+0x6e>
 8015c5a:	89a3      	ldrh	r3, [r4, #12]
 8015c5c:	07db      	lsls	r3, r3, #31
 8015c5e:	d5e1      	bpl.n	8015c24 <__swbuf_r+0x2e>
 8015c60:	2e0a      	cmp	r6, #10
 8015c62:	d1df      	bne.n	8015c24 <__swbuf_r+0x2e>
 8015c64:	4621      	mov	r1, r4
 8015c66:	4628      	mov	r0, r5
 8015c68:	f000 fda0 	bl	80167ac <_fflush_r>
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	d0d9      	beq.n	8015c24 <__swbuf_r+0x2e>
 8015c70:	e7d6      	b.n	8015c20 <__swbuf_r+0x2a>
	...

08015c74 <__swsetup_r>:
 8015c74:	b538      	push	{r3, r4, r5, lr}
 8015c76:	4b29      	ldr	r3, [pc, #164]	@ (8015d1c <__swsetup_r+0xa8>)
 8015c78:	4605      	mov	r5, r0
 8015c7a:	6818      	ldr	r0, [r3, #0]
 8015c7c:	460c      	mov	r4, r1
 8015c7e:	b118      	cbz	r0, 8015c88 <__swsetup_r+0x14>
 8015c80:	6a03      	ldr	r3, [r0, #32]
 8015c82:	b90b      	cbnz	r3, 8015c88 <__swsetup_r+0x14>
 8015c84:	f7ff fece 	bl	8015a24 <__sinit>
 8015c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c8c:	0719      	lsls	r1, r3, #28
 8015c8e:	d422      	bmi.n	8015cd6 <__swsetup_r+0x62>
 8015c90:	06da      	lsls	r2, r3, #27
 8015c92:	d407      	bmi.n	8015ca4 <__swsetup_r+0x30>
 8015c94:	2209      	movs	r2, #9
 8015c96:	602a      	str	r2, [r5, #0]
 8015c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c9c:	81a3      	strh	r3, [r4, #12]
 8015c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8015ca2:	e033      	b.n	8015d0c <__swsetup_r+0x98>
 8015ca4:	0758      	lsls	r0, r3, #29
 8015ca6:	d512      	bpl.n	8015cce <__swsetup_r+0x5a>
 8015ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015caa:	b141      	cbz	r1, 8015cbe <__swsetup_r+0x4a>
 8015cac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015cb0:	4299      	cmp	r1, r3
 8015cb2:	d002      	beq.n	8015cba <__swsetup_r+0x46>
 8015cb4:	4628      	mov	r0, r5
 8015cb6:	f000 f925 	bl	8015f04 <_free_r>
 8015cba:	2300      	movs	r3, #0
 8015cbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8015cbe:	89a3      	ldrh	r3, [r4, #12]
 8015cc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015cc4:	81a3      	strh	r3, [r4, #12]
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	6063      	str	r3, [r4, #4]
 8015cca:	6923      	ldr	r3, [r4, #16]
 8015ccc:	6023      	str	r3, [r4, #0]
 8015cce:	89a3      	ldrh	r3, [r4, #12]
 8015cd0:	f043 0308 	orr.w	r3, r3, #8
 8015cd4:	81a3      	strh	r3, [r4, #12]
 8015cd6:	6923      	ldr	r3, [r4, #16]
 8015cd8:	b94b      	cbnz	r3, 8015cee <__swsetup_r+0x7a>
 8015cda:	89a3      	ldrh	r3, [r4, #12]
 8015cdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ce4:	d003      	beq.n	8015cee <__swsetup_r+0x7a>
 8015ce6:	4621      	mov	r1, r4
 8015ce8:	4628      	mov	r0, r5
 8015cea:	f000 fdbf 	bl	801686c <__smakebuf_r>
 8015cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cf2:	f013 0201 	ands.w	r2, r3, #1
 8015cf6:	d00a      	beq.n	8015d0e <__swsetup_r+0x9a>
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	60a2      	str	r2, [r4, #8]
 8015cfc:	6962      	ldr	r2, [r4, #20]
 8015cfe:	4252      	negs	r2, r2
 8015d00:	61a2      	str	r2, [r4, #24]
 8015d02:	6922      	ldr	r2, [r4, #16]
 8015d04:	b942      	cbnz	r2, 8015d18 <__swsetup_r+0xa4>
 8015d06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015d0a:	d1c5      	bne.n	8015c98 <__swsetup_r+0x24>
 8015d0c:	bd38      	pop	{r3, r4, r5, pc}
 8015d0e:	0799      	lsls	r1, r3, #30
 8015d10:	bf58      	it	pl
 8015d12:	6962      	ldrpl	r2, [r4, #20]
 8015d14:	60a2      	str	r2, [r4, #8]
 8015d16:	e7f4      	b.n	8015d02 <__swsetup_r+0x8e>
 8015d18:	2000      	movs	r0, #0
 8015d1a:	e7f7      	b.n	8015d0c <__swsetup_r+0x98>
 8015d1c:	20000038 	.word	0x20000038

08015d20 <memcmp>:
 8015d20:	b510      	push	{r4, lr}
 8015d22:	3901      	subs	r1, #1
 8015d24:	4402      	add	r2, r0
 8015d26:	4290      	cmp	r0, r2
 8015d28:	d101      	bne.n	8015d2e <memcmp+0xe>
 8015d2a:	2000      	movs	r0, #0
 8015d2c:	e005      	b.n	8015d3a <memcmp+0x1a>
 8015d2e:	7803      	ldrb	r3, [r0, #0]
 8015d30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015d34:	42a3      	cmp	r3, r4
 8015d36:	d001      	beq.n	8015d3c <memcmp+0x1c>
 8015d38:	1b18      	subs	r0, r3, r4
 8015d3a:	bd10      	pop	{r4, pc}
 8015d3c:	3001      	adds	r0, #1
 8015d3e:	e7f2      	b.n	8015d26 <memcmp+0x6>

08015d40 <memset>:
 8015d40:	4402      	add	r2, r0
 8015d42:	4603      	mov	r3, r0
 8015d44:	4293      	cmp	r3, r2
 8015d46:	d100      	bne.n	8015d4a <memset+0xa>
 8015d48:	4770      	bx	lr
 8015d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8015d4e:	e7f9      	b.n	8015d44 <memset+0x4>

08015d50 <strncmp>:
 8015d50:	b510      	push	{r4, lr}
 8015d52:	b16a      	cbz	r2, 8015d70 <strncmp+0x20>
 8015d54:	3901      	subs	r1, #1
 8015d56:	1884      	adds	r4, r0, r2
 8015d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d103      	bne.n	8015d6c <strncmp+0x1c>
 8015d64:	42a0      	cmp	r0, r4
 8015d66:	d001      	beq.n	8015d6c <strncmp+0x1c>
 8015d68:	2a00      	cmp	r2, #0
 8015d6a:	d1f5      	bne.n	8015d58 <strncmp+0x8>
 8015d6c:	1ad0      	subs	r0, r2, r3
 8015d6e:	bd10      	pop	{r4, pc}
 8015d70:	4610      	mov	r0, r2
 8015d72:	e7fc      	b.n	8015d6e <strncmp+0x1e>

08015d74 <time>:
 8015d74:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8015d76:	4b0c      	ldr	r3, [pc, #48]	@ (8015da8 <time+0x34>)
 8015d78:	f04f 36ff 	mov.w	r6, #4294967295
 8015d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8015d80:	4669      	mov	r1, sp
 8015d82:	4604      	mov	r4, r0
 8015d84:	2200      	movs	r2, #0
 8015d86:	6818      	ldr	r0, [r3, #0]
 8015d88:	e9cd 6700 	strd	r6, r7, [sp]
 8015d8c:	f000 f81e 	bl	8015dcc <_gettimeofday_r>
 8015d90:	2800      	cmp	r0, #0
 8015d92:	bfb8      	it	lt
 8015d94:	e9cd 6700 	strdlt	r6, r7, [sp]
 8015d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d9c:	b10c      	cbz	r4, 8015da2 <time+0x2e>
 8015d9e:	e9c4 0100 	strd	r0, r1, [r4]
 8015da2:	b004      	add	sp, #16
 8015da4:	bdd0      	pop	{r4, r6, r7, pc}
 8015da6:	bf00      	nop
 8015da8:	20000038 	.word	0x20000038

08015dac <_close_r>:
 8015dac:	b538      	push	{r3, r4, r5, lr}
 8015dae:	4d06      	ldr	r5, [pc, #24]	@ (8015dc8 <_close_r+0x1c>)
 8015db0:	2300      	movs	r3, #0
 8015db2:	4604      	mov	r4, r0
 8015db4:	4608      	mov	r0, r1
 8015db6:	602b      	str	r3, [r5, #0]
 8015db8:	f7eb fd8d 	bl	80018d6 <_close>
 8015dbc:	1c43      	adds	r3, r0, #1
 8015dbe:	d102      	bne.n	8015dc6 <_close_r+0x1a>
 8015dc0:	682b      	ldr	r3, [r5, #0]
 8015dc2:	b103      	cbz	r3, 8015dc6 <_close_r+0x1a>
 8015dc4:	6023      	str	r3, [r4, #0]
 8015dc6:	bd38      	pop	{r3, r4, r5, pc}
 8015dc8:	20008eb8 	.word	0x20008eb8

08015dcc <_gettimeofday_r>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	4d07      	ldr	r5, [pc, #28]	@ (8015dec <_gettimeofday_r+0x20>)
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	4608      	mov	r0, r1
 8015dd6:	4611      	mov	r1, r2
 8015dd8:	602b      	str	r3, [r5, #0]
 8015dda:	f000 fe01 	bl	80169e0 <_gettimeofday>
 8015dde:	1c43      	adds	r3, r0, #1
 8015de0:	d102      	bne.n	8015de8 <_gettimeofday_r+0x1c>
 8015de2:	682b      	ldr	r3, [r5, #0]
 8015de4:	b103      	cbz	r3, 8015de8 <_gettimeofday_r+0x1c>
 8015de6:	6023      	str	r3, [r4, #0]
 8015de8:	bd38      	pop	{r3, r4, r5, pc}
 8015dea:	bf00      	nop
 8015dec:	20008eb8 	.word	0x20008eb8

08015df0 <_lseek_r>:
 8015df0:	b538      	push	{r3, r4, r5, lr}
 8015df2:	4d07      	ldr	r5, [pc, #28]	@ (8015e10 <_lseek_r+0x20>)
 8015df4:	4604      	mov	r4, r0
 8015df6:	4608      	mov	r0, r1
 8015df8:	4611      	mov	r1, r2
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	602a      	str	r2, [r5, #0]
 8015dfe:	461a      	mov	r2, r3
 8015e00:	f7eb fd90 	bl	8001924 <_lseek>
 8015e04:	1c43      	adds	r3, r0, #1
 8015e06:	d102      	bne.n	8015e0e <_lseek_r+0x1e>
 8015e08:	682b      	ldr	r3, [r5, #0]
 8015e0a:	b103      	cbz	r3, 8015e0e <_lseek_r+0x1e>
 8015e0c:	6023      	str	r3, [r4, #0]
 8015e0e:	bd38      	pop	{r3, r4, r5, pc}
 8015e10:	20008eb8 	.word	0x20008eb8

08015e14 <_read_r>:
 8015e14:	b538      	push	{r3, r4, r5, lr}
 8015e16:	4d07      	ldr	r5, [pc, #28]	@ (8015e34 <_read_r+0x20>)
 8015e18:	4604      	mov	r4, r0
 8015e1a:	4608      	mov	r0, r1
 8015e1c:	4611      	mov	r1, r2
 8015e1e:	2200      	movs	r2, #0
 8015e20:	602a      	str	r2, [r5, #0]
 8015e22:	461a      	mov	r2, r3
 8015e24:	f7fe ff12 	bl	8014c4c <_read>
 8015e28:	1c43      	adds	r3, r0, #1
 8015e2a:	d102      	bne.n	8015e32 <_read_r+0x1e>
 8015e2c:	682b      	ldr	r3, [r5, #0]
 8015e2e:	b103      	cbz	r3, 8015e32 <_read_r+0x1e>
 8015e30:	6023      	str	r3, [r4, #0]
 8015e32:	bd38      	pop	{r3, r4, r5, pc}
 8015e34:	20008eb8 	.word	0x20008eb8

08015e38 <_write_r>:
 8015e38:	b538      	push	{r3, r4, r5, lr}
 8015e3a:	4d07      	ldr	r5, [pc, #28]	@ (8015e58 <_write_r+0x20>)
 8015e3c:	4604      	mov	r4, r0
 8015e3e:	4608      	mov	r0, r1
 8015e40:	4611      	mov	r1, r2
 8015e42:	2200      	movs	r2, #0
 8015e44:	602a      	str	r2, [r5, #0]
 8015e46:	461a      	mov	r2, r3
 8015e48:	f7fe fed0 	bl	8014bec <_write>
 8015e4c:	1c43      	adds	r3, r0, #1
 8015e4e:	d102      	bne.n	8015e56 <_write_r+0x1e>
 8015e50:	682b      	ldr	r3, [r5, #0]
 8015e52:	b103      	cbz	r3, 8015e56 <_write_r+0x1e>
 8015e54:	6023      	str	r3, [r4, #0]
 8015e56:	bd38      	pop	{r3, r4, r5, pc}
 8015e58:	20008eb8 	.word	0x20008eb8

08015e5c <__libc_init_array>:
 8015e5c:	b570      	push	{r4, r5, r6, lr}
 8015e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8015e94 <__libc_init_array+0x38>)
 8015e60:	4c0d      	ldr	r4, [pc, #52]	@ (8015e98 <__libc_init_array+0x3c>)
 8015e62:	1b64      	subs	r4, r4, r5
 8015e64:	10a4      	asrs	r4, r4, #2
 8015e66:	2600      	movs	r6, #0
 8015e68:	42a6      	cmp	r6, r4
 8015e6a:	d109      	bne.n	8015e80 <__libc_init_array+0x24>
 8015e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8015e9c <__libc_init_array+0x40>)
 8015e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8015ea0 <__libc_init_array+0x44>)
 8015e70:	f000 fdbe 	bl	80169f0 <_init>
 8015e74:	1b64      	subs	r4, r4, r5
 8015e76:	10a4      	asrs	r4, r4, #2
 8015e78:	2600      	movs	r6, #0
 8015e7a:	42a6      	cmp	r6, r4
 8015e7c:	d105      	bne.n	8015e8a <__libc_init_array+0x2e>
 8015e7e:	bd70      	pop	{r4, r5, r6, pc}
 8015e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e84:	4798      	blx	r3
 8015e86:	3601      	adds	r6, #1
 8015e88:	e7ee      	b.n	8015e68 <__libc_init_array+0xc>
 8015e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e8e:	4798      	blx	r3
 8015e90:	3601      	adds	r6, #1
 8015e92:	e7f2      	b.n	8015e7a <__libc_init_array+0x1e>
 8015e94:	08019d08 	.word	0x08019d08
 8015e98:	08019d08 	.word	0x08019d08
 8015e9c:	08019d08 	.word	0x08019d08
 8015ea0:	08019d0c 	.word	0x08019d0c

08015ea4 <__retarget_lock_init_recursive>:
 8015ea4:	4770      	bx	lr

08015ea6 <__retarget_lock_acquire_recursive>:
 8015ea6:	4770      	bx	lr

08015ea8 <__retarget_lock_release_recursive>:
 8015ea8:	4770      	bx	lr

08015eaa <memcpy>:
 8015eaa:	440a      	add	r2, r1
 8015eac:	4291      	cmp	r1, r2
 8015eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8015eb2:	d100      	bne.n	8015eb6 <memcpy+0xc>
 8015eb4:	4770      	bx	lr
 8015eb6:	b510      	push	{r4, lr}
 8015eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ec0:	4291      	cmp	r1, r2
 8015ec2:	d1f9      	bne.n	8015eb8 <memcpy+0xe>
 8015ec4:	bd10      	pop	{r4, pc}
	...

08015ec8 <__assert_func>:
 8015ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015eca:	4614      	mov	r4, r2
 8015ecc:	461a      	mov	r2, r3
 8015ece:	4b09      	ldr	r3, [pc, #36]	@ (8015ef4 <__assert_func+0x2c>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	4605      	mov	r5, r0
 8015ed4:	68d8      	ldr	r0, [r3, #12]
 8015ed6:	b954      	cbnz	r4, 8015eee <__assert_func+0x26>
 8015ed8:	4b07      	ldr	r3, [pc, #28]	@ (8015ef8 <__assert_func+0x30>)
 8015eda:	461c      	mov	r4, r3
 8015edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015ee0:	9100      	str	r1, [sp, #0]
 8015ee2:	462b      	mov	r3, r5
 8015ee4:	4905      	ldr	r1, [pc, #20]	@ (8015efc <__assert_func+0x34>)
 8015ee6:	f000 fc89 	bl	80167fc <fiprintf>
 8015eea:	f000 fd2d 	bl	8016948 <abort>
 8015eee:	4b04      	ldr	r3, [pc, #16]	@ (8015f00 <__assert_func+0x38>)
 8015ef0:	e7f4      	b.n	8015edc <__assert_func+0x14>
 8015ef2:	bf00      	nop
 8015ef4:	20000038 	.word	0x20000038
 8015ef8:	08019cca 	.word	0x08019cca
 8015efc:	08019c9c 	.word	0x08019c9c
 8015f00:	08019c8f 	.word	0x08019c8f

08015f04 <_free_r>:
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	4605      	mov	r5, r0
 8015f08:	2900      	cmp	r1, #0
 8015f0a:	d041      	beq.n	8015f90 <_free_r+0x8c>
 8015f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f10:	1f0c      	subs	r4, r1, #4
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	bfb8      	it	lt
 8015f16:	18e4      	addlt	r4, r4, r3
 8015f18:	f000 f8e8 	bl	80160ec <__malloc_lock>
 8015f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8015f94 <_free_r+0x90>)
 8015f1e:	6813      	ldr	r3, [r2, #0]
 8015f20:	b933      	cbnz	r3, 8015f30 <_free_r+0x2c>
 8015f22:	6063      	str	r3, [r4, #4]
 8015f24:	6014      	str	r4, [r2, #0]
 8015f26:	4628      	mov	r0, r5
 8015f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f2c:	f000 b8e4 	b.w	80160f8 <__malloc_unlock>
 8015f30:	42a3      	cmp	r3, r4
 8015f32:	d908      	bls.n	8015f46 <_free_r+0x42>
 8015f34:	6820      	ldr	r0, [r4, #0]
 8015f36:	1821      	adds	r1, r4, r0
 8015f38:	428b      	cmp	r3, r1
 8015f3a:	bf01      	itttt	eq
 8015f3c:	6819      	ldreq	r1, [r3, #0]
 8015f3e:	685b      	ldreq	r3, [r3, #4]
 8015f40:	1809      	addeq	r1, r1, r0
 8015f42:	6021      	streq	r1, [r4, #0]
 8015f44:	e7ed      	b.n	8015f22 <_free_r+0x1e>
 8015f46:	461a      	mov	r2, r3
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	b10b      	cbz	r3, 8015f50 <_free_r+0x4c>
 8015f4c:	42a3      	cmp	r3, r4
 8015f4e:	d9fa      	bls.n	8015f46 <_free_r+0x42>
 8015f50:	6811      	ldr	r1, [r2, #0]
 8015f52:	1850      	adds	r0, r2, r1
 8015f54:	42a0      	cmp	r0, r4
 8015f56:	d10b      	bne.n	8015f70 <_free_r+0x6c>
 8015f58:	6820      	ldr	r0, [r4, #0]
 8015f5a:	4401      	add	r1, r0
 8015f5c:	1850      	adds	r0, r2, r1
 8015f5e:	4283      	cmp	r3, r0
 8015f60:	6011      	str	r1, [r2, #0]
 8015f62:	d1e0      	bne.n	8015f26 <_free_r+0x22>
 8015f64:	6818      	ldr	r0, [r3, #0]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	6053      	str	r3, [r2, #4]
 8015f6a:	4408      	add	r0, r1
 8015f6c:	6010      	str	r0, [r2, #0]
 8015f6e:	e7da      	b.n	8015f26 <_free_r+0x22>
 8015f70:	d902      	bls.n	8015f78 <_free_r+0x74>
 8015f72:	230c      	movs	r3, #12
 8015f74:	602b      	str	r3, [r5, #0]
 8015f76:	e7d6      	b.n	8015f26 <_free_r+0x22>
 8015f78:	6820      	ldr	r0, [r4, #0]
 8015f7a:	1821      	adds	r1, r4, r0
 8015f7c:	428b      	cmp	r3, r1
 8015f7e:	bf04      	itt	eq
 8015f80:	6819      	ldreq	r1, [r3, #0]
 8015f82:	685b      	ldreq	r3, [r3, #4]
 8015f84:	6063      	str	r3, [r4, #4]
 8015f86:	bf04      	itt	eq
 8015f88:	1809      	addeq	r1, r1, r0
 8015f8a:	6021      	streq	r1, [r4, #0]
 8015f8c:	6054      	str	r4, [r2, #4]
 8015f8e:	e7ca      	b.n	8015f26 <_free_r+0x22>
 8015f90:	bd38      	pop	{r3, r4, r5, pc}
 8015f92:	bf00      	nop
 8015f94:	20008ec4 	.word	0x20008ec4

08015f98 <malloc>:
 8015f98:	4b02      	ldr	r3, [pc, #8]	@ (8015fa4 <malloc+0xc>)
 8015f9a:	4601      	mov	r1, r0
 8015f9c:	6818      	ldr	r0, [r3, #0]
 8015f9e:	f000 b825 	b.w	8015fec <_malloc_r>
 8015fa2:	bf00      	nop
 8015fa4:	20000038 	.word	0x20000038

08015fa8 <sbrk_aligned>:
 8015fa8:	b570      	push	{r4, r5, r6, lr}
 8015faa:	4e0f      	ldr	r6, [pc, #60]	@ (8015fe8 <sbrk_aligned+0x40>)
 8015fac:	460c      	mov	r4, r1
 8015fae:	6831      	ldr	r1, [r6, #0]
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	b911      	cbnz	r1, 8015fba <sbrk_aligned+0x12>
 8015fb4:	f000 fcb8 	bl	8016928 <_sbrk_r>
 8015fb8:	6030      	str	r0, [r6, #0]
 8015fba:	4621      	mov	r1, r4
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	f000 fcb3 	bl	8016928 <_sbrk_r>
 8015fc2:	1c43      	adds	r3, r0, #1
 8015fc4:	d103      	bne.n	8015fce <sbrk_aligned+0x26>
 8015fc6:	f04f 34ff 	mov.w	r4, #4294967295
 8015fca:	4620      	mov	r0, r4
 8015fcc:	bd70      	pop	{r4, r5, r6, pc}
 8015fce:	1cc4      	adds	r4, r0, #3
 8015fd0:	f024 0403 	bic.w	r4, r4, #3
 8015fd4:	42a0      	cmp	r0, r4
 8015fd6:	d0f8      	beq.n	8015fca <sbrk_aligned+0x22>
 8015fd8:	1a21      	subs	r1, r4, r0
 8015fda:	4628      	mov	r0, r5
 8015fdc:	f000 fca4 	bl	8016928 <_sbrk_r>
 8015fe0:	3001      	adds	r0, #1
 8015fe2:	d1f2      	bne.n	8015fca <sbrk_aligned+0x22>
 8015fe4:	e7ef      	b.n	8015fc6 <sbrk_aligned+0x1e>
 8015fe6:	bf00      	nop
 8015fe8:	20008ec0 	.word	0x20008ec0

08015fec <_malloc_r>:
 8015fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ff0:	1ccd      	adds	r5, r1, #3
 8015ff2:	f025 0503 	bic.w	r5, r5, #3
 8015ff6:	3508      	adds	r5, #8
 8015ff8:	2d0c      	cmp	r5, #12
 8015ffa:	bf38      	it	cc
 8015ffc:	250c      	movcc	r5, #12
 8015ffe:	2d00      	cmp	r5, #0
 8016000:	4606      	mov	r6, r0
 8016002:	db01      	blt.n	8016008 <_malloc_r+0x1c>
 8016004:	42a9      	cmp	r1, r5
 8016006:	d904      	bls.n	8016012 <_malloc_r+0x26>
 8016008:	230c      	movs	r3, #12
 801600a:	6033      	str	r3, [r6, #0]
 801600c:	2000      	movs	r0, #0
 801600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80160e8 <_malloc_r+0xfc>
 8016016:	f000 f869 	bl	80160ec <__malloc_lock>
 801601a:	f8d8 3000 	ldr.w	r3, [r8]
 801601e:	461c      	mov	r4, r3
 8016020:	bb44      	cbnz	r4, 8016074 <_malloc_r+0x88>
 8016022:	4629      	mov	r1, r5
 8016024:	4630      	mov	r0, r6
 8016026:	f7ff ffbf 	bl	8015fa8 <sbrk_aligned>
 801602a:	1c43      	adds	r3, r0, #1
 801602c:	4604      	mov	r4, r0
 801602e:	d158      	bne.n	80160e2 <_malloc_r+0xf6>
 8016030:	f8d8 4000 	ldr.w	r4, [r8]
 8016034:	4627      	mov	r7, r4
 8016036:	2f00      	cmp	r7, #0
 8016038:	d143      	bne.n	80160c2 <_malloc_r+0xd6>
 801603a:	2c00      	cmp	r4, #0
 801603c:	d04b      	beq.n	80160d6 <_malloc_r+0xea>
 801603e:	6823      	ldr	r3, [r4, #0]
 8016040:	4639      	mov	r1, r7
 8016042:	4630      	mov	r0, r6
 8016044:	eb04 0903 	add.w	r9, r4, r3
 8016048:	f000 fc6e 	bl	8016928 <_sbrk_r>
 801604c:	4581      	cmp	r9, r0
 801604e:	d142      	bne.n	80160d6 <_malloc_r+0xea>
 8016050:	6821      	ldr	r1, [r4, #0]
 8016052:	1a6d      	subs	r5, r5, r1
 8016054:	4629      	mov	r1, r5
 8016056:	4630      	mov	r0, r6
 8016058:	f7ff ffa6 	bl	8015fa8 <sbrk_aligned>
 801605c:	3001      	adds	r0, #1
 801605e:	d03a      	beq.n	80160d6 <_malloc_r+0xea>
 8016060:	6823      	ldr	r3, [r4, #0]
 8016062:	442b      	add	r3, r5
 8016064:	6023      	str	r3, [r4, #0]
 8016066:	f8d8 3000 	ldr.w	r3, [r8]
 801606a:	685a      	ldr	r2, [r3, #4]
 801606c:	bb62      	cbnz	r2, 80160c8 <_malloc_r+0xdc>
 801606e:	f8c8 7000 	str.w	r7, [r8]
 8016072:	e00f      	b.n	8016094 <_malloc_r+0xa8>
 8016074:	6822      	ldr	r2, [r4, #0]
 8016076:	1b52      	subs	r2, r2, r5
 8016078:	d420      	bmi.n	80160bc <_malloc_r+0xd0>
 801607a:	2a0b      	cmp	r2, #11
 801607c:	d917      	bls.n	80160ae <_malloc_r+0xc2>
 801607e:	1961      	adds	r1, r4, r5
 8016080:	42a3      	cmp	r3, r4
 8016082:	6025      	str	r5, [r4, #0]
 8016084:	bf18      	it	ne
 8016086:	6059      	strne	r1, [r3, #4]
 8016088:	6863      	ldr	r3, [r4, #4]
 801608a:	bf08      	it	eq
 801608c:	f8c8 1000 	streq.w	r1, [r8]
 8016090:	5162      	str	r2, [r4, r5]
 8016092:	604b      	str	r3, [r1, #4]
 8016094:	4630      	mov	r0, r6
 8016096:	f000 f82f 	bl	80160f8 <__malloc_unlock>
 801609a:	f104 000b 	add.w	r0, r4, #11
 801609e:	1d23      	adds	r3, r4, #4
 80160a0:	f020 0007 	bic.w	r0, r0, #7
 80160a4:	1ac2      	subs	r2, r0, r3
 80160a6:	bf1c      	itt	ne
 80160a8:	1a1b      	subne	r3, r3, r0
 80160aa:	50a3      	strne	r3, [r4, r2]
 80160ac:	e7af      	b.n	801600e <_malloc_r+0x22>
 80160ae:	6862      	ldr	r2, [r4, #4]
 80160b0:	42a3      	cmp	r3, r4
 80160b2:	bf0c      	ite	eq
 80160b4:	f8c8 2000 	streq.w	r2, [r8]
 80160b8:	605a      	strne	r2, [r3, #4]
 80160ba:	e7eb      	b.n	8016094 <_malloc_r+0xa8>
 80160bc:	4623      	mov	r3, r4
 80160be:	6864      	ldr	r4, [r4, #4]
 80160c0:	e7ae      	b.n	8016020 <_malloc_r+0x34>
 80160c2:	463c      	mov	r4, r7
 80160c4:	687f      	ldr	r7, [r7, #4]
 80160c6:	e7b6      	b.n	8016036 <_malloc_r+0x4a>
 80160c8:	461a      	mov	r2, r3
 80160ca:	685b      	ldr	r3, [r3, #4]
 80160cc:	42a3      	cmp	r3, r4
 80160ce:	d1fb      	bne.n	80160c8 <_malloc_r+0xdc>
 80160d0:	2300      	movs	r3, #0
 80160d2:	6053      	str	r3, [r2, #4]
 80160d4:	e7de      	b.n	8016094 <_malloc_r+0xa8>
 80160d6:	230c      	movs	r3, #12
 80160d8:	6033      	str	r3, [r6, #0]
 80160da:	4630      	mov	r0, r6
 80160dc:	f000 f80c 	bl	80160f8 <__malloc_unlock>
 80160e0:	e794      	b.n	801600c <_malloc_r+0x20>
 80160e2:	6005      	str	r5, [r0, #0]
 80160e4:	e7d6      	b.n	8016094 <_malloc_r+0xa8>
 80160e6:	bf00      	nop
 80160e8:	20008ec4 	.word	0x20008ec4

080160ec <__malloc_lock>:
 80160ec:	4801      	ldr	r0, [pc, #4]	@ (80160f4 <__malloc_lock+0x8>)
 80160ee:	f7ff beda 	b.w	8015ea6 <__retarget_lock_acquire_recursive>
 80160f2:	bf00      	nop
 80160f4:	20008ebc 	.word	0x20008ebc

080160f8 <__malloc_unlock>:
 80160f8:	4801      	ldr	r0, [pc, #4]	@ (8016100 <__malloc_unlock+0x8>)
 80160fa:	f7ff bed5 	b.w	8015ea8 <__retarget_lock_release_recursive>
 80160fe:	bf00      	nop
 8016100:	20008ebc 	.word	0x20008ebc

08016104 <__sfputc_r>:
 8016104:	6893      	ldr	r3, [r2, #8]
 8016106:	3b01      	subs	r3, #1
 8016108:	2b00      	cmp	r3, #0
 801610a:	b410      	push	{r4}
 801610c:	6093      	str	r3, [r2, #8]
 801610e:	da08      	bge.n	8016122 <__sfputc_r+0x1e>
 8016110:	6994      	ldr	r4, [r2, #24]
 8016112:	42a3      	cmp	r3, r4
 8016114:	db01      	blt.n	801611a <__sfputc_r+0x16>
 8016116:	290a      	cmp	r1, #10
 8016118:	d103      	bne.n	8016122 <__sfputc_r+0x1e>
 801611a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801611e:	f7ff bd6a 	b.w	8015bf6 <__swbuf_r>
 8016122:	6813      	ldr	r3, [r2, #0]
 8016124:	1c58      	adds	r0, r3, #1
 8016126:	6010      	str	r0, [r2, #0]
 8016128:	7019      	strb	r1, [r3, #0]
 801612a:	4608      	mov	r0, r1
 801612c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016130:	4770      	bx	lr

08016132 <__sfputs_r>:
 8016132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016134:	4606      	mov	r6, r0
 8016136:	460f      	mov	r7, r1
 8016138:	4614      	mov	r4, r2
 801613a:	18d5      	adds	r5, r2, r3
 801613c:	42ac      	cmp	r4, r5
 801613e:	d101      	bne.n	8016144 <__sfputs_r+0x12>
 8016140:	2000      	movs	r0, #0
 8016142:	e007      	b.n	8016154 <__sfputs_r+0x22>
 8016144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016148:	463a      	mov	r2, r7
 801614a:	4630      	mov	r0, r6
 801614c:	f7ff ffda 	bl	8016104 <__sfputc_r>
 8016150:	1c43      	adds	r3, r0, #1
 8016152:	d1f3      	bne.n	801613c <__sfputs_r+0xa>
 8016154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016158 <_vfiprintf_r>:
 8016158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801615c:	460d      	mov	r5, r1
 801615e:	b09d      	sub	sp, #116	@ 0x74
 8016160:	4614      	mov	r4, r2
 8016162:	4698      	mov	r8, r3
 8016164:	4606      	mov	r6, r0
 8016166:	b118      	cbz	r0, 8016170 <_vfiprintf_r+0x18>
 8016168:	6a03      	ldr	r3, [r0, #32]
 801616a:	b90b      	cbnz	r3, 8016170 <_vfiprintf_r+0x18>
 801616c:	f7ff fc5a 	bl	8015a24 <__sinit>
 8016170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016172:	07d9      	lsls	r1, r3, #31
 8016174:	d405      	bmi.n	8016182 <_vfiprintf_r+0x2a>
 8016176:	89ab      	ldrh	r3, [r5, #12]
 8016178:	059a      	lsls	r2, r3, #22
 801617a:	d402      	bmi.n	8016182 <_vfiprintf_r+0x2a>
 801617c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801617e:	f7ff fe92 	bl	8015ea6 <__retarget_lock_acquire_recursive>
 8016182:	89ab      	ldrh	r3, [r5, #12]
 8016184:	071b      	lsls	r3, r3, #28
 8016186:	d501      	bpl.n	801618c <_vfiprintf_r+0x34>
 8016188:	692b      	ldr	r3, [r5, #16]
 801618a:	b99b      	cbnz	r3, 80161b4 <_vfiprintf_r+0x5c>
 801618c:	4629      	mov	r1, r5
 801618e:	4630      	mov	r0, r6
 8016190:	f7ff fd70 	bl	8015c74 <__swsetup_r>
 8016194:	b170      	cbz	r0, 80161b4 <_vfiprintf_r+0x5c>
 8016196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016198:	07dc      	lsls	r4, r3, #31
 801619a:	d504      	bpl.n	80161a6 <_vfiprintf_r+0x4e>
 801619c:	f04f 30ff 	mov.w	r0, #4294967295
 80161a0:	b01d      	add	sp, #116	@ 0x74
 80161a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a6:	89ab      	ldrh	r3, [r5, #12]
 80161a8:	0598      	lsls	r0, r3, #22
 80161aa:	d4f7      	bmi.n	801619c <_vfiprintf_r+0x44>
 80161ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80161ae:	f7ff fe7b 	bl	8015ea8 <__retarget_lock_release_recursive>
 80161b2:	e7f3      	b.n	801619c <_vfiprintf_r+0x44>
 80161b4:	2300      	movs	r3, #0
 80161b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80161b8:	2320      	movs	r3, #32
 80161ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80161be:	f8cd 800c 	str.w	r8, [sp, #12]
 80161c2:	2330      	movs	r3, #48	@ 0x30
 80161c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016374 <_vfiprintf_r+0x21c>
 80161c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80161cc:	f04f 0901 	mov.w	r9, #1
 80161d0:	4623      	mov	r3, r4
 80161d2:	469a      	mov	sl, r3
 80161d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161d8:	b10a      	cbz	r2, 80161de <_vfiprintf_r+0x86>
 80161da:	2a25      	cmp	r2, #37	@ 0x25
 80161dc:	d1f9      	bne.n	80161d2 <_vfiprintf_r+0x7a>
 80161de:	ebba 0b04 	subs.w	fp, sl, r4
 80161e2:	d00b      	beq.n	80161fc <_vfiprintf_r+0xa4>
 80161e4:	465b      	mov	r3, fp
 80161e6:	4622      	mov	r2, r4
 80161e8:	4629      	mov	r1, r5
 80161ea:	4630      	mov	r0, r6
 80161ec:	f7ff ffa1 	bl	8016132 <__sfputs_r>
 80161f0:	3001      	adds	r0, #1
 80161f2:	f000 80a7 	beq.w	8016344 <_vfiprintf_r+0x1ec>
 80161f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80161f8:	445a      	add	r2, fp
 80161fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80161fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016200:	2b00      	cmp	r3, #0
 8016202:	f000 809f 	beq.w	8016344 <_vfiprintf_r+0x1ec>
 8016206:	2300      	movs	r3, #0
 8016208:	f04f 32ff 	mov.w	r2, #4294967295
 801620c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016210:	f10a 0a01 	add.w	sl, sl, #1
 8016214:	9304      	str	r3, [sp, #16]
 8016216:	9307      	str	r3, [sp, #28]
 8016218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801621c:	931a      	str	r3, [sp, #104]	@ 0x68
 801621e:	4654      	mov	r4, sl
 8016220:	2205      	movs	r2, #5
 8016222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016226:	4853      	ldr	r0, [pc, #332]	@ (8016374 <_vfiprintf_r+0x21c>)
 8016228:	f7e9 fffa 	bl	8000220 <memchr>
 801622c:	9a04      	ldr	r2, [sp, #16]
 801622e:	b9d8      	cbnz	r0, 8016268 <_vfiprintf_r+0x110>
 8016230:	06d1      	lsls	r1, r2, #27
 8016232:	bf44      	itt	mi
 8016234:	2320      	movmi	r3, #32
 8016236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801623a:	0713      	lsls	r3, r2, #28
 801623c:	bf44      	itt	mi
 801623e:	232b      	movmi	r3, #43	@ 0x2b
 8016240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016244:	f89a 3000 	ldrb.w	r3, [sl]
 8016248:	2b2a      	cmp	r3, #42	@ 0x2a
 801624a:	d015      	beq.n	8016278 <_vfiprintf_r+0x120>
 801624c:	9a07      	ldr	r2, [sp, #28]
 801624e:	4654      	mov	r4, sl
 8016250:	2000      	movs	r0, #0
 8016252:	f04f 0c0a 	mov.w	ip, #10
 8016256:	4621      	mov	r1, r4
 8016258:	f811 3b01 	ldrb.w	r3, [r1], #1
 801625c:	3b30      	subs	r3, #48	@ 0x30
 801625e:	2b09      	cmp	r3, #9
 8016260:	d94b      	bls.n	80162fa <_vfiprintf_r+0x1a2>
 8016262:	b1b0      	cbz	r0, 8016292 <_vfiprintf_r+0x13a>
 8016264:	9207      	str	r2, [sp, #28]
 8016266:	e014      	b.n	8016292 <_vfiprintf_r+0x13a>
 8016268:	eba0 0308 	sub.w	r3, r0, r8
 801626c:	fa09 f303 	lsl.w	r3, r9, r3
 8016270:	4313      	orrs	r3, r2
 8016272:	9304      	str	r3, [sp, #16]
 8016274:	46a2      	mov	sl, r4
 8016276:	e7d2      	b.n	801621e <_vfiprintf_r+0xc6>
 8016278:	9b03      	ldr	r3, [sp, #12]
 801627a:	1d19      	adds	r1, r3, #4
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	9103      	str	r1, [sp, #12]
 8016280:	2b00      	cmp	r3, #0
 8016282:	bfbb      	ittet	lt
 8016284:	425b      	neglt	r3, r3
 8016286:	f042 0202 	orrlt.w	r2, r2, #2
 801628a:	9307      	strge	r3, [sp, #28]
 801628c:	9307      	strlt	r3, [sp, #28]
 801628e:	bfb8      	it	lt
 8016290:	9204      	strlt	r2, [sp, #16]
 8016292:	7823      	ldrb	r3, [r4, #0]
 8016294:	2b2e      	cmp	r3, #46	@ 0x2e
 8016296:	d10a      	bne.n	80162ae <_vfiprintf_r+0x156>
 8016298:	7863      	ldrb	r3, [r4, #1]
 801629a:	2b2a      	cmp	r3, #42	@ 0x2a
 801629c:	d132      	bne.n	8016304 <_vfiprintf_r+0x1ac>
 801629e:	9b03      	ldr	r3, [sp, #12]
 80162a0:	1d1a      	adds	r2, r3, #4
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	9203      	str	r2, [sp, #12]
 80162a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80162aa:	3402      	adds	r4, #2
 80162ac:	9305      	str	r3, [sp, #20]
 80162ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016384 <_vfiprintf_r+0x22c>
 80162b2:	7821      	ldrb	r1, [r4, #0]
 80162b4:	2203      	movs	r2, #3
 80162b6:	4650      	mov	r0, sl
 80162b8:	f7e9 ffb2 	bl	8000220 <memchr>
 80162bc:	b138      	cbz	r0, 80162ce <_vfiprintf_r+0x176>
 80162be:	9b04      	ldr	r3, [sp, #16]
 80162c0:	eba0 000a 	sub.w	r0, r0, sl
 80162c4:	2240      	movs	r2, #64	@ 0x40
 80162c6:	4082      	lsls	r2, r0
 80162c8:	4313      	orrs	r3, r2
 80162ca:	3401      	adds	r4, #1
 80162cc:	9304      	str	r3, [sp, #16]
 80162ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162d2:	4829      	ldr	r0, [pc, #164]	@ (8016378 <_vfiprintf_r+0x220>)
 80162d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80162d8:	2206      	movs	r2, #6
 80162da:	f7e9 ffa1 	bl	8000220 <memchr>
 80162de:	2800      	cmp	r0, #0
 80162e0:	d03f      	beq.n	8016362 <_vfiprintf_r+0x20a>
 80162e2:	4b26      	ldr	r3, [pc, #152]	@ (801637c <_vfiprintf_r+0x224>)
 80162e4:	bb1b      	cbnz	r3, 801632e <_vfiprintf_r+0x1d6>
 80162e6:	9b03      	ldr	r3, [sp, #12]
 80162e8:	3307      	adds	r3, #7
 80162ea:	f023 0307 	bic.w	r3, r3, #7
 80162ee:	3308      	adds	r3, #8
 80162f0:	9303      	str	r3, [sp, #12]
 80162f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162f4:	443b      	add	r3, r7
 80162f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80162f8:	e76a      	b.n	80161d0 <_vfiprintf_r+0x78>
 80162fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80162fe:	460c      	mov	r4, r1
 8016300:	2001      	movs	r0, #1
 8016302:	e7a8      	b.n	8016256 <_vfiprintf_r+0xfe>
 8016304:	2300      	movs	r3, #0
 8016306:	3401      	adds	r4, #1
 8016308:	9305      	str	r3, [sp, #20]
 801630a:	4619      	mov	r1, r3
 801630c:	f04f 0c0a 	mov.w	ip, #10
 8016310:	4620      	mov	r0, r4
 8016312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016316:	3a30      	subs	r2, #48	@ 0x30
 8016318:	2a09      	cmp	r2, #9
 801631a:	d903      	bls.n	8016324 <_vfiprintf_r+0x1cc>
 801631c:	2b00      	cmp	r3, #0
 801631e:	d0c6      	beq.n	80162ae <_vfiprintf_r+0x156>
 8016320:	9105      	str	r1, [sp, #20]
 8016322:	e7c4      	b.n	80162ae <_vfiprintf_r+0x156>
 8016324:	fb0c 2101 	mla	r1, ip, r1, r2
 8016328:	4604      	mov	r4, r0
 801632a:	2301      	movs	r3, #1
 801632c:	e7f0      	b.n	8016310 <_vfiprintf_r+0x1b8>
 801632e:	ab03      	add	r3, sp, #12
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	462a      	mov	r2, r5
 8016334:	4b12      	ldr	r3, [pc, #72]	@ (8016380 <_vfiprintf_r+0x228>)
 8016336:	a904      	add	r1, sp, #16
 8016338:	4630      	mov	r0, r6
 801633a:	f3af 8000 	nop.w
 801633e:	4607      	mov	r7, r0
 8016340:	1c78      	adds	r0, r7, #1
 8016342:	d1d6      	bne.n	80162f2 <_vfiprintf_r+0x19a>
 8016344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016346:	07d9      	lsls	r1, r3, #31
 8016348:	d405      	bmi.n	8016356 <_vfiprintf_r+0x1fe>
 801634a:	89ab      	ldrh	r3, [r5, #12]
 801634c:	059a      	lsls	r2, r3, #22
 801634e:	d402      	bmi.n	8016356 <_vfiprintf_r+0x1fe>
 8016350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016352:	f7ff fda9 	bl	8015ea8 <__retarget_lock_release_recursive>
 8016356:	89ab      	ldrh	r3, [r5, #12]
 8016358:	065b      	lsls	r3, r3, #25
 801635a:	f53f af1f 	bmi.w	801619c <_vfiprintf_r+0x44>
 801635e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016360:	e71e      	b.n	80161a0 <_vfiprintf_r+0x48>
 8016362:	ab03      	add	r3, sp, #12
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	462a      	mov	r2, r5
 8016368:	4b05      	ldr	r3, [pc, #20]	@ (8016380 <_vfiprintf_r+0x228>)
 801636a:	a904      	add	r1, sp, #16
 801636c:	4630      	mov	r0, r6
 801636e:	f000 f879 	bl	8016464 <_printf_i>
 8016372:	e7e4      	b.n	801633e <_vfiprintf_r+0x1e6>
 8016374:	08019ccb 	.word	0x08019ccb
 8016378:	08019cd5 	.word	0x08019cd5
 801637c:	00000000 	.word	0x00000000
 8016380:	08016133 	.word	0x08016133
 8016384:	08019cd1 	.word	0x08019cd1

08016388 <_printf_common>:
 8016388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801638c:	4616      	mov	r6, r2
 801638e:	4698      	mov	r8, r3
 8016390:	688a      	ldr	r2, [r1, #8]
 8016392:	690b      	ldr	r3, [r1, #16]
 8016394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016398:	4293      	cmp	r3, r2
 801639a:	bfb8      	it	lt
 801639c:	4613      	movlt	r3, r2
 801639e:	6033      	str	r3, [r6, #0]
 80163a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80163a4:	4607      	mov	r7, r0
 80163a6:	460c      	mov	r4, r1
 80163a8:	b10a      	cbz	r2, 80163ae <_printf_common+0x26>
 80163aa:	3301      	adds	r3, #1
 80163ac:	6033      	str	r3, [r6, #0]
 80163ae:	6823      	ldr	r3, [r4, #0]
 80163b0:	0699      	lsls	r1, r3, #26
 80163b2:	bf42      	ittt	mi
 80163b4:	6833      	ldrmi	r3, [r6, #0]
 80163b6:	3302      	addmi	r3, #2
 80163b8:	6033      	strmi	r3, [r6, #0]
 80163ba:	6825      	ldr	r5, [r4, #0]
 80163bc:	f015 0506 	ands.w	r5, r5, #6
 80163c0:	d106      	bne.n	80163d0 <_printf_common+0x48>
 80163c2:	f104 0a19 	add.w	sl, r4, #25
 80163c6:	68e3      	ldr	r3, [r4, #12]
 80163c8:	6832      	ldr	r2, [r6, #0]
 80163ca:	1a9b      	subs	r3, r3, r2
 80163cc:	42ab      	cmp	r3, r5
 80163ce:	dc26      	bgt.n	801641e <_printf_common+0x96>
 80163d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80163d4:	6822      	ldr	r2, [r4, #0]
 80163d6:	3b00      	subs	r3, #0
 80163d8:	bf18      	it	ne
 80163da:	2301      	movne	r3, #1
 80163dc:	0692      	lsls	r2, r2, #26
 80163de:	d42b      	bmi.n	8016438 <_printf_common+0xb0>
 80163e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80163e4:	4641      	mov	r1, r8
 80163e6:	4638      	mov	r0, r7
 80163e8:	47c8      	blx	r9
 80163ea:	3001      	adds	r0, #1
 80163ec:	d01e      	beq.n	801642c <_printf_common+0xa4>
 80163ee:	6823      	ldr	r3, [r4, #0]
 80163f0:	6922      	ldr	r2, [r4, #16]
 80163f2:	f003 0306 	and.w	r3, r3, #6
 80163f6:	2b04      	cmp	r3, #4
 80163f8:	bf02      	ittt	eq
 80163fa:	68e5      	ldreq	r5, [r4, #12]
 80163fc:	6833      	ldreq	r3, [r6, #0]
 80163fe:	1aed      	subeq	r5, r5, r3
 8016400:	68a3      	ldr	r3, [r4, #8]
 8016402:	bf0c      	ite	eq
 8016404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016408:	2500      	movne	r5, #0
 801640a:	4293      	cmp	r3, r2
 801640c:	bfc4      	itt	gt
 801640e:	1a9b      	subgt	r3, r3, r2
 8016410:	18ed      	addgt	r5, r5, r3
 8016412:	2600      	movs	r6, #0
 8016414:	341a      	adds	r4, #26
 8016416:	42b5      	cmp	r5, r6
 8016418:	d11a      	bne.n	8016450 <_printf_common+0xc8>
 801641a:	2000      	movs	r0, #0
 801641c:	e008      	b.n	8016430 <_printf_common+0xa8>
 801641e:	2301      	movs	r3, #1
 8016420:	4652      	mov	r2, sl
 8016422:	4641      	mov	r1, r8
 8016424:	4638      	mov	r0, r7
 8016426:	47c8      	blx	r9
 8016428:	3001      	adds	r0, #1
 801642a:	d103      	bne.n	8016434 <_printf_common+0xac>
 801642c:	f04f 30ff 	mov.w	r0, #4294967295
 8016430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016434:	3501      	adds	r5, #1
 8016436:	e7c6      	b.n	80163c6 <_printf_common+0x3e>
 8016438:	18e1      	adds	r1, r4, r3
 801643a:	1c5a      	adds	r2, r3, #1
 801643c:	2030      	movs	r0, #48	@ 0x30
 801643e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016442:	4422      	add	r2, r4
 8016444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801644c:	3302      	adds	r3, #2
 801644e:	e7c7      	b.n	80163e0 <_printf_common+0x58>
 8016450:	2301      	movs	r3, #1
 8016452:	4622      	mov	r2, r4
 8016454:	4641      	mov	r1, r8
 8016456:	4638      	mov	r0, r7
 8016458:	47c8      	blx	r9
 801645a:	3001      	adds	r0, #1
 801645c:	d0e6      	beq.n	801642c <_printf_common+0xa4>
 801645e:	3601      	adds	r6, #1
 8016460:	e7d9      	b.n	8016416 <_printf_common+0x8e>
	...

08016464 <_printf_i>:
 8016464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016468:	7e0f      	ldrb	r7, [r1, #24]
 801646a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801646c:	2f78      	cmp	r7, #120	@ 0x78
 801646e:	4691      	mov	r9, r2
 8016470:	4680      	mov	r8, r0
 8016472:	460c      	mov	r4, r1
 8016474:	469a      	mov	sl, r3
 8016476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801647a:	d807      	bhi.n	801648c <_printf_i+0x28>
 801647c:	2f62      	cmp	r7, #98	@ 0x62
 801647e:	d80a      	bhi.n	8016496 <_printf_i+0x32>
 8016480:	2f00      	cmp	r7, #0
 8016482:	f000 80d2 	beq.w	801662a <_printf_i+0x1c6>
 8016486:	2f58      	cmp	r7, #88	@ 0x58
 8016488:	f000 80b9 	beq.w	80165fe <_printf_i+0x19a>
 801648c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016494:	e03a      	b.n	801650c <_printf_i+0xa8>
 8016496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801649a:	2b15      	cmp	r3, #21
 801649c:	d8f6      	bhi.n	801648c <_printf_i+0x28>
 801649e:	a101      	add	r1, pc, #4	@ (adr r1, 80164a4 <_printf_i+0x40>)
 80164a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80164a4:	080164fd 	.word	0x080164fd
 80164a8:	08016511 	.word	0x08016511
 80164ac:	0801648d 	.word	0x0801648d
 80164b0:	0801648d 	.word	0x0801648d
 80164b4:	0801648d 	.word	0x0801648d
 80164b8:	0801648d 	.word	0x0801648d
 80164bc:	08016511 	.word	0x08016511
 80164c0:	0801648d 	.word	0x0801648d
 80164c4:	0801648d 	.word	0x0801648d
 80164c8:	0801648d 	.word	0x0801648d
 80164cc:	0801648d 	.word	0x0801648d
 80164d0:	08016611 	.word	0x08016611
 80164d4:	0801653b 	.word	0x0801653b
 80164d8:	080165cb 	.word	0x080165cb
 80164dc:	0801648d 	.word	0x0801648d
 80164e0:	0801648d 	.word	0x0801648d
 80164e4:	08016633 	.word	0x08016633
 80164e8:	0801648d 	.word	0x0801648d
 80164ec:	0801653b 	.word	0x0801653b
 80164f0:	0801648d 	.word	0x0801648d
 80164f4:	0801648d 	.word	0x0801648d
 80164f8:	080165d3 	.word	0x080165d3
 80164fc:	6833      	ldr	r3, [r6, #0]
 80164fe:	1d1a      	adds	r2, r3, #4
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	6032      	str	r2, [r6, #0]
 8016504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801650c:	2301      	movs	r3, #1
 801650e:	e09d      	b.n	801664c <_printf_i+0x1e8>
 8016510:	6833      	ldr	r3, [r6, #0]
 8016512:	6820      	ldr	r0, [r4, #0]
 8016514:	1d19      	adds	r1, r3, #4
 8016516:	6031      	str	r1, [r6, #0]
 8016518:	0606      	lsls	r6, r0, #24
 801651a:	d501      	bpl.n	8016520 <_printf_i+0xbc>
 801651c:	681d      	ldr	r5, [r3, #0]
 801651e:	e003      	b.n	8016528 <_printf_i+0xc4>
 8016520:	0645      	lsls	r5, r0, #25
 8016522:	d5fb      	bpl.n	801651c <_printf_i+0xb8>
 8016524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016528:	2d00      	cmp	r5, #0
 801652a:	da03      	bge.n	8016534 <_printf_i+0xd0>
 801652c:	232d      	movs	r3, #45	@ 0x2d
 801652e:	426d      	negs	r5, r5
 8016530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016534:	4859      	ldr	r0, [pc, #356]	@ (801669c <_printf_i+0x238>)
 8016536:	230a      	movs	r3, #10
 8016538:	e011      	b.n	801655e <_printf_i+0xfa>
 801653a:	6821      	ldr	r1, [r4, #0]
 801653c:	6833      	ldr	r3, [r6, #0]
 801653e:	0608      	lsls	r0, r1, #24
 8016540:	f853 5b04 	ldr.w	r5, [r3], #4
 8016544:	d402      	bmi.n	801654c <_printf_i+0xe8>
 8016546:	0649      	lsls	r1, r1, #25
 8016548:	bf48      	it	mi
 801654a:	b2ad      	uxthmi	r5, r5
 801654c:	2f6f      	cmp	r7, #111	@ 0x6f
 801654e:	4853      	ldr	r0, [pc, #332]	@ (801669c <_printf_i+0x238>)
 8016550:	6033      	str	r3, [r6, #0]
 8016552:	bf14      	ite	ne
 8016554:	230a      	movne	r3, #10
 8016556:	2308      	moveq	r3, #8
 8016558:	2100      	movs	r1, #0
 801655a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801655e:	6866      	ldr	r6, [r4, #4]
 8016560:	60a6      	str	r6, [r4, #8]
 8016562:	2e00      	cmp	r6, #0
 8016564:	bfa2      	ittt	ge
 8016566:	6821      	ldrge	r1, [r4, #0]
 8016568:	f021 0104 	bicge.w	r1, r1, #4
 801656c:	6021      	strge	r1, [r4, #0]
 801656e:	b90d      	cbnz	r5, 8016574 <_printf_i+0x110>
 8016570:	2e00      	cmp	r6, #0
 8016572:	d04b      	beq.n	801660c <_printf_i+0x1a8>
 8016574:	4616      	mov	r6, r2
 8016576:	fbb5 f1f3 	udiv	r1, r5, r3
 801657a:	fb03 5711 	mls	r7, r3, r1, r5
 801657e:	5dc7      	ldrb	r7, [r0, r7]
 8016580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016584:	462f      	mov	r7, r5
 8016586:	42bb      	cmp	r3, r7
 8016588:	460d      	mov	r5, r1
 801658a:	d9f4      	bls.n	8016576 <_printf_i+0x112>
 801658c:	2b08      	cmp	r3, #8
 801658e:	d10b      	bne.n	80165a8 <_printf_i+0x144>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	07df      	lsls	r7, r3, #31
 8016594:	d508      	bpl.n	80165a8 <_printf_i+0x144>
 8016596:	6923      	ldr	r3, [r4, #16]
 8016598:	6861      	ldr	r1, [r4, #4]
 801659a:	4299      	cmp	r1, r3
 801659c:	bfde      	ittt	le
 801659e:	2330      	movle	r3, #48	@ 0x30
 80165a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80165a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80165a8:	1b92      	subs	r2, r2, r6
 80165aa:	6122      	str	r2, [r4, #16]
 80165ac:	f8cd a000 	str.w	sl, [sp]
 80165b0:	464b      	mov	r3, r9
 80165b2:	aa03      	add	r2, sp, #12
 80165b4:	4621      	mov	r1, r4
 80165b6:	4640      	mov	r0, r8
 80165b8:	f7ff fee6 	bl	8016388 <_printf_common>
 80165bc:	3001      	adds	r0, #1
 80165be:	d14a      	bne.n	8016656 <_printf_i+0x1f2>
 80165c0:	f04f 30ff 	mov.w	r0, #4294967295
 80165c4:	b004      	add	sp, #16
 80165c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ca:	6823      	ldr	r3, [r4, #0]
 80165cc:	f043 0320 	orr.w	r3, r3, #32
 80165d0:	6023      	str	r3, [r4, #0]
 80165d2:	4833      	ldr	r0, [pc, #204]	@ (80166a0 <_printf_i+0x23c>)
 80165d4:	2778      	movs	r7, #120	@ 0x78
 80165d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80165da:	6823      	ldr	r3, [r4, #0]
 80165dc:	6831      	ldr	r1, [r6, #0]
 80165de:	061f      	lsls	r7, r3, #24
 80165e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80165e4:	d402      	bmi.n	80165ec <_printf_i+0x188>
 80165e6:	065f      	lsls	r7, r3, #25
 80165e8:	bf48      	it	mi
 80165ea:	b2ad      	uxthmi	r5, r5
 80165ec:	6031      	str	r1, [r6, #0]
 80165ee:	07d9      	lsls	r1, r3, #31
 80165f0:	bf44      	itt	mi
 80165f2:	f043 0320 	orrmi.w	r3, r3, #32
 80165f6:	6023      	strmi	r3, [r4, #0]
 80165f8:	b11d      	cbz	r5, 8016602 <_printf_i+0x19e>
 80165fa:	2310      	movs	r3, #16
 80165fc:	e7ac      	b.n	8016558 <_printf_i+0xf4>
 80165fe:	4827      	ldr	r0, [pc, #156]	@ (801669c <_printf_i+0x238>)
 8016600:	e7e9      	b.n	80165d6 <_printf_i+0x172>
 8016602:	6823      	ldr	r3, [r4, #0]
 8016604:	f023 0320 	bic.w	r3, r3, #32
 8016608:	6023      	str	r3, [r4, #0]
 801660a:	e7f6      	b.n	80165fa <_printf_i+0x196>
 801660c:	4616      	mov	r6, r2
 801660e:	e7bd      	b.n	801658c <_printf_i+0x128>
 8016610:	6833      	ldr	r3, [r6, #0]
 8016612:	6825      	ldr	r5, [r4, #0]
 8016614:	6961      	ldr	r1, [r4, #20]
 8016616:	1d18      	adds	r0, r3, #4
 8016618:	6030      	str	r0, [r6, #0]
 801661a:	062e      	lsls	r6, r5, #24
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	d501      	bpl.n	8016624 <_printf_i+0x1c0>
 8016620:	6019      	str	r1, [r3, #0]
 8016622:	e002      	b.n	801662a <_printf_i+0x1c6>
 8016624:	0668      	lsls	r0, r5, #25
 8016626:	d5fb      	bpl.n	8016620 <_printf_i+0x1bc>
 8016628:	8019      	strh	r1, [r3, #0]
 801662a:	2300      	movs	r3, #0
 801662c:	6123      	str	r3, [r4, #16]
 801662e:	4616      	mov	r6, r2
 8016630:	e7bc      	b.n	80165ac <_printf_i+0x148>
 8016632:	6833      	ldr	r3, [r6, #0]
 8016634:	1d1a      	adds	r2, r3, #4
 8016636:	6032      	str	r2, [r6, #0]
 8016638:	681e      	ldr	r6, [r3, #0]
 801663a:	6862      	ldr	r2, [r4, #4]
 801663c:	2100      	movs	r1, #0
 801663e:	4630      	mov	r0, r6
 8016640:	f7e9 fdee 	bl	8000220 <memchr>
 8016644:	b108      	cbz	r0, 801664a <_printf_i+0x1e6>
 8016646:	1b80      	subs	r0, r0, r6
 8016648:	6060      	str	r0, [r4, #4]
 801664a:	6863      	ldr	r3, [r4, #4]
 801664c:	6123      	str	r3, [r4, #16]
 801664e:	2300      	movs	r3, #0
 8016650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016654:	e7aa      	b.n	80165ac <_printf_i+0x148>
 8016656:	6923      	ldr	r3, [r4, #16]
 8016658:	4632      	mov	r2, r6
 801665a:	4649      	mov	r1, r9
 801665c:	4640      	mov	r0, r8
 801665e:	47d0      	blx	sl
 8016660:	3001      	adds	r0, #1
 8016662:	d0ad      	beq.n	80165c0 <_printf_i+0x15c>
 8016664:	6823      	ldr	r3, [r4, #0]
 8016666:	079b      	lsls	r3, r3, #30
 8016668:	d413      	bmi.n	8016692 <_printf_i+0x22e>
 801666a:	68e0      	ldr	r0, [r4, #12]
 801666c:	9b03      	ldr	r3, [sp, #12]
 801666e:	4298      	cmp	r0, r3
 8016670:	bfb8      	it	lt
 8016672:	4618      	movlt	r0, r3
 8016674:	e7a6      	b.n	80165c4 <_printf_i+0x160>
 8016676:	2301      	movs	r3, #1
 8016678:	4632      	mov	r2, r6
 801667a:	4649      	mov	r1, r9
 801667c:	4640      	mov	r0, r8
 801667e:	47d0      	blx	sl
 8016680:	3001      	adds	r0, #1
 8016682:	d09d      	beq.n	80165c0 <_printf_i+0x15c>
 8016684:	3501      	adds	r5, #1
 8016686:	68e3      	ldr	r3, [r4, #12]
 8016688:	9903      	ldr	r1, [sp, #12]
 801668a:	1a5b      	subs	r3, r3, r1
 801668c:	42ab      	cmp	r3, r5
 801668e:	dcf2      	bgt.n	8016676 <_printf_i+0x212>
 8016690:	e7eb      	b.n	801666a <_printf_i+0x206>
 8016692:	2500      	movs	r5, #0
 8016694:	f104 0619 	add.w	r6, r4, #25
 8016698:	e7f5      	b.n	8016686 <_printf_i+0x222>
 801669a:	bf00      	nop
 801669c:	08019cdc 	.word	0x08019cdc
 80166a0:	08019ced 	.word	0x08019ced

080166a4 <__sflush_r>:
 80166a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80166a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ac:	0716      	lsls	r6, r2, #28
 80166ae:	4605      	mov	r5, r0
 80166b0:	460c      	mov	r4, r1
 80166b2:	d454      	bmi.n	801675e <__sflush_r+0xba>
 80166b4:	684b      	ldr	r3, [r1, #4]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	dc02      	bgt.n	80166c0 <__sflush_r+0x1c>
 80166ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80166bc:	2b00      	cmp	r3, #0
 80166be:	dd48      	ble.n	8016752 <__sflush_r+0xae>
 80166c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80166c2:	2e00      	cmp	r6, #0
 80166c4:	d045      	beq.n	8016752 <__sflush_r+0xae>
 80166c6:	2300      	movs	r3, #0
 80166c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80166cc:	682f      	ldr	r7, [r5, #0]
 80166ce:	6a21      	ldr	r1, [r4, #32]
 80166d0:	602b      	str	r3, [r5, #0]
 80166d2:	d030      	beq.n	8016736 <__sflush_r+0x92>
 80166d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80166d6:	89a3      	ldrh	r3, [r4, #12]
 80166d8:	0759      	lsls	r1, r3, #29
 80166da:	d505      	bpl.n	80166e8 <__sflush_r+0x44>
 80166dc:	6863      	ldr	r3, [r4, #4]
 80166de:	1ad2      	subs	r2, r2, r3
 80166e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80166e2:	b10b      	cbz	r3, 80166e8 <__sflush_r+0x44>
 80166e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80166e6:	1ad2      	subs	r2, r2, r3
 80166e8:	2300      	movs	r3, #0
 80166ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80166ec:	6a21      	ldr	r1, [r4, #32]
 80166ee:	4628      	mov	r0, r5
 80166f0:	47b0      	blx	r6
 80166f2:	1c43      	adds	r3, r0, #1
 80166f4:	89a3      	ldrh	r3, [r4, #12]
 80166f6:	d106      	bne.n	8016706 <__sflush_r+0x62>
 80166f8:	6829      	ldr	r1, [r5, #0]
 80166fa:	291d      	cmp	r1, #29
 80166fc:	d82b      	bhi.n	8016756 <__sflush_r+0xb2>
 80166fe:	4a2a      	ldr	r2, [pc, #168]	@ (80167a8 <__sflush_r+0x104>)
 8016700:	410a      	asrs	r2, r1
 8016702:	07d6      	lsls	r6, r2, #31
 8016704:	d427      	bmi.n	8016756 <__sflush_r+0xb2>
 8016706:	2200      	movs	r2, #0
 8016708:	6062      	str	r2, [r4, #4]
 801670a:	04d9      	lsls	r1, r3, #19
 801670c:	6922      	ldr	r2, [r4, #16]
 801670e:	6022      	str	r2, [r4, #0]
 8016710:	d504      	bpl.n	801671c <__sflush_r+0x78>
 8016712:	1c42      	adds	r2, r0, #1
 8016714:	d101      	bne.n	801671a <__sflush_r+0x76>
 8016716:	682b      	ldr	r3, [r5, #0]
 8016718:	b903      	cbnz	r3, 801671c <__sflush_r+0x78>
 801671a:	6560      	str	r0, [r4, #84]	@ 0x54
 801671c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801671e:	602f      	str	r7, [r5, #0]
 8016720:	b1b9      	cbz	r1, 8016752 <__sflush_r+0xae>
 8016722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016726:	4299      	cmp	r1, r3
 8016728:	d002      	beq.n	8016730 <__sflush_r+0x8c>
 801672a:	4628      	mov	r0, r5
 801672c:	f7ff fbea 	bl	8015f04 <_free_r>
 8016730:	2300      	movs	r3, #0
 8016732:	6363      	str	r3, [r4, #52]	@ 0x34
 8016734:	e00d      	b.n	8016752 <__sflush_r+0xae>
 8016736:	2301      	movs	r3, #1
 8016738:	4628      	mov	r0, r5
 801673a:	47b0      	blx	r6
 801673c:	4602      	mov	r2, r0
 801673e:	1c50      	adds	r0, r2, #1
 8016740:	d1c9      	bne.n	80166d6 <__sflush_r+0x32>
 8016742:	682b      	ldr	r3, [r5, #0]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d0c6      	beq.n	80166d6 <__sflush_r+0x32>
 8016748:	2b1d      	cmp	r3, #29
 801674a:	d001      	beq.n	8016750 <__sflush_r+0xac>
 801674c:	2b16      	cmp	r3, #22
 801674e:	d11e      	bne.n	801678e <__sflush_r+0xea>
 8016750:	602f      	str	r7, [r5, #0]
 8016752:	2000      	movs	r0, #0
 8016754:	e022      	b.n	801679c <__sflush_r+0xf8>
 8016756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801675a:	b21b      	sxth	r3, r3
 801675c:	e01b      	b.n	8016796 <__sflush_r+0xf2>
 801675e:	690f      	ldr	r7, [r1, #16]
 8016760:	2f00      	cmp	r7, #0
 8016762:	d0f6      	beq.n	8016752 <__sflush_r+0xae>
 8016764:	0793      	lsls	r3, r2, #30
 8016766:	680e      	ldr	r6, [r1, #0]
 8016768:	bf08      	it	eq
 801676a:	694b      	ldreq	r3, [r1, #20]
 801676c:	600f      	str	r7, [r1, #0]
 801676e:	bf18      	it	ne
 8016770:	2300      	movne	r3, #0
 8016772:	eba6 0807 	sub.w	r8, r6, r7
 8016776:	608b      	str	r3, [r1, #8]
 8016778:	f1b8 0f00 	cmp.w	r8, #0
 801677c:	dde9      	ble.n	8016752 <__sflush_r+0xae>
 801677e:	6a21      	ldr	r1, [r4, #32]
 8016780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016782:	4643      	mov	r3, r8
 8016784:	463a      	mov	r2, r7
 8016786:	4628      	mov	r0, r5
 8016788:	47b0      	blx	r6
 801678a:	2800      	cmp	r0, #0
 801678c:	dc08      	bgt.n	80167a0 <__sflush_r+0xfc>
 801678e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016796:	81a3      	strh	r3, [r4, #12]
 8016798:	f04f 30ff 	mov.w	r0, #4294967295
 801679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a0:	4407      	add	r7, r0
 80167a2:	eba8 0800 	sub.w	r8, r8, r0
 80167a6:	e7e7      	b.n	8016778 <__sflush_r+0xd4>
 80167a8:	dfbffffe 	.word	0xdfbffffe

080167ac <_fflush_r>:
 80167ac:	b538      	push	{r3, r4, r5, lr}
 80167ae:	690b      	ldr	r3, [r1, #16]
 80167b0:	4605      	mov	r5, r0
 80167b2:	460c      	mov	r4, r1
 80167b4:	b913      	cbnz	r3, 80167bc <_fflush_r+0x10>
 80167b6:	2500      	movs	r5, #0
 80167b8:	4628      	mov	r0, r5
 80167ba:	bd38      	pop	{r3, r4, r5, pc}
 80167bc:	b118      	cbz	r0, 80167c6 <_fflush_r+0x1a>
 80167be:	6a03      	ldr	r3, [r0, #32]
 80167c0:	b90b      	cbnz	r3, 80167c6 <_fflush_r+0x1a>
 80167c2:	f7ff f92f 	bl	8015a24 <__sinit>
 80167c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d0f3      	beq.n	80167b6 <_fflush_r+0xa>
 80167ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80167d0:	07d0      	lsls	r0, r2, #31
 80167d2:	d404      	bmi.n	80167de <_fflush_r+0x32>
 80167d4:	0599      	lsls	r1, r3, #22
 80167d6:	d402      	bmi.n	80167de <_fflush_r+0x32>
 80167d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80167da:	f7ff fb64 	bl	8015ea6 <__retarget_lock_acquire_recursive>
 80167de:	4628      	mov	r0, r5
 80167e0:	4621      	mov	r1, r4
 80167e2:	f7ff ff5f 	bl	80166a4 <__sflush_r>
 80167e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80167e8:	07da      	lsls	r2, r3, #31
 80167ea:	4605      	mov	r5, r0
 80167ec:	d4e4      	bmi.n	80167b8 <_fflush_r+0xc>
 80167ee:	89a3      	ldrh	r3, [r4, #12]
 80167f0:	059b      	lsls	r3, r3, #22
 80167f2:	d4e1      	bmi.n	80167b8 <_fflush_r+0xc>
 80167f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80167f6:	f7ff fb57 	bl	8015ea8 <__retarget_lock_release_recursive>
 80167fa:	e7dd      	b.n	80167b8 <_fflush_r+0xc>

080167fc <fiprintf>:
 80167fc:	b40e      	push	{r1, r2, r3}
 80167fe:	b503      	push	{r0, r1, lr}
 8016800:	4601      	mov	r1, r0
 8016802:	ab03      	add	r3, sp, #12
 8016804:	4805      	ldr	r0, [pc, #20]	@ (801681c <fiprintf+0x20>)
 8016806:	f853 2b04 	ldr.w	r2, [r3], #4
 801680a:	6800      	ldr	r0, [r0, #0]
 801680c:	9301      	str	r3, [sp, #4]
 801680e:	f7ff fca3 	bl	8016158 <_vfiprintf_r>
 8016812:	b002      	add	sp, #8
 8016814:	f85d eb04 	ldr.w	lr, [sp], #4
 8016818:	b003      	add	sp, #12
 801681a:	4770      	bx	lr
 801681c:	20000038 	.word	0x20000038

08016820 <__swhatbuf_r>:
 8016820:	b570      	push	{r4, r5, r6, lr}
 8016822:	460c      	mov	r4, r1
 8016824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016828:	2900      	cmp	r1, #0
 801682a:	b096      	sub	sp, #88	@ 0x58
 801682c:	4615      	mov	r5, r2
 801682e:	461e      	mov	r6, r3
 8016830:	da0d      	bge.n	801684e <__swhatbuf_r+0x2e>
 8016832:	89a3      	ldrh	r3, [r4, #12]
 8016834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016838:	f04f 0100 	mov.w	r1, #0
 801683c:	bf14      	ite	ne
 801683e:	2340      	movne	r3, #64	@ 0x40
 8016840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016844:	2000      	movs	r0, #0
 8016846:	6031      	str	r1, [r6, #0]
 8016848:	602b      	str	r3, [r5, #0]
 801684a:	b016      	add	sp, #88	@ 0x58
 801684c:	bd70      	pop	{r4, r5, r6, pc}
 801684e:	466a      	mov	r2, sp
 8016850:	f000 f848 	bl	80168e4 <_fstat_r>
 8016854:	2800      	cmp	r0, #0
 8016856:	dbec      	blt.n	8016832 <__swhatbuf_r+0x12>
 8016858:	9901      	ldr	r1, [sp, #4]
 801685a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801685e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016862:	4259      	negs	r1, r3
 8016864:	4159      	adcs	r1, r3
 8016866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801686a:	e7eb      	b.n	8016844 <__swhatbuf_r+0x24>

0801686c <__smakebuf_r>:
 801686c:	898b      	ldrh	r3, [r1, #12]
 801686e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016870:	079d      	lsls	r5, r3, #30
 8016872:	4606      	mov	r6, r0
 8016874:	460c      	mov	r4, r1
 8016876:	d507      	bpl.n	8016888 <__smakebuf_r+0x1c>
 8016878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801687c:	6023      	str	r3, [r4, #0]
 801687e:	6123      	str	r3, [r4, #16]
 8016880:	2301      	movs	r3, #1
 8016882:	6163      	str	r3, [r4, #20]
 8016884:	b003      	add	sp, #12
 8016886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016888:	ab01      	add	r3, sp, #4
 801688a:	466a      	mov	r2, sp
 801688c:	f7ff ffc8 	bl	8016820 <__swhatbuf_r>
 8016890:	9f00      	ldr	r7, [sp, #0]
 8016892:	4605      	mov	r5, r0
 8016894:	4639      	mov	r1, r7
 8016896:	4630      	mov	r0, r6
 8016898:	f7ff fba8 	bl	8015fec <_malloc_r>
 801689c:	b948      	cbnz	r0, 80168b2 <__smakebuf_r+0x46>
 801689e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168a2:	059a      	lsls	r2, r3, #22
 80168a4:	d4ee      	bmi.n	8016884 <__smakebuf_r+0x18>
 80168a6:	f023 0303 	bic.w	r3, r3, #3
 80168aa:	f043 0302 	orr.w	r3, r3, #2
 80168ae:	81a3      	strh	r3, [r4, #12]
 80168b0:	e7e2      	b.n	8016878 <__smakebuf_r+0xc>
 80168b2:	89a3      	ldrh	r3, [r4, #12]
 80168b4:	6020      	str	r0, [r4, #0]
 80168b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80168ba:	81a3      	strh	r3, [r4, #12]
 80168bc:	9b01      	ldr	r3, [sp, #4]
 80168be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80168c2:	b15b      	cbz	r3, 80168dc <__smakebuf_r+0x70>
 80168c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168c8:	4630      	mov	r0, r6
 80168ca:	f000 f81d 	bl	8016908 <_isatty_r>
 80168ce:	b128      	cbz	r0, 80168dc <__smakebuf_r+0x70>
 80168d0:	89a3      	ldrh	r3, [r4, #12]
 80168d2:	f023 0303 	bic.w	r3, r3, #3
 80168d6:	f043 0301 	orr.w	r3, r3, #1
 80168da:	81a3      	strh	r3, [r4, #12]
 80168dc:	89a3      	ldrh	r3, [r4, #12]
 80168de:	431d      	orrs	r5, r3
 80168e0:	81a5      	strh	r5, [r4, #12]
 80168e2:	e7cf      	b.n	8016884 <__smakebuf_r+0x18>

080168e4 <_fstat_r>:
 80168e4:	b538      	push	{r3, r4, r5, lr}
 80168e6:	4d07      	ldr	r5, [pc, #28]	@ (8016904 <_fstat_r+0x20>)
 80168e8:	2300      	movs	r3, #0
 80168ea:	4604      	mov	r4, r0
 80168ec:	4608      	mov	r0, r1
 80168ee:	4611      	mov	r1, r2
 80168f0:	602b      	str	r3, [r5, #0]
 80168f2:	f7ea fffc 	bl	80018ee <_fstat>
 80168f6:	1c43      	adds	r3, r0, #1
 80168f8:	d102      	bne.n	8016900 <_fstat_r+0x1c>
 80168fa:	682b      	ldr	r3, [r5, #0]
 80168fc:	b103      	cbz	r3, 8016900 <_fstat_r+0x1c>
 80168fe:	6023      	str	r3, [r4, #0]
 8016900:	bd38      	pop	{r3, r4, r5, pc}
 8016902:	bf00      	nop
 8016904:	20008eb8 	.word	0x20008eb8

08016908 <_isatty_r>:
 8016908:	b538      	push	{r3, r4, r5, lr}
 801690a:	4d06      	ldr	r5, [pc, #24]	@ (8016924 <_isatty_r+0x1c>)
 801690c:	2300      	movs	r3, #0
 801690e:	4604      	mov	r4, r0
 8016910:	4608      	mov	r0, r1
 8016912:	602b      	str	r3, [r5, #0]
 8016914:	f7ea fffb 	bl	800190e <_isatty>
 8016918:	1c43      	adds	r3, r0, #1
 801691a:	d102      	bne.n	8016922 <_isatty_r+0x1a>
 801691c:	682b      	ldr	r3, [r5, #0]
 801691e:	b103      	cbz	r3, 8016922 <_isatty_r+0x1a>
 8016920:	6023      	str	r3, [r4, #0]
 8016922:	bd38      	pop	{r3, r4, r5, pc}
 8016924:	20008eb8 	.word	0x20008eb8

08016928 <_sbrk_r>:
 8016928:	b538      	push	{r3, r4, r5, lr}
 801692a:	4d06      	ldr	r5, [pc, #24]	@ (8016944 <_sbrk_r+0x1c>)
 801692c:	2300      	movs	r3, #0
 801692e:	4604      	mov	r4, r0
 8016930:	4608      	mov	r0, r1
 8016932:	602b      	str	r3, [r5, #0]
 8016934:	f7eb f804 	bl	8001940 <_sbrk>
 8016938:	1c43      	adds	r3, r0, #1
 801693a:	d102      	bne.n	8016942 <_sbrk_r+0x1a>
 801693c:	682b      	ldr	r3, [r5, #0]
 801693e:	b103      	cbz	r3, 8016942 <_sbrk_r+0x1a>
 8016940:	6023      	str	r3, [r4, #0]
 8016942:	bd38      	pop	{r3, r4, r5, pc}
 8016944:	20008eb8 	.word	0x20008eb8

08016948 <abort>:
 8016948:	b508      	push	{r3, lr}
 801694a:	2006      	movs	r0, #6
 801694c:	f000 f82c 	bl	80169a8 <raise>
 8016950:	2001      	movs	r0, #1
 8016952:	f7ea ffb5 	bl	80018c0 <_exit>

08016956 <_raise_r>:
 8016956:	291f      	cmp	r1, #31
 8016958:	b538      	push	{r3, r4, r5, lr}
 801695a:	4605      	mov	r5, r0
 801695c:	460c      	mov	r4, r1
 801695e:	d904      	bls.n	801696a <_raise_r+0x14>
 8016960:	2316      	movs	r3, #22
 8016962:	6003      	str	r3, [r0, #0]
 8016964:	f04f 30ff 	mov.w	r0, #4294967295
 8016968:	bd38      	pop	{r3, r4, r5, pc}
 801696a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801696c:	b112      	cbz	r2, 8016974 <_raise_r+0x1e>
 801696e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016972:	b94b      	cbnz	r3, 8016988 <_raise_r+0x32>
 8016974:	4628      	mov	r0, r5
 8016976:	f000 f831 	bl	80169dc <_getpid_r>
 801697a:	4622      	mov	r2, r4
 801697c:	4601      	mov	r1, r0
 801697e:	4628      	mov	r0, r5
 8016980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016984:	f000 b818 	b.w	80169b8 <_kill_r>
 8016988:	2b01      	cmp	r3, #1
 801698a:	d00a      	beq.n	80169a2 <_raise_r+0x4c>
 801698c:	1c59      	adds	r1, r3, #1
 801698e:	d103      	bne.n	8016998 <_raise_r+0x42>
 8016990:	2316      	movs	r3, #22
 8016992:	6003      	str	r3, [r0, #0]
 8016994:	2001      	movs	r0, #1
 8016996:	e7e7      	b.n	8016968 <_raise_r+0x12>
 8016998:	2100      	movs	r1, #0
 801699a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801699e:	4620      	mov	r0, r4
 80169a0:	4798      	blx	r3
 80169a2:	2000      	movs	r0, #0
 80169a4:	e7e0      	b.n	8016968 <_raise_r+0x12>
	...

080169a8 <raise>:
 80169a8:	4b02      	ldr	r3, [pc, #8]	@ (80169b4 <raise+0xc>)
 80169aa:	4601      	mov	r1, r0
 80169ac:	6818      	ldr	r0, [r3, #0]
 80169ae:	f7ff bfd2 	b.w	8016956 <_raise_r>
 80169b2:	bf00      	nop
 80169b4:	20000038 	.word	0x20000038

080169b8 <_kill_r>:
 80169b8:	b538      	push	{r3, r4, r5, lr}
 80169ba:	4d07      	ldr	r5, [pc, #28]	@ (80169d8 <_kill_r+0x20>)
 80169bc:	2300      	movs	r3, #0
 80169be:	4604      	mov	r4, r0
 80169c0:	4608      	mov	r0, r1
 80169c2:	4611      	mov	r1, r2
 80169c4:	602b      	str	r3, [r5, #0]
 80169c6:	f7ea ff69 	bl	800189c <_kill>
 80169ca:	1c43      	adds	r3, r0, #1
 80169cc:	d102      	bne.n	80169d4 <_kill_r+0x1c>
 80169ce:	682b      	ldr	r3, [r5, #0]
 80169d0:	b103      	cbz	r3, 80169d4 <_kill_r+0x1c>
 80169d2:	6023      	str	r3, [r4, #0]
 80169d4:	bd38      	pop	{r3, r4, r5, pc}
 80169d6:	bf00      	nop
 80169d8:	20008eb8 	.word	0x20008eb8

080169dc <_getpid_r>:
 80169dc:	f7ea bf56 	b.w	800188c <_getpid>

080169e0 <_gettimeofday>:
 80169e0:	4b02      	ldr	r3, [pc, #8]	@ (80169ec <_gettimeofday+0xc>)
 80169e2:	2258      	movs	r2, #88	@ 0x58
 80169e4:	601a      	str	r2, [r3, #0]
 80169e6:	f04f 30ff 	mov.w	r0, #4294967295
 80169ea:	4770      	bx	lr
 80169ec:	20008eb8 	.word	0x20008eb8

080169f0 <_init>:
 80169f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f2:	bf00      	nop
 80169f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169f6:	bc08      	pop	{r3}
 80169f8:	469e      	mov	lr, r3
 80169fa:	4770      	bx	lr

080169fc <_fini>:
 80169fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fe:	bf00      	nop
 8016a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a02:	bc08      	pop	{r3}
 8016a04:	469e      	mov	lr, r3
 8016a06:	4770      	bx	lr
